Copyright (C) 2017-2020 Matthew R. Wette

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without any warranty.

2020-04-08  candidate V1.02.0
	* The C99 AST, munger and ffi helper, were updated.
	  updated C99 tree tags (e.g., array-of => ary-declr), and
	  and narrowed use of abs-...-declr to lowest level. 
	* udecl->mdecl was upated to use above updates: it's more robust,
 	  and it now generates (extern) tag for non-functions, to be
	  used in a new implementation of the ffi helper (1.03?)
	* reify-decl was added to make abstract C99 declarations concrete
	* added arch-info: sizeof, alignof for multiple targets
	* eval-c99-cx now works for sizeof(type)!
	* expand-typerefs has been cleaned up: it seems more robust;
	  many new test cases were added in c99-06.test.
	* cleaned up ffi-helper ; no more warning on redefined symbols
	  from guile 3.0; more enum/defines handled now that code to
	  evaluate constant expressions is more capable
	* module/nyacc/lalr.scm (make-lalr-parser): added another keyword
	  argument `env' to specify the enviornment for generating
	  the parser actions (default, @code{(current-module))})
	* Added #:env keyword option to make-lalr-parser.  This is where
	  the quoted actions are evaluated.
	* Added FH uintptr_t intptr_t defines for use w/ guile-2.0.
	* compile-ffi does not now produce .scm file on failure or ^C

2020-03-13  V1.01.2
	* fixed bug #57911, compile-ffi fails to parse function attributes 
	  preceded by *; added production rule to pointer:
	   ("*" attribute-specifiers ($$ '(pointer)))
	* updated example tcl and mlang code
	* fixed lex to accept F in 1.0e-3F;
	* c99 cpp now handles blank #-line

2020-02-22  V1.01.1 (V1.01.0 not released)
	* read-only struct-vable fields in ffi-helper changed to writable:
	  guile 3.0 deprecates read-only fields
	* Split expand-typerefs from c99/munge.scm into c99/munge-base.scm.
	  This should exliminate the warning about undefined expand-typerefs.
	* Eliminated deprecated symbols from c99/munge.scm: udecl->mspec
	  udecl->mspec/comm mspec->udecl tree->udict tree->udict/deep
	  declr->ident match-decl match-comp-decl match-param-decl
	  expand-decl-typerefs fix-fields.
	* now installing examples in $(DATADIR)/nyacc/examples
	* updated configure.ac to be guix-compatible
	* changed configure : removed guile.m4 pkg.m4 nyacc.m4

2020-01-07  V1.00.2
	* updated configure scripts to handle 2.0.14 via
	  --with-guile=/path/to/guile

2019-12-29  V1.00.1
	* in nyacc/util.scm, changed a letrec* to letrec
	* in nyacc/lang/util.scm, changed a letrec* to let*
	* updated all Makefile.in for autoconf conventions, using
	  abs_top_builddir and abs_top_srcdir
	* added test-suite/Makefile.in to replace lower level versions

2019-12-23  V1.00.0
	* Makefiles now use "$(MAKE)" instead of "make"
	* changed order of udict, ddict arguments to canize-enum-def-list
	* removed hacks from eval-cpp-expr prev used by canize-enum-def-list
	* cleaned up cxeval failures

2019-12-15  V0.99.3
	* in ffi-help.scm, filter "libm" from being added to dynamic-link:
	  on Ubuntu libm.so is a text file which referneces another libm.so;
	  dlopen() does not follow the reference, so just filter out since it
	  is already linked into guile
	* the C parser still breaks where typedefs are used otherwise, like
	    typedef int t; int foo(t *t);  // in libxlsxwriter
	* updated canize-enum-defs to use c99-eval-cx instead of cpp-eval
	  which was a hack; also cleaned up canize to work with comments
	  as attributes instead of elements; added test case

2019-10-23  V0.99.2 release
	* 0.99.1 fix broke things: __extension__ is not function macro
	* ffi-help does not load libm now (ubuntu bug?)

2019-10-19  V0.99.1 release
	* fixed nyacc/lang/c99/util.scm: in c99-def-help function macro
	  aliases changed from "__foo=__foo__" to "__foo(X)=__foo__(X)"

2019-07-20  V0.99.0 release
	* added fixed-point types to C99 parser
	  http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2001/n1290.pdf
	  make-num-reader accepts 0.25hr uhr r ur lr ulr hk uhk k uk lk ulk

	* cleaned up documentation

2019-05-30  V0.94.0 release
	* removed export statment from c99/util.scm

	* started C99 documentation

	* fixed some version number errors

2019-05-30  V0.93.0 release
	* reworked configure and Makefile.in files to detect doc
	  install dirs;
  
	* this CPP feature now works: #define /* hello */ abc 123

	* fixed issue in c99/eval-cpp-incl where #f was ending up in
	  output if no include file found

2019-04-02  V0.92.0 release
	
	* The distribution has been converted to using autoconf, but
	  without automake, which brings in a lot of rubble, IMO.

	* Fixed bug in the ffi-helper that was genering bad code for
	  unions.

2019-01-18  V0.91.0 release

	* module/nyacc/parse.scm (dmsg/n): added ntab information; so
	debug is now more informative:
	OLD:
	  state 99, token 33 => shift, goto 300
	NEW:
	  state 99, token additive-expression => shift, goto 300

	* ffi-help: converting composite literal to constant is no longer
	a fatal error

	* module/nyacc/lang/c99/cxeval.scm (eval-c99-cx): added case for
	comp-lit; made failure throw c99-error instead of calling error

	* module/nyacc/lang/c99/ffi-help.scm: updated error handling when
	cannot convert enum or #defined argument to a constant

2018-11-29  V0.90.0 release

	* module/nyacc/lang/c99/mach.scm (c99-spec): K&R function
	definitions have been removed, since conflict with __attribute__,
	as in: int foo(x) __attribute__ ((__bar__)) int x; { ... };
	Is attribute associated with declarator or declaration-specifiers?

	* update Major overhaul of __attribute__ handling in C99 parser

	* update merged nx-matlab updates from nxdev branch; added fix
	for nyacc/lex.scm to parse #xffff00000


	* update reworked the nyacc parser.scm file (see nyacc/ChangeLog);
	instead of separate parsers for interactive and non-interactive
	there is now one make-lalr-parser with optional #:interactive
	keyword argument; also added #:skip-if-unexp for skipping
	unexpected tokens (e.g., for comments -- this is useful);

	* update moved code from c99/xparser.scm into c99/parser.scm and
	deleted c99/xparser

	* update cleaned up C99 parser set up; the mapping between parse
	tables and the lexical analyzer setup was brittle; cleaned up
	circular dependency between the parser and lexical analyzer using
	letrec; see c99/parser.scm and c99/body.scm

	new release 0.85.0
	* changed the integrated hashed vs unhashed parser was split into
	/sym parsers for unhashed and /num for hashed.
	* updated interactive parsers, getting ready to and integrate file
	and interactive parsers, and overhaul C99 parser setup

