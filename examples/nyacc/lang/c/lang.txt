0 $start => translation-unit-proxy
1 translation-unit-proxy => translation-unit
2 declaration => declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment
3 $P1 =>
4 declaration-specifiers => storage-class-specifier
5 declaration-specifiers => storage-class-specifier declaration-specifiers
6 declaration-specifiers => type-specifier
7 declaration-specifiers => type-specifier declaration-specifiers
8 declaration-specifiers => type-qualifier
9 declaration-specifiers => type-qualifier declaration-specifiers
10 declaration-specifiers => function-specifier
11 declaration-specifiers => function-specifier declaration-specifiers
12 initialized-declarator-list => initialized-declarator
13 initialized-declarator-list => initialized-declarator-list "," initialized-declarator
14 initialized-declarator => declarator
15 initialized-declarator => declarator "=" initializer
16 storage-class-specifier => "auto"
17 storage-class-specifier => "extern"
18 storage-class-specifier => "register"
19 storage-class-specifier => "static"
20 storage-class-specifier => "typedef"
21 function-specifier => "inline"
22 type-specifier => enumeration-type-specifier
23 type-specifier => floating-point-type-specifier
24 type-specifier => integer-type-specifier
25 type-specifier => structure-type-specifier
26 type-specifier => typedef-name
27 type-specifier => union-type-specifier
28 type-specifier => void-type-specifier
29 type-qualifier => "const"
30 type-qualifier => "volatile"
31 type-qualifier => "restrict"
32 declarator => pointer-declarator
33 declarator => direct-declarator
34 direct-declarator => simple-declarator
35 direct-declarator => "(" declarator ")"
36 direct-declarator => function-declarator
37 direct-declarator => array-declarator
38 simple-declarator => identifier
39 pointer-declarator => pointer direct-declarator
40 pointer => "*" type-qualifier-list
41 pointer => "*"
42 pointer => "*" type-qualifier-list pointer
43 pointer => "*" pointer
44 type-qualifier-list => type-qualifier
45 type-qualifier-list => type-qualifier-list type-qualifier
46 array-declarator => direct-declarator "[" array-qualifier-list array-size-expression "]"
47 array-declarator => direct-declarator "[" array-qualifier-list "]"
48 array-declarator => direct-declarator "[" array-size-expression "]"
49 array-declarator => direct-declarator "[" "]"
50 array-declarator => direct-declarator "[" array-qualifier-list "*" "]"
51 array-declarator => direct-declarator "[" "*" "]"
52 array-qualifier-list => array-qualifier
53 array-qualifier-list => array-qualifier-list array-qualifier
54 array-qualifier => "static"
55 array-qualifier => "restrict"
56 array-qualifier => "const"
57 array-qualifier => "volatile"
58 array-size-expression => assignment-expression
59 function-declarator => direct-declarator "(" parameter-type-list ")"
60 function-declarator => direct-declarator "(" identifier-list ")"
61 function-declarator => direct-declarator "(" ")"
62 parameter-type-list => parameter-list
63 parameter-type-list => parameter-list "," "..."
64 parameter-list => parameter-declaration
65 parameter-list => parameter-list "," parameter-declaration
66 parameter-declaration => declaration-specifiers declarator
67 parameter-declaration => declaration-specifiers abstract-declarator
68 parameter-declaration => declaration-specifiers
69 identifier-list => identifier
70 identifier-list => identifier-list "," identifier
71 initializer => assignment-expression
72 initializer => "{" initializer-list "," "}"
73 initializer => "{" initializer-list "}"
74 initializer-list => initializer
75 initializer-list => initializer-list "," initializer
76 initializer-list => designation initializer
77 initializer-list => initializer-list "," designation initializer
78 designation => designator-list "="
79 designator-list => designator
80 designator-list => designator-list designator
81 designator => "[" constant-expression "]"
82 designator => "." identifier
83 integer-type-specifier => signed-type-specifier
84 integer-type-specifier => unsigned-type-specifier
85 integer-type-specifier => character-type-specifier
86 integer-type-specifier => bool-type-specifier
87 signed-type-specifier => "short"
88 signed-type-specifier => "int"
89 signed-type-specifier => "signed"
90 signed-type-specifier => "long"
91 unsigned-type-specifier => "unsigned"
92 character-type-specifier => "char"
93 bool-type-specifier => "_Bool"
94 floating-point-type-specifier => "float"
95 floating-point-type-specifier => "double"
96 floating-point-type-specifier => complex-type-specifier
97 complex-type-specifier => "_Complex"
98 enumeration-type-specifier => enumeration-type-definition
99 enumeration-type-specifier => enumeration-type-reference
100 enumeration-type-definition => "enum" enumeration-tag "{" enumeration-definition-list "}"
101 enumeration-type-definition => "enum" "{" enumeration-definition-list "}"
102 enumeration-type-definition => "enum" enumeration-tag "{" enumeration-definition-list "," "}"
103 enumeration-type-definition => "enum" "{" enumeration-definition-list "," "}"
104 enumeration-type-reference => "enum" enumeration-tag
105 enumeration-tag => identifier
106 enumeration-definition-list => enumeration-constant-definition
107 enumeration-definition-list => enumeration-definition-list "," enumeration-constant-definition
108 enumeration-constant-definition => enumeration-constant
109 enumeration-constant-definition => enumeration-constant "=" constant-expression
110 enumeration-constant => identifier
111 structure-type-specifier => structure-type-definition
112 structure-type-specifier => structure-type-reference
113 structure-type-definition => "struct" structure-tag "{" field-list "}"
114 structure-type-definition => "struct" "{" field-list "}"
115 structure-type-reference => "struct" structure-tag
116 structure-tag => identifier
117 field-list => component-declaration
118 field-list => field-list component-declaration
119 field-list => field-list lone-comment
120 component-declaration => type-specifier component-declarator-list ";" opt-code-comment
121 component-declarator-list => component-declarator
122 component-declarator-list => component-declarator-list "," component-declarator
123 component-declarator => simple-component
124 component-declarator => bit-field
125 simple-component => declarator
126 bit-field => declarator ":" width
127 bit-field => ":" width
128 width => constant-expression
129 union-type-specifier => union-type-definition
130 union-type-specifier => union-type-reference
131 union-type-definition => "union" union-tag "{" field-list "}"
132 union-type-definition => "union" "{" field-list "}"
133 union-type-reference => "union" union-tag
134 union-tag => identifier
135 void-type-specifier => "void"
136 typedef-name => 'typename
137 type-name => declaration-specifiers abstract-declarator
138 type-name => declaration-specifiers
139 abstract-declarator => pointer
140 abstract-declarator => pointer direct-abstract-declarator
141 abstract-declarator => direct-abstract-declarator
142 direct-abstract-declarator => "(" abstract-declarator ")"
143 direct-abstract-declarator => direct-abstract-declarator "[" "]"
144 direct-abstract-declarator => "[" "]"
145 direct-abstract-declarator => direct-abstract-declarator "[" expression "]"
146 direct-abstract-declarator => "[" expression "]"
147 direct-abstract-declarator => direct-abstract-declarator "[" "*" "]"
148 direct-abstract-declarator => "[" "*" "]"
149 direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list ")"
150 direct-abstract-declarator => direct-abstract-declarator "(" ")"
151 direct-abstract-declarator => "(" parameter-type-list ")"
152 direct-abstract-declarator => "(" ")"
153 primary-expression => identifier
154 primary-expression => constant
155 primary-expression => parenthesized-expression
156 parenthesized-expression => "(" expression ")"
157 postfix-expression => primary-expression
158 postfix-expression => subscript-expression
159 postfix-expression => component-selection-expression
160 postfix-expression => function-call
161 postfix-expression => postincrement-expression
162 postfix-expression => postdecrement-expression
163 postfix-expression => compound-literal
164 subscript-expression => postfix-expression "[" expression "]"
165 component-selection-expression => direct-component-selection
166 component-selection-expression => indirect-component-selection
167 direct-component-selection => postfix-expression "." identifier
168 indirect-component-selection => postfix-expression "->" identifier
169 function-call => postfix-expression "(" expression-list ")"
170 function-call => postfix-expression "(" ")"
171 expression-list => assignment-expression
172 expression-list => expression-list "," assignment-expression
173 postincrement-expression => postfix-expression "++"
174 postdecrement-expression => postfix-expression "--"
175 compound-literal => "(" type-name ")" "{" initializer-list "}"
176 compound-literal => "(" type-name ")" "{" initializer-list "," "}"
177 cast-expression => unary-expression
178 cast-expression => "(" type-name ")" cast-expression
179 unary-expression => postfix-expression
180 unary-expression => sizeof-expression
181 unary-expression => unary-minus-expression
182 unary-expression => unary-plus-expression
183 unary-expression => logical-negation-expression
184 unary-expression => bitwise-negation-expression
185 unary-expression => address-expression
186 unary-expression => indirection-expression
187 unary-expression => preincrement-expression
188 unary-expression => predecrement-expression
189 sizeof-expression => "sizeof" "(" type-name ")"
190 sizeof-expression => "sizeof" unary-expression
191 unary-minus-expression => "-" cast-expression
192 unary-plus-expression => "+" cast-expression
193 logical-negation-expression => "!" cast-expression
194 bitwise-negation-expression => "~" cast-expression
195 address-expression => "&" cast-expression
196 indirection-expression => "*" cast-expression
197 preincrement-expression => "++" unary-expression
198 predecrement-expression => "--" unary-expression
199 multiplicative-expression => cast-expression
200 multiplicative-expression => multiplicative-expression mult-op cast-expression
201 mult-op => "*"
202 mult-op => "/"
203 mult-op => "%"
204 additive-expression => multiplicative-expression
205 additive-expression => additive-expression add-op multiplicative-expression
206 add-op => "+"
207 add-op => "-"
208 shift-expression => additive-expression
209 shift-expression => shift-expression shift-op additive-expression
210 shift-op => "<<"
211 shift-op => ">>"
212 relational-expression => shift-expression
213 relational-expression => relational-expression relational-op shift-expression
214 relational-op => "<"
215 relational-op => "<="
216 relational-op => ">"
217 relational-op => ">="
218 equality-expression => relational-expression
219 equality-expression => equality-expression equality-op relational-expression
220 equality-op => "=="
221 equality-op => "!="
222 bitwise-or-expression => bitwise-xor-expression
223 bitwise-or-expression => bitwise-or-expression "|" bitwise-xor-expression
224 bitwise-xor-expression => bitwise-and-expression
225 bitwise-xor-expression => bitwise-xor-expression "^" bitwise-and-expression
226 bitwise-and-expression => equality-expression
227 bitwise-and-expression => bitwise-and-expression "&" equality-expression
228 logical-or-expression => logical-and-expression
229 logical-or-expression => logical-or-expression "||" logical-and-expression
230 logical-and-expression => bitwise-or-expression
231 logical-and-expression => logical-and-expression "&&" bitwise-or-expression
232 conditional-expression => logical-or-expression
233 conditional-expression => logical-or-expression "?" expression ":" conditional-expression
234 assignment-expression => conditional-expression
235 assignment-expression => unary-expression assignment-op assignment-expression
236 assignment-op => "="
237 assignment-op => "+="
238 assignment-op => "-="
239 assignment-op => "*="
240 assignment-op => "/="
241 assignment-op => "%="
242 assignment-op => "<<="
243 assignment-op => ">>="
244 assignment-op => "&="
245 assignment-op => "^="
246 assignment-op => "|="
247 comma-expression => assignment-expression
248 comma-expression => comma-expression "," assignment-expression
249 expression => comma-expression
250 constant-expression => conditional-expression
251 statement => expression-statement
252 statement => labeled-statement
253 statement => compound-statement
254 statement => conditional-statement
255 statement => iterative-statement
256 statement => switch-statement
257 statement => break-statement
258 statement => continue-statement
259 statement => return-statement
260 statement => goto-statement
261 statement => null-statement
262 expression-statement => expression ";"
263 labeled-statement => label ":" statement
264 label => named-label
265 label => case-label
266 label => default-label
267 compound-statement => "{" declaration-or-statement-list "}"
268 compound-statement => "{" "}"
269 declaration-or-statement-list => declaration-or-statement
270 declaration-or-statement-list => declaration-or-statement-list declaration-or-statement
271 declaration-or-statement => declaration
272 declaration-or-statement => statement
273 conditional-statement => if-statement
274 conditional-statement => if-else-statement
275 if-statement => "if" "(" expression ")" statement
276 if-else-statement => "if" "(" expression ")" statement "else" statement
277 iterative-statement => while-statement
278 iterative-statement => do-statement
279 iterative-statement => for-statement
280 while-statement => "while" "(" expression ")" statement
281 do-statement => "do" statement "while" "(" expression ")" ";"
282 for-statement => "for" for-expressions statement
283 for-expressions => "(" initial-clause expression ";" expression ")"
284 for-expressions => "(" initial-clause expression ";" ")"
285 for-expressions => "(" initial-clause ";" expression ")"
286 for-expressions => "(" initial-clause ";" ")"
287 initial-clause => expression ";"
288 initial-clause => ";"
289 initial-clause => declaration
290 switch-statement => "switch" "(" expression ")" statement
291 case-label => "case" constant-expression
292 default-label => "default"
293 break-statement => "break" ";"
294 continue-statement => "continue" ";"
295 return-statement => "return" expression ";"
296 return-statement => "return" ";"
297 goto-statement => "goto" named-label ";"
298 named-label => identifier
299 null-statement => ";"
300 translation-unit => top-level-declaration
301 translation-unit => translation-unit top-level-declaration
302 top-level-declaration => declaration
303 top-level-declaration => function-definition
304 top-level-declaration => lone-comment
305 top-level-declaration => cpp-statement
306 function-definition => function-def-specifier compound-statement
307 function-def-specifier => declaration-specifiers declarator declaration-list
308 function-def-specifier => declaration-specifiers declarator
309 function-def-specifier => declarator
310 declaration-list => declaration
311 declaration-list => declaration-list declaration
312 opt-code-comment =>
313 opt-code-comment => code-comment
314 identifier => '$ident
315 identifier => 'cpp-ident
316 constant => '$fx
317 constant => '$fl
318 constant => '$ch
319 constant => '$string
320 code-comment => '$code-comm
321 lone-comment => '$lone-comm
322 cpp-statement => 'cpp-stmt

0:	$start => . translation-unit-proxy ('$end)
	translation-unit-proxy => . translation-unit
	translation-unit => . top-level-declaration
	translation-unit => . translation-unit top-level-declaration
	top-level-declaration => . declaration
	top-level-declaration => . function-definition
	top-level-declaration => . lone-comment
	top-level-declaration => . cpp-statement
	declaration => . declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment
	function-definition => . function-def-specifier compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	function-def-specifier => . declaration-specifiers declarator declaration-list
	function-def-specifier => . declaration-specifiers declarator
	function-def-specifier => . declarator
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		"*" => shift 14
		identifier => shift 15
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		pointer => shift 31
		array-declarator => shift 32
		function-declarator => shift 33
		"(" => shift 34
		simple-declarator => shift 35
		direct-declarator => shift 36
		pointer-declarator => shift 37
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		declarator => shift 54
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		'cpp-stmt => shift 59
		'$lone-comm => shift 60
		function-def-specifier => shift 61
		declaration-specifiers => shift 62
		cpp-statement => shift 63
		lone-comment => shift 64
		function-definition => shift 65
		declaration => shift 66
		top-level-declaration => shift 67
		translation-unit => shift 68
		translation-unit-proxy => shift 69

1:	identifier => 'cpp-ident . ('cpp-ident '$ident "}" "]" "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" "?" "->" "." "--" "++" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" ":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "[" "(" "{")
		$default => reduce 315

2:	identifier => '$ident . ('cpp-ident '$ident "}" "]" "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" "?" "->" "." "--" "++" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" ":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "[" "(" "{")
		$default => reduce 314

3:	union-type-reference => "union" . union-tag (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	union-tag => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	union-type-definition => "union" . "{" field-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	union-type-definition => "union" . union-tag "{" field-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	union-tag => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 93
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 94
		union-tag => shift 95

4:	structure-type-reference => "struct" . structure-tag (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	structure-tag => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	structure-type-definition => "struct" . "{" field-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	structure-type-definition => "struct" . structure-tag "{" field-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	structure-tag => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 90
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 91
		structure-tag => shift 92

5:	enumeration-type-reference => "enum" . enumeration-tag (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-tag => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	enumeration-type-definition => "enum" . "{" enumeration-definition-list "," "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-type-definition => "enum" . enumeration-tag "{" enumeration-definition-list "," "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-tag => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	enumeration-type-definition => "enum" . "{" enumeration-definition-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-type-definition => "enum" . enumeration-tag "{" enumeration-definition-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-tag => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 87
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 88
		enumeration-tag => shift 89

6:	complex-type-specifier => "_Complex" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 97

7:	bool-type-specifier => "_Bool" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 93

8:	character-type-specifier => "char" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 92

9:	unsigned-type-specifier => "unsigned" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 91

10:	signed-type-specifier => "long" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 90

11:	signed-type-specifier => "signed" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 89

12:	signed-type-specifier => "int" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 88

13:	signed-type-specifier => "short" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 87

14:	pointer => "*" . pointer ("," ")" "[" "(" '$ident 'cpp-ident)
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	pointer => "*" . type-qualifier-list pointer ("," ")" "[" "(" '$ident 'cpp-ident)
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	pointer => "*" . ("," ")" "[" "(" '$ident 'cpp-ident)
	pointer => "*" . type-qualifier-list ("," ")" "[" "(" '$ident 'cpp-ident)
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		type-qualifier => shift 84
		type-qualifier-list => shift 85
		"*" => shift 14
		pointer => shift 86
		$default => reduce 41

15:	simple-declarator => identifier . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		$default => reduce 38

16:	typedef-name => 'typename . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 136

17:	void-type-specifier => "void" . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 135

18:	union-type-specifier => union-type-reference . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 130

19:	union-type-specifier => union-type-definition . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 129

20:	structure-type-specifier => structure-type-reference . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 112

21:	structure-type-specifier => structure-type-definition . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 111

22:	enumeration-type-specifier => enumeration-type-reference . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 99

23:	enumeration-type-specifier => enumeration-type-definition . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 98

24:	floating-point-type-specifier => complex-type-specifier . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 96

25:	floating-point-type-specifier => "double" . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 95

26:	floating-point-type-specifier => "float" . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 94

27:	integer-type-specifier => bool-type-specifier . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 86

28:	integer-type-specifier => character-type-specifier . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 85

29:	integer-type-specifier => unsigned-type-specifier . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 84

30:	integer-type-specifier => signed-type-specifier . (":" "[" ")" "," "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "(" '$ident 'cpp-ident "*")
		$default => reduce 83

31:	pointer-declarator => pointer . direct-declarator (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "{")
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	simple-declarator => . identifier
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 15
		array-declarator => shift 32
		function-declarator => shift 33
		"(" => shift 34
		simple-declarator => shift 35
		direct-declarator => shift 83

32:	direct-declarator => array-declarator . (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "[" "(" "{")
		$default => reduce 37

33:	direct-declarator => function-declarator . (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "[" "(" "{")
		$default => reduce 36

34:	direct-declarator => "(" . declarator ")" (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "[" "(" "{")
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		"*" => shift 14
		identifier => shift 15
		pointer => shift 31
		array-declarator => shift 32
		function-declarator => shift 33
		"(" => shift 34
		simple-declarator => shift 35
		direct-declarator => shift 36
		pointer-declarator => shift 37
		declarator => shift 82

35:	direct-declarator => simple-declarator . (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "[" "(" "{")
		$default => reduce 34

36:	function-declarator => direct-declarator . "(" ")" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	function-declarator => direct-declarator . "(" identifier-list ")" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	function-declarator => direct-declarator . "(" parameter-type-list ")" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-declarator => direct-declarator . "[" "*" "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-declarator => direct-declarator . "[" array-qualifier-list "*" "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-declarator => direct-declarator . "[" "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-declarator => direct-declarator . "[" array-size-expression "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-declarator => direct-declarator . "[" array-qualifier-list "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-declarator => direct-declarator . "[" array-qualifier-list array-size-expression "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	declarator => direct-declarator . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "{")
		"[" => shift 80
		"(" => shift 81
		$default => reduce 33

37:	declarator => pointer-declarator . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "{")
		$default => reduce 32

38:	type-qualifier => "restrict" . ("," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 31

39:	type-qualifier => "volatile" . ("," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 30

40:	type-qualifier => "const" . ("," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 29

41:	type-specifier => void-type-specifier . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 28

42:	type-specifier => union-type-specifier . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 27

43:	type-specifier => typedef-name . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 26

44:	type-specifier => structure-type-specifier . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 25

45:	type-specifier => integer-type-specifier . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 24

46:	type-specifier => floating-point-type-specifier . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 23

47:	type-specifier => enumeration-type-specifier . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 22

48:	function-specifier => "inline" . ("," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 21

49:	storage-class-specifier => "typedef" . ("," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 20

50:	storage-class-specifier => "static" . ("," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 19

51:	storage-class-specifier => "register" . ("," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 18

52:	storage-class-specifier => "extern" . ("," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 17

53:	storage-class-specifier => "auto" . ("," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 16

54:	function-def-specifier => declarator . ("{")
		"{" => reduce 309

55:	declaration-specifiers => function-specifier . declaration-specifiers ("[" ")" "," "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	declaration-specifiers => function-specifier . ("[" ")" "," "(" '$ident 'cpp-ident "*")
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 79
		$default => reduce 10

56:	declaration-specifiers => type-qualifier . declaration-specifiers ("[" ")" "," "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	declaration-specifiers => type-qualifier . ("[" ")" "," "(" '$ident 'cpp-ident "*")
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 78
		$default => reduce 8

57:	declaration-specifiers => type-specifier . declaration-specifiers ("[" ")" "," "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	declaration-specifiers => type-specifier . ("[" ")" "," "(" '$ident 'cpp-ident "*")
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 77
		$default => reduce 6

58:	declaration-specifiers => storage-class-specifier . declaration-specifiers ("[" ")" "," "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	declaration-specifiers => storage-class-specifier . ("[" ")" "," "(" '$ident 'cpp-ident "*")
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 76
		$default => reduce 4

59:	cpp-statement => 'cpp-stmt . ('$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 322

60:	lone-comment => '$lone-comm . ("}" '$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 321

61:	function-definition => function-def-specifier . compound-statement ('$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	compound-statement => . "{" declaration-or-statement-list "}"
	compound-statement => . "{" "}"
		"{" => shift 74
		compound-statement => shift 75

62:	function-def-specifier => declaration-specifiers . declarator ("{")
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	function-def-specifier => declaration-specifiers . declarator declaration-list ("{")
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	declaration => declaration-specifiers . initialized-declarator-list $P1 ";" opt-code-comment ('$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	initialized-declarator-list => . initialized-declarator
	initialized-declarator-list => . initialized-declarator-list "," initialized-declarator
	initialized-declarator => . declarator
	initialized-declarator => . declarator "=" initializer
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
		initialized-declarator => shift 71
		initialized-declarator-list => shift 72
		'cpp-ident => shift 1
		'$ident => shift 2
		"*" => shift 14
		identifier => shift 15
		pointer => shift 31
		array-declarator => shift 32
		function-declarator => shift 33
		"(" => shift 34
		simple-declarator => shift 35
		direct-declarator => shift 36
		pointer-declarator => shift 37
		declarator => shift 73

63:	top-level-declaration => cpp-statement . ('$end "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "*" 'cpp-ident '$ident "(" '$lone-comm 'cpp-stmt)
		$default => reduce 305

64:	top-level-declaration => lone-comment . ('$end "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "*" 'cpp-ident '$ident "(" '$lone-comm 'cpp-stmt)
		$default => reduce 304

65:	top-level-declaration => function-definition . ('$end "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "*" 'cpp-ident '$ident "(" '$lone-comm 'cpp-stmt)
		$default => reduce 303

66:	top-level-declaration => declaration . ('$end "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" "*" 'cpp-ident '$ident "(" '$lone-comm 'cpp-stmt)
		$default => reduce 302

67:	translation-unit => top-level-declaration . ('$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 300

68:	translation-unit => translation-unit . top-level-declaration ('$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	top-level-declaration => . declaration
	top-level-declaration => . function-definition
	top-level-declaration => . lone-comment
	top-level-declaration => . cpp-statement
	declaration => . declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment
	function-definition => . function-def-specifier compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	function-def-specifier => . declaration-specifiers declarator declaration-list
	function-def-specifier => . declaration-specifiers declarator
	function-def-specifier => . declarator
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	identifier => . '$ident
	identifier => . 'cpp-ident
	translation-unit-proxy => translation-unit . ('$end)
		'cpp-ident => shift 1
		'$ident => shift 2
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		"*" => shift 14
		identifier => shift 15
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		pointer => shift 31
		array-declarator => shift 32
		function-declarator => shift 33
		"(" => shift 34
		simple-declarator => shift 35
		direct-declarator => shift 36
		pointer-declarator => shift 37
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		declarator => shift 54
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		'cpp-stmt => shift 59
		'$lone-comm => shift 60
		function-def-specifier => shift 61
		declaration-specifiers => shift 62
		cpp-statement => shift 63
		lone-comment => shift 64
		function-definition => shift 65
		declaration => shift 66
		top-level-declaration => shift 70
		'$end => reduce 1

69:	$start => translation-unit-proxy . ('$end)
		'$end => accept 0

70:	translation-unit => translation-unit top-level-declaration . ('$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 301

71:	initialized-declarator-list => initialized-declarator . ("," ";")
		";" => reduce 12
		"," => reduce 12

72:	initialized-declarator-list => initialized-declarator-list . "," initialized-declarator ("," ";")
	declaration => declaration-specifiers initialized-declarator-list . $P1 ";" opt-code-comment (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" "--" "++" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string "}" '$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	$P1 => .
		$P1 => shift 221
		"," => shift 222
		";" => reduce 3

73:	initialized-declarator => declarator . "=" initializer ("," ";")
	initialized-declarator => declarator . ("," ";")
	function-def-specifier => declaration-specifiers declarator . declaration-list ("{")
	declaration-list => . declaration
	declaration-list => . declaration-list declaration
	declaration => . declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	function-def-specifier => declaration-specifiers declarator . ("{")
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 212
		declaration => shift 218
		declaration-list => shift 219
		"=" => shift 220
		";" => reduce 14
		"," => reduce 14
		"{" => reduce 308

74:	compound-statement => "{" . "}" ('$end 'cpp-stmt '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
	compound-statement => "{" . declaration-or-statement-list "}" ('$end 'cpp-stmt '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
	declaration-or-statement-list => . declaration-or-statement
	declaration-or-statement-list => . declaration-or-statement-list declaration-or-statement
	declaration-or-statement => . declaration
	declaration-or-statement => . statement
	declaration => . declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment
	statement => . expression-statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . conditional-statement
	statement => . iterative-statement
	statement => . switch-statement
	statement => . break-statement
	statement => . continue-statement
	statement => . return-statement
	statement => . goto-statement
	statement => . null-statement
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	expression-statement => . expression ";"
	labeled-statement => . label ":" statement
	compound-statement => . "{" declaration-or-statement-list "}"
	compound-statement => . "{" "}"
	conditional-statement => . if-statement
	conditional-statement => . if-else-statement
	iterative-statement => . while-statement
	iterative-statement => . do-statement
	iterative-statement => . for-statement
	switch-statement => . "switch" "(" expression ")" statement
	break-statement => . "break" ";"
	continue-statement => . "continue" ";"
	return-statement => . "return" expression ";"
	return-statement => . "return" ";"
	goto-statement => . "goto" named-label ";"
	null-statement => . ";"
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	expression => . comma-expression
	label => . named-label
	label => . case-label
	label => . default-label
	if-statement => . "if" "(" expression ")" statement
	if-else-statement => . "if" "(" expression ")" statement "else" statement
	while-statement => . "while" "(" expression ")" statement
	do-statement => . "do" statement "while" "(" expression ")" ";"
	for-statement => . "for" for-expressions statement
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	case-label => . "case" constant-expression
	default-label => . "default"
	named-label => . identifier
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		'cpp-ident => shift 1
		'$ident => shift 2
		unary-expression => shift 165
		conditional-expression => shift 166
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		identifier => shift 176
		"default" => shift 177
		"case" => shift 178
		assignment-expression => shift 179
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"for" => shift 180
		"do" => shift 181
		"while" => shift 182
		"if" => shift 183
		default-label => shift 184
		case-label => shift 185
		named-label => shift 186
		comma-expression => shift 187
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		";" => shift 188
		"goto" => shift 189
		"return" => shift 190
		"continue" => shift 191
		"break" => shift 192
		"switch" => shift 193
		for-statement => shift 194
		do-statement => shift 195
		while-statement => shift 196
		if-else-statement => shift 197
		if-statement => shift 198
		"{" => shift 74
		label => shift 199
		expression => shift 200
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		null-statement => shift 201
		goto-statement => shift 202
		return-statement => shift 203
		continue-statement => shift 204
		break-statement => shift 205
		switch-statement => shift 206
		iterative-statement => shift 207
		conditional-statement => shift 208
		compound-statement => shift 209
		labeled-statement => shift 210
		expression-statement => shift 211
		declaration-specifiers => shift 212
		statement => shift 213
		declaration => shift 214
		declaration-or-statement => shift 215
		declaration-or-statement-list => shift 216
		"}" => shift 217

75:	function-definition => function-def-specifier compound-statement . ('$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 306

76:	declaration-specifiers => storage-class-specifier declaration-specifiers . ("[" ")" "," "(" '$ident 'cpp-ident "*")
		$default => reduce 5

77:	declaration-specifiers => type-specifier declaration-specifiers . ("[" ")" "," "(" '$ident 'cpp-ident "*")
		$default => reduce 7

78:	declaration-specifiers => type-qualifier declaration-specifiers . ("[" ")" "," "(" '$ident 'cpp-ident "*")
		$default => reduce 9

79:	declaration-specifiers => function-specifier declaration-specifiers . ("[" ")" "," "(" '$ident 'cpp-ident "*")
		$default => reduce 11

80:	array-declarator => direct-declarator "[" . array-qualifier-list array-size-expression "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-qualifier-list => . array-qualifier
	array-qualifier-list => . array-qualifier-list array-qualifier
	array-qualifier => . "static"
	array-qualifier => . "restrict"
	array-qualifier => . "const"
	array-qualifier => . "volatile"
	array-declarator => direct-declarator "[" . array-qualifier-list "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-qualifier-list => . array-qualifier
	array-qualifier-list => . array-qualifier-list array-qualifier
	array-qualifier => . "static"
	array-qualifier => . "restrict"
	array-qualifier => . "const"
	array-qualifier => . "volatile"
	array-declarator => direct-declarator "[" . array-size-expression "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-size-expression => . assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	array-declarator => direct-declarator "[" . "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-declarator => direct-declarator "[" . array-qualifier-list "*" "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-qualifier-list => . array-qualifier
	array-qualifier-list => . array-qualifier-list array-qualifier
	array-qualifier => . "static"
	array-qualifier => . "restrict"
	array-qualifier => . "const"
	array-qualifier => . "volatile"
	array-declarator => direct-declarator "[" . "*" "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		"]" => shift 117
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 140
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 167
		array-size-expression => shift 168
		"volatile" => shift 169
		"const" => shift 170
		"restrict" => shift 171
		"static" => shift 172
		array-qualifier => shift 173
		array-qualifier-list => shift 174

81:	function-declarator => direct-declarator "(" . parameter-type-list ")" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	function-declarator => direct-declarator "(" . identifier-list ")" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	identifier-list => . identifier
	identifier-list => . identifier-list "," identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	function-declarator => direct-declarator "(" . ")" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		")" => shift 110
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 111
		identifier-list => shift 112
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 113
		parameter-declaration => shift 114
		parameter-list => shift 115
		parameter-type-list => shift 116

82:	direct-declarator => "(" declarator . ")" (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "[" "(" "{")
		")" => shift 109

83:	function-declarator => direct-declarator . "(" ")" (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "{" "(" "[")
	function-declarator => direct-declarator . "(" identifier-list ")" (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "{" "(" "[")
	function-declarator => direct-declarator . "(" parameter-type-list ")" (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "{" "(" "[")
	array-declarator => direct-declarator . "[" "*" "]" (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "{" "(" "[")
	array-declarator => direct-declarator . "[" array-qualifier-list "*" "]" (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "{" "(" "[")
	array-declarator => direct-declarator . "[" "]" (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "{" "(" "[")
	array-declarator => direct-declarator . "[" array-size-expression "]" (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "{" "(" "[")
	array-declarator => direct-declarator . "[" array-qualifier-list "]" (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "{" "(" "[")
	array-declarator => direct-declarator . "[" array-qualifier-list array-size-expression "]" (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "{" "(" "[")
	pointer-declarator => pointer direct-declarator . (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "{")
		"[" => shift 80
		"(" => shift 81
		$default => reduce 39

84:	type-qualifier-list => type-qualifier . ("," ")" "[" "(" '$ident 'cpp-ident "const" "volatile" "restrict" "*")
		$default => reduce 44

85:	pointer => "*" type-qualifier-list . ("," ")" "[" "(" '$ident 'cpp-ident)
	type-qualifier-list => type-qualifier-list . type-qualifier ("," ")" "[" "(" '$ident 'cpp-ident "const" "volatile" "restrict" "*")
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	pointer => "*" type-qualifier-list . pointer ("," ")" "[" "(" '$ident 'cpp-ident)
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
		"*" => shift 14
		pointer => shift 107
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		type-qualifier => shift 108
		$default => reduce 40

86:	pointer => "*" pointer . ("," ")" "[" "(" '$ident 'cpp-ident)
		$default => reduce 43

87:	enumeration-type-definition => "enum" "{" . enumeration-definition-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-definition-list => . enumeration-constant-definition
	enumeration-definition-list => . enumeration-definition-list "," enumeration-constant-definition
	enumeration-constant-definition => . enumeration-constant
	enumeration-constant-definition => . enumeration-constant "=" constant-expression
	enumeration-constant => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	enumeration-type-definition => "enum" "{" . enumeration-definition-list "," "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-definition-list => . enumeration-constant-definition
	enumeration-definition-list => . enumeration-definition-list "," enumeration-constant-definition
	enumeration-constant-definition => . enumeration-constant
	enumeration-constant-definition => . enumeration-constant "=" constant-expression
	enumeration-constant => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 103
		enumeration-constant => shift 104
		enumeration-constant-definition => shift 105
		enumeration-definition-list => shift 106

88:	enumeration-tag => identifier . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "{")
		$default => reduce 105

89:	enumeration-type-definition => "enum" enumeration-tag . "{" enumeration-definition-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-type-definition => "enum" enumeration-tag . "{" enumeration-definition-list "," "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-type-reference => "enum" enumeration-tag . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		"{" => shift 102
		$default => reduce 104

90:	structure-type-definition => "struct" "{" . field-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	field-list => . component-declaration
	field-list => . field-list component-declaration
	field-list => . field-list lone-comment
	component-declaration => . type-specifier component-declarator-list ";" opt-code-comment
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		type-specifier => shift 97
		component-declaration => shift 98
		field-list => shift 101

91:	structure-tag => identifier . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "{")
		$default => reduce 116

92:	structure-type-definition => "struct" structure-tag . "{" field-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	structure-type-reference => "struct" structure-tag . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		"{" => shift 100
		$default => reduce 115

93:	union-type-definition => "union" "{" . field-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	field-list => . component-declaration
	field-list => . field-list component-declaration
	field-list => . field-list lone-comment
	component-declaration => . type-specifier component-declarator-list ";" opt-code-comment
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		type-specifier => shift 97
		component-declaration => shift 98
		field-list => shift 99

94:	union-tag => identifier . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "{")
		$default => reduce 134

95:	union-type-definition => "union" union-tag . "{" field-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	union-type-reference => "union" union-tag . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		"{" => shift 96
		$default => reduce 133

96:	union-type-definition => "union" union-tag "{" . field-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	field-list => . component-declaration
	field-list => . field-list component-declaration
	field-list => . field-list lone-comment
	component-declaration => . type-specifier component-declarator-list ";" opt-code-comment
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		type-specifier => shift 97
		component-declaration => shift 98
		field-list => shift 337

97:	component-declaration => type-specifier . component-declarator-list ";" opt-code-comment ('$lone-comm "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "}")
	component-declarator-list => . component-declarator
	component-declarator-list => . component-declarator-list "," component-declarator
	component-declarator => . simple-component
	component-declarator => . bit-field
	simple-component => . declarator
	bit-field => . declarator ":" width
	bit-field => . ":" width
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		"*" => shift 14
		identifier => shift 15
		pointer => shift 31
		array-declarator => shift 32
		function-declarator => shift 33
		"(" => shift 34
		simple-declarator => shift 35
		direct-declarator => shift 36
		pointer-declarator => shift 37
		":" => shift 331
		declarator => shift 332
		bit-field => shift 333
		simple-component => shift 334
		component-declarator => shift 335
		component-declarator-list => shift 336

98:	field-list => component-declaration . ("void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" '$lone-comm "}")
		$default => reduce 117

99:	field-list => field-list . lone-comment ("void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" '$lone-comm "}")
	lone-comment => . '$lone-comm
	field-list => field-list . component-declaration ("void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" '$lone-comm "}")
	component-declaration => . type-specifier component-declarator-list ";" opt-code-comment
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	union-type-definition => "union" "{" field-list . "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		"}" => shift 330
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		type-specifier => shift 97
		component-declaration => shift 327
		'$lone-comm => shift 60
		lone-comment => shift 328

100:	structure-type-definition => "struct" structure-tag "{" . field-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	field-list => . component-declaration
	field-list => . field-list component-declaration
	field-list => . field-list lone-comment
	component-declaration => . type-specifier component-declarator-list ";" opt-code-comment
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		type-specifier => shift 97
		component-declaration => shift 98
		field-list => shift 329

101:	field-list => field-list . lone-comment ("void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" '$lone-comm "}")
	lone-comment => . '$lone-comm
	field-list => field-list . component-declaration ("void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" '$lone-comm "}")
	component-declaration => . type-specifier component-declarator-list ";" opt-code-comment
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	structure-type-definition => "struct" "{" field-list . "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		"}" => shift 326
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		type-specifier => shift 97
		component-declaration => shift 327
		'$lone-comm => shift 60
		lone-comment => shift 328

102:	enumeration-type-definition => "enum" enumeration-tag "{" . enumeration-definition-list "," "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-definition-list => . enumeration-constant-definition
	enumeration-definition-list => . enumeration-definition-list "," enumeration-constant-definition
	enumeration-constant-definition => . enumeration-constant
	enumeration-constant-definition => . enumeration-constant "=" constant-expression
	enumeration-constant => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	enumeration-type-definition => "enum" enumeration-tag "{" . enumeration-definition-list "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-definition-list => . enumeration-constant-definition
	enumeration-definition-list => . enumeration-definition-list "," enumeration-constant-definition
	enumeration-constant-definition => . enumeration-constant
	enumeration-constant-definition => . enumeration-constant "=" constant-expression
	enumeration-constant => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 103
		enumeration-constant => shift 104
		enumeration-constant-definition => shift 105
		enumeration-definition-list => shift 325

103:	enumeration-constant => identifier . ("," "}" "=")
		"=" => reduce 110
		"}" => reduce 110
		"," => reduce 110

104:	enumeration-constant-definition => enumeration-constant . "=" constant-expression ("," "}")
	enumeration-constant-definition => enumeration-constant . ("," "}")
		"=" => shift 324
		"}" => reduce 108
		"," => reduce 108

105:	enumeration-definition-list => enumeration-constant-definition . ("," "}")
		"}" => reduce 106
		"," => reduce 106

106:	enumeration-type-definition => "enum" "{" enumeration-definition-list . "," "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-definition-list => enumeration-definition-list . "," enumeration-constant-definition ("," "}")
	enumeration-type-definition => "enum" "{" enumeration-definition-list . "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		"}" => shift 322
		"," => shift 323

107:	pointer => "*" type-qualifier-list pointer . ("," ")" "[" "(" '$ident 'cpp-ident)
		$default => reduce 42

108:	type-qualifier-list => type-qualifier-list type-qualifier . ("," ")" "[" "(" '$ident 'cpp-ident "const" "volatile" "restrict" "*")
		$default => reduce 45

109:	direct-declarator => "(" declarator ")" . (":" "," "=" ";" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" ")" "[" "(" "{")
		$default => reduce 35

110:	function-declarator => direct-declarator "(" ")" . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		$default => reduce 61

111:	identifier-list => identifier . ("," ")")
		")" => reduce 69
		"," => reduce 69

112:	identifier-list => identifier-list . "," identifier ("," ")")
	function-declarator => direct-declarator "(" identifier-list . ")" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		")" => shift 320
		"," => shift 321

113:	parameter-declaration => declaration-specifiers . ("," ")")
	parameter-declaration => declaration-specifiers . abstract-declarator ("," ")")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" expression "]"
	direct-abstract-declarator => . "[" expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	parameter-declaration => declaration-specifiers . declarator ("," ")")
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 15
		array-declarator => shift 32
		function-declarator => shift 33
		simple-declarator => shift 35
		direct-declarator => shift 36
		pointer-declarator => shift 37
		declarator => shift 314
		"[" => shift 315
		"(" => shift 316
		"*" => shift 14
		direct-abstract-declarator => shift 317
		pointer => shift 318
		abstract-declarator => shift 319
		")" => reduce 68
		"," => reduce 68

114:	parameter-list => parameter-declaration . (")" ",")
		"," => reduce 64
		")" => reduce 64

115:	parameter-list => parameter-list . "," parameter-declaration (")" ",")
	parameter-type-list => parameter-list . "," "..." (")")
	parameter-type-list => parameter-list . (")")
		"," => shift 313
		")" => reduce 62

116:	function-declarator => direct-declarator "(" parameter-type-list . ")" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		")" => shift 312

117:	array-declarator => direct-declarator "[" "]" . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		$default => reduce 49

118:	multiplicative-expression => cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 199

119:	multiplicative-expression => multiplicative-expression . mult-op cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	mult-op => . "*"
	mult-op => . "/"
	mult-op => . "%"
	additive-expression => multiplicative-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" ";" "?")
		"%" => shift 308
		"/" => shift 309
		"*" => shift 310
		mult-op => shift 311
		$default => reduce 204

120:	additive-expression => additive-expression . add-op multiplicative-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" ";" "?")
	add-op => . "+"
	add-op => . "-"
	shift-expression => additive-expression . (":" "}" ")" "]" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"-" => shift 305
		"+" => shift 306
		add-op => shift 307
		$default => reduce 208

121:	shift-expression => shift-expression . shift-op additive-expression (":" "}" ")" "]" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	shift-op => . "<<"
	shift-op => . ">>"
	relational-expression => shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ";" "?")
		">>" => shift 302
		"<<" => shift 303
		shift-op => shift 304
		$default => reduce 212

122:	relational-expression => relational-expression . relational-op shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ";" "?")
	relational-op => . "<"
	relational-op => . "<="
	relational-op => . ">"
	relational-op => . ">="
	equality-expression => relational-expression . (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		">=" => shift 297
		">" => shift 298
		"<=" => shift 299
		"<" => shift 300
		relational-op => shift 301
		$default => reduce 218

123:	equality-expression => equality-expression . equality-op relational-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	equality-op => . "=="
	equality-op => . "!="
	bitwise-and-expression => equality-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
		"!=" => shift 294
		"==" => shift 295
		equality-op => shift 296
		$default => reduce 226

124:	bitwise-and-expression => bitwise-and-expression . "&" equality-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
	bitwise-xor-expression => bitwise-and-expression . (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 293
		$default => reduce 224

125:	constant => '$string . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 319

126:	constant => '$ch . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 318

127:	constant => '$fl . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 317

128:	constant => '$fx . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 316

129:	bitwise-xor-expression => bitwise-xor-expression . "^" bitwise-and-expression (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
	bitwise-or-expression => bitwise-xor-expression . (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
		"^" => shift 292
		$default => reduce 222

130:	bitwise-or-expression => bitwise-or-expression . "|" bitwise-xor-expression (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
	logical-and-expression => bitwise-or-expression . (":" "}" ")" "]" "&&" "||" "," "?" ";")
		"|" => shift 291
		$default => reduce 230

131:	cast-expression => "(" . type-name ")" cast-expression ("|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	type-name => . declaration-specifiers abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	parenthesized-expression => "(" . expression ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	compound-literal => "(" . type-name ")" "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	type-name => . declaration-specifiers abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	compound-literal => "(" . type-name ")" "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	type-name => . declaration-specifiers abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 288
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 289
		type-name => shift 290

132:	component-selection-expression => indirect-component-selection . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 166

133:	component-selection-expression => direct-component-selection . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 165

134:	primary-expression => parenthesized-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 155

135:	primary-expression => constant . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 154

136:	primary-expression => identifier . (":" "}" ";" "," ")" "||" "&&" "|" "^" "&" "==" "!=" ">=" ">" "<=" "<" "<<" ">>" "-" "+" "*" "/" "%" "?" "]" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 153

137:	logical-and-expression => logical-and-expression . "&&" bitwise-or-expression (":" "}" ")" "]" "&&" "||" "," "?" ";")
	logical-or-expression => logical-and-expression . (":" "}" ")" "]" "," "||" ";" "?")
		"&&" => shift 287
		$default => reduce 228

138:	predecrement-expression => "--" . unary-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		"(" => shift 284
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 286

139:	preincrement-expression => "++" . unary-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		"(" => shift 284
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 285

140:	array-declarator => direct-declarator "[" "*" . "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	indirection-expression => "*" . cast-expression ("%" "/" "*" "+" "-" ">>" "<<" "<" "<=" ">" ">=" "!=" "==" "&" "^" "|" "&&" "||" "]" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 250
		"]" => shift 283

141:	address-expression => "&" . cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 282

142:	bitwise-negation-expression => "~" . cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 281

143:	logical-negation-expression => "!" . cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 280

144:	unary-plus-expression => "+" . cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 279

145:	unary-minus-expression => "-" . cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 278

146:	sizeof-expression => "sizeof" . unary-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	sizeof-expression => "sizeof" . "(" type-name ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		"(" => shift 276
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 277

147:	postfix-expression => compound-literal . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 163

148:	postfix-expression => postdecrement-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 162

149:	postfix-expression => postincrement-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 161

150:	postfix-expression => function-call . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 160

151:	postfix-expression => component-selection-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 159

152:	postfix-expression => subscript-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 158

153:	postfix-expression => primary-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 157

154:	logical-or-expression => logical-or-expression . "||" logical-and-expression (":" "}" ")" "]" "," "||" ";" "?")
	conditional-expression => logical-or-expression . "?" expression ":" conditional-expression (":" "}" ")" "]" "," ";")
	conditional-expression => logical-or-expression . (":" "}" ")" "]" "," ";")
		"?" => shift 274
		"||" => shift 275
		$default => reduce 232

155:	unary-expression => predecrement-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 188

156:	unary-expression => preincrement-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 187

157:	unary-expression => indirection-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 186

158:	unary-expression => address-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 185

159:	unary-expression => bitwise-negation-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 184

160:	unary-expression => logical-negation-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 183

161:	unary-expression => unary-plus-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 182

162:	unary-expression => unary-minus-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 181

163:	unary-expression => sizeof-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 180

164:	indirect-component-selection => postfix-expression . "->" identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	direct-component-selection => postfix-expression . "." identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postdecrement-expression => postfix-expression . "--" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	postincrement-expression => postfix-expression . "++" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	function-call => postfix-expression . "(" ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	function-call => postfix-expression . "(" expression-list ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	subscript-expression => postfix-expression . "[" expression "]" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	unary-expression => postfix-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		"[" => shift 268
		"(" => shift 269
		"++" => shift 270
		"--" => shift 271
		"." => shift 272
		"->" => shift 273
		$default => reduce 179

165:	cast-expression => unary-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	assignment-expression => unary-expression . assignment-op assignment-expression (":" "}" ")" "]" "," ";")
	assignment-op => . "="
	assignment-op => . "+="
	assignment-op => . "-="
	assignment-op => . "*="
	assignment-op => . "/="
	assignment-op => . "%="
	assignment-op => . "<<="
	assignment-op => . ">>="
	assignment-op => . "&="
	assignment-op => . "^="
	assignment-op => . "|="
		"|=" => shift 256
		"^=" => shift 257
		"&=" => shift 258
		">>=" => shift 259
		"<<=" => shift 260
		"%=" => shift 261
		"/=" => shift 262
		"*=" => shift 263
		"-=" => shift 264
		"+=" => shift 265
		"=" => shift 266
		assignment-op => shift 267
		$default => reduce 177

166:	assignment-expression => conditional-expression . (":" "}" ")" "]" "," ";")
		$default => reduce 234

167:	array-size-expression => assignment-expression . ("]")
		"]" => reduce 58

168:	array-declarator => direct-declarator "[" array-size-expression . "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		"]" => shift 255

169:	array-qualifier => "volatile" . ("]" "volatile" "const" "restrict" "static" 'cpp-ident '$ident '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--")
		$default => reduce 57

170:	array-qualifier => "const" . ("]" "volatile" "const" "restrict" "static" 'cpp-ident '$ident '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--")
		$default => reduce 56

171:	array-qualifier => "restrict" . ("]" "volatile" "const" "restrict" "static" 'cpp-ident '$ident '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--")
		$default => reduce 55

172:	array-qualifier => "static" . ("]" "volatile" "const" "restrict" "static" 'cpp-ident '$ident '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--")
		$default => reduce 54

173:	array-qualifier-list => array-qualifier . ("]" "static" "restrict" "const" "volatile" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 52

174:	array-declarator => direct-declarator "[" array-qualifier-list . "*" "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-declarator => direct-declarator "[" array-qualifier-list . "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-qualifier-list => array-qualifier-list . array-qualifier ("]" "static" "restrict" "const" "volatile" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
	array-qualifier => . "static"
	array-qualifier => . "restrict"
	array-qualifier => . "const"
	array-qualifier => . "volatile"
	array-declarator => direct-declarator "[" array-qualifier-list . array-size-expression "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
	array-size-expression => . assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 167
		array-size-expression => shift 251
		"volatile" => shift 169
		"const" => shift 170
		"restrict" => shift 171
		"static" => shift 172
		array-qualifier => shift 252
		"]" => shift 253
		"*" => shift 254

175:	indirection-expression => "*" . cast-expression (":" "]" "}" ")" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 250

176:	primary-expression => identifier . ("*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	named-label => identifier . (":")
		":" => reduce 298
		$default => reduce 153

177:	default-label => "default" . (":")
		":" => reduce 292

178:	case-label => "case" . constant-expression (":")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		logical-and-expression => shift 137
		logical-or-expression => shift 154
		conditional-expression => shift 248
		constant-expression => shift 249

179:	comma-expression => assignment-expression . (":" "]" ")" "," ";")
		$default => reduce 247

180:	for-statement => "for" . for-expressions statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	for-expressions => . "(" initial-clause expression ";" expression ")"
	for-expressions => . "(" initial-clause expression ";" ")"
	for-expressions => . "(" initial-clause ";" expression ")"
	for-expressions => . "(" initial-clause ";" ")"
		"(" => shift 245
		for-expressions => shift 246

181:	do-statement => "do" . statement "while" "(" expression ")" ";" ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	statement => . expression-statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . conditional-statement
	statement => . iterative-statement
	statement => . switch-statement
	statement => . break-statement
	statement => . continue-statement
	statement => . return-statement
	statement => . goto-statement
	statement => . null-statement
	expression-statement => . expression ";"
	labeled-statement => . label ":" statement
	compound-statement => . "{" declaration-or-statement-list "}"
	compound-statement => . "{" "}"
	conditional-statement => . if-statement
	conditional-statement => . if-else-statement
	iterative-statement => . while-statement
	iterative-statement => . do-statement
	iterative-statement => . for-statement
	switch-statement => . "switch" "(" expression ")" statement
	break-statement => . "break" ";"
	continue-statement => . "continue" ";"
	return-statement => . "return" expression ";"
	return-statement => . "return" ";"
	goto-statement => . "goto" named-label ";"
	null-statement => . ";"
	expression => . comma-expression
	label => . named-label
	label => . case-label
	label => . default-label
	if-statement => . "if" "(" expression ")" statement
	if-else-statement => . "if" "(" expression ")" statement "else" statement
	while-statement => . "while" "(" expression ")" statement
	do-statement => . "do" statement "while" "(" expression ")" ";"
	for-statement => . "for" for-expressions statement
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	case-label => . "case" constant-expression
	default-label => . "default"
	named-label => . identifier
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		'cpp-ident => shift 1
		'$ident => shift 2
		unary-expression => shift 165
		conditional-expression => shift 166
		identifier => shift 176
		"default" => shift 177
		"case" => shift 178
		assignment-expression => shift 179
		"for" => shift 180
		"do" => shift 181
		"while" => shift 182
		"if" => shift 183
		default-label => shift 184
		case-label => shift 185
		named-label => shift 186
		comma-expression => shift 187
		";" => shift 188
		"goto" => shift 189
		"return" => shift 190
		"continue" => shift 191
		"break" => shift 192
		"switch" => shift 193
		for-statement => shift 194
		do-statement => shift 195
		while-statement => shift 196
		if-else-statement => shift 197
		if-statement => shift 198
		"{" => shift 74
		label => shift 199
		expression => shift 200
		null-statement => shift 201
		goto-statement => shift 202
		return-statement => shift 203
		continue-statement => shift 204
		break-statement => shift 205
		switch-statement => shift 206
		iterative-statement => shift 207
		conditional-statement => shift 208
		compound-statement => shift 209
		labeled-statement => shift 210
		expression-statement => shift 211
		statement => shift 244

182:	while-statement => "while" . "(" expression ")" statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		"(" => shift 243

183:	if-else-statement => "if" . "(" expression ")" statement "else" statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	if-statement => "if" . "(" expression ")" statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		"(" => shift 242

184:	label => default-label . (":")
		":" => reduce 266

185:	label => case-label . (":")
		":" => reduce 265

186:	label => named-label . (":")
		":" => reduce 264

187:	comma-expression => comma-expression . "," assignment-expression (":" "]" ")" "," ";")
	expression => comma-expression . (":" "]" ")" ";")
		"," => shift 241
		$default => reduce 249

188:	null-statement => ";" . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 299

189:	goto-statement => "goto" . named-label ";" ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
	named-label => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 239
		named-label => shift 240

190:	return-statement => "return" . ";" ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
	return-statement => "return" . expression ";" ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 237
		";" => shift 238

191:	continue-statement => "continue" . ";" ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		";" => shift 236

192:	break-statement => "break" . ";" ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		";" => shift 235

193:	switch-statement => "switch" . "(" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		"(" => shift 234

194:	iterative-statement => for-statement . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 279

195:	iterative-statement => do-statement . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 278

196:	iterative-statement => while-statement . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 277

197:	conditional-statement => if-else-statement . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 274

198:	conditional-statement => if-statement . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 273

199:	labeled-statement => label . ":" statement ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		":" => shift 233

200:	expression-statement => expression . ";" ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		";" => shift 232

201:	statement => null-statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 261

202:	statement => goto-statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 260

203:	statement => return-statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 259

204:	statement => continue-statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 258

205:	statement => break-statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 257

206:	statement => switch-statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 256

207:	statement => iterative-statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 255

208:	statement => conditional-statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 254

209:	statement => compound-statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 253

210:	statement => labeled-statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 252

211:	statement => expression-statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 251

212:	declaration => declaration-specifiers . initialized-declarator-list $P1 ";" opt-code-comment (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "}" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline")
	initialized-declarator-list => . initialized-declarator
	initialized-declarator-list => . initialized-declarator-list "," initialized-declarator
	initialized-declarator => . declarator
	initialized-declarator => . declarator "=" initializer
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		"*" => shift 14
		identifier => shift 15
		pointer => shift 31
		array-declarator => shift 32
		function-declarator => shift 33
		"(" => shift 34
		simple-declarator => shift 35
		direct-declarator => shift 36
		pointer-declarator => shift 37
		declarator => shift 223
		initialized-declarator => shift 71
		initialized-declarator-list => shift 72

213:	declaration-or-statement => statement . ("typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 272

214:	declaration-or-statement => declaration . ("typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 271

215:	declaration-or-statement-list => declaration-or-statement . (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 269

216:	declaration-or-statement-list => declaration-or-statement-list . declaration-or-statement (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	declaration-or-statement => . declaration
	declaration-or-statement => . statement
	declaration => . declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment
	statement => . expression-statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . conditional-statement
	statement => . iterative-statement
	statement => . switch-statement
	statement => . break-statement
	statement => . continue-statement
	statement => . return-statement
	statement => . goto-statement
	statement => . null-statement
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	expression-statement => . expression ";"
	labeled-statement => . label ":" statement
	compound-statement => . "{" declaration-or-statement-list "}"
	compound-statement => . "{" "}"
	conditional-statement => . if-statement
	conditional-statement => . if-else-statement
	iterative-statement => . while-statement
	iterative-statement => . do-statement
	iterative-statement => . for-statement
	switch-statement => . "switch" "(" expression ")" statement
	break-statement => . "break" ";"
	continue-statement => . "continue" ";"
	return-statement => . "return" expression ";"
	return-statement => . "return" ";"
	goto-statement => . "goto" named-label ";"
	null-statement => . ";"
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	expression => . comma-expression
	label => . named-label
	label => . case-label
	label => . default-label
	if-statement => . "if" "(" expression ")" statement
	if-else-statement => . "if" "(" expression ")" statement "else" statement
	while-statement => . "while" "(" expression ")" statement
	do-statement => . "do" statement "while" "(" expression ")" ";"
	for-statement => . "for" for-expressions statement
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	case-label => . "case" constant-expression
	default-label => . "default"
	named-label => . identifier
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	compound-statement => "{" declaration-or-statement-list . "}" ('$end 'cpp-stmt '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		"}" => shift 230
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		'cpp-ident => shift 1
		'$ident => shift 2
		unary-expression => shift 165
		conditional-expression => shift 166
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		identifier => shift 176
		"default" => shift 177
		"case" => shift 178
		assignment-expression => shift 179
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"for" => shift 180
		"do" => shift 181
		"while" => shift 182
		"if" => shift 183
		default-label => shift 184
		case-label => shift 185
		named-label => shift 186
		comma-expression => shift 187
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		";" => shift 188
		"goto" => shift 189
		"return" => shift 190
		"continue" => shift 191
		"break" => shift 192
		"switch" => shift 193
		for-statement => shift 194
		do-statement => shift 195
		while-statement => shift 196
		if-else-statement => shift 197
		if-statement => shift 198
		"{" => shift 74
		label => shift 199
		expression => shift 200
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		null-statement => shift 201
		goto-statement => shift 202
		return-statement => shift 203
		continue-statement => shift 204
		break-statement => shift 205
		switch-statement => shift 206
		iterative-statement => shift 207
		conditional-statement => shift 208
		compound-statement => shift 209
		labeled-statement => shift 210
		expression-statement => shift 211
		declaration-specifiers => shift 212
		statement => shift 213
		declaration => shift 214
		declaration-or-statement => shift 231

217:	compound-statement => "{" "}" . ('$end 'cpp-stmt '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 268

218:	declaration-list => declaration . ("{" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 310

219:	declaration-list => declaration-list . declaration ("{" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	declaration => . declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	function-def-specifier => declaration-specifiers declarator declaration-list . ("{")
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 212
		declaration => shift 229
		"{" => reduce 307

220:	initialized-declarator => declarator "=" . initializer ("," ";")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "," "}"
	initializer => . "{" initializer-list "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		"{" => shift 226
		assignment-expression => shift 227
		initializer => shift 228

221:	declaration => declaration-specifiers initialized-declarator-list $P1 . ";" opt-code-comment (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" "--" "++" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string "}" '$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		";" => shift 225

222:	initialized-declarator-list => initialized-declarator-list "," . initialized-declarator ("," ";")
	initialized-declarator => . declarator
	initialized-declarator => . declarator "=" initializer
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		"*" => shift 14
		identifier => shift 15
		pointer => shift 31
		array-declarator => shift 32
		function-declarator => shift 33
		"(" => shift 34
		simple-declarator => shift 35
		direct-declarator => shift 36
		pointer-declarator => shift 37
		declarator => shift 223
		initialized-declarator => shift 224

223:	initialized-declarator => declarator . "=" initializer ("," ";")
	initialized-declarator => declarator . ("," ";")
		"=" => shift 220
		";" => reduce 14
		"," => reduce 14

224:	initialized-declarator-list => initialized-declarator-list "," initialized-declarator . ("," ";")
		";" => reduce 13
		"," => reduce 13

225:	declaration => declaration-specifiers initialized-declarator-list $P1 ";" . opt-code-comment (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" "--" "++" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string "}" '$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	opt-code-comment => .
	opt-code-comment => . code-comment
	code-comment => . '$code-comm
		'$code-comm => shift 409
		code-comment => shift 410
		opt-code-comment => shift 411
		$default => reduce 312

226:	initializer => "{" . initializer-list "}" (";" "," "}")
	initializer-list => . initializer
	initializer-list => . initializer-list "," initializer
	initializer-list => . designation initializer
	initializer-list => . initializer-list "," designation initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "," "}"
	initializer => . "{" initializer-list "}"
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	initializer => "{" . initializer-list "," "}" (";" "," "}")
	initializer-list => . initializer
	initializer-list => . initializer-list "," initializer
	initializer-list => . designation initializer
	initializer-list => . initializer-list "," designation initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "," "}"
	initializer => . "{" initializer-list "}"
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"." => shift 402
		"[" => shift 403
		unary-expression => shift 165
		conditional-expression => shift 166
		designator => shift 404
		designator-list => shift 405
		"{" => shift 226
		assignment-expression => shift 227
		designation => shift 406
		initializer => shift 407
		initializer-list => shift 408

227:	initializer => assignment-expression . (";" "," "}")
		"}" => reduce 71
		"," => reduce 71
		";" => reduce 71

228:	initialized-declarator => declarator "=" initializer . ("," ";")
		";" => reduce 15
		"," => reduce 15

229:	declaration-list => declaration-list declaration . ("{" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 311

230:	compound-statement => "{" declaration-or-statement-list "}" . ('$end 'cpp-stmt '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 267

231:	declaration-or-statement-list => declaration-or-statement-list declaration-or-statement . (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 270

232:	expression-statement => expression ";" . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 262

233:	labeled-statement => label ":" . statement ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
	statement => . expression-statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . conditional-statement
	statement => . iterative-statement
	statement => . switch-statement
	statement => . break-statement
	statement => . continue-statement
	statement => . return-statement
	statement => . goto-statement
	statement => . null-statement
	expression-statement => . expression ";"
	labeled-statement => . label ":" statement
	compound-statement => . "{" declaration-or-statement-list "}"
	compound-statement => . "{" "}"
	conditional-statement => . if-statement
	conditional-statement => . if-else-statement
	iterative-statement => . while-statement
	iterative-statement => . do-statement
	iterative-statement => . for-statement
	switch-statement => . "switch" "(" expression ")" statement
	break-statement => . "break" ";"
	continue-statement => . "continue" ";"
	return-statement => . "return" expression ";"
	return-statement => . "return" ";"
	goto-statement => . "goto" named-label ";"
	null-statement => . ";"
	expression => . comma-expression
	label => . named-label
	label => . case-label
	label => . default-label
	if-statement => . "if" "(" expression ")" statement
	if-else-statement => . "if" "(" expression ")" statement "else" statement
	while-statement => . "while" "(" expression ")" statement
	do-statement => . "do" statement "while" "(" expression ")" ";"
	for-statement => . "for" for-expressions statement
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	case-label => . "case" constant-expression
	default-label => . "default"
	named-label => . identifier
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		'cpp-ident => shift 1
		'$ident => shift 2
		unary-expression => shift 165
		conditional-expression => shift 166
		identifier => shift 176
		"default" => shift 177
		"case" => shift 178
		assignment-expression => shift 179
		"for" => shift 180
		"do" => shift 181
		"while" => shift 182
		"if" => shift 183
		default-label => shift 184
		case-label => shift 185
		named-label => shift 186
		comma-expression => shift 187
		";" => shift 188
		"goto" => shift 189
		"return" => shift 190
		"continue" => shift 191
		"break" => shift 192
		"switch" => shift 193
		for-statement => shift 194
		do-statement => shift 195
		while-statement => shift 196
		if-else-statement => shift 197
		if-statement => shift 198
		"{" => shift 74
		label => shift 199
		expression => shift 200
		null-statement => shift 201
		goto-statement => shift 202
		return-statement => shift 203
		continue-statement => shift 204
		break-statement => shift 205
		switch-statement => shift 206
		iterative-statement => shift 207
		conditional-statement => shift 208
		compound-statement => shift 209
		labeled-statement => shift 210
		expression-statement => shift 211
		statement => shift 401

234:	switch-statement => "switch" "(" . expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 400

235:	break-statement => "break" ";" . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 293

236:	continue-statement => "continue" ";" . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 294

237:	return-statement => "return" expression . ";" ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		";" => shift 399

238:	return-statement => "return" ";" . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 296

239:	named-label => identifier . (";")
		";" => reduce 298

240:	goto-statement => "goto" named-label . ";" ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		";" => shift 398

241:	comma-expression => comma-expression "," . assignment-expression (":" "]" ")" "," ";")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 397

242:	if-statement => "if" "(" . expression ")" statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	if-else-statement => "if" "(" . expression ")" statement "else" statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 396

243:	while-statement => "while" "(" . expression ")" statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 395

244:	do-statement => "do" statement . "while" "(" expression ")" ";" ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		"while" => shift 394

245:	for-expressions => "(" . initial-clause ";" ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	declaration => . declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment
	expression => . comma-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	for-expressions => "(" . initial-clause ";" expression ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	declaration => . declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment
	expression => . comma-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	for-expressions => "(" . initial-clause expression ";" ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	declaration => . declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment
	expression => . comma-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	for-expressions => "(" . initial-clause expression ";" expression ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	declaration => . declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment
	expression => . comma-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		unary-expression => shift 165
		conditional-expression => shift 166
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		assignment-expression => shift 179
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		comma-expression => shift 187
		declaration-specifiers => shift 212
		declaration => shift 390
		";" => shift 391
		expression => shift 392
		initial-clause => shift 393

246:	for-statement => "for" for-expressions . statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	statement => . expression-statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . conditional-statement
	statement => . iterative-statement
	statement => . switch-statement
	statement => . break-statement
	statement => . continue-statement
	statement => . return-statement
	statement => . goto-statement
	statement => . null-statement
	expression-statement => . expression ";"
	labeled-statement => . label ":" statement
	compound-statement => . "{" declaration-or-statement-list "}"
	compound-statement => . "{" "}"
	conditional-statement => . if-statement
	conditional-statement => . if-else-statement
	iterative-statement => . while-statement
	iterative-statement => . do-statement
	iterative-statement => . for-statement
	switch-statement => . "switch" "(" expression ")" statement
	break-statement => . "break" ";"
	continue-statement => . "continue" ";"
	return-statement => . "return" expression ";"
	return-statement => . "return" ";"
	goto-statement => . "goto" named-label ";"
	null-statement => . ";"
	expression => . comma-expression
	label => . named-label
	label => . case-label
	label => . default-label
	if-statement => . "if" "(" expression ")" statement
	if-else-statement => . "if" "(" expression ")" statement "else" statement
	while-statement => . "while" "(" expression ")" statement
	do-statement => . "do" statement "while" "(" expression ")" ";"
	for-statement => . "for" for-expressions statement
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	case-label => . "case" constant-expression
	default-label => . "default"
	named-label => . identifier
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		'cpp-ident => shift 1
		'$ident => shift 2
		unary-expression => shift 165
		conditional-expression => shift 166
		identifier => shift 176
		"default" => shift 177
		"case" => shift 178
		assignment-expression => shift 179
		"for" => shift 180
		"do" => shift 181
		"while" => shift 182
		"if" => shift 183
		default-label => shift 184
		case-label => shift 185
		named-label => shift 186
		comma-expression => shift 187
		";" => shift 188
		"goto" => shift 189
		"return" => shift 190
		"continue" => shift 191
		"break" => shift 192
		"switch" => shift 193
		for-statement => shift 194
		do-statement => shift 195
		while-statement => shift 196
		if-else-statement => shift 197
		if-statement => shift 198
		"{" => shift 74
		label => shift 199
		expression => shift 200
		null-statement => shift 201
		goto-statement => shift 202
		return-statement => shift 203
		continue-statement => shift 204
		break-statement => shift 205
		switch-statement => shift 206
		iterative-statement => shift 207
		conditional-statement => shift 208
		compound-statement => shift 209
		labeled-statement => shift 210
		expression-statement => shift 211
		statement => shift 389

247:	cast-expression => unary-expression . (":" "}" ")" "," ";" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "]" "%" "/" "*" "+" "-" ">>" "<<" "<" "<=" ">" ">=" "!=" "==" "&" "^" "|" "&&" "||" "?")
		$default => reduce 177

248:	constant-expression => conditional-expression . (";" "," "}" ":" "]")
		$default => reduce 250

249:	case-label => "case" constant-expression . (":")
		":" => reduce 291

250:	indirection-expression => "*" cast-expression . (":" "}" ")" "," ";" "%" "/" "*" "+" "-" ">>" "<<" "<" "<=" ">" ">=" "!=" "==" "&" "^" "|" "&&" "||" "]" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 196

251:	array-declarator => direct-declarator "[" array-qualifier-list array-size-expression . "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		"]" => shift 388

252:	array-qualifier-list => array-qualifier-list array-qualifier . ("]" "static" "restrict" "const" "volatile" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 53

253:	array-declarator => direct-declarator "[" array-qualifier-list "]" . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		$default => reduce 47

254:	indirection-expression => "*" . cast-expression ("%" "/" "*" "+" "-" ">>" "<<" "<" "<=" ">" ">=" "!=" "==" "&" "^" "|" "&&" "||" "]" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	array-declarator => direct-declarator "[" array-qualifier-list "*" . "]" (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		"]" => shift 387
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 250

255:	array-declarator => direct-declarator "[" array-size-expression "]" . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		$default => reduce 48

256:	assignment-op => "|=" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 246

257:	assignment-op => "^=" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 245

258:	assignment-op => "&=" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 244

259:	assignment-op => ">>=" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 243

260:	assignment-op => "<<=" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 242

261:	assignment-op => "%=" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 241

262:	assignment-op => "/=" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 240

263:	assignment-op => "*=" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 239

264:	assignment-op => "-=" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 238

265:	assignment-op => "+=" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 237

266:	assignment-op => "=" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 236

267:	assignment-expression => unary-expression assignment-op . assignment-expression (":" "}" ")" "]" "," ";")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 386

268:	subscript-expression => postfix-expression "[" . expression "]" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 385

269:	function-call => postfix-expression "(" . expression-list ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	expression-list => . assignment-expression
	expression-list => . expression-list "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	function-call => postfix-expression "(" . ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		")" => shift 382
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 383
		expression-list => shift 384

270:	postincrement-expression => postfix-expression "++" . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 173

271:	postdecrement-expression => postfix-expression "--" . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 174

272:	direct-component-selection => postfix-expression "." . identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 381

273:	indirect-component-selection => postfix-expression "->" . identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 380

274:	conditional-expression => logical-or-expression "?" . expression ":" conditional-expression (":" "}" ")" "]" "," ";")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 379

275:	logical-or-expression => logical-or-expression "||" . logical-and-expression (":" "}" ")" "]" "," "||" ";" "?")
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		logical-and-expression => shift 378

276:	sizeof-expression => "sizeof" "(" . type-name ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	type-name => . declaration-specifiers abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	parenthesized-expression => "(" . expression ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "->" "." "--" "++" "(" "[")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	compound-literal => "(" . type-name ")" "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
	type-name => . declaration-specifiers abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	compound-literal => "(" . type-name ")" "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
	type-name => . declaration-specifiers abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 288
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 289
		type-name => shift 377

277:	sizeof-expression => "sizeof" unary-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 190

278:	unary-minus-expression => "-" cast-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 191

279:	unary-plus-expression => "+" cast-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 192

280:	logical-negation-expression => "!" cast-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 193

281:	bitwise-negation-expression => "~" cast-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 194

282:	address-expression => "&" cast-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 195

283:	array-declarator => direct-declarator "[" "*" "]" . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		$default => reduce 51

284:	parenthesized-expression => "(" . expression ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "->" "." "--" "++" "(" "[")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	compound-literal => "(" . type-name ")" "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
	type-name => . declaration-specifiers abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	compound-literal => "(" . type-name ")" "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
	type-name => . declaration-specifiers abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 289
		type-name => shift 376
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 288

285:	preincrement-expression => "++" unary-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 197

286:	predecrement-expression => "--" unary-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 198

287:	logical-and-expression => logical-and-expression "&&" . bitwise-or-expression (":" "}" ")" "]" "&&" "||" "," "?" ";")
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 375

288:	parenthesized-expression => "(" expression . ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		")" => shift 374

289:	type-name => declaration-specifiers . (")")
	type-name => declaration-specifiers . abstract-declarator (")")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" expression "]"
	direct-abstract-declarator => . "[" expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 315
		"(" => shift 371
		"*" => shift 14
		direct-abstract-declarator => shift 317
		pointer => shift 372
		abstract-declarator => shift 373
		")" => reduce 138

290:	compound-literal => "(" type-name . ")" "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	compound-literal => "(" type-name . ")" "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	cast-expression => "(" type-name . ")" cast-expression ("|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		")" => shift 370

291:	bitwise-or-expression => bitwise-or-expression "|" . bitwise-xor-expression (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		bitwise-xor-expression => shift 369

292:	bitwise-xor-expression => bitwise-xor-expression "^" . bitwise-and-expression (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 368

293:	bitwise-and-expression => bitwise-and-expression "&" . equality-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 367

294:	equality-op => "!=" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 221

295:	equality-op => "==" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 220

296:	equality-expression => equality-expression equality-op . relational-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 366

297:	relational-op => ">=" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 217

298:	relational-op => ">" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 216

299:	relational-op => "<=" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 215

300:	relational-op => "<" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 214

301:	relational-expression => relational-expression relational-op . shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ";" "?")
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 365

302:	shift-op => ">>" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 211

303:	shift-op => "<<" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 210

304:	shift-expression => shift-expression shift-op . additive-expression (":" "}" ")" "]" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 364

305:	add-op => "-" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 207

306:	add-op => "+" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 206

307:	additive-expression => additive-expression add-op . multiplicative-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" ";" "?")
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 363

308:	mult-op => "%" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 203

309:	mult-op => "/" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 202

310:	mult-op => "*" . ("(" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 201

311:	multiplicative-expression => multiplicative-expression mult-op . cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 362

312:	function-declarator => direct-declarator "(" parameter-type-list ")" . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		$default => reduce 59

313:	parameter-type-list => parameter-list "," . "..." (")")
	parameter-list => parameter-list "," . parameter-declaration (")" ",")
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 113
		parameter-declaration => shift 360
		"..." => shift 361

314:	parameter-declaration => declaration-specifiers declarator . ("," ")")
		")" => reduce 66
		"," => reduce 66

315:	direct-abstract-declarator => "[" . "*" "]" ("," ")" "[" "(")
	direct-abstract-declarator => "[" . expression "]" ("," ")" "[" "(")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-abstract-declarator => "[" . "]" ("," ")" "[" "(")
		"]" => shift 357
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 358
		"*" => shift 359

316:	direct-declarator => "(" . declarator ")" ("," ")" "[" "(")
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	direct-abstract-declarator => "(" . ")" ("," ")" "[" "(")
	direct-abstract-declarator => "(" . parameter-type-list ")" ("," ")" "[" "(")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	direct-abstract-declarator => "(" . abstract-declarator ")" ("," ")" "[" "(")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" expression "]"
	direct-abstract-declarator => . "[" expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 315
		direct-abstract-declarator => shift 317
		abstract-declarator => shift 354
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 113
		parameter-declaration => shift 114
		parameter-list => shift 115
		parameter-type-list => shift 355
		")" => shift 356
		'cpp-ident => shift 1
		'$ident => shift 2
		"*" => shift 14
		identifier => shift 15
		pointer => shift 318
		array-declarator => shift 32
		function-declarator => shift 33
		"(" => shift 316
		simple-declarator => shift 35
		direct-declarator => shift 36
		pointer-declarator => shift 37
		declarator => shift 82

317:	direct-abstract-declarator => direct-abstract-declarator . "(" ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "(" parameter-type-list ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "*" "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "]" ("," ")" "[" "(")
	abstract-declarator => direct-abstract-declarator . ("," ")")
		"[" => shift 352
		"(" => shift 353
		")" => reduce 141
		"," => reduce 141

318:	pointer-declarator => pointer . direct-declarator ("," ")")
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	simple-declarator => . identifier
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	abstract-declarator => pointer . direct-abstract-declarator ("," ")")
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" expression "]"
	direct-abstract-declarator => . "[" expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	abstract-declarator => pointer . ("," ")")
		"[" => shift 315
		direct-abstract-declarator => shift 351
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 15
		array-declarator => shift 32
		function-declarator => shift 33
		"(" => shift 316
		simple-declarator => shift 35
		direct-declarator => shift 83
		")" => reduce 139
		"," => reduce 139

319:	parameter-declaration => declaration-specifiers abstract-declarator . ("," ")")
		")" => reduce 67
		"," => reduce 67

320:	function-declarator => direct-declarator "(" identifier-list ")" . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		$default => reduce 60

321:	identifier-list => identifier-list "," . identifier ("," ")")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 350

322:	enumeration-type-definition => "enum" "{" enumeration-definition-list "}" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 101

323:	enumeration-definition-list => enumeration-definition-list "," . enumeration-constant-definition ("," "}")
	enumeration-constant-definition => . enumeration-constant
	enumeration-constant-definition => . enumeration-constant "=" constant-expression
	enumeration-constant => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	enumeration-type-definition => "enum" "{" enumeration-definition-list "," . "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		"}" => shift 348
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 103
		enumeration-constant => shift 104
		enumeration-constant-definition => shift 349

324:	enumeration-constant-definition => enumeration-constant "=" . constant-expression ("," "}")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		logical-and-expression => shift 137
		logical-or-expression => shift 154
		conditional-expression => shift 248
		constant-expression => shift 347

325:	enumeration-type-definition => "enum" enumeration-tag "{" enumeration-definition-list . "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-definition-list => enumeration-definition-list . "," enumeration-constant-definition ("}" ",")
	enumeration-type-definition => "enum" enumeration-tag "{" enumeration-definition-list . "," "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		"," => shift 345
		"}" => shift 346

326:	structure-type-definition => "struct" "{" field-list "}" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 114

327:	field-list => field-list component-declaration . ("void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" '$lone-comm "}")
		$default => reduce 118

328:	field-list => field-list lone-comment . ("void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" '$lone-comm "}")
		$default => reduce 119

329:	field-list => field-list . lone-comment ("void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" '$lone-comm "}")
	lone-comment => . '$lone-comm
	field-list => field-list . component-declaration ("void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" '$lone-comm "}")
	component-declaration => . type-specifier component-declarator-list ";" opt-code-comment
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	structure-type-definition => "struct" structure-tag "{" field-list . "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		"}" => shift 344
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		type-specifier => shift 97
		component-declaration => shift 327
		'$lone-comm => shift 60
		lone-comment => shift 328

330:	union-type-definition => "union" "{" field-list "}" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 132

331:	bit-field => ":" . width ("," ";")
	width => . constant-expression
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		logical-and-expression => shift 137
		logical-or-expression => shift 154
		conditional-expression => shift 248
		constant-expression => shift 342
		width => shift 343

332:	bit-field => declarator . ":" width ("," ";")
	simple-component => declarator . ("," ";")
		":" => shift 341
		";" => reduce 125
		"," => reduce 125

333:	component-declarator => bit-field . ("," ";")
		";" => reduce 124
		"," => reduce 124

334:	component-declarator => simple-component . ("," ";")
		";" => reduce 123
		"," => reduce 123

335:	component-declarator-list => component-declarator . ("," ";")
		";" => reduce 121
		"," => reduce 121

336:	component-declarator-list => component-declarator-list . "," component-declarator ("," ";")
	component-declaration => type-specifier component-declarator-list . ";" opt-code-comment ('$lone-comm "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "}")
		";" => shift 339
		"," => shift 340

337:	field-list => field-list . lone-comment ("void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" '$lone-comm "}")
	lone-comment => . '$lone-comm
	field-list => field-list . component-declaration ("void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" '$lone-comm "}")
	component-declaration => . type-specifier component-declarator-list ";" opt-code-comment
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	union-type-definition => "union" union-tag "{" field-list . "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		"}" => shift 338
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		type-specifier => shift 97
		component-declaration => shift 327
		'$lone-comm => shift 60
		lone-comment => shift 328

338:	union-type-definition => "union" union-tag "{" field-list "}" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 131

339:	component-declaration => type-specifier component-declarator-list ";" . opt-code-comment ('$lone-comm "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "}")
	opt-code-comment => .
	opt-code-comment => . code-comment
	code-comment => . '$code-comm
		'$code-comm => shift 409
		code-comment => shift 410
		opt-code-comment => shift 446
		$default => reduce 312

340:	component-declarator-list => component-declarator-list "," . component-declarator ("," ";")
	component-declarator => . simple-component
	component-declarator => . bit-field
	simple-component => . declarator
	bit-field => . declarator ":" width
	bit-field => . ":" width
	declarator => . pointer-declarator
	declarator => . direct-declarator
	direct-declarator => . simple-declarator
	direct-declarator => . "(" declarator ")"
	direct-declarator => . function-declarator
	direct-declarator => . array-declarator
	pointer-declarator => . pointer direct-declarator
	simple-declarator => . identifier
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	array-declarator => . direct-declarator "[" array-qualifier-list array-size-expression "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "]"
	array-declarator => . direct-declarator "[" array-size-expression "]"
	array-declarator => . direct-declarator "[" "]"
	array-declarator => . direct-declarator "[" array-qualifier-list "*" "]"
	array-declarator => . direct-declarator "[" "*" "]"
	function-declarator => . direct-declarator "(" parameter-type-list ")"
	function-declarator => . direct-declarator "(" identifier-list ")"
	function-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		"*" => shift 14
		identifier => shift 15
		pointer => shift 31
		array-declarator => shift 32
		function-declarator => shift 33
		"(" => shift 34
		simple-declarator => shift 35
		direct-declarator => shift 36
		pointer-declarator => shift 37
		":" => shift 331
		declarator => shift 332
		bit-field => shift 333
		simple-component => shift 334
		component-declarator => shift 445

341:	bit-field => declarator ":" . width ("," ";")
	width => . constant-expression
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		logical-and-expression => shift 137
		logical-or-expression => shift 154
		conditional-expression => shift 248
		constant-expression => shift 342
		width => shift 444

342:	width => constant-expression . ("," ";")
		";" => reduce 128
		"," => reduce 128

343:	bit-field => ":" width . ("," ";")
		";" => reduce 127
		"," => reduce 127

344:	structure-type-definition => "struct" structure-tag "{" field-list "}" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 113

345:	enumeration-type-definition => "enum" enumeration-tag "{" enumeration-definition-list "," . "}" (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
	enumeration-definition-list => enumeration-definition-list "," . enumeration-constant-definition ("}" ",")
	enumeration-constant-definition => . enumeration-constant
	enumeration-constant-definition => . enumeration-constant "=" constant-expression
	enumeration-constant => . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 103
		enumeration-constant => shift 104
		enumeration-constant-definition => shift 349
		"}" => shift 443

346:	enumeration-type-definition => "enum" enumeration-tag "{" enumeration-definition-list "}" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 100

347:	enumeration-constant-definition => enumeration-constant "=" constant-expression . ("," "}")
		"}" => reduce 109
		"," => reduce 109

348:	enumeration-type-definition => "enum" "{" enumeration-definition-list "," "}" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 103

349:	enumeration-definition-list => enumeration-definition-list "," enumeration-constant-definition . ("," "}")
		"}" => reduce 107
		"," => reduce 107

350:	identifier-list => identifier-list "," identifier . ("," ")")
		")" => reduce 70
		"," => reduce 70

351:	direct-abstract-declarator => direct-abstract-declarator . "(" ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "(" parameter-type-list ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "*" "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "]" ("," ")" "[" "(")
	abstract-declarator => pointer direct-abstract-declarator . ("," ")")
		"[" => shift 352
		"(" => shift 353
		")" => reduce 140
		"," => reduce 140

352:	direct-abstract-declarator => direct-abstract-declarator "[" . "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator "[" . expression "]" ("," ")" "[" "(")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-abstract-declarator => direct-abstract-declarator "[" . "*" "]" ("," ")" "[" "(")
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 440
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 441
		"]" => shift 442

353:	direct-abstract-declarator => direct-abstract-declarator "(" . parameter-type-list ")" ("," ")" "[" "(")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	direct-abstract-declarator => direct-abstract-declarator "(" . ")" ("," ")" "[" "(")
		")" => shift 438
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 113
		parameter-declaration => shift 114
		parameter-list => shift 115
		parameter-type-list => shift 439

354:	direct-abstract-declarator => "(" abstract-declarator . ")" ("," ")" "[" "(")
		")" => shift 437

355:	direct-abstract-declarator => "(" parameter-type-list . ")" ("," ")" "[" "(")
		")" => shift 436

356:	direct-abstract-declarator => "(" ")" . ("," ")" "[" "(")
		$default => reduce 152

357:	direct-abstract-declarator => "[" "]" . ("," ")" "[" "(")
		$default => reduce 144

358:	direct-abstract-declarator => "[" expression . "]" ("," ")" "[" "(")
		"]" => shift 435

359:	indirection-expression => "*" . cast-expression ("," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" "]" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	direct-abstract-declarator => "[" "*" . "]" ("," ")" "[" "(")
		"]" => shift 434
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 250

360:	parameter-list => parameter-list "," parameter-declaration . (")" ",")
		"," => reduce 65
		")" => reduce 65

361:	parameter-type-list => parameter-list "," "..." . (")")
		")" => reduce 63

362:	multiplicative-expression => multiplicative-expression mult-op cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 200

363:	multiplicative-expression => multiplicative-expression . mult-op cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	mult-op => . "*"
	mult-op => . "/"
	mult-op => . "%"
	additive-expression => additive-expression add-op multiplicative-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" ";" "?")
		"%" => shift 308
		"/" => shift 309
		"*" => shift 310
		mult-op => shift 311
		$default => reduce 205

364:	additive-expression => additive-expression . add-op multiplicative-expression (":" "}" ")" "]" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	add-op => . "+"
	add-op => . "-"
	shift-expression => shift-expression shift-op additive-expression . (":" "}" ")" "]" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"-" => shift 305
		"+" => shift 306
		add-op => shift 307
		$default => reduce 209

365:	shift-expression => shift-expression . shift-op additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ";" "?" "<<" ">>")
	shift-op => . "<<"
	shift-op => . ">>"
	relational-expression => relational-expression relational-op shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ";" "?")
		">>" => shift 302
		"<<" => shift 303
		shift-op => shift 304
		$default => reduce 213

366:	relational-expression => relational-expression . relational-op shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" "<=" ">" ">=")
	relational-op => . "<"
	relational-op => . "<="
	relational-op => . ">"
	relational-op => . ">="
	equality-expression => equality-expression equality-op relational-expression . (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		">=" => shift 297
		">" => shift 298
		"<=" => shift 299
		"<" => shift 300
		relational-op => shift 301
		$default => reduce 219

367:	equality-expression => equality-expression . equality-op relational-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=")
	equality-op => . "=="
	equality-op => . "!="
	bitwise-and-expression => bitwise-and-expression "&" equality-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
		"!=" => shift 294
		"==" => shift 295
		equality-op => shift 296
		$default => reduce 227

368:	bitwise-and-expression => bitwise-and-expression . "&" equality-expression (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";" "&")
	bitwise-xor-expression => bitwise-xor-expression "^" bitwise-and-expression . (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 293
		$default => reduce 225

369:	bitwise-xor-expression => bitwise-xor-expression . "^" bitwise-and-expression (":" "}" ")" "]" "," "||" "&&" "|" ";" "?" "^")
	bitwise-or-expression => bitwise-or-expression "|" bitwise-xor-expression . (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
		"^" => shift 292
		$default => reduce 223

370:	cast-expression => "(" type-name ")" . cast-expression ("|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	compound-literal => "(" type-name ")" . "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	compound-literal => "(" type-name ")" . "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		"{" => shift 432
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 433

371:	direct-abstract-declarator => "(" . ")" (")" "[" "(")
	direct-abstract-declarator => "(" . parameter-type-list ")" (")" "[" "(")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	function-specifier => . "inline"
	type-specifier => . enumeration-type-specifier
	type-specifier => . floating-point-type-specifier
	type-specifier => . integer-type-specifier
	type-specifier => . structure-type-specifier
	type-specifier => . typedef-name
	type-specifier => . union-type-specifier
	type-specifier => . void-type-specifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	integer-type-specifier => . signed-type-specifier
	integer-type-specifier => . unsigned-type-specifier
	integer-type-specifier => . character-type-specifier
	integer-type-specifier => . bool-type-specifier
	floating-point-type-specifier => . "float"
	floating-point-type-specifier => . "double"
	floating-point-type-specifier => . complex-type-specifier
	enumeration-type-specifier => . enumeration-type-definition
	enumeration-type-specifier => . enumeration-type-reference
	structure-type-specifier => . structure-type-definition
	structure-type-specifier => . structure-type-reference
	union-type-specifier => . union-type-definition
	union-type-specifier => . union-type-reference
	void-type-specifier => . "void"
	typedef-name => . 'typename
	signed-type-specifier => . "short"
	signed-type-specifier => . "int"
	signed-type-specifier => . "signed"
	signed-type-specifier => . "long"
	unsigned-type-specifier => . "unsigned"
	character-type-specifier => . "char"
	bool-type-specifier => . "_Bool"
	complex-type-specifier => . "_Complex"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "}"
	enumeration-type-definition => . "enum" enumeration-tag "{" enumeration-definition-list "," "}"
	enumeration-type-definition => . "enum" "{" enumeration-definition-list "," "}"
	enumeration-type-reference => . "enum" enumeration-tag
	structure-type-definition => . "struct" structure-tag "{" field-list "}"
	structure-type-definition => . "struct" "{" field-list "}"
	structure-type-reference => . "struct" structure-tag
	union-type-definition => . "union" union-tag "{" field-list "}"
	union-type-definition => . "union" "{" field-list "}"
	union-type-reference => . "union" union-tag
	direct-abstract-declarator => "(" . abstract-declarator ")" (")" "[" "(")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" expression "]"
	direct-abstract-declarator => . "[" expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 315
		"(" => shift 371
		"*" => shift 14
		direct-abstract-declarator => shift 317
		pointer => shift 372
		abstract-declarator => shift 354
		"union" => shift 3
		"struct" => shift 4
		"enum" => shift 5
		"_Complex" => shift 6
		"_Bool" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"signed" => shift 11
		"int" => shift 12
		"short" => shift 13
		'typename => shift 16
		"void" => shift 17
		union-type-reference => shift 18
		union-type-definition => shift 19
		structure-type-reference => shift 20
		structure-type-definition => shift 21
		enumeration-type-reference => shift 22
		enumeration-type-definition => shift 23
		complex-type-specifier => shift 24
		"double" => shift 25
		"float" => shift 26
		bool-type-specifier => shift 27
		character-type-specifier => shift 28
		unsigned-type-specifier => shift 29
		signed-type-specifier => shift 30
		"restrict" => shift 38
		"volatile" => shift 39
		"const" => shift 40
		void-type-specifier => shift 41
		union-type-specifier => shift 42
		typedef-name => shift 43
		structure-type-specifier => shift 44
		integer-type-specifier => shift 45
		floating-point-type-specifier => shift 46
		enumeration-type-specifier => shift 47
		"inline" => shift 48
		"typedef" => shift 49
		"static" => shift 50
		"register" => shift 51
		"extern" => shift 52
		"auto" => shift 53
		function-specifier => shift 55
		type-qualifier => shift 56
		type-specifier => shift 57
		storage-class-specifier => shift 58
		declaration-specifiers => shift 113
		parameter-declaration => shift 114
		parameter-list => shift 115
		parameter-type-list => shift 355
		")" => shift 356

372:	abstract-declarator => pointer . direct-abstract-declarator (")")
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" expression "]"
	direct-abstract-declarator => . "[" expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	abstract-declarator => pointer . (")")
		"[" => shift 315
		"(" => shift 371
		direct-abstract-declarator => shift 351
		")" => reduce 139

373:	type-name => declaration-specifiers abstract-declarator . (")")
		")" => reduce 137

374:	parenthesized-expression => "(" expression ")" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 156

375:	bitwise-or-expression => bitwise-or-expression . "|" bitwise-xor-expression (":" "}" ")" "]" "&&" "||" "," "?" ";" "|")
	logical-and-expression => logical-and-expression "&&" bitwise-or-expression . (":" "}" ")" "]" "&&" "||" "," "?" ";")
		"|" => shift 291
		$default => reduce 231

376:	compound-literal => "(" type-name . ")" "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
	compound-literal => "(" type-name . ")" "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
		")" => shift 431

377:	compound-literal => "(" type-name . ")" "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
	compound-literal => "(" type-name . ")" "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
	sizeof-expression => "sizeof" "(" type-name . ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		")" => shift 430

378:	logical-and-expression => logical-and-expression . "&&" bitwise-or-expression (":" "}" ")" "]" "," "||" ";" "?" "&&")
	logical-or-expression => logical-or-expression "||" logical-and-expression . (":" "}" ")" "]" "," "||" ";" "?")
		"&&" => shift 287
		$default => reduce 229

379:	conditional-expression => logical-or-expression "?" expression . ":" conditional-expression (":" "}" ")" "]" "," ";")
		":" => shift 429

380:	indirect-component-selection => postfix-expression "->" identifier . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 168

381:	direct-component-selection => postfix-expression "." identifier . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "->" "." "--" "++" "(" "[" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 167

382:	function-call => postfix-expression "(" ")" . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 170

383:	expression-list => assignment-expression . ("," ")")
		")" => reduce 171
		"," => reduce 171

384:	expression-list => expression-list . "," assignment-expression ("," ")")
	function-call => postfix-expression "(" expression-list . ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		")" => shift 427
		"," => shift 428

385:	subscript-expression => postfix-expression "[" expression . "]" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		"]" => shift 426

386:	assignment-expression => unary-expression assignment-op assignment-expression . (":" "}" ")" "]" "," ";")
		$default => reduce 235

387:	array-declarator => direct-declarator "[" array-qualifier-list "*" "]" . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		$default => reduce 50

388:	array-declarator => direct-declarator "[" array-qualifier-list array-size-expression "]" . (":" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" ")" "(" "[" "{")
		$default => reduce 46

389:	for-statement => "for" for-expressions statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 282

390:	initial-clause => declaration . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident ";")
		$default => reduce 289

391:	initial-clause => ";" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident ";")
		$default => reduce 288

392:	initial-clause => expression . ";" ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident ";")
		";" => shift 425

393:	for-expressions => "(" initial-clause . expression ";" expression ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	for-expressions => "(" initial-clause . expression ";" ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	for-expressions => "(" initial-clause . ";" expression ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
	for-expressions => "(" initial-clause . ";" ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
		";" => shift 423
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 424

394:	do-statement => "do" statement "while" . "(" expression ")" ";" ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		"(" => shift 422

395:	while-statement => "while" "(" expression . ")" statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		")" => shift 421

396:	if-else-statement => "if" "(" expression . ")" statement "else" statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	if-statement => "if" "(" expression . ")" statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		")" => shift 420

397:	comma-expression => comma-expression "," assignment-expression . (":" "]" ")" "," ";")
		$default => reduce 248

398:	goto-statement => "goto" named-label ";" . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 297

399:	return-statement => "return" expression ";" . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 295

400:	switch-statement => "switch" "(" expression . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		")" => shift 419

401:	labeled-statement => label ":" statement . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 263

402:	designator => "." . identifier ("." "[" "=")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 1
		'$ident => shift 2
		identifier => shift 418

403:	designator => "[" . constant-expression "]" ("." "[" "=")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		logical-and-expression => shift 137
		logical-or-expression => shift 154
		conditional-expression => shift 248
		constant-expression => shift 417

404:	designator-list => designator . ("[" "." "=")
		"=" => reduce 79
		"." => reduce 79
		"[" => reduce 79

405:	designator-list => designator-list . designator ("[" "." "=")
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	designation => designator-list . "=" ("{" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		"=" => shift 415
		"." => shift 402
		"[" => shift 403
		designator => shift 416

406:	initializer-list => designation . initializer ("," "}")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "," "}"
	initializer => . "{" initializer-list "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		"{" => shift 226
		assignment-expression => shift 227
		initializer => shift 414

407:	initializer-list => initializer . ("," "}")
		"}" => reduce 74
		"," => reduce 74

408:	initializer => "{" initializer-list . "," "}" (";" "," "}")
	initializer-list => initializer-list . "," designation initializer ("," "}")
	initializer-list => initializer-list . "," initializer ("," "}")
	initializer => "{" initializer-list . "}" (";" "," "}")
		"}" => shift 412
		"," => shift 413

409:	code-comment => '$code-comm . (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" "--" "++" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string "}" '$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 320

410:	opt-code-comment => code-comment . (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" "--" "++" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string "}" '$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 313

411:	declaration => declaration-specifiers initialized-declarator-list $P1 ";" opt-code-comment . (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" "--" "++" "&" "~" "!" "+" "-" "sizeof" '$fx '$fl '$ch '$string "}" '$end 'cpp-stmt '$lone-comm "(" '$ident 'cpp-ident "*" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 2

412:	initializer => "{" initializer-list "}" . (";" "," "}")
		"}" => reduce 73
		"," => reduce 73
		";" => reduce 73

413:	initializer-list => initializer-list "," . initializer ("," "}")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "," "}"
	initializer => . "{" initializer-list "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	initializer-list => initializer-list "," . designation initializer ("," "}")
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	initializer => "{" initializer-list "," . "}" (";" "," "}")
		"}" => shift 461
		"." => shift 402
		"[" => shift 403
		designator => shift 404
		designator-list => shift 405
		designation => shift 462
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		"{" => shift 226
		assignment-expression => shift 227
		initializer => shift 463

414:	initializer-list => designation initializer . ("," "}")
		"}" => reduce 76
		"," => reduce 76

415:	designation => designator-list "=" . ("{" "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident)
		$default => reduce 78

416:	designator-list => designator-list designator . ("[" "." "=")
		"=" => reduce 80
		"." => reduce 80
		"[" => reduce 80

417:	designator => "[" constant-expression . "]" ("." "[" "=")
		"]" => shift 460

418:	designator => "." identifier . ("." "[" "=")
		"=" => reduce 82
		"[" => reduce 82
		"." => reduce 82

419:	switch-statement => "switch" "(" expression ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
	statement => . expression-statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . conditional-statement
	statement => . iterative-statement
	statement => . switch-statement
	statement => . break-statement
	statement => . continue-statement
	statement => . return-statement
	statement => . goto-statement
	statement => . null-statement
	expression-statement => . expression ";"
	labeled-statement => . label ":" statement
	compound-statement => . "{" declaration-or-statement-list "}"
	compound-statement => . "{" "}"
	conditional-statement => . if-statement
	conditional-statement => . if-else-statement
	iterative-statement => . while-statement
	iterative-statement => . do-statement
	iterative-statement => . for-statement
	switch-statement => . "switch" "(" expression ")" statement
	break-statement => . "break" ";"
	continue-statement => . "continue" ";"
	return-statement => . "return" expression ";"
	return-statement => . "return" ";"
	goto-statement => . "goto" named-label ";"
	null-statement => . ";"
	expression => . comma-expression
	label => . named-label
	label => . case-label
	label => . default-label
	if-statement => . "if" "(" expression ")" statement
	if-else-statement => . "if" "(" expression ")" statement "else" statement
	while-statement => . "while" "(" expression ")" statement
	do-statement => . "do" statement "while" "(" expression ")" ";"
	for-statement => . "for" for-expressions statement
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	case-label => . "case" constant-expression
	default-label => . "default"
	named-label => . identifier
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		'cpp-ident => shift 1
		'$ident => shift 2
		unary-expression => shift 165
		conditional-expression => shift 166
		identifier => shift 176
		"default" => shift 177
		"case" => shift 178
		assignment-expression => shift 179
		"for" => shift 180
		"do" => shift 181
		"while" => shift 182
		"if" => shift 183
		default-label => shift 184
		case-label => shift 185
		named-label => shift 186
		comma-expression => shift 187
		";" => shift 188
		"goto" => shift 189
		"return" => shift 190
		"continue" => shift 191
		"break" => shift 192
		"switch" => shift 193
		for-statement => shift 194
		do-statement => shift 195
		while-statement => shift 196
		if-else-statement => shift 197
		if-statement => shift 198
		"{" => shift 74
		label => shift 199
		expression => shift 200
		null-statement => shift 201
		goto-statement => shift 202
		return-statement => shift 203
		continue-statement => shift 204
		break-statement => shift 205
		switch-statement => shift 206
		iterative-statement => shift 207
		conditional-statement => shift 208
		compound-statement => shift 209
		labeled-statement => shift 210
		expression-statement => shift 211
		statement => shift 459

420:	if-statement => "if" "(" expression ")" . statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	statement => . expression-statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . conditional-statement
	statement => . iterative-statement
	statement => . switch-statement
	statement => . break-statement
	statement => . continue-statement
	statement => . return-statement
	statement => . goto-statement
	statement => . null-statement
	expression-statement => . expression ";"
	labeled-statement => . label ":" statement
	compound-statement => . "{" declaration-or-statement-list "}"
	compound-statement => . "{" "}"
	conditional-statement => . if-statement
	conditional-statement => . if-else-statement
	iterative-statement => . while-statement
	iterative-statement => . do-statement
	iterative-statement => . for-statement
	switch-statement => . "switch" "(" expression ")" statement
	break-statement => . "break" ";"
	continue-statement => . "continue" ";"
	return-statement => . "return" expression ";"
	return-statement => . "return" ";"
	goto-statement => . "goto" named-label ";"
	null-statement => . ";"
	expression => . comma-expression
	label => . named-label
	label => . case-label
	label => . default-label
	if-statement => . "if" "(" expression ")" statement
	if-else-statement => . "if" "(" expression ")" statement "else" statement
	while-statement => . "while" "(" expression ")" statement
	do-statement => . "do" statement "while" "(" expression ")" ";"
	for-statement => . "for" for-expressions statement
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	case-label => . "case" constant-expression
	default-label => . "default"
	named-label => . identifier
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	if-else-statement => "if" "(" expression ")" . statement "else" statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	statement => . expression-statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . conditional-statement
	statement => . iterative-statement
	statement => . switch-statement
	statement => . break-statement
	statement => . continue-statement
	statement => . return-statement
	statement => . goto-statement
	statement => . null-statement
	expression-statement => . expression ";"
	labeled-statement => . label ":" statement
	compound-statement => . "{" declaration-or-statement-list "}"
	compound-statement => . "{" "}"
	conditional-statement => . if-statement
	conditional-statement => . if-else-statement
	iterative-statement => . while-statement
	iterative-statement => . do-statement
	iterative-statement => . for-statement
	switch-statement => . "switch" "(" expression ")" statement
	break-statement => . "break" ";"
	continue-statement => . "continue" ";"
	return-statement => . "return" expression ";"
	return-statement => . "return" ";"
	goto-statement => . "goto" named-label ";"
	null-statement => . ";"
	expression => . comma-expression
	label => . named-label
	label => . case-label
	label => . default-label
	if-statement => . "if" "(" expression ")" statement
	if-else-statement => . "if" "(" expression ")" statement "else" statement
	while-statement => . "while" "(" expression ")" statement
	do-statement => . "do" statement "while" "(" expression ")" ";"
	for-statement => . "for" for-expressions statement
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	case-label => . "case" constant-expression
	default-label => . "default"
	named-label => . identifier
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		'cpp-ident => shift 1
		'$ident => shift 2
		unary-expression => shift 165
		conditional-expression => shift 166
		identifier => shift 176
		"default" => shift 177
		"case" => shift 178
		assignment-expression => shift 179
		"for" => shift 180
		"do" => shift 181
		"while" => shift 182
		"if" => shift 183
		default-label => shift 184
		case-label => shift 185
		named-label => shift 186
		comma-expression => shift 187
		";" => shift 188
		"goto" => shift 189
		"return" => shift 190
		"continue" => shift 191
		"break" => shift 192
		"switch" => shift 193
		for-statement => shift 194
		do-statement => shift 195
		while-statement => shift 196
		if-else-statement => shift 197
		if-statement => shift 198
		"{" => shift 74
		label => shift 199
		expression => shift 200
		null-statement => shift 201
		goto-statement => shift 202
		return-statement => shift 203
		continue-statement => shift 204
		break-statement => shift 205
		switch-statement => shift 206
		iterative-statement => shift 207
		conditional-statement => shift 208
		compound-statement => shift 209
		labeled-statement => shift 210
		expression-statement => shift 211
		statement => shift 458

421:	while-statement => "while" "(" expression ")" . statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	statement => . expression-statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . conditional-statement
	statement => . iterative-statement
	statement => . switch-statement
	statement => . break-statement
	statement => . continue-statement
	statement => . return-statement
	statement => . goto-statement
	statement => . null-statement
	expression-statement => . expression ";"
	labeled-statement => . label ":" statement
	compound-statement => . "{" declaration-or-statement-list "}"
	compound-statement => . "{" "}"
	conditional-statement => . if-statement
	conditional-statement => . if-else-statement
	iterative-statement => . while-statement
	iterative-statement => . do-statement
	iterative-statement => . for-statement
	switch-statement => . "switch" "(" expression ")" statement
	break-statement => . "break" ";"
	continue-statement => . "continue" ";"
	return-statement => . "return" expression ";"
	return-statement => . "return" ";"
	goto-statement => . "goto" named-label ";"
	null-statement => . ";"
	expression => . comma-expression
	label => . named-label
	label => . case-label
	label => . default-label
	if-statement => . "if" "(" expression ")" statement
	if-else-statement => . "if" "(" expression ")" statement "else" statement
	while-statement => . "while" "(" expression ")" statement
	do-statement => . "do" statement "while" "(" expression ")" ";"
	for-statement => . "for" for-expressions statement
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	case-label => . "case" constant-expression
	default-label => . "default"
	named-label => . identifier
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		'cpp-ident => shift 1
		'$ident => shift 2
		unary-expression => shift 165
		conditional-expression => shift 166
		identifier => shift 176
		"default" => shift 177
		"case" => shift 178
		assignment-expression => shift 179
		"for" => shift 180
		"do" => shift 181
		"while" => shift 182
		"if" => shift 183
		default-label => shift 184
		case-label => shift 185
		named-label => shift 186
		comma-expression => shift 187
		";" => shift 188
		"goto" => shift 189
		"return" => shift 190
		"continue" => shift 191
		"break" => shift 192
		"switch" => shift 193
		for-statement => shift 194
		do-statement => shift 195
		while-statement => shift 196
		if-else-statement => shift 197
		if-statement => shift 198
		"{" => shift 74
		label => shift 199
		expression => shift 200
		null-statement => shift 201
		goto-statement => shift 202
		return-statement => shift 203
		continue-statement => shift 204
		break-statement => shift 205
		switch-statement => shift 206
		iterative-statement => shift 207
		conditional-statement => shift 208
		compound-statement => shift 209
		labeled-statement => shift 210
		expression-statement => shift 211
		statement => shift 457

422:	do-statement => "do" statement "while" "(" . expression ")" ";" ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 456

423:	for-expressions => "(" initial-clause ";" . ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
	for-expressions => "(" initial-clause ";" . expression ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 454
		")" => shift 455

424:	for-expressions => "(" initial-clause expression . ";" ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
	for-expressions => "(" initial-clause expression . ";" expression ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
		";" => shift 453

425:	initial-clause => expression ";" . ("--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string '$ident 'cpp-ident ";")
		$default => reduce 287

426:	subscript-expression => postfix-expression "[" expression "]" . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 164

427:	function-call => postfix-expression "(" expression-list ")" . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 169

428:	expression-list => expression-list "," . assignment-expression ("," ")")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 452

429:	conditional-expression => logical-or-expression "?" expression ":" . conditional-expression (":" "}" ")" "]" "," ";")
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		logical-and-expression => shift 137
		logical-or-expression => shift 154
		conditional-expression => shift 451

430:	sizeof-expression => "sizeof" "(" type-name ")" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	compound-literal => "(" type-name ")" . "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
	compound-literal => "(" type-name ")" . "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
		"{" => shift 432
		$default => reduce 189

431:	compound-literal => "(" type-name ")" . "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
	compound-literal => "(" type-name ")" . "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" "." "->" "[" "(" "++" "--")
		"{" => shift 432

432:	compound-literal => "(" type-name ")" "{" . initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	initializer-list => . initializer
	initializer-list => . initializer-list "," initializer
	initializer-list => . designation initializer
	initializer-list => . initializer-list "," designation initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "," "}"
	initializer => . "{" initializer-list "}"
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	compound-literal => "(" type-name ")" "{" . initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	initializer-list => . initializer
	initializer-list => . initializer-list "," initializer
	initializer-list => . designation initializer
	initializer-list => . initializer-list "," designation initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "," "}"
	initializer => . "{" initializer-list "}"
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"." => shift 402
		"[" => shift 403
		unary-expression => shift 165
		conditional-expression => shift 166
		designator => shift 404
		designator-list => shift 405
		"{" => shift 226
		assignment-expression => shift 227
		designation => shift 406
		initializer => shift 407
		initializer-list => shift 450

433:	cast-expression => "(" type-name ")" cast-expression . ("|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 178

434:	direct-abstract-declarator => "[" "*" "]" . ("," ")" "[" "(")
		$default => reduce 148

435:	direct-abstract-declarator => "[" expression "]" . ("," ")" "[" "(")
		$default => reduce 146

436:	direct-abstract-declarator => "(" parameter-type-list ")" . ("," ")" "[" "(")
		$default => reduce 151

437:	direct-abstract-declarator => "(" abstract-declarator ")" . ("," ")" "[" "(")
		$default => reduce 142

438:	direct-abstract-declarator => direct-abstract-declarator "(" ")" . ("," ")" "[" "(")
		$default => reduce 150

439:	direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list . ")" ("," ")" "[" "(")
		")" => shift 449

440:	direct-abstract-declarator => direct-abstract-declarator "[" "*" . "]" ("," ")" "[" "(")
	indirection-expression => "*" . cast-expression ("," "||" "&&" "|" "^" "&" "!=" "==" "<" "<=" ">" ">=" ">>" "<<" "+" "-" "%" "/" "*" "]" "?" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		"(" => shift 131
		unary-expression => shift 247
		cast-expression => shift 250
		"]" => shift 448

441:	direct-abstract-declarator => direct-abstract-declarator "[" expression . "]" ("," ")" "[" "(")
		"]" => shift 447

442:	direct-abstract-declarator => direct-abstract-declarator "[" "]" . ("," ")" "[" "(")
		$default => reduce 143

443:	enumeration-type-definition => "enum" enumeration-tag "{" enumeration-definition-list "," "}" . (":" "," ")" "[" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef")
		$default => reduce 102

444:	bit-field => declarator ":" width . ("," ";")
		";" => reduce 126
		"," => reduce 126

445:	component-declarator-list => component-declarator-list "," component-declarator . ("," ";")
		";" => reduce 122
		"," => reduce 122

446:	component-declaration => type-specifier component-declarator-list ";" opt-code-comment . ('$lone-comm "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "}")
		$default => reduce 120

447:	direct-abstract-declarator => direct-abstract-declarator "[" expression "]" . ("," ")" "[" "(")
		$default => reduce 145

448:	direct-abstract-declarator => direct-abstract-declarator "[" "*" "]" . ("," ")" "[" "(")
		$default => reduce 147

449:	direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list ")" . ("," ")" "[" "(")
		$default => reduce 149

450:	compound-literal => "(" type-name ")" "{" initializer-list . "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	initializer-list => initializer-list . "," designation initializer ("," "}")
	initializer-list => initializer-list . "," initializer ("," "}")
	compound-literal => "(" type-name ")" "{" initializer-list . "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		"}" => shift 470
		"," => shift 471

451:	conditional-expression => logical-or-expression "?" expression ":" conditional-expression . (":" "}" ")" "]" "," ";")
		$default => reduce 233

452:	expression-list => expression-list "," assignment-expression . ("," ")")
		")" => reduce 172
		"," => reduce 172

453:	for-expressions => "(" initial-clause expression ";" . expression ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
	expression => . comma-expression
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	for-expressions => "(" initial-clause expression ";" . ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
		")" => shift 468
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		assignment-expression => shift 179
		comma-expression => shift 187
		expression => shift 469

454:	for-expressions => "(" initial-clause ";" expression . ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
		")" => shift 467

455:	for-expressions => "(" initial-clause ";" ")" . (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
		$default => reduce 286

456:	do-statement => "do" statement "while" "(" expression . ")" ";" ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		")" => shift 466

457:	while-statement => "while" "(" expression ")" statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 280

458:	if-else-statement => "if" "(" expression ")" statement . "else" statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	if-statement => "if" "(" expression ")" statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		"else" => shift 465
		$default => reduce 275
		["else" => reduce 275] REMOVED by precedence

459:	switch-statement => "switch" "(" expression ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "enum" "_Complex" "double" "float" "long" "signed" "int" "short" "unsigned" "char" "_Bool" "struct" 'typename "union" "void" "restrict" "volatile" "const" "inline" '$string '$ch '$fl '$fx "(" "sizeof" "-" "+" "!" "~" "&" "*" "++" "--" 'cpp-ident '$ident "case" "default" "{" "if" "while" "do" "for" "switch" "break" "continue" "return" "goto" ";" "}")
		$default => reduce 290

460:	designator => "[" constant-expression "]" . ("." "[" "=")
		"=" => reduce 81
		"[" => reduce 81
		"." => reduce 81

461:	initializer => "{" initializer-list "," "}" . (";" "," "}")
		"}" => reduce 72
		"," => reduce 72
		";" => reduce 72

462:	initializer-list => initializer-list "," designation . initializer ("," "}")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "," "}"
	initializer => . "{" initializer-list "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		"{" => shift 226
		assignment-expression => shift 227
		initializer => shift 464

463:	initializer-list => initializer-list "," initializer . ("," "}")
		"}" => reduce 75
		"," => reduce 75

464:	initializer-list => initializer-list "," designation initializer . ("," "}")
		"}" => reduce 77
		"," => reduce 77

465:	if-else-statement => "if" "(" expression ")" statement "else" . statement ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
	statement => . expression-statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . conditional-statement
	statement => . iterative-statement
	statement => . switch-statement
	statement => . break-statement
	statement => . continue-statement
	statement => . return-statement
	statement => . goto-statement
	statement => . null-statement
	expression-statement => . expression ";"
	labeled-statement => . label ":" statement
	compound-statement => . "{" declaration-or-statement-list "}"
	compound-statement => . "{" "}"
	conditional-statement => . if-statement
	conditional-statement => . if-else-statement
	iterative-statement => . while-statement
	iterative-statement => . do-statement
	iterative-statement => . for-statement
	switch-statement => . "switch" "(" expression ")" statement
	break-statement => . "break" ";"
	continue-statement => . "continue" ";"
	return-statement => . "return" expression ";"
	return-statement => . "return" ";"
	goto-statement => . "goto" named-label ";"
	null-statement => . ";"
	expression => . comma-expression
	label => . named-label
	label => . case-label
	label => . default-label
	if-statement => . "if" "(" expression ")" statement
	if-else-statement => . "if" "(" expression ")" statement "else" statement
	while-statement => . "while" "(" expression ")" statement
	do-statement => . "do" statement "while" "(" expression ")" ";"
	for-statement => . "for" for-expressions statement
	comma-expression => . assignment-expression
	comma-expression => . comma-expression "," assignment-expression
	case-label => . "case" constant-expression
	default-label => . "default"
	named-label => . identifier
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		'cpp-ident => shift 1
		'$ident => shift 2
		unary-expression => shift 165
		conditional-expression => shift 166
		identifier => shift 176
		"default" => shift 177
		"case" => shift 178
		assignment-expression => shift 179
		"for" => shift 180
		"do" => shift 181
		"while" => shift 182
		"if" => shift 183
		default-label => shift 184
		case-label => shift 185
		named-label => shift 186
		comma-expression => shift 187
		";" => shift 188
		"goto" => shift 189
		"return" => shift 190
		"continue" => shift 191
		"break" => shift 192
		"switch" => shift 193
		for-statement => shift 194
		do-statement => shift 195
		while-statement => shift 196
		if-else-statement => shift 197
		if-statement => shift 198
		"{" => shift 74
		label => shift 199
		expression => shift 200
		null-statement => shift 201
		goto-statement => shift 202
		return-statement => shift 203
		continue-statement => shift 204
		break-statement => shift 205
		switch-statement => shift 206
		iterative-statement => shift 207
		conditional-statement => shift 208
		compound-statement => shift 209
		labeled-statement => shift 210
		expression-statement => shift 211
		statement => shift 475

466:	do-statement => "do" statement "while" "(" expression ")" . ";" ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		";" => shift 474

467:	for-expressions => "(" initial-clause ";" expression ")" . (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
		$default => reduce 285

468:	for-expressions => "(" initial-clause expression ";" ")" . (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
		$default => reduce 284

469:	for-expressions => "(" initial-clause expression ";" expression . ")" (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
		")" => shift 473

470:	compound-literal => "(" type-name ")" "{" initializer-list "}" . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 175

471:	initializer-list => initializer-list "," . initializer ("," "}")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "," "}"
	initializer => . "{" initializer-list "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-op assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . sizeof-expression
	unary-expression => . unary-minus-expression
	unary-expression => . unary-plus-expression
	unary-expression => . logical-negation-expression
	unary-expression => . bitwise-negation-expression
	unary-expression => . address-expression
	unary-expression => . indirection-expression
	unary-expression => . preincrement-expression
	unary-expression => . predecrement-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . subscript-expression
	postfix-expression => . component-selection-expression
	postfix-expression => . function-call
	postfix-expression => . postincrement-expression
	postfix-expression => . postdecrement-expression
	postfix-expression => . compound-literal
	sizeof-expression => . "sizeof" "(" type-name ")"
	sizeof-expression => . "sizeof" unary-expression
	unary-minus-expression => . "-" cast-expression
	unary-plus-expression => . "+" cast-expression
	logical-negation-expression => . "!" cast-expression
	bitwise-negation-expression => . "~" cast-expression
	address-expression => . "&" cast-expression
	indirection-expression => . "*" cast-expression
	preincrement-expression => . "++" unary-expression
	predecrement-expression => . "--" unary-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . parenthesized-expression
	subscript-expression => . postfix-expression "[" expression "]"
	component-selection-expression => . direct-component-selection
	component-selection-expression => . indirect-component-selection
	function-call => . postfix-expression "(" expression-list ")"
	function-call => . postfix-expression "(" ")"
	postincrement-expression => . postfix-expression "++"
	postdecrement-expression => . postfix-expression "--"
	compound-literal => . "(" type-name ")" "{" initializer-list "}"
	compound-literal => . "(" type-name ")" "{" initializer-list "," "}"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	parenthesized-expression => . "(" expression ")"
	direct-component-selection => . postfix-expression "." identifier
	indirect-component-selection => . postfix-expression "->" identifier
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fx
	constant => . '$fl
	constant => . '$ch
	constant => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression equality-op relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression relational-op shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression shift-op additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression add-op multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression mult-op cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	initializer-list => initializer-list "," . designation initializer ("," "}")
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	compound-literal => "(" type-name ")" "{" initializer-list "," . "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		"}" => shift 472
		"." => shift 402
		"[" => shift 403
		designator => shift 404
		designator-list => shift 405
		designation => shift 462
		cast-expression => shift 118
		multiplicative-expression => shift 119
		additive-expression => shift 120
		shift-expression => shift 121
		relational-expression => shift 122
		equality-expression => shift 123
		bitwise-and-expression => shift 124
		'$string => shift 125
		'$ch => shift 126
		'$fl => shift 127
		'$fx => shift 128
		'cpp-ident => shift 1
		'$ident => shift 2
		bitwise-xor-expression => shift 129
		bitwise-or-expression => shift 130
		"(" => shift 131
		indirect-component-selection => shift 132
		direct-component-selection => shift 133
		parenthesized-expression => shift 134
		constant => shift 135
		identifier => shift 136
		logical-and-expression => shift 137
		"--" => shift 138
		"++" => shift 139
		"*" => shift 175
		"&" => shift 141
		"~" => shift 142
		"!" => shift 143
		"+" => shift 144
		"-" => shift 145
		"sizeof" => shift 146
		compound-literal => shift 147
		postdecrement-expression => shift 148
		postincrement-expression => shift 149
		function-call => shift 150
		component-selection-expression => shift 151
		subscript-expression => shift 152
		primary-expression => shift 153
		logical-or-expression => shift 154
		predecrement-expression => shift 155
		preincrement-expression => shift 156
		indirection-expression => shift 157
		address-expression => shift 158
		bitwise-negation-expression => shift 159
		logical-negation-expression => shift 160
		unary-plus-expression => shift 161
		unary-minus-expression => shift 162
		sizeof-expression => shift 163
		postfix-expression => shift 164
		unary-expression => shift 165
		conditional-expression => shift 166
		"{" => shift 226
		assignment-expression => shift 227
		initializer => shift 463

472:	compound-literal => "(" type-name ")" "{" initializer-list "," "}" . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" ">" "<=" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "." "->" "[" "(" "++" "--" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 176

473:	for-expressions => "(" initial-clause expression ";" expression ")" . (";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string)
		$default => reduce 283

474:	do-statement => "do" statement "while" "(" expression ")" ";" . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 281

475:	if-else-statement => "if" "(" expression ")" statement "else" statement . ("else" ";" "goto" "return" "continue" "break" "switch" "for" "do" "while" "if" "{" "default" "case" '$ident 'cpp-ident "--" "++" "*" "&" "~" "!" "+" "-" "sizeof" "(" '$fx '$fl '$ch '$string "inline" "const" "volatile" "restrict" "void" "union" 'typename "struct" "_Bool" "char" "unsigned" "short" "int" "signed" "long" "float" "double" "_Complex" "enum" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 276

