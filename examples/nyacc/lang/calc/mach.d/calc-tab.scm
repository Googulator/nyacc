;; mach.d/calc-tab.scm

(define calc-len-v
  #(1 1 1 3 1 0 3 3 3 3 1 1 3))

(define calc-pat-v
  #(((4 . 1) (5 . 2) (6 . 3) (14 . 4) (15 . 5) (16 . 6) (17 . 7) (1 . -5)) 
    ((4 . 1) (5 . 2) (6 . 3) (14 . 13) (1 . -5)) ((1 . -11)) ((1 . -10)) 
    ((10 . 9) (9 . 10) (8 . 11) (7 . 12) (1 . -4)) ((1 . -2)) ((11 . 8) 
    (1 . -1)) ((13 . 0)) ((4 . 1) (5 . 2) (6 . 3) (14 . 4) (15 . 19) (1 . -5))
    ((4 . 1) (5 . 2) (6 . 3) (14 . 18) (1 . -5)) ((4 . 1) (5 . 2) (6 . 3) 
    (14 . 17) (1 . -5)) ((4 . 1) (5 . 2) (6 . 3) (14 . 16) (1 . -5)) ((4 . 1) 
    (5 . 2) (6 . 3) (14 . 15) (1 . -5)) ((3 . 14) (10 . 9) (9 . 10) (8 . 11) 
    (7 . 12)) ((1 . -12)) ((1 . -9)) ((1 . -8)) ((8 . 11) (7 . 12) (1 . -7)) 
    ((8 . 11) (7 . 12) (1 . -6)) ((1 . -3))))

(define calc-rto-v
  #(#f 17 16 16 15 14 14 14 14 14 14 14 14))

(define calc-mtab
  '(($start . 17) (")" . 3) ("(" . 4) ($float . 5) ($fixed . 6) ("/" . 7) 
    ("*" . 8) ("-" . 9) ("+" . 10) ("\n" . 11) ($error . 2) ($end . 13)))

(define calc-tables
  (list
   (cons 'len-v calc-len-v)
   (cons 'pat-v calc-pat-v)
   (cons 'rto-v calc-rto-v)
   (cons 'mtab calc-mtab)))

;;; end tables
