nyacc/lang/README

Copyright (C) 2017,2019 Matthew R. Wette

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without any warranty.

To run the demos in this directory please navigate up do the examples/
directory and source the file env.sh.

# Manifest

calc.scm		interactive parser, quick and dirty
			  $ guile calc.scm
			  > 1 + 2
			  3
			  >

mach.scm		spec for parser; tables in mach.d/ created via
			  $ guile Umach.scm
			Umach.scm will also generate ,file.txt and ,expr.txt

parser.scm		parse-calc (for full language) and
			read-calc for expressions

compiler.scm		compiles output of read-calc to Tree-IL
			see spec.scm
  
../../../language/spec.scm
			spec file for Guile's language support; see below
 			depends on parser.scm and compiler.scm

# Using calc as Guile extension language.

Currently, debug is defined in compiler.scm and parser.scm so that you
can see the parser and compiler at work.

  scheme@(guile-user)> ,L calc
  calc@(guile-user)> 1 + 1
  ...
  $1 = 2
  calc@(guile-user)> a = 4 + 4
  ...
  $2 = 8
  calc@(guile-user> ,L scheme
  scheme@(guile-user)> a
  $3 = 8


Enjoy!

===============================================================================

calc@(guile-user)> 1 + 2
state 0, token "1"  => shift, goto 4
state 4, token $default  => reduce 11
state 0, token expr  => shift, goto 6
state 6, token "+"  => shift, goto 10
state 10, token "2"  => shift, goto 4
state 4, token $default  => reduce 11
state 10, token expr  => shift, goto 23
state 23, token "\n"  => reduce 7
state 0, token expr  => shift, goto 6
state 6, token "\n"  => shift, goto 9
state 9, token $default  => reduce 5
SXML:
  (expr-stmt (add (num "1") (num "2")))
CPS:
  (0 . #<cps (kfun () 0 1 9)>)
  (1 . #<cps (ktail)>)
  (2 . #<cps (kargs (arg) (3) (continue 1 (call 1 2 3)))>)
  (3 . #<cps (kargs (arg) (2) (continue 2 (const 2)))>)
  (4 . #<cps (kargs (arg) (1) (continue 3 (const 1)))>)
  (5 . #<cps (kargs (bx) (5) (continue 4 (primcall box-ref #f 5)))>)
  (6 . #<cps (kargs (t) (7) (continue 5 (primcall resolve #f 6 7)))>)
  (7 . #<cps (kargs (sym) (6) (continue 6 (const #t)))>)
  (8 . #<cps (kargs () () (continue 7 (const +)))>)
  (9 . #<cps (kclause (() () #f () #f) 8)>)
ice-9/boot-9.scm:1685:16: In procedure raise-exception:
Unbound variable: resolve
^ error due to 2.2,3.0 change in CPS.  See tree-il/compile-cps.scm
