0 $start => Program
1 Literal => NullLiteral
2 Literal => BooleanLiteral
3 Literal => NumericLiteral
4 Literal => StringLiteral
5 NullLiteral => "null"
6 BooleanLiteral => "true"
7 BooleanLiteral => "false"
8 NumericLiteral => '$fx
9 NumericLiteral => '$fl
10 StringLiteral => '$string
11 Identifier => '$ident
12 PrimaryExpression => "this"
13 PrimaryExpression => Identifier
14 PrimaryExpression => Literal
15 PrimaryExpression => ArrayLiteral
16 PrimaryExpression => ObjectLiteral
17 PrimaryExpression => "(" Expression ")"
18 ArrayLiteral => "[" Elision "]"
19 ArrayLiteral => "[" "]"
20 ArrayLiteral => "[" ElementList "," Elision "]"
21 ArrayLiteral => "[" ElementList "," "]"
22 ElementList => Elision AssignmentExpression
23 ElementList => AssignmentExpression
24 ElementList => ElementList "," Elision AssignmentExpression
25 ElementList => ElementList "," AssignmentExpression
26 Elision => ","
27 Elision => Elision ","
28 ObjectLiteral => "{" "}"
29 ObjectLiteral => "{" PropertyNameAndValueList "}"
30 PropertyNameAndValueList => PropertyName ":" AssignmentExpression
31 PropertyNameAndValueList => PropertyNameAndValueList "," PropertyName ":" AssignmentExpression
32 PropertyName => Identifier
33 PropertyName => StringLiteral
34 PropertyName => NumericLiteral
35 MemberExpression => PrimaryExpression
36 MemberExpression => MemberExpression "[" Expression "]"
37 MemberExpression => MemberExpression "." Identifier
38 MemberExpression => "new" MemberExpression Arguments
39 NewExpression => MemberExpression
40 NewExpression => "new" NewExpression
41 CallExpression => MemberExpression Arguments
42 CallExpression => CallExpression Arguments
43 CallExpression => CallExpression "[" Expression "]"
44 CallExpression => CallExpression "." Identifier
45 Arguments => "(" ")"
46 Arguments => "(" ArgumentList ")"
47 ArgumentList => AssignmentExpression
48 ArgumentList => ArgumentList "," AssignmentExpression
49 LeftHandSideExpression => NewExpression
50 LeftHandSideExpression => CallExpression
51 PostfixExpression => LeftHandSideExpression
52 PostfixExpression => LeftHandSideExpression $P1 "++"
53 PostfixExpression => LeftHandSideExpression $P2 "--"
54 $P1 =>
55 $P2 =>
56 UnaryExpression => PostfixExpression
57 UnaryExpression => "delete" UnaryExpression
58 UnaryExpression => "void" UnaryExpression
59 UnaryExpression => "typeof" UnaryExpression
60 UnaryExpression => "++" UnaryExpression
61 UnaryExpression => "--" UnaryExpression
62 UnaryExpression => "+" UnaryExpression
63 UnaryExpression => "-" UnaryExpression
64 UnaryExpression => "~" UnaryExpression
65 UnaryExpression => "!" UnaryExpression
66 MultiplicativeExpression => UnaryExpression
67 MultiplicativeExpression => MultiplicativeExpression "*" UnaryExpression
68 MultiplicativeExpression => MultiplicativeExpression "/" UnaryExpression
69 MultiplicativeExpression => MultiplicativeExpression "%" UnaryExpression
70 AdditiveExpression => MultiplicativeExpression
71 AdditiveExpression => AdditiveExpression "+" MultiplicativeExpression
72 AdditiveExpression => AdditiveExpression "-" MultiplicativeExpression
73 ShiftExpression => AdditiveExpression
74 ShiftExpression => ShiftExpression "<<" AdditiveExpression
75 ShiftExpression => ShiftExpression ">>" AdditiveExpression
76 ShiftExpression => ShiftExpression ">>>" AdditiveExpression
77 RelationalExpression => ShiftExpression
78 RelationalExpression => RelationalExpression "<" ShiftExpression
79 RelationalExpression => RelationalExpression ">" ShiftExpression
80 RelationalExpression => RelationalExpression "<=" ShiftExpression
81 RelationalExpression => RelationalExpression ">=" ShiftExpression
82 RelationalExpression => RelationalExpression "instanceof" ShiftExpression
83 RelationalExpression => RelationalExpression "in" ShiftExpression
84 RelationalExpressionNoIn => ShiftExpression
85 RelationalExpressionNoIn => RelationalExpressionNoIn "<" ShiftExpression
86 RelationalExpressionNoIn => RelationalExpressionNoIn ">" ShiftExpression
87 RelationalExpressionNoIn => RelationalExpressionNoIn "<=" ShiftExpression
88 RelationalExpressionNoIn => RelationalExpressionNoIn ">=" ShiftExpression
89 RelationalExpressionNoIn => RelationalExpressionNoIn "instanceof" ShiftExpression
90 EqualityExpression => RelationalExpression
91 EqualityExpression => EqualityExpression "==" RelationalExpression
92 EqualityExpression => EqualityExpression "!=" RelationalExpression
93 EqualityExpression => EqualityExpression "===" RelationalExpression
94 EqualityExpression => EqualityExpression "!==" RelationalExpression
95 EqualityExpressionNoIn => RelationalExpressionNoIn
96 EqualityExpressionNoIn => EqualityExpressionNoIn "==" RelationalExpressionNoIn
97 EqualityExpressionNoIn => EqualityExpressionNoIn "!=" RelationalExpressionNoIn
98 EqualityExpressionNoIn => EqualityExpressionNoIn "===" RelationalExpressionNoIn
99 EqualityExpressionNoIn => EqualityExpressionNoIn "!==" RelationalExpressionNoIn
100 BitwiseANDExpression => EqualityExpression
101 BitwiseANDExpression => BitwiseANDExpression "&" EqualityExpression
102 BitwiseANDExpressionNoIn => EqualityExpressionNoIn
103 BitwiseANDExpressionNoIn => BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn
104 BitwiseXORExpression => BitwiseANDExpression
105 BitwiseXORExpression => BitwiseXORExpression "^" BitwiseANDExpression
106 BitwiseXORExpressionNoIn => BitwiseANDExpressionNoIn
107 BitwiseXORExpressionNoIn => BitwiseXORExpressionNoIn "^" BitwiseANDExpressionNoIn
108 BitwiseORExpression => BitwiseXORExpression
109 BitwiseORExpression => BitwiseORExpression "|" BitwiseXORExpression
110 BitwiseORExpressionNoIn => BitwiseXORExpressionNoIn
111 BitwiseORExpressionNoIn => BitwiseORExpressionNoIn "|" BitwiseXORExpressionNoIn
112 LogicalANDExpression => BitwiseORExpression
113 LogicalANDExpression => LogicalANDExpression "&&" BitwiseORExpression
114 LogicalANDExpressionNoIn => BitwiseORExpressionNoIn
115 LogicalANDExpressionNoIn => LogicalANDExpressionNoIn "&&" BitwiseORExpressionNoIn
116 LogicalORExpression => LogicalANDExpression
117 LogicalORExpression => LogicalORExpression "||" LogicalANDExpression
118 LogicalORExpressionNoIn => LogicalANDExpressionNoIn
119 LogicalORExpressionNoIn => LogicalORExpressionNoIn "||" LogicalANDExpressionNoIn
120 ConditionalExpression => LogicalORExpression
121 ConditionalExpression => LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
122 ConditionalExpressionNoIn => LogicalORExpressionNoIn
123 ConditionalExpressionNoIn => LogicalORExpressionNoIn "?" AssignmentExpressionNoIn ":" AssignmentExpressionNoIn
124 AssignmentExpression => ConditionalExpression
125 AssignmentExpression => LeftHandSideExpression AssignmentOperator AssignmentExpression
126 AssignmentExpressionNoIn => ConditionalExpressionNoIn
127 AssignmentExpressionNoIn => LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn
128 AssignmentOperator => "="
129 AssignmentOperator => "*="
130 AssignmentOperator => "/="
131 AssignmentOperator => "%="
132 AssignmentOperator => "+="
133 AssignmentOperator => "-="
134 AssignmentOperator => "<<="
135 AssignmentOperator => ">>="
136 AssignmentOperator => ">>>="
137 AssignmentOperator => "&="
138 AssignmentOperator => "^="
139 AssignmentOperator => "|="
140 Expression => AssignmentExpression
141 Expression => Expression "," AssignmentExpression
142 ExpressionNoIn => AssignmentExpressionNoIn
143 ExpressionNoIn => ExpressionNoIn "," AssignmentExpressionNoIn
144 Statement => VariableStatement
145 Statement => EmptyStatement
146 Statement => ExpressionStatement
147 Statement => IfStatement
148 Statement => IterationStatement
149 Statement => ContinueStatement
150 Statement => BreakStatement
151 Statement => ReturnStatement
152 Statement => WithStatement
153 Statement => LabelledStatement
154 Statement => SwitchStatement
155 Statement => ThrowStatement
156 Statement => TryStatement
157 Block => "{" StatementList "}"
158 Block => "{" "}"
159 StatementList => Statement
160 StatementList => StatementList Statement
161 VariableStatement => "var" VariableDeclarationList ";"
162 VariableDeclarationList => VariableDeclaration
163 VariableDeclarationList => VariableDeclarationList "," VariableDeclaration
164 VariableDeclarationListNoIn => VariableDeclarationNoIn
165 VariableDeclarationListNoIn => VariableDeclarationListNoIn "," VariableDeclarationNoIn
166 VariableDeclaration => Identifier Initializer
167 VariableDeclaration => Identifier
168 VariableDeclarationNoIn => Identifier InitializerNoIn
169 VariableDeclarationNoIn => Identifier
170 Initializer => "=" AssignmentExpression
171 InitializerNoIn => "=" AssignmentExpressionNoIn
172 EmptyStatement => ";"
173 ExpressionStatement => Expression ";"
174 IfStatement => "if" "(" Expression ")" Statement "else" Statement
175 IfStatement => "if" "(" Expression ")" Statement
176 IterationStatement => "do" Statement "while" "(" Expression ")" ";"
177 IterationStatement => "while" "(" Expression ")" Statement
178 IterationStatement => "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
179 IterationStatement => "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
180 IterationStatement => "for" "(" LeftHandSideExpression "in" Expression ")" Statement
181 IterationStatement => "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
182 OptExprStmtNoIn => ":"
183 OptExprStmtNoIn => ExpressionNoIn ";"
184 OptExprStmt => ";"
185 OptExprStmt => Expression ";"
186 OptExprClose => ";"
187 OptExprClose => Expression ")"
188 ContinueStatement => "continue" $P3 Identifier ";"
189 ContinueStatement => "continue" ";"
190 $P3 =>
191 BreakStatement => "break" $P4 Identifier ";"
192 BreakStatement => "break" ";"
193 $P4 =>
194 ReturnStatement => "return" $P5 Expression ";"
195 ReturnStatement => "return" ";"
196 $P5 =>
197 WithStatement => "with" "(" Expression ")" Statement
198 SwitchStatement => "switch" "(" Expression ")" CaseBlock
199 CaseBlock => "{" CaseClauses "}"
200 CaseBlock => "{" "}"
201 CaseBlock => "{" CaseClauses DefaultClause CaseClauses "}"
202 CaseBlock => "{" CaseClauses DefaultClause "}"
203 CaseBlock => "{" DefaultClause CaseClauses "}"
204 CaseBlock => "{" DefaultClause "}"
205 CaseClauses => CaseClause
206 CaseClauses => CaseClauses CaseClause
207 CaseClause => "case" Expression ":" StatementList
208 CaseClause => "case" Expression ":"
209 DefaultClause => "default" ":" StatementList
210 DefaultClause => "default" ":"
211 LabelledStatement => Identifier ":" Statement
212 ThrowStatement => "throw" $P6 Expression ";"
213 $P6 =>
214 TryStatement => "try" Block Catch
215 TryStatement => "try" Block Finally
216 TryStatement => "try" Block Catch Finally
217 Catch => "catch" "(" Identifier ")" Block
218 Finally => "finally" Block
219 FunctionDeclaration => "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
220 FunctionDeclaration => "function" Identifier "(" ")" "{" FunctionBody "}"
221 FunctionExpression => "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
222 FunctionExpression => "function" "(" FormalParameterList ")" "{" FunctionBody "}"
223 FunctionExpression => "function" Identifier "(" ")" "{" FunctionBody "}"
224 FunctionExpression => "function" "(" ")" "{" FunctionBody "}"
225 FormalParameterList => Identifier
226 FormalParameterList => FormalParameterList "," Identifier
227 FunctionBody => SourceElements
228 Program => SourceElements
229 SourceElements => SourceElement
230 SourceElements => SourceElements SourceElement
231 SourceElement => Statement
232 SourceElement => FunctionDeclaration

0:	$start => . Program ('$end)
	Program => . SourceElements
	SourceElements => . SourceElement
	SourceElements => . SourceElements SourceElement
	SourceElement => . Statement
	SourceElement => . FunctionDeclaration
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	FunctionDeclaration => . "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
	FunctionDeclaration => . "function" Identifier "(" ")" "{" FunctionBody "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		"function" => shift 63
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		FunctionDeclaration => shift 77
		Statement => shift 78
		SourceElement => shift 79
		SourceElements => shift 80
		Program => shift 81

1:	UnaryExpression => "!" . UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 175

2:	UnaryExpression => "~" . UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 174

3:	UnaryExpression => "-" . UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 173

4:	UnaryExpression => "+" . UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 172

5:	UnaryExpression => "--" . UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 171

6:	UnaryExpression => "++" . UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 170

7:	UnaryExpression => "typeof" . UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 169

8:	UnaryExpression => "void" . UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 168

9:	UnaryExpression => "delete" . UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 167

10:	UnaryExpression => PostfixExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		"?" => reduce 56
		";" => reduce 56
		"*" => reduce 56
		"/" => reduce 56
		"%" => reduce 56
		"-" => reduce 56
		"+" => reduce 56
		"<<" => reduce 56
		">>" => reduce 56
		">>>" => reduce 56
		"in" => reduce 56
		"instanceof" => reduce 56
		">=" => reduce 56
		"<=" => reduce 56
		">" => reduce 56
		"<" => reduce 56
		"==" => reduce 56
		"!=" => reduce 56
		"===" => reduce 56
		"!==" => reduce 56
		"&" => reduce 56
		"^" => reduce 56
		"|" => reduce 56
		"&&" => reduce 56
		"||" => reduce 56
		"," => reduce 56
		")" => reduce 56
		"]" => reduce 56
		":" => reduce 56
		"}" => reduce 56

11:	MultiplicativeExpression => UnaryExpression . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		";" => reduce 66
		"?" => reduce 66
		"," => reduce 66
		"||" => reduce 66
		"&&" => reduce 66
		"|" => reduce 66
		"^" => reduce 66
		"&" => reduce 66
		"!==" => reduce 66
		"===" => reduce 66
		"!=" => reduce 66
		"==" => reduce 66
		"<" => reduce 66
		">" => reduce 66
		"<=" => reduce 66
		">=" => reduce 66
		"instanceof" => reduce 66
		"in" => reduce 66
		">>>" => reduce 66
		">>" => reduce 66
		"<<" => reduce 66
		"+" => reduce 66
		"-" => reduce 66
		"%" => reduce 66
		"/" => reduce 66
		"*" => reduce 66
		")" => reduce 66
		"]" => reduce 66
		":" => reduce 66
		"}" => reduce 66

12:	MultiplicativeExpression => MultiplicativeExpression . "%" UnaryExpression ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	MultiplicativeExpression => MultiplicativeExpression . "/" UnaryExpression ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	MultiplicativeExpression => MultiplicativeExpression . "*" UnaryExpression ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AdditiveExpression => MultiplicativeExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 163
		"/" => shift 164
		"%" => shift 165
		"?" => reduce 70
		";" => reduce 70
		"-" => reduce 70
		"+" => reduce 70
		"<<" => reduce 70
		">>" => reduce 70
		">>>" => reduce 70
		"in" => reduce 70
		"instanceof" => reduce 70
		">=" => reduce 70
		"<=" => reduce 70
		">" => reduce 70
		"<" => reduce 70
		"==" => reduce 70
		"!=" => reduce 70
		"===" => reduce 70
		"!==" => reduce 70
		"&" => reduce 70
		"^" => reduce 70
		"|" => reduce 70
		"&&" => reduce 70
		"||" => reduce 70
		"," => reduce 70
		")" => reduce 70
		"]" => reduce 70
		":" => reduce 70
		"}" => reduce 70

13:	AdditiveExpression => AdditiveExpression . "-" MultiplicativeExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?")
	AdditiveExpression => AdditiveExpression . "+" MultiplicativeExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?")
	ShiftExpression => AdditiveExpression . ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 161
		"-" => shift 162
		";" => reduce 73
		"?" => reduce 73
		"," => reduce 73
		"||" => reduce 73
		"&&" => reduce 73
		"|" => reduce 73
		"^" => reduce 73
		"&" => reduce 73
		"!==" => reduce 73
		"===" => reduce 73
		"!=" => reduce 73
		"==" => reduce 73
		"<" => reduce 73
		">" => reduce 73
		"<=" => reduce 73
		">=" => reduce 73
		"instanceof" => reduce 73
		"in" => reduce 73
		">>>" => reduce 73
		">>" => reduce 73
		"<<" => reduce 73
		")" => reduce 73
		"]" => reduce 73
		":" => reduce 73
		"}" => reduce 73

14:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpression => ShiftExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 77
		";" => reduce 77
		"in" => reduce 77
		"instanceof" => reduce 77
		">=" => reduce 77
		"<=" => reduce 77
		">" => reduce 77
		"<" => reduce 77
		"==" => reduce 77
		"!=" => reduce 77
		"===" => reduce 77
		"!==" => reduce 77
		"&" => reduce 77
		"^" => reduce 77
		"|" => reduce 77
		"&&" => reduce 77
		"||" => reduce 77
		"," => reduce 77
		")" => reduce 77
		"]" => reduce 77
		":" => reduce 77
		"}" => reduce 77

15:	RelationalExpression => RelationalExpression . "in" ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	RelationalExpression => RelationalExpression . "instanceof" ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	RelationalExpression => RelationalExpression . ">=" ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	RelationalExpression => RelationalExpression . "<=" ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	RelationalExpression => RelationalExpression . ">" ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	RelationalExpression => RelationalExpression . "<" ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	EqualityExpression => RelationalExpression . ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 152
		">" => shift 153
		"<=" => shift 154
		">=" => shift 155
		"instanceof" => shift 156
		"in" => shift 157
		";" => reduce 90
		"?" => reduce 90
		"," => reduce 90
		"||" => reduce 90
		"&&" => reduce 90
		"|" => reduce 90
		"^" => reduce 90
		"&" => reduce 90
		"!==" => reduce 90
		"===" => reduce 90
		"!=" => reduce 90
		"==" => reduce 90
		")" => reduce 90
		"]" => reduce 90
		":" => reduce 90
		"}" => reduce 90

16:	EqualityExpression => EqualityExpression . "!==" RelationalExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	EqualityExpression => EqualityExpression . "===" RelationalExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	EqualityExpression => EqualityExpression . "!=" RelationalExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	EqualityExpression => EqualityExpression . "==" RelationalExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	BitwiseANDExpression => EqualityExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?")
		"==" => shift 148
		"!=" => shift 149
		"===" => shift 150
		"!==" => shift 151
		"?" => reduce 100
		";" => reduce 100
		"&" => reduce 100
		"^" => reduce 100
		"|" => reduce 100
		"&&" => reduce 100
		"||" => reduce 100
		"," => reduce 100
		")" => reduce 100
		"]" => reduce 100
		":" => reduce 100
		"}" => reduce 100

17:	StringLiteral => '$string . ("}" "]" ")" ":" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		"(" => reduce 10
		"=" => reduce 10
		"*=" => reduce 10
		"/=" => reduce 10
		"%=" => reduce 10
		"+=" => reduce 10
		"-=" => reduce 10
		"<<=" => reduce 10
		">>=" => reduce 10
		">>>=" => reduce 10
		"&=" => reduce 10
		"^=" => reduce 10
		"|=" => reduce 10
		"[" => reduce 10
		"." => reduce 10
		";" => reduce 10
		"?" => reduce 10
		"++" => reduce 10
		"--" => reduce 10
		"," => reduce 10
		"||" => reduce 10
		"&&" => reduce 10
		"|" => reduce 10
		"^" => reduce 10
		"&" => reduce 10
		"!==" => reduce 10
		"===" => reduce 10
		"!=" => reduce 10
		"==" => reduce 10
		"<" => reduce 10
		">" => reduce 10
		"<=" => reduce 10
		">=" => reduce 10
		"instanceof" => reduce 10
		"in" => reduce 10
		">>>" => reduce 10
		">>" => reduce 10
		"<<" => reduce 10
		"+" => reduce 10
		"-" => reduce 10
		"%" => reduce 10
		"/" => reduce 10
		"*" => reduce 10
		":" => reduce 10
		")" => reduce 10
		"]" => reduce 10
		"}" => reduce 10

18:	NumericLiteral => '$fl . ("}" "]" ")" ":" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		"(" => reduce 9
		"=" => reduce 9
		"*=" => reduce 9
		"/=" => reduce 9
		"%=" => reduce 9
		"+=" => reduce 9
		"-=" => reduce 9
		"<<=" => reduce 9
		">>=" => reduce 9
		">>>=" => reduce 9
		"&=" => reduce 9
		"^=" => reduce 9
		"|=" => reduce 9
		"[" => reduce 9
		"." => reduce 9
		";" => reduce 9
		"?" => reduce 9
		"++" => reduce 9
		"--" => reduce 9
		"," => reduce 9
		"||" => reduce 9
		"&&" => reduce 9
		"|" => reduce 9
		"^" => reduce 9
		"&" => reduce 9
		"!==" => reduce 9
		"===" => reduce 9
		"!=" => reduce 9
		"==" => reduce 9
		"<" => reduce 9
		">" => reduce 9
		"<=" => reduce 9
		">=" => reduce 9
		"instanceof" => reduce 9
		"in" => reduce 9
		">>>" => reduce 9
		">>" => reduce 9
		"<<" => reduce 9
		"+" => reduce 9
		"-" => reduce 9
		"%" => reduce 9
		"/" => reduce 9
		"*" => reduce 9
		":" => reduce 9
		")" => reduce 9
		"]" => reduce 9
		"}" => reduce 9

19:	NumericLiteral => '$fx . ("}" "]" ")" ":" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		"(" => reduce 8
		"=" => reduce 8
		"*=" => reduce 8
		"/=" => reduce 8
		"%=" => reduce 8
		"+=" => reduce 8
		"-=" => reduce 8
		"<<=" => reduce 8
		">>=" => reduce 8
		">>>=" => reduce 8
		"&=" => reduce 8
		"^=" => reduce 8
		"|=" => reduce 8
		"[" => reduce 8
		"." => reduce 8
		";" => reduce 8
		"?" => reduce 8
		"++" => reduce 8
		"--" => reduce 8
		"," => reduce 8
		"||" => reduce 8
		"&&" => reduce 8
		"|" => reduce 8
		"^" => reduce 8
		"&" => reduce 8
		"!==" => reduce 8
		"===" => reduce 8
		"!=" => reduce 8
		"==" => reduce 8
		"<" => reduce 8
		">" => reduce 8
		"<=" => reduce 8
		">=" => reduce 8
		"instanceof" => reduce 8
		"in" => reduce 8
		">>>" => reduce 8
		">>" => reduce 8
		"<<" => reduce 8
		"+" => reduce 8
		"-" => reduce 8
		"%" => reduce 8
		"/" => reduce 8
		"*" => reduce 8
		":" => reduce 8
		")" => reduce 8
		"]" => reduce 8
		"}" => reduce 8

20:	BooleanLiteral => "false" . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		"(" => reduce 7
		"=" => reduce 7
		"*=" => reduce 7
		"/=" => reduce 7
		"%=" => reduce 7
		"+=" => reduce 7
		"-=" => reduce 7
		"<<=" => reduce 7
		">>=" => reduce 7
		">>>=" => reduce 7
		"&=" => reduce 7
		"^=" => reduce 7
		"|=" => reduce 7
		"[" => reduce 7
		"." => reduce 7
		";" => reduce 7
		"?" => reduce 7
		"++" => reduce 7
		"--" => reduce 7
		"," => reduce 7
		"||" => reduce 7
		"&&" => reduce 7
		"|" => reduce 7
		"^" => reduce 7
		"&" => reduce 7
		"!==" => reduce 7
		"===" => reduce 7
		"!=" => reduce 7
		"==" => reduce 7
		"<" => reduce 7
		">" => reduce 7
		"<=" => reduce 7
		">=" => reduce 7
		"instanceof" => reduce 7
		"in" => reduce 7
		">>>" => reduce 7
		">>" => reduce 7
		"<<" => reduce 7
		"+" => reduce 7
		"-" => reduce 7
		"%" => reduce 7
		"/" => reduce 7
		"*" => reduce 7
		")" => reduce 7
		"]" => reduce 7
		":" => reduce 7
		"}" => reduce 7

21:	BooleanLiteral => "true" . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		"(" => reduce 6
		"=" => reduce 6
		"*=" => reduce 6
		"/=" => reduce 6
		"%=" => reduce 6
		"+=" => reduce 6
		"-=" => reduce 6
		"<<=" => reduce 6
		">>=" => reduce 6
		">>>=" => reduce 6
		"&=" => reduce 6
		"^=" => reduce 6
		"|=" => reduce 6
		"[" => reduce 6
		"." => reduce 6
		";" => reduce 6
		"?" => reduce 6
		"++" => reduce 6
		"--" => reduce 6
		"," => reduce 6
		"||" => reduce 6
		"&&" => reduce 6
		"|" => reduce 6
		"^" => reduce 6
		"&" => reduce 6
		"!==" => reduce 6
		"===" => reduce 6
		"!=" => reduce 6
		"==" => reduce 6
		"<" => reduce 6
		">" => reduce 6
		"<=" => reduce 6
		">=" => reduce 6
		"instanceof" => reduce 6
		"in" => reduce 6
		">>>" => reduce 6
		">>" => reduce 6
		"<<" => reduce 6
		"+" => reduce 6
		"-" => reduce 6
		"%" => reduce 6
		"/" => reduce 6
		"*" => reduce 6
		")" => reduce 6
		"]" => reduce 6
		":" => reduce 6
		"}" => reduce 6

22:	NullLiteral => "null" . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		"(" => reduce 5
		"=" => reduce 5
		"*=" => reduce 5
		"/=" => reduce 5
		"%=" => reduce 5
		"+=" => reduce 5
		"-=" => reduce 5
		"<<=" => reduce 5
		">>=" => reduce 5
		">>>=" => reduce 5
		"&=" => reduce 5
		"^=" => reduce 5
		"|=" => reduce 5
		"[" => reduce 5
		"." => reduce 5
		";" => reduce 5
		"?" => reduce 5
		"++" => reduce 5
		"--" => reduce 5
		"," => reduce 5
		"||" => reduce 5
		"&&" => reduce 5
		"|" => reduce 5
		"^" => reduce 5
		"&" => reduce 5
		"!==" => reduce 5
		"===" => reduce 5
		"!=" => reduce 5
		"==" => reduce 5
		"<" => reduce 5
		">" => reduce 5
		"<=" => reduce 5
		">=" => reduce 5
		"instanceof" => reduce 5
		"in" => reduce 5
		">>>" => reduce 5
		">>" => reduce 5
		"<<" => reduce 5
		"+" => reduce 5
		"-" => reduce 5
		"%" => reduce 5
		"/" => reduce 5
		"*" => reduce 5
		")" => reduce 5
		"]" => reduce 5
		":" => reduce 5
		"}" => reduce 5

23:	BitwiseANDExpression => BitwiseANDExpression . "&" EqualityExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?")
	BitwiseXORExpression => BitwiseANDExpression . ("}" ":" "]" ")" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 147
		";" => reduce 104
		"?" => reduce 104
		"," => reduce 104
		"||" => reduce 104
		"&&" => reduce 104
		"|" => reduce 104
		"^" => reduce 104
		")" => reduce 104
		"]" => reduce 104
		":" => reduce 104
		"}" => reduce 104

24:	ObjectLiteral => "{" . PropertyNameAndValueList "}" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	PropertyNameAndValueList => . PropertyName ":" AssignmentExpression
	PropertyNameAndValueList => . PropertyNameAndValueList "," PropertyName ":" AssignmentExpression
	PropertyName => . Identifier
	PropertyName => . StringLiteral
	PropertyName => . NumericLiteral
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	Identifier => . '$ident
	ObjectLiteral => "{" . "}" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"}" => shift 141
		'$ident => shift 47
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		NumericLiteral => shift 142
		StringLiteral => shift 143
		Identifier => shift 144
		PropertyName => shift 145
		PropertyNameAndValueList => shift 146

25:	ArrayLiteral => "[" . ElementList "," "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	ElementList => . Elision AssignmentExpression
	ElementList => . AssignmentExpression
	ElementList => . ElementList "," Elision AssignmentExpression
	ElementList => . ElementList "," AssignmentExpression
	Elision => . ","
	Elision => . Elision ","
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	ArrayLiteral => "[" . ElementList "," Elision "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	ElementList => . Elision AssignmentExpression
	ElementList => . AssignmentExpression
	ElementList => . ElementList "," Elision AssignmentExpression
	ElementList => . ElementList "," AssignmentExpression
	Elision => . ","
	Elision => . Elision ","
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	ArrayLiteral => "[" . "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	ArrayLiteral => "[" . Elision "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Elision => . ","
	Elision => . Elision ","
		"]" => shift 136
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		"," => shift 137
		AssignmentExpression => shift 138
		Elision => shift 139
		ElementList => shift 140

26:	Literal => StringLiteral . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 4
		"^=" => reduce 4
		"&=" => reduce 4
		">>>=" => reduce 4
		">>=" => reduce 4
		"<<=" => reduce 4
		"-=" => reduce 4
		"+=" => reduce 4
		"%=" => reduce 4
		"/=" => reduce 4
		"*=" => reduce 4
		"=" => reduce 4
		"(" => reduce 4
		"." => reduce 4
		"[" => reduce 4
		"--" => reduce 4
		"++" => reduce 4
		"?" => reduce 4
		";" => reduce 4
		"*" => reduce 4
		"/" => reduce 4
		"%" => reduce 4
		"-" => reduce 4
		"+" => reduce 4
		"<<" => reduce 4
		">>" => reduce 4
		">>>" => reduce 4
		"in" => reduce 4
		"instanceof" => reduce 4
		">=" => reduce 4
		"<=" => reduce 4
		">" => reduce 4
		"<" => reduce 4
		"==" => reduce 4
		"!=" => reduce 4
		"===" => reduce 4
		"!==" => reduce 4
		"&" => reduce 4
		"^" => reduce 4
		"|" => reduce 4
		"&&" => reduce 4
		"||" => reduce 4
		"," => reduce 4
		")" => reduce 4
		"]" => reduce 4
		":" => reduce 4
		"}" => reduce 4

27:	Literal => NumericLiteral . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 3
		"^=" => reduce 3
		"&=" => reduce 3
		">>>=" => reduce 3
		">>=" => reduce 3
		"<<=" => reduce 3
		"-=" => reduce 3
		"+=" => reduce 3
		"%=" => reduce 3
		"/=" => reduce 3
		"*=" => reduce 3
		"=" => reduce 3
		"(" => reduce 3
		"." => reduce 3
		"[" => reduce 3
		"--" => reduce 3
		"++" => reduce 3
		"?" => reduce 3
		";" => reduce 3
		"*" => reduce 3
		"/" => reduce 3
		"%" => reduce 3
		"-" => reduce 3
		"+" => reduce 3
		"<<" => reduce 3
		">>" => reduce 3
		">>>" => reduce 3
		"in" => reduce 3
		"instanceof" => reduce 3
		">=" => reduce 3
		"<=" => reduce 3
		">" => reduce 3
		"<" => reduce 3
		"==" => reduce 3
		"!=" => reduce 3
		"===" => reduce 3
		"!==" => reduce 3
		"&" => reduce 3
		"^" => reduce 3
		"|" => reduce 3
		"&&" => reduce 3
		"||" => reduce 3
		"," => reduce 3
		")" => reduce 3
		"]" => reduce 3
		":" => reduce 3
		"}" => reduce 3

28:	Literal => BooleanLiteral . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 2
		"^=" => reduce 2
		"&=" => reduce 2
		">>>=" => reduce 2
		">>=" => reduce 2
		"<<=" => reduce 2
		"-=" => reduce 2
		"+=" => reduce 2
		"%=" => reduce 2
		"/=" => reduce 2
		"*=" => reduce 2
		"=" => reduce 2
		"(" => reduce 2
		"." => reduce 2
		"[" => reduce 2
		"--" => reduce 2
		"++" => reduce 2
		"?" => reduce 2
		";" => reduce 2
		"*" => reduce 2
		"/" => reduce 2
		"%" => reduce 2
		"-" => reduce 2
		"+" => reduce 2
		"<<" => reduce 2
		">>" => reduce 2
		">>>" => reduce 2
		"in" => reduce 2
		"instanceof" => reduce 2
		">=" => reduce 2
		"<=" => reduce 2
		">" => reduce 2
		"<" => reduce 2
		"==" => reduce 2
		"!=" => reduce 2
		"===" => reduce 2
		"!==" => reduce 2
		"&" => reduce 2
		"^" => reduce 2
		"|" => reduce 2
		"&&" => reduce 2
		"||" => reduce 2
		"," => reduce 2
		")" => reduce 2
		"]" => reduce 2
		":" => reduce 2
		"}" => reduce 2

29:	Literal => NullLiteral . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 1
		"^=" => reduce 1
		"&=" => reduce 1
		">>>=" => reduce 1
		">>=" => reduce 1
		"<<=" => reduce 1
		"-=" => reduce 1
		"+=" => reduce 1
		"%=" => reduce 1
		"/=" => reduce 1
		"*=" => reduce 1
		"=" => reduce 1
		"(" => reduce 1
		"." => reduce 1
		"[" => reduce 1
		"--" => reduce 1
		"++" => reduce 1
		"?" => reduce 1
		";" => reduce 1
		"*" => reduce 1
		"/" => reduce 1
		"%" => reduce 1
		"-" => reduce 1
		"+" => reduce 1
		"<<" => reduce 1
		">>" => reduce 1
		">>>" => reduce 1
		"in" => reduce 1
		"instanceof" => reduce 1
		">=" => reduce 1
		"<=" => reduce 1
		">" => reduce 1
		"<" => reduce 1
		"==" => reduce 1
		"!=" => reduce 1
		"===" => reduce 1
		"!==" => reduce 1
		"&" => reduce 1
		"^" => reduce 1
		"|" => reduce 1
		"&&" => reduce 1
		"||" => reduce 1
		"," => reduce 1
		")" => reduce 1
		"]" => reduce 1
		":" => reduce 1
		"}" => reduce 1

30:	BitwiseXORExpression => BitwiseXORExpression . "^" BitwiseANDExpression ("}" ":" "]" ")" "^" "|" "&&" "||" "," "?" ";")
	BitwiseORExpression => BitwiseXORExpression . ("}" ":" "]" ")" "," "||" "&&" "|" ";" "?")
		"^" => shift 135
		"?" => reduce 108
		";" => reduce 108
		"|" => reduce 108
		"&&" => reduce 108
		"||" => reduce 108
		"," => reduce 108
		")" => reduce 108
		"]" => reduce 108
		":" => reduce 108
		"}" => reduce 108

31:	PrimaryExpression => "(" . Expression ")" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 134

32:	PrimaryExpression => ObjectLiteral . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		"(" => reduce 16
		"=" => reduce 16
		"*=" => reduce 16
		"/=" => reduce 16
		"%=" => reduce 16
		"+=" => reduce 16
		"-=" => reduce 16
		"<<=" => reduce 16
		">>=" => reduce 16
		">>>=" => reduce 16
		"&=" => reduce 16
		"^=" => reduce 16
		"|=" => reduce 16
		"[" => reduce 16
		"." => reduce 16
		";" => reduce 16
		"?" => reduce 16
		"++" => reduce 16
		"--" => reduce 16
		"," => reduce 16
		"||" => reduce 16
		"&&" => reduce 16
		"|" => reduce 16
		"^" => reduce 16
		"&" => reduce 16
		"!==" => reduce 16
		"===" => reduce 16
		"!=" => reduce 16
		"==" => reduce 16
		"<" => reduce 16
		">" => reduce 16
		"<=" => reduce 16
		">=" => reduce 16
		"instanceof" => reduce 16
		"in" => reduce 16
		">>>" => reduce 16
		">>" => reduce 16
		"<<" => reduce 16
		"+" => reduce 16
		"-" => reduce 16
		"%" => reduce 16
		"/" => reduce 16
		"*" => reduce 16
		")" => reduce 16
		"]" => reduce 16
		":" => reduce 16
		"}" => reduce 16

33:	PrimaryExpression => ArrayLiteral . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		"(" => reduce 15
		"=" => reduce 15
		"*=" => reduce 15
		"/=" => reduce 15
		"%=" => reduce 15
		"+=" => reduce 15
		"-=" => reduce 15
		"<<=" => reduce 15
		">>=" => reduce 15
		">>>=" => reduce 15
		"&=" => reduce 15
		"^=" => reduce 15
		"|=" => reduce 15
		"[" => reduce 15
		"." => reduce 15
		";" => reduce 15
		"?" => reduce 15
		"++" => reduce 15
		"--" => reduce 15
		"," => reduce 15
		"||" => reduce 15
		"&&" => reduce 15
		"|" => reduce 15
		"^" => reduce 15
		"&" => reduce 15
		"!==" => reduce 15
		"===" => reduce 15
		"!=" => reduce 15
		"==" => reduce 15
		"<" => reduce 15
		">" => reduce 15
		"<=" => reduce 15
		">=" => reduce 15
		"instanceof" => reduce 15
		"in" => reduce 15
		">>>" => reduce 15
		">>" => reduce 15
		"<<" => reduce 15
		"+" => reduce 15
		"-" => reduce 15
		"%" => reduce 15
		"/" => reduce 15
		"*" => reduce 15
		")" => reduce 15
		"]" => reduce 15
		":" => reduce 15
		"}" => reduce 15

34:	PrimaryExpression => Literal . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		"(" => reduce 14
		"=" => reduce 14
		"*=" => reduce 14
		"/=" => reduce 14
		"%=" => reduce 14
		"+=" => reduce 14
		"-=" => reduce 14
		"<<=" => reduce 14
		">>=" => reduce 14
		">>>=" => reduce 14
		"&=" => reduce 14
		"^=" => reduce 14
		"|=" => reduce 14
		"[" => reduce 14
		"." => reduce 14
		";" => reduce 14
		"?" => reduce 14
		"++" => reduce 14
		"--" => reduce 14
		"," => reduce 14
		"||" => reduce 14
		"&&" => reduce 14
		"|" => reduce 14
		"^" => reduce 14
		"&" => reduce 14
		"!==" => reduce 14
		"===" => reduce 14
		"!=" => reduce 14
		"==" => reduce 14
		"<" => reduce 14
		">" => reduce 14
		"<=" => reduce 14
		">=" => reduce 14
		"instanceof" => reduce 14
		"in" => reduce 14
		">>>" => reduce 14
		">>" => reduce 14
		"<<" => reduce 14
		"+" => reduce 14
		"-" => reduce 14
		"%" => reduce 14
		"/" => reduce 14
		"*" => reduce 14
		")" => reduce 14
		"]" => reduce 14
		":" => reduce 14
		"}" => reduce 14

35:	PrimaryExpression => "this" . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		"(" => reduce 12
		"=" => reduce 12
		"*=" => reduce 12
		"/=" => reduce 12
		"%=" => reduce 12
		"+=" => reduce 12
		"-=" => reduce 12
		"<<=" => reduce 12
		">>=" => reduce 12
		">>>=" => reduce 12
		"&=" => reduce 12
		"^=" => reduce 12
		"|=" => reduce 12
		"[" => reduce 12
		"." => reduce 12
		";" => reduce 12
		"?" => reduce 12
		"++" => reduce 12
		"--" => reduce 12
		"," => reduce 12
		"||" => reduce 12
		"&&" => reduce 12
		"|" => reduce 12
		"^" => reduce 12
		"&" => reduce 12
		"!==" => reduce 12
		"===" => reduce 12
		"!=" => reduce 12
		"==" => reduce 12
		"<" => reduce 12
		">" => reduce 12
		"<=" => reduce 12
		">=" => reduce 12
		"instanceof" => reduce 12
		"in" => reduce 12
		">>>" => reduce 12
		">>" => reduce 12
		"<<" => reduce 12
		"+" => reduce 12
		"-" => reduce 12
		"%" => reduce 12
		"/" => reduce 12
		"*" => reduce 12
		")" => reduce 12
		"]" => reduce 12
		":" => reduce 12
		"}" => reduce 12

36:	BitwiseORExpression => BitwiseORExpression . "|" BitwiseXORExpression ("}" ":" "]" ")" "," "||" "&&" "|" ";" "?")
	LogicalANDExpression => BitwiseORExpression . ("}" ":" "]" ")" "&&" "||" "," "?" ";")
		"|" => shift 133
		";" => reduce 112
		"?" => reduce 112
		"," => reduce 112
		"||" => reduce 112
		"&&" => reduce 112
		")" => reduce 112
		"]" => reduce 112
		":" => reduce 112
		"}" => reduce 112

37:	MemberExpression => PrimaryExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 35
		"^=" => reduce 35
		"&=" => reduce 35
		">>>=" => reduce 35
		">>=" => reduce 35
		"<<=" => reduce 35
		"-=" => reduce 35
		"+=" => reduce 35
		"%=" => reduce 35
		"/=" => reduce 35
		"*=" => reduce 35
		"=" => reduce 35
		"(" => reduce 35
		"." => reduce 35
		"[" => reduce 35
		"--" => reduce 35
		"++" => reduce 35
		"?" => reduce 35
		";" => reduce 35
		"*" => reduce 35
		"/" => reduce 35
		"%" => reduce 35
		"-" => reduce 35
		"+" => reduce 35
		"<<" => reduce 35
		">>" => reduce 35
		">>>" => reduce 35
		"in" => reduce 35
		"instanceof" => reduce 35
		">=" => reduce 35
		"<=" => reduce 35
		">" => reduce 35
		"<" => reduce 35
		"==" => reduce 35
		"!=" => reduce 35
		"===" => reduce 35
		"!==" => reduce 35
		"&" => reduce 35
		"^" => reduce 35
		"|" => reduce 35
		"&&" => reduce 35
		"||" => reduce 35
		"," => reduce 35
		")" => reduce 35
		"]" => reduce 35
		":" => reduce 35
		"}" => reduce 35

38:	LogicalANDExpression => LogicalANDExpression . "&&" BitwiseORExpression ("}" ":" "]" ")" "&&" "||" "," "?" ";")
	LogicalORExpression => LogicalANDExpression . ("}" ":" "]" ")" "," "||" ";" "?")
		"&&" => shift 132
		"?" => reduce 116
		";" => reduce 116
		"||" => reduce 116
		"," => reduce 116
		")" => reduce 116
		"]" => reduce 116
		":" => reduce 116
		"}" => reduce 116

39:	MemberExpression => "new" . MemberExpression Arguments ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	NewExpression => "new" . NewExpression ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		NewExpression => shift 129
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		"new" => shift 39
		PrimaryExpression => shift 37
		MemberExpression => shift 131

40:	MemberExpression => MemberExpression . "." Identifier ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	MemberExpression => MemberExpression . "[" Expression "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	CallExpression => MemberExpression . Arguments ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	Arguments => . "(" ")"
	Arguments => . "(" ArgumentList ")"
	NewExpression => MemberExpression . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		"(" => shift 120
		Arguments => shift 126
		"[" => shift 127
		"." => shift 128
		"=" => reduce 39
		"*=" => reduce 39
		"/=" => reduce 39
		"%=" => reduce 39
		"+=" => reduce 39
		"-=" => reduce 39
		"<<=" => reduce 39
		">>=" => reduce 39
		">>>=" => reduce 39
		"&=" => reduce 39
		"^=" => reduce 39
		"|=" => reduce 39
		";" => reduce 39
		"?" => reduce 39
		"++" => reduce 39
		"--" => reduce 39
		"," => reduce 39
		"||" => reduce 39
		"&&" => reduce 39
		"|" => reduce 39
		"^" => reduce 39
		"&" => reduce 39
		"!==" => reduce 39
		"===" => reduce 39
		"!=" => reduce 39
		"==" => reduce 39
		"<" => reduce 39
		">" => reduce 39
		"<=" => reduce 39
		">=" => reduce 39
		"instanceof" => reduce 39
		"in" => reduce 39
		">>>" => reduce 39
		">>" => reduce 39
		"<<" => reduce 39
		"+" => reduce 39
		"-" => reduce 39
		"%" => reduce 39
		"/" => reduce 39
		"*" => reduce 39
		")" => reduce 39
		"]" => reduce 39
		":" => reduce 39
		"}" => reduce 39

41:	LogicalORExpression => LogicalORExpression . "||" LogicalANDExpression ("}" ":" "]" ")" "," "||" ";" "?")
	ConditionalExpression => LogicalORExpression . "?" AssignmentExpression ":" AssignmentExpression ("}" ":" "]" ")" "," ";")
	ConditionalExpression => LogicalORExpression . ("}" ":" "]" ")" "," ";")
		"?" => shift 124
		"||" => shift 125
		";" => reduce 120
		"," => reduce 120
		")" => reduce 120
		"]" => reduce 120
		":" => reduce 120
		"}" => reduce 120

42:	CallExpression => CallExpression . "." Identifier ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	CallExpression => CallExpression . "[" Expression "]" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	CallExpression => CallExpression . Arguments ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	Arguments => . "(" ")"
	Arguments => . "(" ArgumentList ")"
	LeftHandSideExpression => CallExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"(" => shift 120
		Arguments => shift 121
		"[" => shift 122
		"." => shift 123
		"|=" => reduce 50
		"^=" => reduce 50
		"&=" => reduce 50
		">>>=" => reduce 50
		">>=" => reduce 50
		"<<=" => reduce 50
		"-=" => reduce 50
		"+=" => reduce 50
		"%=" => reduce 50
		"/=" => reduce 50
		"*=" => reduce 50
		"=" => reduce 50
		"--" => reduce 50
		"++" => reduce 50
		"?" => reduce 50
		";" => reduce 50
		"*" => reduce 50
		"/" => reduce 50
		"%" => reduce 50
		"-" => reduce 50
		"+" => reduce 50
		"<<" => reduce 50
		">>" => reduce 50
		">>>" => reduce 50
		"in" => reduce 50
		"instanceof" => reduce 50
		">=" => reduce 50
		"<=" => reduce 50
		">" => reduce 50
		"<" => reduce 50
		"==" => reduce 50
		"!=" => reduce 50
		"===" => reduce 50
		"!==" => reduce 50
		"&" => reduce 50
		"^" => reduce 50
		"|" => reduce 50
		"&&" => reduce 50
		"||" => reduce 50
		"," => reduce 50
		")" => reduce 50
		"]" => reduce 50
		":" => reduce 50
		"}" => reduce 50

43:	LeftHandSideExpression => NewExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 49
		"^=" => reduce 49
		"&=" => reduce 49
		">>>=" => reduce 49
		">>=" => reduce 49
		"<<=" => reduce 49
		"-=" => reduce 49
		"+=" => reduce 49
		"%=" => reduce 49
		"/=" => reduce 49
		"*=" => reduce 49
		"=" => reduce 49
		"--" => reduce 49
		"++" => reduce 49
		"?" => reduce 49
		";" => reduce 49
		"*" => reduce 49
		"/" => reduce 49
		"%" => reduce 49
		"-" => reduce 49
		"+" => reduce 49
		"<<" => reduce 49
		">>" => reduce 49
		">>>" => reduce 49
		"in" => reduce 49
		"instanceof" => reduce 49
		">=" => reduce 49
		"<=" => reduce 49
		">" => reduce 49
		"<" => reduce 49
		"==" => reduce 49
		"!=" => reduce 49
		"===" => reduce 49
		"!==" => reduce 49
		"&" => reduce 49
		"^" => reduce 49
		"|" => reduce 49
		"&&" => reduce 49
		"||" => reduce 49
		"," => reduce 49
		")" => reduce 49
		"]" => reduce 49
		":" => reduce 49
		"}" => reduce 49

44:	PostfixExpression => LeftHandSideExpression . $P2 "--" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	$P2 => .
	PostfixExpression => LeftHandSideExpression . $P1 "++" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	$P1 => .
	PostfixExpression => LeftHandSideExpression . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AssignmentExpression => LeftHandSideExpression . AssignmentOperator AssignmentExpression ("}" ":" "]" ")" "," ";")
	AssignmentOperator => . "="
	AssignmentOperator => . "*="
	AssignmentOperator => . "/="
	AssignmentOperator => . "%="
	AssignmentOperator => . "+="
	AssignmentOperator => . "-="
	AssignmentOperator => . "<<="
	AssignmentOperator => . ">>="
	AssignmentOperator => . ">>>="
	AssignmentOperator => . "&="
	AssignmentOperator => . "^="
	AssignmentOperator => . "|="
		"|=" => shift 105
		"^=" => shift 106
		"&=" => shift 107
		">>>=" => shift 108
		">>=" => shift 109
		"<<=" => shift 110
		"-=" => shift 111
		"+=" => shift 112
		"%=" => shift 113
		"/=" => shift 114
		"*=" => shift 115
		"=" => shift 116
		AssignmentOperator => shift 117
		$P1 => shift 118
		$P2 => shift 119
		";" => reduce 51
		"?" => reduce 51
		"," => reduce 51
		"||" => reduce 51
		"&&" => reduce 51
		"|" => reduce 51
		"^" => reduce 51
		"&" => reduce 51
		"!==" => reduce 51
		"===" => reduce 51
		"!=" => reduce 51
		"==" => reduce 51
		"<" => reduce 51
		">" => reduce 51
		"<=" => reduce 51
		">=" => reduce 51
		"instanceof" => reduce 51
		"in" => reduce 51
		">>>" => reduce 51
		">>" => reduce 51
		"<<" => reduce 51
		"+" => reduce 51
		"-" => reduce 51
		"%" => reduce 51
		"/" => reduce 51
		"*" => reduce 51
		")" => reduce 51
		"]" => reduce 51
		":" => reduce 51
		"}" => reduce 51
		"++" => reduce 54
		"--" => reduce 55

45:	AssignmentExpression => ConditionalExpression . ("}" ":" "]" ")" "," ";")
		";" => reduce 124
		"," => reduce 124
		")" => reduce 124
		"]" => reduce 124
		":" => reduce 124
		"}" => reduce 124

46:	Expression => AssignmentExpression . (":" "]" ")" "," ";")
		";" => reduce 140
		"," => reduce 140
		")" => reduce 140
		"]" => reduce 140
		":" => reduce 140

47:	Identifier => '$ident . ("}" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=" ":")
		":" => reduce 11
		"|=" => reduce 11
		"^=" => reduce 11
		"&=" => reduce 11
		">>>=" => reduce 11
		">>=" => reduce 11
		"<<=" => reduce 11
		"-=" => reduce 11
		"+=" => reduce 11
		"%=" => reduce 11
		"/=" => reduce 11
		"*=" => reduce 11
		"=" => reduce 11
		"(" => reduce 11
		"." => reduce 11
		"[" => reduce 11
		"--" => reduce 11
		"++" => reduce 11
		"?" => reduce 11
		";" => reduce 11
		"*" => reduce 11
		"/" => reduce 11
		"%" => reduce 11
		"-" => reduce 11
		"+" => reduce 11
		"<<" => reduce 11
		">>" => reduce 11
		">>>" => reduce 11
		"in" => reduce 11
		"instanceof" => reduce 11
		">=" => reduce 11
		"<=" => reduce 11
		">" => reduce 11
		"<" => reduce 11
		"==" => reduce 11
		"!=" => reduce 11
		"===" => reduce 11
		"!==" => reduce 11
		"&" => reduce 11
		"^" => reduce 11
		"|" => reduce 11
		"&&" => reduce 11
		"||" => reduce 11
		"," => reduce 11
		")" => reduce 11
		"]" => reduce 11
		"}" => reduce 11

48:	TryStatement => "try" . Block Catch Finally ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	TryStatement => "try" . Block Finally ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	TryStatement => "try" . Block Catch ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Block => . "{" StatementList "}"
	Block => . "{" "}"
		"{" => shift 103
		Block => shift 104

49:	ThrowStatement => "throw" . $P6 Expression ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	$P6 => .
		$P6 => shift 102
		"!" => reduce 213
		"~" => reduce 213
		"-" => reduce 213
		"+" => reduce 213
		"--" => reduce 213
		"++" => reduce 213
		"typeof" => reduce 213
		"void" => reduce 213
		"delete" => reduce 213
		'$ident => reduce 213
		"null" => reduce 213
		"false" => reduce 213
		"true" => reduce 213
		'$fl => reduce 213
		'$fx => reduce 213
		'$string => reduce 213
		"[" => reduce 213
		"{" => reduce 213
		"(" => reduce 213
		"this" => reduce 213
		"new" => reduce 213

50:	PrimaryExpression => Identifier . ("*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
	LabelledStatement => Identifier . ":" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		":" => shift 101
		"(" => reduce 13
		"=" => reduce 13
		"*=" => reduce 13
		"/=" => reduce 13
		"%=" => reduce 13
		"+=" => reduce 13
		"-=" => reduce 13
		"<<=" => reduce 13
		">>=" => reduce 13
		">>>=" => reduce 13
		"&=" => reduce 13
		"^=" => reduce 13
		"|=" => reduce 13
		"[" => reduce 13
		"." => reduce 13
		";" => reduce 13
		"?" => reduce 13
		"++" => reduce 13
		"--" => reduce 13
		"," => reduce 13
		"||" => reduce 13
		"&&" => reduce 13
		"|" => reduce 13
		"^" => reduce 13
		"&" => reduce 13
		"!==" => reduce 13
		"===" => reduce 13
		"!=" => reduce 13
		"==" => reduce 13
		"<" => reduce 13
		">" => reduce 13
		"<=" => reduce 13
		">=" => reduce 13
		"instanceof" => reduce 13
		"in" => reduce 13
		">>>" => reduce 13
		">>" => reduce 13
		"<<" => reduce 13
		"+" => reduce 13
		"-" => reduce 13
		"%" => reduce 13
		"/" => reduce 13
		"*" => reduce 13

51:	SwitchStatement => "switch" . "(" Expression ")" CaseBlock ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 100

52:	WithStatement => "with" . "(" Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 99

53:	ReturnStatement => "return" . ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	ReturnStatement => "return" . $P5 Expression ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	$P5 => .
		$P5 => shift 97
		";" => shift 98
		"!" => reduce 196
		"~" => reduce 196
		"-" => reduce 196
		"+" => reduce 196
		"--" => reduce 196
		"++" => reduce 196
		"typeof" => reduce 196
		"void" => reduce 196
		"delete" => reduce 196
		'$ident => reduce 196
		"null" => reduce 196
		"false" => reduce 196
		"true" => reduce 196
		'$fl => reduce 196
		'$fx => reduce 196
		'$string => reduce 196
		"[" => reduce 196
		"{" => reduce 196
		"(" => reduce 196
		"this" => reduce 196
		"new" => reduce 196

54:	BreakStatement => "break" . ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	BreakStatement => "break" . $P4 Identifier ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	$P4 => .
		$P4 => shift 95
		";" => shift 96
		'$ident => reduce 193

55:	ContinueStatement => "continue" . ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	ContinueStatement => "continue" . $P3 Identifier ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	$P3 => .
		$P3 => shift 93
		";" => shift 94
		'$ident => reduce 190

56:	IterationStatement => "for" . "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IterationStatement => "for" . "(" LeftHandSideExpression "in" Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IterationStatement => "for" . "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IterationStatement => "for" . "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 92

57:	IterationStatement => "while" . "(" Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 91

58:	IterationStatement => "do" . Statement "while" "(" Expression ")" ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 90

59:	IfStatement => "if" . "(" Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IfStatement => "if" . "(" Expression ")" Statement "else" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 89

60:	Expression => Expression . "," AssignmentExpression ("," ";")
	ExpressionStatement => Expression . ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 87
		"," => shift 88

61:	EmptyStatement => ";" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 172
		"try" => reduce 172
		"throw" => reduce 172
		"switch" => reduce 172
		'$ident => reduce 172
		"with" => reduce 172
		"return" => reduce 172
		"break" => reduce 172
		"continue" => reduce 172
		"do" => reduce 172
		"while" => reduce 172
		"for" => reduce 172
		"if" => reduce 172
		"new" => reduce 172
		"this" => reduce 172
		"(" => reduce 172
		"{" => reduce 172
		"[" => reduce 172
		'$string => reduce 172
		'$fx => reduce 172
		'$fl => reduce 172
		"true" => reduce 172
		"false" => reduce 172
		"null" => reduce 172
		"delete" => reduce 172
		"void" => reduce 172
		"typeof" => reduce 172
		"++" => reduce 172
		"--" => reduce 172
		"+" => reduce 172
		"-" => reduce 172
		"~" => reduce 172
		"!" => reduce 172
		";" => reduce 172
		"var" => reduce 172
		"}" => reduce 172
		"else" => reduce 172
		'$end => reduce 172
		"case" => reduce 172
		"default" => reduce 172

62:	VariableStatement => "var" . VariableDeclarationList ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	VariableDeclarationList => . VariableDeclaration
	VariableDeclarationList => . VariableDeclarationList "," VariableDeclaration
	VariableDeclaration => . Identifier Initializer
	VariableDeclaration => . Identifier
	Identifier => . '$ident
		'$ident => shift 47
		Identifier => shift 84
		VariableDeclaration => shift 85
		VariableDeclarationList => shift 86

63:	FunctionDeclaration => "function" . Identifier "(" ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
	Identifier => . '$ident
	FunctionDeclaration => "function" . Identifier "(" FormalParameterList ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
	Identifier => . '$ident
		'$ident => shift 47
		Identifier => shift 83

64:	Statement => TryStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 156
		";" => reduce 156
		"!" => reduce 156
		"~" => reduce 156
		"-" => reduce 156
		"+" => reduce 156
		"--" => reduce 156
		"++" => reduce 156
		"typeof" => reduce 156
		"void" => reduce 156
		"delete" => reduce 156
		"null" => reduce 156
		"false" => reduce 156
		"true" => reduce 156
		'$fl => reduce 156
		'$fx => reduce 156
		'$string => reduce 156
		"[" => reduce 156
		"{" => reduce 156
		"(" => reduce 156
		"this" => reduce 156
		"new" => reduce 156
		"if" => reduce 156
		"for" => reduce 156
		"while" => reduce 156
		"do" => reduce 156
		"continue" => reduce 156
		"break" => reduce 156
		"return" => reduce 156
		"with" => reduce 156
		'$ident => reduce 156
		"switch" => reduce 156
		"throw" => reduce 156
		"try" => reduce 156
		"function" => reduce 156
		"}" => reduce 156
		"else" => reduce 156
		'$end => reduce 156
		"case" => reduce 156
		"default" => reduce 156

65:	Statement => ThrowStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 155
		";" => reduce 155
		"!" => reduce 155
		"~" => reduce 155
		"-" => reduce 155
		"+" => reduce 155
		"--" => reduce 155
		"++" => reduce 155
		"typeof" => reduce 155
		"void" => reduce 155
		"delete" => reduce 155
		"null" => reduce 155
		"false" => reduce 155
		"true" => reduce 155
		'$fl => reduce 155
		'$fx => reduce 155
		'$string => reduce 155
		"[" => reduce 155
		"{" => reduce 155
		"(" => reduce 155
		"this" => reduce 155
		"new" => reduce 155
		"if" => reduce 155
		"for" => reduce 155
		"while" => reduce 155
		"do" => reduce 155
		"continue" => reduce 155
		"break" => reduce 155
		"return" => reduce 155
		"with" => reduce 155
		'$ident => reduce 155
		"switch" => reduce 155
		"throw" => reduce 155
		"try" => reduce 155
		"function" => reduce 155
		"}" => reduce 155
		"else" => reduce 155
		'$end => reduce 155
		"case" => reduce 155
		"default" => reduce 155

66:	Statement => SwitchStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 154
		";" => reduce 154
		"!" => reduce 154
		"~" => reduce 154
		"-" => reduce 154
		"+" => reduce 154
		"--" => reduce 154
		"++" => reduce 154
		"typeof" => reduce 154
		"void" => reduce 154
		"delete" => reduce 154
		"null" => reduce 154
		"false" => reduce 154
		"true" => reduce 154
		'$fl => reduce 154
		'$fx => reduce 154
		'$string => reduce 154
		"[" => reduce 154
		"{" => reduce 154
		"(" => reduce 154
		"this" => reduce 154
		"new" => reduce 154
		"if" => reduce 154
		"for" => reduce 154
		"while" => reduce 154
		"do" => reduce 154
		"continue" => reduce 154
		"break" => reduce 154
		"return" => reduce 154
		"with" => reduce 154
		'$ident => reduce 154
		"switch" => reduce 154
		"throw" => reduce 154
		"try" => reduce 154
		"function" => reduce 154
		"}" => reduce 154
		"else" => reduce 154
		'$end => reduce 154
		"case" => reduce 154
		"default" => reduce 154

67:	Statement => LabelledStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 153
		";" => reduce 153
		"!" => reduce 153
		"~" => reduce 153
		"-" => reduce 153
		"+" => reduce 153
		"--" => reduce 153
		"++" => reduce 153
		"typeof" => reduce 153
		"void" => reduce 153
		"delete" => reduce 153
		"null" => reduce 153
		"false" => reduce 153
		"true" => reduce 153
		'$fl => reduce 153
		'$fx => reduce 153
		'$string => reduce 153
		"[" => reduce 153
		"{" => reduce 153
		"(" => reduce 153
		"this" => reduce 153
		"new" => reduce 153
		"if" => reduce 153
		"for" => reduce 153
		"while" => reduce 153
		"do" => reduce 153
		"continue" => reduce 153
		"break" => reduce 153
		"return" => reduce 153
		"with" => reduce 153
		'$ident => reduce 153
		"switch" => reduce 153
		"throw" => reduce 153
		"try" => reduce 153
		"function" => reduce 153
		"}" => reduce 153
		"else" => reduce 153
		'$end => reduce 153
		"case" => reduce 153
		"default" => reduce 153

68:	Statement => WithStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 152
		";" => reduce 152
		"!" => reduce 152
		"~" => reduce 152
		"-" => reduce 152
		"+" => reduce 152
		"--" => reduce 152
		"++" => reduce 152
		"typeof" => reduce 152
		"void" => reduce 152
		"delete" => reduce 152
		"null" => reduce 152
		"false" => reduce 152
		"true" => reduce 152
		'$fl => reduce 152
		'$fx => reduce 152
		'$string => reduce 152
		"[" => reduce 152
		"{" => reduce 152
		"(" => reduce 152
		"this" => reduce 152
		"new" => reduce 152
		"if" => reduce 152
		"for" => reduce 152
		"while" => reduce 152
		"do" => reduce 152
		"continue" => reduce 152
		"break" => reduce 152
		"return" => reduce 152
		"with" => reduce 152
		'$ident => reduce 152
		"switch" => reduce 152
		"throw" => reduce 152
		"try" => reduce 152
		"function" => reduce 152
		"}" => reduce 152
		"else" => reduce 152
		'$end => reduce 152
		"case" => reduce 152
		"default" => reduce 152

69:	Statement => ReturnStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 151
		";" => reduce 151
		"!" => reduce 151
		"~" => reduce 151
		"-" => reduce 151
		"+" => reduce 151
		"--" => reduce 151
		"++" => reduce 151
		"typeof" => reduce 151
		"void" => reduce 151
		"delete" => reduce 151
		"null" => reduce 151
		"false" => reduce 151
		"true" => reduce 151
		'$fl => reduce 151
		'$fx => reduce 151
		'$string => reduce 151
		"[" => reduce 151
		"{" => reduce 151
		"(" => reduce 151
		"this" => reduce 151
		"new" => reduce 151
		"if" => reduce 151
		"for" => reduce 151
		"while" => reduce 151
		"do" => reduce 151
		"continue" => reduce 151
		"break" => reduce 151
		"return" => reduce 151
		"with" => reduce 151
		'$ident => reduce 151
		"switch" => reduce 151
		"throw" => reduce 151
		"try" => reduce 151
		"function" => reduce 151
		"}" => reduce 151
		"else" => reduce 151
		'$end => reduce 151
		"case" => reduce 151
		"default" => reduce 151

70:	Statement => BreakStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 150
		";" => reduce 150
		"!" => reduce 150
		"~" => reduce 150
		"-" => reduce 150
		"+" => reduce 150
		"--" => reduce 150
		"++" => reduce 150
		"typeof" => reduce 150
		"void" => reduce 150
		"delete" => reduce 150
		"null" => reduce 150
		"false" => reduce 150
		"true" => reduce 150
		'$fl => reduce 150
		'$fx => reduce 150
		'$string => reduce 150
		"[" => reduce 150
		"{" => reduce 150
		"(" => reduce 150
		"this" => reduce 150
		"new" => reduce 150
		"if" => reduce 150
		"for" => reduce 150
		"while" => reduce 150
		"do" => reduce 150
		"continue" => reduce 150
		"break" => reduce 150
		"return" => reduce 150
		"with" => reduce 150
		'$ident => reduce 150
		"switch" => reduce 150
		"throw" => reduce 150
		"try" => reduce 150
		"function" => reduce 150
		"}" => reduce 150
		"else" => reduce 150
		'$end => reduce 150
		"case" => reduce 150
		"default" => reduce 150

71:	Statement => ContinueStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 149
		";" => reduce 149
		"!" => reduce 149
		"~" => reduce 149
		"-" => reduce 149
		"+" => reduce 149
		"--" => reduce 149
		"++" => reduce 149
		"typeof" => reduce 149
		"void" => reduce 149
		"delete" => reduce 149
		"null" => reduce 149
		"false" => reduce 149
		"true" => reduce 149
		'$fl => reduce 149
		'$fx => reduce 149
		'$string => reduce 149
		"[" => reduce 149
		"{" => reduce 149
		"(" => reduce 149
		"this" => reduce 149
		"new" => reduce 149
		"if" => reduce 149
		"for" => reduce 149
		"while" => reduce 149
		"do" => reduce 149
		"continue" => reduce 149
		"break" => reduce 149
		"return" => reduce 149
		"with" => reduce 149
		'$ident => reduce 149
		"switch" => reduce 149
		"throw" => reduce 149
		"try" => reduce 149
		"function" => reduce 149
		"}" => reduce 149
		"else" => reduce 149
		'$end => reduce 149
		"case" => reduce 149
		"default" => reduce 149

72:	Statement => IterationStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 148
		";" => reduce 148
		"!" => reduce 148
		"~" => reduce 148
		"-" => reduce 148
		"+" => reduce 148
		"--" => reduce 148
		"++" => reduce 148
		"typeof" => reduce 148
		"void" => reduce 148
		"delete" => reduce 148
		"null" => reduce 148
		"false" => reduce 148
		"true" => reduce 148
		'$fl => reduce 148
		'$fx => reduce 148
		'$string => reduce 148
		"[" => reduce 148
		"{" => reduce 148
		"(" => reduce 148
		"this" => reduce 148
		"new" => reduce 148
		"if" => reduce 148
		"for" => reduce 148
		"while" => reduce 148
		"do" => reduce 148
		"continue" => reduce 148
		"break" => reduce 148
		"return" => reduce 148
		"with" => reduce 148
		'$ident => reduce 148
		"switch" => reduce 148
		"throw" => reduce 148
		"try" => reduce 148
		"function" => reduce 148
		"}" => reduce 148
		"else" => reduce 148
		'$end => reduce 148
		"case" => reduce 148
		"default" => reduce 148

73:	Statement => IfStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 147
		";" => reduce 147
		"!" => reduce 147
		"~" => reduce 147
		"-" => reduce 147
		"+" => reduce 147
		"--" => reduce 147
		"++" => reduce 147
		"typeof" => reduce 147
		"void" => reduce 147
		"delete" => reduce 147
		"null" => reduce 147
		"false" => reduce 147
		"true" => reduce 147
		'$fl => reduce 147
		'$fx => reduce 147
		'$string => reduce 147
		"[" => reduce 147
		"{" => reduce 147
		"(" => reduce 147
		"this" => reduce 147
		"new" => reduce 147
		"if" => reduce 147
		"for" => reduce 147
		"while" => reduce 147
		"do" => reduce 147
		"continue" => reduce 147
		"break" => reduce 147
		"return" => reduce 147
		"with" => reduce 147
		'$ident => reduce 147
		"switch" => reduce 147
		"throw" => reduce 147
		"try" => reduce 147
		"function" => reduce 147
		"}" => reduce 147
		"else" => reduce 147
		'$end => reduce 147
		"case" => reduce 147
		"default" => reduce 147

74:	Statement => ExpressionStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 146
		";" => reduce 146
		"!" => reduce 146
		"~" => reduce 146
		"-" => reduce 146
		"+" => reduce 146
		"--" => reduce 146
		"++" => reduce 146
		"typeof" => reduce 146
		"void" => reduce 146
		"delete" => reduce 146
		"null" => reduce 146
		"false" => reduce 146
		"true" => reduce 146
		'$fl => reduce 146
		'$fx => reduce 146
		'$string => reduce 146
		"[" => reduce 146
		"{" => reduce 146
		"(" => reduce 146
		"this" => reduce 146
		"new" => reduce 146
		"if" => reduce 146
		"for" => reduce 146
		"while" => reduce 146
		"do" => reduce 146
		"continue" => reduce 146
		"break" => reduce 146
		"return" => reduce 146
		"with" => reduce 146
		'$ident => reduce 146
		"switch" => reduce 146
		"throw" => reduce 146
		"try" => reduce 146
		"function" => reduce 146
		"}" => reduce 146
		"else" => reduce 146
		'$end => reduce 146
		"case" => reduce 146
		"default" => reduce 146

75:	Statement => EmptyStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 145
		";" => reduce 145
		"!" => reduce 145
		"~" => reduce 145
		"-" => reduce 145
		"+" => reduce 145
		"--" => reduce 145
		"++" => reduce 145
		"typeof" => reduce 145
		"void" => reduce 145
		"delete" => reduce 145
		"null" => reduce 145
		"false" => reduce 145
		"true" => reduce 145
		'$fl => reduce 145
		'$fx => reduce 145
		'$string => reduce 145
		"[" => reduce 145
		"{" => reduce 145
		"(" => reduce 145
		"this" => reduce 145
		"new" => reduce 145
		"if" => reduce 145
		"for" => reduce 145
		"while" => reduce 145
		"do" => reduce 145
		"continue" => reduce 145
		"break" => reduce 145
		"return" => reduce 145
		"with" => reduce 145
		'$ident => reduce 145
		"switch" => reduce 145
		"throw" => reduce 145
		"try" => reduce 145
		"function" => reduce 145
		"}" => reduce 145
		"else" => reduce 145
		'$end => reduce 145
		"case" => reduce 145
		"default" => reduce 145

76:	Statement => VariableStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 144
		";" => reduce 144
		"!" => reduce 144
		"~" => reduce 144
		"-" => reduce 144
		"+" => reduce 144
		"--" => reduce 144
		"++" => reduce 144
		"typeof" => reduce 144
		"void" => reduce 144
		"delete" => reduce 144
		"null" => reduce 144
		"false" => reduce 144
		"true" => reduce 144
		'$fl => reduce 144
		'$fx => reduce 144
		'$string => reduce 144
		"[" => reduce 144
		"{" => reduce 144
		"(" => reduce 144
		"this" => reduce 144
		"new" => reduce 144
		"if" => reduce 144
		"for" => reduce 144
		"while" => reduce 144
		"do" => reduce 144
		"continue" => reduce 144
		"break" => reduce 144
		"return" => reduce 144
		"with" => reduce 144
		'$ident => reduce 144
		"switch" => reduce 144
		"throw" => reduce 144
		"try" => reduce 144
		"function" => reduce 144
		"}" => reduce 144
		"else" => reduce 144
		'$end => reduce 144
		"case" => reduce 144
		"default" => reduce 144

77:	SourceElement => FunctionDeclaration . ('$end "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 232
		"try" => reduce 232
		"throw" => reduce 232
		"switch" => reduce 232
		'$ident => reduce 232
		"with" => reduce 232
		"return" => reduce 232
		"break" => reduce 232
		"continue" => reduce 232
		"do" => reduce 232
		"while" => reduce 232
		"for" => reduce 232
		"if" => reduce 232
		"new" => reduce 232
		"this" => reduce 232
		"(" => reduce 232
		"{" => reduce 232
		"[" => reduce 232
		'$string => reduce 232
		'$fx => reduce 232
		'$fl => reduce 232
		"true" => reduce 232
		"false" => reduce 232
		"null" => reduce 232
		"delete" => reduce 232
		"void" => reduce 232
		"typeof" => reduce 232
		"++" => reduce 232
		"--" => reduce 232
		"+" => reduce 232
		"-" => reduce 232
		"~" => reduce 232
		"!" => reduce 232
		";" => reduce 232
		"var" => reduce 232
		"}" => reduce 232
		'$end => reduce 232

78:	SourceElement => Statement . ('$end "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 231
		"try" => reduce 231
		"throw" => reduce 231
		"switch" => reduce 231
		'$ident => reduce 231
		"with" => reduce 231
		"return" => reduce 231
		"break" => reduce 231
		"continue" => reduce 231
		"do" => reduce 231
		"while" => reduce 231
		"for" => reduce 231
		"if" => reduce 231
		"new" => reduce 231
		"this" => reduce 231
		"(" => reduce 231
		"{" => reduce 231
		"[" => reduce 231
		'$string => reduce 231
		'$fx => reduce 231
		'$fl => reduce 231
		"true" => reduce 231
		"false" => reduce 231
		"null" => reduce 231
		"delete" => reduce 231
		"void" => reduce 231
		"typeof" => reduce 231
		"++" => reduce 231
		"--" => reduce 231
		"+" => reduce 231
		"-" => reduce 231
		"~" => reduce 231
		"!" => reduce 231
		";" => reduce 231
		"var" => reduce 231
		"}" => reduce 231
		'$end => reduce 231

79:	SourceElements => SourceElement . ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 229
		";" => reduce 229
		"!" => reduce 229
		"~" => reduce 229
		"-" => reduce 229
		"+" => reduce 229
		"--" => reduce 229
		"++" => reduce 229
		"typeof" => reduce 229
		"void" => reduce 229
		"delete" => reduce 229
		"null" => reduce 229
		"false" => reduce 229
		"true" => reduce 229
		'$fl => reduce 229
		'$fx => reduce 229
		'$string => reduce 229
		"[" => reduce 229
		"{" => reduce 229
		"(" => reduce 229
		"this" => reduce 229
		"new" => reduce 229
		"if" => reduce 229
		"for" => reduce 229
		"while" => reduce 229
		"do" => reduce 229
		"continue" => reduce 229
		"break" => reduce 229
		"return" => reduce 229
		"with" => reduce 229
		'$ident => reduce 229
		"switch" => reduce 229
		"throw" => reduce 229
		"try" => reduce 229
		"function" => reduce 229
		"}" => reduce 229
		'$end => reduce 229

80:	SourceElements => SourceElements . SourceElement ('$end "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
	SourceElement => . Statement
	SourceElement => . FunctionDeclaration
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	FunctionDeclaration => . "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
	FunctionDeclaration => . "function" Identifier "(" ")" "{" FunctionBody "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	Program => SourceElements . ('$end)
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		"function" => shift 63
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		FunctionDeclaration => shift 77
		Statement => shift 78
		SourceElement => shift 82
		'$end => reduce 228

81:	$start => Program . ('$end)
		'$end => accept 0

82:	SourceElements => SourceElements SourceElement . ("}" '$end "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 230
		";" => reduce 230
		"!" => reduce 230
		"~" => reduce 230
		"-" => reduce 230
		"+" => reduce 230
		"--" => reduce 230
		"++" => reduce 230
		"typeof" => reduce 230
		"void" => reduce 230
		"delete" => reduce 230
		"null" => reduce 230
		"false" => reduce 230
		"true" => reduce 230
		'$fl => reduce 230
		'$fx => reduce 230
		'$string => reduce 230
		"[" => reduce 230
		"{" => reduce 230
		"(" => reduce 230
		"this" => reduce 230
		"new" => reduce 230
		"if" => reduce 230
		"for" => reduce 230
		"while" => reduce 230
		"do" => reduce 230
		"continue" => reduce 230
		"break" => reduce 230
		"return" => reduce 230
		"with" => reduce 230
		'$ident => reduce 230
		"switch" => reduce 230
		"throw" => reduce 230
		"try" => reduce 230
		"function" => reduce 230
		'$end => reduce 230
		"}" => reduce 230

83:	FunctionDeclaration => "function" Identifier . "(" FormalParameterList ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
	FunctionDeclaration => "function" Identifier . "(" ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"(" => shift 256

84:	VariableDeclaration => Identifier . ("," ";")
	VariableDeclaration => Identifier . Initializer ("," ";")
	Initializer => . "=" AssignmentExpression
		"=" => shift 254
		Initializer => shift 255
		";" => reduce 167
		"," => reduce 167

85:	VariableDeclarationList => VariableDeclaration . ("," ";")
		";" => reduce 162
		"," => reduce 162

86:	VariableDeclarationList => VariableDeclarationList . "," VariableDeclaration ("," ";")
	VariableStatement => "var" VariableDeclarationList . ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 252
		"," => shift 253

87:	ExpressionStatement => Expression ";" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 173
		"try" => reduce 173
		"throw" => reduce 173
		"switch" => reduce 173
		'$ident => reduce 173
		"with" => reduce 173
		"return" => reduce 173
		"break" => reduce 173
		"continue" => reduce 173
		"do" => reduce 173
		"while" => reduce 173
		"for" => reduce 173
		"if" => reduce 173
		"new" => reduce 173
		"this" => reduce 173
		"(" => reduce 173
		"{" => reduce 173
		"[" => reduce 173
		'$string => reduce 173
		'$fx => reduce 173
		'$fl => reduce 173
		"true" => reduce 173
		"false" => reduce 173
		"null" => reduce 173
		"delete" => reduce 173
		"void" => reduce 173
		"typeof" => reduce 173
		"++" => reduce 173
		"--" => reduce 173
		"+" => reduce 173
		"-" => reduce 173
		"~" => reduce 173
		"!" => reduce 173
		";" => reduce 173
		"var" => reduce 173
		"}" => reduce 173
		"else" => reduce 173
		'$end => reduce 173
		"case" => reduce 173
		"default" => reduce 173

88:	Expression => Expression "," . AssignmentExpression (":" "]" ")" "," ";")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 251

89:	IfStatement => "if" "(" . Expression ")" Statement "else" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	IfStatement => "if" "(" . Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 250

90:	IterationStatement => "do" Statement . "while" "(" Expression ")" ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"while" => shift 249

91:	IterationStatement => "while" "(" . Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 248

92:	IterationStatement => "for" "(" . OptExprStmtNoIn OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	OptExprStmtNoIn => . ":"
	OptExprStmtNoIn => . ExpressionNoIn ";"
	ExpressionNoIn => . AssignmentExpressionNoIn
	ExpressionNoIn => . ExpressionNoIn "," AssignmentExpressionNoIn
	AssignmentExpressionNoIn => . ConditionalExpressionNoIn
	AssignmentExpressionNoIn => . LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn "?" AssignmentExpressionNoIn ":" AssignmentExpressionNoIn
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpressionNoIn => . LogicalANDExpressionNoIn
	LogicalORExpressionNoIn => . LogicalORExpressionNoIn "||" LogicalANDExpressionNoIn
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpressionNoIn => . BitwiseORExpressionNoIn
	LogicalANDExpressionNoIn => . LogicalANDExpressionNoIn "&&" BitwiseORExpressionNoIn
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpressionNoIn => . BitwiseXORExpressionNoIn
	BitwiseORExpressionNoIn => . BitwiseORExpressionNoIn "|" BitwiseXORExpressionNoIn
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpressionNoIn => . BitwiseANDExpressionNoIn
	BitwiseXORExpressionNoIn => . BitwiseXORExpressionNoIn "^" BitwiseANDExpressionNoIn
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpressionNoIn => . EqualityExpressionNoIn
	BitwiseANDExpressionNoIn => . BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn
	EqualityExpressionNoIn => . RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "==" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!=" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "===" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!==" RelationalExpressionNoIn
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	IterationStatement => "for" "(" . "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IterationStatement => "for" "(" . LeftHandSideExpression "in" Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	IterationStatement => "for" "(" . "var" VariableDeclarationNoIn "in" Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"var" => shift 233
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 235
		EqualityExpressionNoIn => shift 236
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpressionNoIn => shift 237
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpressionNoIn => shift 238
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpressionNoIn => shift 239
		PrimaryExpression => shift 37
		LogicalANDExpressionNoIn => shift 240
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpressionNoIn => shift 241
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 242
		ConditionalExpressionNoIn => shift 243
		AssignmentExpressionNoIn => shift 244
		ExpressionNoIn => shift 245
		":" => shift 246
		OptExprStmtNoIn => shift 247

93:	ContinueStatement => "continue" $P3 . Identifier ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Identifier => . '$ident
		'$ident => shift 47
		Identifier => shift 232

94:	ContinueStatement => "continue" ";" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 189
		"try" => reduce 189
		"throw" => reduce 189
		"switch" => reduce 189
		'$ident => reduce 189
		"with" => reduce 189
		"return" => reduce 189
		"break" => reduce 189
		"continue" => reduce 189
		"do" => reduce 189
		"while" => reduce 189
		"for" => reduce 189
		"if" => reduce 189
		"new" => reduce 189
		"this" => reduce 189
		"(" => reduce 189
		"{" => reduce 189
		"[" => reduce 189
		'$string => reduce 189
		'$fx => reduce 189
		'$fl => reduce 189
		"true" => reduce 189
		"false" => reduce 189
		"null" => reduce 189
		"delete" => reduce 189
		"void" => reduce 189
		"typeof" => reduce 189
		"++" => reduce 189
		"--" => reduce 189
		"+" => reduce 189
		"-" => reduce 189
		"~" => reduce 189
		"!" => reduce 189
		";" => reduce 189
		"var" => reduce 189
		"}" => reduce 189
		"else" => reduce 189
		'$end => reduce 189
		"case" => reduce 189
		"default" => reduce 189

95:	BreakStatement => "break" $P4 . Identifier ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Identifier => . '$ident
		'$ident => shift 47
		Identifier => shift 231

96:	BreakStatement => "break" ";" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 192
		"try" => reduce 192
		"throw" => reduce 192
		"switch" => reduce 192
		'$ident => reduce 192
		"with" => reduce 192
		"return" => reduce 192
		"break" => reduce 192
		"continue" => reduce 192
		"do" => reduce 192
		"while" => reduce 192
		"for" => reduce 192
		"if" => reduce 192
		"new" => reduce 192
		"this" => reduce 192
		"(" => reduce 192
		"{" => reduce 192
		"[" => reduce 192
		'$string => reduce 192
		'$fx => reduce 192
		'$fl => reduce 192
		"true" => reduce 192
		"false" => reduce 192
		"null" => reduce 192
		"delete" => reduce 192
		"void" => reduce 192
		"typeof" => reduce 192
		"++" => reduce 192
		"--" => reduce 192
		"+" => reduce 192
		"-" => reduce 192
		"~" => reduce 192
		"!" => reduce 192
		";" => reduce 192
		"var" => reduce 192
		"}" => reduce 192
		"else" => reduce 192
		'$end => reduce 192
		"case" => reduce 192
		"default" => reduce 192

97:	ReturnStatement => "return" $P5 . Expression ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 230

98:	ReturnStatement => "return" ";" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 195
		"try" => reduce 195
		"throw" => reduce 195
		"switch" => reduce 195
		'$ident => reduce 195
		"with" => reduce 195
		"return" => reduce 195
		"break" => reduce 195
		"continue" => reduce 195
		"do" => reduce 195
		"while" => reduce 195
		"for" => reduce 195
		"if" => reduce 195
		"new" => reduce 195
		"this" => reduce 195
		"(" => reduce 195
		"{" => reduce 195
		"[" => reduce 195
		'$string => reduce 195
		'$fx => reduce 195
		'$fl => reduce 195
		"true" => reduce 195
		"false" => reduce 195
		"null" => reduce 195
		"delete" => reduce 195
		"void" => reduce 195
		"typeof" => reduce 195
		"++" => reduce 195
		"--" => reduce 195
		"+" => reduce 195
		"-" => reduce 195
		"~" => reduce 195
		"!" => reduce 195
		";" => reduce 195
		"var" => reduce 195
		"}" => reduce 195
		"else" => reduce 195
		'$end => reduce 195
		"case" => reduce 195
		"default" => reduce 195

99:	WithStatement => "with" "(" . Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 229

100:	SwitchStatement => "switch" "(" . Expression ")" CaseBlock ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 228

101:	LabelledStatement => Identifier ":" . Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 227

102:	ThrowStatement => "throw" $P6 . Expression ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 226

103:	Block => "{" . "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally" "catch")
	Block => "{" . StatementList "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally" "catch")
	StatementList => . Statement
	StatementList => . StatementList Statement
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 223
		StatementList => shift 224
		"}" => shift 225

104:	TryStatement => "try" Block . Catch ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Catch => . "catch" "(" Identifier ")" Block
	TryStatement => "try" Block . Finally ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Finally => . "finally" Block
	TryStatement => "try" Block . Catch Finally ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Catch => . "catch" "(" Identifier ")" Block
		"finally" => shift 219
		Finally => shift 220
		"catch" => shift 221
		Catch => shift 222

105:	AssignmentOperator => "|=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 139
		"~" => reduce 139
		"-" => reduce 139
		"+" => reduce 139
		"--" => reduce 139
		"++" => reduce 139
		"typeof" => reduce 139
		"void" => reduce 139
		"delete" => reduce 139
		'$ident => reduce 139
		"null" => reduce 139
		"false" => reduce 139
		"true" => reduce 139
		'$fl => reduce 139
		'$fx => reduce 139
		'$string => reduce 139
		"[" => reduce 139
		"{" => reduce 139
		"(" => reduce 139
		"this" => reduce 139
		"new" => reduce 139

106:	AssignmentOperator => "^=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 138
		"~" => reduce 138
		"-" => reduce 138
		"+" => reduce 138
		"--" => reduce 138
		"++" => reduce 138
		"typeof" => reduce 138
		"void" => reduce 138
		"delete" => reduce 138
		'$ident => reduce 138
		"null" => reduce 138
		"false" => reduce 138
		"true" => reduce 138
		'$fl => reduce 138
		'$fx => reduce 138
		'$string => reduce 138
		"[" => reduce 138
		"{" => reduce 138
		"(" => reduce 138
		"this" => reduce 138
		"new" => reduce 138

107:	AssignmentOperator => "&=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 137
		"~" => reduce 137
		"-" => reduce 137
		"+" => reduce 137
		"--" => reduce 137
		"++" => reduce 137
		"typeof" => reduce 137
		"void" => reduce 137
		"delete" => reduce 137
		'$ident => reduce 137
		"null" => reduce 137
		"false" => reduce 137
		"true" => reduce 137
		'$fl => reduce 137
		'$fx => reduce 137
		'$string => reduce 137
		"[" => reduce 137
		"{" => reduce 137
		"(" => reduce 137
		"this" => reduce 137
		"new" => reduce 137

108:	AssignmentOperator => ">>>=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 136
		"~" => reduce 136
		"-" => reduce 136
		"+" => reduce 136
		"--" => reduce 136
		"++" => reduce 136
		"typeof" => reduce 136
		"void" => reduce 136
		"delete" => reduce 136
		'$ident => reduce 136
		"null" => reduce 136
		"false" => reduce 136
		"true" => reduce 136
		'$fl => reduce 136
		'$fx => reduce 136
		'$string => reduce 136
		"[" => reduce 136
		"{" => reduce 136
		"(" => reduce 136
		"this" => reduce 136
		"new" => reduce 136

109:	AssignmentOperator => ">>=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 135
		"~" => reduce 135
		"-" => reduce 135
		"+" => reduce 135
		"--" => reduce 135
		"++" => reduce 135
		"typeof" => reduce 135
		"void" => reduce 135
		"delete" => reduce 135
		'$ident => reduce 135
		"null" => reduce 135
		"false" => reduce 135
		"true" => reduce 135
		'$fl => reduce 135
		'$fx => reduce 135
		'$string => reduce 135
		"[" => reduce 135
		"{" => reduce 135
		"(" => reduce 135
		"this" => reduce 135
		"new" => reduce 135

110:	AssignmentOperator => "<<=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 134
		"~" => reduce 134
		"-" => reduce 134
		"+" => reduce 134
		"--" => reduce 134
		"++" => reduce 134
		"typeof" => reduce 134
		"void" => reduce 134
		"delete" => reduce 134
		'$ident => reduce 134
		"null" => reduce 134
		"false" => reduce 134
		"true" => reduce 134
		'$fl => reduce 134
		'$fx => reduce 134
		'$string => reduce 134
		"[" => reduce 134
		"{" => reduce 134
		"(" => reduce 134
		"this" => reduce 134
		"new" => reduce 134

111:	AssignmentOperator => "-=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 133
		"~" => reduce 133
		"-" => reduce 133
		"+" => reduce 133
		"--" => reduce 133
		"++" => reduce 133
		"typeof" => reduce 133
		"void" => reduce 133
		"delete" => reduce 133
		'$ident => reduce 133
		"null" => reduce 133
		"false" => reduce 133
		"true" => reduce 133
		'$fl => reduce 133
		'$fx => reduce 133
		'$string => reduce 133
		"[" => reduce 133
		"{" => reduce 133
		"(" => reduce 133
		"this" => reduce 133
		"new" => reduce 133

112:	AssignmentOperator => "+=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 132
		"~" => reduce 132
		"-" => reduce 132
		"+" => reduce 132
		"--" => reduce 132
		"++" => reduce 132
		"typeof" => reduce 132
		"void" => reduce 132
		"delete" => reduce 132
		'$ident => reduce 132
		"null" => reduce 132
		"false" => reduce 132
		"true" => reduce 132
		'$fl => reduce 132
		'$fx => reduce 132
		'$string => reduce 132
		"[" => reduce 132
		"{" => reduce 132
		"(" => reduce 132
		"this" => reduce 132
		"new" => reduce 132

113:	AssignmentOperator => "%=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 131
		"~" => reduce 131
		"-" => reduce 131
		"+" => reduce 131
		"--" => reduce 131
		"++" => reduce 131
		"typeof" => reduce 131
		"void" => reduce 131
		"delete" => reduce 131
		'$ident => reduce 131
		"null" => reduce 131
		"false" => reduce 131
		"true" => reduce 131
		'$fl => reduce 131
		'$fx => reduce 131
		'$string => reduce 131
		"[" => reduce 131
		"{" => reduce 131
		"(" => reduce 131
		"this" => reduce 131
		"new" => reduce 131

114:	AssignmentOperator => "/=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 130
		"~" => reduce 130
		"-" => reduce 130
		"+" => reduce 130
		"--" => reduce 130
		"++" => reduce 130
		"typeof" => reduce 130
		"void" => reduce 130
		"delete" => reduce 130
		'$ident => reduce 130
		"null" => reduce 130
		"false" => reduce 130
		"true" => reduce 130
		'$fl => reduce 130
		'$fx => reduce 130
		'$string => reduce 130
		"[" => reduce 130
		"{" => reduce 130
		"(" => reduce 130
		"this" => reduce 130
		"new" => reduce 130

115:	AssignmentOperator => "*=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 129
		"~" => reduce 129
		"-" => reduce 129
		"+" => reduce 129
		"--" => reduce 129
		"++" => reduce 129
		"typeof" => reduce 129
		"void" => reduce 129
		"delete" => reduce 129
		'$ident => reduce 129
		"null" => reduce 129
		"false" => reduce 129
		"true" => reduce 129
		'$fl => reduce 129
		'$fx => reduce 129
		'$string => reduce 129
		"[" => reduce 129
		"{" => reduce 129
		"(" => reduce 129
		"this" => reduce 129
		"new" => reduce 129

116:	AssignmentOperator => "=" . ("new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 128
		"~" => reduce 128
		"-" => reduce 128
		"+" => reduce 128
		"--" => reduce 128
		"++" => reduce 128
		"typeof" => reduce 128
		"void" => reduce 128
		"delete" => reduce 128
		'$ident => reduce 128
		"null" => reduce 128
		"false" => reduce 128
		"true" => reduce 128
		'$fl => reduce 128
		'$fx => reduce 128
		'$string => reduce 128
		"[" => reduce 128
		"{" => reduce 128
		"(" => reduce 128
		"this" => reduce 128
		"new" => reduce 128

117:	AssignmentExpression => LeftHandSideExpression AssignmentOperator . AssignmentExpression ("}" ":" "]" ")" "," ";")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 218

118:	PostfixExpression => LeftHandSideExpression $P1 . "++" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"++" => shift 217

119:	PostfixExpression => LeftHandSideExpression $P2 . "--" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"--" => shift 216

120:	Arguments => "(" . ArgumentList ")" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	ArgumentList => . AssignmentExpression
	ArgumentList => . ArgumentList "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	Arguments => "(" . ")" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		")" => shift 213
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 214
		ArgumentList => shift 215

121:	CallExpression => CallExpression Arguments . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		"=" => reduce 42
		"*=" => reduce 42
		"/=" => reduce 42
		"%=" => reduce 42
		"+=" => reduce 42
		"-=" => reduce 42
		"<<=" => reduce 42
		">>=" => reduce 42
		">>>=" => reduce 42
		"&=" => reduce 42
		"^=" => reduce 42
		"|=" => reduce 42
		"." => reduce 42
		"[" => reduce 42
		"(" => reduce 42
		";" => reduce 42
		"?" => reduce 42
		"++" => reduce 42
		"--" => reduce 42
		"," => reduce 42
		"||" => reduce 42
		"&&" => reduce 42
		"|" => reduce 42
		"^" => reduce 42
		"&" => reduce 42
		"!==" => reduce 42
		"===" => reduce 42
		"!=" => reduce 42
		"==" => reduce 42
		"<" => reduce 42
		">" => reduce 42
		"<=" => reduce 42
		">=" => reduce 42
		"instanceof" => reduce 42
		"in" => reduce 42
		">>>" => reduce 42
		">>" => reduce 42
		"<<" => reduce 42
		"+" => reduce 42
		"-" => reduce 42
		"%" => reduce 42
		"/" => reduce 42
		"*" => reduce 42
		")" => reduce 42
		"]" => reduce 42
		":" => reduce 42
		"}" => reduce 42

122:	CallExpression => CallExpression "[" . Expression "]" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 212

123:	CallExpression => CallExpression "." . Identifier ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	Identifier => . '$ident
		'$ident => shift 47
		Identifier => shift 211

124:	ConditionalExpression => LogicalORExpression "?" . AssignmentExpression ":" AssignmentExpression ("}" ":" "]" ")" "," ";")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 210

125:	LogicalORExpression => LogicalORExpression "||" . LogicalANDExpression ("}" ":" "]" ")" "," "||" ";" "?")
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		BitwiseANDExpression => shift 23
		BitwiseXORExpression => shift 30
		BitwiseORExpression => shift 36
		LogicalANDExpression => shift 209

126:	CallExpression => MemberExpression Arguments . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		"=" => reduce 41
		"*=" => reduce 41
		"/=" => reduce 41
		"%=" => reduce 41
		"+=" => reduce 41
		"-=" => reduce 41
		"<<=" => reduce 41
		">>=" => reduce 41
		">>>=" => reduce 41
		"&=" => reduce 41
		"^=" => reduce 41
		"|=" => reduce 41
		"." => reduce 41
		"[" => reduce 41
		"(" => reduce 41
		";" => reduce 41
		"?" => reduce 41
		"++" => reduce 41
		"--" => reduce 41
		"," => reduce 41
		"||" => reduce 41
		"&&" => reduce 41
		"|" => reduce 41
		"^" => reduce 41
		"&" => reduce 41
		"!==" => reduce 41
		"===" => reduce 41
		"!=" => reduce 41
		"==" => reduce 41
		"<" => reduce 41
		">" => reduce 41
		"<=" => reduce 41
		">=" => reduce 41
		"instanceof" => reduce 41
		"in" => reduce 41
		">>>" => reduce 41
		">>" => reduce 41
		"<<" => reduce 41
		"+" => reduce 41
		"-" => reduce 41
		"%" => reduce 41
		"/" => reduce 41
		"*" => reduce 41
		")" => reduce 41
		"]" => reduce 41
		":" => reduce 41
		"}" => reduce 41

127:	MemberExpression => MemberExpression "[" . Expression "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 208

128:	MemberExpression => MemberExpression "." . Identifier ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Identifier => . '$ident
		'$ident => shift 47
		Identifier => shift 207

129:	NewExpression => "new" NewExpression . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		"=" => reduce 40
		"*=" => reduce 40
		"/=" => reduce 40
		"%=" => reduce 40
		"+=" => reduce 40
		"-=" => reduce 40
		"<<=" => reduce 40
		">>=" => reduce 40
		">>>=" => reduce 40
		"&=" => reduce 40
		"^=" => reduce 40
		"|=" => reduce 40
		";" => reduce 40
		"?" => reduce 40
		"++" => reduce 40
		"--" => reduce 40
		"," => reduce 40
		"||" => reduce 40
		"&&" => reduce 40
		"|" => reduce 40
		"^" => reduce 40
		"&" => reduce 40
		"!==" => reduce 40
		"===" => reduce 40
		"!=" => reduce 40
		"==" => reduce 40
		"<" => reduce 40
		">" => reduce 40
		"<=" => reduce 40
		">=" => reduce 40
		"instanceof" => reduce 40
		"in" => reduce 40
		">>>" => reduce 40
		">>" => reduce 40
		"<<" => reduce 40
		"+" => reduce 40
		"-" => reduce 40
		"%" => reduce 40
		"/" => reduce 40
		"*" => reduce 40
		")" => reduce 40
		"]" => reduce 40
		":" => reduce 40
		"}" => reduce 40

130:	PrimaryExpression => Identifier . ("}" ":" "]" ";" ")" "||" "&&" "|" "^" "&" "==" "!=" "===" "!==" "in" "instanceof" ">=" "<=" ">" "<" "<<" ">>" ">>>" "-" "+" "*" "/" "%" "?" "," "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "." "[" "--" "++" "(")
		"(" => reduce 13
		"++" => reduce 13
		"--" => reduce 13
		"[" => reduce 13
		"." => reduce 13
		"=" => reduce 13
		"*=" => reduce 13
		"/=" => reduce 13
		"%=" => reduce 13
		"+=" => reduce 13
		"-=" => reduce 13
		"<<=" => reduce 13
		">>=" => reduce 13
		">>>=" => reduce 13
		"&=" => reduce 13
		"^=" => reduce 13
		"|=" => reduce 13
		"," => reduce 13
		"?" => reduce 13
		"%" => reduce 13
		"/" => reduce 13
		"*" => reduce 13
		"+" => reduce 13
		"-" => reduce 13
		">>>" => reduce 13
		">>" => reduce 13
		"<<" => reduce 13
		"<" => reduce 13
		">" => reduce 13
		"<=" => reduce 13
		">=" => reduce 13
		"instanceof" => reduce 13
		"in" => reduce 13
		"!==" => reduce 13
		"===" => reduce 13
		"!=" => reduce 13
		"==" => reduce 13
		"&" => reduce 13
		"^" => reduce 13
		"|" => reduce 13
		"&&" => reduce 13
		"||" => reduce 13
		")" => reduce 13
		";" => reduce 13
		"]" => reduce 13
		":" => reduce 13
		"}" => reduce 13

131:	NewExpression => MemberExpression . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	MemberExpression => MemberExpression . "." Identifier ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "[" "." "(")
	MemberExpression => MemberExpression . "[" Expression "]" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "[" "." "(")
	MemberExpression => "new" MemberExpression . Arguments ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Arguments => . "(" ")"
	Arguments => . "(" ArgumentList ")"
		"(" => shift 120
		Arguments => shift 206
		"[" => shift 127
		"." => shift 128
		"=" => reduce 39
		"*=" => reduce 39
		"/=" => reduce 39
		"%=" => reduce 39
		"+=" => reduce 39
		"-=" => reduce 39
		"<<=" => reduce 39
		">>=" => reduce 39
		">>>=" => reduce 39
		"&=" => reduce 39
		"^=" => reduce 39
		"|=" => reduce 39
		";" => reduce 39
		"?" => reduce 39
		"++" => reduce 39
		"--" => reduce 39
		"," => reduce 39
		"||" => reduce 39
		"&&" => reduce 39
		"|" => reduce 39
		"^" => reduce 39
		"&" => reduce 39
		"!==" => reduce 39
		"===" => reduce 39
		"!=" => reduce 39
		"==" => reduce 39
		"<" => reduce 39
		">" => reduce 39
		"<=" => reduce 39
		">=" => reduce 39
		"instanceof" => reduce 39
		"in" => reduce 39
		">>>" => reduce 39
		">>" => reduce 39
		"<<" => reduce 39
		"+" => reduce 39
		"-" => reduce 39
		"%" => reduce 39
		"/" => reduce 39
		"*" => reduce 39
		")" => reduce 39
		"]" => reduce 39
		":" => reduce 39
		"}" => reduce 39

132:	LogicalANDExpression => LogicalANDExpression "&&" . BitwiseORExpression ("}" ":" "]" ")" "&&" "||" "," "?" ";")
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		BitwiseANDExpression => shift 23
		BitwiseXORExpression => shift 30
		BitwiseORExpression => shift 205

133:	BitwiseORExpression => BitwiseORExpression "|" . BitwiseXORExpression ("}" ":" "]" ")" "," "||" "&&" "|" ";" "?")
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		BitwiseANDExpression => shift 23
		BitwiseXORExpression => shift 204

134:	Expression => Expression . "," AssignmentExpression ("," ")")
	PrimaryExpression => "(" Expression . ")" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		")" => shift 203
		"," => shift 88

135:	BitwiseXORExpression => BitwiseXORExpression "^" . BitwiseANDExpression ("}" ":" "]" ")" "^" "|" "&&" "||" "," "?" ";")
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		BitwiseANDExpression => shift 202

136:	ArrayLiteral => "[" "]" . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 19
		"^=" => reduce 19
		"&=" => reduce 19
		">>>=" => reduce 19
		">>=" => reduce 19
		"<<=" => reduce 19
		"-=" => reduce 19
		"+=" => reduce 19
		"%=" => reduce 19
		"/=" => reduce 19
		"*=" => reduce 19
		"=" => reduce 19
		"(" => reduce 19
		"." => reduce 19
		"[" => reduce 19
		"--" => reduce 19
		"++" => reduce 19
		"?" => reduce 19
		";" => reduce 19
		"*" => reduce 19
		"/" => reduce 19
		"%" => reduce 19
		"-" => reduce 19
		"+" => reduce 19
		"<<" => reduce 19
		">>" => reduce 19
		">>>" => reduce 19
		"in" => reduce 19
		"instanceof" => reduce 19
		">=" => reduce 19
		"<=" => reduce 19
		">" => reduce 19
		"<" => reduce 19
		"==" => reduce 19
		"!=" => reduce 19
		"===" => reduce 19
		"!==" => reduce 19
		"&" => reduce 19
		"^" => reduce 19
		"|" => reduce 19
		"&&" => reduce 19
		"||" => reduce 19
		"," => reduce 19
		")" => reduce 19
		"]" => reduce 19
		":" => reduce 19
		"}" => reduce 19

137:	Elision => "," . ("]" "," "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 26
		"~" => reduce 26
		"-" => reduce 26
		"+" => reduce 26
		"--" => reduce 26
		"++" => reduce 26
		"typeof" => reduce 26
		"void" => reduce 26
		"delete" => reduce 26
		'$ident => reduce 26
		"null" => reduce 26
		"false" => reduce 26
		"true" => reduce 26
		'$fl => reduce 26
		'$fx => reduce 26
		'$string => reduce 26
		"[" => reduce 26
		"{" => reduce 26
		"(" => reduce 26
		"this" => reduce 26
		"new" => reduce 26
		"," => reduce 26
		"]" => reduce 26

138:	ElementList => AssignmentExpression . (",")
		"," => reduce 23

139:	ArrayLiteral => "[" Elision . "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Elision => Elision . "," ("]" "," "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
	ElementList => Elision . AssignmentExpression (",")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 199
		"," => shift 200
		"]" => shift 201

140:	ArrayLiteral => "[" ElementList . "," Elision "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	ElementList => ElementList . "," AssignmentExpression (",")
	ElementList => ElementList . "," Elision AssignmentExpression (",")
	ArrayLiteral => "[" ElementList . "," "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"," => shift 198

141:	ObjectLiteral => "{" "}" . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 28
		"^=" => reduce 28
		"&=" => reduce 28
		">>>=" => reduce 28
		">>=" => reduce 28
		"<<=" => reduce 28
		"-=" => reduce 28
		"+=" => reduce 28
		"%=" => reduce 28
		"/=" => reduce 28
		"*=" => reduce 28
		"=" => reduce 28
		"(" => reduce 28
		"." => reduce 28
		"[" => reduce 28
		"--" => reduce 28
		"++" => reduce 28
		"?" => reduce 28
		";" => reduce 28
		"*" => reduce 28
		"/" => reduce 28
		"%" => reduce 28
		"-" => reduce 28
		"+" => reduce 28
		"<<" => reduce 28
		">>" => reduce 28
		">>>" => reduce 28
		"in" => reduce 28
		"instanceof" => reduce 28
		">=" => reduce 28
		"<=" => reduce 28
		">" => reduce 28
		"<" => reduce 28
		"==" => reduce 28
		"!=" => reduce 28
		"===" => reduce 28
		"!==" => reduce 28
		"&" => reduce 28
		"^" => reduce 28
		"|" => reduce 28
		"&&" => reduce 28
		"||" => reduce 28
		"," => reduce 28
		")" => reduce 28
		"]" => reduce 28
		":" => reduce 28
		"}" => reduce 28

142:	PropertyName => NumericLiteral . (":")
		":" => reduce 34

143:	PropertyName => StringLiteral . (":")
		":" => reduce 33

144:	PropertyName => Identifier . (":")
		":" => reduce 32

145:	PropertyNameAndValueList => PropertyName . ":" AssignmentExpression ("," "}")
		":" => shift 197

146:	PropertyNameAndValueList => PropertyNameAndValueList . "," PropertyName ":" AssignmentExpression ("," "}")
	ObjectLiteral => "{" PropertyNameAndValueList . "}" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"}" => shift 195
		"," => shift 196

147:	BitwiseANDExpression => BitwiseANDExpression "&" . EqualityExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?")
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 194

148:	EqualityExpression => EqualityExpression "==" . RelationalExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 193

149:	EqualityExpression => EqualityExpression "!=" . RelationalExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 192

150:	EqualityExpression => EqualityExpression "===" . RelationalExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 191

151:	EqualityExpression => EqualityExpression "!==" . RelationalExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 190

152:	RelationalExpression => RelationalExpression "<" . ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 189

153:	RelationalExpression => RelationalExpression ">" . ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 188

154:	RelationalExpression => RelationalExpression "<=" . ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 187

155:	RelationalExpression => RelationalExpression ">=" . ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 186

156:	RelationalExpression => RelationalExpression "instanceof" . ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 185

157:	RelationalExpression => RelationalExpression "in" . ShiftExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 184

158:	ShiftExpression => ShiftExpression "<<" . AdditiveExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 183

159:	ShiftExpression => ShiftExpression ">>" . AdditiveExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 182

160:	ShiftExpression => ShiftExpression ">>>" . AdditiveExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 181

161:	AdditiveExpression => AdditiveExpression "+" . MultiplicativeExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?")
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 180

162:	AdditiveExpression => AdditiveExpression "-" . MultiplicativeExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?")
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 179

163:	MultiplicativeExpression => MultiplicativeExpression "*" . UnaryExpression ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 178

164:	MultiplicativeExpression => MultiplicativeExpression "/" . UnaryExpression ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 177

165:	MultiplicativeExpression => MultiplicativeExpression "%" . UnaryExpression ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 176

166:	PostfixExpression => LeftHandSideExpression . $P2 "--" ("}" ":" "]" ")" "," "||" ";" "?" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&")
	$P2 => .
	PostfixExpression => LeftHandSideExpression . $P1 "++" ("}" ":" "]" ")" "," "||" ";" "?" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&")
	$P1 => .
	PostfixExpression => LeftHandSideExpression . ("}" ":" "]" ")" "," "||" ";" "?" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&")
		$P1 => shift 118
		$P2 => shift 119
		"&&" => reduce 51
		"|" => reduce 51
		"^" => reduce 51
		"&" => reduce 51
		"!==" => reduce 51
		"===" => reduce 51
		"!=" => reduce 51
		"==" => reduce 51
		"<" => reduce 51
		">" => reduce 51
		"<=" => reduce 51
		">=" => reduce 51
		"instanceof" => reduce 51
		"in" => reduce 51
		">>>" => reduce 51
		">>" => reduce 51
		"<<" => reduce 51
		"+" => reduce 51
		"-" => reduce 51
		"%" => reduce 51
		"/" => reduce 51
		"*" => reduce 51
		"?" => reduce 51
		";" => reduce 51
		"||" => reduce 51
		"," => reduce 51
		")" => reduce 51
		"]" => reduce 51
		":" => reduce 51
		"}" => reduce 51
		"++" => reduce 54
		"--" => reduce 55

167:	UnaryExpression => "delete" UnaryExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		"?" => reduce 57
		";" => reduce 57
		"*" => reduce 57
		"/" => reduce 57
		"%" => reduce 57
		"-" => reduce 57
		"+" => reduce 57
		"<<" => reduce 57
		">>" => reduce 57
		">>>" => reduce 57
		"in" => reduce 57
		"instanceof" => reduce 57
		">=" => reduce 57
		"<=" => reduce 57
		">" => reduce 57
		"<" => reduce 57
		"==" => reduce 57
		"!=" => reduce 57
		"===" => reduce 57
		"!==" => reduce 57
		"&" => reduce 57
		"^" => reduce 57
		"|" => reduce 57
		"&&" => reduce 57
		"||" => reduce 57
		"," => reduce 57
		")" => reduce 57
		"]" => reduce 57
		":" => reduce 57
		"}" => reduce 57

168:	UnaryExpression => "void" UnaryExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		"?" => reduce 58
		";" => reduce 58
		"*" => reduce 58
		"/" => reduce 58
		"%" => reduce 58
		"-" => reduce 58
		"+" => reduce 58
		"<<" => reduce 58
		">>" => reduce 58
		">>>" => reduce 58
		"in" => reduce 58
		"instanceof" => reduce 58
		">=" => reduce 58
		"<=" => reduce 58
		">" => reduce 58
		"<" => reduce 58
		"==" => reduce 58
		"!=" => reduce 58
		"===" => reduce 58
		"!==" => reduce 58
		"&" => reduce 58
		"^" => reduce 58
		"|" => reduce 58
		"&&" => reduce 58
		"||" => reduce 58
		"," => reduce 58
		")" => reduce 58
		"]" => reduce 58
		":" => reduce 58
		"}" => reduce 58

169:	UnaryExpression => "typeof" UnaryExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		"?" => reduce 59
		";" => reduce 59
		"*" => reduce 59
		"/" => reduce 59
		"%" => reduce 59
		"-" => reduce 59
		"+" => reduce 59
		"<<" => reduce 59
		">>" => reduce 59
		">>>" => reduce 59
		"in" => reduce 59
		"instanceof" => reduce 59
		">=" => reduce 59
		"<=" => reduce 59
		">" => reduce 59
		"<" => reduce 59
		"==" => reduce 59
		"!=" => reduce 59
		"===" => reduce 59
		"!==" => reduce 59
		"&" => reduce 59
		"^" => reduce 59
		"|" => reduce 59
		"&&" => reduce 59
		"||" => reduce 59
		"," => reduce 59
		")" => reduce 59
		"]" => reduce 59
		":" => reduce 59
		"}" => reduce 59

170:	UnaryExpression => "++" UnaryExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		"?" => reduce 60
		";" => reduce 60
		"*" => reduce 60
		"/" => reduce 60
		"%" => reduce 60
		"-" => reduce 60
		"+" => reduce 60
		"<<" => reduce 60
		">>" => reduce 60
		">>>" => reduce 60
		"in" => reduce 60
		"instanceof" => reduce 60
		">=" => reduce 60
		"<=" => reduce 60
		">" => reduce 60
		"<" => reduce 60
		"==" => reduce 60
		"!=" => reduce 60
		"===" => reduce 60
		"!==" => reduce 60
		"&" => reduce 60
		"^" => reduce 60
		"|" => reduce 60
		"&&" => reduce 60
		"||" => reduce 60
		"," => reduce 60
		")" => reduce 60
		"]" => reduce 60
		":" => reduce 60
		"}" => reduce 60

171:	UnaryExpression => "--" UnaryExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		"?" => reduce 61
		";" => reduce 61
		"*" => reduce 61
		"/" => reduce 61
		"%" => reduce 61
		"-" => reduce 61
		"+" => reduce 61
		"<<" => reduce 61
		">>" => reduce 61
		">>>" => reduce 61
		"in" => reduce 61
		"instanceof" => reduce 61
		">=" => reduce 61
		"<=" => reduce 61
		">" => reduce 61
		"<" => reduce 61
		"==" => reduce 61
		"!=" => reduce 61
		"===" => reduce 61
		"!==" => reduce 61
		"&" => reduce 61
		"^" => reduce 61
		"|" => reduce 61
		"&&" => reduce 61
		"||" => reduce 61
		"," => reduce 61
		")" => reduce 61
		"]" => reduce 61
		":" => reduce 61
		"}" => reduce 61

172:	UnaryExpression => "+" UnaryExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		"?" => reduce 62
		";" => reduce 62
		"*" => reduce 62
		"/" => reduce 62
		"%" => reduce 62
		"-" => reduce 62
		"+" => reduce 62
		"<<" => reduce 62
		">>" => reduce 62
		">>>" => reduce 62
		"in" => reduce 62
		"instanceof" => reduce 62
		">=" => reduce 62
		"<=" => reduce 62
		">" => reduce 62
		"<" => reduce 62
		"==" => reduce 62
		"!=" => reduce 62
		"===" => reduce 62
		"!==" => reduce 62
		"&" => reduce 62
		"^" => reduce 62
		"|" => reduce 62
		"&&" => reduce 62
		"||" => reduce 62
		"," => reduce 62
		")" => reduce 62
		"]" => reduce 62
		":" => reduce 62
		"}" => reduce 62

173:	UnaryExpression => "-" UnaryExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		"?" => reduce 63
		";" => reduce 63
		"*" => reduce 63
		"/" => reduce 63
		"%" => reduce 63
		"-" => reduce 63
		"+" => reduce 63
		"<<" => reduce 63
		">>" => reduce 63
		">>>" => reduce 63
		"in" => reduce 63
		"instanceof" => reduce 63
		">=" => reduce 63
		"<=" => reduce 63
		">" => reduce 63
		"<" => reduce 63
		"==" => reduce 63
		"!=" => reduce 63
		"===" => reduce 63
		"!==" => reduce 63
		"&" => reduce 63
		"^" => reduce 63
		"|" => reduce 63
		"&&" => reduce 63
		"||" => reduce 63
		"," => reduce 63
		")" => reduce 63
		"]" => reduce 63
		":" => reduce 63
		"}" => reduce 63

174:	UnaryExpression => "~" UnaryExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		"?" => reduce 64
		";" => reduce 64
		"*" => reduce 64
		"/" => reduce 64
		"%" => reduce 64
		"-" => reduce 64
		"+" => reduce 64
		"<<" => reduce 64
		">>" => reduce 64
		">>>" => reduce 64
		"in" => reduce 64
		"instanceof" => reduce 64
		">=" => reduce 64
		"<=" => reduce 64
		">" => reduce 64
		"<" => reduce 64
		"==" => reduce 64
		"!=" => reduce 64
		"===" => reduce 64
		"!==" => reduce 64
		"&" => reduce 64
		"^" => reduce 64
		"|" => reduce 64
		"&&" => reduce 64
		"||" => reduce 64
		"," => reduce 64
		")" => reduce 64
		"]" => reduce 64
		":" => reduce 64
		"}" => reduce 64

175:	UnaryExpression => "!" UnaryExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		"?" => reduce 65
		";" => reduce 65
		"*" => reduce 65
		"/" => reduce 65
		"%" => reduce 65
		"-" => reduce 65
		"+" => reduce 65
		"<<" => reduce 65
		">>" => reduce 65
		">>>" => reduce 65
		"in" => reduce 65
		"instanceof" => reduce 65
		">=" => reduce 65
		"<=" => reduce 65
		">" => reduce 65
		"<" => reduce 65
		"==" => reduce 65
		"!=" => reduce 65
		"===" => reduce 65
		"!==" => reduce 65
		"&" => reduce 65
		"^" => reduce 65
		"|" => reduce 65
		"&&" => reduce 65
		"||" => reduce 65
		"," => reduce 65
		")" => reduce 65
		"]" => reduce 65
		":" => reduce 65
		"}" => reduce 65

176:	MultiplicativeExpression => MultiplicativeExpression "%" UnaryExpression . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		";" => reduce 69
		"?" => reduce 69
		"," => reduce 69
		"||" => reduce 69
		"&&" => reduce 69
		"|" => reduce 69
		"^" => reduce 69
		"&" => reduce 69
		"!==" => reduce 69
		"===" => reduce 69
		"!=" => reduce 69
		"==" => reduce 69
		"<" => reduce 69
		">" => reduce 69
		"<=" => reduce 69
		">=" => reduce 69
		"instanceof" => reduce 69
		"in" => reduce 69
		">>>" => reduce 69
		">>" => reduce 69
		"<<" => reduce 69
		"+" => reduce 69
		"-" => reduce 69
		"%" => reduce 69
		"/" => reduce 69
		"*" => reduce 69
		")" => reduce 69
		"]" => reduce 69
		":" => reduce 69
		"}" => reduce 69

177:	MultiplicativeExpression => MultiplicativeExpression "/" UnaryExpression . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		";" => reduce 68
		"?" => reduce 68
		"," => reduce 68
		"||" => reduce 68
		"&&" => reduce 68
		"|" => reduce 68
		"^" => reduce 68
		"&" => reduce 68
		"!==" => reduce 68
		"===" => reduce 68
		"!=" => reduce 68
		"==" => reduce 68
		"<" => reduce 68
		">" => reduce 68
		"<=" => reduce 68
		">=" => reduce 68
		"instanceof" => reduce 68
		"in" => reduce 68
		">>>" => reduce 68
		">>" => reduce 68
		"<<" => reduce 68
		"+" => reduce 68
		"-" => reduce 68
		"%" => reduce 68
		"/" => reduce 68
		"*" => reduce 68
		")" => reduce 68
		"]" => reduce 68
		":" => reduce 68
		"}" => reduce 68

178:	MultiplicativeExpression => MultiplicativeExpression "*" UnaryExpression . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		";" => reduce 67
		"?" => reduce 67
		"," => reduce 67
		"||" => reduce 67
		"&&" => reduce 67
		"|" => reduce 67
		"^" => reduce 67
		"&" => reduce 67
		"!==" => reduce 67
		"===" => reduce 67
		"!=" => reduce 67
		"==" => reduce 67
		"<" => reduce 67
		">" => reduce 67
		"<=" => reduce 67
		">=" => reduce 67
		"instanceof" => reduce 67
		"in" => reduce 67
		">>>" => reduce 67
		">>" => reduce 67
		"<<" => reduce 67
		"+" => reduce 67
		"-" => reduce 67
		"%" => reduce 67
		"/" => reduce 67
		"*" => reduce 67
		")" => reduce 67
		"]" => reduce 67
		":" => reduce 67
		"}" => reduce 67

179:	MultiplicativeExpression => MultiplicativeExpression . "%" UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	MultiplicativeExpression => MultiplicativeExpression . "/" UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	MultiplicativeExpression => MultiplicativeExpression . "*" UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	AdditiveExpression => AdditiveExpression "-" MultiplicativeExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 163
		"/" => shift 164
		"%" => shift 165
		"?" => reduce 72
		";" => reduce 72
		"-" => reduce 72
		"+" => reduce 72
		"<<" => reduce 72
		">>" => reduce 72
		">>>" => reduce 72
		"in" => reduce 72
		"instanceof" => reduce 72
		">=" => reduce 72
		"<=" => reduce 72
		">" => reduce 72
		"<" => reduce 72
		"==" => reduce 72
		"!=" => reduce 72
		"===" => reduce 72
		"!==" => reduce 72
		"&" => reduce 72
		"^" => reduce 72
		"|" => reduce 72
		"&&" => reduce 72
		"||" => reduce 72
		"," => reduce 72
		")" => reduce 72
		"]" => reduce 72
		":" => reduce 72
		"}" => reduce 72

180:	MultiplicativeExpression => MultiplicativeExpression . "%" UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	MultiplicativeExpression => MultiplicativeExpression . "/" UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	MultiplicativeExpression => MultiplicativeExpression . "*" UnaryExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	AdditiveExpression => AdditiveExpression "+" MultiplicativeExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 163
		"/" => shift 164
		"%" => shift 165
		"?" => reduce 71
		";" => reduce 71
		"-" => reduce 71
		"+" => reduce 71
		"<<" => reduce 71
		">>" => reduce 71
		">>>" => reduce 71
		"in" => reduce 71
		"instanceof" => reduce 71
		">=" => reduce 71
		"<=" => reduce 71
		">" => reduce 71
		"<" => reduce 71
		"==" => reduce 71
		"!=" => reduce 71
		"===" => reduce 71
		"!==" => reduce 71
		"&" => reduce 71
		"^" => reduce 71
		"|" => reduce 71
		"&&" => reduce 71
		"||" => reduce 71
		"," => reduce 71
		")" => reduce 71
		"]" => reduce 71
		":" => reduce 71
		"}" => reduce 71

181:	AdditiveExpression => AdditiveExpression . "-" MultiplicativeExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	AdditiveExpression => AdditiveExpression . "+" MultiplicativeExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	ShiftExpression => ShiftExpression ">>>" AdditiveExpression . ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 161
		"-" => shift 162
		";" => reduce 76
		"?" => reduce 76
		"," => reduce 76
		"||" => reduce 76
		"&&" => reduce 76
		"|" => reduce 76
		"^" => reduce 76
		"&" => reduce 76
		"!==" => reduce 76
		"===" => reduce 76
		"!=" => reduce 76
		"==" => reduce 76
		"<" => reduce 76
		">" => reduce 76
		"<=" => reduce 76
		">=" => reduce 76
		"instanceof" => reduce 76
		"in" => reduce 76
		">>>" => reduce 76
		">>" => reduce 76
		"<<" => reduce 76
		")" => reduce 76
		"]" => reduce 76
		":" => reduce 76
		"}" => reduce 76

182:	AdditiveExpression => AdditiveExpression . "-" MultiplicativeExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	AdditiveExpression => AdditiveExpression . "+" MultiplicativeExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	ShiftExpression => ShiftExpression ">>" AdditiveExpression . ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 161
		"-" => shift 162
		";" => reduce 75
		"?" => reduce 75
		"," => reduce 75
		"||" => reduce 75
		"&&" => reduce 75
		"|" => reduce 75
		"^" => reduce 75
		"&" => reduce 75
		"!==" => reduce 75
		"===" => reduce 75
		"!=" => reduce 75
		"==" => reduce 75
		"<" => reduce 75
		">" => reduce 75
		"<=" => reduce 75
		">=" => reduce 75
		"instanceof" => reduce 75
		"in" => reduce 75
		">>>" => reduce 75
		">>" => reduce 75
		"<<" => reduce 75
		")" => reduce 75
		"]" => reduce 75
		":" => reduce 75
		"}" => reduce 75

183:	AdditiveExpression => AdditiveExpression . "-" MultiplicativeExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	AdditiveExpression => AdditiveExpression . "+" MultiplicativeExpression ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	ShiftExpression => ShiftExpression "<<" AdditiveExpression . ("}" ":" "]" ")" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 161
		"-" => shift 162
		";" => reduce 74
		"?" => reduce 74
		"," => reduce 74
		"||" => reduce 74
		"&&" => reduce 74
		"|" => reduce 74
		"^" => reduce 74
		"&" => reduce 74
		"!==" => reduce 74
		"===" => reduce 74
		"!=" => reduce 74
		"==" => reduce 74
		"<" => reduce 74
		">" => reduce 74
		"<=" => reduce 74
		">=" => reduce 74
		"instanceof" => reduce 74
		"in" => reduce 74
		">>>" => reduce 74
		">>" => reduce 74
		"<<" => reduce 74
		")" => reduce 74
		"]" => reduce 74
		":" => reduce 74
		"}" => reduce 74

184:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	RelationalExpression => RelationalExpression "in" ShiftExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 83
		";" => reduce 83
		"in" => reduce 83
		"instanceof" => reduce 83
		">=" => reduce 83
		"<=" => reduce 83
		">" => reduce 83
		"<" => reduce 83
		"==" => reduce 83
		"!=" => reduce 83
		"===" => reduce 83
		"!==" => reduce 83
		"&" => reduce 83
		"^" => reduce 83
		"|" => reduce 83
		"&&" => reduce 83
		"||" => reduce 83
		"," => reduce 83
		")" => reduce 83
		"]" => reduce 83
		":" => reduce 83
		"}" => reduce 83

185:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	RelationalExpression => RelationalExpression "instanceof" ShiftExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 82
		";" => reduce 82
		"in" => reduce 82
		"instanceof" => reduce 82
		">=" => reduce 82
		"<=" => reduce 82
		">" => reduce 82
		"<" => reduce 82
		"==" => reduce 82
		"!=" => reduce 82
		"===" => reduce 82
		"!==" => reduce 82
		"&" => reduce 82
		"^" => reduce 82
		"|" => reduce 82
		"&&" => reduce 82
		"||" => reduce 82
		"," => reduce 82
		")" => reduce 82
		"]" => reduce 82
		":" => reduce 82
		"}" => reduce 82

186:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	RelationalExpression => RelationalExpression ">=" ShiftExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 81
		";" => reduce 81
		"in" => reduce 81
		"instanceof" => reduce 81
		">=" => reduce 81
		"<=" => reduce 81
		">" => reduce 81
		"<" => reduce 81
		"==" => reduce 81
		"!=" => reduce 81
		"===" => reduce 81
		"!==" => reduce 81
		"&" => reduce 81
		"^" => reduce 81
		"|" => reduce 81
		"&&" => reduce 81
		"||" => reduce 81
		"," => reduce 81
		")" => reduce 81
		"]" => reduce 81
		":" => reduce 81
		"}" => reduce 81

187:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	RelationalExpression => RelationalExpression "<=" ShiftExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 80
		";" => reduce 80
		"in" => reduce 80
		"instanceof" => reduce 80
		">=" => reduce 80
		"<=" => reduce 80
		">" => reduce 80
		"<" => reduce 80
		"==" => reduce 80
		"!=" => reduce 80
		"===" => reduce 80
		"!==" => reduce 80
		"&" => reduce 80
		"^" => reduce 80
		"|" => reduce 80
		"&&" => reduce 80
		"||" => reduce 80
		"," => reduce 80
		")" => reduce 80
		"]" => reduce 80
		":" => reduce 80
		"}" => reduce 80

188:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	RelationalExpression => RelationalExpression ">" ShiftExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 79
		";" => reduce 79
		"in" => reduce 79
		"instanceof" => reduce 79
		">=" => reduce 79
		"<=" => reduce 79
		">" => reduce 79
		"<" => reduce 79
		"==" => reduce 79
		"!=" => reduce 79
		"===" => reduce 79
		"!==" => reduce 79
		"&" => reduce 79
		"^" => reduce 79
		"|" => reduce 79
		"&&" => reduce 79
		"||" => reduce 79
		"," => reduce 79
		")" => reduce 79
		"]" => reduce 79
		":" => reduce 79
		"}" => reduce 79

189:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?" "<<" ">>" ">>>")
	RelationalExpression => RelationalExpression "<" ShiftExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 78
		";" => reduce 78
		"in" => reduce 78
		"instanceof" => reduce 78
		">=" => reduce 78
		"<=" => reduce 78
		">" => reduce 78
		"<" => reduce 78
		"==" => reduce 78
		"!=" => reduce 78
		"===" => reduce 78
		"!==" => reduce 78
		"&" => reduce 78
		"^" => reduce 78
		"|" => reduce 78
		"&&" => reduce 78
		"||" => reduce 78
		"," => reduce 78
		")" => reduce 78
		"]" => reduce 78
		":" => reduce 78
		"}" => reduce 78

190:	RelationalExpression => RelationalExpression . "in" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "instanceof" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . ">=" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "<=" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . ">" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "<" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	EqualityExpression => EqualityExpression "!==" RelationalExpression . ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 152
		">" => shift 153
		"<=" => shift 154
		">=" => shift 155
		"instanceof" => shift 156
		"in" => shift 157
		";" => reduce 94
		"?" => reduce 94
		"," => reduce 94
		"||" => reduce 94
		"&&" => reduce 94
		"|" => reduce 94
		"^" => reduce 94
		"&" => reduce 94
		"!==" => reduce 94
		"===" => reduce 94
		"!=" => reduce 94
		"==" => reduce 94
		")" => reduce 94
		"]" => reduce 94
		":" => reduce 94
		"}" => reduce 94

191:	RelationalExpression => RelationalExpression . "in" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "instanceof" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . ">=" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "<=" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . ">" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "<" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	EqualityExpression => EqualityExpression "===" RelationalExpression . ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 152
		">" => shift 153
		"<=" => shift 154
		">=" => shift 155
		"instanceof" => shift 156
		"in" => shift 157
		";" => reduce 93
		"?" => reduce 93
		"," => reduce 93
		"||" => reduce 93
		"&&" => reduce 93
		"|" => reduce 93
		"^" => reduce 93
		"&" => reduce 93
		"!==" => reduce 93
		"===" => reduce 93
		"!=" => reduce 93
		"==" => reduce 93
		")" => reduce 93
		"]" => reduce 93
		":" => reduce 93
		"}" => reduce 93

192:	RelationalExpression => RelationalExpression . "in" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "instanceof" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . ">=" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "<=" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . ">" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "<" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	EqualityExpression => EqualityExpression "!=" RelationalExpression . ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 152
		">" => shift 153
		"<=" => shift 154
		">=" => shift 155
		"instanceof" => shift 156
		"in" => shift 157
		";" => reduce 92
		"?" => reduce 92
		"," => reduce 92
		"||" => reduce 92
		"&&" => reduce 92
		"|" => reduce 92
		"^" => reduce 92
		"&" => reduce 92
		"!==" => reduce 92
		"===" => reduce 92
		"!=" => reduce 92
		"==" => reduce 92
		")" => reduce 92
		"]" => reduce 92
		":" => reduce 92
		"}" => reduce 92

193:	RelationalExpression => RelationalExpression . "in" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "instanceof" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . ">=" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "<=" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . ">" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	RelationalExpression => RelationalExpression . "<" ShiftExpression ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof" "in")
	EqualityExpression => EqualityExpression "==" RelationalExpression . ("}" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 152
		">" => shift 153
		"<=" => shift 154
		">=" => shift 155
		"instanceof" => shift 156
		"in" => shift 157
		";" => reduce 91
		"?" => reduce 91
		"," => reduce 91
		"||" => reduce 91
		"&&" => reduce 91
		"|" => reduce 91
		"^" => reduce 91
		"&" => reduce 91
		"!==" => reduce 91
		"===" => reduce 91
		"!=" => reduce 91
		"==" => reduce 91
		")" => reduce 91
		"]" => reduce 91
		":" => reduce 91
		"}" => reduce 91

194:	EqualityExpression => EqualityExpression . "!==" RelationalExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	EqualityExpression => EqualityExpression . "===" RelationalExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	EqualityExpression => EqualityExpression . "!=" RelationalExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	EqualityExpression => EqualityExpression . "==" RelationalExpression ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	BitwiseANDExpression => BitwiseANDExpression "&" EqualityExpression . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?")
		"==" => shift 148
		"!=" => shift 149
		"===" => shift 150
		"!==" => shift 151
		"?" => reduce 101
		";" => reduce 101
		"&" => reduce 101
		"^" => reduce 101
		"|" => reduce 101
		"&&" => reduce 101
		"||" => reduce 101
		"," => reduce 101
		")" => reduce 101
		"]" => reduce 101
		":" => reduce 101
		"}" => reduce 101

195:	ObjectLiteral => "{" PropertyNameAndValueList "}" . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 29
		"^=" => reduce 29
		"&=" => reduce 29
		">>>=" => reduce 29
		">>=" => reduce 29
		"<<=" => reduce 29
		"-=" => reduce 29
		"+=" => reduce 29
		"%=" => reduce 29
		"/=" => reduce 29
		"*=" => reduce 29
		"=" => reduce 29
		"(" => reduce 29
		"." => reduce 29
		"[" => reduce 29
		"--" => reduce 29
		"++" => reduce 29
		"?" => reduce 29
		";" => reduce 29
		"*" => reduce 29
		"/" => reduce 29
		"%" => reduce 29
		"-" => reduce 29
		"+" => reduce 29
		"<<" => reduce 29
		">>" => reduce 29
		">>>" => reduce 29
		"in" => reduce 29
		"instanceof" => reduce 29
		">=" => reduce 29
		"<=" => reduce 29
		">" => reduce 29
		"<" => reduce 29
		"==" => reduce 29
		"!=" => reduce 29
		"===" => reduce 29
		"!==" => reduce 29
		"&" => reduce 29
		"^" => reduce 29
		"|" => reduce 29
		"&&" => reduce 29
		"||" => reduce 29
		"," => reduce 29
		")" => reduce 29
		"]" => reduce 29
		":" => reduce 29
		"}" => reduce 29

196:	PropertyNameAndValueList => PropertyNameAndValueList "," . PropertyName ":" AssignmentExpression ("," "}")
	PropertyName => . Identifier
	PropertyName => . StringLiteral
	PropertyName => . NumericLiteral
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	Identifier => . '$ident
		'$ident => shift 47
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		NumericLiteral => shift 142
		StringLiteral => shift 143
		Identifier => shift 144
		PropertyName => shift 310

197:	PropertyNameAndValueList => PropertyName ":" . AssignmentExpression ("," "}")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 309

198:	ArrayLiteral => "[" ElementList "," . "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	ElementList => ElementList "," . Elision AssignmentExpression (",")
	Elision => . ","
	Elision => . Elision ","
	ElementList => ElementList "," . AssignmentExpression (",")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	ArrayLiteral => "[" ElementList "," . Elision "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Elision => . ","
	Elision => . Elision ","
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 306
		"," => shift 137
		Elision => shift 307
		"]" => shift 308

199:	ElementList => Elision AssignmentExpression . (",")
		"," => reduce 22

200:	Elision => Elision "," . ("]" "," "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 27
		"~" => reduce 27
		"-" => reduce 27
		"+" => reduce 27
		"--" => reduce 27
		"++" => reduce 27
		"typeof" => reduce 27
		"void" => reduce 27
		"delete" => reduce 27
		'$ident => reduce 27
		"null" => reduce 27
		"false" => reduce 27
		"true" => reduce 27
		'$fl => reduce 27
		'$fx => reduce 27
		'$string => reduce 27
		"[" => reduce 27
		"{" => reduce 27
		"(" => reduce 27
		"this" => reduce 27
		"new" => reduce 27
		"," => reduce 27
		"]" => reduce 27

201:	ArrayLiteral => "[" Elision "]" . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 18
		"^=" => reduce 18
		"&=" => reduce 18
		">>>=" => reduce 18
		">>=" => reduce 18
		"<<=" => reduce 18
		"-=" => reduce 18
		"+=" => reduce 18
		"%=" => reduce 18
		"/=" => reduce 18
		"*=" => reduce 18
		"=" => reduce 18
		"(" => reduce 18
		"." => reduce 18
		"[" => reduce 18
		"--" => reduce 18
		"++" => reduce 18
		"?" => reduce 18
		";" => reduce 18
		"*" => reduce 18
		"/" => reduce 18
		"%" => reduce 18
		"-" => reduce 18
		"+" => reduce 18
		"<<" => reduce 18
		">>" => reduce 18
		">>>" => reduce 18
		"in" => reduce 18
		"instanceof" => reduce 18
		">=" => reduce 18
		"<=" => reduce 18
		">" => reduce 18
		"<" => reduce 18
		"==" => reduce 18
		"!=" => reduce 18
		"===" => reduce 18
		"!==" => reduce 18
		"&" => reduce 18
		"^" => reduce 18
		"|" => reduce 18
		"&&" => reduce 18
		"||" => reduce 18
		"," => reduce 18
		")" => reduce 18
		"]" => reduce 18
		":" => reduce 18
		"}" => reduce 18

202:	BitwiseANDExpression => BitwiseANDExpression . "&" EqualityExpression ("}" ":" "]" ")" "^" "|" "&&" "||" "," "?" ";" "&")
	BitwiseXORExpression => BitwiseXORExpression "^" BitwiseANDExpression . ("}" ":" "]" ")" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 147
		";" => reduce 105
		"?" => reduce 105
		"," => reduce 105
		"||" => reduce 105
		"&&" => reduce 105
		"|" => reduce 105
		"^" => reduce 105
		")" => reduce 105
		"]" => reduce 105
		":" => reduce 105
		"}" => reduce 105

203:	PrimaryExpression => "(" Expression ")" . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		"(" => reduce 17
		"=" => reduce 17
		"*=" => reduce 17
		"/=" => reduce 17
		"%=" => reduce 17
		"+=" => reduce 17
		"-=" => reduce 17
		"<<=" => reduce 17
		">>=" => reduce 17
		">>>=" => reduce 17
		"&=" => reduce 17
		"^=" => reduce 17
		"|=" => reduce 17
		"[" => reduce 17
		"." => reduce 17
		";" => reduce 17
		"?" => reduce 17
		"++" => reduce 17
		"--" => reduce 17
		"," => reduce 17
		"||" => reduce 17
		"&&" => reduce 17
		"|" => reduce 17
		"^" => reduce 17
		"&" => reduce 17
		"!==" => reduce 17
		"===" => reduce 17
		"!=" => reduce 17
		"==" => reduce 17
		"<" => reduce 17
		">" => reduce 17
		"<=" => reduce 17
		">=" => reduce 17
		"instanceof" => reduce 17
		"in" => reduce 17
		">>>" => reduce 17
		">>" => reduce 17
		"<<" => reduce 17
		"+" => reduce 17
		"-" => reduce 17
		"%" => reduce 17
		"/" => reduce 17
		"*" => reduce 17
		")" => reduce 17
		"]" => reduce 17
		":" => reduce 17
		"}" => reduce 17

204:	BitwiseXORExpression => BitwiseXORExpression . "^" BitwiseANDExpression ("}" ":" "]" ")" "," "||" "&&" "|" ";" "?" "^")
	BitwiseORExpression => BitwiseORExpression "|" BitwiseXORExpression . ("}" ":" "]" ")" "," "||" "&&" "|" ";" "?")
		"^" => shift 135
		"?" => reduce 109
		";" => reduce 109
		"|" => reduce 109
		"&&" => reduce 109
		"||" => reduce 109
		"," => reduce 109
		")" => reduce 109
		"]" => reduce 109
		":" => reduce 109
		"}" => reduce 109

205:	BitwiseORExpression => BitwiseORExpression . "|" BitwiseXORExpression ("}" ":" "]" ")" "&&" "||" "," "?" ";" "|")
	LogicalANDExpression => LogicalANDExpression "&&" BitwiseORExpression . ("}" ":" "]" ")" "&&" "||" "," "?" ";")
		"|" => shift 133
		";" => reduce 113
		"?" => reduce 113
		"," => reduce 113
		"||" => reduce 113
		"&&" => reduce 113
		")" => reduce 113
		"]" => reduce 113
		":" => reduce 113
		"}" => reduce 113

206:	MemberExpression => "new" MemberExpression Arguments . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 38
		"^=" => reduce 38
		"&=" => reduce 38
		">>>=" => reduce 38
		">>=" => reduce 38
		"<<=" => reduce 38
		"-=" => reduce 38
		"+=" => reduce 38
		"%=" => reduce 38
		"/=" => reduce 38
		"*=" => reduce 38
		"=" => reduce 38
		"(" => reduce 38
		"." => reduce 38
		"[" => reduce 38
		"--" => reduce 38
		"++" => reduce 38
		"?" => reduce 38
		";" => reduce 38
		"*" => reduce 38
		"/" => reduce 38
		"%" => reduce 38
		"-" => reduce 38
		"+" => reduce 38
		"<<" => reduce 38
		">>" => reduce 38
		">>>" => reduce 38
		"in" => reduce 38
		"instanceof" => reduce 38
		">=" => reduce 38
		"<=" => reduce 38
		">" => reduce 38
		"<" => reduce 38
		"==" => reduce 38
		"!=" => reduce 38
		"===" => reduce 38
		"!==" => reduce 38
		"&" => reduce 38
		"^" => reduce 38
		"|" => reduce 38
		"&&" => reduce 38
		"||" => reduce 38
		"," => reduce 38
		")" => reduce 38
		"]" => reduce 38
		":" => reduce 38
		"}" => reduce 38

207:	MemberExpression => MemberExpression "." Identifier . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 37
		"^=" => reduce 37
		"&=" => reduce 37
		">>>=" => reduce 37
		">>=" => reduce 37
		"<<=" => reduce 37
		"-=" => reduce 37
		"+=" => reduce 37
		"%=" => reduce 37
		"/=" => reduce 37
		"*=" => reduce 37
		"=" => reduce 37
		"(" => reduce 37
		"." => reduce 37
		"[" => reduce 37
		"--" => reduce 37
		"++" => reduce 37
		"?" => reduce 37
		";" => reduce 37
		"*" => reduce 37
		"/" => reduce 37
		"%" => reduce 37
		"-" => reduce 37
		"+" => reduce 37
		"<<" => reduce 37
		">>" => reduce 37
		">>>" => reduce 37
		"in" => reduce 37
		"instanceof" => reduce 37
		">=" => reduce 37
		"<=" => reduce 37
		">" => reduce 37
		"<" => reduce 37
		"==" => reduce 37
		"!=" => reduce 37
		"===" => reduce 37
		"!==" => reduce 37
		"&" => reduce 37
		"^" => reduce 37
		"|" => reduce 37
		"&&" => reduce 37
		"||" => reduce 37
		"," => reduce 37
		")" => reduce 37
		"]" => reduce 37
		":" => reduce 37
		"}" => reduce 37

208:	Expression => Expression . "," AssignmentExpression ("," "]")
	MemberExpression => MemberExpression "[" Expression . "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"]" => shift 305
		"," => shift 88

209:	LogicalANDExpression => LogicalANDExpression . "&&" BitwiseORExpression ("}" ":" "]" ")" "," "||" ";" "?" "&&")
	LogicalORExpression => LogicalORExpression "||" LogicalANDExpression . ("}" ":" "]" ")" "," "||" ";" "?")
		"&&" => shift 132
		"?" => reduce 117
		";" => reduce 117
		"||" => reduce 117
		"," => reduce 117
		")" => reduce 117
		"]" => reduce 117
		":" => reduce 117
		"}" => reduce 117

210:	ConditionalExpression => LogicalORExpression "?" AssignmentExpression . ":" AssignmentExpression ("}" ":" "]" ")" "," ";")
		":" => shift 304

211:	CallExpression => CallExpression "." Identifier . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		"=" => reduce 44
		"*=" => reduce 44
		"/=" => reduce 44
		"%=" => reduce 44
		"+=" => reduce 44
		"-=" => reduce 44
		"<<=" => reduce 44
		">>=" => reduce 44
		">>>=" => reduce 44
		"&=" => reduce 44
		"^=" => reduce 44
		"|=" => reduce 44
		"." => reduce 44
		"[" => reduce 44
		"(" => reduce 44
		";" => reduce 44
		"?" => reduce 44
		"++" => reduce 44
		"--" => reduce 44
		"," => reduce 44
		"||" => reduce 44
		"&&" => reduce 44
		"|" => reduce 44
		"^" => reduce 44
		"&" => reduce 44
		"!==" => reduce 44
		"===" => reduce 44
		"!=" => reduce 44
		"==" => reduce 44
		"<" => reduce 44
		">" => reduce 44
		"<=" => reduce 44
		">=" => reduce 44
		"instanceof" => reduce 44
		"in" => reduce 44
		">>>" => reduce 44
		">>" => reduce 44
		"<<" => reduce 44
		"+" => reduce 44
		"-" => reduce 44
		"%" => reduce 44
		"/" => reduce 44
		"*" => reduce 44
		")" => reduce 44
		"]" => reduce 44
		":" => reduce 44
		"}" => reduce 44

212:	Expression => Expression . "," AssignmentExpression ("," "]")
	CallExpression => CallExpression "[" Expression . "]" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		"]" => shift 303
		"," => shift 88

213:	Arguments => "(" ")" . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		"=" => reduce 45
		"*=" => reduce 45
		"/=" => reduce 45
		"%=" => reduce 45
		"+=" => reduce 45
		"-=" => reduce 45
		"<<=" => reduce 45
		">>=" => reduce 45
		">>>=" => reduce 45
		"&=" => reduce 45
		"^=" => reduce 45
		"|=" => reduce 45
		"." => reduce 45
		"[" => reduce 45
		"(" => reduce 45
		";" => reduce 45
		"?" => reduce 45
		"++" => reduce 45
		"--" => reduce 45
		"," => reduce 45
		"||" => reduce 45
		"&&" => reduce 45
		"|" => reduce 45
		"^" => reduce 45
		"&" => reduce 45
		"!==" => reduce 45
		"===" => reduce 45
		"!=" => reduce 45
		"==" => reduce 45
		"<" => reduce 45
		">" => reduce 45
		"<=" => reduce 45
		">=" => reduce 45
		"instanceof" => reduce 45
		"in" => reduce 45
		">>>" => reduce 45
		">>" => reduce 45
		"<<" => reduce 45
		"+" => reduce 45
		"-" => reduce 45
		"%" => reduce 45
		"/" => reduce 45
		"*" => reduce 45
		")" => reduce 45
		"]" => reduce 45
		":" => reduce 45
		"}" => reduce 45

214:	ArgumentList => AssignmentExpression . ("," ")")
		")" => reduce 47
		"," => reduce 47

215:	ArgumentList => ArgumentList . "," AssignmentExpression ("," ")")
	Arguments => "(" ArgumentList . ")" ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		")" => shift 301
		"," => shift 302

216:	PostfixExpression => LeftHandSideExpression $P2 "--" . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		";" => reduce 53
		"?" => reduce 53
		"," => reduce 53
		"||" => reduce 53
		"&&" => reduce 53
		"|" => reduce 53
		"^" => reduce 53
		"&" => reduce 53
		"!==" => reduce 53
		"===" => reduce 53
		"!=" => reduce 53
		"==" => reduce 53
		"<" => reduce 53
		">" => reduce 53
		"<=" => reduce 53
		">=" => reduce 53
		"instanceof" => reduce 53
		"in" => reduce 53
		">>>" => reduce 53
		">>" => reduce 53
		"<<" => reduce 53
		"+" => reduce 53
		"-" => reduce 53
		"%" => reduce 53
		"/" => reduce 53
		"*" => reduce 53
		")" => reduce 53
		"]" => reduce 53
		":" => reduce 53
		"}" => reduce 53

217:	PostfixExpression => LeftHandSideExpression $P1 "++" . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		";" => reduce 52
		"?" => reduce 52
		"," => reduce 52
		"||" => reduce 52
		"&&" => reduce 52
		"|" => reduce 52
		"^" => reduce 52
		"&" => reduce 52
		"!==" => reduce 52
		"===" => reduce 52
		"!=" => reduce 52
		"==" => reduce 52
		"<" => reduce 52
		">" => reduce 52
		"<=" => reduce 52
		">=" => reduce 52
		"instanceof" => reduce 52
		"in" => reduce 52
		">>>" => reduce 52
		">>" => reduce 52
		"<<" => reduce 52
		"+" => reduce 52
		"-" => reduce 52
		"%" => reduce 52
		"/" => reduce 52
		"*" => reduce 52
		")" => reduce 52
		"]" => reduce 52
		":" => reduce 52
		"}" => reduce 52

218:	AssignmentExpression => LeftHandSideExpression AssignmentOperator AssignmentExpression . ("}" ":" "]" ")" "," ";")
		";" => reduce 125
		"," => reduce 125
		")" => reduce 125
		"]" => reduce 125
		":" => reduce 125
		"}" => reduce 125

219:	Finally => "finally" . Block ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Block => . "{" StatementList "}"
	Block => . "{" "}"
		"{" => shift 103
		Block => shift 300

220:	TryStatement => "try" Block Finally . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 215
		"try" => reduce 215
		"throw" => reduce 215
		"switch" => reduce 215
		'$ident => reduce 215
		"with" => reduce 215
		"return" => reduce 215
		"break" => reduce 215
		"continue" => reduce 215
		"do" => reduce 215
		"while" => reduce 215
		"for" => reduce 215
		"if" => reduce 215
		"new" => reduce 215
		"this" => reduce 215
		"(" => reduce 215
		"{" => reduce 215
		"[" => reduce 215
		'$string => reduce 215
		'$fx => reduce 215
		'$fl => reduce 215
		"true" => reduce 215
		"false" => reduce 215
		"null" => reduce 215
		"delete" => reduce 215
		"void" => reduce 215
		"typeof" => reduce 215
		"++" => reduce 215
		"--" => reduce 215
		"+" => reduce 215
		"-" => reduce 215
		"~" => reduce 215
		"!" => reduce 215
		";" => reduce 215
		"var" => reduce 215
		"}" => reduce 215
		"else" => reduce 215
		'$end => reduce 215
		"case" => reduce 215
		"default" => reduce 215

221:	Catch => "catch" . "(" Identifier ")" Block ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally")
		"(" => shift 299

222:	TryStatement => "try" Block Catch . Finally ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Finally => . "finally" Block
	TryStatement => "try" Block Catch . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"finally" => shift 219
		Finally => shift 298
		"function" => reduce 214
		"try" => reduce 214
		"throw" => reduce 214
		"switch" => reduce 214
		'$ident => reduce 214
		"with" => reduce 214
		"return" => reduce 214
		"break" => reduce 214
		"continue" => reduce 214
		"do" => reduce 214
		"while" => reduce 214
		"for" => reduce 214
		"if" => reduce 214
		"new" => reduce 214
		"this" => reduce 214
		"(" => reduce 214
		"{" => reduce 214
		"[" => reduce 214
		'$string => reduce 214
		'$fx => reduce 214
		'$fl => reduce 214
		"true" => reduce 214
		"false" => reduce 214
		"null" => reduce 214
		"delete" => reduce 214
		"void" => reduce 214
		"typeof" => reduce 214
		"++" => reduce 214
		"--" => reduce 214
		"+" => reduce 214
		"-" => reduce 214
		"~" => reduce 214
		"!" => reduce 214
		";" => reduce 214
		"var" => reduce 214
		"}" => reduce 214
		"else" => reduce 214
		'$end => reduce 214
		"case" => reduce 214
		"default" => reduce 214

223:	StatementList => Statement . ("default" "case" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "}")
		"}" => reduce 159
		"var" => reduce 159
		";" => reduce 159
		"!" => reduce 159
		"~" => reduce 159
		"-" => reduce 159
		"+" => reduce 159
		"--" => reduce 159
		"++" => reduce 159
		"typeof" => reduce 159
		"void" => reduce 159
		"delete" => reduce 159
		"null" => reduce 159
		"false" => reduce 159
		"true" => reduce 159
		'$fl => reduce 159
		'$fx => reduce 159
		'$string => reduce 159
		"[" => reduce 159
		"{" => reduce 159
		"(" => reduce 159
		"this" => reduce 159
		"new" => reduce 159
		"if" => reduce 159
		"for" => reduce 159
		"while" => reduce 159
		"do" => reduce 159
		"continue" => reduce 159
		"break" => reduce 159
		"return" => reduce 159
		"with" => reduce 159
		'$ident => reduce 159
		"switch" => reduce 159
		"throw" => reduce 159
		"try" => reduce 159
		"case" => reduce 159
		"default" => reduce 159

224:	StatementList => StatementList . Statement ("try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "}")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	Block => "{" StatementList . "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally" "catch")
		"}" => shift 296
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 297

225:	Block => "{" "}" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally" "catch")
		"catch" => reduce 158
		"finally" => reduce 158
		"function" => reduce 158
		"try" => reduce 158
		"throw" => reduce 158
		"switch" => reduce 158
		'$ident => reduce 158
		"with" => reduce 158
		"return" => reduce 158
		"break" => reduce 158
		"continue" => reduce 158
		"do" => reduce 158
		"while" => reduce 158
		"for" => reduce 158
		"if" => reduce 158
		"new" => reduce 158
		"this" => reduce 158
		"(" => reduce 158
		"{" => reduce 158
		"[" => reduce 158
		'$string => reduce 158
		'$fx => reduce 158
		'$fl => reduce 158
		"true" => reduce 158
		"false" => reduce 158
		"null" => reduce 158
		"delete" => reduce 158
		"void" => reduce 158
		"typeof" => reduce 158
		"++" => reduce 158
		"--" => reduce 158
		"+" => reduce 158
		"-" => reduce 158
		"~" => reduce 158
		"!" => reduce 158
		";" => reduce 158
		"var" => reduce 158
		"}" => reduce 158
		"else" => reduce 158
		'$end => reduce 158
		"case" => reduce 158
		"default" => reduce 158

226:	Expression => Expression . "," AssignmentExpression ("," ";")
	ThrowStatement => "throw" $P6 Expression . ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 295
		"," => shift 88

227:	LabelledStatement => Identifier ":" Statement . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 211
		"try" => reduce 211
		"throw" => reduce 211
		"switch" => reduce 211
		'$ident => reduce 211
		"with" => reduce 211
		"return" => reduce 211
		"break" => reduce 211
		"continue" => reduce 211
		"do" => reduce 211
		"while" => reduce 211
		"for" => reduce 211
		"if" => reduce 211
		"new" => reduce 211
		"this" => reduce 211
		"(" => reduce 211
		"{" => reduce 211
		"[" => reduce 211
		'$string => reduce 211
		'$fx => reduce 211
		'$fl => reduce 211
		"true" => reduce 211
		"false" => reduce 211
		"null" => reduce 211
		"delete" => reduce 211
		"void" => reduce 211
		"typeof" => reduce 211
		"++" => reduce 211
		"--" => reduce 211
		"+" => reduce 211
		"-" => reduce 211
		"~" => reduce 211
		"!" => reduce 211
		";" => reduce 211
		"var" => reduce 211
		"}" => reduce 211
		"else" => reduce 211
		'$end => reduce 211
		"case" => reduce 211
		"default" => reduce 211

228:	Expression => Expression . "," AssignmentExpression ("," ")")
	SwitchStatement => "switch" "(" Expression . ")" CaseBlock ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 294
		"," => shift 88

229:	Expression => Expression . "," AssignmentExpression ("," ")")
	WithStatement => "with" "(" Expression . ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 293
		"," => shift 88

230:	Expression => Expression . "," AssignmentExpression ("," ";")
	ReturnStatement => "return" $P5 Expression . ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 292
		"," => shift 88

231:	BreakStatement => "break" $P4 Identifier . ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 291

232:	ContinueStatement => "continue" $P3 Identifier . ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 290

233:	IterationStatement => "for" "(" "var" . VariableDeclarationNoIn "in" Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	VariableDeclarationNoIn => . Identifier InitializerNoIn
	VariableDeclarationNoIn => . Identifier
	Identifier => . '$ident
	IterationStatement => "for" "(" "var" . VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	VariableDeclarationListNoIn => . VariableDeclarationNoIn
	VariableDeclarationListNoIn => . VariableDeclarationListNoIn "," VariableDeclarationNoIn
	VariableDeclarationNoIn => . Identifier InitializerNoIn
	VariableDeclarationNoIn => . Identifier
	Identifier => . '$ident
		VariableDeclarationListNoIn => shift 287
		'$ident => shift 47
		Identifier => shift 288
		VariableDeclarationNoIn => shift 289

234:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpressionNoIn => ShiftExpression . ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 84
		";" => reduce 84
		"instanceof" => reduce 84
		">=" => reduce 84
		"<=" => reduce 84
		">" => reduce 84
		"<" => reduce 84
		"==" => reduce 84
		"!=" => reduce 84
		"===" => reduce 84
		"!==" => reduce 84
		"&" => reduce 84
		"^" => reduce 84
		"|" => reduce 84
		"&&" => reduce 84
		"||" => reduce 84
		"," => reduce 84
		":" => reduce 84
		"in" => reduce 84

235:	RelationalExpressionNoIn => RelationalExpressionNoIn . "instanceof" ShiftExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	RelationalExpressionNoIn => RelationalExpressionNoIn . ">=" ShiftExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	RelationalExpressionNoIn => RelationalExpressionNoIn . "<=" ShiftExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	RelationalExpressionNoIn => RelationalExpressionNoIn . ">" ShiftExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	RelationalExpressionNoIn => RelationalExpressionNoIn . "<" ShiftExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	EqualityExpressionNoIn => RelationalExpressionNoIn . ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 282
		">" => shift 283
		"<=" => shift 284
		">=" => shift 285
		"instanceof" => shift 286
		";" => reduce 95
		"?" => reduce 95
		"," => reduce 95
		"||" => reduce 95
		"&&" => reduce 95
		"|" => reduce 95
		"^" => reduce 95
		"&" => reduce 95
		"!==" => reduce 95
		"===" => reduce 95
		"!=" => reduce 95
		"==" => reduce 95
		":" => reduce 95
		"in" => reduce 95

236:	EqualityExpressionNoIn => EqualityExpressionNoIn . "!==" RelationalExpressionNoIn ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	EqualityExpressionNoIn => EqualityExpressionNoIn . "===" RelationalExpressionNoIn ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	EqualityExpressionNoIn => EqualityExpressionNoIn . "!=" RelationalExpressionNoIn ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	EqualityExpressionNoIn => EqualityExpressionNoIn . "==" RelationalExpressionNoIn ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	BitwiseANDExpressionNoIn => EqualityExpressionNoIn . ("in" ":" "," "||" "&&" "|" "^" "&" ";" "?")
		"==" => shift 278
		"!=" => shift 279
		"===" => shift 280
		"!==" => shift 281
		"?" => reduce 102
		";" => reduce 102
		"&" => reduce 102
		"^" => reduce 102
		"|" => reduce 102
		"&&" => reduce 102
		"||" => reduce 102
		"," => reduce 102
		":" => reduce 102
		"in" => reduce 102

237:	BitwiseANDExpressionNoIn => BitwiseANDExpressionNoIn . "&" EqualityExpressionNoIn ("in" ":" "," "||" "&&" "|" "^" "&" ";" "?")
	BitwiseXORExpressionNoIn => BitwiseANDExpressionNoIn . ("in" ":" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 277
		";" => reduce 106
		"?" => reduce 106
		"," => reduce 106
		"||" => reduce 106
		"&&" => reduce 106
		"|" => reduce 106
		"^" => reduce 106
		":" => reduce 106
		"in" => reduce 106

238:	BitwiseXORExpressionNoIn => BitwiseXORExpressionNoIn . "^" BitwiseANDExpressionNoIn ("in" ":" "^" "|" "&&" "||" "," "?" ";")
	BitwiseORExpressionNoIn => BitwiseXORExpressionNoIn . ("in" ":" "," "||" "&&" "|" ";" "?")
		"^" => shift 276
		"?" => reduce 110
		";" => reduce 110
		"|" => reduce 110
		"&&" => reduce 110
		"||" => reduce 110
		"," => reduce 110
		":" => reduce 110
		"in" => reduce 110

239:	BitwiseORExpressionNoIn => BitwiseORExpressionNoIn . "|" BitwiseXORExpressionNoIn ("in" ":" "," "||" "&&" "|" ";" "?")
	LogicalANDExpressionNoIn => BitwiseORExpressionNoIn . ("in" ":" "&&" "||" "," "?" ";")
		"|" => shift 275
		";" => reduce 114
		"?" => reduce 114
		"," => reduce 114
		"||" => reduce 114
		"&&" => reduce 114
		":" => reduce 114
		"in" => reduce 114

240:	LogicalANDExpressionNoIn => LogicalANDExpressionNoIn . "&&" BitwiseORExpressionNoIn ("in" ":" "&&" "||" "," "?" ";")
	LogicalORExpressionNoIn => LogicalANDExpressionNoIn . ("in" ":" "," "||" ";" "?")
		"&&" => shift 274
		"?" => reduce 118
		";" => reduce 118
		"||" => reduce 118
		"," => reduce 118
		":" => reduce 118
		"in" => reduce 118

241:	LogicalORExpressionNoIn => LogicalORExpressionNoIn . "||" LogicalANDExpressionNoIn ("in" ":" "," "||" ";" "?")
	ConditionalExpressionNoIn => LogicalORExpressionNoIn . "?" AssignmentExpressionNoIn ":" AssignmentExpressionNoIn ("in" ":" "," ";")
	ConditionalExpressionNoIn => LogicalORExpressionNoIn . ("in" ":" "," ";")
		"?" => shift 272
		"||" => shift 273
		";" => reduce 122
		"," => reduce 122
		":" => reduce 122
		"in" => reduce 122

242:	IterationStatement => "for" "(" LeftHandSideExpression . "in" Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	PostfixExpression => LeftHandSideExpression . $P2 "--" ("*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	$P2 => .
	PostfixExpression => LeftHandSideExpression . $P1 "++" ("*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	$P1 => .
	PostfixExpression => LeftHandSideExpression . ("*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AssignmentExpressionNoIn => LeftHandSideExpression . AssignmentOperator AssignmentExpressionNoIn ("," ";")
	AssignmentOperator => . "="
	AssignmentOperator => . "*="
	AssignmentOperator => . "/="
	AssignmentOperator => . "%="
	AssignmentOperator => . "+="
	AssignmentOperator => . "-="
	AssignmentOperator => . "<<="
	AssignmentOperator => . ">>="
	AssignmentOperator => . ">>>="
	AssignmentOperator => . "&="
	AssignmentOperator => . "^="
	AssignmentOperator => . "|="
		"|=" => shift 105
		"^=" => shift 106
		"&=" => shift 107
		">>>=" => shift 108
		">>=" => shift 109
		"<<=" => shift 110
		"-=" => shift 111
		"+=" => shift 112
		"%=" => shift 113
		"/=" => shift 114
		"*=" => shift 115
		"=" => shift 116
		AssignmentOperator => shift 270
		$P1 => shift 118
		$P2 => shift 119
		"in" => shift 271
		";" => reduce 51
		"?" => reduce 51
		"," => reduce 51
		"||" => reduce 51
		"&&" => reduce 51
		"|" => reduce 51
		"^" => reduce 51
		"&" => reduce 51
		"!==" => reduce 51
		"===" => reduce 51
		"!=" => reduce 51
		"==" => reduce 51
		"<" => reduce 51
		">" => reduce 51
		"<=" => reduce 51
		">=" => reduce 51
		"instanceof" => reduce 51
		">>>" => reduce 51
		">>" => reduce 51
		"<<" => reduce 51
		"+" => reduce 51
		"-" => reduce 51
		"%" => reduce 51
		"/" => reduce 51
		"*" => reduce 51
		"++" => reduce 54
		"--" => reduce 55

243:	AssignmentExpressionNoIn => ConditionalExpressionNoIn . ("in" ":" "," ";")
		";" => reduce 126
		"," => reduce 126
		":" => reduce 126
		"in" => reduce 126

244:	ExpressionNoIn => AssignmentExpressionNoIn . ("," ";")
		";" => reduce 142
		"," => reduce 142

245:	ExpressionNoIn => ExpressionNoIn . "," AssignmentExpressionNoIn ("," ";")
	OptExprStmtNoIn => ExpressionNoIn . ";" (";" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		";" => shift 268
		"," => shift 269

246:	OptExprStmtNoIn => ":" . (";" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 182
		"~" => reduce 182
		"-" => reduce 182
		"+" => reduce 182
		"--" => reduce 182
		"++" => reduce 182
		"typeof" => reduce 182
		"void" => reduce 182
		"delete" => reduce 182
		'$ident => reduce 182
		"null" => reduce 182
		"false" => reduce 182
		"true" => reduce 182
		'$fl => reduce 182
		'$fx => reduce 182
		'$string => reduce 182
		"[" => reduce 182
		"{" => reduce 182
		"(" => reduce 182
		"this" => reduce 182
		"new" => reduce 182
		";" => reduce 182

247:	IterationStatement => "for" "(" OptExprStmtNoIn . OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	OptExprStmt => . ";"
	OptExprStmt => . Expression ";"
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 265
		";" => shift 266
		OptExprStmt => shift 267

248:	Expression => Expression . "," AssignmentExpression ("," ")")
	IterationStatement => "while" "(" Expression . ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 264
		"," => shift 88

249:	IterationStatement => "do" Statement "while" . "(" Expression ")" ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 263

250:	IfStatement => "if" "(" Expression . ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => Expression . "," AssignmentExpression ("," ")")
	IfStatement => "if" "(" Expression . ")" Statement "else" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"," => shift 88
		")" => shift 262

251:	Expression => Expression "," AssignmentExpression . (":" "]" ")" "," ";")
		";" => reduce 141
		"," => reduce 141
		")" => reduce 141
		"]" => reduce 141
		":" => reduce 141

252:	VariableStatement => "var" VariableDeclarationList ";" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 161
		"try" => reduce 161
		"throw" => reduce 161
		"switch" => reduce 161
		'$ident => reduce 161
		"with" => reduce 161
		"return" => reduce 161
		"break" => reduce 161
		"continue" => reduce 161
		"do" => reduce 161
		"while" => reduce 161
		"for" => reduce 161
		"if" => reduce 161
		"new" => reduce 161
		"this" => reduce 161
		"(" => reduce 161
		"{" => reduce 161
		"[" => reduce 161
		'$string => reduce 161
		'$fx => reduce 161
		'$fl => reduce 161
		"true" => reduce 161
		"false" => reduce 161
		"null" => reduce 161
		"delete" => reduce 161
		"void" => reduce 161
		"typeof" => reduce 161
		"++" => reduce 161
		"--" => reduce 161
		"+" => reduce 161
		"-" => reduce 161
		"~" => reduce 161
		"!" => reduce 161
		";" => reduce 161
		"var" => reduce 161
		"}" => reduce 161
		"else" => reduce 161
		'$end => reduce 161
		"case" => reduce 161
		"default" => reduce 161

253:	VariableDeclarationList => VariableDeclarationList "," . VariableDeclaration ("," ";")
	VariableDeclaration => . Identifier Initializer
	VariableDeclaration => . Identifier
	Identifier => . '$ident
		'$ident => shift 47
		Identifier => shift 84
		VariableDeclaration => shift 261

254:	Initializer => "=" . AssignmentExpression ("," ";")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 260

255:	VariableDeclaration => Identifier Initializer . ("," ";")
		";" => reduce 166
		"," => reduce 166

256:	FunctionDeclaration => "function" Identifier "(" . ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
	FunctionDeclaration => "function" Identifier "(" . FormalParameterList ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
	FormalParameterList => . Identifier
	FormalParameterList => . FormalParameterList "," Identifier
	Identifier => . '$ident
		'$ident => shift 47
		Identifier => shift 257
		FormalParameterList => shift 258
		")" => shift 259

257:	FormalParameterList => Identifier . ("," ")")
		")" => reduce 225
		"," => reduce 225

258:	FormalParameterList => FormalParameterList . "," Identifier ("," ")")
	FunctionDeclaration => "function" Identifier "(" FormalParameterList . ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		")" => shift 352
		"," => shift 353

259:	FunctionDeclaration => "function" Identifier "(" ")" . "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"{" => shift 351

260:	Initializer => "=" AssignmentExpression . ("," ";")
		";" => reduce 170
		"," => reduce 170

261:	VariableDeclarationList => VariableDeclarationList "," VariableDeclaration . ("," ";")
		";" => reduce 163
		"," => reduce 163

262:	IfStatement => "if" "(" Expression ")" . Statement "else" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	IfStatement => "if" "(" Expression ")" . Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 350

263:	IterationStatement => "do" Statement "while" "(" . Expression ")" ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 349

264:	IterationStatement => "while" "(" Expression ")" . Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 348

265:	Expression => Expression . "," AssignmentExpression ("," ";")
	OptExprStmt => Expression . ";" (";" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		";" => shift 347
		"," => shift 88

266:	OptExprStmt => ";" . (";" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 184
		"~" => reduce 184
		"-" => reduce 184
		"+" => reduce 184
		"--" => reduce 184
		"++" => reduce 184
		"typeof" => reduce 184
		"void" => reduce 184
		"delete" => reduce 184
		'$ident => reduce 184
		"null" => reduce 184
		"false" => reduce 184
		"true" => reduce 184
		'$fl => reduce 184
		'$fx => reduce 184
		'$string => reduce 184
		"[" => reduce 184
		"{" => reduce 184
		"(" => reduce 184
		"this" => reduce 184
		"new" => reduce 184
		";" => reduce 184

267:	IterationStatement => "for" "(" OptExprStmtNoIn OptExprStmt . OptExprClose Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	OptExprClose => . ";"
	OptExprClose => . Expression ")"
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 344
		";" => shift 345
		OptExprClose => shift 346

268:	OptExprStmtNoIn => ExpressionNoIn ";" . (";" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 183
		"~" => reduce 183
		"-" => reduce 183
		"+" => reduce 183
		"--" => reduce 183
		"++" => reduce 183
		"typeof" => reduce 183
		"void" => reduce 183
		"delete" => reduce 183
		'$ident => reduce 183
		"null" => reduce 183
		"false" => reduce 183
		"true" => reduce 183
		'$fl => reduce 183
		'$fx => reduce 183
		'$string => reduce 183
		"[" => reduce 183
		"{" => reduce 183
		"(" => reduce 183
		"this" => reduce 183
		"new" => reduce 183
		";" => reduce 183

269:	ExpressionNoIn => ExpressionNoIn "," . AssignmentExpressionNoIn ("," ";")
	AssignmentExpressionNoIn => . ConditionalExpressionNoIn
	AssignmentExpressionNoIn => . LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn "?" AssignmentExpressionNoIn ":" AssignmentExpressionNoIn
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpressionNoIn => . LogicalANDExpressionNoIn
	LogicalORExpressionNoIn => . LogicalORExpressionNoIn "||" LogicalANDExpressionNoIn
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpressionNoIn => . BitwiseORExpressionNoIn
	LogicalANDExpressionNoIn => . LogicalANDExpressionNoIn "&&" BitwiseORExpressionNoIn
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpressionNoIn => . BitwiseXORExpressionNoIn
	BitwiseORExpressionNoIn => . BitwiseORExpressionNoIn "|" BitwiseXORExpressionNoIn
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpressionNoIn => . BitwiseANDExpressionNoIn
	BitwiseXORExpressionNoIn => . BitwiseXORExpressionNoIn "^" BitwiseANDExpressionNoIn
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpressionNoIn => . EqualityExpressionNoIn
	BitwiseANDExpressionNoIn => . BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn
	EqualityExpressionNoIn => . RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "==" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!=" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "===" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!==" RelationalExpressionNoIn
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 235
		EqualityExpressionNoIn => shift 236
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpressionNoIn => shift 237
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpressionNoIn => shift 238
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpressionNoIn => shift 239
		PrimaryExpression => shift 37
		LogicalANDExpressionNoIn => shift 240
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpressionNoIn => shift 241
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 339
		ConditionalExpressionNoIn => shift 243
		AssignmentExpressionNoIn => shift 343

270:	AssignmentExpressionNoIn => LeftHandSideExpression AssignmentOperator . AssignmentExpressionNoIn ("in" ":" "," ";")
	AssignmentExpressionNoIn => . ConditionalExpressionNoIn
	AssignmentExpressionNoIn => . LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn "?" AssignmentExpressionNoIn ":" AssignmentExpressionNoIn
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpressionNoIn => . LogicalANDExpressionNoIn
	LogicalORExpressionNoIn => . LogicalORExpressionNoIn "||" LogicalANDExpressionNoIn
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpressionNoIn => . BitwiseORExpressionNoIn
	LogicalANDExpressionNoIn => . LogicalANDExpressionNoIn "&&" BitwiseORExpressionNoIn
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpressionNoIn => . BitwiseXORExpressionNoIn
	BitwiseORExpressionNoIn => . BitwiseORExpressionNoIn "|" BitwiseXORExpressionNoIn
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpressionNoIn => . BitwiseANDExpressionNoIn
	BitwiseXORExpressionNoIn => . BitwiseXORExpressionNoIn "^" BitwiseANDExpressionNoIn
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpressionNoIn => . EqualityExpressionNoIn
	BitwiseANDExpressionNoIn => . BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn
	EqualityExpressionNoIn => . RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "==" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!=" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "===" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!==" RelationalExpressionNoIn
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 235
		EqualityExpressionNoIn => shift 236
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpressionNoIn => shift 237
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpressionNoIn => shift 238
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpressionNoIn => shift 239
		PrimaryExpression => shift 37
		LogicalANDExpressionNoIn => shift 240
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpressionNoIn => shift 241
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 339
		ConditionalExpressionNoIn => shift 243
		AssignmentExpressionNoIn => shift 342

271:	IterationStatement => "for" "(" LeftHandSideExpression "in" . Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 341

272:	ConditionalExpressionNoIn => LogicalORExpressionNoIn "?" . AssignmentExpressionNoIn ":" AssignmentExpressionNoIn ("in" ":" "," ";")
	AssignmentExpressionNoIn => . ConditionalExpressionNoIn
	AssignmentExpressionNoIn => . LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn "?" AssignmentExpressionNoIn ":" AssignmentExpressionNoIn
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpressionNoIn => . LogicalANDExpressionNoIn
	LogicalORExpressionNoIn => . LogicalORExpressionNoIn "||" LogicalANDExpressionNoIn
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpressionNoIn => . BitwiseORExpressionNoIn
	LogicalANDExpressionNoIn => . LogicalANDExpressionNoIn "&&" BitwiseORExpressionNoIn
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpressionNoIn => . BitwiseXORExpressionNoIn
	BitwiseORExpressionNoIn => . BitwiseORExpressionNoIn "|" BitwiseXORExpressionNoIn
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpressionNoIn => . BitwiseANDExpressionNoIn
	BitwiseXORExpressionNoIn => . BitwiseXORExpressionNoIn "^" BitwiseANDExpressionNoIn
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpressionNoIn => . EqualityExpressionNoIn
	BitwiseANDExpressionNoIn => . BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn
	EqualityExpressionNoIn => . RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "==" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!=" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "===" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!==" RelationalExpressionNoIn
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 235
		EqualityExpressionNoIn => shift 236
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpressionNoIn => shift 237
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpressionNoIn => shift 238
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpressionNoIn => shift 239
		PrimaryExpression => shift 37
		LogicalANDExpressionNoIn => shift 240
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpressionNoIn => shift 241
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 339
		ConditionalExpressionNoIn => shift 243
		AssignmentExpressionNoIn => shift 340

273:	LogicalORExpressionNoIn => LogicalORExpressionNoIn "||" . LogicalANDExpressionNoIn ("in" ":" "," "||" ";" "?")
	LogicalANDExpressionNoIn => . BitwiseORExpressionNoIn
	LogicalANDExpressionNoIn => . LogicalANDExpressionNoIn "&&" BitwiseORExpressionNoIn
	BitwiseORExpressionNoIn => . BitwiseXORExpressionNoIn
	BitwiseORExpressionNoIn => . BitwiseORExpressionNoIn "|" BitwiseXORExpressionNoIn
	BitwiseXORExpressionNoIn => . BitwiseANDExpressionNoIn
	BitwiseXORExpressionNoIn => . BitwiseXORExpressionNoIn "^" BitwiseANDExpressionNoIn
	BitwiseANDExpressionNoIn => . EqualityExpressionNoIn
	BitwiseANDExpressionNoIn => . BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn
	EqualityExpressionNoIn => . RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "==" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!=" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "===" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!==" RelationalExpressionNoIn
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 235
		EqualityExpressionNoIn => shift 236
		BitwiseANDExpressionNoIn => shift 237
		BitwiseXORExpressionNoIn => shift 238
		BitwiseORExpressionNoIn => shift 239
		LogicalANDExpressionNoIn => shift 338

274:	LogicalANDExpressionNoIn => LogicalANDExpressionNoIn "&&" . BitwiseORExpressionNoIn ("in" ":" "&&" "||" "," "?" ";")
	BitwiseORExpressionNoIn => . BitwiseXORExpressionNoIn
	BitwiseORExpressionNoIn => . BitwiseORExpressionNoIn "|" BitwiseXORExpressionNoIn
	BitwiseXORExpressionNoIn => . BitwiseANDExpressionNoIn
	BitwiseXORExpressionNoIn => . BitwiseXORExpressionNoIn "^" BitwiseANDExpressionNoIn
	BitwiseANDExpressionNoIn => . EqualityExpressionNoIn
	BitwiseANDExpressionNoIn => . BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn
	EqualityExpressionNoIn => . RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "==" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!=" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "===" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!==" RelationalExpressionNoIn
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 235
		EqualityExpressionNoIn => shift 236
		BitwiseANDExpressionNoIn => shift 237
		BitwiseXORExpressionNoIn => shift 238
		BitwiseORExpressionNoIn => shift 337

275:	BitwiseORExpressionNoIn => BitwiseORExpressionNoIn "|" . BitwiseXORExpressionNoIn ("in" ":" "," "||" "&&" "|" ";" "?")
	BitwiseXORExpressionNoIn => . BitwiseANDExpressionNoIn
	BitwiseXORExpressionNoIn => . BitwiseXORExpressionNoIn "^" BitwiseANDExpressionNoIn
	BitwiseANDExpressionNoIn => . EqualityExpressionNoIn
	BitwiseANDExpressionNoIn => . BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn
	EqualityExpressionNoIn => . RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "==" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!=" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "===" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!==" RelationalExpressionNoIn
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 235
		EqualityExpressionNoIn => shift 236
		BitwiseANDExpressionNoIn => shift 237
		BitwiseXORExpressionNoIn => shift 336

276:	BitwiseXORExpressionNoIn => BitwiseXORExpressionNoIn "^" . BitwiseANDExpressionNoIn ("in" ":" "^" "|" "&&" "||" "," "?" ";")
	BitwiseANDExpressionNoIn => . EqualityExpressionNoIn
	BitwiseANDExpressionNoIn => . BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn
	EqualityExpressionNoIn => . RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "==" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!=" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "===" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!==" RelationalExpressionNoIn
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 235
		EqualityExpressionNoIn => shift 236
		BitwiseANDExpressionNoIn => shift 335

277:	BitwiseANDExpressionNoIn => BitwiseANDExpressionNoIn "&" . EqualityExpressionNoIn ("in" ":" "," "||" "&&" "|" "^" "&" ";" "?")
	EqualityExpressionNoIn => . RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "==" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!=" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "===" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!==" RelationalExpressionNoIn
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 235
		EqualityExpressionNoIn => shift 334

278:	EqualityExpressionNoIn => EqualityExpressionNoIn "==" . RelationalExpressionNoIn ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 333

279:	EqualityExpressionNoIn => EqualityExpressionNoIn "!=" . RelationalExpressionNoIn ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 332

280:	EqualityExpressionNoIn => EqualityExpressionNoIn "===" . RelationalExpressionNoIn ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 331

281:	EqualityExpressionNoIn => EqualityExpressionNoIn "!==" . RelationalExpressionNoIn ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 330

282:	RelationalExpressionNoIn => RelationalExpressionNoIn "<" . ShiftExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 329

283:	RelationalExpressionNoIn => RelationalExpressionNoIn ">" . ShiftExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 328

284:	RelationalExpressionNoIn => RelationalExpressionNoIn "<=" . ShiftExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 327

285:	RelationalExpressionNoIn => RelationalExpressionNoIn ">=" . ShiftExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 326

286:	RelationalExpressionNoIn => RelationalExpressionNoIn "instanceof" . ShiftExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		PrimaryExpression => shift 37
		"new" => shift 39
		MemberExpression => shift 40
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 166
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 325

287:	VariableDeclarationListNoIn => VariableDeclarationListNoIn . "," VariableDeclarationNoIn ("," ";")
	IterationStatement => "for" "(" "var" VariableDeclarationListNoIn . ";" OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 323
		"," => shift 324

288:	VariableDeclarationNoIn => Identifier . ("," ";" "in")
	VariableDeclarationNoIn => Identifier . InitializerNoIn ("," ";" "in")
	InitializerNoIn => . "=" AssignmentExpressionNoIn
		"=" => shift 321
		InitializerNoIn => shift 322
		"in" => reduce 169
		";" => reduce 169
		"," => reduce 169

289:	VariableDeclarationListNoIn => VariableDeclarationNoIn . ("," ";")
	IterationStatement => "for" "(" "var" VariableDeclarationNoIn . "in" Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"in" => shift 320
		";" => reduce 164
		"," => reduce 164

290:	ContinueStatement => "continue" $P3 Identifier ";" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 188
		"try" => reduce 188
		"throw" => reduce 188
		"switch" => reduce 188
		'$ident => reduce 188
		"with" => reduce 188
		"return" => reduce 188
		"break" => reduce 188
		"continue" => reduce 188
		"do" => reduce 188
		"while" => reduce 188
		"for" => reduce 188
		"if" => reduce 188
		"new" => reduce 188
		"this" => reduce 188
		"(" => reduce 188
		"{" => reduce 188
		"[" => reduce 188
		'$string => reduce 188
		'$fx => reduce 188
		'$fl => reduce 188
		"true" => reduce 188
		"false" => reduce 188
		"null" => reduce 188
		"delete" => reduce 188
		"void" => reduce 188
		"typeof" => reduce 188
		"++" => reduce 188
		"--" => reduce 188
		"+" => reduce 188
		"-" => reduce 188
		"~" => reduce 188
		"!" => reduce 188
		";" => reduce 188
		"var" => reduce 188
		"}" => reduce 188
		"else" => reduce 188
		'$end => reduce 188
		"case" => reduce 188
		"default" => reduce 188

291:	BreakStatement => "break" $P4 Identifier ";" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 191
		"try" => reduce 191
		"throw" => reduce 191
		"switch" => reduce 191
		'$ident => reduce 191
		"with" => reduce 191
		"return" => reduce 191
		"break" => reduce 191
		"continue" => reduce 191
		"do" => reduce 191
		"while" => reduce 191
		"for" => reduce 191
		"if" => reduce 191
		"new" => reduce 191
		"this" => reduce 191
		"(" => reduce 191
		"{" => reduce 191
		"[" => reduce 191
		'$string => reduce 191
		'$fx => reduce 191
		'$fl => reduce 191
		"true" => reduce 191
		"false" => reduce 191
		"null" => reduce 191
		"delete" => reduce 191
		"void" => reduce 191
		"typeof" => reduce 191
		"++" => reduce 191
		"--" => reduce 191
		"+" => reduce 191
		"-" => reduce 191
		"~" => reduce 191
		"!" => reduce 191
		";" => reduce 191
		"var" => reduce 191
		"}" => reduce 191
		"else" => reduce 191
		'$end => reduce 191
		"case" => reduce 191
		"default" => reduce 191

292:	ReturnStatement => "return" $P5 Expression ";" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 194
		"try" => reduce 194
		"throw" => reduce 194
		"switch" => reduce 194
		'$ident => reduce 194
		"with" => reduce 194
		"return" => reduce 194
		"break" => reduce 194
		"continue" => reduce 194
		"do" => reduce 194
		"while" => reduce 194
		"for" => reduce 194
		"if" => reduce 194
		"new" => reduce 194
		"this" => reduce 194
		"(" => reduce 194
		"{" => reduce 194
		"[" => reduce 194
		'$string => reduce 194
		'$fx => reduce 194
		'$fl => reduce 194
		"true" => reduce 194
		"false" => reduce 194
		"null" => reduce 194
		"delete" => reduce 194
		"void" => reduce 194
		"typeof" => reduce 194
		"++" => reduce 194
		"--" => reduce 194
		"+" => reduce 194
		"-" => reduce 194
		"~" => reduce 194
		"!" => reduce 194
		";" => reduce 194
		"var" => reduce 194
		"}" => reduce 194
		"else" => reduce 194
		'$end => reduce 194
		"case" => reduce 194
		"default" => reduce 194

293:	WithStatement => "with" "(" Expression ")" . Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 319

294:	SwitchStatement => "switch" "(" Expression ")" . CaseBlock ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseBlock => . "{" CaseClauses "}"
	CaseBlock => . "{" "}"
	CaseBlock => . "{" CaseClauses DefaultClause CaseClauses "}"
	CaseBlock => . "{" CaseClauses DefaultClause "}"
	CaseBlock => . "{" DefaultClause CaseClauses "}"
	CaseBlock => . "{" DefaultClause "}"
		"{" => shift 317
		CaseBlock => shift 318

295:	ThrowStatement => "throw" $P6 Expression ";" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 212
		"try" => reduce 212
		"throw" => reduce 212
		"switch" => reduce 212
		'$ident => reduce 212
		"with" => reduce 212
		"return" => reduce 212
		"break" => reduce 212
		"continue" => reduce 212
		"do" => reduce 212
		"while" => reduce 212
		"for" => reduce 212
		"if" => reduce 212
		"new" => reduce 212
		"this" => reduce 212
		"(" => reduce 212
		"{" => reduce 212
		"[" => reduce 212
		'$string => reduce 212
		'$fx => reduce 212
		'$fl => reduce 212
		"true" => reduce 212
		"false" => reduce 212
		"null" => reduce 212
		"delete" => reduce 212
		"void" => reduce 212
		"typeof" => reduce 212
		"++" => reduce 212
		"--" => reduce 212
		"+" => reduce 212
		"-" => reduce 212
		"~" => reduce 212
		"!" => reduce 212
		";" => reduce 212
		"var" => reduce 212
		"}" => reduce 212
		"else" => reduce 212
		'$end => reduce 212
		"case" => reduce 212
		"default" => reduce 212

296:	Block => "{" StatementList "}" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally" "catch")
		"catch" => reduce 157
		"finally" => reduce 157
		"function" => reduce 157
		"try" => reduce 157
		"throw" => reduce 157
		"switch" => reduce 157
		'$ident => reduce 157
		"with" => reduce 157
		"return" => reduce 157
		"break" => reduce 157
		"continue" => reduce 157
		"do" => reduce 157
		"while" => reduce 157
		"for" => reduce 157
		"if" => reduce 157
		"new" => reduce 157
		"this" => reduce 157
		"(" => reduce 157
		"{" => reduce 157
		"[" => reduce 157
		'$string => reduce 157
		'$fx => reduce 157
		'$fl => reduce 157
		"true" => reduce 157
		"false" => reduce 157
		"null" => reduce 157
		"delete" => reduce 157
		"void" => reduce 157
		"typeof" => reduce 157
		"++" => reduce 157
		"--" => reduce 157
		"+" => reduce 157
		"-" => reduce 157
		"~" => reduce 157
		"!" => reduce 157
		";" => reduce 157
		"var" => reduce 157
		"}" => reduce 157
		"else" => reduce 157
		'$end => reduce 157
		"case" => reduce 157
		"default" => reduce 157

297:	StatementList => StatementList Statement . ("default" "case" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "}")
		"}" => reduce 160
		"var" => reduce 160
		";" => reduce 160
		"!" => reduce 160
		"~" => reduce 160
		"-" => reduce 160
		"+" => reduce 160
		"--" => reduce 160
		"++" => reduce 160
		"typeof" => reduce 160
		"void" => reduce 160
		"delete" => reduce 160
		"null" => reduce 160
		"false" => reduce 160
		"true" => reduce 160
		'$fl => reduce 160
		'$fx => reduce 160
		'$string => reduce 160
		"[" => reduce 160
		"{" => reduce 160
		"(" => reduce 160
		"this" => reduce 160
		"new" => reduce 160
		"if" => reduce 160
		"for" => reduce 160
		"while" => reduce 160
		"do" => reduce 160
		"continue" => reduce 160
		"break" => reduce 160
		"return" => reduce 160
		"with" => reduce 160
		'$ident => reduce 160
		"switch" => reduce 160
		"throw" => reduce 160
		"try" => reduce 160
		"case" => reduce 160
		"default" => reduce 160

298:	TryStatement => "try" Block Catch Finally . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 216
		"try" => reduce 216
		"throw" => reduce 216
		"switch" => reduce 216
		'$ident => reduce 216
		"with" => reduce 216
		"return" => reduce 216
		"break" => reduce 216
		"continue" => reduce 216
		"do" => reduce 216
		"while" => reduce 216
		"for" => reduce 216
		"if" => reduce 216
		"new" => reduce 216
		"this" => reduce 216
		"(" => reduce 216
		"{" => reduce 216
		"[" => reduce 216
		'$string => reduce 216
		'$fx => reduce 216
		'$fl => reduce 216
		"true" => reduce 216
		"false" => reduce 216
		"null" => reduce 216
		"delete" => reduce 216
		"void" => reduce 216
		"typeof" => reduce 216
		"++" => reduce 216
		"--" => reduce 216
		"+" => reduce 216
		"-" => reduce 216
		"~" => reduce 216
		"!" => reduce 216
		";" => reduce 216
		"var" => reduce 216
		"}" => reduce 216
		"else" => reduce 216
		'$end => reduce 216
		"case" => reduce 216
		"default" => reduce 216

299:	Catch => "catch" "(" . Identifier ")" Block ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally")
	Identifier => . '$ident
		'$ident => shift 47
		Identifier => shift 316

300:	Finally => "finally" Block . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 218
		"try" => reduce 218
		"throw" => reduce 218
		"switch" => reduce 218
		'$ident => reduce 218
		"with" => reduce 218
		"return" => reduce 218
		"break" => reduce 218
		"continue" => reduce 218
		"do" => reduce 218
		"while" => reduce 218
		"for" => reduce 218
		"if" => reduce 218
		"new" => reduce 218
		"this" => reduce 218
		"(" => reduce 218
		"{" => reduce 218
		"[" => reduce 218
		'$string => reduce 218
		'$fx => reduce 218
		'$fl => reduce 218
		"true" => reduce 218
		"false" => reduce 218
		"null" => reduce 218
		"delete" => reduce 218
		"void" => reduce 218
		"typeof" => reduce 218
		"++" => reduce 218
		"--" => reduce 218
		"+" => reduce 218
		"-" => reduce 218
		"~" => reduce 218
		"!" => reduce 218
		";" => reduce 218
		"var" => reduce 218
		"}" => reduce 218
		"else" => reduce 218
		'$end => reduce 218
		"case" => reduce 218
		"default" => reduce 218

301:	Arguments => "(" ArgumentList ")" . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		"=" => reduce 46
		"*=" => reduce 46
		"/=" => reduce 46
		"%=" => reduce 46
		"+=" => reduce 46
		"-=" => reduce 46
		"<<=" => reduce 46
		">>=" => reduce 46
		">>>=" => reduce 46
		"&=" => reduce 46
		"^=" => reduce 46
		"|=" => reduce 46
		"." => reduce 46
		"[" => reduce 46
		"(" => reduce 46
		";" => reduce 46
		"?" => reduce 46
		"++" => reduce 46
		"--" => reduce 46
		"," => reduce 46
		"||" => reduce 46
		"&&" => reduce 46
		"|" => reduce 46
		"^" => reduce 46
		"&" => reduce 46
		"!==" => reduce 46
		"===" => reduce 46
		"!=" => reduce 46
		"==" => reduce 46
		"<" => reduce 46
		">" => reduce 46
		"<=" => reduce 46
		">=" => reduce 46
		"instanceof" => reduce 46
		"in" => reduce 46
		">>>" => reduce 46
		">>" => reduce 46
		"<<" => reduce 46
		"+" => reduce 46
		"-" => reduce 46
		"%" => reduce 46
		"/" => reduce 46
		"*" => reduce 46
		")" => reduce 46
		"]" => reduce 46
		":" => reduce 46
		"}" => reduce 46

302:	ArgumentList => ArgumentList "," . AssignmentExpression ("," ")")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 315

303:	CallExpression => CallExpression "[" Expression "]" . ("}" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "in" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		"=" => reduce 43
		"*=" => reduce 43
		"/=" => reduce 43
		"%=" => reduce 43
		"+=" => reduce 43
		"-=" => reduce 43
		"<<=" => reduce 43
		">>=" => reduce 43
		">>>=" => reduce 43
		"&=" => reduce 43
		"^=" => reduce 43
		"|=" => reduce 43
		"." => reduce 43
		"[" => reduce 43
		"(" => reduce 43
		";" => reduce 43
		"?" => reduce 43
		"++" => reduce 43
		"--" => reduce 43
		"," => reduce 43
		"||" => reduce 43
		"&&" => reduce 43
		"|" => reduce 43
		"^" => reduce 43
		"&" => reduce 43
		"!==" => reduce 43
		"===" => reduce 43
		"!=" => reduce 43
		"==" => reduce 43
		"<" => reduce 43
		">" => reduce 43
		"<=" => reduce 43
		">=" => reduce 43
		"instanceof" => reduce 43
		"in" => reduce 43
		">>>" => reduce 43
		">>" => reduce 43
		"<<" => reduce 43
		"+" => reduce 43
		"-" => reduce 43
		"%" => reduce 43
		"/" => reduce 43
		"*" => reduce 43
		")" => reduce 43
		"]" => reduce 43
		":" => reduce 43
		"}" => reduce 43

304:	ConditionalExpression => LogicalORExpression "?" AssignmentExpression ":" . AssignmentExpression ("}" ":" "]" ")" "," ";")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 314

305:	MemberExpression => MemberExpression "[" Expression "]" . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 36
		"^=" => reduce 36
		"&=" => reduce 36
		">>>=" => reduce 36
		">>=" => reduce 36
		"<<=" => reduce 36
		"-=" => reduce 36
		"+=" => reduce 36
		"%=" => reduce 36
		"/=" => reduce 36
		"*=" => reduce 36
		"=" => reduce 36
		"(" => reduce 36
		"." => reduce 36
		"[" => reduce 36
		"--" => reduce 36
		"++" => reduce 36
		"?" => reduce 36
		";" => reduce 36
		"*" => reduce 36
		"/" => reduce 36
		"%" => reduce 36
		"-" => reduce 36
		"+" => reduce 36
		"<<" => reduce 36
		">>" => reduce 36
		">>>" => reduce 36
		"in" => reduce 36
		"instanceof" => reduce 36
		">=" => reduce 36
		"<=" => reduce 36
		">" => reduce 36
		"<" => reduce 36
		"==" => reduce 36
		"!=" => reduce 36
		"===" => reduce 36
		"!==" => reduce 36
		"&" => reduce 36
		"^" => reduce 36
		"|" => reduce 36
		"&&" => reduce 36
		"||" => reduce 36
		"," => reduce 36
		")" => reduce 36
		"]" => reduce 36
		":" => reduce 36
		"}" => reduce 36

306:	ElementList => ElementList "," AssignmentExpression . (",")
		"," => reduce 25

307:	ArrayLiteral => "[" ElementList "," Elision . "]" ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Elision => Elision . "," ("]" "," "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
	ElementList => ElementList "," Elision . AssignmentExpression (",")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 312
		"," => shift 200
		"]" => shift 313

308:	ArrayLiteral => "[" ElementList "," "]" . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 21
		"^=" => reduce 21
		"&=" => reduce 21
		">>>=" => reduce 21
		">>=" => reduce 21
		"<<=" => reduce 21
		"-=" => reduce 21
		"+=" => reduce 21
		"%=" => reduce 21
		"/=" => reduce 21
		"*=" => reduce 21
		"=" => reduce 21
		"(" => reduce 21
		"." => reduce 21
		"[" => reduce 21
		"--" => reduce 21
		"++" => reduce 21
		"?" => reduce 21
		";" => reduce 21
		"*" => reduce 21
		"/" => reduce 21
		"%" => reduce 21
		"-" => reduce 21
		"+" => reduce 21
		"<<" => reduce 21
		">>" => reduce 21
		">>>" => reduce 21
		"in" => reduce 21
		"instanceof" => reduce 21
		">=" => reduce 21
		"<=" => reduce 21
		">" => reduce 21
		"<" => reduce 21
		"==" => reduce 21
		"!=" => reduce 21
		"===" => reduce 21
		"!==" => reduce 21
		"&" => reduce 21
		"^" => reduce 21
		"|" => reduce 21
		"&&" => reduce 21
		"||" => reduce 21
		"," => reduce 21
		")" => reduce 21
		"]" => reduce 21
		":" => reduce 21
		"}" => reduce 21

309:	PropertyNameAndValueList => PropertyName ":" AssignmentExpression . ("," "}")
		"}" => reduce 30
		"," => reduce 30

310:	PropertyNameAndValueList => PropertyNameAndValueList "," PropertyName . ":" AssignmentExpression ("," "}")
		":" => shift 311

311:	PropertyNameAndValueList => PropertyNameAndValueList "," PropertyName ":" . AssignmentExpression ("," "}")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 375

312:	ElementList => ElementList "," Elision AssignmentExpression . (",")
		"," => reduce 24

313:	ArrayLiteral => "[" ElementList "," Elision "]" . ("}" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" "in" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"|=" => reduce 20
		"^=" => reduce 20
		"&=" => reduce 20
		">>>=" => reduce 20
		">>=" => reduce 20
		"<<=" => reduce 20
		"-=" => reduce 20
		"+=" => reduce 20
		"%=" => reduce 20
		"/=" => reduce 20
		"*=" => reduce 20
		"=" => reduce 20
		"(" => reduce 20
		"." => reduce 20
		"[" => reduce 20
		"--" => reduce 20
		"++" => reduce 20
		"?" => reduce 20
		";" => reduce 20
		"*" => reduce 20
		"/" => reduce 20
		"%" => reduce 20
		"-" => reduce 20
		"+" => reduce 20
		"<<" => reduce 20
		">>" => reduce 20
		">>>" => reduce 20
		"in" => reduce 20
		"instanceof" => reduce 20
		">=" => reduce 20
		"<=" => reduce 20
		">" => reduce 20
		"<" => reduce 20
		"==" => reduce 20
		"!=" => reduce 20
		"===" => reduce 20
		"!==" => reduce 20
		"&" => reduce 20
		"^" => reduce 20
		"|" => reduce 20
		"&&" => reduce 20
		"||" => reduce 20
		"," => reduce 20
		")" => reduce 20
		"]" => reduce 20
		":" => reduce 20
		"}" => reduce 20

314:	ConditionalExpression => LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression . ("}" ":" "]" ")" "," ";")
		";" => reduce 121
		"," => reduce 121
		")" => reduce 121
		"]" => reduce 121
		":" => reduce 121
		"}" => reduce 121

315:	ArgumentList => ArgumentList "," AssignmentExpression . ("," ")")
		")" => reduce 48
		"," => reduce 48

316:	Catch => "catch" "(" Identifier . ")" Block ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally")
		")" => shift 374

317:	CaseBlock => "{" . DefaultClause "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	DefaultClause => . "default" ":" StatementList
	DefaultClause => . "default" ":"
	CaseBlock => "{" . DefaultClause CaseClauses "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	DefaultClause => . "default" ":" StatementList
	DefaultClause => . "default" ":"
	CaseBlock => "{" . CaseClauses DefaultClause "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseClauses => . CaseClause
	CaseClauses => . CaseClauses CaseClause
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" . CaseClauses DefaultClause CaseClauses "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseClauses => . CaseClause
	CaseClauses => . CaseClauses CaseClause
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" . "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseBlock => "{" . CaseClauses "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseClauses => . CaseClause
	CaseClauses => . CaseClauses CaseClause
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
		"}" => shift 368
		"case" => shift 369
		CaseClause => shift 370
		CaseClauses => shift 371
		"default" => shift 372
		DefaultClause => shift 373

318:	SwitchStatement => "switch" "(" Expression ")" CaseBlock . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 198
		"try" => reduce 198
		"throw" => reduce 198
		"switch" => reduce 198
		'$ident => reduce 198
		"with" => reduce 198
		"return" => reduce 198
		"break" => reduce 198
		"continue" => reduce 198
		"do" => reduce 198
		"while" => reduce 198
		"for" => reduce 198
		"if" => reduce 198
		"new" => reduce 198
		"this" => reduce 198
		"(" => reduce 198
		"{" => reduce 198
		"[" => reduce 198
		'$string => reduce 198
		'$fx => reduce 198
		'$fl => reduce 198
		"true" => reduce 198
		"false" => reduce 198
		"null" => reduce 198
		"delete" => reduce 198
		"void" => reduce 198
		"typeof" => reduce 198
		"++" => reduce 198
		"--" => reduce 198
		"+" => reduce 198
		"-" => reduce 198
		"~" => reduce 198
		"!" => reduce 198
		";" => reduce 198
		"var" => reduce 198
		"}" => reduce 198
		"else" => reduce 198
		'$end => reduce 198
		"case" => reduce 198
		"default" => reduce 198

319:	WithStatement => "with" "(" Expression ")" Statement . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 197
		"try" => reduce 197
		"throw" => reduce 197
		"switch" => reduce 197
		'$ident => reduce 197
		"with" => reduce 197
		"return" => reduce 197
		"break" => reduce 197
		"continue" => reduce 197
		"do" => reduce 197
		"while" => reduce 197
		"for" => reduce 197
		"if" => reduce 197
		"new" => reduce 197
		"this" => reduce 197
		"(" => reduce 197
		"{" => reduce 197
		"[" => reduce 197
		'$string => reduce 197
		'$fx => reduce 197
		'$fl => reduce 197
		"true" => reduce 197
		"false" => reduce 197
		"null" => reduce 197
		"delete" => reduce 197
		"void" => reduce 197
		"typeof" => reduce 197
		"++" => reduce 197
		"--" => reduce 197
		"+" => reduce 197
		"-" => reduce 197
		"~" => reduce 197
		"!" => reduce 197
		";" => reduce 197
		"var" => reduce 197
		"}" => reduce 197
		"else" => reduce 197
		'$end => reduce 197
		"case" => reduce 197
		"default" => reduce 197

320:	IterationStatement => "for" "(" "var" VariableDeclarationNoIn "in" . Expression ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 367

321:	InitializerNoIn => "=" . AssignmentExpressionNoIn ("," ";" "in")
	AssignmentExpressionNoIn => . ConditionalExpressionNoIn
	AssignmentExpressionNoIn => . LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn "?" AssignmentExpressionNoIn ":" AssignmentExpressionNoIn
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpressionNoIn => . LogicalANDExpressionNoIn
	LogicalORExpressionNoIn => . LogicalORExpressionNoIn "||" LogicalANDExpressionNoIn
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpressionNoIn => . BitwiseORExpressionNoIn
	LogicalANDExpressionNoIn => . LogicalANDExpressionNoIn "&&" BitwiseORExpressionNoIn
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpressionNoIn => . BitwiseXORExpressionNoIn
	BitwiseORExpressionNoIn => . BitwiseORExpressionNoIn "|" BitwiseXORExpressionNoIn
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpressionNoIn => . BitwiseANDExpressionNoIn
	BitwiseXORExpressionNoIn => . BitwiseXORExpressionNoIn "^" BitwiseANDExpressionNoIn
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpressionNoIn => . EqualityExpressionNoIn
	BitwiseANDExpressionNoIn => . BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn
	EqualityExpressionNoIn => . RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "==" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!=" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "===" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!==" RelationalExpressionNoIn
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 235
		EqualityExpressionNoIn => shift 236
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpressionNoIn => shift 237
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpressionNoIn => shift 238
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpressionNoIn => shift 239
		PrimaryExpression => shift 37
		LogicalANDExpressionNoIn => shift 240
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpressionNoIn => shift 241
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 339
		ConditionalExpressionNoIn => shift 243
		AssignmentExpressionNoIn => shift 366

322:	VariableDeclarationNoIn => Identifier InitializerNoIn . ("," ";" "in")
		"in" => reduce 168
		";" => reduce 168
		"," => reduce 168

323:	IterationStatement => "for" "(" "var" VariableDeclarationListNoIn ";" . OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	OptExprStmt => . ";"
	OptExprStmt => . Expression ";"
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 265
		";" => shift 266
		OptExprStmt => shift 365

324:	VariableDeclarationListNoIn => VariableDeclarationListNoIn "," . VariableDeclarationNoIn ("," ";")
	VariableDeclarationNoIn => . Identifier InitializerNoIn
	VariableDeclarationNoIn => . Identifier
	Identifier => . '$ident
		'$ident => shift 47
		Identifier => shift 288
		VariableDeclarationNoIn => shift 364

325:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	RelationalExpressionNoIn => RelationalExpressionNoIn "instanceof" ShiftExpression . ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 89
		";" => reduce 89
		"instanceof" => reduce 89
		">=" => reduce 89
		"<=" => reduce 89
		">" => reduce 89
		"<" => reduce 89
		"==" => reduce 89
		"!=" => reduce 89
		"===" => reduce 89
		"!==" => reduce 89
		"&" => reduce 89
		"^" => reduce 89
		"|" => reduce 89
		"&&" => reduce 89
		"||" => reduce 89
		"," => reduce 89
		":" => reduce 89
		"in" => reduce 89

326:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	RelationalExpressionNoIn => RelationalExpressionNoIn ">=" ShiftExpression . ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 88
		";" => reduce 88
		"instanceof" => reduce 88
		">=" => reduce 88
		"<=" => reduce 88
		">" => reduce 88
		"<" => reduce 88
		"==" => reduce 88
		"!=" => reduce 88
		"===" => reduce 88
		"!==" => reduce 88
		"&" => reduce 88
		"^" => reduce 88
		"|" => reduce 88
		"&&" => reduce 88
		"||" => reduce 88
		"," => reduce 88
		":" => reduce 88
		"in" => reduce 88

327:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	RelationalExpressionNoIn => RelationalExpressionNoIn "<=" ShiftExpression . ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 87
		";" => reduce 87
		"instanceof" => reduce 87
		">=" => reduce 87
		"<=" => reduce 87
		">" => reduce 87
		"<" => reduce 87
		"==" => reduce 87
		"!=" => reduce 87
		"===" => reduce 87
		"!==" => reduce 87
		"&" => reduce 87
		"^" => reduce 87
		"|" => reduce 87
		"&&" => reduce 87
		"||" => reduce 87
		"," => reduce 87
		":" => reduce 87
		"in" => reduce 87

328:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	RelationalExpressionNoIn => RelationalExpressionNoIn ">" ShiftExpression . ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 86
		";" => reduce 86
		"instanceof" => reduce 86
		">=" => reduce 86
		"<=" => reduce 86
		">" => reduce 86
		"<" => reduce 86
		"==" => reduce 86
		"!=" => reduce 86
		"===" => reduce 86
		"!==" => reduce 86
		"&" => reduce 86
		"^" => reduce 86
		"|" => reduce 86
		"&&" => reduce 86
		"||" => reduce 86
		"," => reduce 86
		":" => reduce 86
		"in" => reduce 86

329:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	RelationalExpressionNoIn => RelationalExpressionNoIn "<" ShiftExpression . ("in" ":" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 158
		">>" => shift 159
		">>>" => shift 160
		"?" => reduce 85
		";" => reduce 85
		"instanceof" => reduce 85
		">=" => reduce 85
		"<=" => reduce 85
		">" => reduce 85
		"<" => reduce 85
		"==" => reduce 85
		"!=" => reduce 85
		"===" => reduce 85
		"!==" => reduce 85
		"&" => reduce 85
		"^" => reduce 85
		"|" => reduce 85
		"&&" => reduce 85
		"||" => reduce 85
		"," => reduce 85
		":" => reduce 85
		"in" => reduce 85

330:	RelationalExpressionNoIn => RelationalExpressionNoIn . "instanceof" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . ">=" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . "<=" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . ">" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . "<" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	EqualityExpressionNoIn => EqualityExpressionNoIn "!==" RelationalExpressionNoIn . ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 282
		">" => shift 283
		"<=" => shift 284
		">=" => shift 285
		"instanceof" => shift 286
		";" => reduce 99
		"?" => reduce 99
		"," => reduce 99
		"||" => reduce 99
		"&&" => reduce 99
		"|" => reduce 99
		"^" => reduce 99
		"&" => reduce 99
		"!==" => reduce 99
		"===" => reduce 99
		"!=" => reduce 99
		"==" => reduce 99
		":" => reduce 99
		"in" => reduce 99

331:	RelationalExpressionNoIn => RelationalExpressionNoIn . "instanceof" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . ">=" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . "<=" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . ">" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . "<" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	EqualityExpressionNoIn => EqualityExpressionNoIn "===" RelationalExpressionNoIn . ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 282
		">" => shift 283
		"<=" => shift 284
		">=" => shift 285
		"instanceof" => shift 286
		";" => reduce 98
		"?" => reduce 98
		"," => reduce 98
		"||" => reduce 98
		"&&" => reduce 98
		"|" => reduce 98
		"^" => reduce 98
		"&" => reduce 98
		"!==" => reduce 98
		"===" => reduce 98
		"!=" => reduce 98
		"==" => reduce 98
		":" => reduce 98
		"in" => reduce 98

332:	RelationalExpressionNoIn => RelationalExpressionNoIn . "instanceof" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . ">=" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . "<=" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . ">" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . "<" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	EqualityExpressionNoIn => EqualityExpressionNoIn "!=" RelationalExpressionNoIn . ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 282
		">" => shift 283
		"<=" => shift 284
		">=" => shift 285
		"instanceof" => shift 286
		";" => reduce 97
		"?" => reduce 97
		"," => reduce 97
		"||" => reduce 97
		"&&" => reduce 97
		"|" => reduce 97
		"^" => reduce 97
		"&" => reduce 97
		"!==" => reduce 97
		"===" => reduce 97
		"!=" => reduce 97
		"==" => reduce 97
		":" => reduce 97
		"in" => reduce 97

333:	RelationalExpressionNoIn => RelationalExpressionNoIn . "instanceof" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . ">=" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . "<=" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . ">" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpressionNoIn => RelationalExpressionNoIn . "<" ShiftExpression ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	EqualityExpressionNoIn => EqualityExpressionNoIn "==" RelationalExpressionNoIn . ("in" ":" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 282
		">" => shift 283
		"<=" => shift 284
		">=" => shift 285
		"instanceof" => shift 286
		";" => reduce 96
		"?" => reduce 96
		"," => reduce 96
		"||" => reduce 96
		"&&" => reduce 96
		"|" => reduce 96
		"^" => reduce 96
		"&" => reduce 96
		"!==" => reduce 96
		"===" => reduce 96
		"!=" => reduce 96
		"==" => reduce 96
		":" => reduce 96
		"in" => reduce 96

334:	EqualityExpressionNoIn => EqualityExpressionNoIn . "!==" RelationalExpressionNoIn ("in" ":" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	EqualityExpressionNoIn => EqualityExpressionNoIn . "===" RelationalExpressionNoIn ("in" ":" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	EqualityExpressionNoIn => EqualityExpressionNoIn . "!=" RelationalExpressionNoIn ("in" ":" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	EqualityExpressionNoIn => EqualityExpressionNoIn . "==" RelationalExpressionNoIn ("in" ":" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	BitwiseANDExpressionNoIn => BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn . ("in" ":" "," "||" "&&" "|" "^" "&" ";" "?")
		"==" => shift 278
		"!=" => shift 279
		"===" => shift 280
		"!==" => shift 281
		"?" => reduce 103
		";" => reduce 103
		"&" => reduce 103
		"^" => reduce 103
		"|" => reduce 103
		"&&" => reduce 103
		"||" => reduce 103
		"," => reduce 103
		":" => reduce 103
		"in" => reduce 103

335:	BitwiseANDExpressionNoIn => BitwiseANDExpressionNoIn . "&" EqualityExpressionNoIn ("in" ":" "^" "|" "&&" "||" "," "?" ";" "&")
	BitwiseXORExpressionNoIn => BitwiseXORExpressionNoIn "^" BitwiseANDExpressionNoIn . ("in" ":" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 277
		";" => reduce 107
		"?" => reduce 107
		"," => reduce 107
		"||" => reduce 107
		"&&" => reduce 107
		"|" => reduce 107
		"^" => reduce 107
		":" => reduce 107
		"in" => reduce 107

336:	BitwiseXORExpressionNoIn => BitwiseXORExpressionNoIn . "^" BitwiseANDExpressionNoIn ("in" ":" "," "||" "&&" "|" ";" "?" "^")
	BitwiseORExpressionNoIn => BitwiseORExpressionNoIn "|" BitwiseXORExpressionNoIn . ("in" ":" "," "||" "&&" "|" ";" "?")
		"^" => shift 276
		"?" => reduce 111
		";" => reduce 111
		"|" => reduce 111
		"&&" => reduce 111
		"||" => reduce 111
		"," => reduce 111
		":" => reduce 111
		"in" => reduce 111

337:	BitwiseORExpressionNoIn => BitwiseORExpressionNoIn . "|" BitwiseXORExpressionNoIn ("in" ":" "&&" "||" "," "?" ";" "|")
	LogicalANDExpressionNoIn => LogicalANDExpressionNoIn "&&" BitwiseORExpressionNoIn . ("in" ":" "&&" "||" "," "?" ";")
		"|" => shift 275
		";" => reduce 115
		"?" => reduce 115
		"," => reduce 115
		"||" => reduce 115
		"&&" => reduce 115
		":" => reduce 115
		"in" => reduce 115

338:	LogicalANDExpressionNoIn => LogicalANDExpressionNoIn . "&&" BitwiseORExpressionNoIn ("in" ":" "," "||" ";" "?" "&&")
	LogicalORExpressionNoIn => LogicalORExpressionNoIn "||" LogicalANDExpressionNoIn . ("in" ":" "," "||" ";" "?")
		"&&" => shift 274
		"?" => reduce 119
		";" => reduce 119
		"||" => reduce 119
		"," => reduce 119
		":" => reduce 119
		"in" => reduce 119

339:	PostfixExpression => LeftHandSideExpression . $P2 "--" ("in" "," ";" ":" "||" "&&" "|" "^" "&" "==" "!=" "===" "!==" "instanceof" ">=" "<=" ">" "<" "<<" ">>" ">>>" "-" "+" "*" "/" "%" "?")
	$P2 => .
	PostfixExpression => LeftHandSideExpression . $P1 "++" ("in" "," ";" ":" "||" "&&" "|" "^" "&" "==" "!=" "===" "!==" "instanceof" ">=" "<=" ">" "<" "<<" ">>" ">>>" "-" "+" "*" "/" "%" "?")
	$P1 => .
	PostfixExpression => LeftHandSideExpression . ("in" "," ";" ":" "||" "&&" "|" "^" "&" "==" "!=" "===" "!==" "instanceof" ">=" "<=" ">" "<" "<<" ">>" ">>>" "-" "+" "*" "/" "%" "?")
	AssignmentExpressionNoIn => LeftHandSideExpression . AssignmentOperator AssignmentExpressionNoIn ("in" "," ";" ":")
	AssignmentOperator => . "="
	AssignmentOperator => . "*="
	AssignmentOperator => . "/="
	AssignmentOperator => . "%="
	AssignmentOperator => . "+="
	AssignmentOperator => . "-="
	AssignmentOperator => . "<<="
	AssignmentOperator => . ">>="
	AssignmentOperator => . ">>>="
	AssignmentOperator => . "&="
	AssignmentOperator => . "^="
	AssignmentOperator => . "|="
		"|=" => shift 105
		"^=" => shift 106
		"&=" => shift 107
		">>>=" => shift 108
		">>=" => shift 109
		"<<=" => shift 110
		"-=" => shift 111
		"+=" => shift 112
		"%=" => shift 113
		"/=" => shift 114
		"*=" => shift 115
		"=" => shift 116
		AssignmentOperator => shift 270
		$P1 => shift 118
		$P2 => shift 119
		"?" => reduce 51
		"%" => reduce 51
		"/" => reduce 51
		"*" => reduce 51
		"+" => reduce 51
		"-" => reduce 51
		">>>" => reduce 51
		">>" => reduce 51
		"<<" => reduce 51
		"<" => reduce 51
		">" => reduce 51
		"<=" => reduce 51
		">=" => reduce 51
		"instanceof" => reduce 51
		"!==" => reduce 51
		"===" => reduce 51
		"!=" => reduce 51
		"==" => reduce 51
		"&" => reduce 51
		"^" => reduce 51
		"|" => reduce 51
		"&&" => reduce 51
		"||" => reduce 51
		":" => reduce 51
		";" => reduce 51
		"," => reduce 51
		"in" => reduce 51
		"++" => reduce 54
		"--" => reduce 55

340:	ConditionalExpressionNoIn => LogicalORExpressionNoIn "?" AssignmentExpressionNoIn . ":" AssignmentExpressionNoIn ("in" ":" "," ";")
		":" => shift 363

341:	Expression => Expression . "," AssignmentExpression ("," ")")
	IterationStatement => "for" "(" LeftHandSideExpression "in" Expression . ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 362
		"," => shift 88

342:	AssignmentExpressionNoIn => LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn . ("in" ":" "," ";")
		";" => reduce 127
		"," => reduce 127
		":" => reduce 127
		"in" => reduce 127

343:	ExpressionNoIn => ExpressionNoIn "," AssignmentExpressionNoIn . ("," ";")
		";" => reduce 143
		"," => reduce 143

344:	Expression => Expression . "," AssignmentExpression ("," ")")
	OptExprClose => Expression . ")" ("try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		")" => shift 361
		"," => shift 88

345:	OptExprClose => ";" . ("try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 186
		";" => reduce 186
		"!" => reduce 186
		"~" => reduce 186
		"-" => reduce 186
		"+" => reduce 186
		"--" => reduce 186
		"++" => reduce 186
		"typeof" => reduce 186
		"void" => reduce 186
		"delete" => reduce 186
		"null" => reduce 186
		"false" => reduce 186
		"true" => reduce 186
		'$fl => reduce 186
		'$fx => reduce 186
		'$string => reduce 186
		"[" => reduce 186
		"{" => reduce 186
		"(" => reduce 186
		"this" => reduce 186
		"new" => reduce 186
		"if" => reduce 186
		"for" => reduce 186
		"while" => reduce 186
		"do" => reduce 186
		"continue" => reduce 186
		"break" => reduce 186
		"return" => reduce 186
		"with" => reduce 186
		'$ident => reduce 186
		"switch" => reduce 186
		"throw" => reduce 186
		"try" => reduce 186

346:	IterationStatement => "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose . Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 360

347:	OptExprStmt => Expression ";" . (";" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		"!" => reduce 185
		"~" => reduce 185
		"-" => reduce 185
		"+" => reduce 185
		"--" => reduce 185
		"++" => reduce 185
		"typeof" => reduce 185
		"void" => reduce 185
		"delete" => reduce 185
		'$ident => reduce 185
		"null" => reduce 185
		"false" => reduce 185
		"true" => reduce 185
		'$fl => reduce 185
		'$fx => reduce 185
		'$string => reduce 185
		"[" => reduce 185
		"{" => reduce 185
		"(" => reduce 185
		"this" => reduce 185
		"new" => reduce 185
		";" => reduce 185

348:	IterationStatement => "while" "(" Expression ")" Statement . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 177
		"try" => reduce 177
		"throw" => reduce 177
		"switch" => reduce 177
		'$ident => reduce 177
		"with" => reduce 177
		"return" => reduce 177
		"break" => reduce 177
		"continue" => reduce 177
		"do" => reduce 177
		"while" => reduce 177
		"for" => reduce 177
		"if" => reduce 177
		"new" => reduce 177
		"this" => reduce 177
		"(" => reduce 177
		"{" => reduce 177
		"[" => reduce 177
		'$string => reduce 177
		'$fx => reduce 177
		'$fl => reduce 177
		"true" => reduce 177
		"false" => reduce 177
		"null" => reduce 177
		"delete" => reduce 177
		"void" => reduce 177
		"typeof" => reduce 177
		"++" => reduce 177
		"--" => reduce 177
		"+" => reduce 177
		"-" => reduce 177
		"~" => reduce 177
		"!" => reduce 177
		";" => reduce 177
		"var" => reduce 177
		"}" => reduce 177
		"else" => reduce 177
		'$end => reduce 177
		"case" => reduce 177
		"default" => reduce 177

349:	Expression => Expression . "," AssignmentExpression ("," ")")
	IterationStatement => "do" Statement "while" "(" Expression . ")" ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 359
		"," => shift 88

350:	IfStatement => "if" "(" Expression ")" Statement . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IfStatement => "if" "(" Expression ")" Statement . "else" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"else" => shift 358
		"function" => reduce 175
		"try" => reduce 175
		"throw" => reduce 175
		"switch" => reduce 175
		'$ident => reduce 175
		"with" => reduce 175
		"return" => reduce 175
		"break" => reduce 175
		"continue" => reduce 175
		"do" => reduce 175
		"while" => reduce 175
		"for" => reduce 175
		"if" => reduce 175
		"new" => reduce 175
		"this" => reduce 175
		"(" => reduce 175
		"{" => reduce 175
		"[" => reduce 175
		'$string => reduce 175
		'$fx => reduce 175
		'$fl => reduce 175
		"true" => reduce 175
		"false" => reduce 175
		"null" => reduce 175
		"delete" => reduce 175
		"void" => reduce 175
		"typeof" => reduce 175
		"++" => reduce 175
		"--" => reduce 175
		"+" => reduce 175
		"-" => reduce 175
		"~" => reduce 175
		"!" => reduce 175
		";" => reduce 175
		"var" => reduce 175
		"}" => reduce 175
		'$end => reduce 175
		"case" => reduce 175
		"default" => reduce 175
		["else" => reduce 175] REMOVED by precedence

351:	FunctionDeclaration => "function" Identifier "(" ")" "{" . FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
	FunctionBody => . SourceElements
	SourceElements => . SourceElement
	SourceElements => . SourceElements SourceElement
	SourceElement => . Statement
	SourceElement => . FunctionDeclaration
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	FunctionDeclaration => . "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
	FunctionDeclaration => . "function" Identifier "(" ")" "{" FunctionBody "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		"function" => shift 63
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		FunctionDeclaration => shift 77
		Statement => shift 78
		SourceElement => shift 79
		SourceElements => shift 356
		FunctionBody => shift 357

352:	FunctionDeclaration => "function" Identifier "(" FormalParameterList ")" . "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"{" => shift 355

353:	FormalParameterList => FormalParameterList "," . Identifier ("," ")")
	Identifier => . '$ident
		'$ident => shift 47
		Identifier => shift 354

354:	FormalParameterList => FormalParameterList "," Identifier . ("," ")")
		")" => reduce 226
		"," => reduce 226

355:	FunctionDeclaration => "function" Identifier "(" FormalParameterList ")" "{" . FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
	FunctionBody => . SourceElements
	SourceElements => . SourceElement
	SourceElements => . SourceElements SourceElement
	SourceElement => . Statement
	SourceElement => . FunctionDeclaration
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	FunctionDeclaration => . "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
	FunctionDeclaration => . "function" Identifier "(" ")" "{" FunctionBody "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		"function" => shift 63
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		FunctionDeclaration => shift 77
		Statement => shift 78
		SourceElement => shift 79
		SourceElements => shift 356
		FunctionBody => shift 391

356:	SourceElements => SourceElements . SourceElement ("function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "}")
	SourceElement => . Statement
	SourceElement => . FunctionDeclaration
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	FunctionDeclaration => . "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
	FunctionDeclaration => . "function" Identifier "(" ")" "{" FunctionBody "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	FunctionBody => SourceElements . ("}")
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		"function" => shift 63
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		FunctionDeclaration => shift 77
		Statement => shift 78
		SourceElement => shift 82
		"}" => reduce 227

357:	FunctionDeclaration => "function" Identifier "(" ")" "{" FunctionBody . "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"}" => shift 390

358:	IfStatement => "if" "(" Expression ")" Statement "else" . Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 389

359:	IterationStatement => "do" Statement "while" "(" Expression ")" . ";" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 388

360:	IterationStatement => "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 178
		"try" => reduce 178
		"throw" => reduce 178
		"switch" => reduce 178
		'$ident => reduce 178
		"with" => reduce 178
		"return" => reduce 178
		"break" => reduce 178
		"continue" => reduce 178
		"do" => reduce 178
		"while" => reduce 178
		"for" => reduce 178
		"if" => reduce 178
		"new" => reduce 178
		"this" => reduce 178
		"(" => reduce 178
		"{" => reduce 178
		"[" => reduce 178
		'$string => reduce 178
		'$fx => reduce 178
		'$fl => reduce 178
		"true" => reduce 178
		"false" => reduce 178
		"null" => reduce 178
		"delete" => reduce 178
		"void" => reduce 178
		"typeof" => reduce 178
		"++" => reduce 178
		"--" => reduce 178
		"+" => reduce 178
		"-" => reduce 178
		"~" => reduce 178
		"!" => reduce 178
		";" => reduce 178
		"var" => reduce 178
		"}" => reduce 178
		"else" => reduce 178
		'$end => reduce 178
		"case" => reduce 178
		"default" => reduce 178

361:	OptExprClose => Expression ")" . ("try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 187
		";" => reduce 187
		"!" => reduce 187
		"~" => reduce 187
		"-" => reduce 187
		"+" => reduce 187
		"--" => reduce 187
		"++" => reduce 187
		"typeof" => reduce 187
		"void" => reduce 187
		"delete" => reduce 187
		"null" => reduce 187
		"false" => reduce 187
		"true" => reduce 187
		'$fl => reduce 187
		'$fx => reduce 187
		'$string => reduce 187
		"[" => reduce 187
		"{" => reduce 187
		"(" => reduce 187
		"this" => reduce 187
		"new" => reduce 187
		"if" => reduce 187
		"for" => reduce 187
		"while" => reduce 187
		"do" => reduce 187
		"continue" => reduce 187
		"break" => reduce 187
		"return" => reduce 187
		"with" => reduce 187
		'$ident => reduce 187
		"switch" => reduce 187
		"throw" => reduce 187
		"try" => reduce 187

362:	IterationStatement => "for" "(" LeftHandSideExpression "in" Expression ")" . Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 387

363:	ConditionalExpressionNoIn => LogicalORExpressionNoIn "?" AssignmentExpressionNoIn ":" . AssignmentExpressionNoIn ("in" ":" "," ";")
	AssignmentExpressionNoIn => . ConditionalExpressionNoIn
	AssignmentExpressionNoIn => . LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn
	ConditionalExpressionNoIn => . LogicalORExpressionNoIn "?" AssignmentExpressionNoIn ":" AssignmentExpressionNoIn
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpressionNoIn => . LogicalANDExpressionNoIn
	LogicalORExpressionNoIn => . LogicalORExpressionNoIn "||" LogicalANDExpressionNoIn
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpressionNoIn => . BitwiseORExpressionNoIn
	LogicalANDExpressionNoIn => . LogicalANDExpressionNoIn "&&" BitwiseORExpressionNoIn
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpressionNoIn => . BitwiseXORExpressionNoIn
	BitwiseORExpressionNoIn => . BitwiseORExpressionNoIn "|" BitwiseXORExpressionNoIn
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpressionNoIn => . BitwiseANDExpressionNoIn
	BitwiseXORExpressionNoIn => . BitwiseXORExpressionNoIn "^" BitwiseANDExpressionNoIn
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpressionNoIn => . EqualityExpressionNoIn
	BitwiseANDExpressionNoIn => . BitwiseANDExpressionNoIn "&" EqualityExpressionNoIn
	EqualityExpressionNoIn => . RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "==" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!=" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "===" RelationalExpressionNoIn
	EqualityExpressionNoIn => . EqualityExpressionNoIn "!==" RelationalExpressionNoIn
	RelationalExpressionNoIn => . ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "<=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn ">=" ShiftExpression
	RelationalExpressionNoIn => . RelationalExpressionNoIn "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 234
		RelationalExpressionNoIn => shift 235
		EqualityExpressionNoIn => shift 236
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpressionNoIn => shift 237
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpressionNoIn => shift 238
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpressionNoIn => shift 239
		PrimaryExpression => shift 37
		LogicalANDExpressionNoIn => shift 240
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpressionNoIn => shift 241
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 339
		ConditionalExpressionNoIn => shift 243
		AssignmentExpressionNoIn => shift 386

364:	VariableDeclarationListNoIn => VariableDeclarationListNoIn "," VariableDeclarationNoIn . ("," ";")
		";" => reduce 165
		"," => reduce 165

365:	IterationStatement => "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt . OptExprClose Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	OptExprClose => . ";"
	OptExprClose => . Expression ")"
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 344
		";" => shift 345
		OptExprClose => shift 385

366:	InitializerNoIn => "=" AssignmentExpressionNoIn . ("," ";" "in")
		"in" => reduce 171
		";" => reduce 171
		"," => reduce 171

367:	Expression => Expression . "," AssignmentExpression ("," ")")
	IterationStatement => "for" "(" "var" VariableDeclarationNoIn "in" Expression . ")" Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 384
		"," => shift 88

368:	CaseBlock => "{" "}" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 200
		"try" => reduce 200
		"throw" => reduce 200
		"switch" => reduce 200
		'$ident => reduce 200
		"with" => reduce 200
		"return" => reduce 200
		"break" => reduce 200
		"continue" => reduce 200
		"do" => reduce 200
		"while" => reduce 200
		"for" => reduce 200
		"if" => reduce 200
		"new" => reduce 200
		"this" => reduce 200
		"(" => reduce 200
		"{" => reduce 200
		"[" => reduce 200
		'$string => reduce 200
		'$fx => reduce 200
		'$fl => reduce 200
		"true" => reduce 200
		"false" => reduce 200
		"null" => reduce 200
		"delete" => reduce 200
		"void" => reduce 200
		"typeof" => reduce 200
		"++" => reduce 200
		"--" => reduce 200
		"+" => reduce 200
		"-" => reduce 200
		"~" => reduce 200
		"!" => reduce 200
		";" => reduce 200
		"var" => reduce 200
		"}" => reduce 200
		"else" => reduce 200
		'$end => reduce 200
		"case" => reduce 200
		"default" => reduce 200

369:	CaseClause => "case" . Expression ":" ("}" "case" "default")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	CaseClause => "case" . Expression ":" StatementList ("}" "case" "default")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		'$ident => shift 47
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		Identifier => shift 130
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		Expression => shift 383

370:	CaseClauses => CaseClause . ("}" "case" "default")
		"default" => reduce 205
		"case" => reduce 205
		"}" => reduce 205

371:	CaseBlock => "{" CaseClauses . "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseBlock => "{" CaseClauses . DefaultClause CaseClauses "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	DefaultClause => . "default" ":" StatementList
	DefaultClause => . "default" ":"
	CaseClauses => CaseClauses . CaseClause ("}" "case" "default")
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" CaseClauses . DefaultClause "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	DefaultClause => . "default" ":" StatementList
	DefaultClause => . "default" ":"
		"case" => shift 369
		CaseClause => shift 380
		"default" => shift 372
		DefaultClause => shift 381
		"}" => shift 382

372:	DefaultClause => "default" . ":" ("case" "}")
	DefaultClause => "default" . ":" StatementList ("case" "}")
		":" => shift 379

373:	CaseBlock => "{" DefaultClause . CaseClauses "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseClauses => . CaseClause
	CaseClauses => . CaseClauses CaseClause
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" DefaultClause . "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"}" => shift 377
		"case" => shift 369
		CaseClause => shift 370
		CaseClauses => shift 378

374:	Catch => "catch" "(" Identifier ")" . Block ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally")
	Block => . "{" StatementList "}"
	Block => . "{" "}"
		"{" => shift 103
		Block => shift 376

375:	PropertyNameAndValueList => PropertyNameAndValueList "," PropertyName ":" AssignmentExpression . ("," "}")
		"}" => reduce 31
		"," => reduce 31

376:	Catch => "catch" "(" Identifier ")" Block . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally")
		"finally" => reduce 217
		"function" => reduce 217
		"try" => reduce 217
		"throw" => reduce 217
		"switch" => reduce 217
		'$ident => reduce 217
		"with" => reduce 217
		"return" => reduce 217
		"break" => reduce 217
		"continue" => reduce 217
		"do" => reduce 217
		"while" => reduce 217
		"for" => reduce 217
		"if" => reduce 217
		"new" => reduce 217
		"this" => reduce 217
		"(" => reduce 217
		"{" => reduce 217
		"[" => reduce 217
		'$string => reduce 217
		'$fx => reduce 217
		'$fl => reduce 217
		"true" => reduce 217
		"false" => reduce 217
		"null" => reduce 217
		"delete" => reduce 217
		"void" => reduce 217
		"typeof" => reduce 217
		"++" => reduce 217
		"--" => reduce 217
		"+" => reduce 217
		"-" => reduce 217
		"~" => reduce 217
		"!" => reduce 217
		";" => reduce 217
		"var" => reduce 217
		"}" => reduce 217
		"else" => reduce 217
		'$end => reduce 217
		"case" => reduce 217
		"default" => reduce 217

377:	CaseBlock => "{" DefaultClause "}" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 204
		"try" => reduce 204
		"throw" => reduce 204
		"switch" => reduce 204
		'$ident => reduce 204
		"with" => reduce 204
		"return" => reduce 204
		"break" => reduce 204
		"continue" => reduce 204
		"do" => reduce 204
		"while" => reduce 204
		"for" => reduce 204
		"if" => reduce 204
		"new" => reduce 204
		"this" => reduce 204
		"(" => reduce 204
		"{" => reduce 204
		"[" => reduce 204
		'$string => reduce 204
		'$fx => reduce 204
		'$fl => reduce 204
		"true" => reduce 204
		"false" => reduce 204
		"null" => reduce 204
		"delete" => reduce 204
		"void" => reduce 204
		"typeof" => reduce 204
		"++" => reduce 204
		"--" => reduce 204
		"+" => reduce 204
		"-" => reduce 204
		"~" => reduce 204
		"!" => reduce 204
		";" => reduce 204
		"var" => reduce 204
		"}" => reduce 204
		"else" => reduce 204
		'$end => reduce 204
		"case" => reduce 204
		"default" => reduce 204

378:	CaseClauses => CaseClauses . CaseClause ("case" "}")
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" DefaultClause CaseClauses . "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"}" => shift 399
		"case" => shift 369
		CaseClause => shift 380

379:	DefaultClause => "default" ":" . StatementList ("case" "}")
	StatementList => . Statement
	StatementList => . StatementList Statement
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	DefaultClause => "default" ":" . ("case" "}")
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 223
		StatementList => shift 398
		"}" => reduce 210
		"case" => reduce 210

380:	CaseClauses => CaseClauses CaseClause . ("}" "case" "default")
		"default" => reduce 206
		"case" => reduce 206
		"}" => reduce 206

381:	CaseBlock => "{" CaseClauses DefaultClause . "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseBlock => "{" CaseClauses DefaultClause . CaseClauses "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseClauses => . CaseClause
	CaseClauses => . CaseClauses CaseClause
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
		"case" => shift 369
		CaseClause => shift 370
		CaseClauses => shift 396
		"}" => shift 397

382:	CaseBlock => "{" CaseClauses "}" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 199
		"try" => reduce 199
		"throw" => reduce 199
		"switch" => reduce 199
		'$ident => reduce 199
		"with" => reduce 199
		"return" => reduce 199
		"break" => reduce 199
		"continue" => reduce 199
		"do" => reduce 199
		"while" => reduce 199
		"for" => reduce 199
		"if" => reduce 199
		"new" => reduce 199
		"this" => reduce 199
		"(" => reduce 199
		"{" => reduce 199
		"[" => reduce 199
		'$string => reduce 199
		'$fx => reduce 199
		'$fl => reduce 199
		"true" => reduce 199
		"false" => reduce 199
		"null" => reduce 199
		"delete" => reduce 199
		"void" => reduce 199
		"typeof" => reduce 199
		"++" => reduce 199
		"--" => reduce 199
		"+" => reduce 199
		"-" => reduce 199
		"~" => reduce 199
		"!" => reduce 199
		";" => reduce 199
		"var" => reduce 199
		"}" => reduce 199
		"else" => reduce 199
		'$end => reduce 199
		"case" => reduce 199
		"default" => reduce 199

383:	CaseClause => "case" Expression . ":" StatementList ("}" "case" "default")
	Expression => Expression . "," AssignmentExpression ("," ":")
	CaseClause => "case" Expression . ":" ("}" "case" "default")
		"," => shift 88
		":" => shift 395

384:	IterationStatement => "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" . Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 394

385:	IterationStatement => "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose . Statement ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 393

386:	ConditionalExpressionNoIn => LogicalORExpressionNoIn "?" AssignmentExpressionNoIn ":" AssignmentExpressionNoIn . ("in" ":" "," ";")
		";" => reduce 123
		"," => reduce 123
		":" => reduce 123
		"in" => reduce 123

387:	IterationStatement => "for" "(" LeftHandSideExpression "in" Expression ")" Statement . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 180
		"try" => reduce 180
		"throw" => reduce 180
		"switch" => reduce 180
		'$ident => reduce 180
		"with" => reduce 180
		"return" => reduce 180
		"break" => reduce 180
		"continue" => reduce 180
		"do" => reduce 180
		"while" => reduce 180
		"for" => reduce 180
		"if" => reduce 180
		"new" => reduce 180
		"this" => reduce 180
		"(" => reduce 180
		"{" => reduce 180
		"[" => reduce 180
		'$string => reduce 180
		'$fx => reduce 180
		'$fl => reduce 180
		"true" => reduce 180
		"false" => reduce 180
		"null" => reduce 180
		"delete" => reduce 180
		"void" => reduce 180
		"typeof" => reduce 180
		"++" => reduce 180
		"--" => reduce 180
		"+" => reduce 180
		"-" => reduce 180
		"~" => reduce 180
		"!" => reduce 180
		";" => reduce 180
		"var" => reduce 180
		"}" => reduce 180
		"else" => reduce 180
		'$end => reduce 180
		"case" => reduce 180
		"default" => reduce 180

388:	IterationStatement => "do" Statement "while" "(" Expression ")" ";" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 176
		"try" => reduce 176
		"throw" => reduce 176
		"switch" => reduce 176
		'$ident => reduce 176
		"with" => reduce 176
		"return" => reduce 176
		"break" => reduce 176
		"continue" => reduce 176
		"do" => reduce 176
		"while" => reduce 176
		"for" => reduce 176
		"if" => reduce 176
		"new" => reduce 176
		"this" => reduce 176
		"(" => reduce 176
		"{" => reduce 176
		"[" => reduce 176
		'$string => reduce 176
		'$fx => reduce 176
		'$fl => reduce 176
		"true" => reduce 176
		"false" => reduce 176
		"null" => reduce 176
		"delete" => reduce 176
		"void" => reduce 176
		"typeof" => reduce 176
		"++" => reduce 176
		"--" => reduce 176
		"+" => reduce 176
		"-" => reduce 176
		"~" => reduce 176
		"!" => reduce 176
		";" => reduce 176
		"var" => reduce 176
		"}" => reduce 176
		"else" => reduce 176
		'$end => reduce 176
		"case" => reduce 176
		"default" => reduce 176

389:	IfStatement => "if" "(" Expression ")" Statement "else" Statement . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 174
		"try" => reduce 174
		"throw" => reduce 174
		"switch" => reduce 174
		'$ident => reduce 174
		"with" => reduce 174
		"return" => reduce 174
		"break" => reduce 174
		"continue" => reduce 174
		"do" => reduce 174
		"while" => reduce 174
		"for" => reduce 174
		"if" => reduce 174
		"new" => reduce 174
		"this" => reduce 174
		"(" => reduce 174
		"{" => reduce 174
		"[" => reduce 174
		'$string => reduce 174
		'$fx => reduce 174
		'$fl => reduce 174
		"true" => reduce 174
		"false" => reduce 174
		"null" => reduce 174
		"delete" => reduce 174
		"void" => reduce 174
		"typeof" => reduce 174
		"++" => reduce 174
		"--" => reduce 174
		"+" => reduce 174
		"-" => reduce 174
		"~" => reduce 174
		"!" => reduce 174
		";" => reduce 174
		"var" => reduce 174
		"}" => reduce 174
		"else" => reduce 174
		'$end => reduce 174
		"case" => reduce 174
		"default" => reduce 174

390:	FunctionDeclaration => "function" Identifier "(" ")" "{" FunctionBody "}" . ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 220
		";" => reduce 220
		"!" => reduce 220
		"~" => reduce 220
		"-" => reduce 220
		"+" => reduce 220
		"--" => reduce 220
		"++" => reduce 220
		"typeof" => reduce 220
		"void" => reduce 220
		"delete" => reduce 220
		"null" => reduce 220
		"false" => reduce 220
		"true" => reduce 220
		'$fl => reduce 220
		'$fx => reduce 220
		'$string => reduce 220
		"[" => reduce 220
		"{" => reduce 220
		"(" => reduce 220
		"this" => reduce 220
		"new" => reduce 220
		"if" => reduce 220
		"for" => reduce 220
		"while" => reduce 220
		"do" => reduce 220
		"continue" => reduce 220
		"break" => reduce 220
		"return" => reduce 220
		"with" => reduce 220
		'$ident => reduce 220
		"switch" => reduce 220
		"throw" => reduce 220
		"try" => reduce 220
		"function" => reduce 220
		"}" => reduce 220
		'$end => reduce 220

391:	FunctionDeclaration => "function" Identifier "(" FormalParameterList ")" "{" FunctionBody . "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"}" => shift 392

392:	FunctionDeclaration => "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}" . ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
		"var" => reduce 219
		";" => reduce 219
		"!" => reduce 219
		"~" => reduce 219
		"-" => reduce 219
		"+" => reduce 219
		"--" => reduce 219
		"++" => reduce 219
		"typeof" => reduce 219
		"void" => reduce 219
		"delete" => reduce 219
		"null" => reduce 219
		"false" => reduce 219
		"true" => reduce 219
		'$fl => reduce 219
		'$fx => reduce 219
		'$string => reduce 219
		"[" => reduce 219
		"{" => reduce 219
		"(" => reduce 219
		"this" => reduce 219
		"new" => reduce 219
		"if" => reduce 219
		"for" => reduce 219
		"while" => reduce 219
		"do" => reduce 219
		"continue" => reduce 219
		"break" => reduce 219
		"return" => reduce 219
		"with" => reduce 219
		'$ident => reduce 219
		"switch" => reduce 219
		"throw" => reduce 219
		"try" => reduce 219
		"function" => reduce 219
		"}" => reduce 219
		'$end => reduce 219

393:	IterationStatement => "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 179
		"try" => reduce 179
		"throw" => reduce 179
		"switch" => reduce 179
		'$ident => reduce 179
		"with" => reduce 179
		"return" => reduce 179
		"break" => reduce 179
		"continue" => reduce 179
		"do" => reduce 179
		"while" => reduce 179
		"for" => reduce 179
		"if" => reduce 179
		"new" => reduce 179
		"this" => reduce 179
		"(" => reduce 179
		"{" => reduce 179
		"[" => reduce 179
		'$string => reduce 179
		'$fx => reduce 179
		'$fl => reduce 179
		"true" => reduce 179
		"false" => reduce 179
		"null" => reduce 179
		"delete" => reduce 179
		"void" => reduce 179
		"typeof" => reduce 179
		"++" => reduce 179
		"--" => reduce 179
		"+" => reduce 179
		"-" => reduce 179
		"~" => reduce 179
		"!" => reduce 179
		";" => reduce 179
		"var" => reduce 179
		"}" => reduce 179
		"else" => reduce 179
		'$end => reduce 179
		"case" => reduce 179
		"default" => reduce 179

394:	IterationStatement => "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 181
		"try" => reduce 181
		"throw" => reduce 181
		"switch" => reduce 181
		'$ident => reduce 181
		"with" => reduce 181
		"return" => reduce 181
		"break" => reduce 181
		"continue" => reduce 181
		"do" => reduce 181
		"while" => reduce 181
		"for" => reduce 181
		"if" => reduce 181
		"new" => reduce 181
		"this" => reduce 181
		"(" => reduce 181
		"{" => reduce 181
		"[" => reduce 181
		'$string => reduce 181
		'$fx => reduce 181
		'$fl => reduce 181
		"true" => reduce 181
		"false" => reduce 181
		"null" => reduce 181
		"delete" => reduce 181
		"void" => reduce 181
		"typeof" => reduce 181
		"++" => reduce 181
		"--" => reduce 181
		"+" => reduce 181
		"-" => reduce 181
		"~" => reduce 181
		"!" => reduce 181
		";" => reduce 181
		"var" => reduce 181
		"}" => reduce 181
		"else" => reduce 181
		'$end => reduce 181
		"case" => reduce 181
		"default" => reduce 181

395:	CaseClause => "case" Expression ":" . ("}" "case" "default")
	CaseClause => "case" Expression ":" . StatementList ("}" "case" "default")
	StatementList => . Statement
	StatementList => . StatementList Statement
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 223
		StatementList => shift 401
		"default" => reduce 208
		"case" => reduce 208
		"}" => reduce 208

396:	CaseClauses => CaseClauses . CaseClause ("case" "}")
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" CaseClauses DefaultClause CaseClauses . "}" ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"}" => shift 400
		"case" => shift 369
		CaseClause => shift 380

397:	CaseBlock => "{" CaseClauses DefaultClause "}" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 202
		"try" => reduce 202
		"throw" => reduce 202
		"switch" => reduce 202
		'$ident => reduce 202
		"with" => reduce 202
		"return" => reduce 202
		"break" => reduce 202
		"continue" => reduce 202
		"do" => reduce 202
		"while" => reduce 202
		"for" => reduce 202
		"if" => reduce 202
		"new" => reduce 202
		"this" => reduce 202
		"(" => reduce 202
		"{" => reduce 202
		"[" => reduce 202
		'$string => reduce 202
		'$fx => reduce 202
		'$fl => reduce 202
		"true" => reduce 202
		"false" => reduce 202
		"null" => reduce 202
		"delete" => reduce 202
		"void" => reduce 202
		"typeof" => reduce 202
		"++" => reduce 202
		"--" => reduce 202
		"+" => reduce 202
		"-" => reduce 202
		"~" => reduce 202
		"!" => reduce 202
		";" => reduce 202
		"var" => reduce 202
		"}" => reduce 202
		"else" => reduce 202
		'$end => reduce 202
		"case" => reduce 202
		"default" => reduce 202

398:	StatementList => StatementList . Statement ("case" "}" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	DefaultClause => "default" ":" StatementList . ("case" "}")
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 297
		"}" => reduce 209
		"case" => reduce 209

399:	CaseBlock => "{" DefaultClause CaseClauses "}" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 203
		"try" => reduce 203
		"throw" => reduce 203
		"switch" => reduce 203
		'$ident => reduce 203
		"with" => reduce 203
		"return" => reduce 203
		"break" => reduce 203
		"continue" => reduce 203
		"do" => reduce 203
		"while" => reduce 203
		"for" => reduce 203
		"if" => reduce 203
		"new" => reduce 203
		"this" => reduce 203
		"(" => reduce 203
		"{" => reduce 203
		"[" => reduce 203
		'$string => reduce 203
		'$fx => reduce 203
		'$fl => reduce 203
		"true" => reduce 203
		"false" => reduce 203
		"null" => reduce 203
		"delete" => reduce 203
		"void" => reduce 203
		"typeof" => reduce 203
		"++" => reduce 203
		"--" => reduce 203
		"+" => reduce 203
		"-" => reduce 203
		"~" => reduce 203
		"!" => reduce 203
		";" => reduce 203
		"var" => reduce 203
		"}" => reduce 203
		"else" => reduce 203
		'$end => reduce 203
		"case" => reduce 203
		"default" => reduce 203

400:	CaseBlock => "{" CaseClauses DefaultClause CaseClauses "}" . ("default" "case" '$end "else" "}" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$fl '$fx '$string "[" "{" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"function" => reduce 201
		"try" => reduce 201
		"throw" => reduce 201
		"switch" => reduce 201
		'$ident => reduce 201
		"with" => reduce 201
		"return" => reduce 201
		"break" => reduce 201
		"continue" => reduce 201
		"do" => reduce 201
		"while" => reduce 201
		"for" => reduce 201
		"if" => reduce 201
		"new" => reduce 201
		"this" => reduce 201
		"(" => reduce 201
		"{" => reduce 201
		"[" => reduce 201
		'$string => reduce 201
		'$fx => reduce 201
		'$fl => reduce 201
		"true" => reduce 201
		"false" => reduce 201
		"null" => reduce 201
		"delete" => reduce 201
		"void" => reduce 201
		"typeof" => reduce 201
		"++" => reduce 201
		"--" => reduce 201
		"+" => reduce 201
		"-" => reduce 201
		"~" => reduce 201
		"!" => reduce 201
		";" => reduce 201
		"var" => reduce 201
		"}" => reduce 201
		"else" => reduce 201
		'$end => reduce 201
		"case" => reduce 201
		"default" => reduce 201

401:	StatementList => StatementList . Statement ("}" "case" "default" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "{" "[" '$string '$fx '$fl "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var")
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . ObjectLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	ObjectLiteral => . "{" "}"
	ObjectLiteral => . "{" PropertyNameAndValueList "}"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fx
	NumericLiteral => . '$fl
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	RelationalExpression => . RelationalExpression "in" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	CaseClause => "case" Expression ":" StatementList . ("}" "case" "default")
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$fl => shift 18
		'$fx => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"{" => shift 24
		"[" => shift 25
		StringLiteral => shift 26
		NumericLiteral => shift 27
		BooleanLiteral => shift 28
		NullLiteral => shift 29
		BitwiseXORExpression => shift 30
		"(" => shift 31
		ObjectLiteral => shift 32
		ArrayLiteral => shift 33
		Literal => shift 34
		"this" => shift 35
		BitwiseORExpression => shift 36
		PrimaryExpression => shift 37
		LogicalANDExpression => shift 38
		"new" => shift 39
		MemberExpression => shift 40
		LogicalORExpression => shift 41
		CallExpression => shift 42
		NewExpression => shift 43
		LeftHandSideExpression => shift 44
		ConditionalExpression => shift 45
		AssignmentExpression => shift 46
		'$ident => shift 47
		"try" => shift 48
		"throw" => shift 49
		Identifier => shift 50
		"switch" => shift 51
		"with" => shift 52
		"return" => shift 53
		"break" => shift 54
		"continue" => shift 55
		"for" => shift 56
		"while" => shift 57
		"do" => shift 58
		"if" => shift 59
		Expression => shift 60
		";" => shift 61
		"var" => shift 62
		TryStatement => shift 64
		ThrowStatement => shift 65
		SwitchStatement => shift 66
		LabelledStatement => shift 67
		WithStatement => shift 68
		ReturnStatement => shift 69
		BreakStatement => shift 70
		ContinueStatement => shift 71
		IterationStatement => shift 72
		IfStatement => shift 73
		ExpressionStatement => shift 74
		EmptyStatement => shift 75
		VariableStatement => shift 76
		Statement => shift 297
		"default" => reduce 207
		"case" => reduce 207
		"}" => reduce 207

