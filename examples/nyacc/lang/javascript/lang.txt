  Copyright (C) 2015 Matthew R. Wette
  
  This software is covered by the GNU GENERAL PUBLIC LICENCE, Version 3,
  or any later version published by the Free Software Foundation.  See the
  file COPYING included with the this distribution.

0 $start => Program
1 Literal => NullLiteral
2 Literal => BooleanLiteral
3 Literal => NumericLiteral
4 Literal => StringLiteral
5 NullLiteral => "null"
6 BooleanLiteral => "true"
7 BooleanLiteral => "false"
8 NumericLiteral => '$fixed
9 NumericLiteral => '$float
10 StringLiteral => '$string
11 Identifier => '$ident
12 PrimaryExpression => "this"
13 PrimaryExpression => Identifier
14 PrimaryExpression => Literal
15 PrimaryExpression => ArrayLiteral
16 PrimaryExpression => "(" Expression ")"
17 ArrayLiteral => "[" Elision "]"
18 ArrayLiteral => "[" "]"
19 ArrayLiteral => "[" ElementList "," Elision "]"
20 ArrayLiteral => "[" ElementList "," "]"
21 ElementList => Elision AssignmentExpression
22 ElementList => AssignmentExpression
23 ElementList => ElementList "," Elision AssignmentExpression
24 ElementList => ElementList "," AssignmentExpression
25 Elision => ","
26 Elision => Elision ","
27 ObjectLiteral => "{" "}"
28 ObjectLiteral => "{" PropertyNameAndValueList "}"
29 PropertyNameAndValueList => PropertyName ":" AssignmentExpression
30 PropertyNameAndValueList => PropertyNameAndValueList "," PropertyName ":" AssignmentExpression
31 PropertyName => Identifier
32 PropertyName => StringLiteral
33 PropertyName => NumericLiteral
34 MemberExpression => PrimaryExpression
35 MemberExpression => MemberExpression "[" Expression "]"
36 MemberExpression => MemberExpression "." Identifier
37 MemberExpression => "new" MemberExpression Arguments
38 NewExpression => MemberExpression
39 NewExpression => "new" NewExpression
40 CallExpression => MemberExpression Arguments
41 CallExpression => CallExpression Arguments
42 CallExpression => CallExpression "[" Expression "]"
43 CallExpression => CallExpression "." Identifier
44 Arguments => "(" ")"
45 Arguments => "(" ArgumentList ")"
46 ArgumentList => AssignmentExpression
47 ArgumentList => ArgumentList "," AssignmentExpression
48 LeftHandSideExpression => NewExpression
49 LeftHandSideExpression => CallExpression
50 PostfixExpression => LeftHandSideExpression
51 PostfixExpression => LeftHandSideExpression $P1 "++"
52 PostfixExpression => LeftHandSideExpression $P2 "--"
53 $P1 =>
54 $P2 =>
55 UnaryExpression => PostfixExpression
56 UnaryExpression => "delete" UnaryExpression
57 UnaryExpression => "void" UnaryExpression
58 UnaryExpression => "typeof" UnaryExpression
59 UnaryExpression => "++" UnaryExpression
60 UnaryExpression => "--" UnaryExpression
61 UnaryExpression => "+" UnaryExpression
62 UnaryExpression => "-" UnaryExpression
63 UnaryExpression => "~" UnaryExpression
64 UnaryExpression => "!" UnaryExpression
65 MultiplicativeExpression => UnaryExpression
66 MultiplicativeExpression => MultiplicativeExpression "*" UnaryExpression
67 MultiplicativeExpression => MultiplicativeExpression "/" UnaryExpression
68 MultiplicativeExpression => MultiplicativeExpression "%" UnaryExpression
69 AdditiveExpression => MultiplicativeExpression
70 AdditiveExpression => AdditiveExpression "+" MultiplicativeExpression
71 AdditiveExpression => AdditiveExpression "-" MultiplicativeExpression
72 ShiftExpression => AdditiveExpression
73 ShiftExpression => ShiftExpression "<<" AdditiveExpression
74 ShiftExpression => ShiftExpression ">>" AdditiveExpression
75 ShiftExpression => ShiftExpression ">>>" AdditiveExpression
76 RelationalExpression => ShiftExpression
77 RelationalExpression => RelationalExpression "<" ShiftExpression
78 RelationalExpression => RelationalExpression ">" ShiftExpression
79 RelationalExpression => RelationalExpression "<=" ShiftExpression
80 RelationalExpression => RelationalExpression ">=" ShiftExpression
81 RelationalExpression => RelationalExpression "instanceof" ShiftExpression
82 EqualityExpression => RelationalExpression
83 EqualityExpression => EqualityExpression "==" RelationalExpression
84 EqualityExpression => EqualityExpression "!=" RelationalExpression
85 EqualityExpression => EqualityExpression "===" RelationalExpression
86 EqualityExpression => EqualityExpression "!==" RelationalExpression
87 BitwiseANDExpression => EqualityExpression
88 BitwiseANDExpression => BitwiseANDExpression "&" EqualityExpression
89 BitwiseXORExpression => BitwiseANDExpression
90 BitwiseXORExpression => BitwiseXORExpression "^" BitwiseANDExpression
91 BitwiseORExpression => BitwiseXORExpression
92 BitwiseORExpression => BitwiseORExpression "|" BitwiseXORExpression
93 LogicalANDExpression => BitwiseORExpression
94 LogicalANDExpression => LogicalANDExpression "&&" BitwiseORExpression
95 LogicalORExpression => LogicalANDExpression
96 LogicalORExpression => LogicalORExpression "||" LogicalANDExpression
97 ConditionalExpression => LogicalORExpression
98 ConditionalExpression => LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
99 AssignmentExpression => ConditionalExpression
100 AssignmentExpression => LeftHandSideExpression AssignmentOperator AssignmentExpression
101 AssignmentOperator => "="
102 AssignmentOperator => "*="
103 AssignmentOperator => "/="
104 AssignmentOperator => "%="
105 AssignmentOperator => "+="
106 AssignmentOperator => "-="
107 AssignmentOperator => "<<="
108 AssignmentOperator => ">>="
109 AssignmentOperator => ">>>="
110 AssignmentOperator => "&="
111 AssignmentOperator => "^="
112 AssignmentOperator => "|="
113 Expression => AssignmentExpression
114 Expression => Expression "," AssignmentExpression
115 ExpressionNoIn => Expression
116 Statement => Block
117 Statement => VariableStatement
118 Statement => EmptyStatement
119 Statement => ExpressionStatement
120 Statement => IfStatement
121 Statement => IterationStatement
122 Statement => ContinueStatement
123 Statement => BreakStatement
124 Statement => ReturnStatement
125 Statement => WithStatement
126 Statement => LabelledStatement
127 Statement => SwitchStatement
128 Statement => ThrowStatement
129 Statement => TryStatement
130 Block => "{" StatementList "}"
131 Block => "{" "}"
132 StatementList => Statement
133 StatementList => StatementList Statement
134 VariableStatement => "var" VariableDeclarationList ";"
135 VariableDeclarationList => VariableDeclaration
136 VariableDeclarationList => VariableDeclarationList "," VariableDeclaration
137 VariableDeclarationListNoIn => VariableDeclarationList
138 VariableDeclaration => Identifier Initializer
139 VariableDeclaration => Identifier
140 VariableDeclarationNoIn => VariableDeclaration
141 Initializer => "=" AssignmentExpression
142 EmptyStatement => ";"
143 ExpressionStatement => Expression ";"
144 IfStatement => "if" "(" Expression ")" Statement "else" Statement
145 IfStatement => "if" "(" Expression ")" Statement
146 IterationStatement => "do" Statement "while" "(" Expression ")" ";"
147 IterationStatement => "while" "(" Expression ")" Statement
148 IterationStatement => "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
149 IterationStatement => "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
150 IterationStatement => "for" "(" LeftHandSideExpression "in" Expression ")" Statement
151 IterationStatement => "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
152 OptExprStmtNoIn => ":"
153 OptExprStmtNoIn => ExpressionNoIn ";"
154 OptExprStmt => ";"
155 OptExprStmt => Expression ";"
156 OptExprClose => ";"
157 OptExprClose => Expression ")"
158 ContinueStatement => "continue" $P3 Identifier ";"
159 ContinueStatement => "continue" ";"
160 $P3 =>
161 BreakStatement => "break" $P4 Identifier ";"
162 BreakStatement => "break" ";"
163 $P4 =>
164 ReturnStatement => "return" $P5 Expression ";"
165 ReturnStatement => "return" ";"
166 $P5 =>
167 WithStatement => "with" "(" Expression ")" Statement
168 SwitchStatement => "switch" "(" Expression ")" CaseBlock
169 CaseBlock => "{" CaseClauses "}"
170 CaseBlock => "{" "}"
171 CaseBlock => "{" CaseClauses DefaultClause CaseClauses "}"
172 CaseBlock => "{" CaseClauses DefaultClause "}"
173 CaseBlock => "{" DefaultClause CaseClauses "}"
174 CaseBlock => "{" DefaultClause "}"
175 CaseClauses => CaseClause
176 CaseClauses => CaseClauses CaseClause
177 CaseClause => "case" Expression ":" StatementList
178 CaseClause => "case" Expression ":"
179 DefaultClause => "default" ":" StatementList
180 DefaultClause => "default" ":"
181 LabelledStatement => Identifier ":" Statement
182 ThrowStatement => "throw" $P6 Expression ";"
183 $P6 =>
184 TryStatement => "try" Block Catch
185 TryStatement => "try" Block Finally
186 TryStatement => "try" Block Catch Finally
187 Catch => "catch" "(" Identifier ")" Block
188 Finally => "finally" Block
189 FunctionDeclaration => "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
190 FunctionDeclaration => "function" Identifier "(" ")" "{" FunctionBody "}"
191 FunctionExpression => "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
192 FunctionExpression => "function" "(" FormalParameterList ")" "{" FunctionBody "}"
193 FunctionExpression => "function" Identifier "(" ")" "{" FunctionBody "}"
194 FunctionExpression => "function" "(" ")" "{" FunctionBody "}"
195 FormalParameterList => Identifier
196 FormalParameterList => FormalParameterList "," Identifier
197 FunctionBody => SourceElements
198 Program => SourceElements
199 SourceElements => SourceElement
200 SourceElements => SourceElements SourceElement
201 SourceElement => Statement
202 SourceElement => FunctionDeclaration

0:	$start => . Program ('$end)
	Program => . SourceElements
	SourceElements => . SourceElement
	SourceElements => . SourceElements SourceElement
	SourceElement => . Statement
	SourceElement => . FunctionDeclaration
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	FunctionDeclaration => . "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
	FunctionDeclaration => . "function" Identifier "(" ")" "{" FunctionBody "}"
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		"function" => shift 62
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		FunctionDeclaration => shift 77
		Statement => shift 78
		SourceElement => shift 79
		SourceElements => shift 80
		Program => shift 81

1:	UnaryExpression => "!" . UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 170

2:	UnaryExpression => "~" . UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 169

3:	UnaryExpression => "-" . UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 168

4:	UnaryExpression => "+" . UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 167

5:	UnaryExpression => "--" . UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 166

6:	UnaryExpression => "++" . UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 165

7:	UnaryExpression => "typeof" . UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 164

8:	UnaryExpression => "void" . UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 163

9:	UnaryExpression => "delete" . UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 162

10:	UnaryExpression => PostfixExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 55

11:	MultiplicativeExpression => UnaryExpression . ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 65

12:	MultiplicativeExpression => MultiplicativeExpression . "%" UnaryExpression ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	MultiplicativeExpression => MultiplicativeExpression . "/" UnaryExpression ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	MultiplicativeExpression => MultiplicativeExpression . "*" UnaryExpression ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AdditiveExpression => MultiplicativeExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 158
		"/" => shift 159
		"%" => shift 160
		$default => reduce 69

13:	AdditiveExpression => AdditiveExpression . "-" MultiplicativeExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?")
	AdditiveExpression => AdditiveExpression . "+" MultiplicativeExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?")
	ShiftExpression => AdditiveExpression . ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 156
		"-" => shift 157
		$default => reduce 72

14:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpression => ShiftExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 153
		">>" => shift 154
		">>>" => shift 155
		$default => reduce 76

15:	RelationalExpression => RelationalExpression . "instanceof" ShiftExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	RelationalExpression => RelationalExpression . ">=" ShiftExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	RelationalExpression => RelationalExpression . "<=" ShiftExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	RelationalExpression => RelationalExpression . ">" ShiftExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	RelationalExpression => RelationalExpression . "<" ShiftExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	EqualityExpression => RelationalExpression . ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 148
		">" => shift 149
		"<=" => shift 150
		">=" => shift 151
		"instanceof" => shift 152
		$default => reduce 82

16:	EqualityExpression => EqualityExpression . "!==" RelationalExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	EqualityExpression => EqualityExpression . "===" RelationalExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	EqualityExpression => EqualityExpression . "!=" RelationalExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	EqualityExpression => EqualityExpression . "==" RelationalExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	BitwiseANDExpression => EqualityExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?")
		"==" => shift 144
		"!=" => shift 145
		"===" => shift 146
		"!==" => shift 147
		$default => reduce 87

17:	StringLiteral => '$string . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		$default => reduce 10

18:	NumericLiteral => '$float . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		$default => reduce 9

19:	NumericLiteral => '$fixed . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		$default => reduce 8

20:	BooleanLiteral => "false" . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		$default => reduce 7

21:	BooleanLiteral => "true" . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		$default => reduce 6

22:	NullLiteral => "null" . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		$default => reduce 5

23:	BitwiseANDExpression => BitwiseANDExpression . "&" EqualityExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?")
	BitwiseXORExpression => BitwiseANDExpression . ("in" ":" "]" ")" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 143
		$default => reduce 89

24:	ArrayLiteral => "[" . ElementList "," "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	ElementList => . Elision AssignmentExpression
	ElementList => . AssignmentExpression
	ElementList => . ElementList "," Elision AssignmentExpression
	ElementList => . ElementList "," AssignmentExpression
	Elision => . ","
	Elision => . Elision ","
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	ArrayLiteral => "[" . ElementList "," Elision "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	ElementList => . Elision AssignmentExpression
	ElementList => . AssignmentExpression
	ElementList => . ElementList "," Elision AssignmentExpression
	ElementList => . ElementList "," AssignmentExpression
	Elision => . ","
	Elision => . Elision ","
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	ArrayLiteral => "[" . "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	ArrayLiteral => "[" . Elision "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Elision => . ","
	Elision => . Elision ","
		"]" => shift 138
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		"," => shift 139
		AssignmentExpression => shift 140
		Elision => shift 141
		ElementList => shift 142

25:	Literal => StringLiteral . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 4

26:	Literal => NumericLiteral . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 3

27:	Literal => BooleanLiteral . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 2

28:	Literal => NullLiteral . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 1

29:	BitwiseXORExpression => BitwiseXORExpression . "^" BitwiseANDExpression ("in" ":" "]" ")" "^" "|" "&&" "||" "," "?" ";")
	BitwiseORExpression => BitwiseXORExpression . ("in" ":" "]" ")" "," "||" "&&" "|" ";" "?")
		"^" => shift 137
		$default => reduce 91

30:	PrimaryExpression => "(" . Expression ")" (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 136

31:	PrimaryExpression => ArrayLiteral . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		$default => reduce 15

32:	PrimaryExpression => Literal . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		$default => reduce 14

33:	PrimaryExpression => "this" . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		$default => reduce 12

34:	BitwiseORExpression => BitwiseORExpression . "|" BitwiseXORExpression ("in" ":" "]" ")" "," "||" "&&" "|" ";" "?")
	LogicalANDExpression => BitwiseORExpression . ("in" ":" "]" ")" "&&" "||" "," "?" ";")
		"|" => shift 135
		$default => reduce 93

35:	MemberExpression => PrimaryExpression . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 34

36:	LogicalANDExpression => LogicalANDExpression . "&&" BitwiseORExpression ("in" ":" "]" ")" "&&" "||" "," "?" ";")
	LogicalORExpression => LogicalANDExpression . ("in" ":" "]" ")" "," "||" ";" "?")
		"&&" => shift 134
		$default => reduce 95

37:	MemberExpression => "new" . MemberExpression Arguments (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	NewExpression => "new" . NewExpression (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		NewExpression => shift 131
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		"new" => shift 37
		PrimaryExpression => shift 35
		MemberExpression => shift 133

38:	MemberExpression => MemberExpression . "." Identifier (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	MemberExpression => MemberExpression . "[" Expression "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	CallExpression => MemberExpression . Arguments (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	Arguments => . "(" ")"
	Arguments => . "(" ArgumentList ")"
	NewExpression => MemberExpression . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		"(" => shift 122
		Arguments => shift 128
		"[" => shift 129
		"." => shift 130
		$default => reduce 38

39:	LogicalORExpression => LogicalORExpression . "||" LogicalANDExpression ("in" ":" "]" ")" "," "||" ";" "?")
	ConditionalExpression => LogicalORExpression . "?" AssignmentExpression ":" AssignmentExpression ("in" ":" "]" ")" "," ";")
	ConditionalExpression => LogicalORExpression . ("in" ":" "]" ")" "," ";")
		"?" => shift 126
		"||" => shift 127
		$default => reduce 97

40:	CallExpression => CallExpression . "." Identifier (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	CallExpression => CallExpression . "[" Expression "]" (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	CallExpression => CallExpression . Arguments (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	Arguments => . "(" ")"
	Arguments => . "(" ArgumentList ")"
	LeftHandSideExpression => CallExpression . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"(" => shift 122
		Arguments => shift 123
		"[" => shift 124
		"." => shift 125
		$default => reduce 49

41:	LeftHandSideExpression => NewExpression . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 48

42:	PostfixExpression => LeftHandSideExpression . $P2 "--" ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	$P2 => .
	PostfixExpression => LeftHandSideExpression . $P1 "++" ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	$P1 => .
	PostfixExpression => LeftHandSideExpression . ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AssignmentExpression => LeftHandSideExpression . AssignmentOperator AssignmentExpression ("in" ":" "]" ")" "," ";")
	AssignmentOperator => . "="
	AssignmentOperator => . "*="
	AssignmentOperator => . "/="
	AssignmentOperator => . "%="
	AssignmentOperator => . "+="
	AssignmentOperator => . "-="
	AssignmentOperator => . "<<="
	AssignmentOperator => . ">>="
	AssignmentOperator => . ">>>="
	AssignmentOperator => . "&="
	AssignmentOperator => . "^="
	AssignmentOperator => . "|="
		"|=" => shift 107
		"^=" => shift 108
		"&=" => shift 109
		">>>=" => shift 110
		">>=" => shift 111
		"<<=" => shift 112
		"-=" => shift 113
		"+=" => shift 114
		"%=" => shift 115
		"/=" => shift 116
		"*=" => shift 117
		"=" => shift 118
		AssignmentOperator => shift 119
		$P1 => shift 120
		$P2 => shift 121
		"++" => reduce 53
		"--" => reduce 54
		$default => reduce 50

43:	AssignmentExpression => ConditionalExpression . ("in" ":" "]" ")" "," ";")
		$default => reduce 99

44:	Expression => AssignmentExpression . (":" "]" ")" "," ";")
		$default => reduce 113

45:	Identifier => '$ident . ("]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=" ":")
		$default => reduce 11

46:	TryStatement => "try" . Block Catch Finally ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	TryStatement => "try" . Block Finally ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	TryStatement => "try" . Block Catch ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Block => . "{" StatementList "}"
	Block => . "{" "}"
		"{" => shift 61
		Block => shift 106

47:	ThrowStatement => "throw" . $P6 Expression ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	$P6 => .
		$P6 => shift 105
		$default => reduce 183

48:	PrimaryExpression => Identifier . ("*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
	LabelledStatement => Identifier . ":" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		":" => shift 104
		$default => reduce 13

49:	SwitchStatement => "switch" . "(" Expression ")" CaseBlock ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 103

50:	WithStatement => "with" . "(" Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 102

51:	ReturnStatement => "return" . ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	ReturnStatement => "return" . $P5 Expression ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	$P5 => .
		$P5 => shift 100
		";" => shift 101
		$default => reduce 166

52:	BreakStatement => "break" . ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	BreakStatement => "break" . $P4 Identifier ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	$P4 => .
		$P4 => shift 98
		";" => shift 99
		'$ident => reduce 163

53:	ContinueStatement => "continue" . ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	ContinueStatement => "continue" . $P3 Identifier ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	$P3 => .
		$P3 => shift 96
		";" => shift 97
		'$ident => reduce 160

54:	IterationStatement => "for" . "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IterationStatement => "for" . "(" LeftHandSideExpression "in" Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IterationStatement => "for" . "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IterationStatement => "for" . "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 95

55:	IterationStatement => "while" . "(" Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 94

56:	IterationStatement => "do" . Statement "while" "(" Expression ")" ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 93

57:	IfStatement => "if" . "(" Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IfStatement => "if" . "(" Expression ")" Statement "else" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 92

58:	Expression => Expression . "," AssignmentExpression ("," ";")
	ExpressionStatement => Expression . ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 90
		"," => shift 91

59:	EmptyStatement => ";" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 142

60:	VariableStatement => "var" . VariableDeclarationList ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	VariableDeclarationList => . VariableDeclaration
	VariableDeclarationList => . VariableDeclarationList "," VariableDeclaration
	VariableDeclaration => . Identifier Initializer
	VariableDeclaration => . Identifier
	Identifier => . '$ident
		'$ident => shift 45
		Identifier => shift 87
		VariableDeclaration => shift 88
		VariableDeclarationList => shift 89

61:	Block => "{" . "}" ("default" "case" '$end "else" "}" "finally" "catch" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Block => "{" . StatementList "}" ("default" "case" '$end "else" "}" "finally" "catch" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	StatementList => . Statement
	StatementList => . StatementList Statement
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 84
		StatementList => shift 85
		"}" => shift 86

62:	FunctionDeclaration => "function" . Identifier "(" ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
	Identifier => . '$ident
	FunctionDeclaration => "function" . Identifier "(" FormalParameterList ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
	Identifier => . '$ident
		'$ident => shift 45
		Identifier => shift 83

63:	Statement => TryStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 129

64:	Statement => ThrowStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 128

65:	Statement => SwitchStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 127

66:	Statement => LabelledStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 126

67:	Statement => WithStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 125

68:	Statement => ReturnStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 124

69:	Statement => BreakStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 123

70:	Statement => ContinueStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 122

71:	Statement => IterationStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 121

72:	Statement => IfStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 120

73:	Statement => ExpressionStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 119

74:	Statement => EmptyStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 118

75:	Statement => VariableStatement . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 117

76:	Statement => Block . ("default" "case" '$end "else" "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 116

77:	SourceElement => FunctionDeclaration . ('$end "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 202

78:	SourceElement => Statement . ('$end "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 201

79:	SourceElements => SourceElement . ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 199

80:	SourceElements => SourceElements . SourceElement ('$end "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
	SourceElement => . Statement
	SourceElement => . FunctionDeclaration
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	FunctionDeclaration => . "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
	FunctionDeclaration => . "function" Identifier "(" ")" "{" FunctionBody "}"
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	Program => SourceElements . ('$end)
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		"function" => shift 62
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		FunctionDeclaration => shift 77
		Statement => shift 78
		SourceElement => shift 82
		'$end => reduce 198

81:	$start => Program . ('$end)
		'$end => accept 0

82:	SourceElements => SourceElements SourceElement . ("}" '$end "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 200

83:	FunctionDeclaration => "function" Identifier . "(" FormalParameterList ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
	FunctionDeclaration => "function" Identifier . "(" ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		"(" => shift 237

84:	StatementList => Statement . ("default" "case" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{" "}")
		$default => reduce 132

85:	StatementList => StatementList . Statement ("try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{" "}")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	Block => "{" StatementList . "}" ("default" "case" '$end "else" "}" "finally" "catch" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"}" => shift 235
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 236

86:	Block => "{" "}" . ("default" "case" '$end "else" "}" "finally" "catch" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 131

87:	VariableDeclaration => Identifier . ("in" "," ";")
	VariableDeclaration => Identifier . Initializer ("in" "," ";")
	Initializer => . "=" AssignmentExpression
		"=" => shift 233
		Initializer => shift 234
		";" => reduce 139
		"," => reduce 139
		"in" => reduce 139

88:	VariableDeclarationList => VariableDeclaration . ("," ";")
		";" => reduce 135
		"," => reduce 135

89:	VariableDeclarationList => VariableDeclarationList . "," VariableDeclaration ("," ";")
	VariableStatement => "var" VariableDeclarationList . ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 231
		"," => shift 232

90:	ExpressionStatement => Expression ";" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 143

91:	Expression => Expression "," . AssignmentExpression (":" "]" ")" "," ";")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 230

92:	IfStatement => "if" "(" . Expression ")" Statement "else" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	IfStatement => "if" "(" . Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 229

93:	IterationStatement => "do" Statement . "while" "(" Expression ")" ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"while" => shift 228

94:	IterationStatement => "while" "(" . Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 227

95:	IterationStatement => "for" "(" . OptExprStmtNoIn OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	OptExprStmtNoIn => . ":"
	OptExprStmtNoIn => . ExpressionNoIn ";"
	ExpressionNoIn => . Expression
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	IterationStatement => "for" "(" . "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IterationStatement => "for" "(" . LeftHandSideExpression "in" Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	IterationStatement => "for" "(" . "var" VariableDeclarationNoIn "in" Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"var" => shift 221
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 222
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 223
		ExpressionNoIn => shift 224
		":" => shift 225
		OptExprStmtNoIn => shift 226

96:	ContinueStatement => "continue" $P3 . Identifier ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Identifier => . '$ident
		'$ident => shift 45
		Identifier => shift 220

97:	ContinueStatement => "continue" ";" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 159

98:	BreakStatement => "break" $P4 . Identifier ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Identifier => . '$ident
		'$ident => shift 45
		Identifier => shift 219

99:	BreakStatement => "break" ";" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 162

100:	ReturnStatement => "return" $P5 . Expression ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 218

101:	ReturnStatement => "return" ";" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 165

102:	WithStatement => "with" "(" . Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 217

103:	SwitchStatement => "switch" "(" . Expression ")" CaseBlock ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 216

104:	LabelledStatement => Identifier ":" . Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 215

105:	ThrowStatement => "throw" $P6 . Expression ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 214

106:	TryStatement => "try" Block . Catch ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Catch => . "catch" "(" Identifier ")" Block
	TryStatement => "try" Block . Finally ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Finally => . "finally" Block
	TryStatement => "try" Block . Catch Finally ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Catch => . "catch" "(" Identifier ")" Block
		"finally" => shift 210
		Finally => shift 211
		"catch" => shift 212
		Catch => shift 213

107:	AssignmentOperator => "|=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 112

108:	AssignmentOperator => "^=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 111

109:	AssignmentOperator => "&=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 110

110:	AssignmentOperator => ">>>=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 109

111:	AssignmentOperator => ">>=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 108

112:	AssignmentOperator => "<<=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 107

113:	AssignmentOperator => "-=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 106

114:	AssignmentOperator => "+=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 105

115:	AssignmentOperator => "%=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 104

116:	AssignmentOperator => "/=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 103

117:	AssignmentOperator => "*=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 102

118:	AssignmentOperator => "=" . ("new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 101

119:	AssignmentExpression => LeftHandSideExpression AssignmentOperator . AssignmentExpression ("in" ":" "]" ")" "," ";")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 209

120:	PostfixExpression => LeftHandSideExpression $P1 . "++" ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"++" => shift 208

121:	PostfixExpression => LeftHandSideExpression $P2 . "--" ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"--" => shift 207

122:	Arguments => "(" . ArgumentList ")" (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	ArgumentList => . AssignmentExpression
	ArgumentList => . ArgumentList "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	Arguments => "(" . ")" (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		")" => shift 204
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 205
		ArgumentList => shift 206

123:	CallExpression => CallExpression Arguments . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		$default => reduce 41

124:	CallExpression => CallExpression "[" . Expression "]" (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 203

125:	CallExpression => CallExpression "." . Identifier (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	Identifier => . '$ident
		'$ident => shift 45
		Identifier => shift 202

126:	ConditionalExpression => LogicalORExpression "?" . AssignmentExpression ":" AssignmentExpression ("in" ":" "]" ")" "," ";")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 201

127:	LogicalORExpression => LogicalORExpression "||" . LogicalANDExpression ("in" ":" "]" ")" "," "||" ";" "?")
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		BitwiseANDExpression => shift 23
		BitwiseXORExpression => shift 29
		BitwiseORExpression => shift 34
		LogicalANDExpression => shift 200

128:	CallExpression => MemberExpression Arguments . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		$default => reduce 40

129:	MemberExpression => MemberExpression "[" . Expression "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 199

130:	MemberExpression => MemberExpression "." . Identifier (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Identifier => . '$ident
		'$ident => shift 45
		Identifier => shift 198

131:	NewExpression => "new" NewExpression . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		$default => reduce 39

132:	PrimaryExpression => Identifier . (":" "]" "in" ";" ")" "||" "&&" "|" "^" "&" "==" "!=" "===" "!==" "instanceof" ">=" "<=" ">" "<" "<<" ">>" ">>>" "-" "+" "*" "/" "%" "?" "," "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "." "[" "--" "++" "(")
		$default => reduce 13

133:	NewExpression => MemberExpression . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
	MemberExpression => MemberExpression . "." Identifier (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "[" "." "(")
	MemberExpression => MemberExpression . "[" Expression "]" (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "[" "." "(")
	MemberExpression => "new" MemberExpression . Arguments (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Arguments => . "(" ")"
	Arguments => . "(" ArgumentList ")"
		"(" => shift 122
		Arguments => shift 197
		"[" => shift 129
		"." => shift 130
		$default => reduce 38

134:	LogicalANDExpression => LogicalANDExpression "&&" . BitwiseORExpression ("in" ":" "]" ")" "&&" "||" "," "?" ";")
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		BitwiseANDExpression => shift 23
		BitwiseXORExpression => shift 29
		BitwiseORExpression => shift 196

135:	BitwiseORExpression => BitwiseORExpression "|" . BitwiseXORExpression ("in" ":" "]" ")" "," "||" "&&" "|" ";" "?")
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		BitwiseANDExpression => shift 23
		BitwiseXORExpression => shift 195

136:	Expression => Expression . "," AssignmentExpression ("," ")")
	PrimaryExpression => "(" Expression . ")" (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		")" => shift 194
		"," => shift 91

137:	BitwiseXORExpression => BitwiseXORExpression "^" . BitwiseANDExpression ("in" ":" "]" ")" "^" "|" "&&" "||" "," "?" ";")
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		BitwiseANDExpression => shift 193

138:	ArrayLiteral => "[" "]" . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 18

139:	Elision => "," . ("]" "," "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 25

140:	ElementList => AssignmentExpression . (",")
		"," => reduce 22

141:	ArrayLiteral => "[" Elision . "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Elision => Elision . "," ("]" "," "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
	ElementList => Elision . AssignmentExpression (",")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 190
		"," => shift 191
		"]" => shift 192

142:	ArrayLiteral => "[" ElementList . "," Elision "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	ElementList => ElementList . "," AssignmentExpression (",")
	ElementList => ElementList . "," Elision AssignmentExpression (",")
	ArrayLiteral => "[" ElementList . "," "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"," => shift 189

143:	BitwiseANDExpression => BitwiseANDExpression "&" . EqualityExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?")
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 188

144:	EqualityExpression => EqualityExpression "==" . RelationalExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 187

145:	EqualityExpression => EqualityExpression "!=" . RelationalExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 186

146:	EqualityExpression => EqualityExpression "===" . RelationalExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 185

147:	EqualityExpression => EqualityExpression "!==" . RelationalExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 184

148:	RelationalExpression => RelationalExpression "<" . ShiftExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 183

149:	RelationalExpression => RelationalExpression ">" . ShiftExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 182

150:	RelationalExpression => RelationalExpression "<=" . ShiftExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 181

151:	RelationalExpression => RelationalExpression ">=" . ShiftExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 180

152:	RelationalExpression => RelationalExpression "instanceof" . ShiftExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 179

153:	ShiftExpression => ShiftExpression "<<" . AdditiveExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 178

154:	ShiftExpression => ShiftExpression ">>" . AdditiveExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 177

155:	ShiftExpression => ShiftExpression ">>>" . AdditiveExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 176

156:	AdditiveExpression => AdditiveExpression "+" . MultiplicativeExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?")
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 175

157:	AdditiveExpression => AdditiveExpression "-" . MultiplicativeExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?")
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 174

158:	MultiplicativeExpression => MultiplicativeExpression "*" . UnaryExpression ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 173

159:	MultiplicativeExpression => MultiplicativeExpression "/" . UnaryExpression ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 172

160:	MultiplicativeExpression => MultiplicativeExpression "%" . UnaryExpression ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		PrimaryExpression => shift 35
		"new" => shift 37
		MemberExpression => shift 38
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 161
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 171

161:	PostfixExpression => LeftHandSideExpression . $P2 "--" ("in" ":" "]" ")" "," "||" ";" "?" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&")
	$P2 => .
	PostfixExpression => LeftHandSideExpression . $P1 "++" ("in" ":" "]" ")" "," "||" ";" "?" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&")
	$P1 => .
	PostfixExpression => LeftHandSideExpression . ("in" ":" "]" ")" "," "||" ";" "?" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&")
		$P1 => shift 120
		$P2 => shift 121
		"++" => reduce 53
		"--" => reduce 54
		$default => reduce 50

162:	UnaryExpression => "delete" UnaryExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 56

163:	UnaryExpression => "void" UnaryExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 57

164:	UnaryExpression => "typeof" UnaryExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 58

165:	UnaryExpression => "++" UnaryExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 59

166:	UnaryExpression => "--" UnaryExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 60

167:	UnaryExpression => "+" UnaryExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 61

168:	UnaryExpression => "-" UnaryExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 62

169:	UnaryExpression => "~" UnaryExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 63

170:	UnaryExpression => "!" UnaryExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 64

171:	MultiplicativeExpression => MultiplicativeExpression "%" UnaryExpression . ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 68

172:	MultiplicativeExpression => MultiplicativeExpression "/" UnaryExpression . ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 67

173:	MultiplicativeExpression => MultiplicativeExpression "*" UnaryExpression . ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 66

174:	MultiplicativeExpression => MultiplicativeExpression . "%" UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	MultiplicativeExpression => MultiplicativeExpression . "/" UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	MultiplicativeExpression => MultiplicativeExpression . "*" UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	AdditiveExpression => AdditiveExpression "-" MultiplicativeExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 158
		"/" => shift 159
		"%" => shift 160
		$default => reduce 71

175:	MultiplicativeExpression => MultiplicativeExpression . "%" UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	MultiplicativeExpression => MultiplicativeExpression . "/" UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	MultiplicativeExpression => MultiplicativeExpression . "*" UnaryExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	AdditiveExpression => AdditiveExpression "+" MultiplicativeExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 158
		"/" => shift 159
		"%" => shift 160
		$default => reduce 70

176:	AdditiveExpression => AdditiveExpression . "-" MultiplicativeExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	AdditiveExpression => AdditiveExpression . "+" MultiplicativeExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	ShiftExpression => ShiftExpression ">>>" AdditiveExpression . ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 156
		"-" => shift 157
		$default => reduce 75

177:	AdditiveExpression => AdditiveExpression . "-" MultiplicativeExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	AdditiveExpression => AdditiveExpression . "+" MultiplicativeExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	ShiftExpression => ShiftExpression ">>" AdditiveExpression . ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 156
		"-" => shift 157
		$default => reduce 74

178:	AdditiveExpression => AdditiveExpression . "-" MultiplicativeExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	AdditiveExpression => AdditiveExpression . "+" MultiplicativeExpression ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	ShiftExpression => ShiftExpression "<<" AdditiveExpression . ("in" ":" "]" ")" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 156
		"-" => shift 157
		$default => reduce 73

179:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	RelationalExpression => RelationalExpression "instanceof" ShiftExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 153
		">>" => shift 154
		">>>" => shift 155
		$default => reduce 81

180:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	RelationalExpression => RelationalExpression ">=" ShiftExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 153
		">>" => shift 154
		">>>" => shift 155
		$default => reduce 80

181:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	RelationalExpression => RelationalExpression "<=" ShiftExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 153
		">>" => shift 154
		">>>" => shift 155
		$default => reduce 79

182:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	RelationalExpression => RelationalExpression ">" ShiftExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 153
		">>" => shift 154
		">>>" => shift 155
		$default => reduce 78

183:	ShiftExpression => ShiftExpression . ">>>" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . ">>" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	ShiftExpression => ShiftExpression . "<<" AdditiveExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?" "<<" ">>" ">>>")
	RelationalExpression => RelationalExpression "<" ShiftExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ";" "?")
		"<<" => shift 153
		">>" => shift 154
		">>>" => shift 155
		$default => reduce 77

184:	RelationalExpression => RelationalExpression . "instanceof" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . ">=" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . "<=" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . ">" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . "<" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	EqualityExpression => EqualityExpression "!==" RelationalExpression . ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 148
		">" => shift 149
		"<=" => shift 150
		">=" => shift 151
		"instanceof" => shift 152
		$default => reduce 86

185:	RelationalExpression => RelationalExpression . "instanceof" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . ">=" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . "<=" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . ">" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . "<" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	EqualityExpression => EqualityExpression "===" RelationalExpression . ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 148
		">" => shift 149
		"<=" => shift 150
		">=" => shift 151
		"instanceof" => shift 152
		$default => reduce 85

186:	RelationalExpression => RelationalExpression . "instanceof" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . ">=" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . "<=" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . ">" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . "<" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	EqualityExpression => EqualityExpression "!=" RelationalExpression . ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 148
		">" => shift 149
		"<=" => shift 150
		">=" => shift 151
		"instanceof" => shift 152
		$default => reduce 84

187:	RelationalExpression => RelationalExpression . "instanceof" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . ">=" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . "<=" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . ">" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	RelationalExpression => RelationalExpression . "<" ShiftExpression ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=" "instanceof")
	EqualityExpression => EqualityExpression "==" RelationalExpression . ("in" ":" "]" ")" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 148
		">" => shift 149
		"<=" => shift 150
		">=" => shift 151
		"instanceof" => shift 152
		$default => reduce 83

188:	EqualityExpression => EqualityExpression . "!==" RelationalExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	EqualityExpression => EqualityExpression . "===" RelationalExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	EqualityExpression => EqualityExpression . "!=" RelationalExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	EqualityExpression => EqualityExpression . "==" RelationalExpression ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=" "===" "!==")
	BitwiseANDExpression => BitwiseANDExpression "&" EqualityExpression . ("in" ":" "]" ")" "," "||" "&&" "|" "^" "&" ";" "?")
		"==" => shift 144
		"!=" => shift 145
		"===" => shift 146
		"!==" => shift 147
		$default => reduce 88

189:	ArrayLiteral => "[" ElementList "," . "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	ElementList => ElementList "," . Elision AssignmentExpression (",")
	Elision => . ","
	Elision => . Elision ","
	ElementList => ElementList "," . AssignmentExpression (",")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	ArrayLiteral => "[" ElementList "," . Elision "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Elision => . ","
	Elision => . Elision ","
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 269
		"," => shift 139
		Elision => shift 270
		"]" => shift 271

190:	ElementList => Elision AssignmentExpression . (",")
		"," => reduce 21

191:	Elision => Elision "," . ("]" "," "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 26

192:	ArrayLiteral => "[" Elision "]" . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 17

193:	BitwiseANDExpression => BitwiseANDExpression . "&" EqualityExpression ("in" ":" "]" ")" "^" "|" "&&" "||" "," "?" ";" "&")
	BitwiseXORExpression => BitwiseXORExpression "^" BitwiseANDExpression . ("in" ":" "]" ")" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 143
		$default => reduce 90

194:	PrimaryExpression => "(" Expression ")" . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "." "[" "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=" "(")
		$default => reduce 16

195:	BitwiseXORExpression => BitwiseXORExpression . "^" BitwiseANDExpression ("in" ":" "]" ")" "," "||" "&&" "|" ";" "?" "^")
	BitwiseORExpression => BitwiseORExpression "|" BitwiseXORExpression . ("in" ":" "]" ")" "," "||" "&&" "|" ";" "?")
		"^" => shift 137
		$default => reduce 92

196:	BitwiseORExpression => BitwiseORExpression . "|" BitwiseXORExpression ("in" ":" "]" ")" "&&" "||" "," "?" ";" "|")
	LogicalANDExpression => LogicalANDExpression "&&" BitwiseORExpression . ("in" ":" "]" ")" "&&" "||" "," "?" ";")
		"|" => shift 135
		$default => reduce 94

197:	MemberExpression => "new" MemberExpression Arguments . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 37

198:	MemberExpression => MemberExpression "." Identifier . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 36

199:	Expression => Expression . "," AssignmentExpression ("," "]")
	MemberExpression => MemberExpression "[" Expression . "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		"]" => shift 268
		"," => shift 91

200:	LogicalANDExpression => LogicalANDExpression . "&&" BitwiseORExpression ("in" ":" "]" ")" "," "||" ";" "?" "&&")
	LogicalORExpression => LogicalORExpression "||" LogicalANDExpression . ("in" ":" "]" ")" "," "||" ";" "?")
		"&&" => shift 134
		$default => reduce 96

201:	ConditionalExpression => LogicalORExpression "?" AssignmentExpression . ":" AssignmentExpression ("in" ":" "]" ")" "," ";")
		":" => shift 267

202:	CallExpression => CallExpression "." Identifier . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		$default => reduce 43

203:	Expression => Expression . "," AssignmentExpression ("," "]")
	CallExpression => CallExpression "[" Expression . "]" (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		"]" => shift 266
		"," => shift 91

204:	Arguments => "(" ")" . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		$default => reduce 44

205:	ArgumentList => AssignmentExpression . ("," ")")
		")" => reduce 46
		"," => reduce 46

206:	ArgumentList => ArgumentList . "," AssignmentExpression ("," ")")
	Arguments => "(" ArgumentList . ")" (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		")" => shift 264
		"," => shift 265

207:	PostfixExpression => LeftHandSideExpression $P2 "--" . ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 52

208:	PostfixExpression => LeftHandSideExpression $P1 "++" . ("in" ":" "]" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 51

209:	AssignmentExpression => LeftHandSideExpression AssignmentOperator AssignmentExpression . ("in" ":" "]" ")" "," ";")
		$default => reduce 100

210:	Finally => "finally" . Block ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Block => . "{" StatementList "}"
	Block => . "{" "}"
		"{" => shift 61
		Block => shift 263

211:	TryStatement => "try" Block Finally . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 185

212:	Catch => "catch" . "(" Identifier ")" Block ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally")
		"(" => shift 262

213:	TryStatement => "try" Block Catch . Finally ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Finally => . "finally" Block
	TryStatement => "try" Block Catch . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"finally" => shift 210
		Finally => shift 261
		$default => reduce 184

214:	Expression => Expression . "," AssignmentExpression ("," ";")
	ThrowStatement => "throw" $P6 Expression . ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 260
		"," => shift 91

215:	LabelledStatement => Identifier ":" Statement . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 181

216:	Expression => Expression . "," AssignmentExpression ("," ")")
	SwitchStatement => "switch" "(" Expression . ")" CaseBlock ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 259
		"," => shift 91

217:	Expression => Expression . "," AssignmentExpression ("," ")")
	WithStatement => "with" "(" Expression . ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 258
		"," => shift 91

218:	Expression => Expression . "," AssignmentExpression ("," ";")
	ReturnStatement => "return" $P5 Expression . ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 257
		"," => shift 91

219:	BreakStatement => "break" $P4 Identifier . ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 256

220:	ContinueStatement => "continue" $P3 Identifier . ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 255

221:	IterationStatement => "for" "(" "var" . VariableDeclarationNoIn "in" Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	VariableDeclarationNoIn => . VariableDeclaration
	VariableDeclaration => . Identifier Initializer
	VariableDeclaration => . Identifier
	Identifier => . '$ident
	IterationStatement => "for" "(" "var" . VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	VariableDeclarationListNoIn => . VariableDeclarationList
	VariableDeclarationList => . VariableDeclaration
	VariableDeclarationList => . VariableDeclarationList "," VariableDeclaration
	VariableDeclaration => . Identifier Initializer
	VariableDeclaration => . Identifier
	Identifier => . '$ident
		VariableDeclarationList => shift 251
		VariableDeclarationListNoIn => shift 252
		'$ident => shift 45
		Identifier => shift 87
		VariableDeclaration => shift 253
		VariableDeclarationNoIn => shift 254

222:	IterationStatement => "for" "(" LeftHandSideExpression . "in" Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	PostfixExpression => LeftHandSideExpression . $P2 "--" ("*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	$P2 => .
	PostfixExpression => LeftHandSideExpression . $P1 "++" ("*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	$P1 => .
	PostfixExpression => LeftHandSideExpression . ("*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "?" ";")
	AssignmentExpression => LeftHandSideExpression . AssignmentOperator AssignmentExpression ("," ";")
	AssignmentOperator => . "="
	AssignmentOperator => . "*="
	AssignmentOperator => . "/="
	AssignmentOperator => . "%="
	AssignmentOperator => . "+="
	AssignmentOperator => . "-="
	AssignmentOperator => . "<<="
	AssignmentOperator => . ">>="
	AssignmentOperator => . ">>>="
	AssignmentOperator => . "&="
	AssignmentOperator => . "^="
	AssignmentOperator => . "|="
		"|=" => shift 107
		"^=" => shift 108
		"&=" => shift 109
		">>>=" => shift 110
		">>=" => shift 111
		"<<=" => shift 112
		"-=" => shift 113
		"+=" => shift 114
		"%=" => shift 115
		"/=" => shift 116
		"*=" => shift 117
		"=" => shift 118
		AssignmentOperator => shift 119
		$P1 => shift 120
		$P2 => shift 121
		"in" => shift 250
		"++" => reduce 53
		"--" => reduce 54
		$default => reduce 50

223:	Expression => Expression . "," AssignmentExpression ("," ";")
	ExpressionNoIn => Expression . (";")
		"," => shift 91
		";" => reduce 115

224:	OptExprStmtNoIn => ExpressionNoIn . ";" (";" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		";" => shift 249

225:	OptExprStmtNoIn => ":" . (";" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 152

226:	IterationStatement => "for" "(" OptExprStmtNoIn . OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	OptExprStmt => . ";"
	OptExprStmt => . Expression ";"
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 246
		";" => shift 247
		OptExprStmt => shift 248

227:	Expression => Expression . "," AssignmentExpression ("," ")")
	IterationStatement => "while" "(" Expression . ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 245
		"," => shift 91

228:	IterationStatement => "do" Statement "while" . "(" Expression ")" ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"(" => shift 244

229:	IfStatement => "if" "(" Expression . ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => Expression . "," AssignmentExpression ("," ")")
	IfStatement => "if" "(" Expression . ")" Statement "else" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"," => shift 91
		")" => shift 243

230:	Expression => Expression "," AssignmentExpression . (":" "]" ")" "," ";")
		$default => reduce 114

231:	VariableStatement => "var" VariableDeclarationList ";" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 134

232:	VariableDeclarationList => VariableDeclarationList "," . VariableDeclaration ("," ";")
	VariableDeclaration => . Identifier Initializer
	VariableDeclaration => . Identifier
	Identifier => . '$ident
		'$ident => shift 45
		Identifier => shift 87
		VariableDeclaration => shift 242

233:	Initializer => "=" . AssignmentExpression ("in" "," ";")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 241

234:	VariableDeclaration => Identifier Initializer . ("in" "," ";")
		";" => reduce 138
		"," => reduce 138
		"in" => reduce 138

235:	Block => "{" StatementList "}" . ("default" "case" '$end "else" "}" "finally" "catch" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 130

236:	StatementList => StatementList Statement . ("default" "case" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{" "}")
		$default => reduce 133

237:	FunctionDeclaration => "function" Identifier "(" . ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
	FunctionDeclaration => "function" Identifier "(" . FormalParameterList ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
	FormalParameterList => . Identifier
	FormalParameterList => . FormalParameterList "," Identifier
	Identifier => . '$ident
		'$ident => shift 45
		Identifier => shift 238
		FormalParameterList => shift 239
		")" => shift 240

238:	FormalParameterList => Identifier . ("," ")")
		")" => reduce 195
		"," => reduce 195

239:	FormalParameterList => FormalParameterList . "," Identifier ("," ")")
	FunctionDeclaration => "function" Identifier "(" FormalParameterList . ")" "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		")" => shift 291
		"," => shift 292

240:	FunctionDeclaration => "function" Identifier "(" ")" . "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		"{" => shift 290

241:	Initializer => "=" AssignmentExpression . ("in" "," ";")
		";" => reduce 141
		"," => reduce 141
		"in" => reduce 141

242:	VariableDeclarationList => VariableDeclarationList "," VariableDeclaration . ("," ";")
		";" => reduce 136
		"," => reduce 136

243:	IfStatement => "if" "(" Expression ")" . Statement "else" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	IfStatement => "if" "(" Expression ")" . Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 289

244:	IterationStatement => "do" Statement "while" "(" . Expression ")" ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 288

245:	IterationStatement => "while" "(" Expression ")" . Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 287

246:	Expression => Expression . "," AssignmentExpression ("," ";")
	OptExprStmt => Expression . ";" (";" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		";" => shift 286
		"," => shift 91

247:	OptExprStmt => ";" . (";" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 154

248:	IterationStatement => "for" "(" OptExprStmtNoIn OptExprStmt . OptExprClose Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	OptExprClose => . ";"
	OptExprClose => . Expression ")"
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 283
		";" => shift 284
		OptExprClose => shift 285

249:	OptExprStmtNoIn => ExpressionNoIn ";" . (";" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 153

250:	IterationStatement => "for" "(" LeftHandSideExpression "in" . Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 282

251:	VariableDeclarationList => VariableDeclarationList . "," VariableDeclaration ("," ";")
	VariableDeclarationListNoIn => VariableDeclarationList . (";")
		"," => shift 232
		";" => reduce 137

252:	IterationStatement => "for" "(" "var" VariableDeclarationListNoIn . ";" OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 281

253:	VariableDeclarationList => VariableDeclaration . ("," ";")
	VariableDeclarationNoIn => VariableDeclaration . ("in")
		"in" => reduce 140
		";" => reduce 135
		"," => reduce 135

254:	IterationStatement => "for" "(" "var" VariableDeclarationNoIn . "in" Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"in" => shift 280

255:	ContinueStatement => "continue" $P3 Identifier ";" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 158

256:	BreakStatement => "break" $P4 Identifier ";" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 161

257:	ReturnStatement => "return" $P5 Expression ";" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 164

258:	WithStatement => "with" "(" Expression ")" . Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 279

259:	SwitchStatement => "switch" "(" Expression ")" . CaseBlock ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseBlock => . "{" CaseClauses "}"
	CaseBlock => . "{" "}"
	CaseBlock => . "{" CaseClauses DefaultClause CaseClauses "}"
	CaseBlock => . "{" CaseClauses DefaultClause "}"
	CaseBlock => . "{" DefaultClause CaseClauses "}"
	CaseBlock => . "{" DefaultClause "}"
		"{" => shift 277
		CaseBlock => shift 278

260:	ThrowStatement => "throw" $P6 Expression ";" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 182

261:	TryStatement => "try" Block Catch Finally . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 186

262:	Catch => "catch" "(" . Identifier ")" Block ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally")
	Identifier => . '$ident
		'$ident => shift 45
		Identifier => shift 276

263:	Finally => "finally" Block . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 188

264:	Arguments => "(" ArgumentList ")" . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		$default => reduce 45

265:	ArgumentList => ArgumentList "," . AssignmentExpression ("," ")")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 275

266:	CallExpression => CallExpression "[" Expression "]" . (":" "]" "in" ")" "*" "/" "%" "-" "+" "<<" ">>" ">>>" "instanceof" ">=" "<=" ">" "<" "==" "!=" "===" "!==" "&" "^" "|" "&&" "||" "," "--" "++" "?" ";" "(" "[" "." "|=" "^=" "&=" ">>>=" ">>=" "<<=" "-=" "+=" "%=" "/=" "*=" "=")
		$default => reduce 42

267:	ConditionalExpression => LogicalORExpression "?" AssignmentExpression ":" . AssignmentExpression ("in" ":" "]" ")" "," ";")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 274

268:	MemberExpression => MemberExpression "[" Expression "]" . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 35

269:	ElementList => ElementList "," AssignmentExpression . (",")
		"," => reduce 24

270:	ArrayLiteral => "[" ElementList "," Elision . "]" (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
	Elision => Elision . "," ("]" "," "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
	ElementList => ElementList "," Elision . AssignmentExpression (",")
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 272
		"," => shift 191
		"]" => shift 273

271:	ArrayLiteral => "[" ElementList "," "]" . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 20

272:	ElementList => ElementList "," Elision AssignmentExpression . (",")
		"," => reduce 23

273:	ArrayLiteral => "[" ElementList "," Elision "]" . (":" "]" "in" ")" "," "||" "&&" "|" "^" "&" "!==" "===" "!=" "==" "<" ">" "<=" ">=" "instanceof" ">>>" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "++" "--" "[" "." "(" "=" "*=" "/=" "%=" "+=" "-=" "<<=" ">>=" ">>>=" "&=" "^=" "|=")
		$default => reduce 19

274:	ConditionalExpression => LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression . ("in" ":" "]" ")" "," ";")
		$default => reduce 98

275:	ArgumentList => ArgumentList "," AssignmentExpression . ("," ")")
		")" => reduce 47
		"," => reduce 47

276:	Catch => "catch" "(" Identifier . ")" Block ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally")
		")" => shift 310

277:	CaseBlock => "{" . DefaultClause "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	DefaultClause => . "default" ":" StatementList
	DefaultClause => . "default" ":"
	CaseBlock => "{" . DefaultClause CaseClauses "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	DefaultClause => . "default" ":" StatementList
	DefaultClause => . "default" ":"
	CaseBlock => "{" . CaseClauses DefaultClause "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseClauses => . CaseClause
	CaseClauses => . CaseClauses CaseClause
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" . CaseClauses DefaultClause CaseClauses "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseClauses => . CaseClause
	CaseClauses => . CaseClauses CaseClause
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" . "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseBlock => "{" . CaseClauses "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseClauses => . CaseClause
	CaseClauses => . CaseClauses CaseClause
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
		"}" => shift 304
		"case" => shift 305
		CaseClause => shift 306
		CaseClauses => shift 307
		"default" => shift 308
		DefaultClause => shift 309

278:	SwitchStatement => "switch" "(" Expression ")" CaseBlock . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 168

279:	WithStatement => "with" "(" Expression ")" Statement . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 167

280:	IterationStatement => "for" "(" "var" VariableDeclarationNoIn "in" . Expression ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 303

281:	IterationStatement => "for" "(" "var" VariableDeclarationListNoIn ";" . OptExprStmt OptExprClose Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	OptExprStmt => . ";"
	OptExprStmt => . Expression ";"
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 246
		";" => shift 247
		OptExprStmt => shift 302

282:	Expression => Expression . "," AssignmentExpression ("," ")")
	IterationStatement => "for" "(" LeftHandSideExpression "in" Expression . ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 301
		"," => shift 91

283:	Expression => Expression . "," AssignmentExpression ("," ")")
	OptExprClose => Expression . ")" ("try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		")" => shift 300
		"," => shift 91

284:	OptExprClose => ";" . ("try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 156

285:	IterationStatement => "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose . Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 299

286:	OptExprStmt => Expression ";" . (";" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" '$ident "delete" "void" "typeof" "++" "--" "+" "-" "~" "!")
		$default => reduce 155

287:	IterationStatement => "while" "(" Expression ")" Statement . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 147

288:	Expression => Expression . "," AssignmentExpression ("," ")")
	IterationStatement => "do" Statement "while" "(" Expression . ")" ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 298
		"," => shift 91

289:	IfStatement => "if" "(" Expression ")" Statement . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	IfStatement => "if" "(" Expression ")" Statement . "else" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"else" => shift 297
		$default => reduce 145
		["else" => reduce 145] REMOVED by precedence

290:	FunctionDeclaration => "function" Identifier "(" ")" "{" . FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
	FunctionBody => . SourceElements
	SourceElements => . SourceElement
	SourceElements => . SourceElements SourceElement
	SourceElement => . Statement
	SourceElement => . FunctionDeclaration
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	FunctionDeclaration => . "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
	FunctionDeclaration => . "function" Identifier "(" ")" "{" FunctionBody "}"
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		"function" => shift 62
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		FunctionDeclaration => shift 77
		Statement => shift 78
		SourceElement => shift 79
		SourceElements => shift 295
		FunctionBody => shift 296

291:	FunctionDeclaration => "function" Identifier "(" FormalParameterList ")" . "{" FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		"{" => shift 294

292:	FormalParameterList => FormalParameterList "," . Identifier ("," ")")
	Identifier => . '$ident
		'$ident => shift 45
		Identifier => shift 293

293:	FormalParameterList => FormalParameterList "," Identifier . ("," ")")
		")" => reduce 196
		"," => reduce 196

294:	FunctionDeclaration => "function" Identifier "(" FormalParameterList ")" "{" . FunctionBody "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
	FunctionBody => . SourceElements
	SourceElements => . SourceElement
	SourceElements => . SourceElements SourceElement
	SourceElement => . Statement
	SourceElement => . FunctionDeclaration
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	FunctionDeclaration => . "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
	FunctionDeclaration => . "function" Identifier "(" ")" "{" FunctionBody "}"
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		"function" => shift 62
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		FunctionDeclaration => shift 77
		Statement => shift 78
		SourceElement => shift 79
		SourceElements => shift 295
		FunctionBody => shift 325

295:	SourceElements => SourceElements . SourceElement ("function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{" "}")
	SourceElement => . Statement
	SourceElement => . FunctionDeclaration
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	FunctionDeclaration => . "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}"
	FunctionDeclaration => . "function" Identifier "(" ")" "{" FunctionBody "}"
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	FunctionBody => SourceElements . ("}")
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		"function" => shift 62
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		FunctionDeclaration => shift 77
		Statement => shift 78
		SourceElement => shift 82
		"}" => reduce 197

296:	FunctionDeclaration => "function" Identifier "(" ")" "{" FunctionBody . "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		"}" => shift 324

297:	IfStatement => "if" "(" Expression ")" Statement "else" . Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 323

298:	IterationStatement => "do" Statement "while" "(" Expression ")" . ";" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		";" => shift 322

299:	IterationStatement => "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 148

300:	OptExprClose => Expression ")" . ("try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 157

301:	IterationStatement => "for" "(" LeftHandSideExpression "in" Expression ")" . Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 321

302:	IterationStatement => "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt . OptExprClose Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	OptExprClose => . ";"
	OptExprClose => . Expression ")"
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 283
		";" => shift 284
		OptExprClose => shift 320

303:	Expression => Expression . "," AssignmentExpression ("," ")")
	IterationStatement => "for" "(" "var" VariableDeclarationNoIn "in" Expression . ")" Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		")" => shift 319
		"," => shift 91

304:	CaseBlock => "{" "}" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 170

305:	CaseClause => "case" . Expression ":" ("}" "case" "default")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	CaseClause => "case" . Expression ":" StatementList ("}" "case" "default")
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	Identifier => . '$ident
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		'$ident => shift 45
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		Identifier => shift 132
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		Expression => shift 318

306:	CaseClauses => CaseClause . ("}" "case" "default")
		"default" => reduce 175
		"case" => reduce 175
		"}" => reduce 175

307:	CaseBlock => "{" CaseClauses . "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseBlock => "{" CaseClauses . DefaultClause CaseClauses "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	DefaultClause => . "default" ":" StatementList
	DefaultClause => . "default" ":"
	CaseClauses => CaseClauses . CaseClause ("}" "case" "default")
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" CaseClauses . DefaultClause "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	DefaultClause => . "default" ":" StatementList
	DefaultClause => . "default" ":"
		"case" => shift 305
		CaseClause => shift 315
		"default" => shift 308
		DefaultClause => shift 316
		"}" => shift 317

308:	DefaultClause => "default" . ":" ("case" "}")
	DefaultClause => "default" . ":" StatementList ("case" "}")
		":" => shift 314

309:	CaseBlock => "{" DefaultClause . CaseClauses "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseClauses => . CaseClause
	CaseClauses => . CaseClauses CaseClause
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" DefaultClause . "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"}" => shift 312
		"case" => shift 305
		CaseClause => shift 306
		CaseClauses => shift 313

310:	Catch => "catch" "(" Identifier ")" . Block ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally")
	Block => . "{" StatementList "}"
	Block => . "{" "}"
		"{" => shift 61
		Block => shift 311

311:	Catch => "catch" "(" Identifier ")" Block . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function" "finally")
		$default => reduce 187

312:	CaseBlock => "{" DefaultClause "}" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 174

313:	CaseClauses => CaseClauses . CaseClause ("case" "}")
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" DefaultClause CaseClauses . "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"}" => shift 333
		"case" => shift 305
		CaseClause => shift 315

314:	DefaultClause => "default" ":" . StatementList ("case" "}")
	StatementList => . Statement
	StatementList => . StatementList Statement
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	DefaultClause => "default" ":" . ("case" "}")
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 84
		StatementList => shift 332
		"}" => reduce 180
		"case" => reduce 180

315:	CaseClauses => CaseClauses CaseClause . ("}" "case" "default")
		"default" => reduce 176
		"case" => reduce 176
		"}" => reduce 176

316:	CaseBlock => "{" CaseClauses DefaultClause . "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseBlock => "{" CaseClauses DefaultClause . CaseClauses "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	CaseClauses => . CaseClause
	CaseClauses => . CaseClauses CaseClause
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
		"case" => shift 305
		CaseClause => shift 306
		CaseClauses => shift 330
		"}" => shift 331

317:	CaseBlock => "{" CaseClauses "}" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 169

318:	CaseClause => "case" Expression . ":" StatementList ("}" "case" "default")
	Expression => Expression . "," AssignmentExpression ("," ":")
	CaseClause => "case" Expression . ":" ("}" "case" "default")
		"," => shift 91
		":" => shift 329

319:	IterationStatement => "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" . Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 328

320:	IterationStatement => "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose . Statement ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 327

321:	IterationStatement => "for" "(" LeftHandSideExpression "in" Expression ")" Statement . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 150

322:	IterationStatement => "do" Statement "while" "(" Expression ")" ";" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 146

323:	IfStatement => "if" "(" Expression ")" Statement "else" Statement . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 144

324:	FunctionDeclaration => "function" Identifier "(" ")" "{" FunctionBody "}" . ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 190

325:	FunctionDeclaration => "function" Identifier "(" FormalParameterList ")" "{" FunctionBody . "}" ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		"}" => shift 326

326:	FunctionDeclaration => "function" Identifier "(" FormalParameterList ")" "{" FunctionBody "}" . ('$end "}" "function" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
		$default => reduce 189

327:	IterationStatement => "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 149

328:	IterationStatement => "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 151

329:	CaseClause => "case" Expression ":" . ("}" "case" "default")
	CaseClause => "case" Expression ":" . StatementList ("}" "case" "default")
	StatementList => . Statement
	StatementList => . StatementList Statement
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 84
		StatementList => shift 335
		"default" => reduce 178
		"case" => reduce 178
		"}" => reduce 178

330:	CaseClauses => CaseClauses . CaseClause ("case" "}")
	CaseClause => . "case" Expression ":" StatementList
	CaseClause => . "case" Expression ":"
	CaseBlock => "{" CaseClauses DefaultClause CaseClauses . "}" ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		"}" => shift 334
		"case" => shift 305
		CaseClause => shift 315

331:	CaseBlock => "{" CaseClauses DefaultClause "}" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 172

332:	StatementList => StatementList . Statement ("case" "}" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	DefaultClause => "default" ":" StatementList . ("case" "}")
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 236
		"}" => reduce 179
		"case" => reduce 179

333:	CaseBlock => "{" DefaultClause CaseClauses "}" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 173

334:	CaseBlock => "{" CaseClauses DefaultClause CaseClauses "}" . ("default" "case" '$end "else" "}" "{" "var" ";" "!" "~" "-" "+" "--" "++" "typeof" "void" "delete" "null" "false" "true" '$float '$fixed '$string "[" "(" "this" "new" "if" "for" "while" "do" "continue" "break" "return" "with" '$ident "switch" "throw" "try" "function")
		$default => reduce 171

335:	StatementList => StatementList . Statement ("}" "case" "default" "try" "throw" "switch" '$ident "with" "return" "break" "continue" "do" "while" "for" "if" "new" "this" "(" "[" '$string '$fixed '$float "true" "false" "null" "delete" "void" "typeof" "++" "--" "+" "-" "~" "!" ";" "var" "{")
	Statement => . Block
	Statement => . VariableStatement
	Statement => . EmptyStatement
	Statement => . ExpressionStatement
	Statement => . IfStatement
	Statement => . IterationStatement
	Statement => . ContinueStatement
	Statement => . BreakStatement
	Statement => . ReturnStatement
	Statement => . WithStatement
	Statement => . LabelledStatement
	Statement => . SwitchStatement
	Statement => . ThrowStatement
	Statement => . TryStatement
	Block => . "{" StatementList "}"
	Block => . "{" "}"
	VariableStatement => . "var" VariableDeclarationList ";"
	EmptyStatement => . ";"
	ExpressionStatement => . Expression ";"
	IfStatement => . "if" "(" Expression ")" Statement "else" Statement
	IfStatement => . "if" "(" Expression ")" Statement
	IterationStatement => . "do" Statement "while" "(" Expression ")" ";"
	IterationStatement => . "while" "(" Expression ")" Statement
	IterationStatement => . "for" "(" OptExprStmtNoIn OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationListNoIn ";" OptExprStmt OptExprClose Statement
	IterationStatement => . "for" "(" LeftHandSideExpression "in" Expression ")" Statement
	IterationStatement => . "for" "(" "var" VariableDeclarationNoIn "in" Expression ")" Statement
	ContinueStatement => . "continue" $P3 Identifier ";"
	ContinueStatement => . "continue" ";"
	BreakStatement => . "break" $P4 Identifier ";"
	BreakStatement => . "break" ";"
	ReturnStatement => . "return" $P5 Expression ";"
	ReturnStatement => . "return" ";"
	WithStatement => . "with" "(" Expression ")" Statement
	SwitchStatement => . "switch" "(" Expression ")" CaseBlock
	LabelledStatement => . Identifier ":" Statement
	ThrowStatement => . "throw" $P6 Expression ";"
	TryStatement => . "try" Block Catch
	TryStatement => . "try" Block Finally
	TryStatement => . "try" Block Catch Finally
	Identifier => . '$ident
	Expression => . AssignmentExpression
	Expression => . Expression "," AssignmentExpression
	AssignmentExpression => . ConditionalExpression
	AssignmentExpression => . LeftHandSideExpression AssignmentOperator AssignmentExpression
	LeftHandSideExpression => . NewExpression
	LeftHandSideExpression => . CallExpression
	ConditionalExpression => . LogicalORExpression
	ConditionalExpression => . LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
	NewExpression => . MemberExpression
	NewExpression => . "new" NewExpression
	CallExpression => . MemberExpression Arguments
	CallExpression => . CallExpression Arguments
	CallExpression => . CallExpression "[" Expression "]"
	CallExpression => . CallExpression "." Identifier
	LogicalORExpression => . LogicalANDExpression
	LogicalORExpression => . LogicalORExpression "||" LogicalANDExpression
	MemberExpression => . PrimaryExpression
	MemberExpression => . MemberExpression "[" Expression "]"
	MemberExpression => . MemberExpression "." Identifier
	MemberExpression => . "new" MemberExpression Arguments
	LogicalANDExpression => . BitwiseORExpression
	LogicalANDExpression => . LogicalANDExpression "&&" BitwiseORExpression
	PrimaryExpression => . "this"
	PrimaryExpression => . Identifier
	PrimaryExpression => . Literal
	PrimaryExpression => . ArrayLiteral
	PrimaryExpression => . "(" Expression ")"
	BitwiseORExpression => . BitwiseXORExpression
	BitwiseORExpression => . BitwiseORExpression "|" BitwiseXORExpression
	Literal => . NullLiteral
	Literal => . BooleanLiteral
	Literal => . NumericLiteral
	Literal => . StringLiteral
	ArrayLiteral => . "[" Elision "]"
	ArrayLiteral => . "[" "]"
	ArrayLiteral => . "[" ElementList "," Elision "]"
	ArrayLiteral => . "[" ElementList "," "]"
	BitwiseXORExpression => . BitwiseANDExpression
	BitwiseXORExpression => . BitwiseXORExpression "^" BitwiseANDExpression
	NullLiteral => . "null"
	BooleanLiteral => . "true"
	BooleanLiteral => . "false"
	NumericLiteral => . '$fixed
	NumericLiteral => . '$float
	StringLiteral => . '$string
	BitwiseANDExpression => . EqualityExpression
	BitwiseANDExpression => . BitwiseANDExpression "&" EqualityExpression
	EqualityExpression => . RelationalExpression
	EqualityExpression => . EqualityExpression "==" RelationalExpression
	EqualityExpression => . EqualityExpression "!=" RelationalExpression
	EqualityExpression => . EqualityExpression "===" RelationalExpression
	EqualityExpression => . EqualityExpression "!==" RelationalExpression
	RelationalExpression => . ShiftExpression
	RelationalExpression => . RelationalExpression "<" ShiftExpression
	RelationalExpression => . RelationalExpression ">" ShiftExpression
	RelationalExpression => . RelationalExpression "<=" ShiftExpression
	RelationalExpression => . RelationalExpression ">=" ShiftExpression
	RelationalExpression => . RelationalExpression "instanceof" ShiftExpression
	ShiftExpression => . AdditiveExpression
	ShiftExpression => . ShiftExpression "<<" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>" AdditiveExpression
	ShiftExpression => . ShiftExpression ">>>" AdditiveExpression
	AdditiveExpression => . MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "+" MultiplicativeExpression
	AdditiveExpression => . AdditiveExpression "-" MultiplicativeExpression
	MultiplicativeExpression => . UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "*" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "/" UnaryExpression
	MultiplicativeExpression => . MultiplicativeExpression "%" UnaryExpression
	UnaryExpression => . PostfixExpression
	UnaryExpression => . "delete" UnaryExpression
	UnaryExpression => . "void" UnaryExpression
	UnaryExpression => . "typeof" UnaryExpression
	UnaryExpression => . "++" UnaryExpression
	UnaryExpression => . "--" UnaryExpression
	UnaryExpression => . "+" UnaryExpression
	UnaryExpression => . "-" UnaryExpression
	UnaryExpression => . "~" UnaryExpression
	UnaryExpression => . "!" UnaryExpression
	PostfixExpression => . LeftHandSideExpression
	PostfixExpression => . LeftHandSideExpression $P1 "++"
	PostfixExpression => . LeftHandSideExpression $P2 "--"
	CaseClause => "case" Expression ":" StatementList . ("}" "case" "default")
		"!" => shift 1
		"~" => shift 2
		"-" => shift 3
		"+" => shift 4
		"--" => shift 5
		"++" => shift 6
		"typeof" => shift 7
		"void" => shift 8
		"delete" => shift 9
		PostfixExpression => shift 10
		UnaryExpression => shift 11
		MultiplicativeExpression => shift 12
		AdditiveExpression => shift 13
		ShiftExpression => shift 14
		RelationalExpression => shift 15
		EqualityExpression => shift 16
		'$string => shift 17
		'$float => shift 18
		'$fixed => shift 19
		"false" => shift 20
		"true" => shift 21
		"null" => shift 22
		BitwiseANDExpression => shift 23
		"[" => shift 24
		StringLiteral => shift 25
		NumericLiteral => shift 26
		BooleanLiteral => shift 27
		NullLiteral => shift 28
		BitwiseXORExpression => shift 29
		"(" => shift 30
		ArrayLiteral => shift 31
		Literal => shift 32
		"this" => shift 33
		BitwiseORExpression => shift 34
		PrimaryExpression => shift 35
		LogicalANDExpression => shift 36
		"new" => shift 37
		MemberExpression => shift 38
		LogicalORExpression => shift 39
		CallExpression => shift 40
		NewExpression => shift 41
		LeftHandSideExpression => shift 42
		ConditionalExpression => shift 43
		AssignmentExpression => shift 44
		'$ident => shift 45
		"try" => shift 46
		"throw" => shift 47
		Identifier => shift 48
		"switch" => shift 49
		"with" => shift 50
		"return" => shift 51
		"break" => shift 52
		"continue" => shift 53
		"for" => shift 54
		"while" => shift 55
		"do" => shift 56
		"if" => shift 57
		Expression => shift 58
		";" => shift 59
		"var" => shift 60
		"{" => shift 61
		TryStatement => shift 63
		ThrowStatement => shift 64
		SwitchStatement => shift 65
		LabelledStatement => shift 66
		WithStatement => shift 67
		ReturnStatement => shift 68
		BreakStatement => shift 69
		ContinueStatement => shift 70
		IterationStatement => shift 71
		IfStatement => shift 72
		ExpressionStatement => shift 73
		EmptyStatement => shift 74
		VariableStatement => shift 75
		Block => shift 76
		Statement => shift 236
		"default" => reduce 177
		"case" => reduce 177
		"}" => reduce 177

