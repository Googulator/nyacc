0 $start => mfile
1 mfile => statement-list
2 mfile => function-file
3 function-file => function-defn
4 function-file => function-file function-defn
5 function-defn => function-decl non-comment-statement statement-list opt-end
6 function-defn => function-decl non-comment-statement opt-end
7 function-defn => function-decl opt-end
8 opt-end =>
9 opt-end => "end" term-list
10 function-decl => function-decl-line lone-comment-list
11 function-decl => function-decl-line
12 nl-list => #\newline
13 nl-list => nl-list #\newline
14 function-decl-line => "function" "[" ident-list "]" "=" ident "(" ident-list ")" term
15 function-decl-line => "function" "[" ident-list "]" "=" ident "(" ")" term
16 function-decl-line => "function" ident "=" ident "(" ident-list ")" term
17 function-decl-line => "function" ident "=" ident "(" ")" term
18 function-decl-line => "function" ident "(" ident-list ")" term
19 function-decl-line => "function" ident "(" ")" term
20 ident-list => ident
21 ident-list => ident-list "," ident
22 statement-list => statement
23 statement-list => statement-list statement
24 statement => lone-comment
25 statement => non-comment-statement
26 non-comment-statement => term
27 non-comment-statement => ident "(" expr-list ")" term
28 non-comment-statement => lval-expr "=" expr term
29 non-comment-statement => "[" lval-expr-list "]" "=" ident "(" ")" term
30 non-comment-statement => "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
31 non-comment-statement => "for" ident "=" expr term statement-list "end" term
32 non-comment-statement => "while" expr term statement-list "end" term
33 non-comment-statement => "if" expr term statement-list elseif-list "else" statement-list "end" term
34 non-comment-statement => "if" expr term statement-list "else" statement-list "end" term
35 non-comment-statement => "if" expr term statement-list "end" term
36 non-comment-statement => "switch" expr term case-list "otherwise" term statement-list "end" term
37 non-comment-statement => "switch" expr term case-list "end" term
38 non-comment-statement => "return" term
39 non-comment-statement => command ident-nc-list term
40 lval-expr-list => lval-expr
41 lval-expr-list => lval-expr-list "," lval-expr
42 lval-expr => ident
43 lval-expr => ident "(" expr-list ")"
44 command => "global"
45 command => "clear"
46 ident-nc-list => ident
47 ident-nc-list => ident-nc-list ident
48 elseif-list => "elseif" expr term statement-list
49 elseif-list => elseif-list "elseif" expr term statement-list
50 case-list =>
51 case-list => case-list "case" expr term statement-list
52 expr-list => expr
53 expr-list => ":"
54 expr-list => expr-list "," expr
55 expr-list => expr-list "," ":"
56 expr => or-expr
57 expr => expr ":" or-expr
58 or-expr => and-expr
59 or-expr => or-expr "|" and-expr
60 and-expr => equality-expr
61 and-expr => and-expr "&" equality-expr
62 equality-expr => rel-expr
63 equality-expr => equality-expr "==" rel-expr
64 equality-expr => equality-expr "~=" rel-expr
65 rel-expr => add-expr
66 rel-expr => rel-expr "<" add-expr
67 rel-expr => rel-expr ">" add-expr
68 rel-expr => rel-expr "<=" add-expr
69 rel-expr => rel-expr ">=" add-expr
70 add-expr => mul-expr
71 add-expr => add-expr "+" mul-expr
72 add-expr => add-expr "-" mul-expr
73 mul-expr => unary-expr
74 mul-expr => mul-expr "*" unary-expr
75 mul-expr => mul-expr "/" unary-expr
76 mul-expr => mul-expr "\" unary-expr
77 mul-expr => mul-expr "^" unary-expr
78 mul-expr => mul-expr ".*" unary-expr
79 mul-expr => mul-expr "./" unary-expr
80 mul-expr => mul-expr ".\" unary-expr
81 mul-expr => mul-expr ".^" unary-expr
82 unary-expr => postfix-expr
83 unary-expr => "-" postfix-expr
84 unary-expr => "+" postfix-expr
85 unary-expr => "~" postfix-expr
86 postfix-expr => primary-expr
87 postfix-expr => ident "(" expr-list ")"
88 postfix-expr => postfix-expr "'"
89 postfix-expr => postfix-expr ".'"
90 primary-expr => ident
91 primary-expr => number
92 primary-expr => string
93 primary-expr => "(" expr ")"
94 primary-expr => "[" "]"
95 primary-expr => "[" matrix-row-list "]"
96 matrix-row-list => matrix-row
97 matrix-row-list => matrix-row-list row-term matrix-row
98 row-term => ";"
99 row-term => #\newline
100 matrix-row => expr
101 matrix-row => matrix-row "," expr
102 term-list => term
103 term-list => term-list term
104 lone-comment-list => lone-comment #\newline
105 lone-comment-list => lone-comment-list lone-comment #\newline
106 term => #\newline
107 term => ";"
108 term => ","
109 ident => '$ident
110 number => '$fx
111 number => '$fl
112 string => '$string
113 lone-comment => '$lone-comm

0:	$start => . mfile ('$end)
	mfile => . statement-list
	mfile => . function-file
	function-file => . function-defn
	function-file => . function-file function-defn
	statement-list => . statement
	statement-list => . statement-list statement
	function-defn => . function-decl non-comment-statement statement-list opt-end
	function-defn => . function-decl non-comment-statement opt-end
	function-defn => . function-decl opt-end
	statement => . lone-comment
	statement => . non-comment-statement
	function-decl => . function-decl-line lone-comment-list
	function-decl => . function-decl-line
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	function-decl-line => . "function" "[" ident-list "]" "=" ident "(" ident-list ")" term
	function-decl-line => . "function" "[" ident-list "]" "=" ident "(" ")" term
	function-decl-line => . "function" ident "=" ident "(" ident-list ")" term
	function-decl-line => . "function" ident "=" ident "(" ")" term
	function-decl-line => . "function" ident "(" ident-list ")" term
	function-decl-line => . "function" ident "(" ")" term
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		"function" => shift 7
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		function-decl-line => shift 19
		non-comment-statement => shift 20
		lone-comment => shift 21
		function-decl => shift 22
		statement => shift 23
		function-defn => shift 24
		function-file => shift 25
		statement-list => shift 26
		mfile => shift 27

1:	ident => '$ident . (")" "]" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" '$ident "," ";" #\newline "=" "(")
		"(" => reduce 109
		"=" => reduce 109
		#\newline => reduce 109
		";" => reduce 109
		"," => reduce 109
		'$ident => reduce 109
		":" => reduce 109
		"|" => reduce 109
		"&" => reduce 109
		"==" => reduce 109
		"~=" => reduce 109
		">=" => reduce 109
		"<=" => reduce 109
		">" => reduce 109
		"<" => reduce 109
		"+" => reduce 109
		"-" => reduce 109
		".^" => reduce 109
		".\" => reduce 109
		"./" => reduce 109
		".*" => reduce 109
		"^" => reduce 109
		"\" => reduce 109
		"/" => reduce 109
		"*" => reduce 109
		".'" => reduce 109
		"'" => reduce 109
		"]" => reduce 109
		")" => reduce 109

2:	term => "," . ("function" '$end "elseif" "else" "case" "otherwise" "end" '$lone-comm "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => reduce 108
		"for" => reduce 108
		"while" => reduce 108
		"if" => reduce 108
		"switch" => reduce 108
		"return" => reduce 108
		"global" => reduce 108
		"clear" => reduce 108
		'$ident => reduce 108
		#\newline => reduce 108
		";" => reduce 108
		"," => reduce 108
		'$lone-comm => reduce 108
		"end" => reduce 108
		"otherwise" => reduce 108
		"case" => reduce 108
		"else" => reduce 108
		"elseif" => reduce 108
		'$end => reduce 108
		"function" => reduce 108

3:	term => ";" . ("function" '$end "elseif" "else" "case" "otherwise" "end" '$lone-comm "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => reduce 107
		"for" => reduce 107
		"while" => reduce 107
		"if" => reduce 107
		"switch" => reduce 107
		"return" => reduce 107
		"global" => reduce 107
		"clear" => reduce 107
		'$ident => reduce 107
		#\newline => reduce 107
		";" => reduce 107
		"," => reduce 107
		'$lone-comm => reduce 107
		"end" => reduce 107
		"otherwise" => reduce 107
		"case" => reduce 107
		"else" => reduce 107
		"elseif" => reduce 107
		'$end => reduce 107
		"function" => reduce 107

4:	term => #\newline . ("function" '$end "elseif" "else" "case" "otherwise" "end" '$lone-comm "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => reduce 106
		"for" => reduce 106
		"while" => reduce 106
		"if" => reduce 106
		"switch" => reduce 106
		"return" => reduce 106
		"global" => reduce 106
		"clear" => reduce 106
		'$ident => reduce 106
		#\newline => reduce 106
		";" => reduce 106
		"," => reduce 106
		'$lone-comm => reduce 106
		"end" => reduce 106
		"otherwise" => reduce 106
		"case" => reduce 106
		"else" => reduce 106
		"elseif" => reduce 106
		'$end => reduce 106
		"function" => reduce 106

5:	command => "clear" . ('$ident)
		'$ident => reduce 45

6:	command => "global" . ('$ident)
		'$ident => reduce 44

7:	function-decl-line => "function" . ident "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident => . '$ident
	function-decl-line => "function" . ident "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident => . '$ident
	function-decl-line => "function" . ident "=" ident "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident => . '$ident
	function-decl-line => "function" . ident "=" ident "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident => . '$ident
	function-decl-line => "function" . "[" ident-list "]" "=" ident "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	function-decl-line => "function" . "[" ident-list "]" "=" ident "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => shift 67
		'$ident => shift 1
		ident => shift 68

8:	lone-comment => '$lone-comm . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 113
		"," => reduce 113
		";" => reduce 113
		#\newline => reduce 113
		'$ident => reduce 113
		"clear" => reduce 113
		"global" => reduce 113
		"return" => reduce 113
		"switch" => reduce 113
		"if" => reduce 113
		"while" => reduce 113
		"for" => reduce 113
		"[" => reduce 113
		"end" => reduce 113
		"else" => reduce 113
		"elseif" => reduce 113
		'$end => reduce 113
		"function" => reduce 113
		"case" => reduce 113
		"otherwise" => reduce 113

9:	non-comment-statement => command . ident-nc-list term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	ident-nc-list => . ident
	ident-nc-list => . ident-nc-list ident
	ident => . '$ident
		'$ident => shift 1
		ident => shift 65
		ident-nc-list => shift 66

10:	non-comment-statement => "return" . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 64

11:	non-comment-statement => "switch" . expr term case-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
	non-comment-statement => "switch" . expr term case-list "otherwise" term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 63

12:	non-comment-statement => "if" . expr term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
	non-comment-statement => "if" . expr term statement-list "else" statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
	non-comment-statement => "if" . expr term statement-list elseif-list "else" statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 62

13:	non-comment-statement => "while" . expr term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 61

14:	non-comment-statement => "for" . ident "=" expr term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	ident => . '$ident
		'$ident => shift 1
		ident => shift 40

15:	non-comment-statement => "[" . lval-expr-list "]" "=" ident "(" expr-list ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	lval-expr-list => . lval-expr
	lval-expr-list => . lval-expr-list "," lval-expr
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	ident => . '$ident
	non-comment-statement => "[" . lval-expr-list "]" "=" ident "(" ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	lval-expr-list => . lval-expr
	lval-expr-list => . lval-expr-list "," lval-expr
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	ident => . '$ident
		'$ident => shift 1
		ident => shift 37
		lval-expr => shift 38
		lval-expr-list => shift 39

16:	non-comment-statement => lval-expr . "=" expr term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"=" => shift 36

17:	lval-expr => ident . "(" expr-list ")" ("=")
	lval-expr => ident . ("=")
	non-comment-statement => ident . "(" expr-list ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"(" => shift 35
		"=" => reduce 42

18:	non-comment-statement => term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 26
		"," => reduce 26
		";" => reduce 26
		#\newline => reduce 26
		'$ident => reduce 26
		"clear" => reduce 26
		"global" => reduce 26
		"return" => reduce 26
		"switch" => reduce 26
		"if" => reduce 26
		"while" => reduce 26
		"for" => reduce 26
		"[" => reduce 26
		"end" => reduce 26
		"else" => reduce 26
		"elseif" => reduce 26
		'$end => reduce 26
		"function" => reduce 26
		"case" => reduce 26
		"otherwise" => reduce 26

19:	function-decl => function-decl-line . ('$end "function" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," "end")
	function-decl => function-decl-line . lone-comment-list ('$end "function" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," "end")
	lone-comment-list => . lone-comment #\newline
	lone-comment-list => . lone-comment-list lone-comment #\newline
	lone-comment => . '$lone-comm
		'$lone-comm => shift 8
		lone-comment => shift 33
		lone-comment-list => shift 34
		"end" => reduce 11
		"," => reduce 11
		";" => reduce 11
		#\newline => reduce 11
		'$ident => reduce 11
		"clear" => reduce 11
		"global" => reduce 11
		"return" => reduce 11
		"switch" => reduce 11
		"if" => reduce 11
		"while" => reduce 11
		"for" => reduce 11
		"[" => reduce 11
		"function" => reduce 11
		'$end => reduce 11

20:	statement => non-comment-statement . ("otherwise" "case" "function" '$end "elseif" "else" "end" '$lone-comm "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => reduce 25
		"for" => reduce 25
		"while" => reduce 25
		"if" => reduce 25
		"switch" => reduce 25
		"return" => reduce 25
		"global" => reduce 25
		"clear" => reduce 25
		'$ident => reduce 25
		#\newline => reduce 25
		";" => reduce 25
		"," => reduce 25
		'$lone-comm => reduce 25
		"end" => reduce 25
		"else" => reduce 25
		"elseif" => reduce 25
		'$end => reduce 25
		"function" => reduce 25
		"case" => reduce 25
		"otherwise" => reduce 25

21:	statement => lone-comment . ("otherwise" "case" "function" '$end "elseif" "else" "end" '$lone-comm "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => reduce 24
		"for" => reduce 24
		"while" => reduce 24
		"if" => reduce 24
		"switch" => reduce 24
		"return" => reduce 24
		"global" => reduce 24
		"clear" => reduce 24
		'$ident => reduce 24
		#\newline => reduce 24
		";" => reduce 24
		"," => reduce 24
		'$lone-comm => reduce 24
		"end" => reduce 24
		"else" => reduce 24
		"elseif" => reduce 24
		'$end => reduce 24
		"function" => reduce 24
		"case" => reduce 24
		"otherwise" => reduce 24

22:	function-defn => function-decl . opt-end ('$end "function")
	opt-end => .
	opt-end => . "end" term-list
	function-defn => function-decl . non-comment-statement opt-end ('$end "function")
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	function-defn => function-decl . non-comment-statement statement-list opt-end ('$end "function")
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 30
		"end" => shift 31
		opt-end => shift 32
		'$end => reduce 8
		"function" => reduce 8

23:	statement-list => statement . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 22
		"," => reduce 22
		";" => reduce 22
		#\newline => reduce 22
		'$ident => reduce 22
		"clear" => reduce 22
		"global" => reduce 22
		"return" => reduce 22
		"switch" => reduce 22
		"if" => reduce 22
		"while" => reduce 22
		"for" => reduce 22
		"[" => reduce 22
		"end" => reduce 22
		"else" => reduce 22
		"elseif" => reduce 22
		'$end => reduce 22
		"function" => reduce 22
		"case" => reduce 22
		"otherwise" => reduce 22

24:	function-file => function-defn . ('$end "function")
		"function" => reduce 3
		'$end => reduce 3

25:	function-file => function-file . function-defn ('$end "function")
	function-defn => . function-decl non-comment-statement statement-list opt-end
	function-defn => . function-decl non-comment-statement opt-end
	function-defn => . function-decl opt-end
	function-decl => . function-decl-line lone-comment-list
	function-decl => . function-decl-line
	function-decl-line => . "function" "[" ident-list "]" "=" ident "(" ident-list ")" term
	function-decl-line => . "function" "[" ident-list "]" "=" ident "(" ")" term
	function-decl-line => . "function" ident "=" ident "(" ident-list ")" term
	function-decl-line => . "function" ident "=" ident "(" ")" term
	function-decl-line => . "function" ident "(" ident-list ")" term
	function-decl-line => . "function" ident "(" ")" term
	mfile => function-file . ('$end)
		"function" => shift 7
		function-decl-line => shift 19
		function-decl => shift 22
		function-defn => shift 29
		'$end => reduce 2

26:	statement-list => statement-list . statement ('$end "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	mfile => statement-list . ('$end)
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 28
		'$end => reduce 1

27:	$start => mfile . ('$end)
		'$end => accept 0

28:	statement-list => statement-list statement . ("otherwise" "case" "elseif" "else" "function" "end" '$end "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 23
		"," => reduce 23
		";" => reduce 23
		#\newline => reduce 23
		'$ident => reduce 23
		"clear" => reduce 23
		"global" => reduce 23
		"return" => reduce 23
		"switch" => reduce 23
		"if" => reduce 23
		"while" => reduce 23
		"for" => reduce 23
		"[" => reduce 23
		'$end => reduce 23
		"end" => reduce 23
		"function" => reduce 23
		"else" => reduce 23
		"elseif" => reduce 23
		"case" => reduce 23
		"otherwise" => reduce 23

29:	function-file => function-file function-defn . ('$end "function")
		"function" => reduce 4
		'$end => reduce 4

30:	function-defn => function-decl non-comment-statement . statement-list opt-end ('$end "function")
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	function-defn => function-decl non-comment-statement . opt-end ('$end "function")
	opt-end => .
	opt-end => . "end" term-list
		"end" => shift 31
		opt-end => shift 120
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 23
		statement-list => shift 121
		'$end => reduce 8
		"function" => reduce 8

31:	opt-end => "end" . term-list ('$end "function")
	term-list => . term
	term-list => . term-list term
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 118
		term-list => shift 119

32:	function-defn => function-decl opt-end . ('$end "function")
		"function" => reduce 7
		'$end => reduce 7

33:	lone-comment-list => lone-comment . #\newline ('$end "function" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," "end" '$lone-comm)
		#\newline => shift 117

34:	lone-comment-list => lone-comment-list . lone-comment #\newline ('$end "function" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," "end" '$lone-comm)
	lone-comment => . '$lone-comm
	function-decl => function-decl-line lone-comment-list . ('$end "function" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," "end")
		'$lone-comm => shift 8
		lone-comment => shift 116
		"end" => reduce 10
		"," => reduce 10
		";" => reduce 10
		#\newline => reduce 10
		'$ident => reduce 10
		"clear" => reduce 10
		"global" => reduce 10
		"return" => reduce 10
		"switch" => reduce 10
		"if" => reduce 10
		"while" => reduce 10
		"for" => reduce 10
		"[" => reduce 10
		"function" => reduce 10
		'$end => reduce 10

35:	non-comment-statement => ident "(" . expr-list ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	expr-list => . expr
	expr-list => . ":"
	expr-list => . expr-list "," expr
	expr-list => . expr-list "," ":"
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
	lval-expr => ident "(" . expr-list ")" ("=")
	expr-list => . expr
	expr-list => . ":"
	expr-list => . expr-list "," expr
	expr-list => . expr-list "," ":"
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		":" => shift 113
		expr => shift 114
		expr-list => shift 115

36:	non-comment-statement => lval-expr "=" . expr term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 112

37:	lval-expr => ident . "(" expr-list ")" ("," "]")
	lval-expr => ident . ("," "]")
		"(" => shift 111
		"]" => reduce 42
		"," => reduce 42

38:	lval-expr-list => lval-expr . ("," "]")
		"]" => reduce 40
		"," => reduce 40

39:	non-comment-statement => "[" lval-expr-list . "]" "=" ident "(" ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	lval-expr-list => lval-expr-list . "," lval-expr ("," "]")
	non-comment-statement => "[" lval-expr-list . "]" "=" ident "(" expr-list ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"," => shift 109
		"]" => shift 110

40:	non-comment-statement => "for" ident . "=" expr term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"=" => shift 108

41:	string => '$string . ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 112
		";" => reduce 112
		#\newline => reduce 112
		":" => reduce 112
		"|" => reduce 112
		"&" => reduce 112
		"==" => reduce 112
		"~=" => reduce 112
		">=" => reduce 112
		"<=" => reduce 112
		">" => reduce 112
		"<" => reduce 112
		"+" => reduce 112
		"-" => reduce 112
		".^" => reduce 112
		".\" => reduce 112
		"./" => reduce 112
		".*" => reduce 112
		"^" => reduce 112
		"\" => reduce 112
		"/" => reduce 112
		"*" => reduce 112
		".'" => reduce 112
		"'" => reduce 112
		")" => reduce 112
		"]" => reduce 112

42:	number => '$fl . ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 111
		";" => reduce 111
		#\newline => reduce 111
		":" => reduce 111
		"|" => reduce 111
		"&" => reduce 111
		"==" => reduce 111
		"~=" => reduce 111
		">=" => reduce 111
		"<=" => reduce 111
		">" => reduce 111
		"<" => reduce 111
		"+" => reduce 111
		"-" => reduce 111
		".^" => reduce 111
		".\" => reduce 111
		"./" => reduce 111
		".*" => reduce 111
		"^" => reduce 111
		"\" => reduce 111
		"/" => reduce 111
		"*" => reduce 111
		".'" => reduce 111
		"'" => reduce 111
		")" => reduce 111
		"]" => reduce 111

43:	number => '$fx . ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 110
		";" => reduce 110
		#\newline => reduce 110
		":" => reduce 110
		"|" => reduce 110
		"&" => reduce 110
		"==" => reduce 110
		"~=" => reduce 110
		">=" => reduce 110
		"<=" => reduce 110
		">" => reduce 110
		"<" => reduce 110
		"+" => reduce 110
		"-" => reduce 110
		".^" => reduce 110
		".\" => reduce 110
		"./" => reduce 110
		".*" => reduce 110
		"^" => reduce 110
		"\" => reduce 110
		"/" => reduce 110
		"*" => reduce 110
		".'" => reduce 110
		"'" => reduce 110
		")" => reduce 110
		"]" => reduce 110

44:	primary-expr => "[" . matrix-row-list "]" ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" ".'" "'" "," ";" #\newline)
	matrix-row-list => . matrix-row
	matrix-row-list => . matrix-row-list row-term matrix-row
	matrix-row => . expr
	matrix-row => . matrix-row "," expr
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
	primary-expr => "[" . "]" ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" ".'" "'" "," ";" #\newline)
		"]" => shift 104
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 105
		matrix-row => shift 106
		matrix-row-list => shift 107

45:	primary-expr => "(" . expr ")" ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" ".'" "'" "," ";" #\newline)
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 103

46:	primary-expr => string . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" ".'" "'" "," ";" #\newline)
		#\newline => reduce 92
		";" => reduce 92
		"," => reduce 92
		"'" => reduce 92
		".'" => reduce 92
		"*" => reduce 92
		"/" => reduce 92
		"\" => reduce 92
		"^" => reduce 92
		".*" => reduce 92
		"./" => reduce 92
		".\" => reduce 92
		".^" => reduce 92
		"-" => reduce 92
		"+" => reduce 92
		"<" => reduce 92
		">" => reduce 92
		"<=" => reduce 92
		">=" => reduce 92
		"~=" => reduce 92
		"==" => reduce 92
		"&" => reduce 92
		"|" => reduce 92
		":" => reduce 92
		")" => reduce 92
		"]" => reduce 92

47:	primary-expr => number . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" ".'" "'" "," ";" #\newline)
		#\newline => reduce 91
		";" => reduce 91
		"," => reduce 91
		"'" => reduce 91
		".'" => reduce 91
		"*" => reduce 91
		"/" => reduce 91
		"\" => reduce 91
		"^" => reduce 91
		".*" => reduce 91
		"./" => reduce 91
		".\" => reduce 91
		".^" => reduce 91
		"-" => reduce 91
		"+" => reduce 91
		"<" => reduce 91
		">" => reduce 91
		"<=" => reduce 91
		">=" => reduce 91
		"~=" => reduce 91
		"==" => reduce 91
		"&" => reduce 91
		"|" => reduce 91
		":" => reduce 91
		")" => reduce 91
		"]" => reduce 91

48:	primary-expr => ident . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" ".'" "'" "," ";" #\newline)
	postfix-expr => ident . "(" expr-list ")" ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"(" => shift 102
		#\newline => reduce 90
		";" => reduce 90
		"," => reduce 90
		"'" => reduce 90
		".'" => reduce 90
		"*" => reduce 90
		"/" => reduce 90
		"\" => reduce 90
		"^" => reduce 90
		".*" => reduce 90
		"./" => reduce 90
		".\" => reduce 90
		".^" => reduce 90
		"-" => reduce 90
		"+" => reduce 90
		"<" => reduce 90
		">" => reduce 90
		"<=" => reduce 90
		">=" => reduce 90
		"~=" => reduce 90
		"==" => reduce 90
		"&" => reduce 90
		"|" => reduce 90
		":" => reduce 90
		")" => reduce 90
		"]" => reduce 90

49:	postfix-expr => primary-expr . ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 86
		";" => reduce 86
		#\newline => reduce 86
		":" => reduce 86
		"|" => reduce 86
		"&" => reduce 86
		"==" => reduce 86
		"~=" => reduce 86
		">=" => reduce 86
		"<=" => reduce 86
		">" => reduce 86
		"<" => reduce 86
		"+" => reduce 86
		"-" => reduce 86
		".^" => reduce 86
		".\" => reduce 86
		"./" => reduce 86
		".*" => reduce 86
		"^" => reduce 86
		"\" => reduce 86
		"/" => reduce 86
		"*" => reduce 86
		".'" => reduce 86
		"'" => reduce 86
		")" => reduce 86
		"]" => reduce 86

50:	unary-expr => "~" . postfix-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline)
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		postfix-expr => shift 101

51:	unary-expr => "+" . postfix-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline)
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		postfix-expr => shift 100

52:	unary-expr => "-" . postfix-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline)
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		postfix-expr => shift 99

53:	postfix-expr => postfix-expr . ".'" ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	postfix-expr => postfix-expr . "'" ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	unary-expr => postfix-expr . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline)
		"'" => shift 97
		".'" => shift 98
		#\newline => reduce 82
		";" => reduce 82
		"," => reduce 82
		"*" => reduce 82
		"/" => reduce 82
		"\" => reduce 82
		"^" => reduce 82
		".*" => reduce 82
		"./" => reduce 82
		".\" => reduce 82
		".^" => reduce 82
		"-" => reduce 82
		"+" => reduce 82
		"<" => reduce 82
		">" => reduce 82
		"<=" => reduce 82
		">=" => reduce 82
		"~=" => reduce 82
		"==" => reduce 82
		"&" => reduce 82
		"|" => reduce 82
		":" => reduce 82
		")" => reduce 82
		"]" => reduce 82

54:	mul-expr => unary-expr . ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 73
		";" => reduce 73
		#\newline => reduce 73
		":" => reduce 73
		"|" => reduce 73
		"&" => reduce 73
		"==" => reduce 73
		"~=" => reduce 73
		">=" => reduce 73
		"<=" => reduce 73
		">" => reduce 73
		"<" => reduce 73
		"+" => reduce 73
		"-" => reduce 73
		".^" => reduce 73
		".\" => reduce 73
		"./" => reduce 73
		".*" => reduce 73
		"^" => reduce 73
		"\" => reduce 73
		"/" => reduce 73
		"*" => reduce 73
		")" => reduce 73
		"]" => reduce 73

55:	mul-expr => mul-expr . ".^" unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	mul-expr => mul-expr . ".\" unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	mul-expr => mul-expr . "./" unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	mul-expr => mul-expr . ".*" unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	mul-expr => mul-expr . "^" unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	mul-expr => mul-expr . "\" unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	mul-expr => mul-expr . "/" unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	mul-expr => mul-expr . "*" unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	add-expr => mul-expr . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline)
		"*" => shift 89
		"/" => shift 90
		"\" => shift 91
		"^" => shift 92
		".*" => shift 93
		"./" => shift 94
		".\" => shift 95
		".^" => shift 96
		#\newline => reduce 70
		";" => reduce 70
		"," => reduce 70
		"-" => reduce 70
		"+" => reduce 70
		"<" => reduce 70
		">" => reduce 70
		"<=" => reduce 70
		">=" => reduce 70
		"~=" => reduce 70
		"==" => reduce 70
		"&" => reduce 70
		"|" => reduce 70
		":" => reduce 70
		")" => reduce 70
		"]" => reduce 70

56:	add-expr => add-expr . "-" mul-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline)
	add-expr => add-expr . "+" mul-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline)
	rel-expr => add-expr . ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"+" => shift 87
		"-" => shift 88
		"," => reduce 65
		";" => reduce 65
		#\newline => reduce 65
		":" => reduce 65
		"|" => reduce 65
		"&" => reduce 65
		"==" => reduce 65
		"~=" => reduce 65
		">=" => reduce 65
		"<=" => reduce 65
		">" => reduce 65
		"<" => reduce 65
		")" => reduce 65
		"]" => reduce 65

57:	rel-expr => rel-expr . ">=" add-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	rel-expr => rel-expr . "<=" add-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	rel-expr => rel-expr . ">" add-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	rel-expr => rel-expr . "<" add-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	equality-expr => rel-expr . ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline)
		"<" => shift 83
		">" => shift 84
		"<=" => shift 85
		">=" => shift 86
		#\newline => reduce 62
		";" => reduce 62
		"," => reduce 62
		"~=" => reduce 62
		"==" => reduce 62
		"&" => reduce 62
		"|" => reduce 62
		":" => reduce 62
		")" => reduce 62
		"]" => reduce 62

58:	equality-expr => equality-expr . "~=" rel-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline)
	equality-expr => equality-expr . "==" rel-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline)
	and-expr => equality-expr . ("]" ")" "&" "|" ":" #\newline ";" ",")
		"==" => shift 81
		"~=" => shift 82
		"," => reduce 60
		";" => reduce 60
		#\newline => reduce 60
		":" => reduce 60
		"|" => reduce 60
		"&" => reduce 60
		")" => reduce 60
		"]" => reduce 60

59:	and-expr => and-expr . "&" equality-expr ("]" ")" "&" "|" ":" #\newline ";" ",")
	or-expr => and-expr . ("]" ")" ":" "|" "," ";" #\newline)
		"&" => shift 80
		#\newline => reduce 58
		";" => reduce 58
		"," => reduce 58
		"|" => reduce 58
		":" => reduce 58
		")" => reduce 58
		"]" => reduce 58

60:	or-expr => or-expr . "|" and-expr ("]" ")" ":" "|" "," ";" #\newline)
	expr => or-expr . ("]" ")" ":" #\newline ";" ",")
		"|" => shift 79
		"," => reduce 56
		";" => reduce 56
		#\newline => reduce 56
		":" => reduce 56
		")" => reduce 56
		"]" => reduce 56

61:	expr => expr . ":" or-expr (":" #\newline ";" ",")
	non-comment-statement => "while" expr . term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 78
		":" => shift 75

62:	non-comment-statement => "if" expr . term statement-list elseif-list "else" statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
	non-comment-statement => "if" expr . term statement-list "else" statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
	expr => expr . ":" or-expr (":" #\newline ";" ",")
	non-comment-statement => "if" expr . term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		":" => shift 75
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 77

63:	non-comment-statement => "switch" expr . term case-list "otherwise" term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
	expr => expr . ":" or-expr (":" #\newline ";" ",")
	non-comment-statement => "switch" expr . term case-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		":" => shift 75
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 76

64:	non-comment-statement => "return" term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 38
		"," => reduce 38
		";" => reduce 38
		#\newline => reduce 38
		'$ident => reduce 38
		"clear" => reduce 38
		"global" => reduce 38
		"return" => reduce 38
		"switch" => reduce 38
		"if" => reduce 38
		"while" => reduce 38
		"for" => reduce 38
		"[" => reduce 38
		"end" => reduce 38
		"else" => reduce 38
		"elseif" => reduce 38
		'$end => reduce 38
		"function" => reduce 38
		"case" => reduce 38
		"otherwise" => reduce 38

65:	ident-nc-list => ident . ('$ident #\newline ";" ",")
		"," => reduce 46
		";" => reduce 46
		#\newline => reduce 46
		'$ident => reduce 46

66:	ident-nc-list => ident-nc-list . ident ('$ident #\newline ";" ",")
	ident => . '$ident
	non-comment-statement => command ident-nc-list . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 73
		'$ident => shift 1
		ident => shift 74

67:	function-decl-line => "function" "[" . ident-list "]" "=" ident "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident-list => . ident
	ident-list => . ident-list "," ident
	ident => . '$ident
	function-decl-line => "function" "[" . ident-list "]" "=" ident "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident-list => . ident
	ident-list => . ident-list "," ident
	ident => . '$ident
		'$ident => shift 1
		ident => shift 71
		ident-list => shift 72

68:	function-decl-line => "function" ident . "=" ident "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	function-decl-line => "function" ident . "=" ident "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	function-decl-line => "function" ident . "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	function-decl-line => "function" ident . "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"(" => shift 69
		"=" => shift 70

69:	function-decl-line => "function" ident "(" . ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	function-decl-line => "function" ident "(" . ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident-list => . ident
	ident-list => . ident-list "," ident
	ident => . '$ident
		'$ident => shift 1
		ident => shift 71
		ident-list => shift 164
		")" => shift 165

70:	function-decl-line => "function" ident "=" . ident "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident => . '$ident
	function-decl-line => "function" ident "=" . ident "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident => . '$ident
		'$ident => shift 1
		ident => shift 163

71:	ident-list => ident . (")" "," "]")
		"]" => reduce 20
		"," => reduce 20
		")" => reduce 20

72:	function-decl-line => "function" "[" ident-list . "]" "=" ident "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident-list => ident-list . "," ident ("," "]")
	function-decl-line => "function" "[" ident-list . "]" "=" ident "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"," => shift 161
		"]" => shift 162

73:	non-comment-statement => command ident-nc-list term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 39
		"," => reduce 39
		";" => reduce 39
		#\newline => reduce 39
		'$ident => reduce 39
		"clear" => reduce 39
		"global" => reduce 39
		"return" => reduce 39
		"switch" => reduce 39
		"if" => reduce 39
		"while" => reduce 39
		"for" => reduce 39
		"[" => reduce 39
		"end" => reduce 39
		"else" => reduce 39
		"elseif" => reduce 39
		'$end => reduce 39
		"function" => reduce 39
		"case" => reduce 39
		"otherwise" => reduce 39

74:	ident-nc-list => ident-nc-list ident . ('$ident #\newline ";" ",")
		"," => reduce 47
		";" => reduce 47
		#\newline => reduce 47
		'$ident => reduce 47

75:	expr => expr ":" . or-expr ("]" ")" ":" #\newline ";" ",")
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 160

76:	non-comment-statement => "switch" expr term . case-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	case-list => .
	case-list => . case-list "case" expr term statement-list
	non-comment-statement => "switch" expr term . case-list "otherwise" term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	case-list => .
	case-list => . case-list "case" expr term statement-list
		case-list => shift 159
		"otherwise" => reduce 50
		"end" => reduce 50
		"case" => reduce 50

77:	non-comment-statement => "if" expr term . statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	non-comment-statement => "if" expr term . statement-list "else" statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	non-comment-statement => "if" expr term . statement-list elseif-list "else" statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 23
		statement-list => shift 158

78:	non-comment-statement => "while" expr term . statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 23
		statement-list => shift 157

79:	or-expr => or-expr "|" . and-expr ("]" ")" ":" "|" "," ";" #\newline)
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 156

80:	and-expr => and-expr "&" . equality-expr ("]" ")" "&" "|" ":" #\newline ";" ",")
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 155

81:	equality-expr => equality-expr "==" . rel-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline)
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 154

82:	equality-expr => equality-expr "~=" . rel-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline)
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 153

83:	rel-expr => rel-expr "<" . add-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 152

84:	rel-expr => rel-expr ">" . add-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 151

85:	rel-expr => rel-expr "<=" . add-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 150

86:	rel-expr => rel-expr ">=" . add-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 149

87:	add-expr => add-expr "+" . mul-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline)
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 148

88:	add-expr => add-expr "-" . mul-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline)
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 147

89:	mul-expr => mul-expr "*" . unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 146

90:	mul-expr => mul-expr "/" . unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 145

91:	mul-expr => mul-expr "\" . unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 144

92:	mul-expr => mul-expr "^" . unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 143

93:	mul-expr => mul-expr ".*" . unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 142

94:	mul-expr => mul-expr "./" . unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 141

95:	mul-expr => mul-expr ".\" . unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 140

96:	mul-expr => mul-expr ".^" . unary-expr ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 139

97:	postfix-expr => postfix-expr "'" . ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 88
		";" => reduce 88
		#\newline => reduce 88
		":" => reduce 88
		"|" => reduce 88
		"&" => reduce 88
		"==" => reduce 88
		"~=" => reduce 88
		">=" => reduce 88
		"<=" => reduce 88
		">" => reduce 88
		"<" => reduce 88
		"+" => reduce 88
		"-" => reduce 88
		".^" => reduce 88
		".\" => reduce 88
		"./" => reduce 88
		".*" => reduce 88
		"^" => reduce 88
		"\" => reduce 88
		"/" => reduce 88
		"*" => reduce 88
		".'" => reduce 88
		"'" => reduce 88
		")" => reduce 88
		"]" => reduce 88

98:	postfix-expr => postfix-expr ".'" . ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 89
		";" => reduce 89
		#\newline => reduce 89
		":" => reduce 89
		"|" => reduce 89
		"&" => reduce 89
		"==" => reduce 89
		"~=" => reduce 89
		">=" => reduce 89
		"<=" => reduce 89
		">" => reduce 89
		"<" => reduce 89
		"+" => reduce 89
		"-" => reduce 89
		".^" => reduce 89
		".\" => reduce 89
		"./" => reduce 89
		".*" => reduce 89
		"^" => reduce 89
		"\" => reduce 89
		"/" => reduce 89
		"*" => reduce 89
		".'" => reduce 89
		"'" => reduce 89
		")" => reduce 89
		"]" => reduce 89

99:	postfix-expr => postfix-expr . ".'" ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline "'" ".'")
	postfix-expr => postfix-expr . "'" ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline "'" ".'")
	unary-expr => "-" postfix-expr . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline)
		"'" => shift 97
		".'" => shift 98
		#\newline => reduce 83
		";" => reduce 83
		"," => reduce 83
		"*" => reduce 83
		"/" => reduce 83
		"\" => reduce 83
		"^" => reduce 83
		".*" => reduce 83
		"./" => reduce 83
		".\" => reduce 83
		".^" => reduce 83
		"-" => reduce 83
		"+" => reduce 83
		"<" => reduce 83
		">" => reduce 83
		"<=" => reduce 83
		">=" => reduce 83
		"~=" => reduce 83
		"==" => reduce 83
		"&" => reduce 83
		"|" => reduce 83
		":" => reduce 83
		")" => reduce 83
		"]" => reduce 83

100:	postfix-expr => postfix-expr . ".'" ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline "'" ".'")
	postfix-expr => postfix-expr . "'" ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline "'" ".'")
	unary-expr => "+" postfix-expr . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline)
		"'" => shift 97
		".'" => shift 98
		#\newline => reduce 84
		";" => reduce 84
		"," => reduce 84
		"*" => reduce 84
		"/" => reduce 84
		"\" => reduce 84
		"^" => reduce 84
		".*" => reduce 84
		"./" => reduce 84
		".\" => reduce 84
		".^" => reduce 84
		"-" => reduce 84
		"+" => reduce 84
		"<" => reduce 84
		">" => reduce 84
		"<=" => reduce 84
		">=" => reduce 84
		"~=" => reduce 84
		"==" => reduce 84
		"&" => reduce 84
		"|" => reduce 84
		":" => reduce 84
		")" => reduce 84
		"]" => reduce 84

101:	postfix-expr => postfix-expr . ".'" ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline "'" ".'")
	postfix-expr => postfix-expr . "'" ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline "'" ".'")
	unary-expr => "~" postfix-expr . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" "," ";" #\newline)
		"'" => shift 97
		".'" => shift 98
		#\newline => reduce 85
		";" => reduce 85
		"," => reduce 85
		"*" => reduce 85
		"/" => reduce 85
		"\" => reduce 85
		"^" => reduce 85
		".*" => reduce 85
		"./" => reduce 85
		".\" => reduce 85
		".^" => reduce 85
		"-" => reduce 85
		"+" => reduce 85
		"<" => reduce 85
		">" => reduce 85
		"<=" => reduce 85
		">=" => reduce 85
		"~=" => reduce 85
		"==" => reduce 85
		"&" => reduce 85
		"|" => reduce 85
		":" => reduce 85
		")" => reduce 85
		"]" => reduce 85

102:	postfix-expr => ident "(" . expr-list ")" ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
	expr-list => . expr
	expr-list => . ":"
	expr-list => . expr-list "," expr
	expr-list => . expr-list "," ":"
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		":" => shift 113
		expr => shift 114
		expr-list => shift 138

103:	expr => expr . ":" or-expr (":" ")")
	primary-expr => "(" expr . ")" ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" ".'" "'" "," ";" #\newline)
		")" => shift 137
		":" => shift 75

104:	primary-expr => "[" "]" . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" ".'" "'" "," ";" #\newline)
		#\newline => reduce 94
		";" => reduce 94
		"," => reduce 94
		"'" => reduce 94
		".'" => reduce 94
		"*" => reduce 94
		"/" => reduce 94
		"\" => reduce 94
		"^" => reduce 94
		".*" => reduce 94
		"./" => reduce 94
		".\" => reduce 94
		".^" => reduce 94
		"-" => reduce 94
		"+" => reduce 94
		"<" => reduce 94
		">" => reduce 94
		"<=" => reduce 94
		">=" => reduce 94
		"~=" => reduce 94
		"==" => reduce 94
		"&" => reduce 94
		"|" => reduce 94
		":" => reduce 94
		")" => reduce 94
		"]" => reduce 94

105:	expr => expr . ":" or-expr (":" "," ";" #\newline "]")
	matrix-row => expr . (#\newline ";" "," "]")
		":" => shift 75
		"]" => reduce 100
		"," => reduce 100
		";" => reduce 100
		#\newline => reduce 100

106:	matrix-row => matrix-row . "," expr (#\newline ";" "," "]")
	matrix-row-list => matrix-row . (";" #\newline "]")
		"," => shift 136
		"]" => reduce 96
		#\newline => reduce 96
		";" => reduce 96

107:	matrix-row-list => matrix-row-list . row-term matrix-row (";" #\newline "]")
	row-term => . ";"
	row-term => . #\newline
	primary-expr => "[" matrix-row-list . "]" ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" ".'" "'" "," ";" #\newline)
		"]" => shift 132
		#\newline => shift 133
		";" => shift 134
		row-term => shift 135

108:	non-comment-statement => "for" ident "=" . expr term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 131

109:	lval-expr-list => lval-expr-list "," . lval-expr ("," "]")
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	ident => . '$ident
		'$ident => shift 1
		ident => shift 37
		lval-expr => shift 130

110:	non-comment-statement => "[" lval-expr-list "]" . "=" ident "(" expr-list ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	non-comment-statement => "[" lval-expr-list "]" . "=" ident "(" ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"=" => shift 129

111:	lval-expr => ident "(" . expr-list ")" ("," "]")
	expr-list => . expr
	expr-list => . ":"
	expr-list => . expr-list "," expr
	expr-list => . expr-list "," ":"
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		":" => shift 113
		expr => shift 114
		expr-list => shift 128

112:	expr => expr . ":" or-expr (":" #\newline ";" ",")
	non-comment-statement => lval-expr "=" expr . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 127
		":" => shift 75

113:	expr-list => ":" . ("," ")")
		")" => reduce 53
		"," => reduce 53

114:	expr => expr . ":" or-expr ("," ":" ")")
	expr-list => expr . ("," ")")
		":" => shift 75
		")" => reduce 52
		"," => reduce 52

115:	lval-expr => ident "(" expr-list . ")" ("=")
	expr-list => expr-list . "," ":" ("," ")")
	expr-list => expr-list . "," expr ("," ")")
	non-comment-statement => ident "(" expr-list . ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"," => shift 125
		")" => shift 126

116:	lone-comment-list => lone-comment-list lone-comment . #\newline ('$end "function" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," "end" '$lone-comm)
		#\newline => shift 124

117:	lone-comment-list => lone-comment #\newline . ('$end "function" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," "end" '$lone-comm)
		'$lone-comm => reduce 104
		"end" => reduce 104
		"," => reduce 104
		";" => reduce 104
		#\newline => reduce 104
		'$ident => reduce 104
		"clear" => reduce 104
		"global" => reduce 104
		"return" => reduce 104
		"switch" => reduce 104
		"if" => reduce 104
		"while" => reduce 104
		"for" => reduce 104
		"[" => reduce 104
		"function" => reduce 104
		'$end => reduce 104

118:	term-list => term . ('$end "function" #\newline ";" ",")
		"," => reduce 102
		";" => reduce 102
		#\newline => reduce 102
		"function" => reduce 102
		'$end => reduce 102

119:	term-list => term-list . term ('$end "function" #\newline ";" ",")
	term => . #\newline
	term => . ";"
	term => . ","
	opt-end => "end" term-list . ('$end "function")
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 123
		"function" => reduce 9
		'$end => reduce 9

120:	function-defn => function-decl non-comment-statement opt-end . ('$end "function")
		"function" => reduce 6
		'$end => reduce 6

121:	statement-list => statement-list . statement ('$end "function" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm "end")
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	function-defn => function-decl non-comment-statement statement-list . opt-end ('$end "function")
	opt-end => .
	opt-end => . "end" term-list
		"end" => shift 31
		opt-end => shift 122
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 28
		'$end => reduce 8
		"function" => reduce 8

122:	function-defn => function-decl non-comment-statement statement-list opt-end . ('$end "function")
		"function" => reduce 5
		'$end => reduce 5

123:	term-list => term-list term . ('$end "function" #\newline ";" ",")
		"," => reduce 103
		";" => reduce 103
		#\newline => reduce 103
		"function" => reduce 103
		'$end => reduce 103

124:	lone-comment-list => lone-comment-list lone-comment #\newline . ('$end "function" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," "end" '$lone-comm)
		'$lone-comm => reduce 105
		"end" => reduce 105
		"," => reduce 105
		";" => reduce 105
		#\newline => reduce 105
		'$ident => reduce 105
		"clear" => reduce 105
		"global" => reduce 105
		"return" => reduce 105
		"switch" => reduce 105
		"if" => reduce 105
		"while" => reduce 105
		"for" => reduce 105
		"[" => reduce 105
		"function" => reduce 105
		'$end => reduce 105

125:	expr-list => expr-list "," . expr ("," ")")
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
	expr-list => expr-list "," . ":" ("," ")")
		":" => shift 186
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 187

126:	non-comment-statement => ident "(" expr-list ")" . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
	lval-expr => ident "(" expr-list ")" . ("=")
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 185
		"=" => reduce 43

127:	non-comment-statement => lval-expr "=" expr term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 28
		"," => reduce 28
		";" => reduce 28
		#\newline => reduce 28
		'$ident => reduce 28
		"clear" => reduce 28
		"global" => reduce 28
		"return" => reduce 28
		"switch" => reduce 28
		"if" => reduce 28
		"while" => reduce 28
		"for" => reduce 28
		"[" => reduce 28
		"end" => reduce 28
		"else" => reduce 28
		"elseif" => reduce 28
		'$end => reduce 28
		"function" => reduce 28
		"case" => reduce 28
		"otherwise" => reduce 28

128:	expr-list => expr-list . "," ":" ("," ")")
	expr-list => expr-list . "," expr ("," ")")
	lval-expr => ident "(" expr-list . ")" ("," "]")
		")" => shift 184
		"," => shift 125

129:	non-comment-statement => "[" lval-expr-list "]" "=" . ident "(" ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	ident => . '$ident
	non-comment-statement => "[" lval-expr-list "]" "=" . ident "(" expr-list ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	ident => . '$ident
		'$ident => shift 1
		ident => shift 183

130:	lval-expr-list => lval-expr-list "," lval-expr . ("," "]")
		"]" => reduce 41
		"," => reduce 41

131:	expr => expr . ":" or-expr (":" #\newline ";" ",")
	non-comment-statement => "for" ident "=" expr . term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 182
		":" => shift 75

132:	primary-expr => "[" matrix-row-list "]" . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" ".'" "'" "," ";" #\newline)
		#\newline => reduce 95
		";" => reduce 95
		"," => reduce 95
		"'" => reduce 95
		".'" => reduce 95
		"*" => reduce 95
		"/" => reduce 95
		"\" => reduce 95
		"^" => reduce 95
		".*" => reduce 95
		"./" => reduce 95
		".\" => reduce 95
		".^" => reduce 95
		"-" => reduce 95
		"+" => reduce 95
		"<" => reduce 95
		">" => reduce 95
		"<=" => reduce 95
		">=" => reduce 95
		"~=" => reduce 95
		"==" => reduce 95
		"&" => reduce 95
		"|" => reduce 95
		":" => reduce 95
		")" => reduce 95
		"]" => reduce 95

133:	row-term => #\newline . ("-" "+" "~" '$ident "(" "[" '$string '$fx '$fl)
		'$fl => reduce 99
		'$fx => reduce 99
		'$string => reduce 99
		"[" => reduce 99
		"(" => reduce 99
		'$ident => reduce 99
		"~" => reduce 99
		"+" => reduce 99
		"-" => reduce 99

134:	row-term => ";" . ("-" "+" "~" '$ident "(" "[" '$string '$fx '$fl)
		'$fl => reduce 98
		'$fx => reduce 98
		'$string => reduce 98
		"[" => reduce 98
		"(" => reduce 98
		'$ident => reduce 98
		"~" => reduce 98
		"+" => reduce 98
		"-" => reduce 98

135:	matrix-row-list => matrix-row-list row-term . matrix-row (";" #\newline "]")
	matrix-row => . expr
	matrix-row => . matrix-row "," expr
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 105
		matrix-row => shift 181

136:	matrix-row => matrix-row "," . expr (#\newline ";" "," "]")
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 180

137:	primary-expr => "(" expr ")" . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" ".^" ".\" "./" ".*" "^" "\" "/" "*" ".'" "'" "," ";" #\newline)
		#\newline => reduce 93
		";" => reduce 93
		"," => reduce 93
		"'" => reduce 93
		".'" => reduce 93
		"*" => reduce 93
		"/" => reduce 93
		"\" => reduce 93
		"^" => reduce 93
		".*" => reduce 93
		"./" => reduce 93
		".\" => reduce 93
		".^" => reduce 93
		"-" => reduce 93
		"+" => reduce 93
		"<" => reduce 93
		">" => reduce 93
		"<=" => reduce 93
		">=" => reduce 93
		"~=" => reduce 93
		"==" => reduce 93
		"&" => reduce 93
		"|" => reduce 93
		":" => reduce 93
		")" => reduce 93
		"]" => reduce 93

138:	expr-list => expr-list . "," ":" ("," ")")
	expr-list => expr-list . "," expr ("," ")")
	postfix-expr => ident "(" expr-list . ")" ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		")" => shift 179
		"," => shift 125

139:	mul-expr => mul-expr ".^" unary-expr . ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 81
		";" => reduce 81
		#\newline => reduce 81
		":" => reduce 81
		"|" => reduce 81
		"&" => reduce 81
		"==" => reduce 81
		"~=" => reduce 81
		">=" => reduce 81
		"<=" => reduce 81
		">" => reduce 81
		"<" => reduce 81
		"+" => reduce 81
		"-" => reduce 81
		".^" => reduce 81
		".\" => reduce 81
		"./" => reduce 81
		".*" => reduce 81
		"^" => reduce 81
		"\" => reduce 81
		"/" => reduce 81
		"*" => reduce 81
		")" => reduce 81
		"]" => reduce 81

140:	mul-expr => mul-expr ".\" unary-expr . ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 80
		";" => reduce 80
		#\newline => reduce 80
		":" => reduce 80
		"|" => reduce 80
		"&" => reduce 80
		"==" => reduce 80
		"~=" => reduce 80
		">=" => reduce 80
		"<=" => reduce 80
		">" => reduce 80
		"<" => reduce 80
		"+" => reduce 80
		"-" => reduce 80
		".^" => reduce 80
		".\" => reduce 80
		"./" => reduce 80
		".*" => reduce 80
		"^" => reduce 80
		"\" => reduce 80
		"/" => reduce 80
		"*" => reduce 80
		")" => reduce 80
		"]" => reduce 80

141:	mul-expr => mul-expr "./" unary-expr . ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 79
		";" => reduce 79
		#\newline => reduce 79
		":" => reduce 79
		"|" => reduce 79
		"&" => reduce 79
		"==" => reduce 79
		"~=" => reduce 79
		">=" => reduce 79
		"<=" => reduce 79
		">" => reduce 79
		"<" => reduce 79
		"+" => reduce 79
		"-" => reduce 79
		".^" => reduce 79
		".\" => reduce 79
		"./" => reduce 79
		".*" => reduce 79
		"^" => reduce 79
		"\" => reduce 79
		"/" => reduce 79
		"*" => reduce 79
		")" => reduce 79
		"]" => reduce 79

142:	mul-expr => mul-expr ".*" unary-expr . ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 78
		";" => reduce 78
		#\newline => reduce 78
		":" => reduce 78
		"|" => reduce 78
		"&" => reduce 78
		"==" => reduce 78
		"~=" => reduce 78
		">=" => reduce 78
		"<=" => reduce 78
		">" => reduce 78
		"<" => reduce 78
		"+" => reduce 78
		"-" => reduce 78
		".^" => reduce 78
		".\" => reduce 78
		"./" => reduce 78
		".*" => reduce 78
		"^" => reduce 78
		"\" => reduce 78
		"/" => reduce 78
		"*" => reduce 78
		")" => reduce 78
		"]" => reduce 78

143:	mul-expr => mul-expr "^" unary-expr . ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 77
		";" => reduce 77
		#\newline => reduce 77
		":" => reduce 77
		"|" => reduce 77
		"&" => reduce 77
		"==" => reduce 77
		"~=" => reduce 77
		">=" => reduce 77
		"<=" => reduce 77
		">" => reduce 77
		"<" => reduce 77
		"+" => reduce 77
		"-" => reduce 77
		".^" => reduce 77
		".\" => reduce 77
		"./" => reduce 77
		".*" => reduce 77
		"^" => reduce 77
		"\" => reduce 77
		"/" => reduce 77
		"*" => reduce 77
		")" => reduce 77
		"]" => reduce 77

144:	mul-expr => mul-expr "\" unary-expr . ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 76
		";" => reduce 76
		#\newline => reduce 76
		":" => reduce 76
		"|" => reduce 76
		"&" => reduce 76
		"==" => reduce 76
		"~=" => reduce 76
		">=" => reduce 76
		"<=" => reduce 76
		">" => reduce 76
		"<" => reduce 76
		"+" => reduce 76
		"-" => reduce 76
		".^" => reduce 76
		".\" => reduce 76
		"./" => reduce 76
		".*" => reduce 76
		"^" => reduce 76
		"\" => reduce 76
		"/" => reduce 76
		"*" => reduce 76
		")" => reduce 76
		"]" => reduce 76

145:	mul-expr => mul-expr "/" unary-expr . ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 75
		";" => reduce 75
		#\newline => reduce 75
		":" => reduce 75
		"|" => reduce 75
		"&" => reduce 75
		"==" => reduce 75
		"~=" => reduce 75
		">=" => reduce 75
		"<=" => reduce 75
		">" => reduce 75
		"<" => reduce 75
		"+" => reduce 75
		"-" => reduce 75
		".^" => reduce 75
		".\" => reduce 75
		"./" => reduce 75
		".*" => reduce 75
		"^" => reduce 75
		"\" => reduce 75
		"/" => reduce 75
		"*" => reduce 75
		")" => reduce 75
		"]" => reduce 75

146:	mul-expr => mul-expr "*" unary-expr . ("]" ")" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 74
		";" => reduce 74
		#\newline => reduce 74
		":" => reduce 74
		"|" => reduce 74
		"&" => reduce 74
		"==" => reduce 74
		"~=" => reduce 74
		">=" => reduce 74
		"<=" => reduce 74
		">" => reduce 74
		"<" => reduce 74
		"+" => reduce 74
		"-" => reduce 74
		".^" => reduce 74
		".\" => reduce 74
		"./" => reduce 74
		".*" => reduce 74
		"^" => reduce 74
		"\" => reduce 74
		"/" => reduce 74
		"*" => reduce 74
		")" => reduce 74
		"]" => reduce 74

147:	mul-expr => mul-expr . ".^" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . ".\" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . "./" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . ".*" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . "^" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . "\" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . "/" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . "*" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	add-expr => add-expr "-" mul-expr . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline)
		"*" => shift 89
		"/" => shift 90
		"\" => shift 91
		"^" => shift 92
		".*" => shift 93
		"./" => shift 94
		".\" => shift 95
		".^" => shift 96
		#\newline => reduce 72
		";" => reduce 72
		"," => reduce 72
		"-" => reduce 72
		"+" => reduce 72
		"<" => reduce 72
		">" => reduce 72
		"<=" => reduce 72
		">=" => reduce 72
		"~=" => reduce 72
		"==" => reduce 72
		"&" => reduce 72
		"|" => reduce 72
		":" => reduce 72
		")" => reduce 72
		"]" => reduce 72

148:	mul-expr => mul-expr . ".^" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . ".\" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . "./" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . ".*" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . "^" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . "\" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . "/" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	mul-expr => mul-expr . "*" unary-expr ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline "*" "/" "\" "^" ".*" "./" ".\" ".^")
	add-expr => add-expr "+" mul-expr . ("]" ")" ":" "|" "&" "==" "~=" ">=" "<=" ">" "<" "+" "-" "," ";" #\newline)
		"*" => shift 89
		"/" => shift 90
		"\" => shift 91
		"^" => shift 92
		".*" => shift 93
		"./" => shift 94
		".\" => shift 95
		".^" => shift 96
		#\newline => reduce 71
		";" => reduce 71
		"," => reduce 71
		"-" => reduce 71
		"+" => reduce 71
		"<" => reduce 71
		">" => reduce 71
		"<=" => reduce 71
		">=" => reduce 71
		"~=" => reduce 71
		"==" => reduce 71
		"&" => reduce 71
		"|" => reduce 71
		":" => reduce 71
		")" => reduce 71
		"]" => reduce 71

149:	add-expr => add-expr . "-" mul-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" "," "+" "-")
	add-expr => add-expr . "+" mul-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" "," "+" "-")
	rel-expr => rel-expr ">=" add-expr . ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"+" => shift 87
		"-" => shift 88
		"," => reduce 69
		";" => reduce 69
		#\newline => reduce 69
		":" => reduce 69
		"|" => reduce 69
		"&" => reduce 69
		"==" => reduce 69
		"~=" => reduce 69
		">=" => reduce 69
		"<=" => reduce 69
		">" => reduce 69
		"<" => reduce 69
		")" => reduce 69
		"]" => reduce 69

150:	add-expr => add-expr . "-" mul-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" "," "+" "-")
	add-expr => add-expr . "+" mul-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" "," "+" "-")
	rel-expr => rel-expr "<=" add-expr . ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"+" => shift 87
		"-" => shift 88
		"," => reduce 68
		";" => reduce 68
		#\newline => reduce 68
		":" => reduce 68
		"|" => reduce 68
		"&" => reduce 68
		"==" => reduce 68
		"~=" => reduce 68
		">=" => reduce 68
		"<=" => reduce 68
		">" => reduce 68
		"<" => reduce 68
		")" => reduce 68
		"]" => reduce 68

151:	add-expr => add-expr . "-" mul-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" "," "+" "-")
	add-expr => add-expr . "+" mul-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" "," "+" "-")
	rel-expr => rel-expr ">" add-expr . ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"+" => shift 87
		"-" => shift 88
		"," => reduce 67
		";" => reduce 67
		#\newline => reduce 67
		":" => reduce 67
		"|" => reduce 67
		"&" => reduce 67
		"==" => reduce 67
		"~=" => reduce 67
		">=" => reduce 67
		"<=" => reduce 67
		">" => reduce 67
		"<" => reduce 67
		")" => reduce 67
		"]" => reduce 67

152:	add-expr => add-expr . "-" mul-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" "," "+" "-")
	add-expr => add-expr . "+" mul-expr ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" "," "+" "-")
	rel-expr => rel-expr "<" add-expr . ("]" ")" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"+" => shift 87
		"-" => shift 88
		"," => reduce 66
		";" => reduce 66
		#\newline => reduce 66
		":" => reduce 66
		"|" => reduce 66
		"&" => reduce 66
		"==" => reduce 66
		"~=" => reduce 66
		">=" => reduce 66
		"<=" => reduce 66
		">" => reduce 66
		"<" => reduce 66
		")" => reduce 66
		"]" => reduce 66

153:	rel-expr => rel-expr . ">=" add-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline "<" ">" "<=" ">=")
	rel-expr => rel-expr . "<=" add-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline "<" ">" "<=" ">=")
	rel-expr => rel-expr . ">" add-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline "<" ">" "<=" ">=")
	rel-expr => rel-expr . "<" add-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline "<" ">" "<=" ">=")
	equality-expr => equality-expr "~=" rel-expr . ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline)
		"<" => shift 83
		">" => shift 84
		"<=" => shift 85
		">=" => shift 86
		#\newline => reduce 64
		";" => reduce 64
		"," => reduce 64
		"~=" => reduce 64
		"==" => reduce 64
		"&" => reduce 64
		"|" => reduce 64
		":" => reduce 64
		")" => reduce 64
		"]" => reduce 64

154:	rel-expr => rel-expr . ">=" add-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline "<" ">" "<=" ">=")
	rel-expr => rel-expr . "<=" add-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline "<" ">" "<=" ">=")
	rel-expr => rel-expr . ">" add-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline "<" ">" "<=" ">=")
	rel-expr => rel-expr . "<" add-expr ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline "<" ">" "<=" ">=")
	equality-expr => equality-expr "==" rel-expr . ("]" ")" ":" "|" "&" "==" "~=" "," ";" #\newline)
		"<" => shift 83
		">" => shift 84
		"<=" => shift 85
		">=" => shift 86
		#\newline => reduce 63
		";" => reduce 63
		"," => reduce 63
		"~=" => reduce 63
		"==" => reduce 63
		"&" => reduce 63
		"|" => reduce 63
		":" => reduce 63
		")" => reduce 63
		"]" => reduce 63

155:	equality-expr => equality-expr . "~=" rel-expr ("]" ")" "&" "|" ":" #\newline ";" "," "==" "~=")
	equality-expr => equality-expr . "==" rel-expr ("]" ")" "&" "|" ":" #\newline ";" "," "==" "~=")
	and-expr => and-expr "&" equality-expr . ("]" ")" "&" "|" ":" #\newline ";" ",")
		"==" => shift 81
		"~=" => shift 82
		"," => reduce 61
		";" => reduce 61
		#\newline => reduce 61
		":" => reduce 61
		"|" => reduce 61
		"&" => reduce 61
		")" => reduce 61
		"]" => reduce 61

156:	and-expr => and-expr . "&" equality-expr ("]" ")" ":" "|" "," ";" #\newline "&")
	or-expr => or-expr "|" and-expr . ("]" ")" ":" "|" "," ";" #\newline)
		"&" => shift 80
		#\newline => reduce 59
		";" => reduce 59
		"," => reduce 59
		"|" => reduce 59
		":" => reduce 59
		")" => reduce 59
		"]" => reduce 59

157:	statement-list => statement-list . statement ("[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm "end")
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	non-comment-statement => "while" expr term statement-list . "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"end" => shift 178
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 28

158:	non-comment-statement => "if" expr term statement-list . elseif-list "else" statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	elseif-list => . "elseif" expr term statement-list
	elseif-list => . elseif-list "elseif" expr term statement-list
	non-comment-statement => "if" expr term statement-list . "else" statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement-list => statement-list . statement ("elseif" "else" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm "end")
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	non-comment-statement => "if" expr term statement-list . "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"end" => shift 174
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 28
		"else" => shift 175
		"elseif" => shift 176
		elseif-list => shift 177

159:	non-comment-statement => "switch" expr term case-list . "otherwise" term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	case-list => case-list . "case" expr term statement-list ("otherwise" "case" "end")
	non-comment-statement => "switch" expr term case-list . "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"end" => shift 171
		"case" => shift 172
		"otherwise" => shift 173

160:	or-expr => or-expr . "|" and-expr ("]" ")" ":" #\newline ";" "," "|")
	expr => expr ":" or-expr . ("]" ")" ":" #\newline ";" ",")
		"|" => shift 79
		"," => reduce 57
		";" => reduce 57
		#\newline => reduce 57
		":" => reduce 57
		")" => reduce 57
		"]" => reduce 57

161:	ident-list => ident-list "," . ident (")" "," "]")
	ident => . '$ident
		'$ident => shift 1
		ident => shift 170

162:	function-decl-line => "function" "[" ident-list "]" . "=" ident "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	function-decl-line => "function" "[" ident-list "]" . "=" ident "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"=" => shift 169

163:	function-decl-line => "function" ident "=" ident . "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	function-decl-line => "function" ident "=" ident . "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"(" => shift 168

164:	ident-list => ident-list . "," ident ("," ")")
	function-decl-line => "function" ident "(" ident-list . ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		")" => shift 167
		"," => shift 161

165:	function-decl-line => "function" ident "(" ")" . term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 166

166:	function-decl-line => "function" ident "(" ")" term . ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => reduce 19
		"for" => reduce 19
		"while" => reduce 19
		"if" => reduce 19
		"switch" => reduce 19
		"return" => reduce 19
		"global" => reduce 19
		"clear" => reduce 19
		'$ident => reduce 19
		#\newline => reduce 19
		";" => reduce 19
		"," => reduce 19
		"end" => reduce 19
		'$lone-comm => reduce 19
		"function" => reduce 19
		'$end => reduce 19

167:	function-decl-line => "function" ident "(" ident-list ")" . term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 202

168:	function-decl-line => "function" ident "=" ident "(" . ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	function-decl-line => "function" ident "=" ident "(" . ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident-list => . ident
	ident-list => . ident-list "," ident
	ident => . '$ident
		'$ident => shift 1
		ident => shift 71
		ident-list => shift 200
		")" => shift 201

169:	function-decl-line => "function" "[" ident-list "]" "=" . ident "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident => . '$ident
	function-decl-line => "function" "[" ident-list "]" "=" . ident "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident => . '$ident
		'$ident => shift 1
		ident => shift 199

170:	ident-list => ident-list "," ident . (")" "," "]")
		"]" => reduce 21
		"," => reduce 21
		")" => reduce 21

171:	non-comment-statement => "switch" expr term case-list "end" . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 198

172:	case-list => case-list "case" . expr term statement-list ("otherwise" "case" "end")
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 197

173:	non-comment-statement => "switch" expr term case-list "otherwise" . term statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 196

174:	non-comment-statement => "if" expr term statement-list "end" . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 195

175:	non-comment-statement => "if" expr term statement-list "else" . statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 23
		statement-list => shift 194

176:	elseif-list => "elseif" . expr term statement-list ("elseif" "else")
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 193

177:	elseif-list => elseif-list . "elseif" expr term statement-list ("elseif" "else")
	non-comment-statement => "if" expr term statement-list elseif-list . "else" statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"else" => shift 191
		"elseif" => shift 192

178:	non-comment-statement => "while" expr term statement-list "end" . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 190

179:	postfix-expr => ident "(" expr-list ")" . ("]" ")" "'" ".'" "*" "/" "\" "^" ".*" "./" ".\" ".^" "-" "+" "<" ">" "<=" ">=" "~=" "==" "&" "|" ":" #\newline ";" ",")
		"," => reduce 87
		";" => reduce 87
		#\newline => reduce 87
		":" => reduce 87
		"|" => reduce 87
		"&" => reduce 87
		"==" => reduce 87
		"~=" => reduce 87
		">=" => reduce 87
		"<=" => reduce 87
		">" => reduce 87
		"<" => reduce 87
		"+" => reduce 87
		"-" => reduce 87
		".^" => reduce 87
		".\" => reduce 87
		"./" => reduce 87
		".*" => reduce 87
		"^" => reduce 87
		"\" => reduce 87
		"/" => reduce 87
		"*" => reduce 87
		".'" => reduce 87
		"'" => reduce 87
		")" => reduce 87
		"]" => reduce 87

180:	expr => expr . ":" or-expr (#\newline ";" "," "]" ":")
	matrix-row => matrix-row "," expr . (#\newline ";" "," "]")
		":" => shift 75
		"]" => reduce 101
		"," => reduce 101
		";" => reduce 101
		#\newline => reduce 101

181:	matrix-row => matrix-row . "," expr (";" #\newline "]" ",")
	matrix-row-list => matrix-row-list row-term matrix-row . (";" #\newline "]")
		"," => shift 136
		"]" => reduce 97
		#\newline => reduce 97
		";" => reduce 97

182:	non-comment-statement => "for" ident "=" expr term . statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 23
		statement-list => shift 189

183:	non-comment-statement => "[" lval-expr-list "]" "=" ident . "(" expr-list ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	non-comment-statement => "[" lval-expr-list "]" "=" ident . "(" ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"(" => shift 188

184:	lval-expr => ident "(" expr-list ")" . ("," "]")
		"]" => reduce 43
		"," => reduce 43

185:	non-comment-statement => ident "(" expr-list ")" term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 27
		"," => reduce 27
		";" => reduce 27
		#\newline => reduce 27
		'$ident => reduce 27
		"clear" => reduce 27
		"global" => reduce 27
		"return" => reduce 27
		"switch" => reduce 27
		"if" => reduce 27
		"while" => reduce 27
		"for" => reduce 27
		"[" => reduce 27
		"end" => reduce 27
		"else" => reduce 27
		"elseif" => reduce 27
		'$end => reduce 27
		"function" => reduce 27
		"case" => reduce 27
		"otherwise" => reduce 27

186:	expr-list => expr-list "," ":" . ("," ")")
		")" => reduce 55
		"," => reduce 55

187:	expr => expr . ":" or-expr ("," ")" ":")
	expr-list => expr-list "," expr . ("," ")")
		":" => shift 75
		")" => reduce 54
		"," => reduce 54

188:	non-comment-statement => "[" lval-expr-list "]" "=" ident "(" . ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	non-comment-statement => "[" lval-expr-list "]" "=" ident "(" . expr-list ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	expr-list => . expr
	expr-list => . ":"
	expr-list => . expr-list "," expr
	expr-list => . expr-list "," ":"
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		":" => shift 113
		expr => shift 114
		expr-list => shift 213
		")" => shift 214

189:	statement-list => statement-list . statement ("[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm "end")
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	non-comment-statement => "for" ident "=" expr term statement-list . "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"end" => shift 212
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 28

190:	non-comment-statement => "while" expr term statement-list "end" term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 32
		"," => reduce 32
		";" => reduce 32
		#\newline => reduce 32
		'$ident => reduce 32
		"clear" => reduce 32
		"global" => reduce 32
		"return" => reduce 32
		"switch" => reduce 32
		"if" => reduce 32
		"while" => reduce 32
		"for" => reduce 32
		"[" => reduce 32
		"end" => reduce 32
		"else" => reduce 32
		"elseif" => reduce 32
		'$end => reduce 32
		"function" => reduce 32
		"case" => reduce 32
		"otherwise" => reduce 32

191:	non-comment-statement => "if" expr term statement-list elseif-list "else" . statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 23
		statement-list => shift 211

192:	elseif-list => elseif-list "elseif" . expr term statement-list ("elseif" "else")
	expr => . or-expr
	expr => . expr ":" or-expr
	or-expr => . and-expr
	or-expr => . or-expr "|" and-expr
	and-expr => . equality-expr
	and-expr => . and-expr "&" equality-expr
	equality-expr => . rel-expr
	equality-expr => . equality-expr "==" rel-expr
	equality-expr => . equality-expr "~=" rel-expr
	rel-expr => . add-expr
	rel-expr => . rel-expr "<" add-expr
	rel-expr => . rel-expr ">" add-expr
	rel-expr => . rel-expr "<=" add-expr
	rel-expr => . rel-expr ">=" add-expr
	add-expr => . mul-expr
	add-expr => . add-expr "+" mul-expr
	add-expr => . add-expr "-" mul-expr
	mul-expr => . unary-expr
	mul-expr => . mul-expr "*" unary-expr
	mul-expr => . mul-expr "/" unary-expr
	mul-expr => . mul-expr "\" unary-expr
	mul-expr => . mul-expr "^" unary-expr
	mul-expr => . mul-expr ".*" unary-expr
	mul-expr => . mul-expr "./" unary-expr
	mul-expr => . mul-expr ".\" unary-expr
	mul-expr => . mul-expr ".^" unary-expr
	unary-expr => . postfix-expr
	unary-expr => . "-" postfix-expr
	unary-expr => . "+" postfix-expr
	unary-expr => . "~" postfix-expr
	postfix-expr => . primary-expr
	postfix-expr => . ident "(" expr-list ")"
	postfix-expr => . postfix-expr "'"
	postfix-expr => . postfix-expr ".'"
	primary-expr => . ident
	primary-expr => . number
	primary-expr => . string
	primary-expr => . "(" expr ")"
	primary-expr => . "[" "]"
	primary-expr => . "[" matrix-row-list "]"
	ident => . '$ident
	number => . '$fx
	number => . '$fl
	string => . '$string
		'$string => shift 41
		'$fl => shift 42
		'$fx => shift 43
		'$ident => shift 1
		"[" => shift 44
		"(" => shift 45
		string => shift 46
		number => shift 47
		ident => shift 48
		primary-expr => shift 49
		"~" => shift 50
		"+" => shift 51
		"-" => shift 52
		postfix-expr => shift 53
		unary-expr => shift 54
		mul-expr => shift 55
		add-expr => shift 56
		rel-expr => shift 57
		equality-expr => shift 58
		and-expr => shift 59
		or-expr => shift 60
		expr => shift 210

193:	expr => expr . ":" or-expr (":" #\newline ";" ",")
	elseif-list => "elseif" expr . term statement-list ("elseif" "else")
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 209
		":" => shift 75

194:	statement-list => statement-list . statement ("[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm "end")
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	non-comment-statement => "if" expr term statement-list "else" statement-list . "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"end" => shift 208
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 28

195:	non-comment-statement => "if" expr term statement-list "end" term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 35
		"," => reduce 35
		";" => reduce 35
		#\newline => reduce 35
		'$ident => reduce 35
		"clear" => reduce 35
		"global" => reduce 35
		"return" => reduce 35
		"switch" => reduce 35
		"if" => reduce 35
		"while" => reduce 35
		"for" => reduce 35
		"[" => reduce 35
		"end" => reduce 35
		"else" => reduce 35
		"elseif" => reduce 35
		'$end => reduce 35
		"function" => reduce 35
		"case" => reduce 35
		"otherwise" => reduce 35

196:	non-comment-statement => "switch" expr term case-list "otherwise" term . statement-list "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 23
		statement-list => shift 207

197:	expr => expr . ":" or-expr (":" #\newline ";" ",")
	case-list => case-list "case" expr . term statement-list ("otherwise" "case" "end")
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 206
		":" => shift 75

198:	non-comment-statement => "switch" expr term case-list "end" term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 37
		"," => reduce 37
		";" => reduce 37
		#\newline => reduce 37
		'$ident => reduce 37
		"clear" => reduce 37
		"global" => reduce 37
		"return" => reduce 37
		"switch" => reduce 37
		"if" => reduce 37
		"while" => reduce 37
		"for" => reduce 37
		"[" => reduce 37
		"end" => reduce 37
		"else" => reduce 37
		"elseif" => reduce 37
		'$end => reduce 37
		"function" => reduce 37
		"case" => reduce 37
		"otherwise" => reduce 37

199:	function-decl-line => "function" "[" ident-list "]" "=" ident . "(" ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	function-decl-line => "function" "[" ident-list "]" "=" ident . "(" ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"(" => shift 205

200:	ident-list => ident-list . "," ident ("," ")")
	function-decl-line => "function" ident "=" ident "(" ident-list . ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		")" => shift 204
		"," => shift 161

201:	function-decl-line => "function" ident "=" ident "(" ")" . term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 203

202:	function-decl-line => "function" ident "(" ident-list ")" term . ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => reduce 18
		"for" => reduce 18
		"while" => reduce 18
		"if" => reduce 18
		"switch" => reduce 18
		"return" => reduce 18
		"global" => reduce 18
		"clear" => reduce 18
		'$ident => reduce 18
		#\newline => reduce 18
		";" => reduce 18
		"," => reduce 18
		"end" => reduce 18
		'$lone-comm => reduce 18
		"function" => reduce 18
		'$end => reduce 18

203:	function-decl-line => "function" ident "=" ident "(" ")" term . ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => reduce 17
		"for" => reduce 17
		"while" => reduce 17
		"if" => reduce 17
		"switch" => reduce 17
		"return" => reduce 17
		"global" => reduce 17
		"clear" => reduce 17
		'$ident => reduce 17
		#\newline => reduce 17
		";" => reduce 17
		"," => reduce 17
		"end" => reduce 17
		'$lone-comm => reduce 17
		"function" => reduce 17
		'$end => reduce 17

204:	function-decl-line => "function" ident "=" ident "(" ident-list ")" . term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 226

205:	function-decl-line => "function" "[" ident-list "]" "=" ident "(" . ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	function-decl-line => "function" "[" ident-list "]" "=" ident "(" . ident-list ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	ident-list => . ident
	ident-list => . ident-list "," ident
	ident => . '$ident
		'$ident => shift 1
		ident => shift 71
		ident-list => shift 224
		")" => shift 225

206:	case-list => case-list "case" expr term . statement-list ("otherwise" "case" "end")
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 23
		statement-list => shift 223

207:	statement-list => statement-list . statement ("[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm "end")
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	non-comment-statement => "switch" expr term case-list "otherwise" term statement-list . "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"end" => shift 222
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 28

208:	non-comment-statement => "if" expr term statement-list "else" statement-list "end" . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 221

209:	elseif-list => "elseif" expr term . statement-list ("elseif" "else")
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 23
		statement-list => shift 220

210:	expr => expr . ":" or-expr (":" #\newline ";" ",")
	elseif-list => elseif-list "elseif" expr . term statement-list ("elseif" "else")
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 219
		":" => shift 75

211:	statement-list => statement-list . statement ("[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm "end")
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	non-comment-statement => "if" expr term statement-list elseif-list "else" statement-list . "end" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		"end" => shift 218
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 28

212:	non-comment-statement => "for" ident "=" expr term statement-list "end" . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 217

213:	expr-list => expr-list . "," ":" ("," ")")
	expr-list => expr-list . "," expr ("," ")")
	non-comment-statement => "[" lval-expr-list "]" "=" ident "(" expr-list . ")" term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		")" => shift 216
		"," => shift 125

214:	non-comment-statement => "[" lval-expr-list "]" "=" ident "(" ")" . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 215

215:	non-comment-statement => "[" lval-expr-list "]" "=" ident "(" ")" term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 29
		"," => reduce 29
		";" => reduce 29
		#\newline => reduce 29
		'$ident => reduce 29
		"clear" => reduce 29
		"global" => reduce 29
		"return" => reduce 29
		"switch" => reduce 29
		"if" => reduce 29
		"while" => reduce 29
		"for" => reduce 29
		"[" => reduce 29
		"end" => reduce 29
		"else" => reduce 29
		"elseif" => reduce 29
		'$end => reduce 29
		"function" => reduce 29
		"case" => reduce 29
		"otherwise" => reduce 29

216:	non-comment-statement => "[" lval-expr-list "]" "=" ident "(" expr-list ")" . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 232

217:	non-comment-statement => "for" ident "=" expr term statement-list "end" term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 31
		"," => reduce 31
		";" => reduce 31
		#\newline => reduce 31
		'$ident => reduce 31
		"clear" => reduce 31
		"global" => reduce 31
		"return" => reduce 31
		"switch" => reduce 31
		"if" => reduce 31
		"while" => reduce 31
		"for" => reduce 31
		"[" => reduce 31
		"end" => reduce 31
		"else" => reduce 31
		"elseif" => reduce 31
		'$end => reduce 31
		"function" => reduce 31
		"case" => reduce 31
		"otherwise" => reduce 31

218:	non-comment-statement => "if" expr term statement-list elseif-list "else" statement-list "end" . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 231

219:	elseif-list => elseif-list "elseif" expr term . statement-list ("elseif" "else")
	statement-list => . statement
	statement-list => . statement-list statement
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 23
		statement-list => shift 230

220:	statement-list => statement-list . statement ("elseif" "else" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	elseif-list => "elseif" expr term statement-list . ("elseif" "else")
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 28
		"else" => reduce 48
		"elseif" => reduce 48

221:	non-comment-statement => "if" expr term statement-list "else" statement-list "end" term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 34
		"," => reduce 34
		";" => reduce 34
		#\newline => reduce 34
		'$ident => reduce 34
		"clear" => reduce 34
		"global" => reduce 34
		"return" => reduce 34
		"switch" => reduce 34
		"if" => reduce 34
		"while" => reduce 34
		"for" => reduce 34
		"[" => reduce 34
		"end" => reduce 34
		"else" => reduce 34
		"elseif" => reduce 34
		'$end => reduce 34
		"function" => reduce 34
		"case" => reduce 34
		"otherwise" => reduce 34

222:	non-comment-statement => "switch" expr term case-list "otherwise" term statement-list "end" . term ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 229

223:	statement-list => statement-list . statement ("otherwise" "case" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	case-list => case-list "case" expr term statement-list . ("otherwise" "case" "end")
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 28
		"end" => reduce 51
		"case" => reduce 51
		"otherwise" => reduce 51

224:	ident-list => ident-list . "," ident ("," ")")
	function-decl-line => "function" "[" ident-list "]" "=" ident "(" ident-list . ")" term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		")" => shift 228
		"," => shift 161

225:	function-decl-line => "function" "[" ident-list "]" "=" ident "(" ")" . term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 227

226:	function-decl-line => "function" ident "=" ident "(" ident-list ")" term . ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => reduce 16
		"for" => reduce 16
		"while" => reduce 16
		"if" => reduce 16
		"switch" => reduce 16
		"return" => reduce 16
		"global" => reduce 16
		"clear" => reduce 16
		'$ident => reduce 16
		#\newline => reduce 16
		";" => reduce 16
		"," => reduce 16
		"end" => reduce 16
		'$lone-comm => reduce 16
		"function" => reduce 16
		'$end => reduce 16

227:	function-decl-line => "function" "[" ident-list "]" "=" ident "(" ")" term . ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => reduce 15
		"for" => reduce 15
		"while" => reduce 15
		"if" => reduce 15
		"switch" => reduce 15
		"return" => reduce 15
		"global" => reduce 15
		"clear" => reduce 15
		'$ident => reduce 15
		#\newline => reduce 15
		";" => reduce 15
		"," => reduce 15
		"end" => reduce 15
		'$lone-comm => reduce 15
		"function" => reduce 15
		'$end => reduce 15

228:	function-decl-line => "function" "[" ident-list "]" "=" ident "(" ident-list ")" . term ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
	term => . #\newline
	term => . ";"
	term => . ","
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		term => shift 233

229:	non-comment-statement => "switch" expr term case-list "otherwise" term statement-list "end" term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 36
		"," => reduce 36
		";" => reduce 36
		#\newline => reduce 36
		'$ident => reduce 36
		"clear" => reduce 36
		"global" => reduce 36
		"return" => reduce 36
		"switch" => reduce 36
		"if" => reduce 36
		"while" => reduce 36
		"for" => reduce 36
		"[" => reduce 36
		"end" => reduce 36
		"else" => reduce 36
		"elseif" => reduce 36
		'$end => reduce 36
		"function" => reduce 36
		"case" => reduce 36
		"otherwise" => reduce 36

230:	statement-list => statement-list . statement ("elseif" "else" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
	statement => . lone-comment
	statement => . non-comment-statement
	non-comment-statement => . term
	non-comment-statement => . ident "(" expr-list ")" term
	non-comment-statement => . lval-expr "=" expr term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" ")" term
	non-comment-statement => . "[" lval-expr-list "]" "=" ident "(" expr-list ")" term
	non-comment-statement => . "for" ident "=" expr term statement-list "end" term
	non-comment-statement => . "while" expr term statement-list "end" term
	non-comment-statement => . "if" expr term statement-list elseif-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "else" statement-list "end" term
	non-comment-statement => . "if" expr term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "otherwise" term statement-list "end" term
	non-comment-statement => . "switch" expr term case-list "end" term
	non-comment-statement => . "return" term
	non-comment-statement => . command ident-nc-list term
	lone-comment => . '$lone-comm
	lval-expr => . ident
	lval-expr => . ident "(" expr-list ")"
	command => . "global"
	command => . "clear"
	term => . #\newline
	term => . ";"
	term => . ","
	ident => . '$ident
	elseif-list => elseif-list "elseif" expr term statement-list . ("elseif" "else")
		'$ident => shift 1
		"," => shift 2
		";" => shift 3
		#\newline => shift 4
		"clear" => shift 5
		"global" => shift 6
		'$lone-comm => shift 8
		command => shift 9
		"return" => shift 10
		"switch" => shift 11
		"if" => shift 12
		"while" => shift 13
		"for" => shift 14
		"[" => shift 15
		lval-expr => shift 16
		ident => shift 17
		term => shift 18
		non-comment-statement => shift 20
		lone-comment => shift 21
		statement => shift 28
		"else" => reduce 49
		"elseif" => reduce 49

231:	non-comment-statement => "if" expr term statement-list elseif-list "else" statement-list "end" term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 33
		"," => reduce 33
		";" => reduce 33
		#\newline => reduce 33
		'$ident => reduce 33
		"clear" => reduce 33
		"global" => reduce 33
		"return" => reduce 33
		"switch" => reduce 33
		"if" => reduce 33
		"while" => reduce 33
		"for" => reduce 33
		"[" => reduce 33
		"end" => reduce 33
		"else" => reduce 33
		"elseif" => reduce 33
		'$end => reduce 33
		"function" => reduce 33
		"case" => reduce 33
		"otherwise" => reduce 33

232:	non-comment-statement => "[" lval-expr-list "]" "=" ident "(" expr-list ")" term . ("otherwise" "case" "function" '$end "elseif" "else" "end" "[" "for" "while" "if" "switch" "return" "global" "clear" '$ident #\newline ";" "," '$lone-comm)
		'$lone-comm => reduce 30
		"," => reduce 30
		";" => reduce 30
		#\newline => reduce 30
		'$ident => reduce 30
		"clear" => reduce 30
		"global" => reduce 30
		"return" => reduce 30
		"switch" => reduce 30
		"if" => reduce 30
		"while" => reduce 30
		"for" => reduce 30
		"[" => reduce 30
		"end" => reduce 30
		"else" => reduce 30
		"elseif" => reduce 30
		'$end => reduce 30
		"function" => reduce 30
		"case" => reduce 30
		"otherwise" => reduce 30

233:	function-decl-line => "function" "[" ident-list "]" "=" ident "(" ident-list ")" term . ('$end "function" '$lone-comm "end" "," ";" #\newline '$ident "clear" "global" "return" "switch" "if" "while" "for" "[")
		"[" => reduce 14
		"for" => reduce 14
		"while" => reduce 14
		"if" => reduce 14
		"switch" => reduce 14
		"return" => reduce 14
		"global" => reduce 14
		"clear" => reduce 14
		'$ident => reduce 14
		#\newline => reduce 14
		";" => reduce 14
		"," => reduce 14
		"end" => reduce 14
		'$lone-comm => reduce 14
		"function" => reduce 14
		'$end => reduce 14

