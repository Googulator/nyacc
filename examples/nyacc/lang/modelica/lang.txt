0 $start => stored-definition
1 stored-definition =>
2 stored-definition => stored-definition-1 stored-definition-2
3 stored-definition => stored-definition-2
4 stored-definition-1 => "within" name ";"
5 stored-definition-1 => "within" ";"
6 stored-definition-2 => "final" class-definition ";"
7 stored-definition-2 => class-definition ";"
8 stored-definition-2 => stored-definition-2 "final" class-definition ";"
9 stored-definition-2 => stored-definition-2 class-definition ";"
10 class-definition => "encapsulated" class-prefixes class-specifier
11 class-definition => class-prefixes class-specifier
12 class-prefixes => "partial" class-prefixes-1
13 class-prefixes => class-prefixes-1
14 class-prefixes-1 => "class"
15 class-prefixes-1 => "model"
16 class-prefixes-1 => "operator" "record"
17 class-prefixes-1 => "record"
18 class-prefixes-1 => "block"
19 class-prefixes-1 => "expandable" "connector"
20 class-prefixes-1 => "connector"
21 class-prefixes-1 => "type"
22 class-prefixes-1 => "package"
23 class-prefixes-1 => "impure" "operator" "function"
24 class-prefixes-1 => "pure" "operator" "function"
25 class-prefixes-1 => "impure" "function"
26 class-prefixes-1 => "pure" "function"
27 class-prefixes-1 => "operator" "function"
28 class-prefixes-1 => "function"
29 class-prefixes-1 => "operator"
30 class-specifier => long-class-specifier
31 class-specifier => short-class-specifier
32 class-specifier => der-class-specifier
33 long-class-specifier => ident string-comment composition "end" ident
34 long-class-specifier => "extends" ident class-modification string-comment composition "end" ident
35 long-class-specifier => "extends" ident string-comment composition "end" ident
36 short-class-specifier => ident "=" base-prefix name array-subscripts class-modification comment
37 short-class-specifier => ident "=" base-prefix name array-subscripts comment
38 short-class-specifier => ident "=" base-prefix name class-modification comment
39 short-class-specifier => ident "=" base-prefix name comment
40 short-class-specifier => ident "=" "enumeration" "(" filler-1 ")" comment
41 filler-1 =>
42 filler-1 => enum-list
43 filler-1 => ":"
44 der-class-specifier => ident "=" "der" "(" name "," der-class-specifier-1 ")" comment
45 der-class-specifier-1 => ident
46 der-class-specifier-1 => der-class-specifier-1 ";" ident
47 base-prefix =>
48 base-prefix => type-prefix
49 enum-list => enumeration-literal
50 enum-list => enum-list "," enumeration-literal
51 enumeration-literal => ident comment
52 composition => element-list composition-1-list external-part opt-annotation
53 composition => element-list composition-1-list opt-annotation
54 composition => element-list external-part opt-annotation
55 composition => element-list opt-annotation
56 composition-1-list => composition-1
57 composition-1-list => composition-1-list composition-1
58 composition-1 => "public"
59 composition-1 => "public" element-list
60 composition-1 => "protected"
61 composition-1 => "protected" element-list
62 composition-1 => equation-section
63 composition-1 => algorithm-section
64 external-part => "external" language-specification external-function-call annotation ";"
65 external-part => "external" language-specification external-function-call ";"
66 external-part => "external" language-specification annotation ";"
67 external-part => "external" external-function-call annotation ";"
68 external-part => "external" language-specification ";"
69 external-part => "external" external-function-call ";"
70 external-part => "external" annotation ";"
71 external-part => "external" ";"
72 language-specification => string
73 external-function-call => component-reference "=" ident "(" expression-list ")"
74 external-function-call => component-reference "=" ident "(" ")"
75 external-function-call => ident "(" expression-list ")"
76 external-function-call => ident "(" ")"
77 element-list => element ";"
78 element-list => element-list element ";"
79 element => import-clause
80 element => extends-clause
81 element => "redeclare" $P1 $P2 $P3 element-1
82 element => "final" $P4 $P5 element-1
83 element => "inner" $P6 element-1
84 element => "outer" element-1
85 element => element-1
86 $P1 =>
87 $P1 => "final"
88 $P2 =>
89 $P2 => "inner"
90 $P3 =>
91 $P3 => "outer"
92 $P4 =>
93 $P4 => "inner"
94 $P5 =>
95 $P5 => "outer"
96 $P6 =>
97 $P6 => "outer"
98 element-1 => class-definition
99 element-1 => component-clause
100 element-1 => "replaceable" element-2 constraining-clause comment
101 element-1 => "replaceable" element-2
102 element-2 => class-definition
103 element-2 => component-clause
104 import-clause => "import" import-clause-1 comment
105 import-clause-1 => ident "=" name
106 import-clause-1 => name "." import-clause-2
107 import-clause-1 => name
108 import-clause-2 => "*"
109 import-clause-2 => "{" "}"
110 import-clause-2 => "{" import-list "}"
111 import-list => ident
112 import-list => import-list "," ident
113 extends-clause => "extends" name class-modification annotation
114 extends-clause => "extends" name class-modification
115 extends-clause => "extends" name annotation
116 extends-clause => "extends" name
117 constraining-clause => "constrainedby" name class-modification
118 constraining-clause => "constrainedby" name
119 component-clause => type-prefix type-specifier array-subscripts component-list
120 component-clause => type-prefix type-specifier component-list
121 component-clause => type-specifier array-subscripts component-list
122 component-clause => type-specifier component-list
123 type-prefix => type-prefix-1 type-prefix-2 type-prefix-3
124 type-prefix => type-prefix-1 type-prefix-2
125 type-prefix => type-prefix-1 type-prefix-3
126 type-prefix => type-prefix-2 type-prefix-3
127 type-prefix => type-prefix-1
128 type-prefix => type-prefix-2
129 type-prefix => type-prefix-3
130 type-prefix-1 => "flow"
131 type-prefix-1 => "stream"
132 type-prefix-2 => "discrete"
133 type-prefix-2 => "parameter"
134 type-prefix-2 => "constant"
135 type-prefix-3 => "input"
136 type-prefix-3 => "output"
137 type-specifier => name
138 component-list => component-declaration
139 component-list => component-list "," component-declaration
140 component-declaration => declaration condition-attribute comment
141 component-declaration => declaration comment
142 condition-attribute => "if" expression
143 declaration => ident $P7 $P8
144 $P7 =>
145 $P7 => array-subscripts
146 $P8 =>
147 $P8 => modification
148 modification => class-modification "=" expression
149 modification => class-modification
150 modification => "=" expression
151 modification => ":=" expression
152 class-modification => "(" argument-list ")"
153 class-modification => "(" ")"
154 argument-list => argument
155 argument-list => argument-list "," argument
156 argument => element-modification-or-replaceable
157 argument => element-redeclaration
158 element-modification-or-replaceable => "each" "final" elt-mod-or-repl-1
159 element-modification-or-replaceable => "each" elt-mod-or-repl-1
160 element-modification-or-replaceable => "final" elt-mod-or-repl-1
161 element-modification-or-replaceable => elt-mod-or-repl-1
162 elt-mod-or-repl-1 => element-modification
163 elt-mod-or-repl-1 => element-replaceable
164 element-modification => name $P9 string-comment
165 $P9 =>
166 $P9 => modification
167 element-redeclaration => "redeclare" $P10 $P11 elt-redecl-1
168 $P10 =>
169 $P10 => "each"
170 $P11 =>
171 $P11 => "final"
172 elt-redecl-1 => short-class-definition
173 elt-redecl-1 => component-clause1
174 elt-redecl-1 => element-replaceable
175 element-replaceable => "replaceable" short-class-definition component-clause1 constraining-clause
176 element-replaceable => "replaceable" short-class-definition component-clause1
177 component-clause1 => type-prefix type-specifier declaration comment
178 short-class-definition => class-prefixes short-class-specifier
179 equation-section => "initial" "equation" equation-list
180 equation-section => "equation" equation-list
181 equation-section => "initial" "equation"
182 equation-section => "equation"
183 algorithm-section => "initial" "algorithm" statement-list
184 algorithm-section => "algorithm" statement-list
185 algorithm-section => "initial" "algorithm"
186 algorithm-section => "algorithm"
187 equation-list => equation ";"
188 equation-list => equation-list equation ";"
189 equation => equation-1 comment
190 equation-1 => simple-expression "=" expression
191 equation-1 => if-equation
192 equation-1 => for-equation
193 equation-1 => connect-clause
194 equation-1 => when-equation
195 equation-1 => name function-call-args
196 statement-list => statement ";"
197 statement-list => statement-list statement ";"
198 statement => statement-1 comment
199 statement-1 => component-reference ":=" expression
200 statement-1 => component-reference function-call-args
201 statement-1 => "(" output-expression-list ")" ":=" component-reference function-call-args
202 statement-1 => "break"
203 statement-1 => "return"
204 statement-1 => if-statement
205 statement-1 => for-statement
206 statement-1 => while-statement
207 statement-1 => when-statement
208 if-equation => "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
209 if-equation => "if" expression then-eq-part elseif-eq-list "end" "if"
210 if-equation => "if" expression then-eq-part else-eq-part "end" "if"
211 if-equation => "if" expression then-eq-part "end" "if"
212 then-eq-part => "then" equation-list
213 then-eq-part => "then"
214 elseif-eq-list => elseif-eq-part
215 elseif-eq-list => elseif-eq-list elseif-eq-part
216 elseif-eq-part => "elseif" equation-list
217 elseif-eq-part => "elseif"
218 else-eq-part => "else" equation-list
219 else-eq-part => "else"
220 if-statement => "if" expression then-st-part elseif-st-list else-st-part "end" "if"
221 if-statement => "if" expression then-st-part elseif-st-list "end" "if"
222 if-statement => "if" expression then-st-part else-st-part "end" "if"
223 if-statement => "if" expression then-st-part "end" "if"
224 then-st-part => "then" statement-list
225 then-st-part => "then"
226 elseif-st-list => elseif-st-part
227 elseif-st-list => elseif-st-list elseif-st-part
228 elseif-st-part => "elseif" statement-list
229 elseif-st-part => "elseif"
230 else-st-part => "else" statement-list
231 else-st-part => "else"
232 for-equation => "for" for-indices "loop" equation-list "end" "for"
233 for-equation => "for" for-indices "loop" "end" "for"
234 for-statement => "for" for-indices "loop" statement-list "end" "for"
235 for-statement => "for" for-indices "loop" "end" "for"
236 for-indices => for-index
237 for-indices => for-indices "," for-index
238 for-index => ident "in" expression
239 for-index => ident
240 while-statement => "while" expression "loop" statement-list "end" "while"
241 while-statement => "while" expression "loop" "end" "while"
242 when-equation => "when" expression then-eq-part elsewhen-eq-list "end" "when"
243 elsewhen-eq-list => elsewhen-eq-part
244 elsewhen-eq-list => elsewhen-eq-list elsewhen-eq-part
245 elsewhen-eq-part => "elsewhen" expression "then"
246 elsewhen-eq-part => "elsewhen" expression "then" expression-list
247 when-statement => "when" expression then-st-part elsewhen-st-list "end" "when"
248 elsewhen-st-list => elsewhen-st-part
249 elsewhen-st-list => elsewhen-st-list elsewhen-st-part
250 elsewhen-st-part => "elsewhen" expression "then"
251 elsewhen-st-part => "elsewhen" expression "then" statement-list
252 connect-clause => "connect" "(" component-reference "," component-reference ")"
253 expression => simple-expression
254 expression => "if" expression "then" expression elseif-ex-list "else" expression
255 expression => "if" expression "then" expression "else" expression
256 elseif-ex-list => "elseif" expression "then" expression
257 elseif-ex-list => elseif-ex-list "elseif" expression "then" expression
258 simple-expression => logical-expression
259 simple-expression => logical-expression ":" logical-expression ":" logical-expression
260 simple-expression => logical-expression ":" logical-expression
261 logical-expression => logical-term
262 logical-expression => logical-expression "or" logical-term
263 logical-term => logical-factor
264 logical-term => logical-term "and" logical-factor
265 logical-factor => relation
266 logical-factor => "not" relation
267 relation => arithmetic-expression
268 relation => relation rel-op arithmetic-expression
269 rel-op => "<"
270 rel-op => "<="
271 rel-op => ">"
272 rel-op => ">="
273 rel-op => "=="
274 rel-op => "<>"
275 arithmetic-expression => term
276 arithmetic-expression => arithmetic-expression add-op term
277 add-op => "+"
278 add-op => "-"
279 add-op => ".+"
280 add-op => ".-"
281 term => factor
282 term => term mul-op factor
283 mul-op => "*"
284 mul-op => "/"
285 mul-op => ".*"
286 mul-op => "./"
287 factor => primary
288 factor => factor "^" primary
289 factor => factor ".^" primary
290 primary => unsigned-number
291 primary => string
292 primary => "false"
293 primary => "true"
294 primary => name function-call-args
295 primary => "der" function-call-args
296 primary => name
297 primary => name array-subscripts
298 primary => "(" output-expression-list ")"
299 primary => "[" expression-list-list "]"
300 primary => "{" function-arguments "}"
301 expression-list-list => expression-list
302 expression-list-list => expression-list-list ";" expression-list
303 name => ident
304 name => "." ident
305 name => name "." ident
306 component-reference => component-reference-1
307 component-reference => component-reference-1 "." ident $P12
308 $P12 =>
309 $P12 => array-subscripts
310 component-reference-1 => ident $P13
311 component-reference-1 => "." ident $P14
312 $P13 =>
313 $P13 => array-subscripts
314 $P14 =>
315 $P14 => array-subscripts
316 function-call-args => "(" function-arguments ")"
317 function-call-args => "(" ")"
318 function-arguments => function-argument function-argument-1
319 function-arguments => named-arguments
320 function-argument-1 => "," function-arguments
321 function-argument-1 => "for" for-indices
322 named-arguments => named-argument
323 named-arguments => named-arguments "," named-argument
324 named-argument => ident "=" function-argument
325 function-argument => "function" name "(" named-arguments ")"
326 function-argument => "function" name "(" ")"
327 function-argument => expression
328 output-expression-list => ","
329 output-expression-list => expression
330 output-expression-list => output-expression-list "," expression
331 expression-list => expression
332 expression-list => expression-list "," expression
333 array-subscripts => "[" array-subscript-list "]"
334 array-subscript-list => subscript
335 array-subscript-list => array-subscript-list "," subscript
336 subscript => ":"
337 subscript => expression
338 comment => string-comment annotation
339 comment => string-comment
340 string-comment =>
341 string-comment => string-cat
342 string-cat => string
343 string-cat => string-cat "+" string
344 opt-annotation =>
345 opt-annotation => annotation ";"
346 annotation => "annotation" class-modification
347 unsigned-number => '$fx
348 unsigned-number => '$fl
349 ident => '$ident
350 string => '$string

0:	$start => . stored-definition ('$end)
	stored-definition => .
	stored-definition => . stored-definition-1 stored-definition-2
	stored-definition => . stored-definition-2
	stored-definition-1 => . "within" name ";"
	stored-definition-1 => . "within" ";"
	stored-definition-2 => . "final" class-definition ";"
	stored-definition-2 => . class-definition ";"
	stored-definition-2 => . stored-definition-2 "final" class-definition ";"
	stored-definition-2 => . stored-definition-2 class-definition ";"
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		class-prefixes-1 => shift 13
		"partial" => shift 14
		class-prefixes => shift 15
		"encapsulated" => shift 16
		class-definition => shift 17
		"final" => shift 18
		"within" => shift 19
		stored-definition-2 => shift 20
		stored-definition-1 => shift 21
		stored-definition => shift 22
		'$end => reduce 1

1:	class-prefixes-1 => "function" . ("extends" '$ident)
		'$ident => reduce 28
		"extends" => reduce 28

2:	class-prefixes-1 => "pure" . "function" ("extends" '$ident)
	class-prefixes-1 => "pure" . "operator" "function" ("extends" '$ident)
		"operator" => shift 46
		"function" => shift 47

3:	class-prefixes-1 => "impure" . "function" ("extends" '$ident)
	class-prefixes-1 => "impure" . "operator" "function" ("extends" '$ident)
		"operator" => shift 44
		"function" => shift 45

4:	class-prefixes-1 => "package" . ("extends" '$ident)
		'$ident => reduce 22
		"extends" => reduce 22

5:	class-prefixes-1 => "type" . ("extends" '$ident)
		'$ident => reduce 21
		"extends" => reduce 21

6:	class-prefixes-1 => "connector" . ("extends" '$ident)
		'$ident => reduce 20
		"extends" => reduce 20

7:	class-prefixes-1 => "expandable" . "connector" ("extends" '$ident)
		"connector" => shift 43

8:	class-prefixes-1 => "block" . ("extends" '$ident)
		'$ident => reduce 18
		"extends" => reduce 18

9:	class-prefixes-1 => "record" . ("extends" '$ident)
		'$ident => reduce 17
		"extends" => reduce 17

10:	class-prefixes-1 => "operator" . ("extends" '$ident)
	class-prefixes-1 => "operator" . "function" ("extends" '$ident)
	class-prefixes-1 => "operator" . "record" ("extends" '$ident)
		"record" => shift 41
		"function" => shift 42
		'$ident => reduce 29
		"extends" => reduce 29

11:	class-prefixes-1 => "model" . ("extends" '$ident)
		'$ident => reduce 15
		"extends" => reduce 15

12:	class-prefixes-1 => "class" . ("extends" '$ident)
		'$ident => reduce 14
		"extends" => reduce 14

13:	class-prefixes => class-prefixes-1 . ('$ident "extends")
		"extends" => reduce 13
		'$ident => reduce 13

14:	class-prefixes => "partial" . class-prefixes-1 ('$ident "extends")
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		class-prefixes-1 => shift 40

15:	class-definition => class-prefixes . class-specifier ("constrainedby" ";")
	class-specifier => . long-class-specifier
	class-specifier => . short-class-specifier
	class-specifier => . der-class-specifier
	long-class-specifier => . ident string-comment composition "end" ident
	long-class-specifier => . "extends" ident class-modification string-comment composition "end" ident
	long-class-specifier => . "extends" ident string-comment composition "end" ident
	short-class-specifier => . ident "=" base-prefix name array-subscripts class-modification comment
	short-class-specifier => . ident "=" base-prefix name array-subscripts comment
	short-class-specifier => . ident "=" base-prefix name class-modification comment
	short-class-specifier => . ident "=" base-prefix name comment
	short-class-specifier => . ident "=" "enumeration" "(" filler-1 ")" comment
	der-class-specifier => . ident "=" "der" "(" name "," der-class-specifier-1 ")" comment
	ident => . '$ident
		'$ident => shift 26
		"extends" => shift 34
		ident => shift 35
		der-class-specifier => shift 36
		short-class-specifier => shift 37
		long-class-specifier => shift 38
		class-specifier => shift 39

16:	class-definition => "encapsulated" . class-prefixes class-specifier ("constrainedby" ";")
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		class-prefixes-1 => shift 13
		"partial" => shift 14
		class-prefixes => shift 33

17:	stored-definition-2 => class-definition . ";" ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		";" => shift 32

18:	stored-definition-2 => "final" . class-definition ";" ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		class-prefixes-1 => shift 13
		"partial" => shift 14
		class-prefixes => shift 15
		"encapsulated" => shift 16
		class-definition => shift 31

19:	stored-definition-1 => "within" . ";" ("final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
	stored-definition-1 => "within" . name ";" ("final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		name => shift 29
		";" => shift 30

20:	stored-definition-2 => stored-definition-2 . class-definition ";" ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	stored-definition-2 => stored-definition-2 . "final" class-definition ";" ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
	stored-definition => stored-definition-2 . ('$end)
		"final" => shift 24
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		class-prefixes-1 => shift 13
		"partial" => shift 14
		class-prefixes => shift 15
		"encapsulated" => shift 16
		class-definition => shift 25
		'$end => reduce 3

21:	stored-definition => stored-definition-1 . stored-definition-2 ('$end)
	stored-definition-2 => . "final" class-definition ";"
	stored-definition-2 => . class-definition ";"
	stored-definition-2 => . stored-definition-2 "final" class-definition ";"
	stored-definition-2 => . stored-definition-2 class-definition ";"
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		class-prefixes-1 => shift 13
		"partial" => shift 14
		class-prefixes => shift 15
		"encapsulated" => shift 16
		class-definition => shift 17
		"final" => shift 18
		stored-definition-2 => shift 23

22:	$start => stored-definition . ('$end)
		'$end => accept 0

23:	stored-definition-2 => stored-definition-2 . class-definition ";" ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	stored-definition-2 => stored-definition-2 . "final" class-definition ";" ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
	stored-definition => stored-definition-1 stored-definition-2 . ('$end)
		"final" => shift 24
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		class-prefixes-1 => shift 13
		"partial" => shift 14
		class-prefixes => shift 15
		"encapsulated" => shift 16
		class-definition => shift 25
		'$end => reduce 2

24:	stored-definition-2 => stored-definition-2 "final" . class-definition ";" ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		class-prefixes-1 => shift 13
		"partial" => shift 14
		class-prefixes => shift 15
		"encapsulated" => shift 16
		class-definition => shift 62

25:	stored-definition-2 => stored-definition-2 class-definition . ";" ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		";" => shift 61

26:	ident => '$ident . ("elsewhen" "end" "constrainedby" "elseif" "else" "}" "in" "loop" "then" "for" "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "if" "annotation" "," ")" ":=" "[" "(" ";" "=" '$string "redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import")
		"import" => reduce 349
		"extends" => reduce 349
		"function" => reduce 349
		"pure" => reduce 349
		"impure" => reduce 349
		"package" => reduce 349
		"type" => reduce 349
		"connector" => reduce 349
		"expandable" => reduce 349
		"block" => reduce 349
		"record" => reduce 349
		"operator" => reduce 349
		"model" => reduce 349
		"class" => reduce 349
		"partial" => reduce 349
		"encapsulated" => reduce 349
		"stream" => reduce 349
		"flow" => reduce 349
		"constant" => reduce 349
		"parameter" => reduce 349
		"discrete" => reduce 349
		"output" => reduce 349
		"input" => reduce 349
		'$ident => reduce 349
		"." => reduce 349
		"replaceable" => reduce 349
		"outer" => reduce 349
		"inner" => reduce 349
		"final" => reduce 349
		"redeclare" => reduce 349
		'$string => reduce 349
		"=" => reduce 349
		";" => reduce 349
		"(" => reduce 349
		"[" => reduce 349
		":=" => reduce 349
		")" => reduce 349
		"," => reduce 349
		"annotation" => reduce 349
		"if" => reduce 349
		":" => reduce 349
		"^" => reduce 349
		".^" => reduce 349
		"./" => reduce 349
		".*" => reduce 349
		"/" => reduce 349
		"*" => reduce 349
		"+" => reduce 349
		"-" => reduce 349
		".+" => reduce 349
		".-" => reduce 349
		"<>" => reduce 349
		"==" => reduce 349
		">=" => reduce 349
		">" => reduce 349
		"<=" => reduce 349
		"<" => reduce 349
		"and" => reduce 349
		"or" => reduce 349
		"]" => reduce 349
		"for" => reduce 349
		"then" => reduce 349
		"loop" => reduce 349
		"in" => reduce 349
		"}" => reduce 349
		"else" => reduce 349
		"elseif" => reduce 349
		"constrainedby" => reduce 349
		"end" => reduce 349
		"elsewhen" => reduce 349

27:	name => "." . ident ("if" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "elsewhen" "end" "}" "constrainedby" "elseif" "else" "loop" "then" "for" "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" ":" "annotation" "," "=" ":=" "(" '$string ")" '$ident "[" "." ";")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 60

28:	name => ident . ("if" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "elsewhen" "end" "}" "for" "constrainedby" "elseif" "else" "loop" "then" "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" ":" "annotation" "," "=" ":=" "(" '$string ")" '$ident "[" "." ";")
		";" => reduce 303
		"." => reduce 303
		"[" => reduce 303
		'$ident => reduce 303
		")" => reduce 303
		'$string => reduce 303
		"(" => reduce 303
		":=" => reduce 303
		"=" => reduce 303
		"," => reduce 303
		"annotation" => reduce 303
		":" => reduce 303
		"or" => reduce 303
		"and" => reduce 303
		"<" => reduce 303
		"<=" => reduce 303
		">" => reduce 303
		">=" => reduce 303
		"==" => reduce 303
		"<>" => reduce 303
		".-" => reduce 303
		".+" => reduce 303
		"-" => reduce 303
		"+" => reduce 303
		"*" => reduce 303
		"/" => reduce 303
		".*" => reduce 303
		"./" => reduce 303
		".^" => reduce 303
		"^" => reduce 303
		"]" => reduce 303
		"then" => reduce 303
		"loop" => reduce 303
		"else" => reduce 303
		"elseif" => reduce 303
		"constrainedby" => reduce 303
		"for" => reduce 303
		"}" => reduce 303
		"end" => reduce 303
		"elsewhen" => reduce 303
		"stream" => reduce 303
		"flow" => reduce 303
		"constant" => reduce 303
		"parameter" => reduce 303
		"discrete" => reduce 303
		"output" => reduce 303
		"input" => reduce 303
		"if" => reduce 303

29:	name => name . "." ident ("." ";")
	stored-definition-1 => "within" name . ";" ("final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		";" => shift 58
		"." => shift 59

30:	stored-definition-1 => "within" ";" . ("final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 5
		"pure" => reduce 5
		"impure" => reduce 5
		"package" => reduce 5
		"type" => reduce 5
		"connector" => reduce 5
		"expandable" => reduce 5
		"block" => reduce 5
		"record" => reduce 5
		"operator" => reduce 5
		"model" => reduce 5
		"class" => reduce 5
		"partial" => reduce 5
		"encapsulated" => reduce 5
		"final" => reduce 5

31:	stored-definition-2 => "final" class-definition . ";" ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		";" => shift 57

32:	stored-definition-2 => class-definition ";" . ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 7
		"pure" => reduce 7
		"impure" => reduce 7
		"package" => reduce 7
		"type" => reduce 7
		"connector" => reduce 7
		"expandable" => reduce 7
		"block" => reduce 7
		"record" => reduce 7
		"operator" => reduce 7
		"model" => reduce 7
		"class" => reduce 7
		"partial" => reduce 7
		"encapsulated" => reduce 7
		"final" => reduce 7
		'$end => reduce 7

33:	class-definition => "encapsulated" class-prefixes . class-specifier ("constrainedby" ";")
	class-specifier => . long-class-specifier
	class-specifier => . short-class-specifier
	class-specifier => . der-class-specifier
	long-class-specifier => . ident string-comment composition "end" ident
	long-class-specifier => . "extends" ident class-modification string-comment composition "end" ident
	long-class-specifier => . "extends" ident string-comment composition "end" ident
	short-class-specifier => . ident "=" base-prefix name array-subscripts class-modification comment
	short-class-specifier => . ident "=" base-prefix name array-subscripts comment
	short-class-specifier => . ident "=" base-prefix name class-modification comment
	short-class-specifier => . ident "=" base-prefix name comment
	short-class-specifier => . ident "=" "enumeration" "(" filler-1 ")" comment
	der-class-specifier => . ident "=" "der" "(" name "," der-class-specifier-1 ")" comment
	ident => . '$ident
		'$ident => shift 26
		"extends" => shift 34
		ident => shift 35
		der-class-specifier => shift 36
		short-class-specifier => shift 37
		long-class-specifier => shift 38
		class-specifier => shift 56

34:	long-class-specifier => "extends" . ident string-comment composition "end" ident ("constrainedby" ";")
	ident => . '$ident
	long-class-specifier => "extends" . ident class-modification string-comment composition "end" ident ("constrainedby" ";")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 55

35:	der-class-specifier => ident . "=" "der" "(" name "," der-class-specifier-1 ")" comment ("constrainedby" ";")
	short-class-specifier => ident . "=" "enumeration" "(" filler-1 ")" comment ("constrainedby" ";")
	short-class-specifier => ident . "=" base-prefix name comment ("constrainedby" ";")
	short-class-specifier => ident . "=" base-prefix name class-modification comment ("constrainedby" ";")
	short-class-specifier => ident . "=" base-prefix name array-subscripts comment ("constrainedby" ";")
	short-class-specifier => ident . "=" base-prefix name array-subscripts class-modification comment ("constrainedby" ";")
	long-class-specifier => ident . string-comment composition "end" ident ("constrainedby" ";")
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 53
		"=" => shift 54
		"import" => reduce 340
		"extends" => reduce 340
		"function" => reduce 340
		"pure" => reduce 340
		"impure" => reduce 340
		"package" => reduce 340
		"type" => reduce 340
		"connector" => reduce 340
		"expandable" => reduce 340
		"block" => reduce 340
		"record" => reduce 340
		"operator" => reduce 340
		"model" => reduce 340
		"class" => reduce 340
		"partial" => reduce 340
		"encapsulated" => reduce 340
		"stream" => reduce 340
		"flow" => reduce 340
		"constant" => reduce 340
		"parameter" => reduce 340
		"discrete" => reduce 340
		"output" => reduce 340
		"input" => reduce 340
		'$ident => reduce 340
		"." => reduce 340
		"replaceable" => reduce 340
		"outer" => reduce 340
		"inner" => reduce 340
		"final" => reduce 340
		"redeclare" => reduce 340

36:	class-specifier => der-class-specifier . ("constrainedby" ";")
		";" => reduce 32
		"constrainedby" => reduce 32

37:	class-specifier => short-class-specifier . ("constrainedby" ";")
		";" => reduce 31
		"constrainedby" => reduce 31

38:	class-specifier => long-class-specifier . ("constrainedby" ";")
		";" => reduce 30
		"constrainedby" => reduce 30

39:	class-definition => class-prefixes class-specifier . ("constrainedby" ";")
		";" => reduce 11
		"constrainedby" => reduce 11

40:	class-prefixes => "partial" class-prefixes-1 . ('$ident "extends")
		"extends" => reduce 12
		'$ident => reduce 12

41:	class-prefixes-1 => "operator" "record" . ("extends" '$ident)
		'$ident => reduce 16
		"extends" => reduce 16

42:	class-prefixes-1 => "operator" "function" . ("extends" '$ident)
		'$ident => reduce 27
		"extends" => reduce 27

43:	class-prefixes-1 => "expandable" "connector" . ("extends" '$ident)
		'$ident => reduce 19
		"extends" => reduce 19

44:	class-prefixes-1 => "impure" "operator" . "function" ("extends" '$ident)
		"function" => shift 49

45:	class-prefixes-1 => "impure" "function" . ("extends" '$ident)
		'$ident => reduce 25
		"extends" => reduce 25

46:	class-prefixes-1 => "pure" "operator" . "function" ("extends" '$ident)
		"function" => shift 48

47:	class-prefixes-1 => "pure" "function" . ("extends" '$ident)
		'$ident => reduce 26
		"extends" => reduce 26

48:	class-prefixes-1 => "pure" "operator" "function" . ("extends" '$ident)
		'$ident => reduce 24
		"extends" => reduce 24

49:	class-prefixes-1 => "impure" "operator" "function" . ("extends" '$ident)
		'$ident => reduce 23
		"extends" => reduce 23

50:	string => '$string . ("if" "elsewhen" "end" "}" '$string "constrainedby" "elseif" "else" "loop" "then" ")" "for" "," "]" "annotation" ";" "^" ".^" "./" ".*" "/" "*" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":" "+" "redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import")
		"import" => reduce 350
		"extends" => reduce 350
		"function" => reduce 350
		"pure" => reduce 350
		"impure" => reduce 350
		"package" => reduce 350
		"type" => reduce 350
		"connector" => reduce 350
		"expandable" => reduce 350
		"block" => reduce 350
		"record" => reduce 350
		"operator" => reduce 350
		"model" => reduce 350
		"class" => reduce 350
		"partial" => reduce 350
		"encapsulated" => reduce 350
		"stream" => reduce 350
		"flow" => reduce 350
		"constant" => reduce 350
		"parameter" => reduce 350
		"discrete" => reduce 350
		"output" => reduce 350
		"input" => reduce 350
		'$ident => reduce 350
		"." => reduce 350
		"replaceable" => reduce 350
		"outer" => reduce 350
		"inner" => reduce 350
		"final" => reduce 350
		"redeclare" => reduce 350
		"+" => reduce 350
		":" => reduce 350
		"=" => reduce 350
		"or" => reduce 350
		"and" => reduce 350
		"<" => reduce 350
		"<=" => reduce 350
		">" => reduce 350
		">=" => reduce 350
		"==" => reduce 350
		"<>" => reduce 350
		".-" => reduce 350
		".+" => reduce 350
		"-" => reduce 350
		"*" => reduce 350
		"/" => reduce 350
		".*" => reduce 350
		"./" => reduce 350
		".^" => reduce 350
		"^" => reduce 350
		";" => reduce 350
		"annotation" => reduce 350
		"]" => reduce 350
		"," => reduce 350
		"for" => reduce 350
		")" => reduce 350
		"then" => reduce 350
		"loop" => reduce 350
		"else" => reduce 350
		"elseif" => reduce 350
		"constrainedby" => reduce 350
		'$string => reduce 350
		"}" => reduce 350
		"end" => reduce 350
		"elsewhen" => reduce 350
		"if" => reduce 350

51:	string-cat => string . (")" "constrainedby" "," ";" "annotation" "+" "import" "extends" "function" "pure" "impure" "package" "type" "connector" "expandable" "block" "record" "operator" "model" "class" "partial" "encapsulated" "stream" "flow" "constant" "parameter" "discrete" "output" "input" '$ident "." "replaceable" "outer" "inner" "final" "redeclare")
		"redeclare" => reduce 342
		"final" => reduce 342
		"inner" => reduce 342
		"outer" => reduce 342
		"replaceable" => reduce 342
		"." => reduce 342
		'$ident => reduce 342
		"input" => reduce 342
		"output" => reduce 342
		"discrete" => reduce 342
		"parameter" => reduce 342
		"constant" => reduce 342
		"flow" => reduce 342
		"stream" => reduce 342
		"encapsulated" => reduce 342
		"partial" => reduce 342
		"class" => reduce 342
		"model" => reduce 342
		"operator" => reduce 342
		"record" => reduce 342
		"block" => reduce 342
		"expandable" => reduce 342
		"connector" => reduce 342
		"type" => reduce 342
		"package" => reduce 342
		"impure" => reduce 342
		"pure" => reduce 342
		"function" => reduce 342
		"extends" => reduce 342
		"import" => reduce 342
		"+" => reduce 342
		"annotation" => reduce 342
		";" => reduce 342
		"," => reduce 342
		"constrainedby" => reduce 342
		")" => reduce 342

52:	string-cat => string-cat . "+" string (")" "constrainedby" "," ";" "annotation" "+" "import" "extends" "function" "pure" "impure" "package" "type" "connector" "expandable" "block" "record" "operator" "model" "class" "partial" "encapsulated" "stream" "flow" "constant" "parameter" "discrete" "output" "input" '$ident "." "replaceable" "outer" "inner" "final" "redeclare")
	string-comment => string-cat . (")" "constrainedby" "," ";" "annotation" "redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import")
		"+" => shift 100
		"import" => reduce 341
		"extends" => reduce 341
		"function" => reduce 341
		"pure" => reduce 341
		"impure" => reduce 341
		"package" => reduce 341
		"type" => reduce 341
		"connector" => reduce 341
		"expandable" => reduce 341
		"block" => reduce 341
		"record" => reduce 341
		"operator" => reduce 341
		"model" => reduce 341
		"class" => reduce 341
		"partial" => reduce 341
		"encapsulated" => reduce 341
		"stream" => reduce 341
		"flow" => reduce 341
		"constant" => reduce 341
		"parameter" => reduce 341
		"discrete" => reduce 341
		"output" => reduce 341
		"input" => reduce 341
		'$ident => reduce 341
		"." => reduce 341
		"replaceable" => reduce 341
		"outer" => reduce 341
		"inner" => reduce 341
		"final" => reduce 341
		"redeclare" => reduce 341
		"annotation" => reduce 341
		";" => reduce 341
		"," => reduce 341
		"constrainedby" => reduce 341
		")" => reduce 341

53:	long-class-specifier => ident string-comment . composition "end" ident ("constrainedby" ";")
	composition => . element-list composition-1-list external-part opt-annotation
	composition => . element-list composition-1-list opt-annotation
	composition => . element-list external-part opt-annotation
	composition => . element-list opt-annotation
	element-list => . element ";"
	element-list => . element-list element ";"
	element => . import-clause
	element => . extends-clause
	element => . "redeclare" $P1 $P2 $P3 element-1
	element => . "final" $P4 $P5 element-1
	element => . "inner" $P6 element-1
	element => . "outer" element-1
	element => . element-1
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	import-clause => . "import" import-clause-1 comment
	extends-clause => . "extends" name class-modification annotation
	extends-clause => . "extends" name class-modification
	extends-clause => . "extends" name annotation
	extends-clause => . "extends" name
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"extends" => shift 85
		"import" => shift 86
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 90
		"outer" => shift 91
		"inner" => shift 92
		"final" => shift 93
		"redeclare" => shift 94
		extends-clause => shift 95
		import-clause => shift 96
		element => shift 97
		element-list => shift 98
		composition => shift 99

54:	short-class-specifier => ident "=" . base-prefix name array-subscripts class-modification comment ("constrainedby" ";")
	base-prefix => .
	base-prefix => . type-prefix
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	short-class-specifier => ident "=" . base-prefix name array-subscripts comment ("constrainedby" ";")
	base-prefix => .
	base-prefix => . type-prefix
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	short-class-specifier => ident "=" . base-prefix name class-modification comment ("constrainedby" ";")
	base-prefix => .
	base-prefix => . type-prefix
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	short-class-specifier => ident "=" . base-prefix name comment ("constrainedby" ";")
	base-prefix => .
	base-prefix => . type-prefix
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	short-class-specifier => ident "=" . "enumeration" "(" filler-1 ")" comment ("constrainedby" ";")
	der-class-specifier => ident "=" . "der" "(" name "," der-class-specifier-1 ")" comment ("constrainedby" ";")
		"der" => shift 68
		"enumeration" => shift 69
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		type-prefix => shift 80
		base-prefix => shift 81
		'$ident => reduce 47
		"." => reduce 47

55:	long-class-specifier => "extends" ident . class-modification string-comment composition "end" ident ("constrainedby" ";")
	class-modification => . "(" argument-list ")"
	class-modification => . "(" ")"
	long-class-specifier => "extends" ident . string-comment composition "end" ident ("constrainedby" ";")
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 65
		"(" => shift 66
		class-modification => shift 67
		"import" => reduce 340
		"extends" => reduce 340
		"function" => reduce 340
		"pure" => reduce 340
		"impure" => reduce 340
		"package" => reduce 340
		"type" => reduce 340
		"connector" => reduce 340
		"expandable" => reduce 340
		"block" => reduce 340
		"record" => reduce 340
		"operator" => reduce 340
		"model" => reduce 340
		"class" => reduce 340
		"partial" => reduce 340
		"encapsulated" => reduce 340
		"stream" => reduce 340
		"flow" => reduce 340
		"constant" => reduce 340
		"parameter" => reduce 340
		"discrete" => reduce 340
		"output" => reduce 340
		"input" => reduce 340
		'$ident => reduce 340
		"." => reduce 340
		"replaceable" => reduce 340
		"outer" => reduce 340
		"inner" => reduce 340
		"final" => reduce 340
		"redeclare" => reduce 340

56:	class-definition => "encapsulated" class-prefixes class-specifier . ("constrainedby" ";")
		";" => reduce 10
		"constrainedby" => reduce 10

57:	stored-definition-2 => "final" class-definition ";" . ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 6
		"pure" => reduce 6
		"impure" => reduce 6
		"package" => reduce 6
		"type" => reduce 6
		"connector" => reduce 6
		"expandable" => reduce 6
		"block" => reduce 6
		"record" => reduce 6
		"operator" => reduce 6
		"model" => reduce 6
		"class" => reduce 6
		"partial" => reduce 6
		"encapsulated" => reduce 6
		"final" => reduce 6
		'$end => reduce 6

58:	stored-definition-1 => "within" name ";" . ("final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 4
		"pure" => reduce 4
		"impure" => reduce 4
		"package" => reduce 4
		"type" => reduce 4
		"connector" => reduce 4
		"expandable" => reduce 4
		"block" => reduce 4
		"record" => reduce 4
		"operator" => reduce 4
		"model" => reduce 4
		"class" => reduce 4
		"partial" => reduce 4
		"encapsulated" => reduce 4
		"final" => reduce 4

59:	name => name "." . ident ("if" "elsewhen" "end" "}" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "elseif" "else" "loop" "then" "for" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "]" ":" "," "=" ":=" ")" "constrainedby" '$string "(" "annotation" '$ident "[" "." ";")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 64

60:	name => "." ident . ("if" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "elsewhen" "end" "}" "constrainedby" "elseif" "else" "loop" "then" "for" "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" ":" "annotation" "," "=" ":=" "(" '$string ")" '$ident "[" "." ";")
		";" => reduce 304
		"." => reduce 304
		"[" => reduce 304
		'$ident => reduce 304
		")" => reduce 304
		'$string => reduce 304
		"(" => reduce 304
		":=" => reduce 304
		"=" => reduce 304
		"," => reduce 304
		"annotation" => reduce 304
		":" => reduce 304
		"or" => reduce 304
		"and" => reduce 304
		"<" => reduce 304
		"<=" => reduce 304
		">" => reduce 304
		">=" => reduce 304
		"==" => reduce 304
		"<>" => reduce 304
		".-" => reduce 304
		".+" => reduce 304
		"-" => reduce 304
		"+" => reduce 304
		"*" => reduce 304
		"/" => reduce 304
		".*" => reduce 304
		"./" => reduce 304
		".^" => reduce 304
		"^" => reduce 304
		"]" => reduce 304
		"for" => reduce 304
		"then" => reduce 304
		"loop" => reduce 304
		"else" => reduce 304
		"elseif" => reduce 304
		"constrainedby" => reduce 304
		"}" => reduce 304
		"end" => reduce 304
		"elsewhen" => reduce 304
		"stream" => reduce 304
		"flow" => reduce 304
		"constant" => reduce 304
		"parameter" => reduce 304
		"discrete" => reduce 304
		"output" => reduce 304
		"input" => reduce 304
		"if" => reduce 304

61:	stored-definition-2 => stored-definition-2 class-definition ";" . ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 9
		"pure" => reduce 9
		"impure" => reduce 9
		"package" => reduce 9
		"type" => reduce 9
		"connector" => reduce 9
		"expandable" => reduce 9
		"block" => reduce 9
		"record" => reduce 9
		"operator" => reduce 9
		"model" => reduce 9
		"class" => reduce 9
		"partial" => reduce 9
		"encapsulated" => reduce 9
		"final" => reduce 9
		'$end => reduce 9

62:	stored-definition-2 => stored-definition-2 "final" class-definition . ";" ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		";" => shift 63

63:	stored-definition-2 => stored-definition-2 "final" class-definition ";" . ('$end "final" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 8
		"pure" => reduce 8
		"impure" => reduce 8
		"package" => reduce 8
		"type" => reduce 8
		"connector" => reduce 8
		"expandable" => reduce 8
		"block" => reduce 8
		"record" => reduce 8
		"operator" => reduce 8
		"model" => reduce 8
		"class" => reduce 8
		"partial" => reduce 8
		"encapsulated" => reduce 8
		"final" => reduce 8
		'$end => reduce 8

64:	name => name "." ident . ("if" "elsewhen" "end" "}" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "elseif" "else" "loop" "then" "for" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "]" ":" "," "=" ":=" ")" "constrainedby" "(" '$ident "[" '$string "annotation" "." ";")
		";" => reduce 305
		"." => reduce 305
		"annotation" => reduce 305
		'$string => reduce 305
		"[" => reduce 305
		'$ident => reduce 305
		"(" => reduce 305
		"constrainedby" => reduce 305
		")" => reduce 305
		":=" => reduce 305
		"=" => reduce 305
		"," => reduce 305
		":" => reduce 305
		"]" => reduce 305
		"or" => reduce 305
		"and" => reduce 305
		"<" => reduce 305
		"<=" => reduce 305
		">" => reduce 305
		">=" => reduce 305
		"==" => reduce 305
		"<>" => reduce 305
		".-" => reduce 305
		".+" => reduce 305
		"-" => reduce 305
		"+" => reduce 305
		"*" => reduce 305
		"/" => reduce 305
		".*" => reduce 305
		"./" => reduce 305
		".^" => reduce 305
		"^" => reduce 305
		"for" => reduce 305
		"then" => reduce 305
		"loop" => reduce 305
		"else" => reduce 305
		"elseif" => reduce 305
		"stream" => reduce 305
		"flow" => reduce 305
		"constant" => reduce 305
		"parameter" => reduce 305
		"discrete" => reduce 305
		"output" => reduce 305
		"input" => reduce 305
		"}" => reduce 305
		"end" => reduce 305
		"elsewhen" => reduce 305
		"if" => reduce 305

65:	long-class-specifier => "extends" ident string-comment . composition "end" ident ("constrainedby" ";")
	composition => . element-list composition-1-list external-part opt-annotation
	composition => . element-list composition-1-list opt-annotation
	composition => . element-list external-part opt-annotation
	composition => . element-list opt-annotation
	element-list => . element ";"
	element-list => . element-list element ";"
	element => . import-clause
	element => . extends-clause
	element => . "redeclare" $P1 $P2 $P3 element-1
	element => . "final" $P4 $P5 element-1
	element => . "inner" $P6 element-1
	element => . "outer" element-1
	element => . element-1
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	import-clause => . "import" import-clause-1 comment
	extends-clause => . "extends" name class-modification annotation
	extends-clause => . "extends" name class-modification
	extends-clause => . "extends" name annotation
	extends-clause => . "extends" name
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"extends" => shift 85
		"import" => shift 86
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 90
		"outer" => shift 91
		"inner" => shift 92
		"final" => shift 93
		"redeclare" => shift 94
		extends-clause => shift 95
		import-clause => shift 96
		element => shift 97
		element-list => shift 98
		composition => shift 160

66:	class-modification => "(" . ")" ("if" "," ")" "constrainedby" ";" "=" "annotation" '$string "redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import")
	class-modification => "(" . argument-list ")" ("if" "," ")" "constrainedby" ";" "=" "annotation" '$string "redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import")
	argument-list => . argument
	argument-list => . argument-list "," argument
	argument => . element-modification-or-replaceable
	argument => . element-redeclaration
	element-modification-or-replaceable => . "each" "final" elt-mod-or-repl-1
	element-modification-or-replaceable => . "each" elt-mod-or-repl-1
	element-modification-or-replaceable => . "final" elt-mod-or-repl-1
	element-modification-or-replaceable => . elt-mod-or-repl-1
	element-redeclaration => . "redeclare" $P10 $P11 elt-redecl-1
	elt-mod-or-repl-1 => . element-modification
	elt-mod-or-repl-1 => . element-replaceable
	element-modification => . name $P9 string-comment
	element-replaceable => . "replaceable" short-class-definition component-clause1 constraining-clause
	element-replaceable => . "replaceable" short-class-definition component-clause1
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"replaceable" => shift 147
		name => shift 148
		element-replaceable => shift 149
		element-modification => shift 150
		"redeclare" => shift 151
		elt-mod-or-repl-1 => shift 152
		"final" => shift 153
		"each" => shift 154
		element-redeclaration => shift 155
		element-modification-or-replaceable => shift 156
		argument => shift 157
		argument-list => shift 158
		")" => shift 159

67:	long-class-specifier => "extends" ident class-modification . string-comment composition "end" ident ("constrainedby" ";")
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 146
		"import" => reduce 340
		"extends" => reduce 340
		"function" => reduce 340
		"pure" => reduce 340
		"impure" => reduce 340
		"package" => reduce 340
		"type" => reduce 340
		"connector" => reduce 340
		"expandable" => reduce 340
		"block" => reduce 340
		"record" => reduce 340
		"operator" => reduce 340
		"model" => reduce 340
		"class" => reduce 340
		"partial" => reduce 340
		"encapsulated" => reduce 340
		"stream" => reduce 340
		"flow" => reduce 340
		"constant" => reduce 340
		"parameter" => reduce 340
		"discrete" => reduce 340
		"output" => reduce 340
		"input" => reduce 340
		'$ident => reduce 340
		"." => reduce 340
		"replaceable" => reduce 340
		"outer" => reduce 340
		"inner" => reduce 340
		"final" => reduce 340
		"redeclare" => reduce 340

68:	der-class-specifier => ident "=" "der" . "(" name "," der-class-specifier-1 ")" comment ("constrainedby" ";")
		"(" => shift 145

69:	short-class-specifier => ident "=" "enumeration" . "(" filler-1 ")" comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
		"(" => shift 144

70:	type-prefix-3 => "output" . ('$ident ".")
		"." => reduce 136
		'$ident => reduce 136

71:	type-prefix-3 => "input" . ('$ident ".")
		"." => reduce 135
		'$ident => reduce 135

72:	type-prefix-2 => "constant" . ("input" "output" '$ident ".")
		"." => reduce 134
		'$ident => reduce 134
		"output" => reduce 134
		"input" => reduce 134

73:	type-prefix-2 => "parameter" . ("input" "output" '$ident ".")
		"." => reduce 133
		'$ident => reduce 133
		"output" => reduce 133
		"input" => reduce 133

74:	type-prefix-2 => "discrete" . ("input" "output" '$ident ".")
		"." => reduce 132
		'$ident => reduce 132
		"output" => reduce 132
		"input" => reduce 132

75:	type-prefix-1 => "stream" . ("discrete" "parameter" "constant" "input" "output" '$ident ".")
		"." => reduce 131
		'$ident => reduce 131
		"output" => reduce 131
		"input" => reduce 131
		"constant" => reduce 131
		"parameter" => reduce 131
		"discrete" => reduce 131

76:	type-prefix-1 => "flow" . ("discrete" "parameter" "constant" "input" "output" '$ident ".")
		"." => reduce 130
		'$ident => reduce 130
		"output" => reduce 130
		"input" => reduce 130
		"constant" => reduce 130
		"parameter" => reduce 130
		"discrete" => reduce 130

77:	type-prefix => type-prefix-3 . ("." '$ident)
		'$ident => reduce 129
		"." => reduce 129

78:	type-prefix => type-prefix-2 . ("." '$ident)
	type-prefix => type-prefix-2 . type-prefix-3 ("." '$ident)
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
		"output" => shift 70
		"input" => shift 71
		type-prefix-3 => shift 143
		'$ident => reduce 128
		"." => reduce 128

79:	type-prefix => type-prefix-1 . ("." '$ident)
	type-prefix => type-prefix-1 . type-prefix-3 ("." '$ident)
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	type-prefix => type-prefix-1 . type-prefix-2 ("." '$ident)
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix => type-prefix-1 . type-prefix-2 type-prefix-3 ("." '$ident)
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		type-prefix-2 => shift 141
		"output" => shift 70
		"input" => shift 71
		type-prefix-3 => shift 142
		'$ident => reduce 127
		"." => reduce 127

80:	base-prefix => type-prefix . ("." '$ident)
		'$ident => reduce 48
		"." => reduce 48

81:	short-class-specifier => ident "=" base-prefix . name comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	short-class-specifier => ident "=" base-prefix . name class-modification comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	short-class-specifier => ident "=" base-prefix . name array-subscripts comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	short-class-specifier => ident "=" base-prefix . name array-subscripts class-modification comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		name => shift 140

82:	name => name . "." ident ("." '$ident "[")
	type-specifier => name . ("[" '$ident)
		"." => shift 59
		'$ident => reduce 137
		"[" => reduce 137

83:	component-clause => type-specifier . component-list ("constrainedby" ";")
	component-list => . component-declaration
	component-list => . component-list "," component-declaration
	component-declaration => . declaration condition-attribute comment
	component-declaration => . declaration comment
	declaration => . ident $P7 $P8
	ident => . '$ident
	component-clause => type-specifier . array-subscripts component-list ("constrainedby" ";")
	array-subscripts => . "[" array-subscript-list "]"
		"[" => shift 134
		array-subscripts => shift 135
		'$ident => shift 26
		ident => shift 136
		declaration => shift 137
		component-declaration => shift 138
		component-list => shift 139

84:	component-clause => type-prefix . type-specifier component-list ("constrainedby" ";")
	type-specifier => . name
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	component-clause => type-prefix . type-specifier array-subscripts component-list ("constrainedby" ";")
	type-specifier => . name
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		name => shift 82
		type-specifier => shift 133

85:	extends-clause => "extends" . name (";")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	extends-clause => "extends" . name annotation (";")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	extends-clause => "extends" . name class-modification (";")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	extends-clause => "extends" . name class-modification annotation (";")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		name => shift 132

86:	import-clause => "import" . import-clause-1 comment (";")
	import-clause-1 => . ident "=" name
	import-clause-1 => . name "." import-clause-2
	import-clause-1 => . name
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		name => shift 129
		ident => shift 130
		import-clause-1 => shift 131

87:	element-1 => "replaceable" . element-2 (";")
	element-2 => . class-definition
	element-2 => . component-clause
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	element-1 => "replaceable" . element-2 constraining-clause comment (";")
	element-2 => . class-definition
	element-2 => . component-clause
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		component-clause => shift 126
		class-definition => shift 127
		element-2 => shift 128

88:	element-1 => component-clause . (";")
		";" => reduce 99

89:	element-1 => class-definition . (";")
		";" => reduce 98

90:	element => element-1 . (";")
		";" => reduce 85

91:	element => "outer" . element-1 (";")
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 125

92:	element => "inner" . $P6 element-1 (";")
	$P6 => .
	$P6 => . "outer"
		"outer" => shift 123
		$P6 => shift 124
		"function" => reduce 96
		"pure" => reduce 96
		"impure" => reduce 96
		"package" => reduce 96
		"type" => reduce 96
		"connector" => reduce 96
		"expandable" => reduce 96
		"block" => reduce 96
		"record" => reduce 96
		"operator" => reduce 96
		"model" => reduce 96
		"class" => reduce 96
		"partial" => reduce 96
		"encapsulated" => reduce 96
		"stream" => reduce 96
		"flow" => reduce 96
		"constant" => reduce 96
		"parameter" => reduce 96
		"discrete" => reduce 96
		"output" => reduce 96
		"input" => reduce 96
		'$ident => reduce 96
		"." => reduce 96
		"replaceable" => reduce 96

93:	element => "final" . $P4 $P5 element-1 (";")
	$P4 => .
	$P4 => . "inner"
		"inner" => shift 121
		$P4 => shift 122
		"function" => reduce 92
		"pure" => reduce 92
		"impure" => reduce 92
		"package" => reduce 92
		"type" => reduce 92
		"connector" => reduce 92
		"expandable" => reduce 92
		"block" => reduce 92
		"record" => reduce 92
		"operator" => reduce 92
		"model" => reduce 92
		"class" => reduce 92
		"partial" => reduce 92
		"encapsulated" => reduce 92
		"stream" => reduce 92
		"flow" => reduce 92
		"constant" => reduce 92
		"parameter" => reduce 92
		"discrete" => reduce 92
		"output" => reduce 92
		"input" => reduce 92
		'$ident => reduce 92
		"." => reduce 92
		"replaceable" => reduce 92
		"outer" => reduce 92

94:	element => "redeclare" . $P1 $P2 $P3 element-1 (";")
	$P1 => .
	$P1 => . "final"
		"final" => shift 119
		$P1 => shift 120
		"function" => reduce 86
		"pure" => reduce 86
		"impure" => reduce 86
		"package" => reduce 86
		"type" => reduce 86
		"connector" => reduce 86
		"expandable" => reduce 86
		"block" => reduce 86
		"record" => reduce 86
		"operator" => reduce 86
		"model" => reduce 86
		"class" => reduce 86
		"partial" => reduce 86
		"encapsulated" => reduce 86
		"stream" => reduce 86
		"flow" => reduce 86
		"constant" => reduce 86
		"parameter" => reduce 86
		"discrete" => reduce 86
		"output" => reduce 86
		"input" => reduce 86
		'$ident => reduce 86
		"." => reduce 86
		"replaceable" => reduce 86
		"outer" => reduce 86
		"inner" => reduce 86

95:	element => extends-clause . (";")
		";" => reduce 80

96:	element => import-clause . (";")
		";" => reduce 79

97:	element-list => element . ";" ("redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import" "public" "protected" "initial" "algorithm" "equation" "external" "annotation" "end")
		";" => shift 118

98:	element-list => element-list . element ";" ("redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import" "public" "protected" "initial" "algorithm" "equation" "external" "annotation" "end")
	element => . import-clause
	element => . extends-clause
	element => . "redeclare" $P1 $P2 $P3 element-1
	element => . "final" $P4 $P5 element-1
	element => . "inner" $P6 element-1
	element => . "outer" element-1
	element => . element-1
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	import-clause => . "import" import-clause-1 comment
	extends-clause => . "extends" name class-modification annotation
	extends-clause => . "extends" name class-modification
	extends-clause => . "extends" name annotation
	extends-clause => . "extends" name
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	composition => element-list . opt-annotation ("end")
	opt-annotation => .
	opt-annotation => . annotation ";"
	annotation => . "annotation" class-modification
	composition => element-list . external-part opt-annotation ("end")
	external-part => . "external" language-specification external-function-call annotation ";"
	external-part => . "external" language-specification external-function-call ";"
	external-part => . "external" language-specification annotation ";"
	external-part => . "external" external-function-call annotation ";"
	external-part => . "external" language-specification ";"
	external-part => . "external" external-function-call ";"
	external-part => . "external" annotation ";"
	external-part => . "external" ";"
	composition => element-list . composition-1-list opt-annotation ("end")
	composition-1-list => . composition-1
	composition-1-list => . composition-1-list composition-1
	composition-1 => . "public"
	composition-1 => . "public" element-list
	composition-1 => . "protected"
	composition-1 => . "protected" element-list
	composition-1 => . equation-section
	composition-1 => . algorithm-section
	equation-section => . "initial" "equation" equation-list
	equation-section => . "equation" equation-list
	equation-section => . "initial" "equation"
	equation-section => . "equation"
	algorithm-section => . "initial" "algorithm" statement-list
	algorithm-section => . "algorithm" statement-list
	algorithm-section => . "initial" "algorithm"
	algorithm-section => . "algorithm"
	composition => element-list . composition-1-list external-part opt-annotation ("end")
	composition-1-list => . composition-1
	composition-1-list => . composition-1-list composition-1
	composition-1 => . "public"
	composition-1 => . "public" element-list
	composition-1 => . "protected"
	composition-1 => . "protected" element-list
	composition-1 => . equation-section
	composition-1 => . algorithm-section
	equation-section => . "initial" "equation" equation-list
	equation-section => . "equation" equation-list
	equation-section => . "initial" "equation"
	equation-section => . "equation"
	algorithm-section => . "initial" "algorithm" statement-list
	algorithm-section => . "algorithm" statement-list
	algorithm-section => . "initial" "algorithm"
	algorithm-section => . "algorithm"
		"algorithm" => shift 103
		"equation" => shift 104
		"initial" => shift 105
		algorithm-section => shift 106
		equation-section => shift 107
		"protected" => shift 108
		"public" => shift 109
		composition-1 => shift 110
		composition-1-list => shift 111
		"external" => shift 112
		external-part => shift 113
		"annotation" => shift 114
		annotation => shift 115
		opt-annotation => shift 116
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"extends" => shift 85
		"import" => shift 86
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 90
		"outer" => shift 91
		"inner" => shift 92
		"final" => shift 93
		"redeclare" => shift 94
		extends-clause => shift 95
		import-clause => shift 96
		element => shift 117
		"end" => reduce 344

99:	long-class-specifier => ident string-comment composition . "end" ident ("constrainedby" ";")
		"end" => shift 102

100:	string-cat => string-cat "+" . string (")" "constrainedby" "," ";" "annotation" "+" "import" "extends" "function" "pure" "impure" "package" "type" "connector" "expandable" "block" "record" "operator" "model" "class" "partial" "encapsulated" "stream" "flow" "constant" "parameter" "discrete" "output" "input" '$ident "." "replaceable" "outer" "inner" "final" "redeclare")
	string => . '$string
		'$string => shift 50
		string => shift 101

101:	string-cat => string-cat "+" string . (")" "constrainedby" "," ";" "annotation" "+" "import" "extends" "function" "pure" "impure" "package" "type" "connector" "expandable" "block" "record" "operator" "model" "class" "partial" "encapsulated" "stream" "flow" "constant" "parameter" "discrete" "output" "input" '$ident "." "replaceable" "outer" "inner" "final" "redeclare")
		"redeclare" => reduce 343
		"final" => reduce 343
		"inner" => reduce 343
		"outer" => reduce 343
		"replaceable" => reduce 343
		"." => reduce 343
		'$ident => reduce 343
		"input" => reduce 343
		"output" => reduce 343
		"discrete" => reduce 343
		"parameter" => reduce 343
		"constant" => reduce 343
		"flow" => reduce 343
		"stream" => reduce 343
		"encapsulated" => reduce 343
		"partial" => reduce 343
		"class" => reduce 343
		"model" => reduce 343
		"operator" => reduce 343
		"record" => reduce 343
		"block" => reduce 343
		"expandable" => reduce 343
		"connector" => reduce 343
		"type" => reduce 343
		"package" => reduce 343
		"impure" => reduce 343
		"pure" => reduce 343
		"function" => reduce 343
		"extends" => reduce 343
		"import" => reduce 343
		"+" => reduce 343
		"annotation" => reduce 343
		";" => reduce 343
		"," => reduce 343
		"constrainedby" => reduce 343
		")" => reduce 343

102:	long-class-specifier => ident string-comment composition "end" . ident ("constrainedby" ";")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 284

103:	algorithm-section => "algorithm" . ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
	algorithm-section => "algorithm" . statement-list ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
	statement-list => . statement ";"
	statement-list => . statement-list statement ";"
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 282
		statement-list => shift 283
		"annotation" => reduce 186
		"equation" => reduce 186
		"algorithm" => reduce 186
		"initial" => reduce 186
		"protected" => reduce 186
		"public" => reduce 186
		"external" => reduce 186
		"end" => reduce 186

104:	equation-section => "equation" . ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
	equation-section => "equation" . equation-list ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
	equation-list => . equation ";"
	equation-list => . equation-list equation ";"
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 266
		equation-list => shift 267
		"annotation" => reduce 182
		"equation" => reduce 182
		"algorithm" => reduce 182
		"initial" => reduce 182
		"protected" => reduce 182
		"public" => reduce 182
		"external" => reduce 182
		"end" => reduce 182

105:	algorithm-section => "initial" . "algorithm" ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
	algorithm-section => "initial" . "algorithm" statement-list ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
	equation-section => "initial" . "equation" ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
	equation-section => "initial" . "equation" equation-list ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
		"equation" => shift 253
		"algorithm" => shift 254

106:	composition-1 => algorithm-section . ("end" "external" "equation" "algorithm" "initial" "protected" "public" "annotation")
		"annotation" => reduce 63
		"public" => reduce 63
		"protected" => reduce 63
		"initial" => reduce 63
		"algorithm" => reduce 63
		"equation" => reduce 63
		"external" => reduce 63
		"end" => reduce 63

107:	composition-1 => equation-section . ("end" "external" "equation" "algorithm" "initial" "protected" "public" "annotation")
		"annotation" => reduce 62
		"public" => reduce 62
		"protected" => reduce 62
		"initial" => reduce 62
		"algorithm" => reduce 62
		"equation" => reduce 62
		"external" => reduce 62
		"end" => reduce 62

108:	composition-1 => "protected" . element-list ("end" "external" "equation" "algorithm" "initial" "protected" "public" "annotation")
	element-list => . element ";"
	element-list => . element-list element ";"
	element => . import-clause
	element => . extends-clause
	element => . "redeclare" $P1 $P2 $P3 element-1
	element => . "final" $P4 $P5 element-1
	element => . "inner" $P6 element-1
	element => . "outer" element-1
	element => . element-1
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	import-clause => . "import" import-clause-1 comment
	extends-clause => . "extends" name class-modification annotation
	extends-clause => . "extends" name class-modification
	extends-clause => . "extends" name annotation
	extends-clause => . "extends" name
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	composition-1 => "protected" . ("end" "external" "equation" "algorithm" "initial" "protected" "public" "annotation")
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"extends" => shift 85
		"import" => shift 86
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 90
		"outer" => shift 91
		"inner" => shift 92
		"final" => shift 93
		"redeclare" => shift 94
		extends-clause => shift 95
		import-clause => shift 96
		element => shift 97
		element-list => shift 252
		"annotation" => reduce 60
		"public" => reduce 60
		"protected" => reduce 60
		"initial" => reduce 60
		"algorithm" => reduce 60
		"equation" => reduce 60
		"external" => reduce 60
		"end" => reduce 60

109:	composition-1 => "public" . element-list ("end" "external" "equation" "algorithm" "initial" "protected" "public" "annotation")
	element-list => . element ";"
	element-list => . element-list element ";"
	element => . import-clause
	element => . extends-clause
	element => . "redeclare" $P1 $P2 $P3 element-1
	element => . "final" $P4 $P5 element-1
	element => . "inner" $P6 element-1
	element => . "outer" element-1
	element => . element-1
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	import-clause => . "import" import-clause-1 comment
	extends-clause => . "extends" name class-modification annotation
	extends-clause => . "extends" name class-modification
	extends-clause => . "extends" name annotation
	extends-clause => . "extends" name
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	composition-1 => "public" . ("end" "external" "equation" "algorithm" "initial" "protected" "public" "annotation")
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"extends" => shift 85
		"import" => shift 86
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 90
		"outer" => shift 91
		"inner" => shift 92
		"final" => shift 93
		"redeclare" => shift 94
		extends-clause => shift 95
		import-clause => shift 96
		element => shift 97
		element-list => shift 251
		"annotation" => reduce 58
		"public" => reduce 58
		"protected" => reduce 58
		"initial" => reduce 58
		"algorithm" => reduce 58
		"equation" => reduce 58
		"external" => reduce 58
		"end" => reduce 58

110:	composition-1-list => composition-1 . ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
		"annotation" => reduce 56
		"equation" => reduce 56
		"algorithm" => reduce 56
		"initial" => reduce 56
		"protected" => reduce 56
		"public" => reduce 56
		"external" => reduce 56
		"end" => reduce 56

111:	composition => element-list composition-1-list . external-part opt-annotation ("end")
	external-part => . "external" language-specification external-function-call annotation ";"
	external-part => . "external" language-specification external-function-call ";"
	external-part => . "external" language-specification annotation ";"
	external-part => . "external" external-function-call annotation ";"
	external-part => . "external" language-specification ";"
	external-part => . "external" external-function-call ";"
	external-part => . "external" annotation ";"
	external-part => . "external" ";"
	composition-1-list => composition-1-list . composition-1 ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
	composition-1 => . "public"
	composition-1 => . "public" element-list
	composition-1 => . "protected"
	composition-1 => . "protected" element-list
	composition-1 => . equation-section
	composition-1 => . algorithm-section
	equation-section => . "initial" "equation" equation-list
	equation-section => . "equation" equation-list
	equation-section => . "initial" "equation"
	equation-section => . "equation"
	algorithm-section => . "initial" "algorithm" statement-list
	algorithm-section => . "algorithm" statement-list
	algorithm-section => . "initial" "algorithm"
	algorithm-section => . "algorithm"
	composition => element-list composition-1-list . opt-annotation ("end")
	opt-annotation => .
	opt-annotation => . annotation ";"
	annotation => . "annotation" class-modification
		"annotation" => shift 114
		annotation => shift 115
		opt-annotation => shift 248
		"algorithm" => shift 103
		"equation" => shift 104
		"initial" => shift 105
		algorithm-section => shift 106
		equation-section => shift 107
		"protected" => shift 108
		"public" => shift 109
		composition-1 => shift 249
		"external" => shift 112
		external-part => shift 250
		"end" => reduce 344

112:	external-part => "external" . ";" ("end" "annotation")
	external-part => "external" . annotation ";" ("end" "annotation")
	annotation => . "annotation" class-modification
	external-part => "external" . external-function-call ";" ("end" "annotation")
	external-function-call => . component-reference "=" ident "(" expression-list ")"
	external-function-call => . component-reference "=" ident "(" ")"
	external-function-call => . ident "(" expression-list ")"
	external-function-call => . ident "(" ")"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	ident => . '$ident
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	external-part => "external" . language-specification ";" ("end" "annotation")
	language-specification => . string
	string => . '$string
	external-part => "external" . external-function-call annotation ";" ("end" "annotation")
	external-function-call => . component-reference "=" ident "(" expression-list ")"
	external-function-call => . component-reference "=" ident "(" ")"
	external-function-call => . ident "(" expression-list ")"
	external-function-call => . ident "(" ")"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	ident => . '$ident
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	external-part => "external" . language-specification annotation ";" ("end" "annotation")
	language-specification => . string
	string => . '$string
	external-part => "external" . language-specification external-function-call ";" ("end" "annotation")
	language-specification => . string
	string => . '$string
	external-part => "external" . language-specification external-function-call annotation ";" ("end" "annotation")
	language-specification => . string
	string => . '$string
		'$string => shift 50
		string => shift 239
		language-specification => shift 240
		"." => shift 241
		'$ident => shift 26
		component-reference-1 => shift 242
		ident => shift 243
		component-reference => shift 244
		external-function-call => shift 245
		"annotation" => shift 114
		annotation => shift 246
		";" => shift 247

113:	composition => element-list external-part . opt-annotation ("end")
	opt-annotation => .
	opt-annotation => . annotation ";"
	annotation => . "annotation" class-modification
		"annotation" => shift 114
		annotation => shift 115
		opt-annotation => shift 238
		"end" => reduce 344

114:	annotation => "annotation" . class-modification ("input" "output" "discrete" "parameter" "constant" "flow" "stream" ")" "constrainedby" "," ";")
	class-modification => . "(" argument-list ")"
	class-modification => . "(" ")"
		"(" => shift 66
		class-modification => shift 237

115:	opt-annotation => annotation . ";" ("end")
		";" => shift 236

116:	composition => element-list opt-annotation . ("end")
		"end" => reduce 55

117:	element-list => element-list element . ";" ("redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import" "public" "protected" "initial" "algorithm" "equation" "external" "annotation" "end")
		";" => shift 235

118:	element-list => element ";" . ("redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import" "public" "protected" "initial" "algorithm" "equation" "external" "annotation" "end")
		"end" => reduce 77
		"annotation" => reduce 77
		"external" => reduce 77
		"equation" => reduce 77
		"algorithm" => reduce 77
		"initial" => reduce 77
		"protected" => reduce 77
		"public" => reduce 77
		"import" => reduce 77
		"extends" => reduce 77
		"function" => reduce 77
		"pure" => reduce 77
		"impure" => reduce 77
		"package" => reduce 77
		"type" => reduce 77
		"connector" => reduce 77
		"expandable" => reduce 77
		"block" => reduce 77
		"record" => reduce 77
		"operator" => reduce 77
		"model" => reduce 77
		"class" => reduce 77
		"partial" => reduce 77
		"encapsulated" => reduce 77
		"stream" => reduce 77
		"flow" => reduce 77
		"constant" => reduce 77
		"parameter" => reduce 77
		"discrete" => reduce 77
		"output" => reduce 77
		"input" => reduce 77
		'$ident => reduce 77
		"." => reduce 77
		"replaceable" => reduce 77
		"outer" => reduce 77
		"inner" => reduce 77
		"final" => reduce 77
		"redeclare" => reduce 77

119:	$P1 => "final" . ("inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 87
		"pure" => reduce 87
		"impure" => reduce 87
		"package" => reduce 87
		"type" => reduce 87
		"connector" => reduce 87
		"expandable" => reduce 87
		"block" => reduce 87
		"record" => reduce 87
		"operator" => reduce 87
		"model" => reduce 87
		"class" => reduce 87
		"partial" => reduce 87
		"encapsulated" => reduce 87
		"stream" => reduce 87
		"flow" => reduce 87
		"constant" => reduce 87
		"parameter" => reduce 87
		"discrete" => reduce 87
		"output" => reduce 87
		"input" => reduce 87
		'$ident => reduce 87
		"." => reduce 87
		"replaceable" => reduce 87
		"outer" => reduce 87
		"inner" => reduce 87

120:	element => "redeclare" $P1 . $P2 $P3 element-1 (";")
	$P2 => .
	$P2 => . "inner"
		"inner" => shift 233
		$P2 => shift 234
		"function" => reduce 88
		"pure" => reduce 88
		"impure" => reduce 88
		"package" => reduce 88
		"type" => reduce 88
		"connector" => reduce 88
		"expandable" => reduce 88
		"block" => reduce 88
		"record" => reduce 88
		"operator" => reduce 88
		"model" => reduce 88
		"class" => reduce 88
		"partial" => reduce 88
		"encapsulated" => reduce 88
		"stream" => reduce 88
		"flow" => reduce 88
		"constant" => reduce 88
		"parameter" => reduce 88
		"discrete" => reduce 88
		"output" => reduce 88
		"input" => reduce 88
		'$ident => reduce 88
		"." => reduce 88
		"replaceable" => reduce 88
		"outer" => reduce 88

121:	$P4 => "inner" . ("outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 93
		"pure" => reduce 93
		"impure" => reduce 93
		"package" => reduce 93
		"type" => reduce 93
		"connector" => reduce 93
		"expandable" => reduce 93
		"block" => reduce 93
		"record" => reduce 93
		"operator" => reduce 93
		"model" => reduce 93
		"class" => reduce 93
		"partial" => reduce 93
		"encapsulated" => reduce 93
		"stream" => reduce 93
		"flow" => reduce 93
		"constant" => reduce 93
		"parameter" => reduce 93
		"discrete" => reduce 93
		"output" => reduce 93
		"input" => reduce 93
		'$ident => reduce 93
		"." => reduce 93
		"replaceable" => reduce 93
		"outer" => reduce 93

122:	element => "final" $P4 . $P5 element-1 (";")
	$P5 => .
	$P5 => . "outer"
		"outer" => shift 231
		$P5 => shift 232
		"function" => reduce 94
		"pure" => reduce 94
		"impure" => reduce 94
		"package" => reduce 94
		"type" => reduce 94
		"connector" => reduce 94
		"expandable" => reduce 94
		"block" => reduce 94
		"record" => reduce 94
		"operator" => reduce 94
		"model" => reduce 94
		"class" => reduce 94
		"partial" => reduce 94
		"encapsulated" => reduce 94
		"stream" => reduce 94
		"flow" => reduce 94
		"constant" => reduce 94
		"parameter" => reduce 94
		"discrete" => reduce 94
		"output" => reduce 94
		"input" => reduce 94
		'$ident => reduce 94
		"." => reduce 94
		"replaceable" => reduce 94

123:	$P6 => "outer" . ("replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 97
		"pure" => reduce 97
		"impure" => reduce 97
		"package" => reduce 97
		"type" => reduce 97
		"connector" => reduce 97
		"expandable" => reduce 97
		"block" => reduce 97
		"record" => reduce 97
		"operator" => reduce 97
		"model" => reduce 97
		"class" => reduce 97
		"partial" => reduce 97
		"encapsulated" => reduce 97
		"stream" => reduce 97
		"flow" => reduce 97
		"constant" => reduce 97
		"parameter" => reduce 97
		"discrete" => reduce 97
		"output" => reduce 97
		"input" => reduce 97
		'$ident => reduce 97
		"." => reduce 97
		"replaceable" => reduce 97

124:	element => "inner" $P6 . element-1 (";")
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 230

125:	element => "outer" element-1 . (";")
		";" => reduce 84

126:	element-2 => component-clause . (";" "constrainedby")
		"constrainedby" => reduce 103
		";" => reduce 103

127:	element-2 => class-definition . (";" "constrainedby")
		"constrainedby" => reduce 102
		";" => reduce 102

128:	element-1 => "replaceable" element-2 . constraining-clause comment (";")
	constraining-clause => . "constrainedby" name class-modification
	constraining-clause => . "constrainedby" name
	element-1 => "replaceable" element-2 . (";")
		"constrainedby" => shift 228
		constraining-clause => shift 229
		";" => reduce 101

129:	name => name . "." ident (";" "." '$string "annotation")
	import-clause-1 => name . (";" "annotation" '$string)
	import-clause-1 => name . "." import-clause-2 (";" "annotation" '$string)
		"." => shift 227
		'$string => reduce 107
		"annotation" => reduce 107
		";" => reduce 107

130:	name => ident . (";" "." '$string "annotation")
	import-clause-1 => ident . "=" name (";" "annotation" '$string)
		"=" => shift 226
		"annotation" => reduce 303
		'$string => reduce 303
		"." => reduce 303
		";" => reduce 303

131:	import-clause => "import" import-clause-1 . comment (";")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 225
		";" => reduce 340
		"annotation" => reduce 340

132:	extends-clause => "extends" name . class-modification annotation (";")
	class-modification => . "(" argument-list ")"
	class-modification => . "(" ")"
	extends-clause => "extends" name . class-modification (";")
	class-modification => . "(" argument-list ")"
	class-modification => . "(" ")"
	extends-clause => "extends" name . annotation (";")
	annotation => . "annotation" class-modification
	name => name . "." ident (";" "(" "annotation" ".")
	extends-clause => "extends" name . (";")
		"." => shift 59
		"annotation" => shift 114
		annotation => shift 223
		"(" => shift 66
		class-modification => shift 224
		";" => reduce 116

133:	component-clause => type-prefix type-specifier . array-subscripts component-list ("constrainedby" ";")
	array-subscripts => . "[" array-subscript-list "]"
	component-clause => type-prefix type-specifier . component-list ("constrainedby" ";")
	component-list => . component-declaration
	component-list => . component-list "," component-declaration
	component-declaration => . declaration condition-attribute comment
	component-declaration => . declaration comment
	declaration => . ident $P7 $P8
	ident => . '$ident
		'$ident => shift 26
		ident => shift 136
		declaration => shift 137
		component-declaration => shift 138
		component-list => shift 221
		"[" => shift 134
		array-subscripts => shift 222

134:	array-subscripts => "[" . array-subscript-list "]" ("elsewhen" "end" "}" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "." "elseif" "else" "loop" "then" ")" "for" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "]" "constrainedby" ";" "," "if" "annotation" '$string "(" ":=" "=" '$ident)
	array-subscript-list => . subscript
	array-subscript-list => . array-subscript-list "," subscript
	subscript => . ":"
	subscript => . expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 217
		":" => shift 218
		subscript => shift 219
		array-subscript-list => shift 220

135:	component-clause => type-specifier array-subscripts . component-list ("constrainedby" ";")
	component-list => . component-declaration
	component-list => . component-list "," component-declaration
	component-declaration => . declaration condition-attribute comment
	component-declaration => . declaration comment
	declaration => . ident $P7 $P8
	ident => . '$ident
		'$ident => shift 26
		ident => shift 136
		declaration => shift 137
		component-declaration => shift 138
		component-list => shift 194

136:	declaration => ident . $P7 $P8 (")" "constrainedby" ";" "," "if" "annotation" '$string)
	$P7 => .
	$P7 => . array-subscripts
	array-subscripts => . "[" array-subscript-list "]"
		"[" => shift 134
		array-subscripts => shift 192
		$P7 => shift 193
		'$string => reduce 144
		"annotation" => reduce 144
		"if" => reduce 144
		"," => reduce 144
		";" => reduce 144
		"constrainedby" => reduce 144
		")" => reduce 144
		"(" => reduce 144
		":=" => reduce 144
		"=" => reduce 144

137:	component-declaration => declaration . comment ("constrainedby" ";" ",")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
	component-declaration => declaration . condition-attribute comment ("constrainedby" ";" ",")
	condition-attribute => . "if" expression
		"if" => shift 189
		condition-attribute => shift 190
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 191
		"," => reduce 340
		";" => reduce 340
		"constrainedby" => reduce 340
		"annotation" => reduce 340

138:	component-list => component-declaration . ("constrainedby" ";" ",")
		"," => reduce 138
		";" => reduce 138
		"constrainedby" => reduce 138

139:	component-list => component-list . "," component-declaration ("constrainedby" ";" ",")
	component-clause => type-specifier component-list . ("constrainedby" ";")
		"," => shift 188
		";" => reduce 122
		"constrainedby" => reduce 122

140:	short-class-specifier => ident "=" base-prefix name . array-subscripts class-modification comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	array-subscripts => . "[" array-subscript-list "]"
	short-class-specifier => ident "=" base-prefix name . array-subscripts comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	array-subscripts => . "[" array-subscript-list "]"
	short-class-specifier => ident "=" base-prefix name . class-modification comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	class-modification => . "(" argument-list ")"
	class-modification => . "(" ")"
	name => name . "." ident ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";" "[" "(" "." "annotation" '$string)
	short-class-specifier => ident "=" base-prefix name . comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 185
		"." => shift 59
		"(" => shift 66
		class-modification => shift 186
		"[" => shift 134
		array-subscripts => shift 187
		";" => reduce 340
		"constrainedby" => reduce 340
		"stream" => reduce 340
		"flow" => reduce 340
		"constant" => reduce 340
		"parameter" => reduce 340
		"discrete" => reduce 340
		"output" => reduce 340
		"input" => reduce 340
		")" => reduce 340
		"," => reduce 340
		"annotation" => reduce 340

141:	type-prefix => type-prefix-1 type-prefix-2 . type-prefix-3 ("." '$ident)
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	type-prefix => type-prefix-1 type-prefix-2 . ("." '$ident)
		"output" => shift 70
		"input" => shift 71
		type-prefix-3 => shift 183
		'$ident => reduce 124
		"." => reduce 124

142:	type-prefix => type-prefix-1 type-prefix-3 . ("." '$ident)
		'$ident => reduce 125
		"." => reduce 125

143:	type-prefix => type-prefix-2 type-prefix-3 . ("." '$ident)
		'$ident => reduce 126
		"." => reduce 126

144:	short-class-specifier => ident "=" "enumeration" "(" . filler-1 ")" comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	filler-1 => .
	filler-1 => . enum-list
	filler-1 => . ":"
	enum-list => . enumeration-literal
	enum-list => . enum-list "," enumeration-literal
	enumeration-literal => . ident comment
	ident => . '$ident
		'$ident => shift 26
		ident => shift 178
		enumeration-literal => shift 179
		":" => shift 180
		enum-list => shift 181
		filler-1 => shift 182
		")" => reduce 41

145:	der-class-specifier => ident "=" "der" "(" . name "," der-class-specifier-1 ")" comment ("constrainedby" ";")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		name => shift 177

146:	long-class-specifier => "extends" ident class-modification string-comment . composition "end" ident ("constrainedby" ";")
	composition => . element-list composition-1-list external-part opt-annotation
	composition => . element-list composition-1-list opt-annotation
	composition => . element-list external-part opt-annotation
	composition => . element-list opt-annotation
	element-list => . element ";"
	element-list => . element-list element ";"
	element => . import-clause
	element => . extends-clause
	element => . "redeclare" $P1 $P2 $P3 element-1
	element => . "final" $P4 $P5 element-1
	element => . "inner" $P6 element-1
	element => . "outer" element-1
	element => . element-1
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	import-clause => . "import" import-clause-1 comment
	extends-clause => . "extends" name class-modification annotation
	extends-clause => . "extends" name class-modification
	extends-clause => . "extends" name annotation
	extends-clause => . "extends" name
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"extends" => shift 85
		"import" => shift 86
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 90
		"outer" => shift 91
		"inner" => shift 92
		"final" => shift 93
		"redeclare" => shift 94
		extends-clause => shift 95
		import-clause => shift 96
		element => shift 97
		element-list => shift 98
		composition => shift 176

147:	element-replaceable => "replaceable" . short-class-definition component-clause1 ("," ")")
	short-class-definition => . class-prefixes short-class-specifier
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	element-replaceable => "replaceable" . short-class-definition component-clause1 constraining-clause ("," ")")
	short-class-definition => . class-prefixes short-class-specifier
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		class-prefixes-1 => shift 13
		"partial" => shift 14
		class-prefixes => shift 174
		short-class-definition => shift 175

148:	name => name . "." ident ("," "." "=" ":=" "(" '$string ")")
	element-modification => name . $P9 string-comment ("," ")")
	$P9 => .
	$P9 => . modification
	modification => . class-modification "=" expression
	modification => . class-modification
	modification => . "=" expression
	modification => . ":=" expression
	class-modification => . "(" argument-list ")"
	class-modification => . "(" ")"
		"(" => shift 66
		":=" => shift 169
		"=" => shift 170
		class-modification => shift 171
		modification => shift 172
		$P9 => shift 173
		"." => shift 59
		")" => reduce 165
		"," => reduce 165
		'$string => reduce 165

149:	elt-mod-or-repl-1 => element-replaceable . ("," ")")
		")" => reduce 163
		"," => reduce 163

150:	elt-mod-or-repl-1 => element-modification . ("," ")")
		")" => reduce 162
		"," => reduce 162

151:	element-redeclaration => "redeclare" . $P10 $P11 elt-redecl-1 ("," ")")
	$P10 => .
	$P10 => . "each"
		"each" => shift 167
		$P10 => shift 168
		"function" => reduce 168
		"pure" => reduce 168
		"impure" => reduce 168
		"package" => reduce 168
		"type" => reduce 168
		"connector" => reduce 168
		"expandable" => reduce 168
		"block" => reduce 168
		"record" => reduce 168
		"operator" => reduce 168
		"model" => reduce 168
		"class" => reduce 168
		"partial" => reduce 168
		"stream" => reduce 168
		"flow" => reduce 168
		"constant" => reduce 168
		"parameter" => reduce 168
		"discrete" => reduce 168
		"output" => reduce 168
		"input" => reduce 168
		"replaceable" => reduce 168
		"final" => reduce 168

152:	element-modification-or-replaceable => elt-mod-or-repl-1 . ("," ")")
		")" => reduce 161
		"," => reduce 161

153:	element-modification-or-replaceable => "final" . elt-mod-or-repl-1 ("," ")")
	elt-mod-or-repl-1 => . element-modification
	elt-mod-or-repl-1 => . element-replaceable
	element-modification => . name $P9 string-comment
	element-replaceable => . "replaceable" short-class-definition component-clause1 constraining-clause
	element-replaceable => . "replaceable" short-class-definition component-clause1
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"replaceable" => shift 147
		name => shift 148
		element-replaceable => shift 149
		element-modification => shift 150
		elt-mod-or-repl-1 => shift 166

154:	element-modification-or-replaceable => "each" . elt-mod-or-repl-1 ("," ")")
	elt-mod-or-repl-1 => . element-modification
	elt-mod-or-repl-1 => . element-replaceable
	element-modification => . name $P9 string-comment
	element-replaceable => . "replaceable" short-class-definition component-clause1 constraining-clause
	element-replaceable => . "replaceable" short-class-definition component-clause1
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	element-modification-or-replaceable => "each" . "final" elt-mod-or-repl-1 ("," ")")
		"final" => shift 164
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"replaceable" => shift 147
		name => shift 148
		element-replaceable => shift 149
		element-modification => shift 150
		elt-mod-or-repl-1 => shift 165

155:	argument => element-redeclaration . ("," ")")
		")" => reduce 157
		"," => reduce 157

156:	argument => element-modification-or-replaceable . ("," ")")
		")" => reduce 156
		"," => reduce 156

157:	argument-list => argument . ("," ")")
		")" => reduce 154
		"," => reduce 154

158:	argument-list => argument-list . "," argument ("," ")")
	class-modification => "(" argument-list . ")" ("if" "," ")" "constrainedby" ";" "=" "annotation" '$string "redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import")
		")" => shift 162
		"," => shift 163

159:	class-modification => "(" ")" . ("if" "," ")" "constrainedby" ";" "=" "annotation" '$string "redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import")
		"import" => reduce 153
		"extends" => reduce 153
		"function" => reduce 153
		"pure" => reduce 153
		"impure" => reduce 153
		"package" => reduce 153
		"type" => reduce 153
		"connector" => reduce 153
		"expandable" => reduce 153
		"block" => reduce 153
		"record" => reduce 153
		"operator" => reduce 153
		"model" => reduce 153
		"class" => reduce 153
		"partial" => reduce 153
		"encapsulated" => reduce 153
		"stream" => reduce 153
		"flow" => reduce 153
		"constant" => reduce 153
		"parameter" => reduce 153
		"discrete" => reduce 153
		"output" => reduce 153
		"input" => reduce 153
		'$ident => reduce 153
		"." => reduce 153
		"replaceable" => reduce 153
		"outer" => reduce 153
		"inner" => reduce 153
		"final" => reduce 153
		"redeclare" => reduce 153
		'$string => reduce 153
		"annotation" => reduce 153
		"=" => reduce 153
		";" => reduce 153
		"constrainedby" => reduce 153
		")" => reduce 153
		"," => reduce 153
		"if" => reduce 153

160:	long-class-specifier => "extends" ident string-comment composition . "end" ident ("constrainedby" ";")
		"end" => shift 161

161:	long-class-specifier => "extends" ident string-comment composition "end" . ident ("constrainedby" ";")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 401

162:	class-modification => "(" argument-list ")" . ("if" "," ")" "constrainedby" ";" "=" "annotation" '$string "redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import")
		"import" => reduce 152
		"extends" => reduce 152
		"function" => reduce 152
		"pure" => reduce 152
		"impure" => reduce 152
		"package" => reduce 152
		"type" => reduce 152
		"connector" => reduce 152
		"expandable" => reduce 152
		"block" => reduce 152
		"record" => reduce 152
		"operator" => reduce 152
		"model" => reduce 152
		"class" => reduce 152
		"partial" => reduce 152
		"encapsulated" => reduce 152
		"stream" => reduce 152
		"flow" => reduce 152
		"constant" => reduce 152
		"parameter" => reduce 152
		"discrete" => reduce 152
		"output" => reduce 152
		"input" => reduce 152
		'$ident => reduce 152
		"." => reduce 152
		"replaceable" => reduce 152
		"outer" => reduce 152
		"inner" => reduce 152
		"final" => reduce 152
		"redeclare" => reduce 152
		'$string => reduce 152
		"annotation" => reduce 152
		"=" => reduce 152
		";" => reduce 152
		"constrainedby" => reduce 152
		")" => reduce 152
		"," => reduce 152
		"if" => reduce 152

163:	argument-list => argument-list "," . argument ("," ")")
	argument => . element-modification-or-replaceable
	argument => . element-redeclaration
	element-modification-or-replaceable => . "each" "final" elt-mod-or-repl-1
	element-modification-or-replaceable => . "each" elt-mod-or-repl-1
	element-modification-or-replaceable => . "final" elt-mod-or-repl-1
	element-modification-or-replaceable => . elt-mod-or-repl-1
	element-redeclaration => . "redeclare" $P10 $P11 elt-redecl-1
	elt-mod-or-repl-1 => . element-modification
	elt-mod-or-repl-1 => . element-replaceable
	element-modification => . name $P9 string-comment
	element-replaceable => . "replaceable" short-class-definition component-clause1 constraining-clause
	element-replaceable => . "replaceable" short-class-definition component-clause1
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"replaceable" => shift 147
		name => shift 148
		element-replaceable => shift 149
		element-modification => shift 150
		"redeclare" => shift 151
		elt-mod-or-repl-1 => shift 152
		"final" => shift 153
		"each" => shift 154
		element-redeclaration => shift 155
		element-modification-or-replaceable => shift 156
		argument => shift 400

164:	element-modification-or-replaceable => "each" "final" . elt-mod-or-repl-1 ("," ")")
	elt-mod-or-repl-1 => . element-modification
	elt-mod-or-repl-1 => . element-replaceable
	element-modification => . name $P9 string-comment
	element-replaceable => . "replaceable" short-class-definition component-clause1 constraining-clause
	element-replaceable => . "replaceable" short-class-definition component-clause1
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"replaceable" => shift 147
		name => shift 148
		element-replaceable => shift 149
		element-modification => shift 150
		elt-mod-or-repl-1 => shift 399

165:	element-modification-or-replaceable => "each" elt-mod-or-repl-1 . ("," ")")
		")" => reduce 159
		"," => reduce 159

166:	element-modification-or-replaceable => "final" elt-mod-or-repl-1 . ("," ")")
		")" => reduce 160
		"," => reduce 160

167:	$P10 => "each" . ("final" "replaceable" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 169
		"pure" => reduce 169
		"impure" => reduce 169
		"package" => reduce 169
		"type" => reduce 169
		"connector" => reduce 169
		"expandable" => reduce 169
		"block" => reduce 169
		"record" => reduce 169
		"operator" => reduce 169
		"model" => reduce 169
		"class" => reduce 169
		"partial" => reduce 169
		"stream" => reduce 169
		"flow" => reduce 169
		"constant" => reduce 169
		"parameter" => reduce 169
		"discrete" => reduce 169
		"output" => reduce 169
		"input" => reduce 169
		"replaceable" => reduce 169
		"final" => reduce 169

168:	element-redeclaration => "redeclare" $P10 . $P11 elt-redecl-1 ("," ")")
	$P11 => .
	$P11 => . "final"
		"final" => shift 397
		$P11 => shift 398
		"function" => reduce 170
		"pure" => reduce 170
		"impure" => reduce 170
		"package" => reduce 170
		"type" => reduce 170
		"connector" => reduce 170
		"expandable" => reduce 170
		"block" => reduce 170
		"record" => reduce 170
		"operator" => reduce 170
		"model" => reduce 170
		"class" => reduce 170
		"partial" => reduce 170
		"stream" => reduce 170
		"flow" => reduce 170
		"constant" => reduce 170
		"parameter" => reduce 170
		"discrete" => reduce 170
		"output" => reduce 170
		"input" => reduce 170
		"replaceable" => reduce 170

169:	modification => ":=" . expression ("constrainedby" ";" "if" "annotation" "," ")" '$string)
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 396

170:	modification => "=" . expression ("constrainedby" ";" "if" "annotation" "," ")" '$string)
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 395

171:	modification => class-modification . ("constrainedby" ";" "if" "annotation" "," ")" '$string)
	modification => class-modification . "=" expression ("constrainedby" ";" "if" "annotation" "," ")" '$string)
		"=" => shift 394
		'$string => reduce 149
		")" => reduce 149
		"," => reduce 149
		"annotation" => reduce 149
		"if" => reduce 149
		";" => reduce 149
		"constrainedby" => reduce 149

172:	$P9 => modification . ("," ")" '$string)
		'$string => reduce 166
		")" => reduce 166
		"," => reduce 166

173:	element-modification => name $P9 . string-comment ("," ")")
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 393
		"," => reduce 340
		")" => reduce 340

174:	short-class-definition => class-prefixes . short-class-specifier ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
	short-class-specifier => . ident "=" base-prefix name array-subscripts class-modification comment
	short-class-specifier => . ident "=" base-prefix name array-subscripts comment
	short-class-specifier => . ident "=" base-prefix name class-modification comment
	short-class-specifier => . ident "=" base-prefix name comment
	short-class-specifier => . ident "=" "enumeration" "(" filler-1 ")" comment
	ident => . '$ident
		'$ident => shift 26
		ident => shift 391
		short-class-specifier => shift 392

175:	element-replaceable => "replaceable" short-class-definition . component-clause1 constraining-clause ("," ")")
	component-clause1 => . type-prefix type-specifier declaration comment
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	element-replaceable => "replaceable" short-class-definition . component-clause1 ("," ")")
	component-clause1 => . type-prefix type-specifier declaration comment
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		type-prefix => shift 389
		component-clause1 => shift 390

176:	long-class-specifier => "extends" ident class-modification string-comment composition . "end" ident ("constrainedby" ";")
		"end" => shift 388

177:	name => name . "." ident ("." ",")
	der-class-specifier => ident "=" "der" "(" name . "," der-class-specifier-1 ")" comment ("constrainedby" ";")
		"," => shift 387
		"." => shift 59

178:	enumeration-literal => ident . comment ("," ")")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 386
		")" => reduce 340
		"," => reduce 340
		"annotation" => reduce 340

179:	enum-list => enumeration-literal . ("," ")")
		")" => reduce 49
		"," => reduce 49

180:	filler-1 => ":" . (")")
		")" => reduce 43

181:	enum-list => enum-list . "," enumeration-literal ("," ")")
	filler-1 => enum-list . (")")
		"," => shift 385
		")" => reduce 42

182:	short-class-specifier => ident "=" "enumeration" "(" filler-1 . ")" comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
		")" => shift 384

183:	type-prefix => type-prefix-1 type-prefix-2 type-prefix-3 . ("." '$ident)
		'$ident => reduce 123
		"." => reduce 123

184:	comment => string-comment . ("input" "output" "discrete" "parameter" "constant" "flow" "stream" ")" "constrainedby" "," ";")
	comment => string-comment . annotation ("input" "output" "discrete" "parameter" "constant" "flow" "stream" ")" "constrainedby" "," ";")
	annotation => . "annotation" class-modification
		"annotation" => shift 114
		annotation => shift 383
		";" => reduce 339
		"," => reduce 339
		"constrainedby" => reduce 339
		")" => reduce 339
		"stream" => reduce 339
		"flow" => reduce 339
		"constant" => reduce 339
		"parameter" => reduce 339
		"discrete" => reduce 339
		"output" => reduce 339
		"input" => reduce 339

185:	short-class-specifier => ident "=" base-prefix name comment . ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
		";" => reduce 39
		"constrainedby" => reduce 39
		"stream" => reduce 39
		"flow" => reduce 39
		"constant" => reduce 39
		"parameter" => reduce 39
		"discrete" => reduce 39
		"output" => reduce 39
		"input" => reduce 39
		")" => reduce 39
		"," => reduce 39

186:	short-class-specifier => ident "=" base-prefix name class-modification . comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 382
		";" => reduce 340
		"constrainedby" => reduce 340
		"stream" => reduce 340
		"flow" => reduce 340
		"constant" => reduce 340
		"parameter" => reduce 340
		"discrete" => reduce 340
		"output" => reduce 340
		"input" => reduce 340
		")" => reduce 340
		"," => reduce 340
		"annotation" => reduce 340

187:	short-class-specifier => ident "=" base-prefix name array-subscripts . comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
	short-class-specifier => ident "=" base-prefix name array-subscripts . class-modification comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	class-modification => . "(" argument-list ")"
	class-modification => . "(" ")"
		"(" => shift 66
		class-modification => shift 380
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 381
		";" => reduce 340
		"constrainedby" => reduce 340
		"stream" => reduce 340
		"flow" => reduce 340
		"constant" => reduce 340
		"parameter" => reduce 340
		"discrete" => reduce 340
		"output" => reduce 340
		"input" => reduce 340
		")" => reduce 340
		"," => reduce 340
		"annotation" => reduce 340

188:	component-list => component-list "," . component-declaration ("constrainedby" ";" ",")
	component-declaration => . declaration condition-attribute comment
	component-declaration => . declaration comment
	declaration => . ident $P7 $P8
	ident => . '$ident
		'$ident => shift 26
		ident => shift 136
		declaration => shift 137
		component-declaration => shift 379

189:	condition-attribute => "if" . expression ("constrainedby" ";" "," "annotation" '$string)
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 378

190:	component-declaration => declaration condition-attribute . comment ("constrainedby" ";" ",")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 377
		"," => reduce 340
		";" => reduce 340
		"constrainedby" => reduce 340
		"annotation" => reduce 340

191:	component-declaration => declaration comment . ("constrainedby" ";" ",")
		"," => reduce 141
		";" => reduce 141
		"constrainedby" => reduce 141

192:	$P7 => array-subscripts . (")" "constrainedby" ";" "," "if" "annotation" '$string "=" ":=" "(")
		"(" => reduce 145
		":=" => reduce 145
		"=" => reduce 145
		'$string => reduce 145
		"annotation" => reduce 145
		"if" => reduce 145
		"," => reduce 145
		";" => reduce 145
		"constrainedby" => reduce 145
		")" => reduce 145

193:	declaration => ident $P7 . $P8 (")" "constrainedby" ";" "," "if" "annotation" '$string)
	$P8 => .
	$P8 => . modification
	modification => . class-modification "=" expression
	modification => . class-modification
	modification => . "=" expression
	modification => . ":=" expression
	class-modification => . "(" argument-list ")"
	class-modification => . "(" ")"
		"(" => shift 66
		":=" => shift 169
		"=" => shift 170
		class-modification => shift 171
		modification => shift 375
		$P8 => shift 376
		")" => reduce 146
		"constrainedby" => reduce 146
		";" => reduce 146
		"," => reduce 146
		"if" => reduce 146
		"annotation" => reduce 146
		'$string => reduce 146

194:	component-list => component-list . "," component-declaration ("constrainedby" ";" ",")
	component-clause => type-specifier array-subscripts component-list . ("constrainedby" ";")
		"," => shift 188
		";" => reduce 121
		"constrainedby" => reduce 121

195:	unsigned-number => '$fl . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
		":" => reduce 348
		"=" => reduce 348
		"or" => reduce 348
		"and" => reduce 348
		"<" => reduce 348
		"<=" => reduce 348
		">" => reduce 348
		">=" => reduce 348
		"==" => reduce 348
		"<>" => reduce 348
		".-" => reduce 348
		".+" => reduce 348
		"-" => reduce 348
		"+" => reduce 348
		"*" => reduce 348
		"/" => reduce 348
		".*" => reduce 348
		"./" => reduce 348
		".^" => reduce 348
		"^" => reduce 348
		"]" => reduce 348
		"," => reduce 348
		"for" => reduce 348
		";" => reduce 348
		")" => reduce 348
		"then" => reduce 348
		"loop" => reduce 348
		"else" => reduce 348
		"elseif" => reduce 348
		'$string => reduce 348
		"annotation" => reduce 348
		"constrainedby" => reduce 348
		"}" => reduce 348
		"end" => reduce 348
		"elsewhen" => reduce 348
		"if" => reduce 348

196:	unsigned-number => '$fx . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
		":" => reduce 347
		"=" => reduce 347
		"or" => reduce 347
		"and" => reduce 347
		"<" => reduce 347
		"<=" => reduce 347
		">" => reduce 347
		">=" => reduce 347
		"==" => reduce 347
		"<>" => reduce 347
		".-" => reduce 347
		".+" => reduce 347
		"-" => reduce 347
		"+" => reduce 347
		"*" => reduce 347
		"/" => reduce 347
		".*" => reduce 347
		"./" => reduce 347
		".^" => reduce 347
		"^" => reduce 347
		"]" => reduce 347
		"," => reduce 347
		"for" => reduce 347
		";" => reduce 347
		")" => reduce 347
		"then" => reduce 347
		"loop" => reduce 347
		"else" => reduce 347
		"elseif" => reduce 347
		'$string => reduce 347
		"annotation" => reduce 347
		"constrainedby" => reduce 347
		"}" => reduce 347
		"end" => reduce 347
		"elsewhen" => reduce 347
		"if" => reduce 347

197:	primary => "{" . function-arguments "}" ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
	function-arguments => . function-argument function-argument-1
	function-arguments => . named-arguments
	named-arguments => . named-argument
	named-arguments => . named-arguments "," named-argument
	function-argument => . "function" name "(" named-arguments ")"
	function-argument => . "function" name "(" ")"
	function-argument => . expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	named-argument => . ident "=" function-argument
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	ident => . '$ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		'$ident => shift 26
		logical-expression => shift 214
		ident => shift 368
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 369
		"function" => shift 370
		named-argument => shift 371
		named-arguments => shift 372
		function-argument => shift 373
		function-arguments => shift 374

198:	primary => "[" . expression-list-list "]" ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
	expression-list-list => . expression-list
	expression-list-list => . expression-list-list ";" expression-list
	expression-list => . expression
	expression-list => . expression-list "," expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 365
		expression-list => shift 366
		expression-list-list => shift 367

199:	primary => "(" . output-expression-list ")" ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
	output-expression-list => . ","
	output-expression-list => . expression
	output-expression-list => . output-expression-list "," expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 291
		"," => shift 292
		output-expression-list => shift 364

200:	primary => "der" . function-call-args ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
	function-call-args => . "(" function-arguments ")"
	function-call-args => . "(" ")"
		"(" => shift 289
		function-call-args => shift 363

201:	name => name . "." ident ("if" "elsewhen" "end" "}" "=" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "." "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "," "(" "]" ":" "[")
	primary => name . array-subscripts ("if" "elsewhen" "end" "}" "=" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "]")
	array-subscripts => . "[" array-subscript-list "]"
	primary => name . ("if" "elsewhen" "end" "}" "=" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "]")
	primary => name . function-call-args ("if" "elsewhen" "end" "}" "=" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "]")
	function-call-args => . "(" function-arguments ")"
	function-call-args => . "(" ")"
		"(" => shift 289
		function-call-args => shift 362
		"[" => shift 134
		array-subscripts => shift 307
		"." => shift 59
		"]" => reduce 296
		":" => reduce 296
		"^" => reduce 296
		".^" => reduce 296
		"./" => reduce 296
		".*" => reduce 296
		"/" => reduce 296
		"*" => reduce 296
		"+" => reduce 296
		"-" => reduce 296
		".+" => reduce 296
		".-" => reduce 296
		"<>" => reduce 296
		"==" => reduce 296
		">=" => reduce 296
		">" => reduce 296
		"<=" => reduce 296
		"<" => reduce 296
		"and" => reduce 296
		"or" => reduce 296
		"," => reduce 296
		"for" => reduce 296
		";" => reduce 296
		")" => reduce 296
		"then" => reduce 296
		"loop" => reduce 296
		"else" => reduce 296
		"elseif" => reduce 296
		'$string => reduce 296
		"annotation" => reduce 296
		"constrainedby" => reduce 296
		"=" => reduce 296
		"}" => reduce 296
		"end" => reduce 296
		"elsewhen" => reduce 296
		"if" => reduce 296

202:	primary => "true" . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"=" => reduce 293
		":" => reduce 293
		"^" => reduce 293
		".^" => reduce 293
		"./" => reduce 293
		".*" => reduce 293
		"/" => reduce 293
		"*" => reduce 293
		"+" => reduce 293
		"-" => reduce 293
		".+" => reduce 293
		".-" => reduce 293
		"<>" => reduce 293
		"==" => reduce 293
		">=" => reduce 293
		">" => reduce 293
		"<=" => reduce 293
		"<" => reduce 293
		"and" => reduce 293
		"or" => reduce 293
		"]" => reduce 293
		"," => reduce 293
		"for" => reduce 293
		";" => reduce 293
		")" => reduce 293
		"then" => reduce 293
		"loop" => reduce 293
		"else" => reduce 293
		"elseif" => reduce 293
		'$string => reduce 293
		"annotation" => reduce 293
		"constrainedby" => reduce 293
		"}" => reduce 293
		"end" => reduce 293
		"elsewhen" => reduce 293
		"if" => reduce 293

203:	primary => "false" . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"=" => reduce 292
		":" => reduce 292
		"^" => reduce 292
		".^" => reduce 292
		"./" => reduce 292
		".*" => reduce 292
		"/" => reduce 292
		"*" => reduce 292
		"+" => reduce 292
		"-" => reduce 292
		".+" => reduce 292
		".-" => reduce 292
		"<>" => reduce 292
		"==" => reduce 292
		">=" => reduce 292
		">" => reduce 292
		"<=" => reduce 292
		"<" => reduce 292
		"and" => reduce 292
		"or" => reduce 292
		"]" => reduce 292
		"," => reduce 292
		"for" => reduce 292
		";" => reduce 292
		")" => reduce 292
		"then" => reduce 292
		"loop" => reduce 292
		"else" => reduce 292
		"elseif" => reduce 292
		'$string => reduce 292
		"annotation" => reduce 292
		"constrainedby" => reduce 292
		"}" => reduce 292
		"end" => reduce 292
		"elsewhen" => reduce 292
		"if" => reduce 292

204:	primary => string . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"=" => reduce 291
		":" => reduce 291
		"^" => reduce 291
		".^" => reduce 291
		"./" => reduce 291
		".*" => reduce 291
		"/" => reduce 291
		"*" => reduce 291
		"+" => reduce 291
		"-" => reduce 291
		".+" => reduce 291
		".-" => reduce 291
		"<>" => reduce 291
		"==" => reduce 291
		">=" => reduce 291
		">" => reduce 291
		"<=" => reduce 291
		"<" => reduce 291
		"and" => reduce 291
		"or" => reduce 291
		"]" => reduce 291
		"," => reduce 291
		"for" => reduce 291
		";" => reduce 291
		")" => reduce 291
		"then" => reduce 291
		"loop" => reduce 291
		"else" => reduce 291
		"elseif" => reduce 291
		'$string => reduce 291
		"annotation" => reduce 291
		"constrainedby" => reduce 291
		"}" => reduce 291
		"end" => reduce 291
		"elsewhen" => reduce 291
		"if" => reduce 291

205:	primary => unsigned-number . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"=" => reduce 290
		":" => reduce 290
		"^" => reduce 290
		".^" => reduce 290
		"./" => reduce 290
		".*" => reduce 290
		"/" => reduce 290
		"*" => reduce 290
		"+" => reduce 290
		"-" => reduce 290
		".+" => reduce 290
		".-" => reduce 290
		"<>" => reduce 290
		"==" => reduce 290
		">=" => reduce 290
		">" => reduce 290
		"<=" => reduce 290
		"<" => reduce 290
		"and" => reduce 290
		"or" => reduce 290
		"]" => reduce 290
		"," => reduce 290
		"for" => reduce 290
		";" => reduce 290
		")" => reduce 290
		"then" => reduce 290
		"loop" => reduce 290
		"else" => reduce 290
		"elseif" => reduce 290
		'$string => reduce 290
		"annotation" => reduce 290
		"constrainedby" => reduce 290
		"}" => reduce 290
		"end" => reduce 290
		"elsewhen" => reduce 290
		"if" => reduce 290

206:	factor => primary . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
		":" => reduce 287
		"=" => reduce 287
		"or" => reduce 287
		"and" => reduce 287
		"<" => reduce 287
		"<=" => reduce 287
		">" => reduce 287
		">=" => reduce 287
		"==" => reduce 287
		"<>" => reduce 287
		".-" => reduce 287
		".+" => reduce 287
		"-" => reduce 287
		"+" => reduce 287
		"*" => reduce 287
		"/" => reduce 287
		".*" => reduce 287
		"./" => reduce 287
		".^" => reduce 287
		"^" => reduce 287
		"]" => reduce 287
		"," => reduce 287
		"for" => reduce 287
		";" => reduce 287
		")" => reduce 287
		"then" => reduce 287
		"loop" => reduce 287
		"else" => reduce 287
		"elseif" => reduce 287
		'$string => reduce 287
		"annotation" => reduce 287
		"constrainedby" => reduce 287
		"}" => reduce 287
		"end" => reduce 287
		"elsewhen" => reduce 287
		"if" => reduce 287

207:	factor => factor . ".^" primary ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
	factor => factor . "^" primary ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
	term => factor . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ":" "=")
		"^" => shift 360
		".^" => shift 361
		"=" => reduce 281
		":" => reduce 281
		"./" => reduce 281
		".*" => reduce 281
		"/" => reduce 281
		"*" => reduce 281
		"+" => reduce 281
		"-" => reduce 281
		".+" => reduce 281
		".-" => reduce 281
		"<>" => reduce 281
		"==" => reduce 281
		">=" => reduce 281
		">" => reduce 281
		"<=" => reduce 281
		"<" => reduce 281
		"and" => reduce 281
		"or" => reduce 281
		"]" => reduce 281
		"," => reduce 281
		"for" => reduce 281
		";" => reduce 281
		")" => reduce 281
		"then" => reduce 281
		"loop" => reduce 281
		"else" => reduce 281
		"elseif" => reduce 281
		'$string => reduce 281
		"annotation" => reduce 281
		"constrainedby" => reduce 281
		"}" => reduce 281
		"end" => reduce 281
		"elsewhen" => reduce 281
		"if" => reduce 281

208:	term => term . mul-op factor ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ":" "=")
	mul-op => . "*"
	mul-op => . "/"
	mul-op => . ".*"
	mul-op => . "./"
	arithmetic-expression => term . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
		"./" => shift 355
		".*" => shift 356
		"/" => shift 357
		"*" => shift 358
		mul-op => shift 359
		":" => reduce 275
		"=" => reduce 275
		"or" => reduce 275
		"and" => reduce 275
		"<" => reduce 275
		"<=" => reduce 275
		">" => reduce 275
		">=" => reduce 275
		"==" => reduce 275
		"<>" => reduce 275
		".-" => reduce 275
		".+" => reduce 275
		"-" => reduce 275
		"+" => reduce 275
		"]" => reduce 275
		"," => reduce 275
		"for" => reduce 275
		";" => reduce 275
		")" => reduce 275
		"then" => reduce 275
		"loop" => reduce 275
		"else" => reduce 275
		"elseif" => reduce 275
		'$string => reduce 275
		"annotation" => reduce 275
		"constrainedby" => reduce 275
		"}" => reduce 275
		"end" => reduce 275
		"elsewhen" => reduce 275
		"if" => reduce 275

209:	arithmetic-expression => arithmetic-expression . add-op term ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
	add-op => . "+"
	add-op => . "-"
	add-op => . ".+"
	add-op => . ".-"
	relation => arithmetic-expression . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ":" "=")
		".-" => shift 350
		".+" => shift 351
		"-" => shift 352
		"+" => shift 353
		add-op => shift 354
		"=" => reduce 267
		":" => reduce 267
		"<>" => reduce 267
		"==" => reduce 267
		">=" => reduce 267
		">" => reduce 267
		"<=" => reduce 267
		"<" => reduce 267
		"and" => reduce 267
		"or" => reduce 267
		"]" => reduce 267
		"," => reduce 267
		"for" => reduce 267
		";" => reduce 267
		")" => reduce 267
		"then" => reduce 267
		"loop" => reduce 267
		"else" => reduce 267
		"elseif" => reduce 267
		'$string => reduce 267
		"annotation" => reduce 267
		"constrainedby" => reduce 267
		"}" => reduce 267
		"end" => reduce 267
		"elsewhen" => reduce 267
		"if" => reduce 267

210:	logical-factor => "not" . relation ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "and" "or" "=" ":")
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		relation => shift 349

211:	relation => relation . rel-op arithmetic-expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ":" "=")
	rel-op => . "<"
	rel-op => . "<="
	rel-op => . ">"
	rel-op => . ">="
	rel-op => . "=="
	rel-op => . "<>"
	logical-factor => relation . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "and" "or" "=" ":")
		"<>" => shift 342
		"==" => shift 343
		">=" => shift 344
		">" => shift 345
		"<=" => shift 346
		"<" => shift 347
		rel-op => shift 348
		":" => reduce 265
		"=" => reduce 265
		"or" => reduce 265
		"and" => reduce 265
		"]" => reduce 265
		"," => reduce 265
		"for" => reduce 265
		";" => reduce 265
		")" => reduce 265
		"then" => reduce 265
		"loop" => reduce 265
		"else" => reduce 265
		"elseif" => reduce 265
		'$string => reduce 265
		"annotation" => reduce 265
		"constrainedby" => reduce 265
		"}" => reduce 265
		"end" => reduce 265
		"elsewhen" => reduce 265
		"if" => reduce 265

212:	logical-term => logical-factor . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" ":" "=")
		"=" => reduce 263
		":" => reduce 263
		"and" => reduce 263
		"or" => reduce 263
		"]" => reduce 263
		"," => reduce 263
		"for" => reduce 263
		";" => reduce 263
		")" => reduce 263
		"then" => reduce 263
		"loop" => reduce 263
		"else" => reduce 263
		"elseif" => reduce 263
		'$string => reduce 263
		"annotation" => reduce 263
		"constrainedby" => reduce 263
		"}" => reduce 263
		"end" => reduce 263
		"elsewhen" => reduce 263
		"if" => reduce 263

213:	logical-term => logical-term . "and" logical-factor ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" ":" "=")
	logical-expression => logical-term . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "=" ":")
		"and" => shift 341
		":" => reduce 261
		"=" => reduce 261
		"or" => reduce 261
		"]" => reduce 261
		"," => reduce 261
		"for" => reduce 261
		";" => reduce 261
		")" => reduce 261
		"then" => reduce 261
		"loop" => reduce 261
		"else" => reduce 261
		"elseif" => reduce 261
		'$string => reduce 261
		"annotation" => reduce 261
		"constrainedby" => reduce 261
		"}" => reduce 261
		"end" => reduce 261
		"elsewhen" => reduce 261
		"if" => reduce 261

214:	logical-expression => logical-expression . "or" logical-term ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "=" ":")
	simple-expression => logical-expression . ":" logical-expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "=")
	simple-expression => logical-expression . ":" logical-expression ":" logical-expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "=")
	simple-expression => logical-expression . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "=")
		":" => shift 339
		"or" => shift 340
		"=" => reduce 258
		"]" => reduce 258
		"," => reduce 258
		"for" => reduce 258
		";" => reduce 258
		")" => reduce 258
		"then" => reduce 258
		"loop" => reduce 258
		"else" => reduce 258
		"elseif" => reduce 258
		'$string => reduce 258
		"annotation" => reduce 258
		"constrainedby" => reduce 258
		"}" => reduce 258
		"end" => reduce 258
		"elsewhen" => reduce 258
		"if" => reduce 258

215:	expression => "if" . expression "then" expression "else" expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	expression => "if" . expression "then" expression elseif-ex-list "else" expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 338

216:	expression => simple-expression . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
		"]" => reduce 253
		"," => reduce 253
		"for" => reduce 253
		";" => reduce 253
		")" => reduce 253
		"then" => reduce 253
		"loop" => reduce 253
		"else" => reduce 253
		"elseif" => reduce 253
		'$string => reduce 253
		"annotation" => reduce 253
		"constrainedby" => reduce 253
		"}" => reduce 253
		"end" => reduce 253
		"elsewhen" => reduce 253
		"if" => reduce 253

217:	subscript => expression . ("," "]")
		"]" => reduce 337
		"," => reduce 337

218:	subscript => ":" . ("," "]")
		"]" => reduce 336
		"," => reduce 336

219:	array-subscript-list => subscript . ("," "]")
		"]" => reduce 334
		"," => reduce 334

220:	array-subscript-list => array-subscript-list . "," subscript ("," "]")
	array-subscripts => "[" array-subscript-list . "]" ("elsewhen" "end" "}" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "." "elseif" "else" "loop" "then" ")" "for" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "]" "constrainedby" ";" "," "if" "annotation" '$string "(" ":=" "=" '$ident)
		"]" => shift 336
		"," => shift 337

221:	component-list => component-list . "," component-declaration ("constrainedby" ";" ",")
	component-clause => type-prefix type-specifier component-list . ("constrainedby" ";")
		"," => shift 188
		";" => reduce 120
		"constrainedby" => reduce 120

222:	component-clause => type-prefix type-specifier array-subscripts . component-list ("constrainedby" ";")
	component-list => . component-declaration
	component-list => . component-list "," component-declaration
	component-declaration => . declaration condition-attribute comment
	component-declaration => . declaration comment
	declaration => . ident $P7 $P8
	ident => . '$ident
		'$ident => shift 26
		ident => shift 136
		declaration => shift 137
		component-declaration => shift 138
		component-list => shift 335

223:	extends-clause => "extends" name annotation . (";")
		";" => reduce 115

224:	extends-clause => "extends" name class-modification . (";")
	extends-clause => "extends" name class-modification . annotation (";")
	annotation => . "annotation" class-modification
		"annotation" => shift 114
		annotation => shift 334
		";" => reduce 114

225:	import-clause => "import" import-clause-1 comment . (";")
		";" => reduce 104

226:	import-clause-1 => ident "=" . name (";" "annotation" '$string)
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		name => shift 333

227:	import-clause-1 => name "." . import-clause-2 (";" "annotation" '$string)
	import-clause-2 => . "*"
	import-clause-2 => . "{" "}"
	import-clause-2 => . "{" import-list "}"
	name => name "." . ident (";" "." '$string "annotation")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 64
		"{" => shift 330
		"*" => shift 331
		import-clause-2 => shift 332

228:	constraining-clause => "constrainedby" . name ("," ")" ";" "annotation" '$string)
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	constraining-clause => "constrainedby" . name class-modification ("," ")" ";" "annotation" '$string)
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		name => shift 329

229:	element-1 => "replaceable" element-2 constraining-clause . comment (";")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 328
		";" => reduce 340
		"annotation" => reduce 340

230:	element => "inner" $P6 element-1 . (";")
		";" => reduce 83

231:	$P5 => "outer" . ("replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 95
		"pure" => reduce 95
		"impure" => reduce 95
		"package" => reduce 95
		"type" => reduce 95
		"connector" => reduce 95
		"expandable" => reduce 95
		"block" => reduce 95
		"record" => reduce 95
		"operator" => reduce 95
		"model" => reduce 95
		"class" => reduce 95
		"partial" => reduce 95
		"encapsulated" => reduce 95
		"stream" => reduce 95
		"flow" => reduce 95
		"constant" => reduce 95
		"parameter" => reduce 95
		"discrete" => reduce 95
		"output" => reduce 95
		"input" => reduce 95
		'$ident => reduce 95
		"." => reduce 95
		"replaceable" => reduce 95

232:	element => "final" $P4 $P5 . element-1 (";")
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 327

233:	$P2 => "inner" . ("outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 89
		"pure" => reduce 89
		"impure" => reduce 89
		"package" => reduce 89
		"type" => reduce 89
		"connector" => reduce 89
		"expandable" => reduce 89
		"block" => reduce 89
		"record" => reduce 89
		"operator" => reduce 89
		"model" => reduce 89
		"class" => reduce 89
		"partial" => reduce 89
		"encapsulated" => reduce 89
		"stream" => reduce 89
		"flow" => reduce 89
		"constant" => reduce 89
		"parameter" => reduce 89
		"discrete" => reduce 89
		"output" => reduce 89
		"input" => reduce 89
		'$ident => reduce 89
		"." => reduce 89
		"replaceable" => reduce 89
		"outer" => reduce 89

234:	element => "redeclare" $P1 $P2 . $P3 element-1 (";")
	$P3 => .
	$P3 => . "outer"
		"outer" => shift 325
		$P3 => shift 326
		"function" => reduce 90
		"pure" => reduce 90
		"impure" => reduce 90
		"package" => reduce 90
		"type" => reduce 90
		"connector" => reduce 90
		"expandable" => reduce 90
		"block" => reduce 90
		"record" => reduce 90
		"operator" => reduce 90
		"model" => reduce 90
		"class" => reduce 90
		"partial" => reduce 90
		"encapsulated" => reduce 90
		"stream" => reduce 90
		"flow" => reduce 90
		"constant" => reduce 90
		"parameter" => reduce 90
		"discrete" => reduce 90
		"output" => reduce 90
		"input" => reduce 90
		'$ident => reduce 90
		"." => reduce 90
		"replaceable" => reduce 90

235:	element-list => element-list element ";" . ("redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import" "public" "protected" "initial" "algorithm" "equation" "external" "annotation" "end")
		"end" => reduce 78
		"annotation" => reduce 78
		"external" => reduce 78
		"equation" => reduce 78
		"algorithm" => reduce 78
		"initial" => reduce 78
		"protected" => reduce 78
		"public" => reduce 78
		"import" => reduce 78
		"extends" => reduce 78
		"function" => reduce 78
		"pure" => reduce 78
		"impure" => reduce 78
		"package" => reduce 78
		"type" => reduce 78
		"connector" => reduce 78
		"expandable" => reduce 78
		"block" => reduce 78
		"record" => reduce 78
		"operator" => reduce 78
		"model" => reduce 78
		"class" => reduce 78
		"partial" => reduce 78
		"encapsulated" => reduce 78
		"stream" => reduce 78
		"flow" => reduce 78
		"constant" => reduce 78
		"parameter" => reduce 78
		"discrete" => reduce 78
		"output" => reduce 78
		"input" => reduce 78
		'$ident => reduce 78
		"." => reduce 78
		"replaceable" => reduce 78
		"outer" => reduce 78
		"inner" => reduce 78
		"final" => reduce 78
		"redeclare" => reduce 78

236:	opt-annotation => annotation ";" . ("end")
		"end" => reduce 345

237:	annotation => "annotation" class-modification . ("input" "output" "discrete" "parameter" "constant" "flow" "stream" ")" "constrainedby" "," ";")
		";" => reduce 346
		"," => reduce 346
		"constrainedby" => reduce 346
		")" => reduce 346
		"stream" => reduce 346
		"flow" => reduce 346
		"constant" => reduce 346
		"parameter" => reduce 346
		"discrete" => reduce 346
		"output" => reduce 346
		"input" => reduce 346

238:	composition => element-list external-part opt-annotation . ("end")
		"end" => reduce 54

239:	language-specification => string . ('$ident "." "annotation" ";")
		";" => reduce 72
		"annotation" => reduce 72
		"." => reduce 72
		'$ident => reduce 72

240:	external-part => "external" language-specification . external-function-call annotation ";" ("end" "annotation")
	external-function-call => . component-reference "=" ident "(" expression-list ")"
	external-function-call => . component-reference "=" ident "(" ")"
	external-function-call => . ident "(" expression-list ")"
	external-function-call => . ident "(" ")"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	ident => . '$ident
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	external-part => "external" language-specification . external-function-call ";" ("end" "annotation")
	external-function-call => . component-reference "=" ident "(" expression-list ")"
	external-function-call => . component-reference "=" ident "(" ")"
	external-function-call => . ident "(" expression-list ")"
	external-function-call => . ident "(" ")"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	ident => . '$ident
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	external-part => "external" language-specification . annotation ";" ("end" "annotation")
	annotation => . "annotation" class-modification
	external-part => "external" language-specification . ";" ("end" "annotation")
		";" => shift 322
		"annotation" => shift 114
		annotation => shift 323
		"." => shift 241
		'$ident => shift 26
		component-reference-1 => shift 242
		ident => shift 243
		component-reference => shift 244
		external-function-call => shift 324

241:	component-reference-1 => "." . ident $P14 (")" "," "=" "(" ":=" ".")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 321

242:	component-reference => component-reference-1 . "." ident $P12 (")" "," "=" ":=" "(")
	component-reference => component-reference-1 . (")" "," "=" ":=" "(")
		"." => shift 320
		"(" => reduce 306
		":=" => reduce 306
		"=" => reduce 306
		"," => reduce 306
		")" => reduce 306

243:	component-reference-1 => ident . $P13 ("=" ".")
	$P13 => .
	$P13 => . array-subscripts
	array-subscripts => . "[" array-subscript-list "]"
	external-function-call => ident . "(" ")" ("annotation" ";")
	external-function-call => ident . "(" expression-list ")" ("annotation" ";")
		"(" => shift 319
		"[" => shift 134
		array-subscripts => shift 300
		$P13 => shift 301
		"=" => reduce 312
		"." => reduce 312

244:	external-function-call => component-reference . "=" ident "(" ")" ("annotation" ";")
	external-function-call => component-reference . "=" ident "(" expression-list ")" ("annotation" ";")
		"=" => shift 318

245:	external-part => "external" external-function-call . annotation ";" ("end" "annotation")
	annotation => . "annotation" class-modification
	external-part => "external" external-function-call . ";" ("end" "annotation")
		";" => shift 316
		"annotation" => shift 114
		annotation => shift 317

246:	external-part => "external" annotation . ";" ("end" "annotation")
		";" => shift 315

247:	external-part => "external" ";" . ("end" "annotation")
		"annotation" => reduce 71
		"end" => reduce 71

248:	composition => element-list composition-1-list opt-annotation . ("end")
		"end" => reduce 53

249:	composition-1-list => composition-1-list composition-1 . ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
		"annotation" => reduce 57
		"equation" => reduce 57
		"algorithm" => reduce 57
		"initial" => reduce 57
		"protected" => reduce 57
		"public" => reduce 57
		"external" => reduce 57
		"end" => reduce 57

250:	composition => element-list composition-1-list external-part . opt-annotation ("end")
	opt-annotation => .
	opt-annotation => . annotation ";"
	annotation => . "annotation" class-modification
		"annotation" => shift 114
		annotation => shift 115
		opt-annotation => shift 314
		"end" => reduce 344

251:	element-list => element-list . element ";" ("end" "external" "equation" "algorithm" "initial" "protected" "public" "annotation" "redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import")
	element => . import-clause
	element => . extends-clause
	element => . "redeclare" $P1 $P2 $P3 element-1
	element => . "final" $P4 $P5 element-1
	element => . "inner" $P6 element-1
	element => . "outer" element-1
	element => . element-1
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	import-clause => . "import" import-clause-1 comment
	extends-clause => . "extends" name class-modification annotation
	extends-clause => . "extends" name class-modification
	extends-clause => . "extends" name annotation
	extends-clause => . "extends" name
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	composition-1 => "public" element-list . ("end" "external" "equation" "algorithm" "initial" "protected" "public" "annotation")
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"extends" => shift 85
		"import" => shift 86
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 90
		"outer" => shift 91
		"inner" => shift 92
		"final" => shift 93
		"redeclare" => shift 94
		extends-clause => shift 95
		import-clause => shift 96
		element => shift 117
		"annotation" => reduce 59
		"public" => reduce 59
		"protected" => reduce 59
		"initial" => reduce 59
		"algorithm" => reduce 59
		"equation" => reduce 59
		"external" => reduce 59
		"end" => reduce 59

252:	element-list => element-list . element ";" ("end" "external" "equation" "algorithm" "initial" "protected" "public" "annotation" "redeclare" "final" "inner" "outer" "replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function" "extends" "import")
	element => . import-clause
	element => . extends-clause
	element => . "redeclare" $P1 $P2 $P3 element-1
	element => . "final" $P4 $P5 element-1
	element => . "inner" $P6 element-1
	element => . "outer" element-1
	element => . element-1
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	import-clause => . "import" import-clause-1 comment
	extends-clause => . "extends" name class-modification annotation
	extends-clause => . "extends" name class-modification
	extends-clause => . "extends" name annotation
	extends-clause => . "extends" name
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	composition-1 => "protected" element-list . ("end" "external" "equation" "algorithm" "initial" "protected" "public" "annotation")
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"extends" => shift 85
		"import" => shift 86
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 90
		"outer" => shift 91
		"inner" => shift 92
		"final" => shift 93
		"redeclare" => shift 94
		extends-clause => shift 95
		import-clause => shift 96
		element => shift 117
		"annotation" => reduce 61
		"public" => reduce 61
		"protected" => reduce 61
		"initial" => reduce 61
		"algorithm" => reduce 61
		"equation" => reduce 61
		"external" => reduce 61
		"end" => reduce 61

253:	equation-section => "initial" "equation" . equation-list ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
	equation-list => . equation ";"
	equation-list => . equation-list equation ";"
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	equation-section => "initial" "equation" . ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 266
		equation-list => shift 313
		"annotation" => reduce 181
		"equation" => reduce 181
		"algorithm" => reduce 181
		"initial" => reduce 181
		"protected" => reduce 181
		"public" => reduce 181
		"external" => reduce 181
		"end" => reduce 181

254:	algorithm-section => "initial" "algorithm" . statement-list ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
	statement-list => . statement ";"
	statement-list => . statement-list statement ";"
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
	algorithm-section => "initial" "algorithm" . ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 282
		statement-list => shift 312
		"annotation" => reduce 185
		"equation" => reduce 185
		"algorithm" => reduce 185
		"initial" => reduce 185
		"protected" => reduce 185
		"public" => reduce 185
		"external" => reduce 185
		"end" => reduce 185

255:	connect-clause => "connect" . "(" component-reference "," component-reference ")" (";" '$string "annotation")
		"(" => shift 311

256:	when-equation => "when" . expression then-eq-part elsewhen-eq-list "end" "when" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 310

257:	for-equation => "for" . for-indices "loop" "end" "for" (";" '$string "annotation")
	for-indices => . for-index
	for-indices => . for-indices "," for-index
	for-index => . ident "in" expression
	for-index => . ident
	ident => . '$ident
	for-equation => "for" . for-indices "loop" equation-list "end" "for" (";" '$string "annotation")
	for-indices => . for-index
	for-indices => . for-indices "," for-index
	for-index => . ident "in" expression
	for-index => . ident
	ident => . '$ident
		'$ident => shift 26
		ident => shift 295
		for-index => shift 296
		for-indices => shift 309

258:	if-equation => "if" . expression then-eq-part "end" "if" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	if-equation => "if" . expression then-eq-part else-eq-part "end" "if" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	if-equation => "if" . expression then-eq-part elseif-eq-list "end" "if" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	if-equation => "if" . expression then-eq-part elseif-eq-list else-eq-part "end" "if" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 308

259:	primary => name . array-subscripts ("or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
	array-subscripts => . "[" array-subscript-list "]"
	primary => name . ("or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
	primary => name . function-call-args ("or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
	function-call-args => . "(" function-arguments ")"
	function-call-args => . "(" ")"
	name => name . "." ident ("^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":" "[" "." "(")
	equation-1 => name . function-call-args ("annotation" '$string ";")
	function-call-args => . "(" function-arguments ")"
	function-call-args => . "(" ")"
		"." => shift 59
		"(" => shift 289
		function-call-args => shift 306
		"[" => shift 134
		array-subscripts => shift 307
		"=" => reduce 296
		":" => reduce 296
		"^" => reduce 296
		".^" => reduce 296
		"./" => reduce 296
		".*" => reduce 296
		"/" => reduce 296
		"*" => reduce 296
		"+" => reduce 296
		"-" => reduce 296
		".+" => reduce 296
		".-" => reduce 296
		"<>" => reduce 296
		"==" => reduce 296
		">=" => reduce 296
		">" => reduce 296
		"<=" => reduce 296
		"<" => reduce 296
		"and" => reduce 296
		"or" => reduce 296

260:	equation-1 => when-equation . ("annotation" '$string ";")
		";" => reduce 194
		'$string => reduce 194
		"annotation" => reduce 194

261:	equation-1 => connect-clause . ("annotation" '$string ";")
		";" => reduce 193
		'$string => reduce 193
		"annotation" => reduce 193

262:	equation-1 => for-equation . ("annotation" '$string ";")
		";" => reduce 192
		'$string => reduce 192
		"annotation" => reduce 192

263:	equation-1 => if-equation . ("annotation" '$string ";")
		";" => reduce 191
		'$string => reduce 191
		"annotation" => reduce 191

264:	equation-1 => simple-expression . "=" expression ("annotation" '$string ";")
		"=" => shift 305

265:	equation => equation-1 . comment (";")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 304
		";" => reduce 340
		"annotation" => reduce 340

266:	equation-list => equation . ";" ("elsewhen" "else" "elseif" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "end" "." '$ident "when" "connect" "for" "if" "not" "false" "true" "der" "(" "[" "{" '$string '$fx '$fl)
		";" => shift 303

267:	equation-list => equation-list . equation ";" ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "." '$ident "when" "connect" "for" "if" "not" "false" "true" "der" "(" "[" "{" '$string '$fx '$fl)
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	equation-section => "equation" equation-list . ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 302
		"annotation" => reduce 180
		"equation" => reduce 180
		"algorithm" => reduce 180
		"initial" => reduce 180
		"protected" => reduce 180
		"public" => reduce 180
		"external" => reduce 180
		"end" => reduce 180

268:	component-reference-1 => ident . $P13 (")" "," "(" ":=" ".")
	$P13 => .
	$P13 => . array-subscripts
	array-subscripts => . "[" array-subscript-list "]"
		"[" => shift 134
		array-subscripts => shift 300
		$P13 => shift 301
		")" => reduce 312
		"," => reduce 312
		"(" => reduce 312
		":=" => reduce 312
		"." => reduce 312

269:	when-statement => "when" . expression then-st-part elsewhen-st-list "end" "when" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 299

270:	while-statement => "while" . expression "loop" "end" "while" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	while-statement => "while" . expression "loop" statement-list "end" "while" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 298

271:	for-statement => "for" . for-indices "loop" "end" "for" (";" '$string "annotation")
	for-indices => . for-index
	for-indices => . for-indices "," for-index
	for-index => . ident "in" expression
	for-index => . ident
	ident => . '$ident
	for-statement => "for" . for-indices "loop" statement-list "end" "for" (";" '$string "annotation")
	for-indices => . for-index
	for-indices => . for-indices "," for-index
	for-index => . ident "in" expression
	for-index => . ident
	ident => . '$ident
		'$ident => shift 26
		ident => shift 295
		for-index => shift 296
		for-indices => shift 297

272:	if-statement => "if" . expression then-st-part "end" "if" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	if-statement => "if" . expression then-st-part else-st-part "end" "if" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	if-statement => "if" . expression then-st-part elseif-st-list "end" "if" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	if-statement => "if" . expression then-st-part elseif-st-list else-st-part "end" "if" (";" '$string "annotation")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 294

273:	statement-1 => when-statement . ("annotation" '$string ";")
		";" => reduce 207
		'$string => reduce 207
		"annotation" => reduce 207

274:	statement-1 => while-statement . ("annotation" '$string ";")
		";" => reduce 206
		'$string => reduce 206
		"annotation" => reduce 206

275:	statement-1 => for-statement . ("annotation" '$string ";")
		";" => reduce 205
		'$string => reduce 205
		"annotation" => reduce 205

276:	statement-1 => if-statement . ("annotation" '$string ";")
		";" => reduce 204
		'$string => reduce 204
		"annotation" => reduce 204

277:	statement-1 => "return" . ("annotation" '$string ";")
		";" => reduce 203
		'$string => reduce 203
		"annotation" => reduce 203

278:	statement-1 => "break" . ("annotation" '$string ";")
		";" => reduce 202
		'$string => reduce 202
		"annotation" => reduce 202

279:	statement-1 => "(" . output-expression-list ")" ":=" component-reference function-call-args ("annotation" '$string ";")
	output-expression-list => . ","
	output-expression-list => . expression
	output-expression-list => . output-expression-list "," expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 291
		"," => shift 292
		output-expression-list => shift 293

280:	statement-1 => component-reference . function-call-args ("annotation" '$string ";")
	function-call-args => . "(" function-arguments ")"
	function-call-args => . "(" ")"
	statement-1 => component-reference . ":=" expression ("annotation" '$string ";")
		":=" => shift 288
		"(" => shift 289
		function-call-args => shift 290

281:	statement => statement-1 . comment (";")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 287
		";" => reduce 340
		"annotation" => reduce 340

282:	statement-list => statement . ";" ("elsewhen" "else" "elseif" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "end" "(" "break" "return" "when" "while" "for" "if" "." '$ident)
		";" => shift 286

283:	statement-list => statement-list . statement ";" ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "(" "break" "return" "when" "while" "for" "if" "." '$ident)
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
	algorithm-section => "algorithm" statement-list . ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 285
		"annotation" => reduce 184
		"equation" => reduce 184
		"algorithm" => reduce 184
		"initial" => reduce 184
		"protected" => reduce 184
		"public" => reduce 184
		"external" => reduce 184
		"end" => reduce 184

284:	long-class-specifier => ident string-comment composition "end" ident . ("constrainedby" ";")
		";" => reduce 33
		"constrainedby" => reduce 33

285:	statement-list => statement-list statement . ";" ("elsewhen" "else" "elseif" "end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "(" "break" "return" "when" "while" "for" "if" "." '$ident)
		";" => shift 471

286:	statement-list => statement ";" . ("elsewhen" "else" "elseif" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "end" "(" "break" "return" "when" "while" "for" "if" "." '$ident)
		'$ident => reduce 196
		"." => reduce 196
		"if" => reduce 196
		"for" => reduce 196
		"while" => reduce 196
		"when" => reduce 196
		"return" => reduce 196
		"break" => reduce 196
		"(" => reduce 196
		"end" => reduce 196
		"annotation" => reduce 196
		"equation" => reduce 196
		"algorithm" => reduce 196
		"initial" => reduce 196
		"protected" => reduce 196
		"public" => reduce 196
		"external" => reduce 196
		"elseif" => reduce 196
		"else" => reduce 196
		"elsewhen" => reduce 196

287:	statement => statement-1 comment . (";")
		";" => reduce 198

288:	statement-1 => component-reference ":=" . expression ("annotation" '$string ";")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 470

289:	function-call-args => "(" . ")" ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
	function-call-args => "(" . function-arguments ")" ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
	function-arguments => . function-argument function-argument-1
	function-arguments => . named-arguments
	named-arguments => . named-argument
	named-arguments => . named-arguments "," named-argument
	function-argument => . "function" name "(" named-arguments ")"
	function-argument => . "function" name "(" ")"
	function-argument => . expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	named-argument => . ident "=" function-argument
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	ident => . '$ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		'$ident => shift 26
		logical-expression => shift 214
		ident => shift 368
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 369
		"function" => shift 370
		named-argument => shift 371
		named-arguments => shift 372
		function-argument => shift 373
		function-arguments => shift 468
		")" => shift 469

290:	statement-1 => component-reference function-call-args . ("annotation" '$string ";")
		";" => reduce 200
		'$string => reduce 200
		"annotation" => reduce 200

291:	output-expression-list => expression . ("," ")")
		")" => reduce 329
		"," => reduce 329

292:	output-expression-list => "," . ("," ")")
		")" => reduce 328
		"," => reduce 328

293:	output-expression-list => output-expression-list . "," expression ("," ")")
	statement-1 => "(" output-expression-list . ")" ":=" component-reference function-call-args ("annotation" '$string ";")
		")" => shift 467
		"," => shift 427

294:	if-statement => "if" expression . then-st-part elseif-st-list else-st-part "end" "if" (";" '$string "annotation")
	then-st-part => . "then" statement-list
	then-st-part => . "then"
	if-statement => "if" expression . then-st-part elseif-st-list "end" "if" (";" '$string "annotation")
	then-st-part => . "then" statement-list
	then-st-part => . "then"
	if-statement => "if" expression . then-st-part else-st-part "end" "if" (";" '$string "annotation")
	then-st-part => . "then" statement-list
	then-st-part => . "then"
	if-statement => "if" expression . then-st-part "end" "if" (";" '$string "annotation")
	then-st-part => . "then" statement-list
	then-st-part => . "then"
		"then" => shift 461
		then-st-part => shift 466

295:	for-index => ident . (")" "}" "," "loop")
	for-index => ident . "in" expression (")" "}" "," "loop")
		"in" => shift 465
		"loop" => reduce 239
		"," => reduce 239
		"}" => reduce 239
		")" => reduce 239

296:	for-indices => for-index . (")" "}" "," "loop")
		"loop" => reduce 236
		"," => reduce 236
		"}" => reduce 236
		")" => reduce 236

297:	for-statement => "for" for-indices . "loop" statement-list "end" "for" (";" '$string "annotation")
	for-indices => for-indices . "," for-index ("," "loop")
	for-statement => "for" for-indices . "loop" "end" "for" (";" '$string "annotation")
		"," => shift 456
		"loop" => shift 464

298:	while-statement => "while" expression . "loop" statement-list "end" "while" (";" '$string "annotation")
	while-statement => "while" expression . "loop" "end" "while" (";" '$string "annotation")
		"loop" => shift 463

299:	when-statement => "when" expression . then-st-part elsewhen-st-list "end" "when" (";" '$string "annotation")
	then-st-part => . "then" statement-list
	then-st-part => . "then"
		"then" => shift 461
		then-st-part => shift 462

300:	$P13 => array-subscripts . (")" "," "(" ":=" "=" ".")
		"." => reduce 313
		"=" => reduce 313
		":=" => reduce 313
		"(" => reduce 313
		"," => reduce 313
		")" => reduce 313

301:	component-reference-1 => ident $P13 . (")" "," "(" ":=" "=" ".")
		"." => reduce 310
		"=" => reduce 310
		":=" => reduce 310
		"(" => reduce 310
		"," => reduce 310
		")" => reduce 310

302:	equation-list => equation-list equation . ";" ("elsewhen" "else" "elseif" "end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "." '$ident "when" "connect" "for" "if" "not" "false" "true" "der" "(" "[" "{" '$string '$fx '$fl)
		";" => shift 460

303:	equation-list => equation ";" . ("elsewhen" "else" "elseif" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "end" "." '$ident "when" "connect" "for" "if" "not" "false" "true" "der" "(" "[" "{" '$string '$fx '$fl)
		'$fl => reduce 187
		'$fx => reduce 187
		'$string => reduce 187
		"{" => reduce 187
		"[" => reduce 187
		"(" => reduce 187
		"der" => reduce 187
		"true" => reduce 187
		"false" => reduce 187
		"not" => reduce 187
		"if" => reduce 187
		"for" => reduce 187
		"connect" => reduce 187
		"when" => reduce 187
		'$ident => reduce 187
		"." => reduce 187
		"end" => reduce 187
		"annotation" => reduce 187
		"equation" => reduce 187
		"algorithm" => reduce 187
		"initial" => reduce 187
		"protected" => reduce 187
		"public" => reduce 187
		"external" => reduce 187
		"elseif" => reduce 187
		"else" => reduce 187
		"elsewhen" => reduce 187

304:	equation => equation-1 comment . (";")
		";" => reduce 189

305:	equation-1 => simple-expression "=" . expression ("annotation" '$string ";")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 459

306:	equation-1 => name function-call-args . ("annotation" '$string ";")
	primary => name function-call-args . ("or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"=" => reduce 294
		":" => reduce 294
		"^" => reduce 294
		".^" => reduce 294
		"./" => reduce 294
		".*" => reduce 294
		"/" => reduce 294
		"*" => reduce 294
		"+" => reduce 294
		"-" => reduce 294
		".+" => reduce 294
		".-" => reduce 294
		"<>" => reduce 294
		"==" => reduce 294
		">=" => reduce 294
		">" => reduce 294
		"<=" => reduce 294
		"<" => reduce 294
		"and" => reduce 294
		"or" => reduce 294
		";" => reduce 195
		'$string => reduce 195
		"annotation" => reduce 195

307:	primary => name array-subscripts . ("if" "elsewhen" "end" "}" "=" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "]")
		"]" => reduce 297
		":" => reduce 297
		"^" => reduce 297
		".^" => reduce 297
		"./" => reduce 297
		".*" => reduce 297
		"/" => reduce 297
		"*" => reduce 297
		"+" => reduce 297
		"-" => reduce 297
		".+" => reduce 297
		".-" => reduce 297
		"<>" => reduce 297
		"==" => reduce 297
		">=" => reduce 297
		">" => reduce 297
		"<=" => reduce 297
		"<" => reduce 297
		"and" => reduce 297
		"or" => reduce 297
		"," => reduce 297
		"for" => reduce 297
		";" => reduce 297
		")" => reduce 297
		"then" => reduce 297
		"loop" => reduce 297
		"else" => reduce 297
		"elseif" => reduce 297
		'$string => reduce 297
		"annotation" => reduce 297
		"constrainedby" => reduce 297
		"=" => reduce 297
		"}" => reduce 297
		"end" => reduce 297
		"elsewhen" => reduce 297
		"if" => reduce 297

308:	if-equation => "if" expression . then-eq-part elseif-eq-list else-eq-part "end" "if" (";" '$string "annotation")
	then-eq-part => . "then" equation-list
	then-eq-part => . "then"
	if-equation => "if" expression . then-eq-part elseif-eq-list "end" "if" (";" '$string "annotation")
	then-eq-part => . "then" equation-list
	then-eq-part => . "then"
	if-equation => "if" expression . then-eq-part else-eq-part "end" "if" (";" '$string "annotation")
	then-eq-part => . "then" equation-list
	then-eq-part => . "then"
	if-equation => "if" expression . then-eq-part "end" "if" (";" '$string "annotation")
	then-eq-part => . "then" equation-list
	then-eq-part => . "then"
		"then" => shift 454
		then-eq-part => shift 458

309:	for-equation => "for" for-indices . "loop" equation-list "end" "for" (";" '$string "annotation")
	for-indices => for-indices . "," for-index ("," "loop")
	for-equation => "for" for-indices . "loop" "end" "for" (";" '$string "annotation")
		"," => shift 456
		"loop" => shift 457

310:	when-equation => "when" expression . then-eq-part elsewhen-eq-list "end" "when" (";" '$string "annotation")
	then-eq-part => . "then" equation-list
	then-eq-part => . "then"
		"then" => shift 454
		then-eq-part => shift 455

311:	connect-clause => "connect" "(" . component-reference "," component-reference ")" (";" '$string "annotation")
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		component-reference => shift 453

312:	statement-list => statement-list . statement ";" ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "(" "break" "return" "when" "while" "for" "if" "." '$ident)
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
	algorithm-section => "initial" "algorithm" statement-list . ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 285
		"annotation" => reduce 183
		"equation" => reduce 183
		"algorithm" => reduce 183
		"initial" => reduce 183
		"protected" => reduce 183
		"public" => reduce 183
		"external" => reduce 183
		"end" => reduce 183

313:	equation-list => equation-list . equation ";" ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "." '$ident "when" "connect" "for" "if" "not" "false" "true" "der" "(" "[" "{" '$string '$fx '$fl)
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	equation-section => "initial" "equation" equation-list . ("end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation")
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 302
		"annotation" => reduce 179
		"equation" => reduce 179
		"algorithm" => reduce 179
		"initial" => reduce 179
		"protected" => reduce 179
		"public" => reduce 179
		"external" => reduce 179
		"end" => reduce 179

314:	composition => element-list composition-1-list external-part opt-annotation . ("end")
		"end" => reduce 52

315:	external-part => "external" annotation ";" . ("end" "annotation")
		"annotation" => reduce 70
		"end" => reduce 70

316:	external-part => "external" external-function-call ";" . ("end" "annotation")
		"annotation" => reduce 69
		"end" => reduce 69

317:	external-part => "external" external-function-call annotation . ";" ("end" "annotation")
		";" => shift 452

318:	external-function-call => component-reference "=" . ident "(" expression-list ")" ("annotation" ";")
	ident => . '$ident
	external-function-call => component-reference "=" . ident "(" ")" ("annotation" ";")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 451

319:	external-function-call => ident "(" . expression-list ")" ("annotation" ";")
	expression-list => . expression
	expression-list => . expression-list "," expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	external-function-call => ident "(" . ")" ("annotation" ";")
		")" => shift 449
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 365
		expression-list => shift 450

320:	component-reference => component-reference-1 "." . ident $P12 (")" "," "=" ":=" "(")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 448

321:	component-reference-1 => "." ident . $P14 (")" "," "=" "(" ":=" ".")
	$P14 => .
	$P14 => . array-subscripts
	array-subscripts => . "[" array-subscript-list "]"
		"[" => shift 134
		array-subscripts => shift 446
		$P14 => shift 447
		")" => reduce 314
		"," => reduce 314
		"=" => reduce 314
		"(" => reduce 314
		":=" => reduce 314
		"." => reduce 314

322:	external-part => "external" language-specification ";" . ("end" "annotation")
		"annotation" => reduce 68
		"end" => reduce 68

323:	external-part => "external" language-specification annotation . ";" ("end" "annotation")
		";" => shift 445

324:	external-part => "external" language-specification external-function-call . ";" ("end" "annotation")
	external-part => "external" language-specification external-function-call . annotation ";" ("end" "annotation")
	annotation => . "annotation" class-modification
		"annotation" => shift 114
		annotation => shift 443
		";" => shift 444

325:	$P3 => "outer" . ("replaceable" "." '$ident "input" "output" "discrete" "parameter" "constant" "flow" "stream" "encapsulated" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 91
		"pure" => reduce 91
		"impure" => reduce 91
		"package" => reduce 91
		"type" => reduce 91
		"connector" => reduce 91
		"expandable" => reduce 91
		"block" => reduce 91
		"record" => reduce 91
		"operator" => reduce 91
		"model" => reduce 91
		"class" => reduce 91
		"partial" => reduce 91
		"encapsulated" => reduce 91
		"stream" => reduce 91
		"flow" => reduce 91
		"constant" => reduce 91
		"parameter" => reduce 91
		"discrete" => reduce 91
		"output" => reduce 91
		"input" => reduce 91
		'$ident => reduce 91
		"." => reduce 91
		"replaceable" => reduce 91

326:	element => "redeclare" $P1 $P2 $P3 . element-1 (";")
	element-1 => . class-definition
	element-1 => . component-clause
	element-1 => . "replaceable" element-2 constraining-clause comment
	element-1 => . "replaceable" element-2
	class-definition => . "encapsulated" class-prefixes class-specifier
	class-definition => . class-prefixes class-specifier
	component-clause => . type-prefix type-specifier array-subscripts component-list
	component-clause => . type-prefix type-specifier component-list
	component-clause => . type-specifier array-subscripts component-list
	component-clause => . type-specifier component-list
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-specifier => . name
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		name => shift 82
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		type-specifier => shift 83
		type-prefix => shift 84
		class-prefixes => shift 15
		"encapsulated" => shift 16
		"replaceable" => shift 87
		component-clause => shift 88
		class-definition => shift 89
		element-1 => shift 442

327:	element => "final" $P4 $P5 element-1 . (";")
		";" => reduce 82

328:	element-1 => "replaceable" element-2 constraining-clause comment . (";")
		";" => reduce 100

329:	constraining-clause => "constrainedby" name . class-modification ("," ")" ";" "annotation" '$string)
	class-modification => . "(" argument-list ")"
	class-modification => . "(" ")"
	name => name . "." ident ("," ")" ";" "annotation" '$string "(" ".")
	constraining-clause => "constrainedby" name . ("," ")" ";" "annotation" '$string)
		"." => shift 59
		"(" => shift 66
		class-modification => shift 441
		'$string => reduce 118
		"annotation" => reduce 118
		";" => reduce 118
		")" => reduce 118
		"," => reduce 118

330:	import-clause-2 => "{" . import-list "}" (";" "annotation" '$string)
	import-list => . ident
	import-list => . import-list "," ident
	ident => . '$ident
	import-clause-2 => "{" . "}" (";" "annotation" '$string)
		"}" => shift 438
		'$ident => shift 26
		ident => shift 439
		import-list => shift 440

331:	import-clause-2 => "*" . (";" "annotation" '$string)
		'$string => reduce 108
		"annotation" => reduce 108
		";" => reduce 108

332:	import-clause-1 => name "." import-clause-2 . (";" "annotation" '$string)
		'$string => reduce 106
		"annotation" => reduce 106
		";" => reduce 106

333:	name => name . "." ident (";" "annotation" '$string ".")
	import-clause-1 => ident "=" name . (";" "annotation" '$string)
		"." => shift 59
		'$string => reduce 105
		"annotation" => reduce 105
		";" => reduce 105

334:	extends-clause => "extends" name class-modification annotation . (";")
		";" => reduce 113

335:	component-list => component-list . "," component-declaration ("constrainedby" ";" ",")
	component-clause => type-prefix type-specifier array-subscripts component-list . ("constrainedby" ";")
		"," => shift 188
		";" => reduce 119
		"constrainedby" => reduce 119

336:	array-subscripts => "[" array-subscript-list "]" . ("elsewhen" "end" "}" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "." "elseif" "else" "loop" "then" ")" "for" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "]" "constrainedby" ";" "," "if" "annotation" '$string "(" ":=" "=" '$ident)
		'$ident => reduce 333
		"=" => reduce 333
		":=" => reduce 333
		"(" => reduce 333
		'$string => reduce 333
		"annotation" => reduce 333
		"if" => reduce 333
		"," => reduce 333
		";" => reduce 333
		"constrainedby" => reduce 333
		"]" => reduce 333
		":" => reduce 333
		"^" => reduce 333
		".^" => reduce 333
		"./" => reduce 333
		".*" => reduce 333
		"/" => reduce 333
		"*" => reduce 333
		"+" => reduce 333
		"-" => reduce 333
		".+" => reduce 333
		".-" => reduce 333
		"<>" => reduce 333
		"==" => reduce 333
		">=" => reduce 333
		">" => reduce 333
		"<=" => reduce 333
		"<" => reduce 333
		"and" => reduce 333
		"or" => reduce 333
		"for" => reduce 333
		")" => reduce 333
		"then" => reduce 333
		"loop" => reduce 333
		"else" => reduce 333
		"elseif" => reduce 333
		"." => reduce 333
		"stream" => reduce 333
		"flow" => reduce 333
		"constant" => reduce 333
		"parameter" => reduce 333
		"discrete" => reduce 333
		"output" => reduce 333
		"input" => reduce 333
		"}" => reduce 333
		"end" => reduce 333
		"elsewhen" => reduce 333

337:	array-subscript-list => array-subscript-list "," . subscript ("," "]")
	subscript => . ":"
	subscript => . expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 217
		":" => shift 218
		subscript => shift 437

338:	expression => "if" expression . "then" expression elseif-ex-list "else" expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
	expression => "if" expression . "then" expression "else" expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
		"then" => shift 436

339:	simple-expression => logical-expression ":" . logical-expression ":" logical-expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "=")
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	simple-expression => logical-expression ":" . logical-expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "=")
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 435

340:	logical-expression => logical-expression "or" . logical-term ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "=" ":")
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 434

341:	logical-term => logical-term "and" . logical-factor ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" ":" "=")
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 433

342:	rel-op => "<>" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 274
		'$fx => reduce 274
		'$string => reduce 274
		'$ident => reduce 274
		"." => reduce 274
		"{" => reduce 274
		"[" => reduce 274
		"(" => reduce 274
		"der" => reduce 274
		"true" => reduce 274
		"false" => reduce 274

343:	rel-op => "==" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 273
		'$fx => reduce 273
		'$string => reduce 273
		'$ident => reduce 273
		"." => reduce 273
		"{" => reduce 273
		"[" => reduce 273
		"(" => reduce 273
		"der" => reduce 273
		"true" => reduce 273
		"false" => reduce 273

344:	rel-op => ">=" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 272
		'$fx => reduce 272
		'$string => reduce 272
		'$ident => reduce 272
		"." => reduce 272
		"{" => reduce 272
		"[" => reduce 272
		"(" => reduce 272
		"der" => reduce 272
		"true" => reduce 272
		"false" => reduce 272

345:	rel-op => ">" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 271
		'$fx => reduce 271
		'$string => reduce 271
		'$ident => reduce 271
		"." => reduce 271
		"{" => reduce 271
		"[" => reduce 271
		"(" => reduce 271
		"der" => reduce 271
		"true" => reduce 271
		"false" => reduce 271

346:	rel-op => "<=" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 270
		'$fx => reduce 270
		'$string => reduce 270
		'$ident => reduce 270
		"." => reduce 270
		"{" => reduce 270
		"[" => reduce 270
		"(" => reduce 270
		"der" => reduce 270
		"true" => reduce 270
		"false" => reduce 270

347:	rel-op => "<" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 269
		'$fx => reduce 269
		'$string => reduce 269
		'$ident => reduce 269
		"." => reduce 269
		"{" => reduce 269
		"[" => reduce 269
		"(" => reduce 269
		"der" => reduce 269
		"true" => reduce 269
		"false" => reduce 269

348:	relation => relation rel-op . arithmetic-expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ":" "=")
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 432

349:	relation => relation . rel-op arithmetic-expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "and" "or" "=" ":" "<" "<=" ">" ">=" "==" "<>")
	rel-op => . "<"
	rel-op => . "<="
	rel-op => . ">"
	rel-op => . ">="
	rel-op => . "=="
	rel-op => . "<>"
	logical-factor => "not" relation . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "and" "or" "=" ":")
		"<>" => shift 342
		"==" => shift 343
		">=" => shift 344
		">" => shift 345
		"<=" => shift 346
		"<" => shift 347
		rel-op => shift 348
		":" => reduce 266
		"=" => reduce 266
		"or" => reduce 266
		"and" => reduce 266
		"]" => reduce 266
		"," => reduce 266
		"for" => reduce 266
		";" => reduce 266
		")" => reduce 266
		"then" => reduce 266
		"loop" => reduce 266
		"else" => reduce 266
		"elseif" => reduce 266
		'$string => reduce 266
		"annotation" => reduce 266
		"constrainedby" => reduce 266
		"}" => reduce 266
		"end" => reduce 266
		"elsewhen" => reduce 266
		"if" => reduce 266

350:	add-op => ".-" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 280
		'$fx => reduce 280
		'$string => reduce 280
		'$ident => reduce 280
		"." => reduce 280
		"{" => reduce 280
		"[" => reduce 280
		"(" => reduce 280
		"der" => reduce 280
		"true" => reduce 280
		"false" => reduce 280

351:	add-op => ".+" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 279
		'$fx => reduce 279
		'$string => reduce 279
		'$ident => reduce 279
		"." => reduce 279
		"{" => reduce 279
		"[" => reduce 279
		"(" => reduce 279
		"der" => reduce 279
		"true" => reduce 279
		"false" => reduce 279

352:	add-op => "-" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 278
		'$fx => reduce 278
		'$string => reduce 278
		'$ident => reduce 278
		"." => reduce 278
		"{" => reduce 278
		"[" => reduce 278
		"(" => reduce 278
		"der" => reduce 278
		"true" => reduce 278
		"false" => reduce 278

353:	add-op => "+" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 277
		'$fx => reduce 277
		'$string => reduce 277
		'$ident => reduce 277
		"." => reduce 277
		"{" => reduce 277
		"[" => reduce 277
		"(" => reduce 277
		"der" => reduce 277
		"true" => reduce 277
		"false" => reduce 277

354:	arithmetic-expression => arithmetic-expression add-op . term ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 431

355:	mul-op => "./" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 286
		'$fx => reduce 286
		'$string => reduce 286
		'$ident => reduce 286
		"." => reduce 286
		"{" => reduce 286
		"[" => reduce 286
		"(" => reduce 286
		"der" => reduce 286
		"true" => reduce 286
		"false" => reduce 286

356:	mul-op => ".*" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 285
		'$fx => reduce 285
		'$string => reduce 285
		'$ident => reduce 285
		"." => reduce 285
		"{" => reduce 285
		"[" => reduce 285
		"(" => reduce 285
		"der" => reduce 285
		"true" => reduce 285
		"false" => reduce 285

357:	mul-op => "/" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 284
		'$fx => reduce 284
		'$string => reduce 284
		'$ident => reduce 284
		"." => reduce 284
		"{" => reduce 284
		"[" => reduce 284
		"(" => reduce 284
		"der" => reduce 284
		"true" => reduce 284
		"false" => reduce 284

358:	mul-op => "*" . ("false" "true" "der" "(" "[" "{" "." '$ident '$string '$fx '$fl)
		'$fl => reduce 283
		'$fx => reduce 283
		'$string => reduce 283
		'$ident => reduce 283
		"." => reduce 283
		"{" => reduce 283
		"[" => reduce 283
		"(" => reduce 283
		"der" => reduce 283
		"true" => reduce 283
		"false" => reduce 283

359:	term => term mul-op . factor ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ":" "=")
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 430

360:	factor => factor "^" . primary ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 429

361:	factor => factor ".^" . primary ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 428

362:	primary => name function-call-args . ("if" "elsewhen" "end" "}" "=" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "]")
		"]" => reduce 294
		":" => reduce 294
		"^" => reduce 294
		".^" => reduce 294
		"./" => reduce 294
		".*" => reduce 294
		"/" => reduce 294
		"*" => reduce 294
		"+" => reduce 294
		"-" => reduce 294
		".+" => reduce 294
		".-" => reduce 294
		"<>" => reduce 294
		"==" => reduce 294
		">=" => reduce 294
		">" => reduce 294
		"<=" => reduce 294
		"<" => reduce 294
		"and" => reduce 294
		"or" => reduce 294
		"," => reduce 294
		"for" => reduce 294
		";" => reduce 294
		")" => reduce 294
		"then" => reduce 294
		"loop" => reduce 294
		"else" => reduce 294
		"elseif" => reduce 294
		'$string => reduce 294
		"annotation" => reduce 294
		"constrainedby" => reduce 294
		"=" => reduce 294
		"}" => reduce 294
		"end" => reduce 294
		"elsewhen" => reduce 294
		"if" => reduce 294

363:	primary => "der" function-call-args . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"=" => reduce 295
		":" => reduce 295
		"^" => reduce 295
		".^" => reduce 295
		"./" => reduce 295
		".*" => reduce 295
		"/" => reduce 295
		"*" => reduce 295
		"+" => reduce 295
		"-" => reduce 295
		".+" => reduce 295
		".-" => reduce 295
		"<>" => reduce 295
		"==" => reduce 295
		">=" => reduce 295
		">" => reduce 295
		"<=" => reduce 295
		"<" => reduce 295
		"and" => reduce 295
		"or" => reduce 295
		"]" => reduce 295
		"," => reduce 295
		"for" => reduce 295
		";" => reduce 295
		")" => reduce 295
		"then" => reduce 295
		"loop" => reduce 295
		"else" => reduce 295
		"elseif" => reduce 295
		'$string => reduce 295
		"annotation" => reduce 295
		"constrainedby" => reduce 295
		"}" => reduce 295
		"end" => reduce 295
		"elsewhen" => reduce 295
		"if" => reduce 295

364:	output-expression-list => output-expression-list . "," expression ("," ")")
	primary => "(" output-expression-list . ")" ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		")" => shift 426
		"," => shift 427

365:	expression-list => expression . ("elsewhen" "end" ")" ";" "," "]")
		"]" => reduce 331
		"," => reduce 331
		";" => reduce 331
		")" => reduce 331
		"end" => reduce 331
		"elsewhen" => reduce 331

366:	expression-list => expression-list . "," expression (";" "," "]")
	expression-list-list => expression-list . (";" "]")
		"," => shift 425
		"]" => reduce 301
		";" => reduce 301

367:	expression-list-list => expression-list-list . ";" expression-list (";" "]")
	primary => "[" expression-list-list . "]" ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"]" => shift 423
		";" => shift 424

368:	name => ident . ("." "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "(" "for" "," ":" "[")
	named-argument => ident . "=" function-argument (")" "," "}")
		"=" => shift 422
		"[" => reduce 303
		":" => reduce 303
		"," => reduce 303
		"for" => reduce 303
		"(" => reduce 303
		"or" => reduce 303
		"and" => reduce 303
		"<" => reduce 303
		"<=" => reduce 303
		">" => reduce 303
		">=" => reduce 303
		"==" => reduce 303
		"<>" => reduce 303
		".-" => reduce 303
		".+" => reduce 303
		"-" => reduce 303
		"+" => reduce 303
		"*" => reduce 303
		"/" => reduce 303
		".*" => reduce 303
		"./" => reduce 303
		".^" => reduce 303
		"^" => reduce 303
		"." => reduce 303

369:	function-argument => expression . (")" "}" "," "for")
		"for" => reduce 327
		"," => reduce 327
		"}" => reduce 327
		")" => reduce 327

370:	function-argument => "function" . name "(" ")" (")" "}" "," "for")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
	function-argument => "function" . name "(" named-arguments ")" (")" "}" "," "for")
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		name => shift 421

371:	named-arguments => named-argument . (")" "," "}")
		"}" => reduce 322
		"," => reduce 322
		")" => reduce 322

372:	named-arguments => named-arguments . "," named-argument (")" "," "}")
	function-arguments => named-arguments . (")" "}")
		"," => shift 420
		"}" => reduce 319
		")" => reduce 319

373:	function-arguments => function-argument . function-argument-1 (")" "}")
	function-argument-1 => . "," function-arguments
	function-argument-1 => . "for" for-indices
		"for" => shift 417
		"," => shift 418
		function-argument-1 => shift 419

374:	primary => "{" function-arguments . "}" ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"}" => shift 416

375:	$P8 => modification . (")" "constrainedby" ";" "," "if" "annotation" '$string)
		'$string => reduce 147
		"annotation" => reduce 147
		"if" => reduce 147
		"," => reduce 147
		";" => reduce 147
		"constrainedby" => reduce 147
		")" => reduce 147

376:	declaration => ident $P7 $P8 . (")" "constrainedby" ";" "," "if" "annotation" '$string)
		'$string => reduce 143
		"annotation" => reduce 143
		"if" => reduce 143
		"," => reduce 143
		";" => reduce 143
		"constrainedby" => reduce 143
		")" => reduce 143

377:	component-declaration => declaration condition-attribute comment . ("constrainedby" ";" ",")
		"," => reduce 140
		";" => reduce 140
		"constrainedby" => reduce 140

378:	condition-attribute => "if" expression . ("constrainedby" ";" "," "annotation" '$string)
		'$string => reduce 142
		"annotation" => reduce 142
		"," => reduce 142
		";" => reduce 142
		"constrainedby" => reduce 142

379:	component-list => component-list "," component-declaration . ("constrainedby" ";" ",")
		"," => reduce 139
		";" => reduce 139
		"constrainedby" => reduce 139

380:	short-class-specifier => ident "=" base-prefix name array-subscripts class-modification . comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 415
		";" => reduce 340
		"constrainedby" => reduce 340
		"stream" => reduce 340
		"flow" => reduce 340
		"constant" => reduce 340
		"parameter" => reduce 340
		"discrete" => reduce 340
		"output" => reduce 340
		"input" => reduce 340
		")" => reduce 340
		"," => reduce 340
		"annotation" => reduce 340

381:	short-class-specifier => ident "=" base-prefix name array-subscripts comment . ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
		";" => reduce 37
		"constrainedby" => reduce 37
		"stream" => reduce 37
		"flow" => reduce 37
		"constant" => reduce 37
		"parameter" => reduce 37
		"discrete" => reduce 37
		"output" => reduce 37
		"input" => reduce 37
		")" => reduce 37
		"," => reduce 37

382:	short-class-specifier => ident "=" base-prefix name class-modification comment . ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
		";" => reduce 38
		"constrainedby" => reduce 38
		"stream" => reduce 38
		"flow" => reduce 38
		"constant" => reduce 38
		"parameter" => reduce 38
		"discrete" => reduce 38
		"output" => reduce 38
		"input" => reduce 38
		")" => reduce 38
		"," => reduce 38

383:	comment => string-comment annotation . ("input" "output" "discrete" "parameter" "constant" "flow" "stream" ")" "constrainedby" "," ";")
		";" => reduce 338
		"," => reduce 338
		"constrainedby" => reduce 338
		")" => reduce 338
		"stream" => reduce 338
		"flow" => reduce 338
		"constant" => reduce 338
		"parameter" => reduce 338
		"discrete" => reduce 338
		"output" => reduce 338
		"input" => reduce 338

384:	short-class-specifier => ident "=" "enumeration" "(" filler-1 ")" . comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 414
		";" => reduce 340
		"constrainedby" => reduce 340
		"stream" => reduce 340
		"flow" => reduce 340
		"constant" => reduce 340
		"parameter" => reduce 340
		"discrete" => reduce 340
		"output" => reduce 340
		"input" => reduce 340
		")" => reduce 340
		"," => reduce 340
		"annotation" => reduce 340

385:	enum-list => enum-list "," . enumeration-literal ("," ")")
	enumeration-literal => . ident comment
	ident => . '$ident
		'$ident => shift 26
		ident => shift 178
		enumeration-literal => shift 413

386:	enumeration-literal => ident comment . ("," ")")
		")" => reduce 51
		"," => reduce 51

387:	der-class-specifier => ident "=" "der" "(" name "," . der-class-specifier-1 ")" comment ("constrainedby" ";")
	der-class-specifier-1 => . ident
	der-class-specifier-1 => . der-class-specifier-1 ";" ident
	ident => . '$ident
		'$ident => shift 26
		ident => shift 411
		der-class-specifier-1 => shift 412

388:	long-class-specifier => "extends" ident class-modification string-comment composition "end" . ident ("constrainedby" ";")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 410

389:	component-clause1 => type-prefix . type-specifier declaration comment ("," ")" "constrainedby")
	type-specifier => . name
	name => . ident
	name => . "." ident
	name => . name "." ident
	ident => . '$ident
		'$ident => shift 26
		"." => shift 27
		ident => shift 28
		name => shift 82
		type-specifier => shift 409

390:	element-replaceable => "replaceable" short-class-definition component-clause1 . ("," ")")
	element-replaceable => "replaceable" short-class-definition component-clause1 . constraining-clause ("," ")")
	constraining-clause => . "constrainedby" name class-modification
	constraining-clause => . "constrainedby" name
		"constrainedby" => shift 228
		constraining-clause => shift 408
		")" => reduce 176
		"," => reduce 176

391:	short-class-specifier => ident . "=" "enumeration" "(" filler-1 ")" comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
	short-class-specifier => ident . "=" base-prefix name comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
	short-class-specifier => ident . "=" base-prefix name class-modification comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
	short-class-specifier => ident . "=" base-prefix name array-subscripts comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
	short-class-specifier => ident . "=" base-prefix name array-subscripts class-modification comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
		"=" => shift 407

392:	short-class-definition => class-prefixes short-class-specifier . ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
		"stream" => reduce 178
		"flow" => reduce 178
		"constant" => reduce 178
		"parameter" => reduce 178
		"discrete" => reduce 178
		"output" => reduce 178
		"input" => reduce 178
		")" => reduce 178
		"," => reduce 178

393:	element-modification => name $P9 string-comment . ("," ")")
		")" => reduce 164
		"," => reduce 164

394:	modification => class-modification "=" . expression ("constrainedby" ";" "if" "annotation" "," ")" '$string)
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 406

395:	modification => "=" expression . ("constrainedby" ";" "if" "annotation" "," ")" '$string)
		'$string => reduce 150
		")" => reduce 150
		"," => reduce 150
		"annotation" => reduce 150
		"if" => reduce 150
		";" => reduce 150
		"constrainedby" => reduce 150

396:	modification => ":=" expression . ("constrainedby" ";" "if" "annotation" "," ")" '$string)
		'$string => reduce 151
		")" => reduce 151
		"," => reduce 151
		"annotation" => reduce 151
		"if" => reduce 151
		";" => reduce 151
		"constrainedby" => reduce 151

397:	$P11 => "final" . ("replaceable" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "partial" "class" "model" "operator" "record" "block" "expandable" "connector" "type" "package" "impure" "pure" "function")
		"function" => reduce 171
		"pure" => reduce 171
		"impure" => reduce 171
		"package" => reduce 171
		"type" => reduce 171
		"connector" => reduce 171
		"expandable" => reduce 171
		"block" => reduce 171
		"record" => reduce 171
		"operator" => reduce 171
		"model" => reduce 171
		"class" => reduce 171
		"partial" => reduce 171
		"stream" => reduce 171
		"flow" => reduce 171
		"constant" => reduce 171
		"parameter" => reduce 171
		"discrete" => reduce 171
		"output" => reduce 171
		"input" => reduce 171
		"replaceable" => reduce 171

398:	element-redeclaration => "redeclare" $P10 $P11 . elt-redecl-1 ("," ")")
	elt-redecl-1 => . short-class-definition
	elt-redecl-1 => . component-clause1
	elt-redecl-1 => . element-replaceable
	element-replaceable => . "replaceable" short-class-definition component-clause1 constraining-clause
	element-replaceable => . "replaceable" short-class-definition component-clause1
	component-clause1 => . type-prefix type-specifier declaration comment
	short-class-definition => . class-prefixes short-class-specifier
	class-prefixes => . "partial" class-prefixes-1
	class-prefixes => . class-prefixes-1
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	class-prefixes-1 => . "class"
	class-prefixes-1 => . "model"
	class-prefixes-1 => . "operator" "record"
	class-prefixes-1 => . "record"
	class-prefixes-1 => . "block"
	class-prefixes-1 => . "expandable" "connector"
	class-prefixes-1 => . "connector"
	class-prefixes-1 => . "type"
	class-prefixes-1 => . "package"
	class-prefixes-1 => . "impure" "operator" "function"
	class-prefixes-1 => . "pure" "operator" "function"
	class-prefixes-1 => . "impure" "function"
	class-prefixes-1 => . "pure" "function"
	class-prefixes-1 => . "operator" "function"
	class-prefixes-1 => . "function"
	class-prefixes-1 => . "operator"
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		"function" => shift 1
		"pure" => shift 2
		"impure" => shift 3
		"package" => shift 4
		"type" => shift 5
		"connector" => shift 6
		"expandable" => shift 7
		"block" => shift 8
		"record" => shift 9
		"operator" => shift 10
		"model" => shift 11
		"class" => shift 12
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		class-prefixes-1 => shift 13
		"partial" => shift 14
		class-prefixes => shift 174
		type-prefix => shift 389
		"replaceable" => shift 147
		element-replaceable => shift 402
		component-clause1 => shift 403
		short-class-definition => shift 404
		elt-redecl-1 => shift 405

399:	element-modification-or-replaceable => "each" "final" elt-mod-or-repl-1 . ("," ")")
		")" => reduce 158
		"," => reduce 158

400:	argument-list => argument-list "," argument . ("," ")")
		")" => reduce 155
		"," => reduce 155

401:	long-class-specifier => "extends" ident string-comment composition "end" ident . ("constrainedby" ";")
		";" => reduce 35
		"constrainedby" => reduce 35

402:	elt-redecl-1 => element-replaceable . ("," ")")
		")" => reduce 174
		"," => reduce 174

403:	elt-redecl-1 => component-clause1 . ("," ")")
		")" => reduce 173
		"," => reduce 173

404:	elt-redecl-1 => short-class-definition . ("," ")")
		")" => reduce 172
		"," => reduce 172

405:	element-redeclaration => "redeclare" $P10 $P11 elt-redecl-1 . ("," ")")
		")" => reduce 167
		"," => reduce 167

406:	modification => class-modification "=" expression . ("constrainedby" ";" "if" "annotation" "," ")" '$string)
		'$string => reduce 148
		")" => reduce 148
		"," => reduce 148
		"annotation" => reduce 148
		"if" => reduce 148
		";" => reduce 148
		"constrainedby" => reduce 148

407:	short-class-specifier => ident "=" . base-prefix name array-subscripts class-modification comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
	base-prefix => .
	base-prefix => . type-prefix
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	short-class-specifier => ident "=" . base-prefix name array-subscripts comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
	base-prefix => .
	base-prefix => . type-prefix
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	short-class-specifier => ident "=" . base-prefix name class-modification comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
	base-prefix => .
	base-prefix => . type-prefix
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	short-class-specifier => ident "=" . base-prefix name comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
	base-prefix => .
	base-prefix => . type-prefix
	type-prefix => . type-prefix-1 type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1 type-prefix-2
	type-prefix => . type-prefix-1 type-prefix-3
	type-prefix => . type-prefix-2 type-prefix-3
	type-prefix => . type-prefix-1
	type-prefix => . type-prefix-2
	type-prefix => . type-prefix-3
	type-prefix-1 => . "flow"
	type-prefix-1 => . "stream"
	type-prefix-2 => . "discrete"
	type-prefix-2 => . "parameter"
	type-prefix-2 => . "constant"
	type-prefix-3 => . "input"
	type-prefix-3 => . "output"
	short-class-specifier => ident "=" . "enumeration" "(" filler-1 ")" comment ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream")
		"enumeration" => shift 69
		"output" => shift 70
		"input" => shift 71
		"constant" => shift 72
		"parameter" => shift 73
		"discrete" => shift 74
		"stream" => shift 75
		"flow" => shift 76
		type-prefix-3 => shift 77
		type-prefix-2 => shift 78
		type-prefix-1 => shift 79
		type-prefix => shift 80
		base-prefix => shift 81
		'$ident => reduce 47
		"." => reduce 47

408:	element-replaceable => "replaceable" short-class-definition component-clause1 constraining-clause . ("," ")")
		")" => reduce 175
		"," => reduce 175

409:	component-clause1 => type-prefix type-specifier . declaration comment ("," ")" "constrainedby")
	declaration => . ident $P7 $P8
	ident => . '$ident
		'$ident => shift 26
		ident => shift 136
		declaration => shift 523

410:	long-class-specifier => "extends" ident class-modification string-comment composition "end" ident . ("constrainedby" ";")
		";" => reduce 34
		"constrainedby" => reduce 34

411:	der-class-specifier-1 => ident . (";" ")")
		")" => reduce 45
		";" => reduce 45

412:	der-class-specifier-1 => der-class-specifier-1 . ";" ident (";" ")")
	der-class-specifier => ident "=" "der" "(" name "," der-class-specifier-1 . ")" comment ("constrainedby" ";")
		")" => shift 521
		";" => shift 522

413:	enum-list => enum-list "," enumeration-literal . ("," ")")
		")" => reduce 50
		"," => reduce 50

414:	short-class-specifier => ident "=" "enumeration" "(" filler-1 ")" comment . ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
		";" => reduce 40
		"constrainedby" => reduce 40
		"stream" => reduce 40
		"flow" => reduce 40
		"constant" => reduce 40
		"parameter" => reduce 40
		"discrete" => reduce 40
		"output" => reduce 40
		"input" => reduce 40
		")" => reduce 40
		"," => reduce 40

415:	short-class-specifier => ident "=" base-prefix name array-subscripts class-modification comment . ("," ")" "input" "output" "discrete" "parameter" "constant" "flow" "stream" "constrainedby" ";")
		";" => reduce 36
		"constrainedby" => reduce 36
		"stream" => reduce 36
		"flow" => reduce 36
		"constant" => reduce 36
		"parameter" => reduce 36
		"discrete" => reduce 36
		"output" => reduce 36
		"input" => reduce 36
		")" => reduce 36
		"," => reduce 36

416:	primary => "{" function-arguments "}" . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"=" => reduce 300
		":" => reduce 300
		"^" => reduce 300
		".^" => reduce 300
		"./" => reduce 300
		".*" => reduce 300
		"/" => reduce 300
		"*" => reduce 300
		"+" => reduce 300
		"-" => reduce 300
		".+" => reduce 300
		".-" => reduce 300
		"<>" => reduce 300
		"==" => reduce 300
		">=" => reduce 300
		">" => reduce 300
		"<=" => reduce 300
		"<" => reduce 300
		"and" => reduce 300
		"or" => reduce 300
		"]" => reduce 300
		"," => reduce 300
		"for" => reduce 300
		";" => reduce 300
		")" => reduce 300
		"then" => reduce 300
		"loop" => reduce 300
		"else" => reduce 300
		"elseif" => reduce 300
		'$string => reduce 300
		"annotation" => reduce 300
		"constrainedby" => reduce 300
		"}" => reduce 300
		"end" => reduce 300
		"elsewhen" => reduce 300
		"if" => reduce 300

417:	function-argument-1 => "for" . for-indices (")" "}")
	for-indices => . for-index
	for-indices => . for-indices "," for-index
	for-index => . ident "in" expression
	for-index => . ident
	ident => . '$ident
		'$ident => shift 26
		ident => shift 295
		for-index => shift 296
		for-indices => shift 520

418:	function-argument-1 => "," . function-arguments (")" "}")
	function-arguments => . function-argument function-argument-1
	function-arguments => . named-arguments
	named-arguments => . named-argument
	named-arguments => . named-arguments "," named-argument
	function-argument => . "function" name "(" named-arguments ")"
	function-argument => . "function" name "(" ")"
	function-argument => . expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	named-argument => . ident "=" function-argument
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	ident => . '$ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		'$ident => shift 26
		logical-expression => shift 214
		ident => shift 368
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 369
		"function" => shift 370
		named-argument => shift 371
		named-arguments => shift 372
		function-argument => shift 373
		function-arguments => shift 519

419:	function-arguments => function-argument function-argument-1 . (")" "}")
		"}" => reduce 318
		")" => reduce 318

420:	named-arguments => named-arguments "," . named-argument (")" "," "}")
	named-argument => . ident "=" function-argument
	ident => . '$ident
		'$ident => shift 26
		ident => shift 517
		named-argument => shift 518

421:	function-argument => "function" name . "(" named-arguments ")" (")" "}" "," "for")
	name => name . "." ident ("." "(")
	function-argument => "function" name . "(" ")" (")" "}" "," "for")
		"." => shift 59
		"(" => shift 516

422:	named-argument => ident "=" . function-argument (")" "," "}")
	function-argument => . "function" name "(" named-arguments ")"
	function-argument => . "function" name "(" ")"
	function-argument => . expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 369
		"function" => shift 370
		function-argument => shift 515

423:	primary => "[" expression-list-list "]" . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"=" => reduce 299
		":" => reduce 299
		"^" => reduce 299
		".^" => reduce 299
		"./" => reduce 299
		".*" => reduce 299
		"/" => reduce 299
		"*" => reduce 299
		"+" => reduce 299
		"-" => reduce 299
		".+" => reduce 299
		".-" => reduce 299
		"<>" => reduce 299
		"==" => reduce 299
		">=" => reduce 299
		">" => reduce 299
		"<=" => reduce 299
		"<" => reduce 299
		"and" => reduce 299
		"or" => reduce 299
		"]" => reduce 299
		"," => reduce 299
		"for" => reduce 299
		";" => reduce 299
		")" => reduce 299
		"then" => reduce 299
		"loop" => reduce 299
		"else" => reduce 299
		"elseif" => reduce 299
		'$string => reduce 299
		"annotation" => reduce 299
		"constrainedby" => reduce 299
		"}" => reduce 299
		"end" => reduce 299
		"elsewhen" => reduce 299
		"if" => reduce 299

424:	expression-list-list => expression-list-list ";" . expression-list (";" "]")
	expression-list => . expression
	expression-list => . expression-list "," expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 365
		expression-list => shift 514

425:	expression-list => expression-list "," . expression ("elsewhen" "end" ")" ";" "," "]")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 513

426:	primary => "(" output-expression-list ")" . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"=" => reduce 298
		":" => reduce 298
		"^" => reduce 298
		".^" => reduce 298
		"./" => reduce 298
		".*" => reduce 298
		"/" => reduce 298
		"*" => reduce 298
		"+" => reduce 298
		"-" => reduce 298
		".+" => reduce 298
		".-" => reduce 298
		"<>" => reduce 298
		"==" => reduce 298
		">=" => reduce 298
		">" => reduce 298
		"<=" => reduce 298
		"<" => reduce 298
		"and" => reduce 298
		"or" => reduce 298
		"]" => reduce 298
		"," => reduce 298
		"for" => reduce 298
		";" => reduce 298
		")" => reduce 298
		"then" => reduce 298
		"loop" => reduce 298
		"else" => reduce 298
		"elseif" => reduce 298
		'$string => reduce 298
		"annotation" => reduce 298
		"constrainedby" => reduce 298
		"}" => reduce 298
		"end" => reduce 298
		"elsewhen" => reduce 298
		"if" => reduce 298

427:	output-expression-list => output-expression-list "," . expression ("," ")")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 512

428:	factor => factor ".^" primary . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
		":" => reduce 289
		"=" => reduce 289
		"or" => reduce 289
		"and" => reduce 289
		"<" => reduce 289
		"<=" => reduce 289
		">" => reduce 289
		">=" => reduce 289
		"==" => reduce 289
		"<>" => reduce 289
		".-" => reduce 289
		".+" => reduce 289
		"-" => reduce 289
		"+" => reduce 289
		"*" => reduce 289
		"/" => reduce 289
		".*" => reduce 289
		"./" => reduce 289
		".^" => reduce 289
		"^" => reduce 289
		"]" => reduce 289
		"," => reduce 289
		"for" => reduce 289
		";" => reduce 289
		")" => reduce 289
		"then" => reduce 289
		"loop" => reduce 289
		"else" => reduce 289
		"elseif" => reduce 289
		'$string => reduce 289
		"annotation" => reduce 289
		"constrainedby" => reduce 289
		"}" => reduce 289
		"end" => reduce 289
		"elsewhen" => reduce 289
		"if" => reduce 289

429:	factor => factor "^" primary . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "^" ".^" "./" ".*" "/" "*" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
		":" => reduce 288
		"=" => reduce 288
		"or" => reduce 288
		"and" => reduce 288
		"<" => reduce 288
		"<=" => reduce 288
		">" => reduce 288
		">=" => reduce 288
		"==" => reduce 288
		"<>" => reduce 288
		".-" => reduce 288
		".+" => reduce 288
		"-" => reduce 288
		"+" => reduce 288
		"*" => reduce 288
		"/" => reduce 288
		".*" => reduce 288
		"./" => reduce 288
		".^" => reduce 288
		"^" => reduce 288
		"]" => reduce 288
		"," => reduce 288
		"for" => reduce 288
		";" => reduce 288
		")" => reduce 288
		"then" => reduce 288
		"loop" => reduce 288
		"else" => reduce 288
		"elseif" => reduce 288
		'$string => reduce 288
		"annotation" => reduce 288
		"constrainedby" => reduce 288
		"}" => reduce 288
		"end" => reduce 288
		"elsewhen" => reduce 288
		"if" => reduce 288

430:	factor => factor . ".^" primary ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ":" "=" "^" ".^")
	factor => factor . "^" primary ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ":" "=" "^" ".^")
	term => term mul-op factor . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ":" "=")
		"^" => shift 360
		".^" => shift 361
		"=" => reduce 282
		":" => reduce 282
		"./" => reduce 282
		".*" => reduce 282
		"/" => reduce 282
		"*" => reduce 282
		"+" => reduce 282
		"-" => reduce 282
		".+" => reduce 282
		".-" => reduce 282
		"<>" => reduce 282
		"==" => reduce 282
		">=" => reduce 282
		">" => reduce 282
		"<=" => reduce 282
		"<" => reduce 282
		"and" => reduce 282
		"or" => reduce 282
		"]" => reduce 282
		"," => reduce 282
		"for" => reduce 282
		";" => reduce 282
		")" => reduce 282
		"then" => reduce 282
		"loop" => reduce 282
		"else" => reduce 282
		"elseif" => reduce 282
		'$string => reduce 282
		"annotation" => reduce 282
		"constrainedby" => reduce 282
		"}" => reduce 282
		"end" => reduce 282
		"elsewhen" => reduce 282
		"if" => reduce 282

431:	term => term . mul-op factor ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":" "*" "/" ".*" "./")
	mul-op => . "*"
	mul-op => . "/"
	mul-op => . ".*"
	mul-op => . "./"
	arithmetic-expression => arithmetic-expression add-op term . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "+" "-" ".+" ".-" "<>" "==" ">=" ">" "<=" "<" "and" "or" "=" ":")
		"./" => shift 355
		".*" => shift 356
		"/" => shift 357
		"*" => shift 358
		mul-op => shift 359
		":" => reduce 276
		"=" => reduce 276
		"or" => reduce 276
		"and" => reduce 276
		"<" => reduce 276
		"<=" => reduce 276
		">" => reduce 276
		">=" => reduce 276
		"==" => reduce 276
		"<>" => reduce 276
		".-" => reduce 276
		".+" => reduce 276
		"-" => reduce 276
		"+" => reduce 276
		"]" => reduce 276
		"," => reduce 276
		"for" => reduce 276
		";" => reduce 276
		")" => reduce 276
		"then" => reduce 276
		"loop" => reduce 276
		"else" => reduce 276
		"elseif" => reduce 276
		'$string => reduce 276
		"annotation" => reduce 276
		"constrainedby" => reduce 276
		"}" => reduce 276
		"end" => reduce 276
		"elsewhen" => reduce 276
		"if" => reduce 276

432:	arithmetic-expression => arithmetic-expression . add-op term ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ":" "=" "+" "-" ".+" ".-")
	add-op => . "+"
	add-op => . "-"
	add-op => . ".+"
	add-op => . ".-"
	relation => relation rel-op arithmetic-expression . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ":" "=")
		".-" => shift 350
		".+" => shift 351
		"-" => shift 352
		"+" => shift 353
		add-op => shift 354
		"=" => reduce 268
		":" => reduce 268
		"<>" => reduce 268
		"==" => reduce 268
		">=" => reduce 268
		">" => reduce 268
		"<=" => reduce 268
		"<" => reduce 268
		"and" => reduce 268
		"or" => reduce 268
		"]" => reduce 268
		"," => reduce 268
		"for" => reduce 268
		";" => reduce 268
		")" => reduce 268
		"then" => reduce 268
		"loop" => reduce 268
		"else" => reduce 268
		"elseif" => reduce 268
		'$string => reduce 268
		"annotation" => reduce 268
		"constrainedby" => reduce 268
		"}" => reduce 268
		"end" => reduce 268
		"elsewhen" => reduce 268
		"if" => reduce 268

433:	logical-term => logical-term "and" logical-factor . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" ":" "=")
		"=" => reduce 264
		":" => reduce 264
		"and" => reduce 264
		"or" => reduce 264
		"]" => reduce 264
		"," => reduce 264
		"for" => reduce 264
		";" => reduce 264
		")" => reduce 264
		"then" => reduce 264
		"loop" => reduce 264
		"else" => reduce 264
		"elseif" => reduce 264
		'$string => reduce 264
		"annotation" => reduce 264
		"constrainedby" => reduce 264
		"}" => reduce 264
		"end" => reduce 264
		"elsewhen" => reduce 264
		"if" => reduce 264

434:	logical-term => logical-term . "and" logical-factor ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "=" ":" "and")
	logical-expression => logical-expression "or" logical-term . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "=" ":")
		"and" => shift 341
		":" => reduce 262
		"=" => reduce 262
		"or" => reduce 262
		"]" => reduce 262
		"," => reduce 262
		"for" => reduce 262
		";" => reduce 262
		")" => reduce 262
		"then" => reduce 262
		"loop" => reduce 262
		"else" => reduce 262
		"elseif" => reduce 262
		'$string => reduce 262
		"annotation" => reduce 262
		"constrainedby" => reduce 262
		"}" => reduce 262
		"end" => reduce 262
		"elsewhen" => reduce 262
		"if" => reduce 262

435:	simple-expression => logical-expression ":" logical-expression . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "=")
	logical-expression => logical-expression . "or" logical-term ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "=" "or" ":")
	simple-expression => logical-expression ":" logical-expression . ":" logical-expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "=")
		":" => shift 511
		"or" => shift 340
		"=" => reduce 260
		"]" => reduce 260
		"," => reduce 260
		"for" => reduce 260
		";" => reduce 260
		")" => reduce 260
		"then" => reduce 260
		"loop" => reduce 260
		"else" => reduce 260
		"elseif" => reduce 260
		'$string => reduce 260
		"annotation" => reduce 260
		"constrainedby" => reduce 260
		"}" => reduce 260
		"end" => reduce 260
		"elsewhen" => reduce 260
		"if" => reduce 260

436:	expression => "if" expression "then" . expression "else" expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	expression => "if" expression "then" . expression elseif-ex-list "else" expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 510

437:	array-subscript-list => array-subscript-list "," subscript . ("," "]")
		"]" => reduce 335
		"," => reduce 335

438:	import-clause-2 => "{" "}" . (";" "annotation" '$string)
		'$string => reduce 109
		"annotation" => reduce 109
		";" => reduce 109

439:	import-list => ident . ("," "}")
		"}" => reduce 111
		"," => reduce 111

440:	import-list => import-list . "," ident ("," "}")
	import-clause-2 => "{" import-list . "}" (";" "annotation" '$string)
		"}" => shift 508
		"," => shift 509

441:	constraining-clause => "constrainedby" name class-modification . ("," ")" ";" "annotation" '$string)
		'$string => reduce 117
		"annotation" => reduce 117
		";" => reduce 117
		")" => reduce 117
		"," => reduce 117

442:	element => "redeclare" $P1 $P2 $P3 element-1 . (";")
		";" => reduce 81

443:	external-part => "external" language-specification external-function-call annotation . ";" ("end" "annotation")
		";" => shift 507

444:	external-part => "external" language-specification external-function-call ";" . ("end" "annotation")
		"annotation" => reduce 65
		"end" => reduce 65

445:	external-part => "external" language-specification annotation ";" . ("end" "annotation")
		"annotation" => reduce 66
		"end" => reduce 66

446:	$P14 => array-subscripts . (")" "," "=" "(" ":=" ".")
		"." => reduce 315
		":=" => reduce 315
		"(" => reduce 315
		"=" => reduce 315
		"," => reduce 315
		")" => reduce 315

447:	component-reference-1 => "." ident $P14 . (")" "," "=" "(" ":=" ".")
		"." => reduce 311
		":=" => reduce 311
		"(" => reduce 311
		"=" => reduce 311
		"," => reduce 311
		")" => reduce 311

448:	component-reference => component-reference-1 "." ident . $P12 (")" "," "=" ":=" "(")
	$P12 => .
	$P12 => . array-subscripts
	array-subscripts => . "[" array-subscript-list "]"
		"[" => shift 134
		array-subscripts => shift 505
		$P12 => shift 506
		")" => reduce 308
		"," => reduce 308
		"=" => reduce 308
		":=" => reduce 308
		"(" => reduce 308

449:	external-function-call => ident "(" ")" . ("annotation" ";")
		";" => reduce 76
		"annotation" => reduce 76

450:	expression-list => expression-list . "," expression ("," ")")
	external-function-call => ident "(" expression-list . ")" ("annotation" ";")
		")" => shift 504
		"," => shift 425

451:	external-function-call => component-reference "=" ident . "(" ")" ("annotation" ";")
	external-function-call => component-reference "=" ident . "(" expression-list ")" ("annotation" ";")
		"(" => shift 503

452:	external-part => "external" external-function-call annotation ";" . ("end" "annotation")
		"annotation" => reduce 67
		"end" => reduce 67

453:	connect-clause => "connect" "(" component-reference . "," component-reference ")" (";" '$string "annotation")
		"," => shift 502

454:	then-eq-part => "then" . ("elsewhen" "end" "else" "elseif")
	then-eq-part => "then" . equation-list ("elsewhen" "end" "else" "elseif")
	equation-list => . equation ";"
	equation-list => . equation-list equation ";"
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 266
		equation-list => shift 501
		"elseif" => reduce 213
		"else" => reduce 213
		"end" => reduce 213
		"elsewhen" => reduce 213

455:	when-equation => "when" expression then-eq-part . elsewhen-eq-list "end" "when" (";" '$string "annotation")
	elsewhen-eq-list => . elsewhen-eq-part
	elsewhen-eq-list => . elsewhen-eq-list elsewhen-eq-part
	elsewhen-eq-part => . "elsewhen" expression "then"
	elsewhen-eq-part => . "elsewhen" expression "then" expression-list
		"elsewhen" => shift 498
		elsewhen-eq-part => shift 499
		elsewhen-eq-list => shift 500

456:	for-indices => for-indices "," . for-index (")" "}" "," "loop")
	for-index => . ident "in" expression
	for-index => . ident
	ident => . '$ident
		'$ident => shift 26
		ident => shift 295
		for-index => shift 497

457:	for-equation => "for" for-indices "loop" . "end" "for" (";" '$string "annotation")
	for-equation => "for" for-indices "loop" . equation-list "end" "for" (";" '$string "annotation")
	equation-list => . equation ";"
	equation-list => . equation-list equation ";"
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 266
		equation-list => shift 495
		"end" => shift 496

458:	if-equation => "if" expression then-eq-part . "end" "if" (";" '$string "annotation")
	if-equation => "if" expression then-eq-part . else-eq-part "end" "if" (";" '$string "annotation")
	else-eq-part => . "else" equation-list
	else-eq-part => . "else"
	if-equation => "if" expression then-eq-part . elseif-eq-list "end" "if" (";" '$string "annotation")
	elseif-eq-list => . elseif-eq-part
	elseif-eq-list => . elseif-eq-list elseif-eq-part
	elseif-eq-part => . "elseif" equation-list
	elseif-eq-part => . "elseif"
	if-equation => "if" expression then-eq-part . elseif-eq-list else-eq-part "end" "if" (";" '$string "annotation")
	elseif-eq-list => . elseif-eq-part
	elseif-eq-list => . elseif-eq-list elseif-eq-part
	elseif-eq-part => . "elseif" equation-list
	elseif-eq-part => . "elseif"
		"elseif" => shift 489
		elseif-eq-part => shift 490
		elseif-eq-list => shift 491
		"else" => shift 492
		else-eq-part => shift 493
		"end" => shift 494

459:	equation-1 => simple-expression "=" expression . ("annotation" '$string ";")
		";" => reduce 190
		'$string => reduce 190
		"annotation" => reduce 190

460:	equation-list => equation-list equation ";" . ("elsewhen" "else" "elseif" "end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "." '$ident "when" "connect" "for" "if" "not" "false" "true" "der" "(" "[" "{" '$string '$fx '$fl)
		'$fl => reduce 188
		'$fx => reduce 188
		'$string => reduce 188
		"{" => reduce 188
		"[" => reduce 188
		"(" => reduce 188
		"der" => reduce 188
		"true" => reduce 188
		"false" => reduce 188
		"not" => reduce 188
		"if" => reduce 188
		"for" => reduce 188
		"connect" => reduce 188
		"when" => reduce 188
		'$ident => reduce 188
		"." => reduce 188
		"annotation" => reduce 188
		"equation" => reduce 188
		"algorithm" => reduce 188
		"initial" => reduce 188
		"protected" => reduce 188
		"public" => reduce 188
		"external" => reduce 188
		"end" => reduce 188
		"elseif" => reduce 188
		"else" => reduce 188
		"elsewhen" => reduce 188

461:	then-st-part => "then" . ("elsewhen" "end" "else" "elseif")
	then-st-part => "then" . statement-list ("elsewhen" "end" "else" "elseif")
	statement-list => . statement ";"
	statement-list => . statement-list statement ";"
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 282
		statement-list => shift 488
		"elseif" => reduce 225
		"else" => reduce 225
		"end" => reduce 225
		"elsewhen" => reduce 225

462:	when-statement => "when" expression then-st-part . elsewhen-st-list "end" "when" (";" '$string "annotation")
	elsewhen-st-list => . elsewhen-st-part
	elsewhen-st-list => . elsewhen-st-list elsewhen-st-part
	elsewhen-st-part => . "elsewhen" expression "then"
	elsewhen-st-part => . "elsewhen" expression "then" statement-list
		"elsewhen" => shift 485
		elsewhen-st-part => shift 486
		elsewhen-st-list => shift 487

463:	while-statement => "while" expression "loop" . "end" "while" (";" '$string "annotation")
	while-statement => "while" expression "loop" . statement-list "end" "while" (";" '$string "annotation")
	statement-list => . statement ";"
	statement-list => . statement-list statement ";"
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 282
		statement-list => shift 483
		"end" => shift 484

464:	for-statement => "for" for-indices "loop" . "end" "for" (";" '$string "annotation")
	for-statement => "for" for-indices "loop" . statement-list "end" "for" (";" '$string "annotation")
	statement-list => . statement ";"
	statement-list => . statement-list statement ";"
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 282
		statement-list => shift 481
		"end" => shift 482

465:	for-index => ident "in" . expression (")" "}" "," "loop")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 480

466:	if-statement => "if" expression then-st-part . "end" "if" (";" '$string "annotation")
	if-statement => "if" expression then-st-part . else-st-part "end" "if" (";" '$string "annotation")
	else-st-part => . "else" statement-list
	else-st-part => . "else"
	if-statement => "if" expression then-st-part . elseif-st-list "end" "if" (";" '$string "annotation")
	elseif-st-list => . elseif-st-part
	elseif-st-list => . elseif-st-list elseif-st-part
	elseif-st-part => . "elseif" statement-list
	elseif-st-part => . "elseif"
	if-statement => "if" expression then-st-part . elseif-st-list else-st-part "end" "if" (";" '$string "annotation")
	elseif-st-list => . elseif-st-part
	elseif-st-list => . elseif-st-list elseif-st-part
	elseif-st-part => . "elseif" statement-list
	elseif-st-part => . "elseif"
		"elseif" => shift 474
		elseif-st-part => shift 475
		elseif-st-list => shift 476
		"else" => shift 477
		else-st-part => shift 478
		"end" => shift 479

467:	statement-1 => "(" output-expression-list ")" . ":=" component-reference function-call-args ("annotation" '$string ";")
		":=" => shift 473

468:	function-call-args => "(" function-arguments . ")" ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		")" => shift 472

469:	function-call-args => "(" ")" . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"=" => reduce 317
		":" => reduce 317
		"^" => reduce 317
		".^" => reduce 317
		"./" => reduce 317
		".*" => reduce 317
		"/" => reduce 317
		"*" => reduce 317
		"+" => reduce 317
		"-" => reduce 317
		".+" => reduce 317
		".-" => reduce 317
		"<>" => reduce 317
		"==" => reduce 317
		">=" => reduce 317
		">" => reduce 317
		"<=" => reduce 317
		"<" => reduce 317
		"and" => reduce 317
		"or" => reduce 317
		"]" => reduce 317
		"," => reduce 317
		"for" => reduce 317
		";" => reduce 317
		")" => reduce 317
		"then" => reduce 317
		"loop" => reduce 317
		"else" => reduce 317
		"elseif" => reduce 317
		'$string => reduce 317
		"annotation" => reduce 317
		"constrainedby" => reduce 317
		"}" => reduce 317
		"end" => reduce 317
		"elsewhen" => reduce 317
		"if" => reduce 317

470:	statement-1 => component-reference ":=" expression . ("annotation" '$string ";")
		";" => reduce 199
		'$string => reduce 199
		"annotation" => reduce 199

471:	statement-list => statement-list statement ";" . ("elsewhen" "else" "elseif" "end" "external" "public" "protected" "initial" "algorithm" "equation" "annotation" "(" "break" "return" "when" "while" "for" "if" "." '$ident)
		'$ident => reduce 197
		"." => reduce 197
		"if" => reduce 197
		"for" => reduce 197
		"while" => reduce 197
		"when" => reduce 197
		"return" => reduce 197
		"break" => reduce 197
		"(" => reduce 197
		"annotation" => reduce 197
		"equation" => reduce 197
		"algorithm" => reduce 197
		"initial" => reduce 197
		"protected" => reduce 197
		"public" => reduce 197
		"external" => reduce 197
		"end" => reduce 197
		"elseif" => reduce 197
		"else" => reduce 197
		"elsewhen" => reduce 197

472:	function-call-args => "(" function-arguments ")" . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "or" "and" "<" "<=" ">" ">=" "==" "<>" ".-" ".+" "-" "+" "*" "/" ".*" "./" ".^" "^" ":" "=")
		"=" => reduce 316
		":" => reduce 316
		"^" => reduce 316
		".^" => reduce 316
		"./" => reduce 316
		".*" => reduce 316
		"/" => reduce 316
		"*" => reduce 316
		"+" => reduce 316
		"-" => reduce 316
		".+" => reduce 316
		".-" => reduce 316
		"<>" => reduce 316
		"==" => reduce 316
		">=" => reduce 316
		">" => reduce 316
		"<=" => reduce 316
		"<" => reduce 316
		"and" => reduce 316
		"or" => reduce 316
		"]" => reduce 316
		"," => reduce 316
		"for" => reduce 316
		";" => reduce 316
		")" => reduce 316
		"then" => reduce 316
		"loop" => reduce 316
		"else" => reduce 316
		"elseif" => reduce 316
		'$string => reduce 316
		"annotation" => reduce 316
		"constrainedby" => reduce 316
		"}" => reduce 316
		"end" => reduce 316
		"elsewhen" => reduce 316
		"if" => reduce 316

473:	statement-1 => "(" output-expression-list ")" ":=" . component-reference function-call-args ("annotation" '$string ";")
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		component-reference => shift 563

474:	elseif-st-part => "elseif" . ("else" "elseif" "end")
	elseif-st-part => "elseif" . statement-list ("else" "elseif" "end")
	statement-list => . statement ";"
	statement-list => . statement-list statement ";"
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 282
		statement-list => shift 562
		"end" => reduce 229
		"elseif" => reduce 229
		"else" => reduce 229

475:	elseif-st-list => elseif-st-part . ("else" "elseif" "end")
		"end" => reduce 226
		"elseif" => reduce 226
		"else" => reduce 226

476:	if-statement => "if" expression then-st-part elseif-st-list . else-st-part "end" "if" (";" '$string "annotation")
	else-st-part => . "else" statement-list
	else-st-part => . "else"
	elseif-st-list => elseif-st-list . elseif-st-part ("else" "elseif" "end")
	elseif-st-part => . "elseif" statement-list
	elseif-st-part => . "elseif"
	if-statement => "if" expression then-st-part elseif-st-list . "end" "if" (";" '$string "annotation")
		"end" => shift 559
		"elseif" => shift 474
		elseif-st-part => shift 560
		"else" => shift 477
		else-st-part => shift 561

477:	else-st-part => "else" . ("end")
	else-st-part => "else" . statement-list ("end")
	statement-list => . statement ";"
	statement-list => . statement-list statement ";"
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 282
		statement-list => shift 558
		"end" => reduce 231

478:	if-statement => "if" expression then-st-part else-st-part . "end" "if" (";" '$string "annotation")
		"end" => shift 557

479:	if-statement => "if" expression then-st-part "end" . "if" (";" '$string "annotation")
		"if" => shift 556

480:	for-index => ident "in" expression . (")" "}" "," "loop")
		"loop" => reduce 238
		"," => reduce 238
		"}" => reduce 238
		")" => reduce 238

481:	statement-list => statement-list . statement ";" ("(" "break" "return" "when" "while" "for" "if" "." '$ident "end")
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
	for-statement => "for" for-indices "loop" statement-list . "end" "for" (";" '$string "annotation")
		"end" => shift 555
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 285

482:	for-statement => "for" for-indices "loop" "end" . "for" (";" '$string "annotation")
		"for" => shift 554

483:	statement-list => statement-list . statement ";" ("(" "break" "return" "when" "while" "for" "if" "." '$ident "end")
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
	while-statement => "while" expression "loop" statement-list . "end" "while" (";" '$string "annotation")
		"end" => shift 553
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 285

484:	while-statement => "while" expression "loop" "end" . "while" (";" '$string "annotation")
		"while" => shift 552

485:	elsewhen-st-part => "elsewhen" . expression "then" statement-list ("elsewhen" "end")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	elsewhen-st-part => "elsewhen" . expression "then" ("elsewhen" "end")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 551

486:	elsewhen-st-list => elsewhen-st-part . ("elsewhen" "end")
		"end" => reduce 248
		"elsewhen" => reduce 248

487:	elsewhen-st-list => elsewhen-st-list . elsewhen-st-part ("elsewhen" "end")
	elsewhen-st-part => . "elsewhen" expression "then"
	elsewhen-st-part => . "elsewhen" expression "then" statement-list
	when-statement => "when" expression then-st-part elsewhen-st-list . "end" "when" (";" '$string "annotation")
		"end" => shift 549
		"elsewhen" => shift 485
		elsewhen-st-part => shift 550

488:	statement-list => statement-list . statement ";" ("elsewhen" "end" "else" "elseif" "(" "break" "return" "when" "while" "for" "if" "." '$ident)
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
	then-st-part => "then" statement-list . ("elsewhen" "end" "else" "elseif")
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 285
		"elseif" => reduce 224
		"else" => reduce 224
		"end" => reduce 224
		"elsewhen" => reduce 224

489:	elseif-eq-part => "elseif" . ("else" "elseif" "end")
	elseif-eq-part => "elseif" . equation-list ("else" "elseif" "end")
	equation-list => . equation ";"
	equation-list => . equation-list equation ";"
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 266
		equation-list => shift 548
		"end" => reduce 217
		"elseif" => reduce 217
		"else" => reduce 217

490:	elseif-eq-list => elseif-eq-part . ("else" "elseif" "end")
		"end" => reduce 214
		"elseif" => reduce 214
		"else" => reduce 214

491:	if-equation => "if" expression then-eq-part elseif-eq-list . else-eq-part "end" "if" (";" '$string "annotation")
	else-eq-part => . "else" equation-list
	else-eq-part => . "else"
	elseif-eq-list => elseif-eq-list . elseif-eq-part ("else" "elseif" "end")
	elseif-eq-part => . "elseif" equation-list
	elseif-eq-part => . "elseif"
	if-equation => "if" expression then-eq-part elseif-eq-list . "end" "if" (";" '$string "annotation")
		"end" => shift 545
		"elseif" => shift 489
		elseif-eq-part => shift 546
		"else" => shift 492
		else-eq-part => shift 547

492:	else-eq-part => "else" . ("end")
	else-eq-part => "else" . equation-list ("end")
	equation-list => . equation ";"
	equation-list => . equation-list equation ";"
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 266
		equation-list => shift 544
		"end" => reduce 219

493:	if-equation => "if" expression then-eq-part else-eq-part . "end" "if" (";" '$string "annotation")
		"end" => shift 543

494:	if-equation => "if" expression then-eq-part "end" . "if" (";" '$string "annotation")
		"if" => shift 542

495:	equation-list => equation-list . equation ";" ("." '$ident "when" "connect" "for" "if" "not" "false" "true" "der" "(" "[" "{" '$string '$fx '$fl "end")
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	for-equation => "for" for-indices "loop" equation-list . "end" "for" (";" '$string "annotation")
		"end" => shift 541
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 302

496:	for-equation => "for" for-indices "loop" "end" . "for" (";" '$string "annotation")
		"for" => shift 540

497:	for-indices => for-indices "," for-index . (")" "}" "," "loop")
		"loop" => reduce 237
		"," => reduce 237
		"}" => reduce 237
		")" => reduce 237

498:	elsewhen-eq-part => "elsewhen" . expression "then" expression-list ("elsewhen" "end")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	elsewhen-eq-part => "elsewhen" . expression "then" ("elsewhen" "end")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 539

499:	elsewhen-eq-list => elsewhen-eq-part . ("elsewhen" "end")
		"end" => reduce 243
		"elsewhen" => reduce 243

500:	elsewhen-eq-list => elsewhen-eq-list . elsewhen-eq-part ("elsewhen" "end")
	elsewhen-eq-part => . "elsewhen" expression "then"
	elsewhen-eq-part => . "elsewhen" expression "then" expression-list
	when-equation => "when" expression then-eq-part elsewhen-eq-list . "end" "when" (";" '$string "annotation")
		"end" => shift 537
		"elsewhen" => shift 498
		elsewhen-eq-part => shift 538

501:	equation-list => equation-list . equation ";" ("elsewhen" "end" "else" "elseif" "." '$ident "when" "connect" "for" "if" "not" "false" "true" "der" "(" "[" "{" '$string '$fx '$fl)
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	then-eq-part => "then" equation-list . ("elsewhen" "end" "else" "elseif")
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 302
		"elseif" => reduce 212
		"else" => reduce 212
		"end" => reduce 212
		"elsewhen" => reduce 212

502:	connect-clause => "connect" "(" component-reference "," . component-reference ")" (";" '$string "annotation")
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		component-reference => shift 536

503:	external-function-call => component-reference "=" ident "(" . expression-list ")" ("annotation" ";")
	expression-list => . expression
	expression-list => . expression-list "," expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	external-function-call => component-reference "=" ident "(" . ")" ("annotation" ";")
		")" => shift 534
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 365
		expression-list => shift 535

504:	external-function-call => ident "(" expression-list ")" . ("annotation" ";")
		";" => reduce 75
		"annotation" => reduce 75

505:	$P12 => array-subscripts . (")" "," "=" ":=" "(")
		"(" => reduce 309
		":=" => reduce 309
		"=" => reduce 309
		"," => reduce 309
		")" => reduce 309

506:	component-reference => component-reference-1 "." ident $P12 . (")" "," "=" ":=" "(")
		"(" => reduce 307
		":=" => reduce 307
		"=" => reduce 307
		"," => reduce 307
		")" => reduce 307

507:	external-part => "external" language-specification external-function-call annotation ";" . ("end" "annotation")
		"annotation" => reduce 64
		"end" => reduce 64

508:	import-clause-2 => "{" import-list "}" . (";" "annotation" '$string)
		'$string => reduce 110
		"annotation" => reduce 110
		";" => reduce 110

509:	import-list => import-list "," . ident ("," "}")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 533

510:	expression => "if" expression "then" expression . elseif-ex-list "else" expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
	elseif-ex-list => . "elseif" expression "then" expression
	elseif-ex-list => . elseif-ex-list "elseif" expression "then" expression
	expression => "if" expression "then" expression . "else" expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
		"else" => shift 530
		"elseif" => shift 531
		elseif-ex-list => shift 532

511:	simple-expression => logical-expression ":" logical-expression ":" . logical-expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "=")
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 529

512:	output-expression-list => output-expression-list "," expression . ("," ")")
		")" => reduce 330
		"," => reduce 330

513:	expression-list => expression-list "," expression . ("elsewhen" "end" ")" ";" "," "]")
		"]" => reduce 332
		"," => reduce 332
		";" => reduce 332
		")" => reduce 332
		"end" => reduce 332
		"elsewhen" => reduce 332

514:	expression-list => expression-list . "," expression (";" "]" ",")
	expression-list-list => expression-list-list ";" expression-list . (";" "]")
		"," => shift 425
		"]" => reduce 302
		";" => reduce 302

515:	named-argument => ident "=" function-argument . (")" "," "}")
		"}" => reduce 324
		"," => reduce 324
		")" => reduce 324

516:	function-argument => "function" name "(" . ")" (")" "}" "," "for")
	function-argument => "function" name "(" . named-arguments ")" (")" "}" "," "for")
	named-arguments => . named-argument
	named-arguments => . named-arguments "," named-argument
	named-argument => . ident "=" function-argument
	ident => . '$ident
		'$ident => shift 26
		ident => shift 517
		named-argument => shift 371
		named-arguments => shift 527
		")" => shift 528

517:	named-argument => ident . "=" function-argument ("}" "," ")")
		"=" => shift 422

518:	named-arguments => named-arguments "," named-argument . (")" "," "}")
		"}" => reduce 323
		"," => reduce 323
		")" => reduce 323

519:	function-argument-1 => "," function-arguments . (")" "}")
		"}" => reduce 320
		")" => reduce 320

520:	for-indices => for-indices . "," for-index (")" "}" ",")
	function-argument-1 => "for" for-indices . (")" "}")
		"," => shift 456
		"}" => reduce 321
		")" => reduce 321

521:	der-class-specifier => ident "=" "der" "(" name "," der-class-specifier-1 ")" . comment ("constrainedby" ";")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 526
		";" => reduce 340
		"constrainedby" => reduce 340
		"annotation" => reduce 340

522:	der-class-specifier-1 => der-class-specifier-1 ";" . ident (";" ")")
	ident => . '$ident
		'$ident => shift 26
		ident => shift 525

523:	component-clause1 => type-prefix type-specifier declaration . comment ("," ")" "constrainedby")
	comment => . string-comment annotation
	comment => . string-comment
	string-comment => .
	string-comment => . string-cat
	string-cat => . string
	string-cat => . string-cat "+" string
	string => . '$string
		'$string => shift 50
		string => shift 51
		string-cat => shift 52
		string-comment => shift 184
		comment => shift 524
		"constrainedby" => reduce 340
		")" => reduce 340
		"," => reduce 340
		"annotation" => reduce 340

524:	component-clause1 => type-prefix type-specifier declaration comment . ("," ")" "constrainedby")
		"constrainedby" => reduce 177
		")" => reduce 177
		"," => reduce 177

525:	der-class-specifier-1 => der-class-specifier-1 ";" ident . (";" ")")
		")" => reduce 46
		";" => reduce 46

526:	der-class-specifier => ident "=" "der" "(" name "," der-class-specifier-1 ")" comment . ("constrainedby" ";")
		";" => reduce 44
		"constrainedby" => reduce 44

527:	named-arguments => named-arguments . "," named-argument ("," ")")
	function-argument => "function" name "(" named-arguments . ")" (")" "}" "," "for")
		")" => shift 584
		"," => shift 420

528:	function-argument => "function" name "(" ")" . (")" "}" "," "for")
		"for" => reduce 326
		"," => reduce 326
		"}" => reduce 326
		")" => reduce 326

529:	logical-expression => logical-expression . "or" logical-term ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "=" "or")
	simple-expression => logical-expression ":" logical-expression ":" logical-expression . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]" "=")
		"or" => shift 340
		"=" => reduce 259
		"]" => reduce 259
		"," => reduce 259
		"for" => reduce 259
		";" => reduce 259
		")" => reduce 259
		"then" => reduce 259
		"loop" => reduce 259
		"else" => reduce 259
		"elseif" => reduce 259
		'$string => reduce 259
		"annotation" => reduce 259
		"constrainedby" => reduce 259
		"}" => reduce 259
		"end" => reduce 259
		"elsewhen" => reduce 259
		"if" => reduce 259

530:	expression => "if" expression "then" expression "else" . expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 583

531:	elseif-ex-list => "elseif" . expression "then" expression ("elseif" "else")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 582

532:	elseif-ex-list => elseif-ex-list . "elseif" expression "then" expression ("elseif" "else")
	expression => "if" expression "then" expression elseif-ex-list . "else" expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
		"else" => shift 580
		"elseif" => shift 581

533:	import-list => import-list "," ident . ("," "}")
		"}" => reduce 112
		"," => reduce 112

534:	external-function-call => component-reference "=" ident "(" ")" . ("annotation" ";")
		";" => reduce 74
		"annotation" => reduce 74

535:	expression-list => expression-list . "," expression ("," ")")
	external-function-call => component-reference "=" ident "(" expression-list . ")" ("annotation" ";")
		")" => shift 579
		"," => shift 425

536:	connect-clause => "connect" "(" component-reference "," component-reference . ")" (";" '$string "annotation")
		")" => shift 578

537:	when-equation => "when" expression then-eq-part elsewhen-eq-list "end" . "when" (";" '$string "annotation")
		"when" => shift 577

538:	elsewhen-eq-list => elsewhen-eq-list elsewhen-eq-part . ("elsewhen" "end")
		"end" => reduce 244
		"elsewhen" => reduce 244

539:	elsewhen-eq-part => "elsewhen" expression . "then" ("elsewhen" "end")
	elsewhen-eq-part => "elsewhen" expression . "then" expression-list ("elsewhen" "end")
		"then" => shift 576

540:	for-equation => "for" for-indices "loop" "end" "for" . (";" '$string "annotation")
		"annotation" => reduce 233
		'$string => reduce 233
		";" => reduce 233

541:	for-equation => "for" for-indices "loop" equation-list "end" . "for" (";" '$string "annotation")
		"for" => shift 575

542:	if-equation => "if" expression then-eq-part "end" "if" . (";" '$string "annotation")
		"annotation" => reduce 211
		'$string => reduce 211
		";" => reduce 211

543:	if-equation => "if" expression then-eq-part else-eq-part "end" . "if" (";" '$string "annotation")
		"if" => shift 574

544:	equation-list => equation-list . equation ";" ("end" "." '$ident "when" "connect" "for" "if" "not" "false" "true" "der" "(" "[" "{" '$string '$fx '$fl)
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	else-eq-part => "else" equation-list . ("end")
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 302
		"end" => reduce 218

545:	if-equation => "if" expression then-eq-part elseif-eq-list "end" . "if" (";" '$string "annotation")
		"if" => shift 573

546:	elseif-eq-list => elseif-eq-list elseif-eq-part . ("else" "elseif" "end")
		"end" => reduce 215
		"elseif" => reduce 215
		"else" => reduce 215

547:	if-equation => "if" expression then-eq-part elseif-eq-list else-eq-part . "end" "if" (";" '$string "annotation")
		"end" => shift 572

548:	equation-list => equation-list . equation ";" ("else" "elseif" "end" "." '$ident "when" "connect" "for" "if" "not" "false" "true" "der" "(" "[" "{" '$string '$fx '$fl)
	equation => . equation-1 comment
	equation-1 => . simple-expression "=" expression
	equation-1 => . if-equation
	equation-1 => . for-equation
	equation-1 => . connect-clause
	equation-1 => . when-equation
	equation-1 => . name function-call-args
	if-equation => . "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part elseif-eq-list "end" "if"
	if-equation => . "if" expression then-eq-part else-eq-part "end" "if"
	if-equation => . "if" expression then-eq-part "end" "if"
	for-equation => . "for" for-indices "loop" equation-list "end" "for"
	for-equation => . "for" for-indices "loop" "end" "for"
	when-equation => . "when" expression then-eq-part elsewhen-eq-list "end" "when"
	connect-clause => . "connect" "(" component-reference "," component-reference ")"
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	name => . ident
	name => . "." ident
	name => . name "." ident
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	ident => . '$ident
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	elseif-eq-part => "elseif" equation-list . ("else" "elseif" "end")
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		'$ident => shift 26
		logical-term => shift 213
		"." => shift 27
		ident => shift 28
		logical-expression => shift 214
		"connect" => shift 255
		"when" => shift 256
		"for" => shift 257
		"if" => shift 258
		name => shift 259
		when-equation => shift 260
		connect-clause => shift 261
		for-equation => shift 262
		if-equation => shift 263
		simple-expression => shift 264
		equation-1 => shift 265
		equation => shift 302
		"end" => reduce 216
		"elseif" => reduce 216
		"else" => reduce 216

549:	when-statement => "when" expression then-st-part elsewhen-st-list "end" . "when" (";" '$string "annotation")
		"when" => shift 571

550:	elsewhen-st-list => elsewhen-st-list elsewhen-st-part . ("elsewhen" "end")
		"end" => reduce 249
		"elsewhen" => reduce 249

551:	elsewhen-st-part => "elsewhen" expression . "then" ("elsewhen" "end")
	elsewhen-st-part => "elsewhen" expression . "then" statement-list ("elsewhen" "end")
		"then" => shift 570

552:	while-statement => "while" expression "loop" "end" "while" . (";" '$string "annotation")
		"annotation" => reduce 241
		'$string => reduce 241
		";" => reduce 241

553:	while-statement => "while" expression "loop" statement-list "end" . "while" (";" '$string "annotation")
		"while" => shift 569

554:	for-statement => "for" for-indices "loop" "end" "for" . (";" '$string "annotation")
		"annotation" => reduce 235
		'$string => reduce 235
		";" => reduce 235

555:	for-statement => "for" for-indices "loop" statement-list "end" . "for" (";" '$string "annotation")
		"for" => shift 568

556:	if-statement => "if" expression then-st-part "end" "if" . (";" '$string "annotation")
		"annotation" => reduce 223
		'$string => reduce 223
		";" => reduce 223

557:	if-statement => "if" expression then-st-part else-st-part "end" . "if" (";" '$string "annotation")
		"if" => shift 567

558:	statement-list => statement-list . statement ";" ("end" "(" "break" "return" "when" "while" "for" "if" "." '$ident)
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
	else-st-part => "else" statement-list . ("end")
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 285
		"end" => reduce 230

559:	if-statement => "if" expression then-st-part elseif-st-list "end" . "if" (";" '$string "annotation")
		"if" => shift 566

560:	elseif-st-list => elseif-st-list elseif-st-part . ("else" "elseif" "end")
		"end" => reduce 227
		"elseif" => reduce 227
		"else" => reduce 227

561:	if-statement => "if" expression then-st-part elseif-st-list else-st-part . "end" "if" (";" '$string "annotation")
		"end" => shift 565

562:	statement-list => statement-list . statement ";" ("else" "elseif" "end" "(" "break" "return" "when" "while" "for" "if" "." '$ident)
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
	elseif-st-part => "elseif" statement-list . ("else" "elseif" "end")
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 285
		"end" => reduce 228
		"elseif" => reduce 228
		"else" => reduce 228

563:	statement-1 => "(" output-expression-list ")" ":=" component-reference . function-call-args ("annotation" '$string ";")
	function-call-args => . "(" function-arguments ")"
	function-call-args => . "(" ")"
		"(" => shift 289
		function-call-args => shift 564

564:	statement-1 => "(" output-expression-list ")" ":=" component-reference function-call-args . ("annotation" '$string ";")
		";" => reduce 201
		'$string => reduce 201
		"annotation" => reduce 201

565:	if-statement => "if" expression then-st-part elseif-st-list else-st-part "end" . "if" (";" '$string "annotation")
		"if" => shift 591

566:	if-statement => "if" expression then-st-part elseif-st-list "end" "if" . (";" '$string "annotation")
		"annotation" => reduce 221
		'$string => reduce 221
		";" => reduce 221

567:	if-statement => "if" expression then-st-part else-st-part "end" "if" . (";" '$string "annotation")
		"annotation" => reduce 222
		'$string => reduce 222
		";" => reduce 222

568:	for-statement => "for" for-indices "loop" statement-list "end" "for" . (";" '$string "annotation")
		"annotation" => reduce 234
		'$string => reduce 234
		";" => reduce 234

569:	while-statement => "while" expression "loop" statement-list "end" "while" . (";" '$string "annotation")
		"annotation" => reduce 240
		'$string => reduce 240
		";" => reduce 240

570:	elsewhen-st-part => "elsewhen" expression "then" . statement-list ("elsewhen" "end")
	statement-list => . statement ";"
	statement-list => . statement-list statement ";"
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
	elsewhen-st-part => "elsewhen" expression "then" . ("elsewhen" "end")
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 282
		statement-list => shift 590
		"end" => reduce 250
		"elsewhen" => reduce 250

571:	when-statement => "when" expression then-st-part elsewhen-st-list "end" "when" . (";" '$string "annotation")
		"annotation" => reduce 247
		'$string => reduce 247
		";" => reduce 247

572:	if-equation => "if" expression then-eq-part elseif-eq-list else-eq-part "end" . "if" (";" '$string "annotation")
		"if" => shift 589

573:	if-equation => "if" expression then-eq-part elseif-eq-list "end" "if" . (";" '$string "annotation")
		"annotation" => reduce 209
		'$string => reduce 209
		";" => reduce 209

574:	if-equation => "if" expression then-eq-part else-eq-part "end" "if" . (";" '$string "annotation")
		"annotation" => reduce 210
		'$string => reduce 210
		";" => reduce 210

575:	for-equation => "for" for-indices "loop" equation-list "end" "for" . (";" '$string "annotation")
		"annotation" => reduce 232
		'$string => reduce 232
		";" => reduce 232

576:	elsewhen-eq-part => "elsewhen" expression "then" . expression-list ("elsewhen" "end")
	expression-list => . expression
	expression-list => . expression-list "," expression
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
	elsewhen-eq-part => "elsewhen" expression "then" . ("elsewhen" "end")
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 365
		expression-list => shift 588
		"end" => reduce 245
		"elsewhen" => reduce 245

577:	when-equation => "when" expression then-eq-part elsewhen-eq-list "end" "when" . (";" '$string "annotation")
		"annotation" => reduce 242
		'$string => reduce 242
		";" => reduce 242

578:	connect-clause => "connect" "(" component-reference "," component-reference ")" . (";" '$string "annotation")
		"annotation" => reduce 252
		'$string => reduce 252
		";" => reduce 252

579:	external-function-call => component-reference "=" ident "(" expression-list ")" . ("annotation" ";")
		";" => reduce 73
		"annotation" => reduce 73

580:	expression => "if" expression "then" expression elseif-ex-list "else" . expression ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 587

581:	elseif-ex-list => elseif-ex-list "elseif" . expression "then" expression ("elseif" "else")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 586

582:	elseif-ex-list => "elseif" expression . "then" expression ("elseif" "else")
		"then" => shift 585

583:	expression => "if" expression "then" expression "else" expression . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
		"]" => reduce 255
		"," => reduce 255
		"for" => reduce 255
		";" => reduce 255
		")" => reduce 255
		"then" => reduce 255
		"loop" => reduce 255
		"else" => reduce 255
		"elseif" => reduce 255
		'$string => reduce 255
		"annotation" => reduce 255
		"constrainedby" => reduce 255
		"}" => reduce 255
		"end" => reduce 255
		"elsewhen" => reduce 255
		"if" => reduce 255

584:	function-argument => "function" name "(" named-arguments ")" . (")" "}" "," "for")
		"for" => reduce 325
		"," => reduce 325
		"}" => reduce 325
		")" => reduce 325

585:	elseif-ex-list => "elseif" expression "then" . expression ("elseif" "else")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 593

586:	elseif-ex-list => elseif-ex-list "elseif" expression . "then" expression ("elseif" "else")
		"then" => shift 592

587:	expression => "if" expression "then" expression elseif-ex-list "else" expression . ("if" "elsewhen" "end" "}" "constrainedby" "annotation" '$string "elseif" "else" "loop" "then" ")" ";" "for" "," "]")
		"]" => reduce 254
		"," => reduce 254
		"for" => reduce 254
		";" => reduce 254
		")" => reduce 254
		"then" => reduce 254
		"loop" => reduce 254
		"else" => reduce 254
		"elseif" => reduce 254
		'$string => reduce 254
		"annotation" => reduce 254
		"constrainedby" => reduce 254
		"}" => reduce 254
		"end" => reduce 254
		"elsewhen" => reduce 254
		"if" => reduce 254

588:	expression-list => expression-list . "," expression ("elsewhen" "end" ",")
	elsewhen-eq-part => "elsewhen" expression "then" expression-list . ("elsewhen" "end")
		"," => shift 425
		"end" => reduce 246
		"elsewhen" => reduce 246

589:	if-equation => "if" expression then-eq-part elseif-eq-list else-eq-part "end" "if" . (";" '$string "annotation")
		"annotation" => reduce 208
		'$string => reduce 208
		";" => reduce 208

590:	statement-list => statement-list . statement ";" ("elsewhen" "end" "(" "break" "return" "when" "while" "for" "if" "." '$ident)
	statement => . statement-1 comment
	statement-1 => . component-reference ":=" expression
	statement-1 => . component-reference function-call-args
	statement-1 => . "(" output-expression-list ")" ":=" component-reference function-call-args
	statement-1 => . "break"
	statement-1 => . "return"
	statement-1 => . if-statement
	statement-1 => . for-statement
	statement-1 => . while-statement
	statement-1 => . when-statement
	if-statement => . "if" expression then-st-part elseif-st-list else-st-part "end" "if"
	if-statement => . "if" expression then-st-part elseif-st-list "end" "if"
	if-statement => . "if" expression then-st-part else-st-part "end" "if"
	if-statement => . "if" expression then-st-part "end" "if"
	for-statement => . "for" for-indices "loop" statement-list "end" "for"
	for-statement => . "for" for-indices "loop" "end" "for"
	while-statement => . "while" expression "loop" statement-list "end" "while"
	while-statement => . "while" expression "loop" "end" "while"
	when-statement => . "when" expression then-st-part elsewhen-st-list "end" "when"
	component-reference => . component-reference-1
	component-reference => . component-reference-1 "." ident $P12
	component-reference-1 => . ident $P13
	component-reference-1 => . "." ident $P14
	ident => . '$ident
	elsewhen-st-part => "elsewhen" expression "then" statement-list . ("elsewhen" "end")
		'$ident => shift 26
		"." => shift 241
		ident => shift 268
		component-reference-1 => shift 242
		"when" => shift 269
		"while" => shift 270
		"for" => shift 271
		"if" => shift 272
		when-statement => shift 273
		while-statement => shift 274
		for-statement => shift 275
		if-statement => shift 276
		"return" => shift 277
		"break" => shift 278
		"(" => shift 279
		component-reference => shift 280
		statement-1 => shift 281
		statement => shift 285
		"end" => reduce 251
		"elsewhen" => reduce 251

591:	if-statement => "if" expression then-st-part elseif-st-list else-st-part "end" "if" . (";" '$string "annotation")
		"annotation" => reduce 220
		'$string => reduce 220
		";" => reduce 220

592:	elseif-ex-list => elseif-ex-list "elseif" expression "then" . expression ("elseif" "else")
	expression => . simple-expression
	expression => . "if" expression "then" expression elseif-ex-list "else" expression
	expression => . "if" expression "then" expression "else" expression
	simple-expression => . logical-expression
	simple-expression => . logical-expression ":" logical-expression ":" logical-expression
	simple-expression => . logical-expression ":" logical-expression
	logical-expression => . logical-term
	logical-expression => . logical-expression "or" logical-term
	logical-term => . logical-factor
	logical-term => . logical-term "and" logical-factor
	logical-factor => . relation
	logical-factor => . "not" relation
	relation => . arithmetic-expression
	relation => . relation rel-op arithmetic-expression
	arithmetic-expression => . term
	arithmetic-expression => . arithmetic-expression add-op term
	term => . factor
	term => . term mul-op factor
	factor => . primary
	factor => . factor "^" primary
	factor => . factor ".^" primary
	primary => . unsigned-number
	primary => . string
	primary => . "false"
	primary => . "true"
	primary => . name function-call-args
	primary => . "der" function-call-args
	primary => . name
	primary => . name array-subscripts
	primary => . "(" output-expression-list ")"
	primary => . "[" expression-list-list "]"
	primary => . "{" function-arguments "}"
	name => . ident
	name => . "." ident
	name => . name "." ident
	unsigned-number => . '$fx
	unsigned-number => . '$fl
	string => . '$string
	ident => . '$ident
		'$ident => shift 26
		'$string => shift 50
		'$fl => shift 195
		'$fx => shift 196
		"." => shift 27
		ident => shift 28
		"{" => shift 197
		"[" => shift 198
		"(" => shift 199
		"der" => shift 200
		name => shift 201
		"true" => shift 202
		"false" => shift 203
		string => shift 204
		unsigned-number => shift 205
		primary => shift 206
		factor => shift 207
		term => shift 208
		arithmetic-expression => shift 209
		"not" => shift 210
		relation => shift 211
		logical-factor => shift 212
		logical-term => shift 213
		logical-expression => shift 214
		"if" => shift 215
		simple-expression => shift 216
		expression => shift 594

593:	elseif-ex-list => "elseif" expression "then" expression . ("elseif" "else")
		"else" => reduce 256
		"elseif" => reduce 256

594:	elseif-ex-list => elseif-ex-list "elseif" expression "then" expression . ("elseif" "else")
		"else" => reduce 257
		"elseif" => reduce 257

