  Copyright (C) 2015 Matthew R. Wette
  
  This software is covered by the GNU GENERAL PUBLIC LICENCE, Version 3,
  or any later version published by the Free Software Foundation.  See the
  file COPYING included with the this distribution.

0 $start => translation-unit-proxy
1 translation-unit-proxy => translation-unit
2 primary-expression => identifier
3 primary-expression => constant
4 primary-expression => string-literal
5 primary-expression => "(" expression ")"
6 postfix-expression => primary-expression
7 postfix-expression => postfix-expression "[" expression "]"
8 postfix-expression => postfix-expression "(" argument-expression-list ")"
9 postfix-expression => postfix-expression "(" ")"
10 postfix-expression => postfix-expression "." identifier
11 postfix-expression => postfix-expression "->" identifier
12 postfix-expression => postfix-expression "++"
13 postfix-expression => postfix-expression "--"
14 postfix-expression => "(" type-name ")" "{" initializer-list "}"
15 postfix-expression => "(" type-name ")" "{" initializer-list "," "}"
16 argument-expression-list => assignment-expression
17 argument-expression-list => argument-expression-list "," assignment-expression
18 unary-expression => postfix-expression
19 unary-expression => "++" unary-expression
20 unary-expression => "--" unary-expression
21 unary-expression => unary-operator cast-expression
22 unary-expression => "sizeof" unary-expression
23 unary-expression => "sizeof" "(" type-name ")"
24 unary-operator => "&"
25 unary-operator => "*"
26 unary-operator => "+"
27 unary-operator => "-"
28 unary-operator => "~"
29 unary-operator => "!"
30 cast-expression => unary-expression
31 cast-expression => "(" type-name ")" cast-expression
32 multiplicative-expression => cast-expression
33 multiplicative-expression => multiplicative-expression "*" cast-expression
34 multiplicative-expression => multiplicative-expression "/" cast-expression
35 multiplicative-expression => multiplicative-expression "%" cast-expression
36 additive-expression => multiplicative-expression
37 additive-expression => additive-expression "+" multiplicative-expression
38 additive-expression => additive-expression "-" multiplicative-expression
39 shift-expression => additive-expression
40 shift-expression => shift-expression "<<" additive-expression
41 shift-expression => shift-expression ">>" additive-expression
42 relational-expression => shift-expression
43 relational-expression => relational-expression "<" shift-expression
44 relational-expression => relational-expression ">" shift-expression
45 relational-expression => relational-expression "<=" shift-expression
46 relational-expression => relational-expression ">=" shift-expression
47 equality-expression => relational-expression
48 equality-expression => equality-expression "==" relational-expression
49 equality-expression => equality-expression "!=" relational-expression
50 bitwise-and-expression => equality-expression
51 bitwise-and-expression => bitwise-and-expression "&" equality-expression
52 bitwise-xor-expression => bitwise-and-expression
53 bitwise-xor-expression => bitwise-xor-expression "^" bitwise-and-expression
54 bitwise-or-expression => bitwise-xor-expression
55 bitwise-or-expression => bitwise-or-expression "|" bitwise-xor-expression
56 logical-and-expression => bitwise-or-expression
57 logical-and-expression => logical-and-expression "&&" bitwise-or-expression
58 logical-or-expression => logical-and-expression
59 logical-or-expression => logical-or-expression "||" logical-and-expression
60 conditional-expression => logical-or-expression
61 conditional-expression => logical-or-expression "?" expression ":" conditional-expression
62 assignment-expression => conditional-expression
63 assignment-expression => unary-expression assignment-operator assignment-expression
64 assignment-operator => "="
65 assignment-operator => "+="
66 assignment-operator => "-="
67 assignment-operator => "*="
68 assignment-operator => "/="
69 assignment-operator => "%="
70 assignment-operator => "<<="
71 assignment-operator => ">>="
72 assignment-operator => "&="
73 assignment-operator => "^="
74 assignment-operator => "|="
75 expression => assignment-expression
76 expression => expression "," assignment-expression
77 constant-expression => conditional-expression
78 declaration => declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
79 declaration => declaration-specifiers ";" opt-code-comment
80 $P1 =>
81 declaration-specifiers => storage-class-specifier
82 declaration-specifiers => storage-class-specifier declaration-specifiers
83 declaration-specifiers => type-specifier
84 declaration-specifiers => type-specifier declaration-specifiers
85 declaration-specifiers => type-qualifier
86 declaration-specifiers => type-qualifier declaration-specifiers
87 declaration-specifiers => function-specifier
88 declaration-specifiers => function-specifier declaration-specifiers
89 init-declarator-list => init-declarator
90 init-declarator-list => init-declarator-list "," init-declarator
91 init-declarator => declarator
92 init-declarator => declarator "=" initializer
93 storage-class-specifier => "auto"
94 storage-class-specifier => "extern"
95 storage-class-specifier => "register"
96 storage-class-specifier => "static"
97 storage-class-specifier => "typedef"
98 type-specifier => "void"
99 type-specifier => fixed-type-specifier
100 type-specifier => float-type-specifier
101 type-specifier => "_Bool"
102 type-specifier => complex-type-specifier
103 type-specifier => struct-or-union-specifier
104 type-specifier => enum-specifier
105 type-specifier => typedef-name
106 fixed-type-specifier => "short"
107 fixed-type-specifier => "short" "int"
108 fixed-type-specifier => "signed" "short"
109 fixed-type-specifier => "signed" "short" "int"
110 fixed-type-specifier => "int"
111 fixed-type-specifier => "signed"
112 fixed-type-specifier => "signed" "int"
113 fixed-type-specifier => "long"
114 fixed-type-specifier => "long" "int"
115 fixed-type-specifier => "signed" "long"
116 fixed-type-specifier => "signed" "long" "int"
117 fixed-type-specifier => "long" "long"
118 fixed-type-specifier => "long" "long" "int"
119 fixed-type-specifier => "signed" "long" "long"
120 fixed-type-specifier => "signed" "long" "long" "int"
121 fixed-type-specifier => "unsigned" "short" "int"
122 fixed-type-specifier => "unsigned" "short"
123 fixed-type-specifier => "unsigned" "int"
124 fixed-type-specifier => "unsigned"
125 fixed-type-specifier => "unsigned" "long" "int"
126 fixed-type-specifier => "unsigned" "long"
127 fixed-type-specifier => "unsigned" "long" "long" "int"
128 fixed-type-specifier => "unsigned" "long" "long"
129 fixed-type-specifier => "char"
130 fixed-type-specifier => "signed" "char"
131 fixed-type-specifier => "unsigned" "char"
132 float-type-specifier => "float"
133 float-type-specifier => "double"
134 float-type-specifier => "long" "double"
135 complex-type-specifier => "_Complex"
136 complex-type-specifier => "float" "_Complex"
137 complex-type-specifier => "double" "_Complex"
138 complex-type-specifier => "long" "double" "_Complex"
139 struct-or-union-specifier => "struct" identifier "{" struct-declaration-list "}"
140 struct-or-union-specifier => "struct" "{" struct-declaration-list "}"
141 struct-or-union-specifier => "struct" identifier
142 struct-or-union-specifier => "union" identifier "{" struct-declaration-list "}"
143 struct-or-union-specifier => "union" "{" struct-declaration-list "}"
144 struct-or-union-specifier => "union" identifier
145 struct-declaration-list => struct-declaration
146 struct-declaration-list => lone-comment
147 struct-declaration-list => struct-declaration-list struct-declaration
148 struct-declaration-list => struct-declaration-list lone-comment
149 struct-declaration => specifier-qualifier-list struct-declarator-list ";" opt-code-comment
150 specifier-qualifier-list => type-specifier specifier-qualifier-list
151 specifier-qualifier-list => type-specifier
152 specifier-qualifier-list => type-qualifier specifier-qualifier-list
153 specifier-qualifier-list => type-qualifier
154 struct-declarator-list => struct-declarator
155 struct-declarator-list => struct-declarator-list "," struct-declarator
156 struct-declarator => declarator
157 struct-declarator => declarator ":" constant-expression
158 struct-declarator => ":" constant-expression
159 enum-specifier => "enum" identifier "{" enumerator-list "}"
160 enum-specifier => "enum" identifier "{" enumerator-list "," "}"
161 enum-specifier => "enum" "{" enumerator-list "}"
162 enum-specifier => "enum" "{" enumerator-list "," "}"
163 enum-specifier => "enum" identifier
164 enumerator-list => enumerator
165 enumerator-list => enumerator-list "," enumerator
166 enumerator => identifier
167 enumerator => identifier "=" constant-expression
168 type-qualifier => "const"
169 type-qualifier => "volatile"
170 type-qualifier => "restrict"
171 function-specifier => "inline"
172 declarator => pointer direct-declarator
173 declarator => direct-declarator
174 direct-declarator => identifier
175 direct-declarator => "(" declarator ")"
176 direct-declarator => direct-declarator "[" type-qualifier-list assignment-expression "]"
177 direct-declarator => direct-declarator "[" type-qualifier-list "]"
178 direct-declarator => direct-declarator "[" assignment-expression "]"
179 direct-declarator => direct-declarator "[" "]"
180 direct-declarator => direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
181 direct-declarator => direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
182 direct-declarator => direct-declarator "[" type-qualifier-list "*" "]"
183 direct-declarator => direct-declarator "[" "*" "]"
184 direct-declarator => direct-declarator "(" parameter-type-list ")"
185 direct-declarator => direct-declarator "(" identifier-list ")"
186 direct-declarator => direct-declarator "(" ")"
187 pointer => "*" type-qualifier-list
188 pointer => "*"
189 pointer => "*" type-qualifier-list pointer
190 pointer => "*" pointer
191 type-qualifier-list => type-qualifier
192 type-qualifier-list => type-qualifier-list type-qualifier
193 parameter-type-list => parameter-list
194 parameter-type-list => parameter-list "," "..."
195 parameter-list => parameter-declaration
196 parameter-list => parameter-list "," parameter-declaration
197 parameter-declaration => declaration-specifiers declarator
198 parameter-declaration => declaration-specifiers abstract-declarator
199 parameter-declaration => declaration-specifiers
200 identifier-list => identifier
201 identifier-list => identifier-list "," identifier
202 type-name => specifier-qualifier-list abstract-declarator
203 type-name => declaration-specifiers
204 abstract-declarator => pointer
205 abstract-declarator => pointer direct-abstract-declarator
206 abstract-declarator => direct-abstract-declarator
207 direct-abstract-declarator => "(" abstract-declarator ")"
208 direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
209 direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "]"
210 direct-abstract-declarator => direct-abstract-declarator "[" assignment-expression "]"
211 direct-abstract-declarator => direct-abstract-declarator "[" "]"
212 direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
213 direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list "]"
214 direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
215 direct-abstract-declarator => "[" type-qualifier-list assignment-expression "]"
216 direct-abstract-declarator => "[" type-qualifier-list "]"
217 direct-abstract-declarator => "[" assignment-expression "]"
218 direct-abstract-declarator => "[" "]"
219 direct-abstract-declarator => "[" "static" type-qualifier-list assignment-expression "]"
220 direct-abstract-declarator => "[" "static" type-qualifier-list "]"
221 direct-abstract-declarator => "[" type-qualifier-list "static" assignment-expression "]"
222 direct-abstract-declarator => direct-abstract-declarator "[" "*" "]"
223 direct-abstract-declarator => "[" "*" "]"
224 direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list ")"
225 direct-abstract-declarator => direct-abstract-declarator "(" ")"
226 direct-abstract-declarator => "(" parameter-type-list ")"
227 direct-abstract-declarator => "(" ")"
228 typedef-name => 'typename
229 initializer => assignment-expression
230 initializer => "{" initializer-list "}"
231 initializer => "{" initializer-list "," "}"
232 initializer-list => designation initializer
233 initializer-list => initializer
234 initializer-list => initializer-list "," designation initializer
235 initializer-list => initializer-list "," initializer
236 designation => designator-list "="
237 designator-list => designator
238 designator-list => designator-list designator
239 designator => "[" constant-expression "]"
240 designator => "." identifier
241 statement => labeled-statement
242 statement => compound-statement
243 statement => expression-statement
244 statement => selection-statement
245 statement => iteration-statement
246 statement => jump-statement
247 labeled-statement => identifier ":" statement
248 labeled-statement => "case" constant-expression ":" statement
249 labeled-statement => "default" ":" statement
250 compound-statement => "{" block-item-list "}"
251 compound-statement => "{" "}"
252 block-item-list => block-item
253 block-item-list => block-item-list block-item
254 block-item => declaration
255 block-item => statement
256 expression-statement => expression ";"
257 expression-statement => ";"
258 selection-statement => "if" "(" expression ")" statement
259 selection-statement => "if" "(" expression ")" statement "else" statement
260 selection-statement => "switch" "(" expression ")" statement
261 iteration-statement => "while" "(" expression ")" statement
262 iteration-statement => "do" statement "while" "(" expression ")" ";"
263 iteration-statement => "for" "(" initial-clause expression ";" expression ")" statement
264 iteration-statement => "for" "(" initial-clause expression ";" ")" statement
265 iteration-statement => "for" "(" initial-clause ";" expression ")" statement
266 iteration-statement => "for" "(" initial-clause ";" ")" statement
267 initial-clause => expression ";"
268 initial-clause => ";"
269 initial-clause => declaration
270 jump-statement => "goto" identifier ";"
271 jump-statement => "continue" ";"
272 jump-statement => "break" ";"
273 jump-statement => "return" expression ";"
274 jump-statement => "return" ";"
275 translation-unit => external-declaration
276 translation-unit => translation-unit external-declaration
277 external-declaration => function-definition
278 external-declaration => declaration
279 external-declaration => lone-comment
280 external-declaration => cpp-statement
281 external-declaration => "extern" '$string "{" translation-unit "}"
282 function-definition => declaration-specifiers declarator declaration-list compound-statement
283 function-definition => declaration-specifiers declarator compound-statement
284 declaration-list => declaration
285 declaration-list => declaration-list declaration
286 opt-code-comment =>
287 opt-code-comment => code-comment
288 identifier => '$ident
289 identifier => 'cpp-ident
290 constant => '$fixed
291 constant => '$float
292 constant => '$chlit
293 string-literal => '$string
294 code-comment => '$code-comm
295 lone-comment => '$lone-comm
296 cpp-statement => 'cpp-stmt

0:	$start => . translation-unit-proxy ('$end)
	translation-unit-proxy => . translation-unit
	translation-unit => . external-declaration
	translation-unit => . translation-unit external-declaration
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 42
		translation-unit => shift 43
		translation-unit-proxy => shift 44

1:	typedef-name => 'typename . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 228

2:	enum-specifier => "enum" . identifier ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" . "{" enumerator-list "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enum-specifier => "enum" . "{" enumerator-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enum-specifier => "enum" . identifier "{" enumerator-list "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" . identifier "{" enumerator-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 81
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 82

3:	struct-or-union-specifier => "union" . identifier ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
	struct-or-union-specifier => "union" . "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-or-union-specifier => "union" . identifier "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 79
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 80

4:	struct-or-union-specifier => "struct" . identifier ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
	struct-or-union-specifier => "struct" . "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-or-union-specifier => "struct" . identifier "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 77
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 78

5:	complex-type-specifier => "_Complex" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 135

6:	complex-type-specifier => "double" . "_Complex" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	float-type-specifier => "double" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"_Complex" => shift 76
		$default => reduce 133
		["_Complex" => reduce 133] REMOVED by precedence

7:	complex-type-specifier => "float" . "_Complex" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	float-type-specifier => "float" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"_Complex" => shift 75
		$default => reduce 132
		["_Complex" => reduce 132] REMOVED by precedence

8:	fixed-type-specifier => "char" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 129

9:	fixed-type-specifier => "unsigned" . "char" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "long" "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "long" "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "short" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "short" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"short" => shift 71
		"int" => shift 72
		"long" => shift 73
		"char" => shift 74
		$default => reduce 124
		["short" => reduce 124] REMOVED by precedence
		["int" => reduce 124] REMOVED by precedence
		["long" => reduce 124] REMOVED by precedence
		["char" => reduce 124] REMOVED by precedence

10:	complex-type-specifier => "long" . "double" "_Complex" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	float-type-specifier => "long" . "double" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "long" . "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "long" . "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 68
		"long" => shift 69
		"double" => shift 70
		$default => reduce 113
		["int" => reduce 113] REMOVED by precedence
		["long" => reduce 113] REMOVED by precedence
		["double" => reduce 113] REMOVED by precedence

11:	fixed-type-specifier => "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 110

12:	fixed-type-specifier => "signed" . "char" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "long" "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "long" "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "short" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "short" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"short" => shift 64
		"int" => shift 65
		"long" => shift 66
		"char" => shift 67
		$default => reduce 111
		["short" => reduce 111] REMOVED by precedence
		["int" => reduce 111] REMOVED by precedence
		["long" => reduce 111] REMOVED by precedence
		["char" => reduce 111] REMOVED by precedence

13:	fixed-type-specifier => "short" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "short" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 63
		$default => reduce 106
		["int" => reduce 106] REMOVED by precedence

14:	function-specifier => "inline" . ("," ")" "[" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 171

15:	type-qualifier => "restrict" . ("," ")" "[" "]" '$chlit '$float '$fixed '$string "!" "~" "-" "+" "&" "sizeof" "--" "++" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 170

16:	type-qualifier => "volatile" . ("," ")" "[" "]" '$chlit '$float '$fixed '$string "!" "~" "-" "+" "&" "sizeof" "--" "++" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 169

17:	type-qualifier => "const" . ("," ")" "[" "]" '$chlit '$float '$fixed '$string "!" "~" "-" "+" "&" "sizeof" "--" "++" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 168

18:	type-specifier => typedef-name . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 105

19:	type-specifier => enum-specifier . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 104

20:	type-specifier => struct-or-union-specifier . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 103

21:	type-specifier => complex-type-specifier . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 102

22:	type-specifier => "_Bool" . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 101

23:	type-specifier => float-type-specifier . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 100

24:	type-specifier => fixed-type-specifier . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 99

25:	type-specifier => "void" . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 98

26:	storage-class-specifier => "typedef" . ("," ")" "[" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 97

27:	storage-class-specifier => "static" . ("," ")" "[" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 96

28:	storage-class-specifier => "register" . ("," ")" "[" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 95

29:	storage-class-specifier => "auto" . ("," ")" "[" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 93

30:	declaration-specifiers => function-specifier . declaration-specifiers ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => function-specifier . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 62
		$default => reduce 87

31:	declaration-specifiers => type-qualifier . declaration-specifiers ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-qualifier . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 61
		$default => reduce 85

32:	declaration-specifiers => type-specifier . declaration-specifiers ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-specifier . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 60
		$default => reduce 83

33:	declaration-specifiers => storage-class-specifier . declaration-specifiers ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => storage-class-specifier . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 59
		$default => reduce 81

34:	cpp-statement => 'cpp-stmt . ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 296

35:	lone-comment => '$lone-comm . ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 295

36:	function-definition => declaration-specifiers . declarator compound-statement ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
	function-definition => declaration-specifiers . declarator declaration-list compound-statement ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
	declaration => declaration-specifiers . ";" opt-code-comment ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	declaration => declaration-specifiers . init-declarator-list $P1 ";" opt-code-comment ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	init-declarator-list => . init-declarator
	init-declarator-list => . init-declarator-list "," init-declarator
	init-declarator => . declarator
	init-declarator => . declarator "=" initializer
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		init-declarator => shift 47
		init-declarator-list => shift 48
		";" => shift 49
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 57

37:	storage-class-specifier => "extern" . ("*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
	external-declaration => "extern" . '$string "{" translation-unit "}" ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		'$string => shift 46
		$default => reduce 94

38:	external-declaration => cpp-statement . ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		$default => reduce 280

39:	external-declaration => lone-comment . ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		$default => reduce 279

40:	external-declaration => declaration . ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		$default => reduce 278

41:	external-declaration => function-definition . ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		$default => reduce 277

42:	translation-unit => external-declaration . ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 275

43:	translation-unit => translation-unit . external-declaration ('$end "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	translation-unit-proxy => translation-unit . ('$end)
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 45
		'$end => reduce 1

44:	$start => translation-unit-proxy . ('$end)
		'$end => accept 0

45:	translation-unit => translation-unit external-declaration . ("}" '$end "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 276

46:	external-declaration => "extern" '$string . "{" translation-unit "}" ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		"{" => shift 122

47:	init-declarator-list => init-declarator . ("," ";")
		";" => reduce 89
		"," => reduce 89

48:	init-declarator-list => init-declarator-list . "," init-declarator ("," ";")
	declaration => declaration-specifiers init-declarator-list . $P1 ";" opt-code-comment ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	$P1 => .
		$P1 => shift 120
		"," => shift 121
		";" => reduce 80

49:	declaration => declaration-specifiers ";" . opt-code-comment ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	opt-code-comment => .
	opt-code-comment => . code-comment
	code-comment => . '$code-comm
		'$code-comm => shift 117
		code-comment => shift 118
		opt-code-comment => shift 119
		$default => reduce 286

50:	identifier => 'cpp-ident . ('$ident 'cpp-ident "]" "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" "?" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" ":" "}" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "(" "[" "{")
		$default => reduce 289

51:	identifier => '$ident . ('$ident 'cpp-ident "]" "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" "?" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" ":" "}" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "(" "[" "{")
		$default => reduce 288

52:	pointer => "*" . pointer ("," ")" "[" "(" '$ident 'cpp-ident)
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	pointer => "*" . type-qualifier-list pointer ("," ")" "[" "(" '$ident 'cpp-ident)
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	pointer => "*" . ("," ")" "[" "(" '$ident 'cpp-ident)
	pointer => "*" . type-qualifier-list ("," ")" "[" "(" '$ident 'cpp-ident)
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 115
		"*" => shift 52
		pointer => shift 116
		$default => reduce 188

53:	direct-declarator => "(" . declarator ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 113

54:	direct-declarator => identifier . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 174

55:	direct-declarator => direct-declarator . "(" ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "(" identifier-list ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "(" parameter-type-list ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" "*" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" type-qualifier-list "*" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" type-qualifier-list "static" assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" "static" type-qualifier-list assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" type-qualifier-list "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" type-qualifier-list assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	declarator => direct-declarator . (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
		"[" => shift 111
		"(" => shift 112
		$default => reduce 173

56:	declarator => pointer . direct-declarator (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 110

57:	init-declarator => declarator . "=" initializer ("," ";")
	init-declarator => declarator . ("," ";")
	function-definition => declaration-specifiers declarator . declaration-list compound-statement ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	declaration-list => . declaration
	declaration-list => . declaration-list declaration
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	function-definition => declaration-specifiers declarator . compound-statement ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
		"{" => shift 104
		compound-statement => shift 105
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 106
		declaration => shift 107
		declaration-list => shift 108
		"=" => shift 109
		";" => reduce 91
		"," => reduce 91

58:	storage-class-specifier => "extern" . ("," ")" "[" ";" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 94

59:	declaration-specifiers => storage-class-specifier declaration-specifiers . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 82

60:	declaration-specifiers => type-specifier declaration-specifiers . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 84

61:	declaration-specifiers => type-qualifier declaration-specifiers . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 86

62:	declaration-specifiers => function-specifier declaration-specifiers . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 88

63:	fixed-type-specifier => "short" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 107

64:	fixed-type-specifier => "signed" "short" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" "short" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 103
		$default => reduce 108
		["int" => reduce 108] REMOVED by precedence

65:	fixed-type-specifier => "signed" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 112

66:	fixed-type-specifier => "signed" "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" "long" . "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" "long" . "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"long" => shift 101
		"int" => shift 102
		$default => reduce 115
		["long" => reduce 115] REMOVED by precedence
		["int" => reduce 115] REMOVED by precedence

67:	fixed-type-specifier => "signed" "char" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 130

68:	fixed-type-specifier => "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 114

69:	fixed-type-specifier => "long" "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "long" "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 100
		$default => reduce 117
		["int" => reduce 117] REMOVED by precedence

70:	float-type-specifier => "long" "double" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	complex-type-specifier => "long" "double" . "_Complex" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"_Complex" => shift 99
		$default => reduce 134
		["_Complex" => reduce 134] REMOVED by precedence

71:	fixed-type-specifier => "unsigned" "short" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" "short" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 98
		$default => reduce 122
		["int" => reduce 122] REMOVED by precedence

72:	fixed-type-specifier => "unsigned" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 123

73:	fixed-type-specifier => "unsigned" "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" "long" . "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" "long" . "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"long" => shift 96
		"int" => shift 97
		$default => reduce 126
		["long" => reduce 126] REMOVED by precedence
		["int" => reduce 126] REMOVED by precedence

74:	fixed-type-specifier => "unsigned" "char" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 131

75:	complex-type-specifier => "float" "_Complex" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 136

76:	complex-type-specifier => "double" "_Complex" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 137

77:	struct-or-union-specifier => "struct" "{" . struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 90
		lone-comment => shift 91
		struct-declaration => shift 92
		struct-declaration-list => shift 95

78:	struct-or-union-specifier => "struct" identifier . "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-or-union-specifier => "struct" identifier . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"{" => shift 94
		$default => reduce 141

79:	struct-or-union-specifier => "union" "{" . struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 90
		lone-comment => shift 91
		struct-declaration => shift 92
		struct-declaration-list => shift 93

80:	struct-or-union-specifier => "union" identifier . "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-or-union-specifier => "union" identifier . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"{" => shift 87
		$default => reduce 144

81:	enum-specifier => "enum" "{" . enumerator-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" "{" . enumerator-list "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 84
		enumerator => shift 85
		enumerator-list => shift 86

82:	enum-specifier => "enum" identifier . "{" enumerator-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enum-specifier => "enum" identifier . "{" enumerator-list "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enum-specifier => "enum" identifier . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"{" => shift 83
		$default => reduce 163

83:	enum-specifier => "enum" identifier "{" . enumerator-list "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" identifier "{" . enumerator-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 84
		enumerator => shift 85
		enumerator-list => shift 223

84:	enumerator => identifier . "=" constant-expression ("," "}")
	enumerator => identifier . ("," "}")
		"=" => shift 222
		"}" => reduce 166
		"," => reduce 166

85:	enumerator-list => enumerator . ("," "}")
		"}" => reduce 164
		"," => reduce 164

86:	enum-specifier => "enum" "{" enumerator-list . "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => enumerator-list . "," enumerator ("," "}")
	enum-specifier => "enum" "{" enumerator-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 220
		"," => shift 221

87:	struct-or-union-specifier => "union" identifier "{" . struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 90
		lone-comment => shift 91
		struct-declaration => shift 92
		struct-declaration-list => shift 219

88:	specifier-qualifier-list => type-qualifier . (":" "(" '$ident 'cpp-ident "*")
	specifier-qualifier-list => type-qualifier . specifier-qualifier-list (":" "(" '$ident 'cpp-ident "*")
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 218
		$default => reduce 153

89:	specifier-qualifier-list => type-specifier . (":" "(" '$ident 'cpp-ident "*")
	specifier-qualifier-list => type-specifier . specifier-qualifier-list (":" "(" '$ident 'cpp-ident "*")
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 217
		$default => reduce 151

90:	struct-declaration => specifier-qualifier-list . struct-declarator-list ";" opt-code-comment ('$lone-comm "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "}")
	struct-declarator-list => . struct-declarator
	struct-declarator-list => . struct-declarator-list "," struct-declarator
	struct-declarator => . declarator
	struct-declarator => . declarator ":" constant-expression
	struct-declarator => . ":" constant-expression
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		":" => shift 213
		declarator => shift 214
		struct-declarator => shift 215
		struct-declarator-list => shift 216

91:	struct-declaration-list => lone-comment . ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
		$default => reduce 146

92:	struct-declaration-list => struct-declaration . ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
		$default => reduce 145

93:	struct-declaration-list => struct-declaration-list . lone-comment ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "union" "{" struct-declaration-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 212
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 90
		struct-declaration => shift 209
		'$lone-comm => shift 35
		lone-comment => shift 210

94:	struct-or-union-specifier => "struct" identifier "{" . struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 90
		lone-comment => shift 91
		struct-declaration => shift 92
		struct-declaration-list => shift 211

95:	struct-declaration-list => struct-declaration-list . lone-comment ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "struct" "{" struct-declaration-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 208
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 90
		struct-declaration => shift 209
		'$lone-comm => shift 35
		lone-comment => shift 210

96:	fixed-type-specifier => "unsigned" "long" "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" "long" "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 207
		$default => reduce 128
		["int" => reduce 128] REMOVED by precedence

97:	fixed-type-specifier => "unsigned" "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 125

98:	fixed-type-specifier => "unsigned" "short" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 121

99:	complex-type-specifier => "long" "double" "_Complex" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 138

100:	fixed-type-specifier => "long" "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 118

101:	fixed-type-specifier => "signed" "long" "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" "long" "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 206
		$default => reduce 119
		["int" => reduce 119] REMOVED by precedence

102:	fixed-type-specifier => "signed" "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 116

103:	fixed-type-specifier => "signed" "short" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 109

104:	compound-statement => "{" . "}" ('$end 'cpp-stmt '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	compound-statement => "{" . block-item-list "}" ('$end 'cpp-stmt '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	block-item-list => . block-item
	block-item-list => . block-item-list block-item
	block-item => . declaration
	block-item => . statement
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		declaration-specifiers => shift 106
		statement => shift 201
		declaration => shift 202
		block-item => shift 203
		block-item-list => shift 204
		"}" => shift 205

105:	function-definition => declaration-specifiers declarator compound-statement . ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 283

106:	declaration => declaration-specifiers . ";" opt-code-comment ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "}" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "{")
	declaration => declaration-specifiers . init-declarator-list $P1 ";" opt-code-comment ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "}" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "{")
	init-declarator-list => . init-declarator
	init-declarator-list => . init-declarator-list "," init-declarator
	init-declarator => . declarator
	init-declarator => . declarator "=" initializer
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 124
		init-declarator => shift 47
		init-declarator-list => shift 48
		";" => shift 49

107:	declaration-list => declaration . ("inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
		$default => reduce 284

108:	declaration-list => declaration-list . declaration ("inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	function-definition => declaration-specifiers declarator declaration-list . compound-statement ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
		"{" => shift 104
		compound-statement => shift 178
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 106
		declaration => shift 179

109:	init-declarator => declarator "=" . initializer ("," ";")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 177

110:	direct-declarator => direct-declarator . "(" ")" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "(" identifier-list ")" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "(" parameter-type-list ")" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" "*" "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" type-qualifier-list "*" "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" type-qualifier-list "static" assignment-expression "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" "static" type-qualifier-list assignment-expression "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" assignment-expression "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" type-qualifier-list "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" type-qualifier-list assignment-expression "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	declarator => pointer direct-declarator . (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
		"[" => shift 111
		"(" => shift 112
		$default => reduce 172

111:	direct-declarator => direct-declarator "[" . type-qualifier-list assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . type-qualifier-list "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-declarator => direct-declarator "[" . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator "[" . "static" type-qualifier-list assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator "[" . type-qualifier-list "static" assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . type-qualifier-list "*" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . "*" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"static" => shift 137
		"]" => shift 138
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 160
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 172
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 173

112:	direct-declarator => direct-declarator "(" . parameter-type-list ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-declarator => direct-declarator "(" . identifier-list ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	identifier-list => . identifier
	identifier-list => . identifier-list "," identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	direct-declarator => direct-declarator "(" . ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		")" => shift 130
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 131
		identifier-list => shift 132
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 133
		parameter-declaration => shift 134
		parameter-list => shift 135
		parameter-type-list => shift 136

113:	direct-declarator => "(" declarator . ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		")" => shift 129

114:	type-qualifier-list => type-qualifier . ("," ")" "[" "static" "]" "++" "--" "sizeof" "&" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "const" "volatile" "restrict" "*")
		$default => reduce 191

115:	pointer => "*" type-qualifier-list . ("," ")" "[" "(" '$ident 'cpp-ident)
	type-qualifier-list => type-qualifier-list . type-qualifier ("," ")" "[" "(" '$ident 'cpp-ident "const" "volatile" "restrict" "*")
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	pointer => "*" type-qualifier-list . pointer ("," ")" "[" "(" '$ident 'cpp-ident)
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
		"*" => shift 52
		pointer => shift 127
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		$default => reduce 187

116:	pointer => "*" pointer . ("," ")" "[" "(" '$ident 'cpp-ident)
		$default => reduce 190

117:	code-comment => '$code-comm . ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 294

118:	opt-code-comment => code-comment . ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 287

119:	declaration => declaration-specifiers ";" opt-code-comment . ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 79

120:	declaration => declaration-specifiers init-declarator-list $P1 . ";" opt-code-comment ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		";" => shift 126

121:	init-declarator-list => init-declarator-list "," . init-declarator ("," ";")
	init-declarator => . declarator
	init-declarator => . declarator "=" initializer
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 124
		init-declarator => shift 125

122:	external-declaration => "extern" '$string "{" . translation-unit "}" ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
	translation-unit => . external-declaration
	translation-unit => . translation-unit external-declaration
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 42
		translation-unit => shift 123

123:	translation-unit => translation-unit . external-declaration ("extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef" "}")
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	external-declaration => "extern" '$string "{" translation-unit . "}" ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		"}" => shift 328
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 45

124:	init-declarator => declarator . "=" initializer ("," ";")
	init-declarator => declarator . ("," ";")
		"=" => shift 109
		";" => reduce 91
		"," => reduce 91

125:	init-declarator-list => init-declarator-list "," init-declarator . ("," ";")
		";" => reduce 90
		"," => reduce 90

126:	declaration => declaration-specifiers init-declarator-list $P1 ";" . opt-code-comment ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	opt-code-comment => .
	opt-code-comment => . code-comment
	code-comment => . '$code-comm
		'$code-comm => shift 117
		code-comment => shift 118
		opt-code-comment => shift 327
		$default => reduce 286

127:	pointer => "*" type-qualifier-list pointer . ("," ")" "[" "(" '$ident 'cpp-ident)
		$default => reduce 189

128:	type-qualifier-list => type-qualifier-list type-qualifier . ("," "static" "]" "++" "--" "sizeof" "&" "+" "-" "~" "!" '$string '$fixed '$float '$chlit ")" "[" "(" '$ident 'cpp-ident "const" "volatile" "restrict" "*")
		$default => reduce 192

129:	direct-declarator => "(" declarator ")" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 175

130:	direct-declarator => direct-declarator "(" ")" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 186

131:	identifier-list => identifier . ("," ")")
		")" => reduce 200
		"," => reduce 200

132:	identifier-list => identifier-list . "," identifier ("," ")")
	direct-declarator => direct-declarator "(" identifier-list . ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		")" => shift 325
		"," => shift 326

133:	parameter-declaration => declaration-specifiers . ("," ")")
	parameter-declaration => declaration-specifiers . abstract-declarator ("," ")")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	parameter-declaration => declaration-specifiers . declarator ("," ")")
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 54
		direct-declarator => shift 55
		declarator => shift 319
		"[" => shift 320
		"(" => shift 321
		"*" => shift 52
		direct-abstract-declarator => shift 322
		pointer => shift 323
		abstract-declarator => shift 324
		")" => reduce 199
		"," => reduce 199

134:	parameter-list => parameter-declaration . (")" ",")
		"," => reduce 195
		")" => reduce 195

135:	parameter-list => parameter-list . "," parameter-declaration (")" ",")
	parameter-type-list => parameter-list . "," "..." (")")
	parameter-type-list => parameter-list . (")")
		"," => shift 318
		")" => reduce 193

136:	direct-declarator => direct-declarator "(" parameter-type-list . ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		")" => shift 317

137:	direct-declarator => direct-declarator "[" "static" . type-qualifier-list assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 316

138:	direct-declarator => direct-declarator "[" "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 179

139:	multiplicative-expression => cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 32

140:	multiplicative-expression => multiplicative-expression . "%" cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	multiplicative-expression => multiplicative-expression . "/" cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	multiplicative-expression => multiplicative-expression . "*" cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	additive-expression => multiplicative-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 313
		"/" => shift 314
		"%" => shift 315
		$default => reduce 36

141:	additive-expression => additive-expression . "-" multiplicative-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
	additive-expression => additive-expression . "+" multiplicative-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
	shift-expression => additive-expression . (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 311
		"-" => shift 312
		$default => reduce 39

142:	shift-expression => shift-expression . ">>" additive-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	shift-expression => shift-expression . "<<" additive-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	relational-expression => shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
		"<<" => shift 309
		">>" => shift 310
		$default => reduce 42

143:	relational-expression => relational-expression . ">=" shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	relational-expression => relational-expression . "<=" shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	relational-expression => relational-expression . ">" shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	relational-expression => relational-expression . "<" shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	equality-expression => relational-expression . (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 305
		">" => shift 306
		"<=" => shift 307
		">=" => shift 308
		$default => reduce 47

144:	equality-expression => equality-expression . "!=" relational-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	equality-expression => equality-expression . "==" relational-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	bitwise-and-expression => equality-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
		"==" => shift 303
		"!=" => shift 304
		$default => reduce 50

145:	bitwise-and-expression => bitwise-and-expression . "&" equality-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
	bitwise-xor-expression => bitwise-and-expression . (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 302
		$default => reduce 52

146:	string-literal => '$string . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 293

147:	constant => '$chlit . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 292

148:	constant => '$float . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 291

149:	constant => '$fixed . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 290

150:	bitwise-xor-expression => bitwise-xor-expression . "^" bitwise-and-expression (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
	bitwise-or-expression => bitwise-xor-expression . (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
		"^" => shift 301
		$default => reduce 54

151:	bitwise-or-expression => bitwise-or-expression . "|" bitwise-xor-expression (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
	logical-and-expression => bitwise-or-expression . (":" "}" ")" "]" "&&" "||" "," "?" ";")
		"|" => shift 300
		$default => reduce 56

152:	primary-expression => string-literal . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 4

153:	primary-expression => constant . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 3

154:	primary-expression => identifier . (":" ";" "}" "," ")" "]" "||" "&&" "|" "^" "&" "==" "!=" ">=" "<=" ">" "<" "<<" ">>" "-" "+" "*" "/" "%" "?" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 2

155:	logical-and-expression => logical-and-expression . "&&" bitwise-or-expression (":" "}" ")" "]" "&&" "||" "," "?" ";")
	logical-or-expression => logical-and-expression . (":" "}" ")" "]" "," "||" ";" "?")
		"&&" => shift 299
		$default => reduce 58

156:	unary-operator => "!" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 29

157:	unary-operator => "~" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 28

158:	unary-operator => "-" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 27

159:	unary-operator => "+" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 26

160:	direct-declarator => direct-declarator "[" "*" . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	unary-operator => "*" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		"]" => shift 298
		$default => reduce 25

161:	unary-operator => "&" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 24

162:	cast-expression => "(" . type-name ")" cast-expression ("=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => "(" . expression ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" . type-name ")" "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	postfix-expression => "(" . type-name ")" "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 292
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 293
		type-specifier => shift 294
		storage-class-specifier => shift 33
		declaration-specifiers => shift 295
		specifier-qualifier-list => shift 296
		type-name => shift 297

163:	postfix-expression => primary-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 6

164:	logical-or-expression => logical-or-expression . "||" logical-and-expression (":" "}" ")" "]" "," "||" ";" "?")
	conditional-expression => logical-or-expression . "?" expression ":" conditional-expression (":" "}" ")" "]" "," ";")
	conditional-expression => logical-or-expression . (":" "}" ")" "]" "," ";")
		"?" => shift 290
		"||" => shift 291
		$default => reduce 60

165:	unary-expression => "sizeof" . "(" type-name ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	unary-expression => "sizeof" . unary-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 288
		"(" => shift 289

166:	unary-expression => unary-operator . cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 287

167:	unary-expression => "--" . unary-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 284
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 286

168:	unary-expression => "++" . unary-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 284
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 285

169:	postfix-expression => postfix-expression . "--" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "++" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "->" identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "." identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "(" ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "(" argument-expression-list ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "[" expression "]" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	unary-expression => postfix-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		"[" => shift 278
		"(" => shift 279
		"." => shift 280
		"->" => shift 281
		"++" => shift 282
		"--" => shift 283
		$default => reduce 18

170:	cast-expression => unary-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	assignment-expression => unary-expression . assignment-operator assignment-expression (":" "}" ")" "]" "," ";")
	assignment-operator => . "="
	assignment-operator => . "+="
	assignment-operator => . "-="
	assignment-operator => . "*="
	assignment-operator => . "/="
	assignment-operator => . "%="
	assignment-operator => . "<<="
	assignment-operator => . ">>="
	assignment-operator => . "&="
	assignment-operator => . "^="
	assignment-operator => . "|="
		"|=" => shift 266
		"^=" => shift 267
		"&=" => shift 268
		">>=" => shift 269
		"<<=" => shift 270
		"%=" => shift 271
		"/=" => shift 272
		"*=" => shift 273
		"-=" => shift 274
		"+=" => shift 275
		"=" => shift 276
		assignment-operator => shift 277
		$default => reduce 30

171:	assignment-expression => conditional-expression . (":" "}" ")" "]" "," ";")
		$default => reduce 62

172:	direct-declarator => direct-declarator "[" assignment-expression . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"]" => shift 265

173:	direct-declarator => direct-declarator "[" type-qualifier-list . "*" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator "[" type-qualifier-list . "static" assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator "[" type-qualifier-list . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => type-qualifier-list . type-qualifier ("static" "]" "const" "volatile" "restrict" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" type-qualifier-list . assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 261
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		"]" => shift 262
		"static" => shift 263
		"*" => shift 264

174:	unary-operator => "*" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 25

175:	initializer => "{" . initializer-list "," "}" (";" "}" ",")
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	initializer => "{" . initializer-list "}" (";" "}" ",")
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		"." => shift 254
		"[" => shift 255
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		designator => shift 256
		unary-expression => shift 170
		conditional-expression => shift 171
		designator-list => shift 257
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 258
		designation => shift 259
		initializer-list => shift 260

176:	initializer => assignment-expression . (";" "}" ",")
		"," => reduce 229
		"}" => reduce 229
		";" => reduce 229

177:	init-declarator => declarator "=" initializer . ("," ";")
		";" => reduce 92
		"," => reduce 92

178:	function-definition => declaration-specifiers declarator declaration-list compound-statement . ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 282

179:	declaration-list => declaration-list declaration . ("inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
		$default => reduce 285

180:	expression => assignment-expression . (":" "]" ")" "," ";")
		$default => reduce 75

181:	jump-statement => "return" . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	jump-statement => "return" . expression ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 252
		";" => shift 253

182:	jump-statement => "break" . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		";" => shift 251

183:	jump-statement => "continue" . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		";" => shift 250

184:	jump-statement => "goto" . identifier ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 249

185:	iteration-statement => "for" . "(" initial-clause ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	iteration-statement => "for" . "(" initial-clause ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	iteration-statement => "for" . "(" initial-clause expression ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	iteration-statement => "for" . "(" initial-clause expression ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		"(" => shift 248

186:	iteration-statement => "do" . statement "while" "(" expression ")" ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 247

187:	iteration-statement => "while" . "(" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		"(" => shift 246

188:	selection-statement => "switch" . "(" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		"(" => shift 245

189:	selection-statement => "if" . "(" expression ")" statement "else" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	selection-statement => "if" . "(" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		"(" => shift 244

190:	expression-statement => ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 257

191:	expression => expression . "," assignment-expression ("," ";")
	expression-statement => expression . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		";" => shift 242
		"," => shift 243

192:	labeled-statement => "default" . ":" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		":" => shift 241

193:	labeled-statement => "case" . constant-expression ":" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 227
		constant-expression => shift 240

194:	primary-expression => identifier . ("*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	labeled-statement => identifier . ":" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		":" => shift 239
		$default => reduce 2

195:	statement => jump-statement . ("else" "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 246

196:	statement => iteration-statement . ("else" "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 245

197:	statement => selection-statement . ("else" "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 244

198:	statement => expression-statement . ("else" "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 243

199:	statement => compound-statement . ("else" "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 242

200:	statement => labeled-statement . ("else" "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 241

201:	block-item => statement . ("typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 255

202:	block-item => declaration . ("typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 254

203:	block-item-list => block-item . ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 252

204:	block-item-list => block-item-list . block-item ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
	block-item => . declaration
	block-item => . statement
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	compound-statement => "{" block-item-list . "}" ('$end 'cpp-stmt '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		"}" => shift 237
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		declaration-specifiers => shift 106
		statement => shift 201
		declaration => shift 202
		block-item => shift 238

205:	compound-statement => "{" "}" . ('$end 'cpp-stmt '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 251

206:	fixed-type-specifier => "signed" "long" "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 120

207:	fixed-type-specifier => "unsigned" "long" "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 127

208:	struct-or-union-specifier => "struct" "{" struct-declaration-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 140

209:	struct-declaration-list => struct-declaration-list struct-declaration . ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
		$default => reduce 147

210:	struct-declaration-list => struct-declaration-list lone-comment . ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
		$default => reduce 148

211:	struct-declaration-list => struct-declaration-list . lone-comment ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "struct" identifier "{" struct-declaration-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 236
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 90
		struct-declaration => shift 209
		'$lone-comm => shift 35
		lone-comment => shift 210

212:	struct-or-union-specifier => "union" "{" struct-declaration-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 143

213:	struct-declarator => ":" . constant-expression ("," ";")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 227
		constant-expression => shift 235

214:	struct-declarator => declarator . ":" constant-expression ("," ";")
	struct-declarator => declarator . ("," ";")
		":" => shift 234
		";" => reduce 156
		"," => reduce 156

215:	struct-declarator-list => struct-declarator . ("," ";")
		";" => reduce 154
		"," => reduce 154

216:	struct-declarator-list => struct-declarator-list . "," struct-declarator ("," ";")
	struct-declaration => specifier-qualifier-list struct-declarator-list . ";" opt-code-comment ('$lone-comm "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "}")
		";" => shift 232
		"," => shift 233

217:	specifier-qualifier-list => type-specifier specifier-qualifier-list . ("[" ":" "(" '$ident 'cpp-ident "*")
		$default => reduce 150

218:	specifier-qualifier-list => type-qualifier specifier-qualifier-list . ("[" ":" "(" '$ident 'cpp-ident "*")
		$default => reduce 152

219:	struct-declaration-list => struct-declaration-list . lone-comment ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "union" identifier "{" struct-declaration-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 231
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 90
		struct-declaration => shift 209
		'$lone-comm => shift 35
		lone-comment => shift 210

220:	enum-specifier => "enum" "{" enumerator-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 161

221:	enumerator-list => enumerator-list "," . enumerator ("," "}")
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" "{" enumerator-list "," . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 229
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 84
		enumerator => shift 230

222:	enumerator => identifier "=" . constant-expression ("," "}")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 227
		constant-expression => shift 228

223:	enum-specifier => "enum" identifier "{" enumerator-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => enumerator-list . "," enumerator ("}" ",")
	enum-specifier => "enum" identifier "{" enumerator-list . "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"," => shift 224
		"}" => shift 225

224:	enum-specifier => "enum" identifier "{" enumerator-list "," . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => enumerator-list "," . enumerator ("}" ",")
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 84
		enumerator => shift 230
		"}" => shift 404

225:	enum-specifier => "enum" identifier "{" enumerator-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 159

226:	cast-expression => unary-expression . ("}" ")" "," ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "]" "%" "/" "*" "+" "-" ">>" "<<" "<" ">" "<=" ">=" "!=" "==" "&" "^" "|" "&&" "||" ":" "?")
		$default => reduce 30

227:	constant-expression => conditional-expression . ("}" "," ";" "]" ":")
		$default => reduce 77

228:	enumerator => identifier "=" constant-expression . ("," "}")
		"}" => reduce 167
		"," => reduce 167

229:	enum-specifier => "enum" "{" enumerator-list "," "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 162

230:	enumerator-list => enumerator-list "," enumerator . ("," "}")
		"}" => reduce 165
		"," => reduce 165

231:	struct-or-union-specifier => "union" identifier "{" struct-declaration-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 142

232:	struct-declaration => specifier-qualifier-list struct-declarator-list ";" . opt-code-comment ('$lone-comm "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "}")
	opt-code-comment => .
	opt-code-comment => . code-comment
	code-comment => . '$code-comm
		'$code-comm => shift 117
		code-comment => shift 118
		opt-code-comment => shift 403
		$default => reduce 286

233:	struct-declarator-list => struct-declarator-list "," . struct-declarator ("," ";")
	struct-declarator => . declarator
	struct-declarator => . declarator ":" constant-expression
	struct-declarator => . ":" constant-expression
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		":" => shift 213
		declarator => shift 214
		struct-declarator => shift 402

234:	struct-declarator => declarator ":" . constant-expression ("," ";")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 227
		constant-expression => shift 401

235:	struct-declarator => ":" constant-expression . ("," ";")
		";" => reduce 158
		"," => reduce 158

236:	struct-or-union-specifier => "struct" identifier "{" struct-declaration-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 139

237:	compound-statement => "{" block-item-list "}" . ('$end 'cpp-stmt '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 250

238:	block-item-list => block-item-list block-item . ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 253

239:	labeled-statement => identifier ":" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 400

240:	labeled-statement => "case" constant-expression . ":" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		":" => shift 399

241:	labeled-statement => "default" ":" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 398

242:	expression-statement => expression ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 256

243:	expression => expression "," . assignment-expression ("]" ":" ")" "," ";")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 397

244:	selection-statement => "if" "(" . expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	selection-statement => "if" "(" . expression ")" statement "else" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 396

245:	selection-statement => "switch" "(" . expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 395

246:	iteration-statement => "while" "(" . expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 394

247:	iteration-statement => "do" statement . "while" "(" expression ")" ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		"while" => shift 393

248:	iteration-statement => "for" "(" . initial-clause expression ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	iteration-statement => "for" "(" . initial-clause expression ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	iteration-statement => "for" "(" . initial-clause ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	iteration-statement => "for" "(" . initial-clause ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		unary-expression => shift 170
		conditional-expression => shift 171
		declaration-specifiers => shift 106
		assignment-expression => shift 180
		declaration => shift 389
		";" => shift 390
		expression => shift 391
		initial-clause => shift 392

249:	jump-statement => "goto" identifier . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		";" => shift 388

250:	jump-statement => "continue" ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 271

251:	jump-statement => "break" ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 272

252:	expression => expression . "," assignment-expression ("," ";")
	jump-statement => "return" expression . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		";" => shift 387
		"," => shift 243

253:	jump-statement => "return" ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 274

254:	designator => "." . identifier ("." "[" "=")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 386

255:	designator => "[" . constant-expression "]" ("." "[" "=")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 227
		constant-expression => shift 385

256:	designator-list => designator . ("[" "." "=")
		"=" => reduce 237
		"." => reduce 237
		"[" => reduce 237

257:	designator-list => designator-list . designator ("[" "." "=")
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	designation => designator-list . "=" ("{" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		"=" => shift 383
		"." => shift 254
		"[" => shift 255
		designator => shift 384

258:	initializer-list => initializer . ("}" ",")
		"," => reduce 233
		"}" => reduce 233

259:	initializer-list => designation . initializer ("}" ",")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 382

260:	initializer => "{" initializer-list . "}" (";" "}" ",")
	initializer-list => initializer-list . "," initializer ("}" ",")
	initializer-list => initializer-list . "," designation initializer ("}" ",")
	initializer => "{" initializer-list . "," "}" (";" "}" ",")
		"," => shift 380
		"}" => shift 381

261:	direct-declarator => direct-declarator "[" type-qualifier-list assignment-expression . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"]" => shift 379

262:	direct-declarator => direct-declarator "[" type-qualifier-list "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 177

263:	direct-declarator => direct-declarator "[" type-qualifier-list "static" . assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 378

264:	unary-operator => "*" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	direct-declarator => direct-declarator "[" type-qualifier-list "*" . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"]" => shift 377
		$default => reduce 25

265:	direct-declarator => direct-declarator "[" assignment-expression "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 178

266:	assignment-operator => "|=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 74

267:	assignment-operator => "^=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 73

268:	assignment-operator => "&=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 72

269:	assignment-operator => ">>=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 71

270:	assignment-operator => "<<=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 70

271:	assignment-operator => "%=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 69

272:	assignment-operator => "/=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 68

273:	assignment-operator => "*=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 67

274:	assignment-operator => "-=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 66

275:	assignment-operator => "+=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 65

276:	assignment-operator => "=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 64

277:	assignment-expression => unary-expression assignment-operator . assignment-expression (":" "}" ")" "]" "," ";")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 376

278:	postfix-expression => postfix-expression "[" . expression "]" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 375

279:	postfix-expression => postfix-expression "(" . argument-expression-list ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	argument-expression-list => . assignment-expression
	argument-expression-list => . argument-expression-list "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => postfix-expression "(" . ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		")" => shift 372
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 373
		argument-expression-list => shift 374

280:	postfix-expression => postfix-expression "." . identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 371

281:	postfix-expression => postfix-expression "->" . identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 370

282:	postfix-expression => postfix-expression "++" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 12

283:	postfix-expression => postfix-expression "--" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 13

284:	primary-expression => "(" . expression ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "--" "++" "->" "." "(" "[")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" . type-name ")" "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	postfix-expression => "(" . type-name ")" "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 293
		type-specifier => shift 294
		storage-class-specifier => shift 33
		declaration-specifiers => shift 295
		specifier-qualifier-list => shift 296
		type-name => shift 369
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 292

285:	unary-expression => "++" unary-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 19

286:	unary-expression => "--" unary-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 20

287:	unary-expression => unary-operator cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 21

288:	unary-expression => "sizeof" unary-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 22

289:	primary-expression => "(" . expression ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "--" "++" "->" "." "(" "[")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" . type-name ")" "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	postfix-expression => "(" . type-name ")" "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	unary-expression => "sizeof" "(" . type-name ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 293
		type-specifier => shift 294
		storage-class-specifier => shift 33
		declaration-specifiers => shift 295
		specifier-qualifier-list => shift 296
		type-name => shift 368
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 292

290:	conditional-expression => logical-or-expression "?" . expression ":" conditional-expression (":" "}" ")" "]" "," ";")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 367

291:	logical-or-expression => logical-or-expression "||" . logical-and-expression (":" "}" ")" "]" "," "||" ";" "?")
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 366

292:	expression => expression . "," assignment-expression ("," ")")
	primary-expression => "(" expression . ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		")" => shift 365
		"," => shift 243

293:	specifier-qualifier-list => type-qualifier . ("(" "[" "*")
	specifier-qualifier-list => type-qualifier . specifier-qualifier-list ("(" "[" "*")
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-qualifier . declaration-specifiers (")")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-qualifier . (")")
		"inline" => shift 14
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		storage-class-specifier => shift 33
		declaration-specifiers => shift 61
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 293
		type-specifier => shift 294
		specifier-qualifier-list => shift 218
		")" => reduce 85
		"*" => reduce 153
		"[" => reduce 153
		"(" => reduce 153

294:	specifier-qualifier-list => type-specifier . ("(" "[" "*")
	specifier-qualifier-list => type-specifier . specifier-qualifier-list ("(" "[" "*")
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-specifier . declaration-specifiers (")")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-specifier . (")")
		"inline" => shift 14
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		storage-class-specifier => shift 33
		declaration-specifiers => shift 60
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 293
		type-specifier => shift 294
		specifier-qualifier-list => shift 217
		")" => reduce 83
		"*" => reduce 151
		"[" => reduce 151
		"(" => reduce 151

295:	type-name => declaration-specifiers . (")")
		")" => reduce 203

296:	type-name => specifier-qualifier-list . abstract-declarator (")")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 320
		"(" => shift 362
		"*" => shift 52
		direct-abstract-declarator => shift 322
		pointer => shift 363
		abstract-declarator => shift 364

297:	postfix-expression => "(" type-name . ")" "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => "(" type-name . ")" "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => "(" type-name . ")" cast-expression ("=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		")" => shift 361

298:	direct-declarator => direct-declarator "[" "*" "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 183

299:	logical-and-expression => logical-and-expression "&&" . bitwise-or-expression (":" "}" ")" "]" "&&" "||" "," "?" ";")
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 360

300:	bitwise-or-expression => bitwise-or-expression "|" . bitwise-xor-expression (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 359

301:	bitwise-xor-expression => bitwise-xor-expression "^" . bitwise-and-expression (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 358

302:	bitwise-and-expression => bitwise-and-expression "&" . equality-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 357

303:	equality-expression => equality-expression "==" . relational-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 356

304:	equality-expression => equality-expression "!=" . relational-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 355

305:	relational-expression => relational-expression "<" . shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 354

306:	relational-expression => relational-expression ">" . shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 353

307:	relational-expression => relational-expression "<=" . shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 352

308:	relational-expression => relational-expression ">=" . shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 351

309:	shift-expression => shift-expression "<<" . additive-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 350

310:	shift-expression => shift-expression ">>" . additive-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 349

311:	additive-expression => additive-expression "+" . multiplicative-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 348

312:	additive-expression => additive-expression "-" . multiplicative-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 347

313:	multiplicative-expression => multiplicative-expression "*" . cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 346

314:	multiplicative-expression => multiplicative-expression "/" . cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 345

315:	multiplicative-expression => multiplicative-expression "%" . cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 344

316:	type-qualifier-list => type-qualifier-list . type-qualifier ("const" "volatile" "restrict" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" "static" type-qualifier-list . assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 343
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128

317:	direct-declarator => direct-declarator "(" parameter-type-list ")" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 184

318:	parameter-type-list => parameter-list "," . "..." (")")
	parameter-list => parameter-list "," . parameter-declaration (")" ",")
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 133
		parameter-declaration => shift 341
		"..." => shift 342

319:	parameter-declaration => declaration-specifiers declarator . ("," ")")
		")" => reduce 197
		"," => reduce 197

320:	direct-abstract-declarator => "[" . "*" "]" ("," ")" "[" "(")
	direct-abstract-declarator => "[" . type-qualifier-list "static" assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" . "static" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => "[" . "static" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => "[" . "]" ("," ")" "[" "(")
	direct-abstract-declarator => "[" . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-abstract-declarator => "[" . type-qualifier-list "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" . type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 336
		"]" => shift 337
		"static" => shift 338
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 339
		"*" => shift 340

321:	direct-declarator => "(" . declarator ")" ("," ")" "[" "(")
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
	direct-abstract-declarator => "(" . ")" ("," ")" "[" "(")
	direct-abstract-declarator => "(" . parameter-type-list ")" ("," ")" "[" "(")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-abstract-declarator => "(" . abstract-declarator ")" ("," ")" "[" "(")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 320
		direct-abstract-declarator => shift 322
		abstract-declarator => shift 333
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 133
		parameter-declaration => shift 134
		parameter-list => shift 135
		parameter-type-list => shift 334
		")" => shift 335
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 321
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 323
		declarator => shift 113

322:	direct-abstract-declarator => direct-abstract-declarator . "(" ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "(" parameter-type-list ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "*" "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "static" assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	abstract-declarator => direct-abstract-declarator . ("," ")")
		"[" => shift 331
		"(" => shift 332
		")" => reduce 206
		"," => reduce 206

323:	declarator => pointer . direct-declarator ("," ")")
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	abstract-declarator => pointer . direct-abstract-declarator ("," ")")
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	abstract-declarator => pointer . ("," ")")
		"[" => shift 320
		direct-abstract-declarator => shift 330
		'cpp-ident => shift 50
		'$ident => shift 51
		"(" => shift 321
		identifier => shift 54
		direct-declarator => shift 110
		")" => reduce 204
		"," => reduce 204

324:	parameter-declaration => declaration-specifiers abstract-declarator . ("," ")")
		")" => reduce 198
		"," => reduce 198

325:	direct-declarator => direct-declarator "(" identifier-list ")" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 185

326:	identifier-list => identifier-list "," . identifier ("," ")")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 329

327:	declaration => declaration-specifiers init-declarator-list $P1 ";" opt-code-comment . ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 78

328:	external-declaration => "extern" '$string "{" translation-unit "}" . ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		$default => reduce 281

329:	identifier-list => identifier-list "," identifier . ("," ")")
		")" => reduce 201
		"," => reduce 201

330:	direct-abstract-declarator => direct-abstract-declarator . "(" ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "(" parameter-type-list ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "*" "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "static" assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	abstract-declarator => pointer direct-abstract-declarator . ("," ")")
		"[" => shift 331
		"(" => shift 332
		")" => reduce 205
		"," => reduce 205

331:	direct-abstract-declarator => direct-abstract-declarator "[" . type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" . type-qualifier-list "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-abstract-declarator => direct-abstract-declarator "[" . "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator "[" . "static" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator "[" . "static" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator "[" . type-qualifier-list "static" assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" . "*" "]" ("," ")" "[" "(")
		"static" => shift 437
		"]" => shift 438
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 439
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 440
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 441

332:	direct-abstract-declarator => direct-abstract-declarator "(" . parameter-type-list ")" ("," ")" "[" "(")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-abstract-declarator => direct-abstract-declarator "(" . ")" ("," ")" "[" "(")
		")" => shift 435
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 133
		parameter-declaration => shift 134
		parameter-list => shift 135
		parameter-type-list => shift 436

333:	direct-abstract-declarator => "(" abstract-declarator . ")" ("," ")" "[" "(")
		")" => shift 434

334:	direct-abstract-declarator => "(" parameter-type-list . ")" ("," ")" "[" "(")
		")" => shift 433

335:	direct-abstract-declarator => "(" ")" . ("," ")" "[" "(")
		$default => reduce 227

336:	direct-abstract-declarator => "[" assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 432

337:	direct-abstract-declarator => "[" "]" . ("," ")" "[" "(")
		$default => reduce 218

338:	direct-abstract-declarator => "[" "static" . type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" "static" . type-qualifier-list "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 431

339:	direct-abstract-declarator => "[" type-qualifier-list . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-abstract-declarator => "[" type-qualifier-list . "]" ("," ")" "[" "(")
	type-qualifier-list => type-qualifier-list . type-qualifier ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "]" "const" "volatile" "restrict" "static")
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" type-qualifier-list . "static" assignment-expression "]" ("," ")" "[" "(")
		"static" => shift 428
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		"]" => shift 429
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 430

340:	unary-operator => "*" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	direct-abstract-declarator => "[" "*" . "]" ("," ")" "[" "(")
		"]" => shift 427
		$default => reduce 25

341:	parameter-list => parameter-list "," parameter-declaration . (")" ",")
		"," => reduce 196
		")" => reduce 196

342:	parameter-type-list => parameter-list "," "..." . (")")
		")" => reduce 194

343:	direct-declarator => direct-declarator "[" "static" type-qualifier-list assignment-expression . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"]" => shift 426

344:	multiplicative-expression => multiplicative-expression "%" cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 35

345:	multiplicative-expression => multiplicative-expression "/" cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 34

346:	multiplicative-expression => multiplicative-expression "*" cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 33

347:	multiplicative-expression => multiplicative-expression . "%" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	multiplicative-expression => multiplicative-expression . "/" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	multiplicative-expression => multiplicative-expression . "*" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	additive-expression => additive-expression "-" multiplicative-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 313
		"/" => shift 314
		"%" => shift 315
		$default => reduce 38

348:	multiplicative-expression => multiplicative-expression . "%" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	multiplicative-expression => multiplicative-expression . "/" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	multiplicative-expression => multiplicative-expression . "*" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	additive-expression => additive-expression "+" multiplicative-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 313
		"/" => shift 314
		"%" => shift 315
		$default => reduce 37

349:	additive-expression => additive-expression . "-" multiplicative-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	additive-expression => additive-expression . "+" multiplicative-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	shift-expression => shift-expression ">>" additive-expression . (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 311
		"-" => shift 312
		$default => reduce 41

350:	additive-expression => additive-expression . "-" multiplicative-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	additive-expression => additive-expression . "+" multiplicative-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	shift-expression => shift-expression "<<" additive-expression . (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 311
		"-" => shift 312
		$default => reduce 40

351:	shift-expression => shift-expression . ">>" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	shift-expression => shift-expression . "<<" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	relational-expression => relational-expression ">=" shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
		"<<" => shift 309
		">>" => shift 310
		$default => reduce 46

352:	shift-expression => shift-expression . ">>" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	shift-expression => shift-expression . "<<" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	relational-expression => relational-expression "<=" shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
		"<<" => shift 309
		">>" => shift 310
		$default => reduce 45

353:	shift-expression => shift-expression . ">>" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	shift-expression => shift-expression . "<<" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	relational-expression => relational-expression ">" shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
		"<<" => shift 309
		">>" => shift 310
		$default => reduce 44

354:	shift-expression => shift-expression . ">>" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	shift-expression => shift-expression . "<<" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	relational-expression => relational-expression "<" shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
		"<<" => shift 309
		">>" => shift 310
		$default => reduce 43

355:	relational-expression => relational-expression . ">=" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . "<=" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . ">" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . "<" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	equality-expression => equality-expression "!=" relational-expression . (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 305
		">" => shift 306
		"<=" => shift 307
		">=" => shift 308
		$default => reduce 49

356:	relational-expression => relational-expression . ">=" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . "<=" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . ">" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . "<" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	equality-expression => equality-expression "==" relational-expression . (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 305
		">" => shift 306
		"<=" => shift 307
		">=" => shift 308
		$default => reduce 48

357:	equality-expression => equality-expression . "!=" relational-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=")
	equality-expression => equality-expression . "==" relational-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=")
	bitwise-and-expression => bitwise-and-expression "&" equality-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
		"==" => shift 303
		"!=" => shift 304
		$default => reduce 51

358:	bitwise-and-expression => bitwise-and-expression . "&" equality-expression (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";" "&")
	bitwise-xor-expression => bitwise-xor-expression "^" bitwise-and-expression . (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 302
		$default => reduce 53

359:	bitwise-xor-expression => bitwise-xor-expression . "^" bitwise-and-expression (":" "}" ")" "]" "," "||" "&&" "|" ";" "?" "^")
	bitwise-or-expression => bitwise-or-expression "|" bitwise-xor-expression . (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
		"^" => shift 301
		$default => reduce 55

360:	bitwise-or-expression => bitwise-or-expression . "|" bitwise-xor-expression (":" "}" ")" "]" "&&" "||" "," "?" ";" "|")
	logical-and-expression => logical-and-expression "&&" bitwise-or-expression . (":" "}" ")" "]" "&&" "||" "," "?" ";")
		"|" => shift 300
		$default => reduce 57

361:	cast-expression => "(" type-name ")" . cast-expression ("=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	postfix-expression => "(" type-name ")" . "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => "(" type-name ")" . "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		"{" => shift 424
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 425

362:	direct-abstract-declarator => "(" . ")" (")" "[" "(")
	direct-abstract-declarator => "(" . parameter-type-list ")" (")" "[" "(")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-abstract-declarator => "(" . abstract-declarator ")" (")" "[" "(")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 320
		"(" => shift 362
		"*" => shift 52
		direct-abstract-declarator => shift 322
		pointer => shift 363
		abstract-declarator => shift 333
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 133
		parameter-declaration => shift 134
		parameter-list => shift 135
		parameter-type-list => shift 334
		")" => shift 335

363:	abstract-declarator => pointer . direct-abstract-declarator (")")
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	abstract-declarator => pointer . (")")
		"[" => shift 320
		"(" => shift 362
		direct-abstract-declarator => shift 330
		")" => reduce 204

364:	type-name => specifier-qualifier-list abstract-declarator . (")")
		")" => reduce 202

365:	primary-expression => "(" expression ")" . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 5

366:	logical-and-expression => logical-and-expression . "&&" bitwise-or-expression (":" "}" ")" "]" "," "||" ";" "?" "&&")
	logical-or-expression => logical-or-expression "||" logical-and-expression . (":" "}" ")" "]" "," "||" ";" "?")
		"&&" => shift 299
		$default => reduce 59

367:	expression => expression . "," assignment-expression ("," ":")
	conditional-expression => logical-or-expression "?" expression . ":" conditional-expression (":" "}" ")" "]" "," ";")
		":" => shift 423
		"," => shift 243

368:	unary-expression => "sizeof" "(" type-name . ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	postfix-expression => "(" type-name . ")" "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	postfix-expression => "(" type-name . ")" "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
		")" => shift 422

369:	postfix-expression => "(" type-name . ")" "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	postfix-expression => "(" type-name . ")" "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
		")" => shift 421

370:	postfix-expression => postfix-expression "->" identifier . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 11

371:	postfix-expression => postfix-expression "." identifier . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 10

372:	postfix-expression => postfix-expression "(" ")" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 9

373:	argument-expression-list => assignment-expression . ("," ")")
		")" => reduce 16
		"," => reduce 16

374:	argument-expression-list => argument-expression-list . "," assignment-expression ("," ")")
	postfix-expression => postfix-expression "(" argument-expression-list . ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		")" => shift 419
		"," => shift 420

375:	expression => expression . "," assignment-expression ("," "]")
	postfix-expression => postfix-expression "[" expression . "]" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		"]" => shift 418
		"," => shift 243

376:	assignment-expression => unary-expression assignment-operator assignment-expression . (":" "}" ")" "]" "," ";")
		$default => reduce 63

377:	direct-declarator => direct-declarator "[" type-qualifier-list "*" "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 182

378:	direct-declarator => direct-declarator "[" type-qualifier-list "static" assignment-expression . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"]" => shift 417

379:	direct-declarator => direct-declarator "[" type-qualifier-list assignment-expression "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 176

380:	initializer => "{" initializer-list "," . "}" (";" "}" ",")
	initializer-list => initializer-list "," . designation initializer ("}" ",")
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	initializer-list => initializer-list "," . initializer ("}" ",")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 414
		"." => shift 254
		"[" => shift 255
		designator => shift 256
		designator-list => shift 257
		designation => shift 415
		"}" => shift 416

381:	initializer => "{" initializer-list "}" . (";" "}" ",")
		"," => reduce 230
		"}" => reduce 230
		";" => reduce 230

382:	initializer-list => designation initializer . ("}" ",")
		"," => reduce 232
		"}" => reduce 232

383:	designation => designator-list "=" . ("{" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 236

384:	designator-list => designator-list designator . ("[" "." "=")
		"=" => reduce 238
		"." => reduce 238
		"[" => reduce 238

385:	designator => "[" constant-expression . "]" ("." "[" "=")
		"]" => shift 413

386:	designator => "." identifier . ("." "[" "=")
		"=" => reduce 240
		"[" => reduce 240
		"." => reduce 240

387:	jump-statement => "return" expression ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 273

388:	jump-statement => "goto" identifier ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 270

389:	initial-clause => declaration . (";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 269

390:	initial-clause => ";" . (";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 268

391:	expression => expression . "," assignment-expression ("," ";")
	initial-clause => expression . ";" (";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		";" => shift 412
		"," => shift 243

392:	iteration-statement => "for" "(" initial-clause . ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	iteration-statement => "for" "(" initial-clause . ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	iteration-statement => "for" "(" initial-clause . expression ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	iteration-statement => "for" "(" initial-clause . expression ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 410
		";" => shift 411

393:	iteration-statement => "do" statement "while" . "(" expression ")" ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		"(" => shift 409

394:	expression => expression . "," assignment-expression ("," ")")
	iteration-statement => "while" "(" expression . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		")" => shift 408
		"," => shift 243

395:	expression => expression . "," assignment-expression ("," ")")
	selection-statement => "switch" "(" expression . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		")" => shift 407
		"," => shift 243

396:	selection-statement => "if" "(" expression . ")" statement "else" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => expression . "," assignment-expression ("," ")")
	selection-statement => "if" "(" expression . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		"," => shift 243
		")" => shift 406

397:	expression => expression "," assignment-expression . ("]" ":" ")" "," ";")
		$default => reduce 76

398:	labeled-statement => "default" ":" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 249

399:	labeled-statement => "case" constant-expression ":" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 405

400:	labeled-statement => identifier ":" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 247

401:	struct-declarator => declarator ":" constant-expression . ("," ";")
		";" => reduce 157
		"," => reduce 157

402:	struct-declarator-list => struct-declarator-list "," struct-declarator . ("," ";")
		";" => reduce 155
		"," => reduce 155

403:	struct-declaration => specifier-qualifier-list struct-declarator-list ";" opt-code-comment . ('$lone-comm "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "}")
		$default => reduce 149

404:	enum-specifier => "enum" identifier "{" enumerator-list "," "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 160

405:	labeled-statement => "case" constant-expression ":" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 248

406:	selection-statement => "if" "(" expression ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	selection-statement => "if" "(" expression ")" . statement "else" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 463

407:	selection-statement => "switch" "(" expression ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 462

408:	iteration-statement => "while" "(" expression ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 461

409:	iteration-statement => "do" statement "while" "(" . expression ")" ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 460

410:	iteration-statement => "for" "(" initial-clause expression . ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => expression . "," assignment-expression ("," ";")
	iteration-statement => "for" "(" initial-clause expression . ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		"," => shift 243
		";" => shift 459

411:	iteration-statement => "for" "(" initial-clause ";" . expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	iteration-statement => "for" "(" initial-clause ";" . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		")" => shift 457
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 458

412:	initial-clause => expression ";" . (";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 267

413:	designator => "[" constant-expression "]" . ("." "[" "=")
		"=" => reduce 239
		"[" => reduce 239
		"." => reduce 239

414:	initializer-list => initializer-list "," initializer . ("}" ",")
		"," => reduce 235
		"}" => reduce 235

415:	initializer-list => initializer-list "," designation . initializer ("}" ",")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 456

416:	initializer => "{" initializer-list "," "}" . (";" "}" ",")
		"," => reduce 231
		"}" => reduce 231
		";" => reduce 231

417:	direct-declarator => direct-declarator "[" type-qualifier-list "static" assignment-expression "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 181

418:	postfix-expression => postfix-expression "[" expression "]" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 7

419:	postfix-expression => postfix-expression "(" argument-expression-list ")" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 8

420:	argument-expression-list => argument-expression-list "," . assignment-expression ("," ")")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 455

421:	postfix-expression => "(" type-name ")" . "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	postfix-expression => "(" type-name ")" . "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
		"{" => shift 424

422:	postfix-expression => "(" type-name ")" . "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	postfix-expression => "(" type-name ")" . "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	unary-expression => "sizeof" "(" type-name ")" . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		"{" => shift 424
		$default => reduce 23

423:	conditional-expression => logical-or-expression "?" expression ":" . conditional-expression (":" "}" ")" "]" "," ";")
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 226
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 454

424:	postfix-expression => "(" type-name ")" "{" . initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" type-name ")" "{" . initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		"." => shift 254
		"[" => shift 255
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		designator => shift 256
		unary-expression => shift 170
		conditional-expression => shift 171
		designator-list => shift 257
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 258
		designation => shift 259
		initializer-list => shift 453

425:	cast-expression => "(" type-name ")" cast-expression . ("=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 31

426:	direct-declarator => direct-declarator "[" "static" type-qualifier-list assignment-expression "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 180

427:	direct-abstract-declarator => "[" "*" "]" . ("," ")" "[" "(")
		$default => reduce 223

428:	direct-abstract-declarator => "[" type-qualifier-list "static" . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 452

429:	direct-abstract-declarator => "[" type-qualifier-list "]" . ("," ")" "[" "(")
		$default => reduce 216

430:	direct-abstract-declarator => "[" type-qualifier-list assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 451

431:	direct-abstract-declarator => "[" "static" type-qualifier-list . "]" ("," ")" "[" "(")
	type-qualifier-list => type-qualifier-list . type-qualifier ("]" "const" "volatile" "restrict" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" "static" type-qualifier-list . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 449
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		"]" => shift 450

432:	direct-abstract-declarator => "[" assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 217

433:	direct-abstract-declarator => "(" parameter-type-list ")" . ("," ")" "[" "(")
		$default => reduce 226

434:	direct-abstract-declarator => "(" abstract-declarator ")" . ("," ")" "[" "(")
		$default => reduce 207

435:	direct-abstract-declarator => direct-abstract-declarator "(" ")" . ("," ")" "[" "(")
		$default => reduce 225

436:	direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list . ")" ("," ")" "[" "(")
		")" => shift 448

437:	direct-abstract-declarator => direct-abstract-declarator "[" "static" . type-qualifier-list "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" "static" . type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 447

438:	direct-abstract-declarator => direct-abstract-declarator "[" "]" . ("," ")" "[" "(")
		$default => reduce 211

439:	direct-abstract-declarator => direct-abstract-declarator "[" "*" . "]" ("," ")" "[" "(")
	unary-operator => "*" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		"]" => shift 446
		$default => reduce 25

440:	direct-abstract-declarator => direct-abstract-declarator "[" assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 445

441:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list . "static" assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list . "]" ("," ")" "[" "(")
	type-qualifier-list => type-qualifier-list . type-qualifier ("static" "]" "const" "volatile" "restrict" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 442
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		"]" => shift 443
		"static" => shift 444

442:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 477

443:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "]" . ("," ")" "[" "(")
		$default => reduce 209

444:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 476

445:	direct-abstract-declarator => direct-abstract-declarator "[" assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 210

446:	direct-abstract-declarator => direct-abstract-declarator "[" "*" "]" . ("," ")" "[" "(")
		$default => reduce 222

447:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	type-qualifier-list => type-qualifier-list . type-qualifier ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "const" "volatile" "restrict" "]")
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list . "]" ("," ")" "[" "(")
		"]" => shift 474
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 475

448:	direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list ")" . ("," ")" "[" "(")
		$default => reduce 224

449:	direct-abstract-declarator => "[" "static" type-qualifier-list assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 473

450:	direct-abstract-declarator => "[" "static" type-qualifier-list "]" . ("," ")" "[" "(")
		$default => reduce 220

451:	direct-abstract-declarator => "[" type-qualifier-list assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 215

452:	direct-abstract-declarator => "[" type-qualifier-list "static" assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 472

453:	postfix-expression => "(" type-name ")" "{" initializer-list . "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	initializer-list => initializer-list . "," initializer ("," "}")
	initializer-list => initializer-list . "," designation initializer ("," "}")
	postfix-expression => "(" type-name ")" "{" initializer-list . "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		"}" => shift 470
		"," => shift 471

454:	conditional-expression => logical-or-expression "?" expression ":" conditional-expression . (":" "}" ")" "]" "," ";")
		$default => reduce 61

455:	argument-expression-list => argument-expression-list "," assignment-expression . ("," ")")
		")" => reduce 17
		"," => reduce 17

456:	initializer-list => initializer-list "," designation initializer . ("}" ",")
		"," => reduce 234
		"}" => reduce 234

457:	iteration-statement => "for" "(" initial-clause ";" ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 469

458:	expression => expression . "," assignment-expression ("," ")")
	iteration-statement => "for" "(" initial-clause ";" expression . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		")" => shift 468
		"," => shift 243

459:	iteration-statement => "for" "(" initial-clause expression ";" . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	iteration-statement => "for" "(" initial-clause expression ";" . expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 466
		")" => shift 467

460:	expression => expression . "," assignment-expression ("," ")")
	iteration-statement => "do" statement "while" "(" expression . ")" ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		")" => shift 465
		"," => shift 243

461:	iteration-statement => "while" "(" expression ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 261

462:	selection-statement => "switch" "(" expression ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 260

463:	selection-statement => "if" "(" expression ")" statement . "else" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	selection-statement => "if" "(" expression ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		"else" => shift 464
		$default => reduce 258
		["else" => reduce 258] REMOVED by precedence

464:	selection-statement => "if" "(" expression ")" statement "else" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 485

465:	iteration-statement => "do" statement "while" "(" expression ")" . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		";" => shift 484

466:	expression => expression . "," assignment-expression ("," ")")
	iteration-statement => "for" "(" initial-clause expression ";" expression . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		")" => shift 483
		"," => shift 243

467:	iteration-statement => "for" "(" initial-clause expression ";" ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 482

468:	iteration-statement => "for" "(" initial-clause ";" expression ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 481

469:	iteration-statement => "for" "(" initial-clause ";" ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 266

470:	postfix-expression => "(" type-name ")" "{" initializer-list "}" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 14

471:	initializer-list => initializer-list "," . designation initializer ("," "}")
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	initializer-list => initializer-list "," . initializer ("," "}")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" type-name ")" "{" initializer-list "," . "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		"}" => shift 480
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 414
		"." => shift 254
		"[" => shift 255
		designator => shift 256
		designator-list => shift 257
		designation => shift 415

472:	direct-abstract-declarator => "[" type-qualifier-list "static" assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 221

473:	direct-abstract-declarator => "[" "static" type-qualifier-list assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 219

474:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list "]" . ("," ")" "[" "(")
		$default => reduce 213

475:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 479

476:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 478

477:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 208

478:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 214

479:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 212

480:	postfix-expression => "(" type-name ")" "{" initializer-list "," "}" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 15

481:	iteration-statement => "for" "(" initial-clause ";" expression ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 265

482:	iteration-statement => "for" "(" initial-clause expression ";" ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 264

483:	iteration-statement => "for" "(" initial-clause expression ";" expression ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		jump-statement => shift 195
		iteration-statement => shift 196
		selection-statement => shift 197
		expression-statement => shift 198
		compound-statement => shift 199
		labeled-statement => shift 200
		statement => shift 486

484:	iteration-statement => "do" statement "while" "(" expression ")" ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 262

485:	selection-statement => "if" "(" expression ")" statement "else" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 259

486:	iteration-statement => "for" "(" initial-clause expression ";" expression ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}")
		$default => reduce 263

