  Copyright (C) 2015 Matthew R. Wette
  
  This software is covered by the GNU GENERAL PUBLIC LICENCE, Version 3,
  or any later version published by the Free Software Foundation.  See the
  file COPYING included with the this distribution.

0 $start => translation-unit-proxy
1 translation-unit-proxy => translation-unit
2 primary-expression => identifier
3 primary-expression => constant
4 primary-expression => string-literal
5 primary-expression => "(" expression ")"
6 postfix-expression => primary-expression
7 postfix-expression => postfix-expression "[" expression "]"
8 postfix-expression => postfix-expression "(" argument-expression-list ")"
9 postfix-expression => postfix-expression "(" ")"
10 postfix-expression => postfix-expression "." identifier
11 postfix-expression => postfix-expression "->" identifier
12 postfix-expression => postfix-expression "++"
13 postfix-expression => postfix-expression "--"
14 postfix-expression => "(" type-name ")" "{" initializer-list "}"
15 postfix-expression => "(" type-name ")" "{" initializer-list "," "}"
16 argument-expression-list => assignment-expression
17 argument-expression-list => argument-expression-list "," assignment-expression
18 unary-expression => postfix-expression
19 unary-expression => "++" unary-expression
20 unary-expression => "--" unary-expression
21 unary-expression => unary-operator cast-expression
22 unary-expression => "sizeof" unary-expression
23 unary-expression => "sizeof" "(" type-name ")"
24 unary-operator => "&"
25 unary-operator => "*"
26 unary-operator => "+"
27 unary-operator => "-"
28 unary-operator => "~"
29 unary-operator => "!"
30 cast-expression => unary-expression
31 cast-expression => "(" type-name ")" cast-expression
32 multiplicative-expression => cast-expression
33 multiplicative-expression => multiplicative-expression "*" cast-expression
34 multiplicative-expression => multiplicative-expression "/" cast-expression
35 multiplicative-expression => multiplicative-expression "%" cast-expression
36 additive-expression => multiplicative-expression
37 additive-expression => additive-expression "+" multiplicative-expression
38 additive-expression => additive-expression "-" multiplicative-expression
39 shift-expression => additive-expression
40 shift-expression => shift-expression "<<" additive-expression
41 shift-expression => shift-expression ">>" additive-expression
42 relational-expression => shift-expression
43 relational-expression => relational-expression "<" shift-expression
44 relational-expression => relational-expression ">" shift-expression
45 relational-expression => relational-expression "<=" shift-expression
46 relational-expression => relational-expression ">=" shift-expression
47 equality-expression => relational-expression
48 equality-expression => equality-expression "==" relational-expression
49 equality-expression => equality-expression "!=" relational-expression
50 bitwise-and-expression => equality-expression
51 bitwise-and-expression => bitwise-and-expression "&" equality-expression
52 bitwise-xor-expression => bitwise-and-expression
53 bitwise-xor-expression => bitwise-xor-expression "^" bitwise-and-expression
54 bitwise-or-expression => bitwise-xor-expression
55 bitwise-or-expression => bitwise-or-expression "|" bitwise-xor-expression
56 logical-and-expression => bitwise-or-expression
57 logical-and-expression => logical-and-expression "&&" bitwise-or-expression
58 logical-or-expression => logical-and-expression
59 logical-or-expression => logical-or-expression "||" logical-and-expression
60 conditional-expression => logical-or-expression
61 conditional-expression => logical-or-expression "?" expression ":" conditional-expression
62 assignment-expression => conditional-expression
63 assignment-expression => unary-expression assignment-operator assignment-expression
64 assignment-operator => "="
65 assignment-operator => "+="
66 assignment-operator => "-="
67 assignment-operator => "*="
68 assignment-operator => "/="
69 assignment-operator => "%="
70 assignment-operator => "<<="
71 assignment-operator => ">>="
72 assignment-operator => "&="
73 assignment-operator => "^="
74 assignment-operator => "|="
75 expression => assignment-expression
76 expression => expression "," assignment-expression
77 constant-expression => conditional-expression
78 declaration => declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
79 declaration => declaration-specifiers ";" opt-code-comment
80 $P1 =>
81 declaration-specifiers => storage-class-specifier
82 declaration-specifiers => storage-class-specifier declaration-specifiers
83 declaration-specifiers => type-specifier
84 declaration-specifiers => type-specifier declaration-specifiers
85 declaration-specifiers => type-qualifier
86 declaration-specifiers => type-qualifier declaration-specifiers
87 declaration-specifiers => function-specifier
88 declaration-specifiers => function-specifier declaration-specifiers
89 init-declarator-list => init-declarator
90 init-declarator-list => init-declarator-list "," init-declarator
91 init-declarator => declarator
92 init-declarator => declarator "=" initializer
93 storage-class-specifier => "auto"
94 storage-class-specifier => "extern"
95 storage-class-specifier => "register"
96 storage-class-specifier => "static"
97 storage-class-specifier => "typedef"
98 type-specifier => "void"
99 type-specifier => fixed-type-specifier
100 type-specifier => float-type-specifier
101 type-specifier => "_Bool"
102 type-specifier => complex-type-specifier
103 type-specifier => struct-or-union-specifier
104 type-specifier => enum-specifier
105 type-specifier => typedef-name
106 fixed-type-specifier => "short"
107 fixed-type-specifier => "short" "int"
108 fixed-type-specifier => "signed" "short"
109 fixed-type-specifier => "signed" "short" "int"
110 fixed-type-specifier => "int"
111 fixed-type-specifier => "signed"
112 fixed-type-specifier => "signed" "int"
113 fixed-type-specifier => "long"
114 fixed-type-specifier => "long" "int"
115 fixed-type-specifier => "signed" "long"
116 fixed-type-specifier => "signed" "long" "int"
117 fixed-type-specifier => "long" "long"
118 fixed-type-specifier => "long" "long" "int"
119 fixed-type-specifier => "signed" "long" "long"
120 fixed-type-specifier => "signed" "long" "long" "int"
121 fixed-type-specifier => "unsigned" "short" "int"
122 fixed-type-specifier => "unsigned" "short"
123 fixed-type-specifier => "unsigned" "int"
124 fixed-type-specifier => "unsigned"
125 fixed-type-specifier => "unsigned" "long" "int"
126 fixed-type-specifier => "unsigned" "long"
127 fixed-type-specifier => "unsigned" "long" "long" "int"
128 fixed-type-specifier => "unsigned" "long" "long"
129 fixed-type-specifier => "char"
130 fixed-type-specifier => "signed" "char"
131 fixed-type-specifier => "unsigned" "char"
132 float-type-specifier => "float"
133 float-type-specifier => "double"
134 float-type-specifier => "long" "double"
135 complex-type-specifier => "_Complex"
136 complex-type-specifier => "float" "_Complex"
137 complex-type-specifier => "double" "_Complex"
138 complex-type-specifier => "long" "double" "_Complex"
139 struct-or-union-specifier => "struct" identifier "{" struct-declaration-list "}"
140 struct-or-union-specifier => "struct" "{" struct-declaration-list "}"
141 struct-or-union-specifier => "struct" identifier
142 struct-or-union-specifier => "union" identifier "{" struct-declaration-list "}"
143 struct-or-union-specifier => "union" "{" struct-declaration-list "}"
144 struct-or-union-specifier => "union" identifier
145 struct-declaration-list => struct-declaration
146 struct-declaration-list => lone-comment
147 struct-declaration-list => struct-declaration-list struct-declaration
148 struct-declaration-list => struct-declaration-list lone-comment
149 struct-declaration => specifier-qualifier-list struct-declarator-list ";" opt-code-comment
150 specifier-qualifier-list => type-specifier specifier-qualifier-list
151 specifier-qualifier-list => type-specifier
152 specifier-qualifier-list => type-qualifier specifier-qualifier-list
153 specifier-qualifier-list => type-qualifier
154 struct-declarator-list => struct-declarator
155 struct-declarator-list => struct-declarator-list "," struct-declarator
156 struct-declarator => declarator
157 struct-declarator => declarator ":" constant-expression
158 struct-declarator => ":" constant-expression
159 enum-specifier => "enum" identifier "{" enumerator-list "}"
160 enum-specifier => "enum" identifier "{" enumerator-list "," "}"
161 enum-specifier => "enum" "{" enumerator-list "}"
162 enum-specifier => "enum" "{" enumerator-list "," "}"
163 enum-specifier => "enum" identifier
164 enumerator-list => enumerator
165 enumerator-list => enumerator-list "," enumerator
166 enumerator => identifier
167 enumerator => identifier "=" constant-expression
168 type-qualifier => "const"
169 type-qualifier => "volatile"
170 type-qualifier => "restrict"
171 function-specifier => "inline"
172 declarator => pointer direct-declarator
173 declarator => direct-declarator
174 direct-declarator => identifier
175 direct-declarator => "(" declarator ")"
176 direct-declarator => direct-declarator "[" type-qualifier-list assignment-expression "]"
177 direct-declarator => direct-declarator "[" type-qualifier-list "]"
178 direct-declarator => direct-declarator "[" assignment-expression "]"
179 direct-declarator => direct-declarator "[" "]"
180 direct-declarator => direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
181 direct-declarator => direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
182 direct-declarator => direct-declarator "[" type-qualifier-list "*" "]"
183 direct-declarator => direct-declarator "[" "*" "]"
184 direct-declarator => direct-declarator "(" parameter-type-list ")"
185 direct-declarator => direct-declarator "(" identifier-list ")"
186 direct-declarator => direct-declarator "(" ")"
187 pointer => "*" type-qualifier-list
188 pointer => "*"
189 pointer => "*" type-qualifier-list pointer
190 pointer => "*" pointer
191 type-qualifier-list => type-qualifier
192 type-qualifier-list => type-qualifier-list type-qualifier
193 parameter-type-list => parameter-list
194 parameter-type-list => parameter-list "," "..."
195 parameter-list => parameter-declaration
196 parameter-list => parameter-list "," parameter-declaration
197 parameter-declaration => declaration-specifiers declarator
198 parameter-declaration => declaration-specifiers abstract-declarator
199 parameter-declaration => declaration-specifiers
200 identifier-list => identifier
201 identifier-list => identifier-list "," identifier
202 type-name => specifier-qualifier-list abstract-declarator
203 type-name => declaration-specifiers
204 abstract-declarator => pointer
205 abstract-declarator => pointer direct-abstract-declarator
206 abstract-declarator => direct-abstract-declarator
207 direct-abstract-declarator => "(" abstract-declarator ")"
208 direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
209 direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "]"
210 direct-abstract-declarator => direct-abstract-declarator "[" assignment-expression "]"
211 direct-abstract-declarator => direct-abstract-declarator "[" "]"
212 direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
213 direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list "]"
214 direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
215 direct-abstract-declarator => "[" type-qualifier-list assignment-expression "]"
216 direct-abstract-declarator => "[" type-qualifier-list "]"
217 direct-abstract-declarator => "[" assignment-expression "]"
218 direct-abstract-declarator => "[" "]"
219 direct-abstract-declarator => "[" "static" type-qualifier-list assignment-expression "]"
220 direct-abstract-declarator => "[" "static" type-qualifier-list "]"
221 direct-abstract-declarator => "[" type-qualifier-list "static" assignment-expression "]"
222 direct-abstract-declarator => direct-abstract-declarator "[" "*" "]"
223 direct-abstract-declarator => "[" "*" "]"
224 direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list ")"
225 direct-abstract-declarator => direct-abstract-declarator "(" ")"
226 direct-abstract-declarator => "(" parameter-type-list ")"
227 direct-abstract-declarator => "(" ")"
228 typedef-name => 'typename
229 initializer => assignment-expression
230 initializer => "{" initializer-list "}"
231 initializer => "{" initializer-list "," "}"
232 initializer-list => designation initializer
233 initializer-list => initializer
234 initializer-list => initializer-list "," designation initializer
235 initializer-list => initializer-list "," initializer
236 designation => designator-list "="
237 designator-list => designator
238 designator-list => designator-list designator
239 designator => "[" constant-expression "]"
240 designator => "." identifier
241 statement => labeled-statement
242 statement => compound-statement
243 statement => expression-statement
244 statement => selection-statement
245 statement => iteration-statement
246 statement => jump-statement
247 statement => cpp-statement
248 labeled-statement => identifier ":" statement
249 labeled-statement => "case" constant-expression ":" statement
250 labeled-statement => "default" ":" statement
251 compound-statement => "{" block-item-list "}"
252 compound-statement => "{" "}"
253 block-item-list => block-item
254 block-item-list => block-item-list block-item
255 block-item => declaration
256 block-item => statement
257 expression-statement => expression ";"
258 expression-statement => ";"
259 selection-statement => "if" "(" expression ")" statement
260 selection-statement => "if" "(" expression ")" statement "else" statement
261 selection-statement => "switch" "(" expression ")" statement
262 iteration-statement => "while" "(" expression ")" statement
263 iteration-statement => "do" statement "while" "(" expression ")" ";"
264 iteration-statement => "for" "(" initial-clause expression ";" expression ")" statement
265 iteration-statement => "for" "(" initial-clause expression ";" ")" statement
266 iteration-statement => "for" "(" initial-clause ";" expression ")" statement
267 iteration-statement => "for" "(" initial-clause ";" ")" statement
268 initial-clause => expression ";"
269 initial-clause => ";"
270 initial-clause => declaration
271 jump-statement => "goto" identifier ";"
272 jump-statement => "continue" ";"
273 jump-statement => "break" ";"
274 jump-statement => "return" expression ";"
275 jump-statement => "return" ";"
276 translation-unit => external-declaration
277 translation-unit => translation-unit external-declaration
278 external-declaration => function-definition
279 external-declaration => declaration
280 external-declaration => lone-comment
281 external-declaration => cpp-statement
282 external-declaration => "extern" '$string "{" translation-unit "}"
283 function-definition => declaration-specifiers declarator declaration-list compound-statement
284 function-definition => declaration-specifiers declarator compound-statement
285 declaration-list => declaration
286 declaration-list => declaration-list declaration
287 opt-code-comment =>
288 opt-code-comment => code-comment
289 identifier => '$ident
290 identifier => 'cpp-ident
291 constant => '$fixed
292 constant => '$float
293 constant => '$chlit
294 string-literal => '$string
295 string-literal => string-literal '$string
296 code-comment => '$code-comm
297 lone-comment => '$lone-comm
298 cpp-statement => 'cpp-stmt

0:	$start => . translation-unit-proxy ('$end)
	translation-unit-proxy => . translation-unit
	translation-unit => . external-declaration
	translation-unit => . translation-unit external-declaration
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 42
		translation-unit => shift 43
		translation-unit-proxy => shift 44

1:	typedef-name => 'typename . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 228

2:	enum-specifier => "enum" . identifier ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" . "{" enumerator-list "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enum-specifier => "enum" . "{" enumerator-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enum-specifier => "enum" . identifier "{" enumerator-list "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" . identifier "{" enumerator-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 81
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 82

3:	struct-or-union-specifier => "union" . identifier ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
	struct-or-union-specifier => "union" . "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-or-union-specifier => "union" . identifier "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 79
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 80

4:	struct-or-union-specifier => "struct" . identifier ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
	struct-or-union-specifier => "struct" . "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-or-union-specifier => "struct" . identifier "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 77
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 78

5:	complex-type-specifier => "_Complex" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 135

6:	complex-type-specifier => "double" . "_Complex" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	float-type-specifier => "double" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"_Complex" => shift 76
		$default => reduce 133
		["_Complex" => reduce 133] REMOVED by precedence

7:	complex-type-specifier => "float" . "_Complex" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	float-type-specifier => "float" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"_Complex" => shift 75
		$default => reduce 132
		["_Complex" => reduce 132] REMOVED by precedence

8:	fixed-type-specifier => "char" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 129

9:	fixed-type-specifier => "unsigned" . "char" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "long" "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "long" "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "short" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" . "short" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"short" => shift 71
		"int" => shift 72
		"long" => shift 73
		"char" => shift 74
		$default => reduce 124
		["short" => reduce 124] REMOVED by precedence
		["int" => reduce 124] REMOVED by precedence
		["long" => reduce 124] REMOVED by precedence
		["char" => reduce 124] REMOVED by precedence

10:	complex-type-specifier => "long" . "double" "_Complex" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	float-type-specifier => "long" . "double" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "long" . "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "long" . "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 68
		"long" => shift 69
		"double" => shift 70
		$default => reduce 113
		["int" => reduce 113] REMOVED by precedence
		["long" => reduce 113] REMOVED by precedence
		["double" => reduce 113] REMOVED by precedence

11:	fixed-type-specifier => "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 110

12:	fixed-type-specifier => "signed" . "char" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "long" "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "long" "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "short" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" . "short" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"short" => shift 64
		"int" => shift 65
		"long" => shift 66
		"char" => shift 67
		$default => reduce 111
		["short" => reduce 111] REMOVED by precedence
		["int" => reduce 111] REMOVED by precedence
		["long" => reduce 111] REMOVED by precedence
		["char" => reduce 111] REMOVED by precedence

13:	fixed-type-specifier => "short" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "short" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 63
		$default => reduce 106
		["int" => reduce 106] REMOVED by precedence

14:	function-specifier => "inline" . ("," ")" "[" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 171

15:	type-qualifier => "restrict" . ("," ")" "[" "]" '$chlit '$float '$fixed '$string "!" "~" "-" "+" "&" "sizeof" "--" "++" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 170

16:	type-qualifier => "volatile" . ("," ")" "[" "]" '$chlit '$float '$fixed '$string "!" "~" "-" "+" "&" "sizeof" "--" "++" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 169

17:	type-qualifier => "const" . ("," ")" "[" "]" '$chlit '$float '$fixed '$string "!" "~" "-" "+" "&" "sizeof" "--" "++" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 168

18:	type-specifier => typedef-name . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 105

19:	type-specifier => enum-specifier . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 104

20:	type-specifier => struct-or-union-specifier . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 103

21:	type-specifier => complex-type-specifier . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 102

22:	type-specifier => "_Bool" . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 101

23:	type-specifier => float-type-specifier . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 100

24:	type-specifier => fixed-type-specifier . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 99

25:	type-specifier => "void" . ("," ")" "[" ":" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 98

26:	storage-class-specifier => "typedef" . ("," ")" "[" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 97

27:	storage-class-specifier => "static" . ("," ")" "[" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 96

28:	storage-class-specifier => "register" . ("," ")" "[" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 95

29:	storage-class-specifier => "auto" . ("," ")" "[" "*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 93

30:	declaration-specifiers => function-specifier . declaration-specifiers ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => function-specifier . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 62
		$default => reduce 87

31:	declaration-specifiers => type-qualifier . declaration-specifiers ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-qualifier . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 61
		$default => reduce 85

32:	declaration-specifiers => type-specifier . declaration-specifiers ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-specifier . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 60
		$default => reduce 83

33:	declaration-specifiers => storage-class-specifier . declaration-specifiers ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => storage-class-specifier . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 59
		$default => reduce 81

34:	cpp-statement => 'cpp-stmt . ('$end "else" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 298

35:	lone-comment => '$lone-comm . ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 297

36:	function-definition => declaration-specifiers . declarator compound-statement ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
	function-definition => declaration-specifiers . declarator declaration-list compound-statement ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
	declaration => declaration-specifiers . ";" opt-code-comment ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	declaration => declaration-specifiers . init-declarator-list $P1 ";" opt-code-comment ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	init-declarator-list => . init-declarator
	init-declarator-list => . init-declarator-list "," init-declarator
	init-declarator => . declarator
	init-declarator => . declarator "=" initializer
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		init-declarator => shift 47
		init-declarator-list => shift 48
		";" => shift 49
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 57

37:	storage-class-specifier => "extern" . ("*" 'cpp-ident '$ident "(" ";" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
	external-declaration => "extern" . '$string "{" translation-unit "}" ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		'$string => shift 46
		$default => reduce 94

38:	external-declaration => cpp-statement . ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		$default => reduce 281

39:	external-declaration => lone-comment . ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		$default => reduce 280

40:	external-declaration => declaration . ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		$default => reduce 279

41:	external-declaration => function-definition . ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		$default => reduce 278

42:	translation-unit => external-declaration . ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 276

43:	translation-unit => translation-unit . external-declaration ('$end "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	translation-unit-proxy => translation-unit . ('$end)
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 45
		'$end => reduce 1

44:	$start => translation-unit-proxy . ('$end)
		'$end => accept 0

45:	translation-unit => translation-unit external-declaration . ("}" '$end "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 277

46:	external-declaration => "extern" '$string . "{" translation-unit "}" ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		"{" => shift 122

47:	init-declarator-list => init-declarator . ("," ";")
		";" => reduce 89
		"," => reduce 89

48:	init-declarator-list => init-declarator-list . "," init-declarator ("," ";")
	declaration => declaration-specifiers init-declarator-list . $P1 ";" opt-code-comment ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	$P1 => .
		$P1 => shift 120
		"," => shift 121
		";" => reduce 80

49:	declaration => declaration-specifiers ";" . opt-code-comment ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	opt-code-comment => .
	opt-code-comment => . code-comment
	code-comment => . '$code-comm
		'$code-comm => shift 117
		code-comment => shift 118
		opt-code-comment => shift 119
		$default => reduce 287

50:	identifier => 'cpp-ident . ('$ident 'cpp-ident "]" "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" "?" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" ":" "}" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "(" "[" "{")
		$default => reduce 290

51:	identifier => '$ident . ('$ident 'cpp-ident "]" "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" "?" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" ":" "}" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "(" "[" "{")
		$default => reduce 289

52:	pointer => "*" . pointer ("," ")" "[" "(" '$ident 'cpp-ident)
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	pointer => "*" . type-qualifier-list pointer ("," ")" "[" "(" '$ident 'cpp-ident)
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	pointer => "*" . ("," ")" "[" "(" '$ident 'cpp-ident)
	pointer => "*" . type-qualifier-list ("," ")" "[" "(" '$ident 'cpp-ident)
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 115
		"*" => shift 52
		pointer => shift 116
		$default => reduce 188

53:	direct-declarator => "(" . declarator ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 113

54:	direct-declarator => identifier . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 174

55:	direct-declarator => direct-declarator . "(" ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "(" identifier-list ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "(" parameter-type-list ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" "*" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" type-qualifier-list "*" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" type-qualifier-list "static" assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" "static" type-qualifier-list assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" type-qualifier-list "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator . "[" type-qualifier-list assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	declarator => direct-declarator . (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
		"[" => shift 111
		"(" => shift 112
		$default => reduce 173

56:	declarator => pointer . direct-declarator (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 110

57:	init-declarator => declarator . "=" initializer ("," ";")
	init-declarator => declarator . ("," ";")
	function-definition => declaration-specifiers declarator . declaration-list compound-statement ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	declaration-list => . declaration
	declaration-list => . declaration-list declaration
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	function-definition => declaration-specifiers declarator . compound-statement ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
		"{" => shift 104
		compound-statement => shift 105
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 106
		declaration => shift 107
		declaration-list => shift 108
		"=" => shift 109
		";" => reduce 91
		"," => reduce 91

58:	storage-class-specifier => "extern" . ("," ")" "[" ";" "*" 'cpp-ident '$ident "(" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef")
		$default => reduce 94

59:	declaration-specifiers => storage-class-specifier declaration-specifiers . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 82

60:	declaration-specifiers => type-specifier declaration-specifiers . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 84

61:	declaration-specifiers => type-qualifier declaration-specifiers . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 86

62:	declaration-specifiers => function-specifier declaration-specifiers . ("[" ")" "," ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 88

63:	fixed-type-specifier => "short" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 107

64:	fixed-type-specifier => "signed" "short" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" "short" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 103
		$default => reduce 108
		["int" => reduce 108] REMOVED by precedence

65:	fixed-type-specifier => "signed" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 112

66:	fixed-type-specifier => "signed" "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" "long" . "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" "long" . "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"long" => shift 101
		"int" => shift 102
		$default => reduce 115
		["long" => reduce 115] REMOVED by precedence
		["int" => reduce 115] REMOVED by precedence

67:	fixed-type-specifier => "signed" "char" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 130

68:	fixed-type-specifier => "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 114

69:	fixed-type-specifier => "long" "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "long" "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 100
		$default => reduce 117
		["int" => reduce 117] REMOVED by precedence

70:	float-type-specifier => "long" "double" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	complex-type-specifier => "long" "double" . "_Complex" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"_Complex" => shift 99
		$default => reduce 134
		["_Complex" => reduce 134] REMOVED by precedence

71:	fixed-type-specifier => "unsigned" "short" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" "short" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 98
		$default => reduce 122
		["int" => reduce 122] REMOVED by precedence

72:	fixed-type-specifier => "unsigned" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 123

73:	fixed-type-specifier => "unsigned" "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" "long" . "long" "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" "long" . "long" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"long" => shift 96
		"int" => shift 97
		$default => reduce 126
		["long" => reduce 126] REMOVED by precedence
		["int" => reduce 126] REMOVED by precedence

74:	fixed-type-specifier => "unsigned" "char" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 131

75:	complex-type-specifier => "float" "_Complex" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 136

76:	complex-type-specifier => "double" "_Complex" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 137

77:	struct-or-union-specifier => "struct" "{" . struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 90
		lone-comment => shift 91
		struct-declaration => shift 92
		struct-declaration-list => shift 95

78:	struct-or-union-specifier => "struct" identifier . "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-or-union-specifier => "struct" identifier . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"{" => shift 94
		$default => reduce 141

79:	struct-or-union-specifier => "union" "{" . struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 90
		lone-comment => shift 91
		struct-declaration => shift 92
		struct-declaration-list => shift 93

80:	struct-or-union-specifier => "union" identifier . "{" struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-or-union-specifier => "union" identifier . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"{" => shift 87
		$default => reduce 144

81:	enum-specifier => "enum" "{" . enumerator-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" "{" . enumerator-list "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 84
		enumerator => shift 85
		enumerator-list => shift 86

82:	enum-specifier => "enum" identifier . "{" enumerator-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enum-specifier => "enum" identifier . "{" enumerator-list "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enum-specifier => "enum" identifier . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"{" => shift 83
		$default => reduce 163

83:	enum-specifier => "enum" identifier "{" . enumerator-list "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" identifier "{" . enumerator-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 84
		enumerator => shift 85
		enumerator-list => shift 224

84:	enumerator => identifier . "=" constant-expression ("," "}")
	enumerator => identifier . ("," "}")
		"=" => shift 223
		"}" => reduce 166
		"," => reduce 166

85:	enumerator-list => enumerator . ("," "}")
		"}" => reduce 164
		"," => reduce 164

86:	enum-specifier => "enum" "{" enumerator-list . "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => enumerator-list . "," enumerator ("," "}")
	enum-specifier => "enum" "{" enumerator-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 221
		"," => shift 222

87:	struct-or-union-specifier => "union" identifier "{" . struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 90
		lone-comment => shift 91
		struct-declaration => shift 92
		struct-declaration-list => shift 220

88:	specifier-qualifier-list => type-qualifier . (":" "(" '$ident 'cpp-ident "*")
	specifier-qualifier-list => type-qualifier . specifier-qualifier-list (":" "(" '$ident 'cpp-ident "*")
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 219
		$default => reduce 153

89:	specifier-qualifier-list => type-specifier . (":" "(" '$ident 'cpp-ident "*")
	specifier-qualifier-list => type-specifier . specifier-qualifier-list (":" "(" '$ident 'cpp-ident "*")
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 218
		$default => reduce 151

90:	struct-declaration => specifier-qualifier-list . struct-declarator-list ";" opt-code-comment ('$lone-comm "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "}")
	struct-declarator-list => . struct-declarator
	struct-declarator-list => . struct-declarator-list "," struct-declarator
	struct-declarator => . declarator
	struct-declarator => . declarator ":" constant-expression
	struct-declarator => . ":" constant-expression
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		":" => shift 214
		declarator => shift 215
		struct-declarator => shift 216
		struct-declarator-list => shift 217

91:	struct-declaration-list => lone-comment . ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
		$default => reduce 146

92:	struct-declaration-list => struct-declaration . ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
		$default => reduce 145

93:	struct-declaration-list => struct-declaration-list . lone-comment ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "union" "{" struct-declaration-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 213
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 90
		struct-declaration => shift 210
		'$lone-comm => shift 35
		lone-comment => shift 211

94:	struct-or-union-specifier => "struct" identifier "{" . struct-declaration-list "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 90
		lone-comment => shift 91
		struct-declaration => shift 92
		struct-declaration-list => shift 212

95:	struct-declaration-list => struct-declaration-list . lone-comment ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "struct" "{" struct-declaration-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 209
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 90
		struct-declaration => shift 210
		'$lone-comm => shift 35
		lone-comment => shift 211

96:	fixed-type-specifier => "unsigned" "long" "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "unsigned" "long" "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 208
		$default => reduce 128
		["int" => reduce 128] REMOVED by precedence

97:	fixed-type-specifier => "unsigned" "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 125

98:	fixed-type-specifier => "unsigned" "short" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 121

99:	complex-type-specifier => "long" "double" "_Complex" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 138

100:	fixed-type-specifier => "long" "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 118

101:	fixed-type-specifier => "signed" "long" "long" . "int" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	fixed-type-specifier => "signed" "long" "long" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"int" => shift 207
		$default => reduce 119
		["int" => reduce 119] REMOVED by precedence

102:	fixed-type-specifier => "signed" "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 116

103:	fixed-type-specifier => "signed" "short" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 109

104:	compound-statement => "{" . "}" ('$end '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	compound-statement => "{" . block-item-list "}" ('$end '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	block-item-list => . block-item
	block-item-list => . block-item-list block-item
	block-item => . declaration
	block-item => . statement
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		declaration-specifiers => shift 106
		statement => shift 202
		declaration => shift 203
		block-item => shift 204
		block-item-list => shift 205
		"}" => shift 206

105:	function-definition => declaration-specifiers declarator compound-statement . ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 284

106:	declaration => declaration-specifiers . ";" opt-code-comment ('cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "}" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "{")
	declaration => declaration-specifiers . init-declarator-list $P1 ";" opt-code-comment ('cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "}" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "{")
	init-declarator-list => . init-declarator
	init-declarator-list => . init-declarator-list "," init-declarator
	init-declarator => . declarator
	init-declarator => . declarator "=" initializer
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 124
		init-declarator => shift 47
		init-declarator-list => shift 48
		";" => shift 49

107:	declaration-list => declaration . ("inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
		$default => reduce 285

108:	declaration-list => declaration-list . declaration ("inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	function-definition => declaration-specifiers declarator declaration-list . compound-statement ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
		"{" => shift 104
		compound-statement => shift 178
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 106
		declaration => shift 179

109:	init-declarator => declarator "=" . initializer ("," ";")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 177

110:	direct-declarator => direct-declarator . "(" ")" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "(" identifier-list ")" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "(" parameter-type-list ")" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" "*" "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" type-qualifier-list "*" "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" type-qualifier-list "static" assignment-expression "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" "static" type-qualifier-list assignment-expression "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" assignment-expression "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" type-qualifier-list "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	direct-declarator => direct-declarator . "[" type-qualifier-list assignment-expression "]" (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{" "[" "(")
	declarator => pointer direct-declarator . (":" ")" "," ";" "=" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
		"[" => shift 111
		"(" => shift 112
		$default => reduce 172

111:	direct-declarator => direct-declarator "[" . type-qualifier-list assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . type-qualifier-list "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-declarator => direct-declarator "[" . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator "[" . "static" type-qualifier-list assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator "[" . type-qualifier-list "static" assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . type-qualifier-list "*" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . "*" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"static" => shift 137
		"]" => shift 138
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 160
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 172
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 173

112:	direct-declarator => direct-declarator "(" . parameter-type-list ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-declarator => direct-declarator "(" . identifier-list ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	identifier-list => . identifier
	identifier-list => . identifier-list "," identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	direct-declarator => direct-declarator "(" . ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		")" => shift 130
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 131
		identifier-list => shift 132
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 133
		parameter-declaration => shift 134
		parameter-list => shift 135
		parameter-type-list => shift 136

113:	direct-declarator => "(" declarator . ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		")" => shift 129

114:	type-qualifier-list => type-qualifier . ("," ")" "[" "static" "]" "++" "--" "sizeof" "&" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "const" "volatile" "restrict" "*")
		$default => reduce 191

115:	pointer => "*" type-qualifier-list . ("," ")" "[" "(" '$ident 'cpp-ident)
	type-qualifier-list => type-qualifier-list . type-qualifier ("," ")" "[" "(" '$ident 'cpp-ident "const" "volatile" "restrict" "*")
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	pointer => "*" type-qualifier-list . pointer ("," ")" "[" "(" '$ident 'cpp-ident)
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
		"*" => shift 52
		pointer => shift 127
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		$default => reduce 187

116:	pointer => "*" pointer . ("," ")" "[" "(" '$ident 'cpp-ident)
		$default => reduce 190

117:	code-comment => '$code-comm . ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 296

118:	opt-code-comment => code-comment . ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 288

119:	declaration => declaration-specifiers ";" opt-code-comment . ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 79

120:	declaration => declaration-specifiers init-declarator-list $P1 . ";" opt-code-comment ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		";" => shift 126

121:	init-declarator-list => init-declarator-list "," . init-declarator ("," ";")
	init-declarator => . declarator
	init-declarator => . declarator "=" initializer
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 124
		init-declarator => shift 125

122:	external-declaration => "extern" '$string "{" . translation-unit "}" ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
	translation-unit => . external-declaration
	translation-unit => . translation-unit external-declaration
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 42
		translation-unit => shift 123

123:	translation-unit => translation-unit . external-declaration ("extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef" "}")
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	external-declaration => "extern" '$string "{" translation-unit . "}" ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		"}" => shift 330
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 45

124:	init-declarator => declarator . "=" initializer ("," ";")
	init-declarator => declarator . ("," ";")
		"=" => shift 109
		";" => reduce 91
		"," => reduce 91

125:	init-declarator-list => init-declarator-list "," init-declarator . ("," ";")
		";" => reduce 90
		"," => reduce 90

126:	declaration => declaration-specifiers init-declarator-list $P1 ";" . opt-code-comment ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
	opt-code-comment => .
	opt-code-comment => . code-comment
	code-comment => . '$code-comm
		'$code-comm => shift 117
		code-comment => shift 118
		opt-code-comment => shift 329
		$default => reduce 287

127:	pointer => "*" type-qualifier-list pointer . ("," ")" "[" "(" '$ident 'cpp-ident)
		$default => reduce 189

128:	type-qualifier-list => type-qualifier-list type-qualifier . ("," "static" "]" "++" "--" "sizeof" "&" "+" "-" "~" "!" '$string '$fixed '$float '$chlit ")" "[" "(" '$ident 'cpp-ident "const" "volatile" "restrict" "*")
		$default => reduce 192

129:	direct-declarator => "(" declarator ")" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 175

130:	direct-declarator => direct-declarator "(" ")" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 186

131:	identifier-list => identifier . ("," ")")
		")" => reduce 200
		"," => reduce 200

132:	identifier-list => identifier-list . "," identifier ("," ")")
	direct-declarator => direct-declarator "(" identifier-list . ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		")" => shift 327
		"," => shift 328

133:	parameter-declaration => declaration-specifiers . ("," ")")
	parameter-declaration => declaration-specifiers . abstract-declarator ("," ")")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	parameter-declaration => declaration-specifiers . declarator ("," ")")
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 54
		direct-declarator => shift 55
		declarator => shift 321
		"[" => shift 322
		"(" => shift 323
		"*" => shift 52
		direct-abstract-declarator => shift 324
		pointer => shift 325
		abstract-declarator => shift 326
		")" => reduce 199
		"," => reduce 199

134:	parameter-list => parameter-declaration . (")" ",")
		"," => reduce 195
		")" => reduce 195

135:	parameter-list => parameter-list . "," parameter-declaration (")" ",")
	parameter-type-list => parameter-list . "," "..." (")")
	parameter-type-list => parameter-list . (")")
		"," => shift 320
		")" => reduce 193

136:	direct-declarator => direct-declarator "(" parameter-type-list . ")" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		")" => shift 319

137:	direct-declarator => direct-declarator "[" "static" . type-qualifier-list assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 318

138:	direct-declarator => direct-declarator "[" "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 179

139:	multiplicative-expression => cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 32

140:	multiplicative-expression => multiplicative-expression . "%" cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	multiplicative-expression => multiplicative-expression . "/" cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	multiplicative-expression => multiplicative-expression . "*" cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	additive-expression => multiplicative-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 315
		"/" => shift 316
		"%" => shift 317
		$default => reduce 36

141:	additive-expression => additive-expression . "-" multiplicative-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
	additive-expression => additive-expression . "+" multiplicative-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
	shift-expression => additive-expression . (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 313
		"-" => shift 314
		$default => reduce 39

142:	shift-expression => shift-expression . ">>" additive-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	shift-expression => shift-expression . "<<" additive-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	relational-expression => shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
		"<<" => shift 311
		">>" => shift 312
		$default => reduce 42

143:	relational-expression => relational-expression . ">=" shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	relational-expression => relational-expression . "<=" shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	relational-expression => relational-expression . ">" shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	relational-expression => relational-expression . "<" shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	equality-expression => relational-expression . (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 307
		">" => shift 308
		"<=" => shift 309
		">=" => shift 310
		$default => reduce 47

144:	equality-expression => equality-expression . "!=" relational-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	equality-expression => equality-expression . "==" relational-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	bitwise-and-expression => equality-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
		"==" => shift 305
		"!=" => shift 306
		$default => reduce 50

145:	bitwise-and-expression => bitwise-and-expression . "&" equality-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
	bitwise-xor-expression => bitwise-and-expression . (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 304
		$default => reduce 52

146:	string-literal => '$string . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" '$string "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 294

147:	constant => '$chlit . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 293

148:	constant => '$float . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 292

149:	constant => '$fixed . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 291

150:	bitwise-xor-expression => bitwise-xor-expression . "^" bitwise-and-expression (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
	bitwise-or-expression => bitwise-xor-expression . (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
		"^" => shift 303
		$default => reduce 54

151:	bitwise-or-expression => bitwise-or-expression . "|" bitwise-xor-expression (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
	logical-and-expression => bitwise-or-expression . (":" "}" ")" "]" "&&" "||" "," "?" ";")
		"|" => shift 302
		$default => reduce 56

152:	string-literal => string-literal . '$string (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" '$string "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	primary-expression => string-literal . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		'$string => shift 301
		$default => reduce 4

153:	primary-expression => constant . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 3

154:	primary-expression => identifier . (":" ";" "}" "," ")" "]" "||" "&&" "|" "^" "&" "==" "!=" ">=" "<=" ">" "<" "<<" ">>" "-" "+" "*" "/" "%" "?" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 2

155:	logical-and-expression => logical-and-expression . "&&" bitwise-or-expression (":" "}" ")" "]" "&&" "||" "," "?" ";")
	logical-or-expression => logical-and-expression . (":" "}" ")" "]" "," "||" ";" "?")
		"&&" => shift 300
		$default => reduce 58

156:	unary-operator => "!" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 29

157:	unary-operator => "~" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 28

158:	unary-operator => "-" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 27

159:	unary-operator => "+" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 26

160:	direct-declarator => direct-declarator "[" "*" . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	unary-operator => "*" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		"]" => shift 299
		$default => reduce 25

161:	unary-operator => "&" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 24

162:	cast-expression => "(" . type-name ")" cast-expression ("=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => "(" . expression ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" . type-name ")" "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	postfix-expression => "(" . type-name ")" "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 293
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 294
		type-specifier => shift 295
		storage-class-specifier => shift 33
		declaration-specifiers => shift 296
		specifier-qualifier-list => shift 297
		type-name => shift 298

163:	postfix-expression => primary-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 6

164:	logical-or-expression => logical-or-expression . "||" logical-and-expression (":" "}" ")" "]" "," "||" ";" "?")
	conditional-expression => logical-or-expression . "?" expression ":" conditional-expression (":" "}" ")" "]" "," ";")
	conditional-expression => logical-or-expression . (":" "}" ")" "]" "," ";")
		"?" => shift 291
		"||" => shift 292
		$default => reduce 60

165:	unary-expression => "sizeof" . "(" type-name ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	unary-expression => "sizeof" . unary-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 289
		"(" => shift 290

166:	unary-expression => unary-operator . cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 288

167:	unary-expression => "--" . unary-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 285
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 287

168:	unary-expression => "++" . unary-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 285
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 286

169:	postfix-expression => postfix-expression . "--" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "++" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "->" identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "." identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "(" ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "(" argument-expression-list ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => postfix-expression . "[" expression "]" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	unary-expression => postfix-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		"[" => shift 279
		"(" => shift 280
		"." => shift 281
		"->" => shift 282
		"++" => shift 283
		"--" => shift 284
		$default => reduce 18

170:	cast-expression => unary-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	assignment-expression => unary-expression . assignment-operator assignment-expression (":" "}" ")" "]" "," ";")
	assignment-operator => . "="
	assignment-operator => . "+="
	assignment-operator => . "-="
	assignment-operator => . "*="
	assignment-operator => . "/="
	assignment-operator => . "%="
	assignment-operator => . "<<="
	assignment-operator => . ">>="
	assignment-operator => . "&="
	assignment-operator => . "^="
	assignment-operator => . "|="
		"|=" => shift 267
		"^=" => shift 268
		"&=" => shift 269
		">>=" => shift 270
		"<<=" => shift 271
		"%=" => shift 272
		"/=" => shift 273
		"*=" => shift 274
		"-=" => shift 275
		"+=" => shift 276
		"=" => shift 277
		assignment-operator => shift 278
		$default => reduce 30

171:	assignment-expression => conditional-expression . (":" "}" ")" "]" "," ";")
		$default => reduce 62

172:	direct-declarator => direct-declarator "[" assignment-expression . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"]" => shift 266

173:	direct-declarator => direct-declarator "[" type-qualifier-list . "*" "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator "[" type-qualifier-list . "static" assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	direct-declarator => direct-declarator "[" type-qualifier-list . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	type-qualifier-list => type-qualifier-list . type-qualifier ("static" "]" "const" "volatile" "restrict" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" type-qualifier-list . assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 262
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		"]" => shift 263
		"static" => shift 264
		"*" => shift 265

174:	unary-operator => "*" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 25

175:	initializer => "{" . initializer-list "," "}" (";" "}" ",")
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	initializer => "{" . initializer-list "}" (";" "}" ",")
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		"." => shift 255
		"[" => shift 256
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		designator => shift 257
		unary-expression => shift 170
		conditional-expression => shift 171
		designator-list => shift 258
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 259
		designation => shift 260
		initializer-list => shift 261

176:	initializer => assignment-expression . (";" "}" ",")
		"," => reduce 229
		"}" => reduce 229
		";" => reduce 229

177:	init-declarator => declarator "=" initializer . ("," ";")
		";" => reduce 92
		"," => reduce 92

178:	function-definition => declaration-specifiers declarator declaration-list compound-statement . ('$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 283

179:	declaration-list => declaration-list declaration . ("inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "{")
		$default => reduce 286

180:	expression => assignment-expression . (":" "]" ")" "," ";")
		$default => reduce 75

181:	jump-statement => "return" . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	jump-statement => "return" . expression ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 253
		";" => shift 254

182:	jump-statement => "break" . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		";" => shift 252

183:	jump-statement => "continue" . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		";" => shift 251

184:	jump-statement => "goto" . identifier ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 250

185:	iteration-statement => "for" . "(" initial-clause ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	iteration-statement => "for" . "(" initial-clause ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	iteration-statement => "for" . "(" initial-clause expression ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	iteration-statement => "for" . "(" initial-clause expression ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		"(" => shift 249

186:	iteration-statement => "do" . statement "while" "(" expression ")" ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 248

187:	iteration-statement => "while" . "(" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		"(" => shift 247

188:	selection-statement => "switch" . "(" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		"(" => shift 246

189:	selection-statement => "if" . "(" expression ")" statement "else" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	selection-statement => "if" . "(" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		"(" => shift 245

190:	expression-statement => ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 258

191:	expression => expression . "," assignment-expression ("," ";")
	expression-statement => expression . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		";" => shift 243
		"," => shift 244

192:	labeled-statement => "default" . ":" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		":" => shift 242

193:	labeled-statement => "case" . constant-expression ":" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 228
		constant-expression => shift 241

194:	primary-expression => identifier . ("*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	labeled-statement => identifier . ":" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		":" => shift 240
		$default => reduce 2

195:	statement => cpp-statement . ("else" 'cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 247

196:	statement => jump-statement . ("else" 'cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 246

197:	statement => iteration-statement . ("else" 'cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 245

198:	statement => selection-statement . ("else" 'cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 244

199:	statement => expression-statement . ("else" 'cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 243

200:	statement => compound-statement . ("else" 'cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 242

201:	statement => labeled-statement . ("else" 'cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 241

202:	block-item => statement . ("typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 256

203:	block-item => declaration . ("typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 255

204:	block-item-list => block-item . ('cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 253

205:	block-item-list => block-item-list . block-item ('cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
	block-item => . declaration
	block-item => . statement
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	compound-statement => "{" block-item-list . "}" ('$end '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		"}" => shift 238
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		declaration-specifiers => shift 106
		statement => shift 202
		declaration => shift 203
		block-item => shift 239

206:	compound-statement => "{" "}" . ('$end '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 252

207:	fixed-type-specifier => "signed" "long" "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 120

208:	fixed-type-specifier => "unsigned" "long" "long" "int" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 127

209:	struct-or-union-specifier => "struct" "{" struct-declaration-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 140

210:	struct-declaration-list => struct-declaration-list struct-declaration . ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
		$default => reduce 147

211:	struct-declaration-list => struct-declaration-list lone-comment . ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
		$default => reduce 148

212:	struct-declaration-list => struct-declaration-list . lone-comment ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "struct" identifier "{" struct-declaration-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 237
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 90
		struct-declaration => shift 210
		'$lone-comm => shift 35
		lone-comment => shift 211

213:	struct-or-union-specifier => "union" "{" struct-declaration-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 143

214:	struct-declarator => ":" . constant-expression ("," ";")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 228
		constant-expression => shift 236

215:	struct-declarator => declarator . ":" constant-expression ("," ";")
	struct-declarator => declarator . ("," ";")
		":" => shift 235
		";" => reduce 156
		"," => reduce 156

216:	struct-declarator-list => struct-declarator . ("," ";")
		";" => reduce 154
		"," => reduce 154

217:	struct-declarator-list => struct-declarator-list . "," struct-declarator ("," ";")
	struct-declaration => specifier-qualifier-list struct-declarator-list . ";" opt-code-comment ('$lone-comm "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "}")
		";" => shift 233
		"," => shift 234

218:	specifier-qualifier-list => type-specifier specifier-qualifier-list . ("[" ":" "(" '$ident 'cpp-ident "*")
		$default => reduce 150

219:	specifier-qualifier-list => type-qualifier specifier-qualifier-list . ("[" ":" "(" '$ident 'cpp-ident "*")
		$default => reduce 152

220:	struct-declaration-list => struct-declaration-list . lone-comment ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration ("const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" '$lone-comm "}")
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "union" identifier "{" struct-declaration-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 232
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 88
		type-specifier => shift 89
		specifier-qualifier-list => shift 90
		struct-declaration => shift 210
		'$lone-comm => shift 35
		lone-comment => shift 211

221:	enum-specifier => "enum" "{" enumerator-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 161

222:	enumerator-list => enumerator-list "," . enumerator ("," "}")
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" "{" enumerator-list "," . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"}" => shift 230
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 84
		enumerator => shift 231

223:	enumerator => identifier "=" . constant-expression ("," "}")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 228
		constant-expression => shift 229

224:	enum-specifier => "enum" identifier "{" enumerator-list . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => enumerator-list . "," enumerator ("}" ",")
	enum-specifier => "enum" identifier "{" enumerator-list . "," "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		"," => shift 225
		"}" => shift 226

225:	enum-specifier => "enum" identifier "{" enumerator-list "," . "}" ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
	enumerator-list => enumerator-list "," . enumerator ("}" ",")
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 84
		enumerator => shift 231
		"}" => shift 406

226:	enum-specifier => "enum" identifier "{" enumerator-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 159

227:	cast-expression => unary-expression . ("}" ")" "," ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "]" "%" "/" "*" "+" "-" ">>" "<<" "<" ">" "<=" ">=" "!=" "==" "&" "^" "|" "&&" "||" ":" "?")
		$default => reduce 30

228:	constant-expression => conditional-expression . ("}" "," ";" "]" ":")
		$default => reduce 77

229:	enumerator => identifier "=" constant-expression . ("," "}")
		"}" => reduce 167
		"," => reduce 167

230:	enum-specifier => "enum" "{" enumerator-list "," "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 162

231:	enumerator-list => enumerator-list "," enumerator . ("," "}")
		"}" => reduce 165
		"," => reduce 165

232:	struct-or-union-specifier => "union" identifier "{" struct-declaration-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 142

233:	struct-declaration => specifier-qualifier-list struct-declarator-list ";" . opt-code-comment ('$lone-comm "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "}")
	opt-code-comment => .
	opt-code-comment => . code-comment
	code-comment => . '$code-comm
		'$code-comm => shift 117
		code-comment => shift 118
		opt-code-comment => shift 405
		$default => reduce 287

234:	struct-declarator-list => struct-declarator-list "," . struct-declarator ("," ";")
	struct-declarator => . declarator
	struct-declarator => . declarator ":" constant-expression
	struct-declarator => . ":" constant-expression
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		":" => shift 214
		declarator => shift 215
		struct-declarator => shift 404

235:	struct-declarator => declarator ":" . constant-expression ("," ";")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 228
		constant-expression => shift 403

236:	struct-declarator => ":" constant-expression . ("," ";")
		";" => reduce 158
		"," => reduce 158

237:	struct-or-union-specifier => "struct" identifier "{" struct-declaration-list "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 139

238:	compound-statement => "{" block-item-list "}" . ('$end '$lone-comm "else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 251

239:	block-item-list => block-item-list block-item . ('cpp-stmt "goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "{" "case" "default" "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "extern" "register" "static" "typedef" "}")
		$default => reduce 254

240:	labeled-statement => identifier ":" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 402

241:	labeled-statement => "case" constant-expression . ":" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		":" => shift 401

242:	labeled-statement => "default" ":" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 400

243:	expression-statement => expression ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 257

244:	expression => expression "," . assignment-expression ("]" ":" ")" "," ";")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 399

245:	selection-statement => "if" "(" . expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	selection-statement => "if" "(" . expression ")" statement "else" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 398

246:	selection-statement => "switch" "(" . expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 397

247:	iteration-statement => "while" "(" . expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 396

248:	iteration-statement => "do" statement . "while" "(" expression ")" ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		"while" => shift 395

249:	iteration-statement => "for" "(" . initial-clause expression ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	iteration-statement => "for" "(" . initial-clause expression ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	iteration-statement => "for" "(" . initial-clause ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	iteration-statement => "for" "(" . initial-clause ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		unary-expression => shift 170
		conditional-expression => shift 171
		declaration-specifiers => shift 106
		assignment-expression => shift 180
		declaration => shift 391
		";" => shift 392
		expression => shift 393
		initial-clause => shift 394

250:	jump-statement => "goto" identifier . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		";" => shift 390

251:	jump-statement => "continue" ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 272

252:	jump-statement => "break" ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 273

253:	expression => expression . "," assignment-expression ("," ";")
	jump-statement => "return" expression . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		";" => shift 389
		"," => shift 244

254:	jump-statement => "return" ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 275

255:	designator => "." . identifier ("." "[" "=")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 388

256:	designator => "[" . constant-expression "]" ("." "[" "=")
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 228
		constant-expression => shift 387

257:	designator-list => designator . ("[" "." "=")
		"=" => reduce 237
		"." => reduce 237
		"[" => reduce 237

258:	designator-list => designator-list . designator ("[" "." "=")
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	designation => designator-list . "=" ("{" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		"=" => shift 385
		"." => shift 255
		"[" => shift 256
		designator => shift 386

259:	initializer-list => initializer . ("}" ",")
		"," => reduce 233
		"}" => reduce 233

260:	initializer-list => designation . initializer ("}" ",")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 384

261:	initializer => "{" initializer-list . "}" (";" "}" ",")
	initializer-list => initializer-list . "," initializer ("}" ",")
	initializer-list => initializer-list . "," designation initializer ("}" ",")
	initializer => "{" initializer-list . "," "}" (";" "}" ",")
		"," => shift 382
		"}" => shift 383

262:	direct-declarator => direct-declarator "[" type-qualifier-list assignment-expression . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"]" => shift 381

263:	direct-declarator => direct-declarator "[" type-qualifier-list "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 177

264:	direct-declarator => direct-declarator "[" type-qualifier-list "static" . assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 380

265:	unary-operator => "*" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	direct-declarator => direct-declarator "[" type-qualifier-list "*" . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"]" => shift 379
		$default => reduce 25

266:	direct-declarator => direct-declarator "[" assignment-expression "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 178

267:	assignment-operator => "|=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 74

268:	assignment-operator => "^=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 73

269:	assignment-operator => "&=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 72

270:	assignment-operator => ">>=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 71

271:	assignment-operator => "<<=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 70

272:	assignment-operator => "%=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 69

273:	assignment-operator => "/=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 68

274:	assignment-operator => "*=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 67

275:	assignment-operator => "-=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 66

276:	assignment-operator => "+=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 65

277:	assignment-operator => "=" . ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 64

278:	assignment-expression => unary-expression assignment-operator . assignment-expression (":" "}" ")" "]" "," ";")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 378

279:	postfix-expression => postfix-expression "[" . expression "]" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 377

280:	postfix-expression => postfix-expression "(" . argument-expression-list ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	argument-expression-list => . assignment-expression
	argument-expression-list => . argument-expression-list "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => postfix-expression "(" . ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		")" => shift 374
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 375
		argument-expression-list => shift 376

281:	postfix-expression => postfix-expression "." . identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 373

282:	postfix-expression => postfix-expression "->" . identifier (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 372

283:	postfix-expression => postfix-expression "++" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 12

284:	postfix-expression => postfix-expression "--" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 13

285:	primary-expression => "(" . expression ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "--" "++" "->" "." "(" "[")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" . type-name ")" "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	postfix-expression => "(" . type-name ")" "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 294
		type-specifier => shift 295
		storage-class-specifier => shift 33
		declaration-specifiers => shift 296
		specifier-qualifier-list => shift 297
		type-name => shift 371
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 293

286:	unary-expression => "++" unary-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 19

287:	unary-expression => "--" unary-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 20

288:	unary-expression => unary-operator cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 21

289:	unary-expression => "sizeof" unary-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 22

290:	primary-expression => "(" . expression ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "--" "++" "->" "." "(" "[")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" . type-name ")" "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	postfix-expression => "(" . type-name ")" "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	unary-expression => "sizeof" "(" . type-name ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 294
		type-specifier => shift 295
		storage-class-specifier => shift 33
		declaration-specifiers => shift 296
		specifier-qualifier-list => shift 297
		type-name => shift 370
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 293

291:	conditional-expression => logical-or-expression "?" . expression ":" conditional-expression (":" "}" ")" "]" "," ";")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 369

292:	logical-or-expression => logical-or-expression "||" . logical-and-expression (":" "}" ")" "]" "," "||" ";" "?")
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 368

293:	expression => expression . "," assignment-expression ("," ")")
	primary-expression => "(" expression . ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		")" => shift 367
		"," => shift 244

294:	specifier-qualifier-list => type-qualifier . ("(" "[" "*")
	specifier-qualifier-list => type-qualifier . specifier-qualifier-list ("(" "[" "*")
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-qualifier . declaration-specifiers (")")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-qualifier . (")")
		"inline" => shift 14
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		storage-class-specifier => shift 33
		declaration-specifiers => shift 61
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 294
		type-specifier => shift 295
		specifier-qualifier-list => shift 219
		")" => reduce 85
		"*" => reduce 153
		"[" => reduce 153
		"(" => reduce 153

295:	specifier-qualifier-list => type-specifier . ("(" "[" "*")
	specifier-qualifier-list => type-specifier . specifier-qualifier-list ("(" "[" "*")
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-specifier . declaration-specifiers (")")
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-specifier . (")")
		"inline" => shift 14
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		storage-class-specifier => shift 33
		declaration-specifiers => shift 60
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 294
		type-specifier => shift 295
		specifier-qualifier-list => shift 218
		")" => reduce 83
		"*" => reduce 151
		"[" => reduce 151
		"(" => reduce 151

296:	type-name => declaration-specifiers . (")")
		")" => reduce 203

297:	type-name => specifier-qualifier-list . abstract-declarator (")")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 322
		"(" => shift 364
		"*" => shift 52
		direct-abstract-declarator => shift 324
		pointer => shift 365
		abstract-declarator => shift 366

298:	postfix-expression => "(" type-name . ")" "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => "(" type-name . ")" "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	cast-expression => "(" type-name . ")" cast-expression ("=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		")" => shift 363

299:	direct-declarator => direct-declarator "[" "*" "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 183

300:	logical-and-expression => logical-and-expression "&&" . bitwise-or-expression (":" "}" ")" "]" "&&" "||" "," "?" ";")
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 362

301:	string-literal => string-literal '$string . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" '$string "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 295

302:	bitwise-or-expression => bitwise-or-expression "|" . bitwise-xor-expression (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 361

303:	bitwise-xor-expression => bitwise-xor-expression "^" . bitwise-and-expression (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 360

304:	bitwise-and-expression => bitwise-and-expression "&" . equality-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 359

305:	equality-expression => equality-expression "==" . relational-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 358

306:	equality-expression => equality-expression "!=" . relational-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 357

307:	relational-expression => relational-expression "<" . shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 356

308:	relational-expression => relational-expression ">" . shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 355

309:	relational-expression => relational-expression "<=" . shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 354

310:	relational-expression => relational-expression ">=" . shift-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 353

311:	shift-expression => shift-expression "<<" . additive-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 352

312:	shift-expression => shift-expression ">>" . additive-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 351

313:	additive-expression => additive-expression "+" . multiplicative-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 350

314:	additive-expression => additive-expression "-" . multiplicative-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 349

315:	multiplicative-expression => multiplicative-expression "*" . cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 348

316:	multiplicative-expression => multiplicative-expression "/" . cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 347

317:	multiplicative-expression => multiplicative-expression "%" . cast-expression (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 346

318:	type-qualifier-list => type-qualifier-list . type-qualifier ("const" "volatile" "restrict" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" "static" type-qualifier-list . assignment-expression "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 345
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128

319:	direct-declarator => direct-declarator "(" parameter-type-list ")" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 184

320:	parameter-type-list => parameter-list "," . "..." (")")
	parameter-list => parameter-list "," . parameter-declaration (")" ",")
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 133
		parameter-declaration => shift 343
		"..." => shift 344

321:	parameter-declaration => declaration-specifiers declarator . ("," ")")
		")" => reduce 197
		"," => reduce 197

322:	direct-abstract-declarator => "[" . "*" "]" ("," ")" "[" "(")
	direct-abstract-declarator => "[" . type-qualifier-list "static" assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" . "static" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => "[" . "static" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => "[" . "]" ("," ")" "[" "(")
	direct-abstract-declarator => "[" . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-abstract-declarator => "[" . type-qualifier-list "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" . type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 338
		"]" => shift 339
		"static" => shift 340
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 341
		"*" => shift 342

323:	direct-declarator => "(" . declarator ")" ("," ")" "[" "(")
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
	direct-abstract-declarator => "(" . ")" ("," ")" "[" "(")
	direct-abstract-declarator => "(" . parameter-type-list ")" ("," ")" "[" "(")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-abstract-declarator => "(" . abstract-declarator ")" ("," ")" "[" "(")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 322
		direct-abstract-declarator => shift 324
		abstract-declarator => shift 335
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 133
		parameter-declaration => shift 134
		parameter-list => shift 135
		parameter-type-list => shift 336
		")" => shift 337
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 323
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 325
		declarator => shift 113

324:	direct-abstract-declarator => direct-abstract-declarator . "(" ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "(" parameter-type-list ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "*" "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "static" assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	abstract-declarator => direct-abstract-declarator . ("," ")")
		"[" => shift 333
		"(" => shift 334
		")" => reduce 206
		"," => reduce 206

325:	declarator => pointer . direct-declarator ("," ")")
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	abstract-declarator => pointer . direct-abstract-declarator ("," ")")
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	abstract-declarator => pointer . ("," ")")
		"[" => shift 322
		direct-abstract-declarator => shift 332
		'cpp-ident => shift 50
		'$ident => shift 51
		"(" => shift 323
		identifier => shift 54
		direct-declarator => shift 110
		")" => reduce 204
		"," => reduce 204

326:	parameter-declaration => declaration-specifiers abstract-declarator . ("," ")")
		")" => reduce 198
		"," => reduce 198

327:	direct-declarator => direct-declarator "(" identifier-list ")" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 185

328:	identifier-list => identifier-list "," . identifier ("," ")")
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 331

329:	declaration => declaration-specifiers init-declarator-list $P1 ";" opt-code-comment . ("goto" "continue" "break" "return" "while" "do" "for" "if" "switch" ";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "case" "default" "{" '$end "}" "extern" 'cpp-stmt '$lone-comm "inline" "const" "volatile" "restrict" "void" "_Bool" 'typename "enum" "struct" "union" "_Complex" "float" "double" "long" "short" "signed" "int" "unsigned" "char" "auto" "register" "static" "typedef")
		$default => reduce 78

330:	external-declaration => "extern" '$string "{" translation-unit "}" . ('$end "}" "typedef" "static" "register" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" '$lone-comm 'cpp-stmt "extern")
		$default => reduce 282

331:	identifier-list => identifier-list "," identifier . ("," ")")
		")" => reduce 201
		"," => reduce 201

332:	direct-abstract-declarator => direct-abstract-declarator . "(" ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "(" parameter-type-list ")" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "*" "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "static" assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	abstract-declarator => pointer direct-abstract-declarator . ("," ")")
		"[" => shift 333
		"(" => shift 334
		")" => reduce 205
		"," => reduce 205

333:	direct-abstract-declarator => direct-abstract-declarator "[" . type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" . type-qualifier-list "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-abstract-declarator => direct-abstract-declarator "[" . "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator "[" . "static" type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator "[" . "static" type-qualifier-list "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator "[" . type-qualifier-list "static" assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" . "*" "]" ("," ")" "[" "(")
		"static" => shift 439
		"]" => shift 440
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 441
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 442
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 443

334:	direct-abstract-declarator => direct-abstract-declarator "(" . parameter-type-list ")" ("," ")" "[" "(")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-abstract-declarator => direct-abstract-declarator "(" . ")" ("," ")" "[" "(")
		")" => shift 437
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 133
		parameter-declaration => shift 134
		parameter-list => shift 135
		parameter-type-list => shift 438

335:	direct-abstract-declarator => "(" abstract-declarator . ")" ("," ")" "[" "(")
		")" => shift 436

336:	direct-abstract-declarator => "(" parameter-type-list . ")" ("," ")" "[" "(")
		")" => shift 435

337:	direct-abstract-declarator => "(" ")" . ("," ")" "[" "(")
		$default => reduce 227

338:	direct-abstract-declarator => "[" assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 434

339:	direct-abstract-declarator => "[" "]" . ("," ")" "[" "(")
		$default => reduce 218

340:	direct-abstract-declarator => "[" "static" . type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" "static" . type-qualifier-list "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 433

341:	direct-abstract-declarator => "[" type-qualifier-list . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-abstract-declarator => "[" type-qualifier-list . "]" ("," ")" "[" "(")
	type-qualifier-list => type-qualifier-list . type-qualifier ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "]" "const" "volatile" "restrict" "static")
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" type-qualifier-list . "static" assignment-expression "]" ("," ")" "[" "(")
		"static" => shift 430
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		"]" => shift 431
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 432

342:	unary-operator => "*" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	direct-abstract-declarator => "[" "*" . "]" ("," ")" "[" "(")
		"]" => shift 429
		$default => reduce 25

343:	parameter-list => parameter-list "," parameter-declaration . (")" ",")
		"," => reduce 196
		")" => reduce 196

344:	parameter-type-list => parameter-list "," "..." . (")")
		")" => reduce 194

345:	direct-declarator => direct-declarator "[" "static" type-qualifier-list assignment-expression . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"]" => shift 428

346:	multiplicative-expression => multiplicative-expression "%" cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 35

347:	multiplicative-expression => multiplicative-expression "/" cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 34

348:	multiplicative-expression => multiplicative-expression "*" cast-expression . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		$default => reduce 33

349:	multiplicative-expression => multiplicative-expression . "%" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	multiplicative-expression => multiplicative-expression . "/" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	multiplicative-expression => multiplicative-expression . "*" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	additive-expression => additive-expression "-" multiplicative-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 315
		"/" => shift 316
		"%" => shift 317
		$default => reduce 38

350:	multiplicative-expression => multiplicative-expression . "%" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	multiplicative-expression => multiplicative-expression . "/" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	multiplicative-expression => multiplicative-expression . "*" cast-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?" "*" "/" "%")
	additive-expression => additive-expression "+" multiplicative-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" ";" "?")
		"*" => shift 315
		"/" => shift 316
		"%" => shift 317
		$default => reduce 37

351:	additive-expression => additive-expression . "-" multiplicative-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	additive-expression => additive-expression . "+" multiplicative-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	shift-expression => shift-expression ">>" additive-expression . (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 313
		"-" => shift 314
		$default => reduce 41

352:	additive-expression => additive-expression . "-" multiplicative-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	additive-expression => additive-expression . "+" multiplicative-expression (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "+" "-")
	shift-expression => shift-expression "<<" additive-expression . (":" "}" ")" "]" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"+" => shift 313
		"-" => shift 314
		$default => reduce 40

353:	shift-expression => shift-expression . ">>" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	shift-expression => shift-expression . "<<" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	relational-expression => relational-expression ">=" shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
		"<<" => shift 311
		">>" => shift 312
		$default => reduce 46

354:	shift-expression => shift-expression . ">>" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	shift-expression => shift-expression . "<<" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	relational-expression => relational-expression "<=" shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
		"<<" => shift 311
		">>" => shift 312
		$default => reduce 45

355:	shift-expression => shift-expression . ">>" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	shift-expression => shift-expression . "<<" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	relational-expression => relational-expression ">" shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
		"<<" => shift 311
		">>" => shift 312
		$default => reduce 44

356:	shift-expression => shift-expression . ">>" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	shift-expression => shift-expression . "<<" additive-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?" "<<" ">>")
	relational-expression => relational-expression "<" shift-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ";" "?")
		"<<" => shift 311
		">>" => shift 312
		$default => reduce 43

357:	relational-expression => relational-expression . ">=" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . "<=" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . ">" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . "<" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	equality-expression => equality-expression "!=" relational-expression . (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 307
		">" => shift 308
		"<=" => shift 309
		">=" => shift 310
		$default => reduce 49

358:	relational-expression => relational-expression . ">=" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . "<=" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . ">" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	relational-expression => relational-expression . "<" shift-expression (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "<" ">" "<=" ">=")
	equality-expression => equality-expression "==" relational-expression . (":" "}" ")" "]" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";")
		"<" => shift 307
		">" => shift 308
		"<=" => shift 309
		">=" => shift 310
		$default => reduce 48

359:	equality-expression => equality-expression . "!=" relational-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=")
	equality-expression => equality-expression . "==" relational-expression (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?" "==" "!=")
	bitwise-and-expression => bitwise-and-expression "&" equality-expression . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" ";" "?")
		"==" => shift 305
		"!=" => shift 306
		$default => reduce 51

360:	bitwise-and-expression => bitwise-and-expression . "&" equality-expression (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";" "&")
	bitwise-xor-expression => bitwise-xor-expression "^" bitwise-and-expression . (":" "}" ")" "]" "^" "|" "&&" "||" "," "?" ";")
		"&" => shift 304
		$default => reduce 53

361:	bitwise-xor-expression => bitwise-xor-expression . "^" bitwise-and-expression (":" "}" ")" "]" "," "||" "&&" "|" ";" "?" "^")
	bitwise-or-expression => bitwise-or-expression "|" bitwise-xor-expression . (":" "}" ")" "]" "," "||" "&&" "|" ";" "?")
		"^" => shift 303
		$default => reduce 55

362:	bitwise-or-expression => bitwise-or-expression . "|" bitwise-xor-expression (":" "}" ")" "]" "&&" "||" "," "?" ";" "|")
	logical-and-expression => logical-and-expression "&&" bitwise-or-expression . (":" "}" ")" "]" "&&" "||" "," "?" ";")
		"|" => shift 302
		$default => reduce 57

363:	cast-expression => "(" type-name ")" . cast-expression ("=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	postfix-expression => "(" type-name ")" . "{" initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	postfix-expression => "(" type-name ")" . "{" initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		"{" => shift 426
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 427

364:	direct-abstract-declarator => "(" . ")" (")" "[" "(")
	direct-abstract-declarator => "(" . parameter-type-list ")" (")" "[" "(")
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" identifier
	struct-or-union-specifier => . "union" identifier "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" identifier
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-abstract-declarator => "(" . abstract-declarator ")" (")" "[" "(")
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 322
		"(" => shift 364
		"*" => shift 52
		direct-abstract-declarator => shift 324
		pointer => shift 365
		abstract-declarator => shift 335
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 133
		parameter-declaration => shift 134
		parameter-list => shift 135
		parameter-type-list => shift 336
		")" => shift 337

365:	abstract-declarator => pointer . direct-abstract-declarator (")")
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	abstract-declarator => pointer . (")")
		"[" => shift 322
		"(" => shift 364
		direct-abstract-declarator => shift 332
		")" => reduce 204

366:	type-name => specifier-qualifier-list abstract-declarator . (")")
		")" => reduce 202

367:	primary-expression => "(" expression ")" . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "--" "++" "->" "." "(" "[" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		$default => reduce 5

368:	logical-and-expression => logical-and-expression . "&&" bitwise-or-expression (":" "}" ")" "]" "," "||" ";" "?" "&&")
	logical-or-expression => logical-or-expression "||" logical-and-expression . (":" "}" ")" "]" "," "||" ";" "?")
		"&&" => shift 300
		$default => reduce 59

369:	expression => expression . "," assignment-expression ("," ":")
	conditional-expression => logical-or-expression "?" expression . ":" conditional-expression (":" "}" ")" "]" "," ";")
		":" => shift 425
		"," => shift 244

370:	unary-expression => "sizeof" "(" type-name . ")" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
	postfix-expression => "(" type-name . ")" "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	postfix-expression => "(" type-name . ")" "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
		")" => shift 424

371:	postfix-expression => "(" type-name . ")" "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	postfix-expression => "(" type-name . ")" "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
		")" => shift 423

372:	postfix-expression => postfix-expression "->" identifier . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 11

373:	postfix-expression => postfix-expression "." identifier . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 10

374:	postfix-expression => postfix-expression "(" ")" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 9

375:	argument-expression-list => assignment-expression . ("," ")")
		")" => reduce 16
		"," => reduce 16

376:	argument-expression-list => argument-expression-list . "," assignment-expression ("," ")")
	postfix-expression => postfix-expression "(" argument-expression-list . ")" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		")" => shift 421
		"," => shift 422

377:	expression => expression . "," assignment-expression ("," "]")
	postfix-expression => postfix-expression "[" expression . "]" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		"]" => shift 420
		"," => shift 244

378:	assignment-expression => unary-expression assignment-operator assignment-expression . (":" "}" ")" "]" "," ";")
		$default => reduce 63

379:	direct-declarator => direct-declarator "[" type-qualifier-list "*" "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 182

380:	direct-declarator => direct-declarator "[" type-qualifier-list "static" assignment-expression . "]" (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		"]" => shift 419

381:	direct-declarator => direct-declarator "[" type-qualifier-list assignment-expression "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 176

382:	initializer => "{" initializer-list "," . "}" (";" "}" ",")
	initializer-list => initializer-list "," . designation initializer ("}" ",")
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	initializer-list => initializer-list "," . initializer ("}" ",")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 416
		"." => shift 255
		"[" => shift 256
		designator => shift 257
		designator-list => shift 258
		designation => shift 417
		"}" => shift 418

383:	initializer => "{" initializer-list "}" . (";" "}" ",")
		"," => reduce 230
		"}" => reduce 230
		";" => reduce 230

384:	initializer-list => designation initializer . ("}" ",")
		"," => reduce 232
		"}" => reduce 232

385:	designation => designator-list "=" . ("{" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 236

386:	designator-list => designator-list designator . ("[" "." "=")
		"=" => reduce 238
		"." => reduce 238
		"[" => reduce 238

387:	designator => "[" constant-expression . "]" ("." "[" "=")
		"]" => shift 415

388:	designator => "." identifier . ("." "[" "=")
		"=" => reduce 240
		"[" => reduce 240
		"." => reduce 240

389:	jump-statement => "return" expression ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 274

390:	jump-statement => "goto" identifier ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 271

391:	initial-clause => declaration . (";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 270

392:	initial-clause => ";" . (";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 269

393:	expression => expression . "," assignment-expression ("," ";")
	initial-clause => expression . ";" (";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		";" => shift 414
		"," => shift 244

394:	iteration-statement => "for" "(" initial-clause . ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	iteration-statement => "for" "(" initial-clause . ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	iteration-statement => "for" "(" initial-clause . expression ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	iteration-statement => "for" "(" initial-clause . expression ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 412
		";" => shift 413

395:	iteration-statement => "do" statement "while" . "(" expression ")" ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		"(" => shift 411

396:	expression => expression . "," assignment-expression ("," ")")
	iteration-statement => "while" "(" expression . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		")" => shift 410
		"," => shift 244

397:	expression => expression . "," assignment-expression ("," ")")
	selection-statement => "switch" "(" expression . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		")" => shift 409
		"," => shift 244

398:	selection-statement => "if" "(" expression . ")" statement "else" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => expression . "," assignment-expression ("," ")")
	selection-statement => "if" "(" expression . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		"," => shift 244
		")" => shift 408

399:	expression => expression "," assignment-expression . ("]" ":" ")" "," ";")
		$default => reduce 76

400:	labeled-statement => "default" ":" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 250

401:	labeled-statement => "case" constant-expression ":" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 407

402:	labeled-statement => identifier ":" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 248

403:	struct-declarator => declarator ":" constant-expression . ("," ";")
		";" => reduce 157
		"," => reduce 157

404:	struct-declarator-list => struct-declarator-list "," struct-declarator . ("," ";")
		";" => reduce 155
		"," => reduce 155

405:	struct-declaration => specifier-qualifier-list struct-declarator-list ";" opt-code-comment . ('$lone-comm "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "}")
		$default => reduce 149

406:	enum-specifier => "enum" identifier "{" enumerator-list "," "}" . ("[" ")" "," ":" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" ";" "(" '$ident 'cpp-ident "*")
		$default => reduce 160

407:	labeled-statement => "case" constant-expression ":" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 249

408:	selection-statement => "if" "(" expression ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	selection-statement => "if" "(" expression ")" . statement "else" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 465

409:	selection-statement => "switch" "(" expression ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 464

410:	iteration-statement => "while" "(" expression ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 463

411:	iteration-statement => "do" statement "while" "(" . expression ")" ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 462

412:	iteration-statement => "for" "(" initial-clause expression . ";" expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => expression . "," assignment-expression ("," ";")
	iteration-statement => "for" "(" initial-clause expression . ";" ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		"," => shift 244
		";" => shift 461

413:	iteration-statement => "for" "(" initial-clause ";" . expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	iteration-statement => "for" "(" initial-clause ";" . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		")" => shift 459
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 460

414:	initial-clause => expression ";" . (";" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		$default => reduce 268

415:	designator => "[" constant-expression "]" . ("." "[" "=")
		"=" => reduce 239
		"[" => reduce 239
		"." => reduce 239

416:	initializer-list => initializer-list "," initializer . ("}" ",")
		"," => reduce 235
		"}" => reduce 235

417:	initializer-list => initializer-list "," designation . initializer ("}" ",")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 458

418:	initializer => "{" initializer-list "," "}" . (";" "}" ",")
		"," => reduce 231
		"}" => reduce 231
		";" => reduce 231

419:	direct-declarator => direct-declarator "[" type-qualifier-list "static" assignment-expression "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 181

420:	postfix-expression => postfix-expression "[" expression "]" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 7

421:	postfix-expression => postfix-expression "(" argument-expression-list ")" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 8

422:	argument-expression-list => argument-expression-list "," . assignment-expression ("," ")")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 457

423:	postfix-expression => "(" type-name ")" . "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	postfix-expression => "(" type-name ")" . "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
		"{" => shift 426

424:	postfix-expression => "(" type-name ")" . "{" initializer-list "," "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	postfix-expression => "(" type-name ")" . "{" initializer-list "}" (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" "[" "(" "." "->" "++" "--")
	unary-expression => "sizeof" "(" type-name ")" . (":" "}" ")" "]" "*" "/" "%" "-" "+" "<<" ">>" ">=" "<=" ">" "<" "==" "!=" "&" "^" "|" "&&" "||" "," "?" ";" "=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=")
		"{" => shift 426
		$default => reduce 23

425:	conditional-expression => logical-or-expression "?" expression ":" . conditional-expression (":" "}" ")" "]" "," ";")
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		primary-expression => shift 163
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		"(" => shift 162
		unary-expression => shift 227
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		logical-and-expression => shift 155
		logical-or-expression => shift 164
		conditional-expression => shift 456

426:	postfix-expression => "(" type-name ")" "{" . initializer-list "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" type-name ")" "{" . initializer-list "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		"." => shift 255
		"[" => shift 256
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		designator => shift 257
		unary-expression => shift 170
		conditional-expression => shift 171
		designator-list => shift 258
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 259
		designation => shift 260
		initializer-list => shift 455

427:	cast-expression => "(" type-name ")" cast-expression . ("=" "+=" "-=" "*=" "/=" "%=" "<<=" ">>=" "&=" "^=" "|=" ":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?")
		$default => reduce 31

428:	direct-declarator => direct-declarator "[" "static" type-qualifier-list assignment-expression "]" . (":" ")" "," "=" ";" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "[" "(" "{")
		$default => reduce 180

429:	direct-abstract-declarator => "[" "*" "]" . ("," ")" "[" "(")
		$default => reduce 223

430:	direct-abstract-declarator => "[" type-qualifier-list "static" . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 454

431:	direct-abstract-declarator => "[" type-qualifier-list "]" . ("," ")" "[" "(")
		$default => reduce 216

432:	direct-abstract-declarator => "[" type-qualifier-list assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 453

433:	direct-abstract-declarator => "[" "static" type-qualifier-list . "]" ("," ")" "[" "(")
	type-qualifier-list => type-qualifier-list . type-qualifier ("]" "const" "volatile" "restrict" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" "static" type-qualifier-list . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 451
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		"]" => shift 452

434:	direct-abstract-declarator => "[" assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 217

435:	direct-abstract-declarator => "(" parameter-type-list ")" . ("," ")" "[" "(")
		$default => reduce 226

436:	direct-abstract-declarator => "(" abstract-declarator ")" . ("," ")" "[" "(")
		$default => reduce 207

437:	direct-abstract-declarator => direct-abstract-declarator "(" ")" . ("," ")" "[" "(")
		$default => reduce 225

438:	direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list . ")" ("," ")" "[" "(")
		")" => shift 450

439:	direct-abstract-declarator => direct-abstract-declarator "[" "static" . type-qualifier-list "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" "static" . type-qualifier-list assignment-expression "]" ("," ")" "[" "(")
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 114
		type-qualifier-list => shift 449

440:	direct-abstract-declarator => direct-abstract-declarator "[" "]" . ("," ")" "[" "(")
		$default => reduce 211

441:	direct-abstract-declarator => direct-abstract-declarator "[" "*" . "]" ("," ")" "[" "(")
	unary-operator => "*" . ("(" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
		"]" => shift 448
		$default => reduce 25

442:	direct-abstract-declarator => direct-abstract-declarator "[" assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 447

443:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list . "static" assignment-expression "]" ("," ")" "[" "(")
	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list . "]" ("," ")" "[" "(")
	type-qualifier-list => type-qualifier-list . type-qualifier ("static" "]" "const" "volatile" "restrict" "++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident)
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 444
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		"]" => shift 445
		"static" => shift 446

444:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 479

445:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "]" . ("," ")" "[" "(")
		$default => reduce 209

446:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 478

447:	direct-abstract-declarator => direct-abstract-declarator "[" assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 210

448:	direct-abstract-declarator => direct-abstract-declarator "[" "*" "]" . ("," ")" "[" "(")
		$default => reduce 222

449:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list . assignment-expression "]" ("," ")" "[" "(")
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	type-qualifier-list => type-qualifier-list . type-qualifier ("++" "--" "sizeof" "&" "*" "+" "-" "~" "!" "(" '$string '$fixed '$float '$chlit '$ident 'cpp-ident "const" "volatile" "restrict" "]")
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list . "]" ("," ")" "[" "(")
		"]" => shift 476
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 128
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 477

450:	direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list ")" . ("," ")" "[" "(")
		$default => reduce 224

451:	direct-abstract-declarator => "[" "static" type-qualifier-list assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 475

452:	direct-abstract-declarator => "[" "static" type-qualifier-list "]" . ("," ")" "[" "(")
		$default => reduce 220

453:	direct-abstract-declarator => "[" type-qualifier-list assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 215

454:	direct-abstract-declarator => "[" type-qualifier-list "static" assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 474

455:	postfix-expression => "(" type-name ")" "{" initializer-list . "," "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
	initializer-list => initializer-list . "," initializer ("," "}")
	initializer-list => initializer-list . "," designation initializer ("," "}")
	postfix-expression => "(" type-name ")" "{" initializer-list . "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		"}" => shift 472
		"," => shift 473

456:	conditional-expression => logical-or-expression "?" expression ":" conditional-expression . (":" "}" ")" "]" "," ";")
		$default => reduce 61

457:	argument-expression-list => argument-expression-list "," assignment-expression . ("," ")")
		")" => reduce 17
		"," => reduce 17

458:	initializer-list => initializer-list "," designation initializer . ("}" ",")
		"," => reduce 234
		"}" => reduce 234

459:	iteration-statement => "for" "(" initial-clause ";" ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 471

460:	expression => expression . "," assignment-expression ("," ")")
	iteration-statement => "for" "(" initial-clause ";" expression . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		")" => shift 470
		"," => shift 244

461:	iteration-statement => "for" "(" initial-clause expression ";" . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	iteration-statement => "for" "(" initial-clause expression ";" . expression ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		assignment-expression => shift 180
		expression => shift 468
		")" => shift 469

462:	expression => expression . "," assignment-expression ("," ")")
	iteration-statement => "do" statement "while" "(" expression . ")" ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		")" => shift 467
		"," => shift 244

463:	iteration-statement => "while" "(" expression ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 262

464:	selection-statement => "switch" "(" expression ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 261

465:	selection-statement => "if" "(" expression ")" statement . "else" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	selection-statement => "if" "(" expression ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		"else" => shift 466
		$default => reduce 259
		["else" => reduce 259] REMOVED by precedence

466:	selection-statement => "if" "(" expression ")" statement "else" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 487

467:	iteration-statement => "do" statement "while" "(" expression ")" . ";" ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		";" => shift 486

468:	expression => expression . "," assignment-expression ("," ")")
	iteration-statement => "for" "(" initial-clause expression ";" expression . ")" statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		")" => shift 485
		"," => shift 244

469:	iteration-statement => "for" "(" initial-clause expression ";" ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 484

470:	iteration-statement => "for" "(" initial-clause ";" expression ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 483

471:	iteration-statement => "for" "(" initial-clause ";" ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 267

472:	postfix-expression => "(" type-name ")" "{" initializer-list "}" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 14

473:	initializer-list => initializer-list "," . designation initializer ("," "}")
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	initializer-list => initializer-list "," . initializer ("," "}")
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" type-name ")" "{" initializer-list "," . "}" (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		"}" => shift 482
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		identifier => shift 154
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		"{" => shift 175
		assignment-expression => shift 176
		initializer => shift 416
		"." => shift 255
		"[" => shift 256
		designator => shift 257
		designator-list => shift 258
		designation => shift 417

474:	direct-abstract-declarator => "[" type-qualifier-list "static" assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 221

475:	direct-abstract-declarator => "[" "static" type-qualifier-list assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 219

476:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list "]" . ("," ")" "[" "(")
		$default => reduce 213

477:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 481

478:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression . "]" ("," ")" "[" "(")
		"]" => shift 480

479:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 208

480:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 214

481:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]" . ("," ")" "[" "(")
		$default => reduce 212

482:	postfix-expression => "(" type-name ")" "{" initializer-list "," "}" . (":" "}" ")" "]" "," "||" "&&" "|" "^" "&" "!=" "==" "<" ">" "<=" ">=" ">>" "<<" "+" "-" "%" "/" "*" ";" "?" "[" "(" "." "->" "++" "--" "|=" "^=" "&=" ">>=" "<<=" "%=" "/=" "*=" "-=" "+=" "=")
		$default => reduce 15

483:	iteration-statement => "for" "(" initial-clause ";" expression ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 266

484:	iteration-statement => "for" "(" initial-clause expression ";" ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 265

485:	iteration-statement => "for" "(" initial-clause expression ";" expression ")" . statement ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause expression ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause expression ";" ")" statement
	iteration-statement => . "for" "(" initial-clause ";" expression ")" statement
	iteration-statement => . "for" "(" initial-clause ";" ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 139
		multiplicative-expression => shift 140
		additive-expression => shift 141
		shift-expression => shift 142
		relational-expression => shift 143
		equality-expression => shift 144
		bitwise-and-expression => shift 145
		'$string => shift 146
		'$chlit => shift 147
		'$float => shift 148
		'$fixed => shift 149
		bitwise-xor-expression => shift 150
		bitwise-or-expression => shift 151
		string-literal => shift 152
		constant => shift 153
		logical-and-expression => shift 155
		"!" => shift 156
		"~" => shift 157
		"-" => shift 158
		"+" => shift 159
		"*" => shift 174
		"&" => shift 161
		"(" => shift 162
		primary-expression => shift 163
		logical-or-expression => shift 164
		"sizeof" => shift 165
		unary-operator => shift 166
		"--" => shift 167
		"++" => shift 168
		postfix-expression => shift 169
		unary-expression => shift 170
		conditional-expression => shift 171
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 180
		'cpp-stmt => shift 34
		"return" => shift 181
		"break" => shift 182
		"continue" => shift 183
		"goto" => shift 184
		"for" => shift 185
		"do" => shift 186
		"while" => shift 187
		"switch" => shift 188
		"if" => shift 189
		";" => shift 190
		expression => shift 191
		"{" => shift 104
		"default" => shift 192
		"case" => shift 193
		identifier => shift 194
		cpp-statement => shift 195
		jump-statement => shift 196
		iteration-statement => shift 197
		selection-statement => shift 198
		expression-statement => shift 199
		compound-statement => shift 200
		labeled-statement => shift 201
		statement => shift 488

486:	iteration-statement => "do" statement "while" "(" expression ")" ";" . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 263

487:	selection-statement => "if" "(" expression ")" statement "else" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 260

488:	iteration-statement => "for" "(" initial-clause expression ";" expression ")" statement . ("else" "typedef" "static" "register" "extern" "auto" "char" "unsigned" "int" "signed" "short" "long" "double" "float" "_Complex" "union" "struct" "enum" 'typename "_Bool" "void" "restrict" "volatile" "const" "inline" "default" "case" "{" 'cpp-ident '$ident '$chlit '$float '$fixed '$string "(" "!" "~" "-" "+" "*" "&" "sizeof" "--" "++" ";" "switch" "if" "for" "do" "while" "return" "break" "continue" "goto" 'cpp-stmt "}")
		$default => reduce 264

