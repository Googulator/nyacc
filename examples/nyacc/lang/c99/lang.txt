0 $start => translation-unit-proxy
1 translation-unit-proxy => translation-unit
2 primary-expression => identifier
3 primary-expression => constant
4 primary-expression => string-literal
5 primary-expression => "(" expression ")"
6 postfix-expression => primary-expression
7 postfix-expression => postfix-expression "[" expression "]"
8 postfix-expression => postfix-expression "(" argument-expression-list ")"
9 postfix-expression => postfix-expression "(" ")"
10 postfix-expression => postfix-expression "." identifier
11 postfix-expression => postfix-expression "->" identifier
12 postfix-expression => postfix-expression "++"
13 postfix-expression => postfix-expression "--"
14 postfix-expression => "(" type-name ")" "{" initializer-list "}"
15 postfix-expression => "(" type-name ")" "{" initializer-list "," "}"
16 argument-expression-list => assignment-expression
17 argument-expression-list => argument-expression-list "," assignment-expression
18 argument-expression-list => arg-expr-hack
19 argument-expression-list => argument-expression-list "," arg-expr-hack
20 arg-expr-hack => declaration-specifiers abstract-declarator
21 arg-expr-hack => declaration-specifiers
22 unary-expression => postfix-expression
23 unary-expression => "++" unary-expression
24 unary-expression => "--" unary-expression
25 unary-expression => unary-operator cast-expression
26 unary-expression => "sizeof" unary-expression
27 unary-expression => "sizeof" "(" type-name ")"
28 unary-operator => "&"
29 unary-operator => "*"
30 unary-operator => "+"
31 unary-operator => "-"
32 unary-operator => "~"
33 unary-operator => "!"
34 cast-expression => unary-expression
35 cast-expression => "(" type-name ")" cast-expression
36 multiplicative-expression => cast-expression
37 multiplicative-expression => multiplicative-expression "*" cast-expression
38 multiplicative-expression => multiplicative-expression "/" cast-expression
39 multiplicative-expression => multiplicative-expression "%" cast-expression
40 additive-expression => multiplicative-expression
41 additive-expression => additive-expression "+" multiplicative-expression
42 additive-expression => additive-expression "-" multiplicative-expression
43 shift-expression => additive-expression
44 shift-expression => shift-expression "<<" additive-expression
45 shift-expression => shift-expression ">>" additive-expression
46 relational-expression => shift-expression
47 relational-expression => relational-expression "<" shift-expression
48 relational-expression => relational-expression ">" shift-expression
49 relational-expression => relational-expression "<=" shift-expression
50 relational-expression => relational-expression ">=" shift-expression
51 equality-expression => relational-expression
52 equality-expression => equality-expression "==" relational-expression
53 equality-expression => equality-expression "!=" relational-expression
54 bitwise-and-expression => equality-expression
55 bitwise-and-expression => bitwise-and-expression "&" equality-expression
56 bitwise-xor-expression => bitwise-and-expression
57 bitwise-xor-expression => bitwise-xor-expression "^" bitwise-and-expression
58 bitwise-or-expression => bitwise-xor-expression
59 bitwise-or-expression => bitwise-or-expression "|" bitwise-xor-expression
60 logical-and-expression => bitwise-or-expression
61 logical-and-expression => logical-and-expression "&&" bitwise-or-expression
62 logical-or-expression => logical-and-expression
63 logical-or-expression => logical-or-expression "||" logical-and-expression
64 conditional-expression => logical-or-expression
65 conditional-expression => logical-or-expression "?" expression ":" conditional-expression
66 assignment-expression => conditional-expression
67 assignment-expression => unary-expression assignment-operator assignment-expression
68 assignment-operator => "="
69 assignment-operator => "+="
70 assignment-operator => "-="
71 assignment-operator => "*="
72 assignment-operator => "/="
73 assignment-operator => "%="
74 assignment-operator => "<<="
75 assignment-operator => ">>="
76 assignment-operator => "&="
77 assignment-operator => "^="
78 assignment-operator => "|="
79 expression => assignment-expression
80 expression => expression "," assignment-expression
81 constant-expression => conditional-expression
82 declaration => declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
83 declaration => declaration-specifiers ";" opt-code-comment
84 $P1 =>
85 declaration-specifiers => storage-class-specifier
86 declaration-specifiers => storage-class-specifier declaration-specifiers
87 declaration-specifiers => type-specifier
88 declaration-specifiers => type-specifier declaration-specifiers
89 declaration-specifiers => type-qualifier
90 declaration-specifiers => type-qualifier declaration-specifiers
91 declaration-specifiers => function-specifier
92 declaration-specifiers => function-specifier declaration-specifiers
93 init-declarator-list => init-declarator
94 init-declarator-list => init-declarator-list "," init-declarator
95 init-declarator => declarator
96 init-declarator => declarator "=" initializer
97 storage-class-specifier => "auto"
98 storage-class-specifier => "extern"
99 storage-class-specifier => "register"
100 storage-class-specifier => "static"
101 storage-class-specifier => "typedef"
102 type-specifier => "void"
103 type-specifier => fixed-type-specifier
104 type-specifier => float-type-specifier
105 type-specifier => "_Bool"
106 type-specifier => complex-type-specifier
107 type-specifier => struct-or-union-specifier
108 type-specifier => enum-specifier
109 type-specifier => typedef-name
110 fixed-type-specifier => "short"
111 fixed-type-specifier => "short" "int"
112 fixed-type-specifier => "signed" "short"
113 fixed-type-specifier => "signed" "short" "int"
114 fixed-type-specifier => "int"
115 fixed-type-specifier => "signed"
116 fixed-type-specifier => "signed" "int"
117 fixed-type-specifier => "long"
118 fixed-type-specifier => "long" "int"
119 fixed-type-specifier => "signed" "long"
120 fixed-type-specifier => "signed" "long" "int"
121 fixed-type-specifier => "long" "long"
122 fixed-type-specifier => "long" "long" "int"
123 fixed-type-specifier => "signed" "long" "long"
124 fixed-type-specifier => "signed" "long" "long" "int"
125 fixed-type-specifier => "unsigned" "short" "int"
126 fixed-type-specifier => "unsigned" "short"
127 fixed-type-specifier => "unsigned" "int"
128 fixed-type-specifier => "unsigned"
129 fixed-type-specifier => "unsigned" "long" "int"
130 fixed-type-specifier => "unsigned" "long"
131 fixed-type-specifier => "unsigned" "long" "long" "int"
132 fixed-type-specifier => "unsigned" "long" "long"
133 fixed-type-specifier => "char"
134 fixed-type-specifier => "signed" "char"
135 fixed-type-specifier => "unsigned" "char"
136 float-type-specifier => "float"
137 float-type-specifier => "double"
138 float-type-specifier => "long" "double"
139 complex-type-specifier => "_Complex"
140 complex-type-specifier => "float" "_Complex"
141 complex-type-specifier => "double" "_Complex"
142 complex-type-specifier => "long" "double" "_Complex"
143 struct-or-union-specifier => "struct" ident-like "{" struct-declaration-list "}"
144 struct-or-union-specifier => "struct" "{" struct-declaration-list "}"
145 struct-or-union-specifier => "struct" ident-like
146 struct-or-union-specifier => "union" ident-like "{" struct-declaration-list "}"
147 struct-or-union-specifier => "union" "{" struct-declaration-list "}"
148 struct-or-union-specifier => "union" ident-like
149 ident-like => identifier
150 ident-like => typedef-name
151 struct-declaration-list => struct-declaration
152 struct-declaration-list => lone-comment
153 struct-declaration-list => struct-declaration-list struct-declaration
154 struct-declaration-list => struct-declaration-list lone-comment
155 struct-declaration => specifier-qualifier-list struct-declarator-list ";" opt-code-comment
156 specifier-qualifier-list => type-specifier specifier-qualifier-list
157 specifier-qualifier-list => type-specifier
158 specifier-qualifier-list => type-qualifier specifier-qualifier-list
159 specifier-qualifier-list => type-qualifier
160 struct-declarator-list => struct-declarator
161 struct-declarator-list => struct-declarator-list "," struct-declarator
162 struct-declarator => declarator
163 struct-declarator => declarator ":" constant-expression
164 struct-declarator => ":" constant-expression
165 enum-specifier => "enum" identifier "{" enumerator-list "}"
166 enum-specifier => "enum" identifier "{" enumerator-list "," "}"
167 enum-specifier => "enum" "{" enumerator-list "}"
168 enum-specifier => "enum" "{" enumerator-list "," "}"
169 enum-specifier => "enum" identifier
170 enumerator-list => enumerator
171 enumerator-list => enumerator-list "," enumerator
172 enumerator => identifier
173 enumerator => identifier "=" constant-expression
174 type-qualifier => "const"
175 type-qualifier => "volatile"
176 type-qualifier => "restrict"
177 function-specifier => "inline"
178 declarator => pointer direct-declarator
179 declarator => direct-declarator
180 direct-declarator => identifier
181 direct-declarator => "(" declarator ")"
182 direct-declarator => direct-declarator "[" type-qualifier-list assignment-expression "]"
183 direct-declarator => direct-declarator "[" type-qualifier-list "]"
184 direct-declarator => direct-declarator "[" assignment-expression "]"
185 direct-declarator => direct-declarator "[" "]"
186 direct-declarator => direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
187 direct-declarator => direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
188 direct-declarator => direct-declarator "[" type-qualifier-list "*" "]"
189 direct-declarator => direct-declarator "[" "*" "]"
190 direct-declarator => direct-declarator "(" parameter-type-list ")"
191 direct-declarator => direct-declarator "(" identifier-list ")"
192 direct-declarator => direct-declarator "(" ")"
193 pointer => "*" type-qualifier-list
194 pointer => "*"
195 pointer => "*" type-qualifier-list pointer
196 pointer => "*" pointer
197 type-qualifier-list => type-qualifier
198 type-qualifier-list => type-qualifier-list type-qualifier
199 parameter-type-list => parameter-list
200 parameter-type-list => parameter-list "," "..."
201 parameter-list => parameter-declaration
202 parameter-list => parameter-list "," parameter-declaration
203 parameter-declaration => declaration-specifiers declarator
204 parameter-declaration => declaration-specifiers abstract-declarator
205 parameter-declaration => declaration-specifiers
206 identifier-list => identifier
207 identifier-list => identifier-list "," identifier
208 type-name => specifier-qualifier-list abstract-declarator
209 type-name => declaration-specifiers
210 abstract-declarator => pointer
211 abstract-declarator => pointer direct-abstract-declarator
212 abstract-declarator => direct-abstract-declarator
213 direct-abstract-declarator => "(" abstract-declarator ")"
214 direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
215 direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "]"
216 direct-abstract-declarator => direct-abstract-declarator "[" assignment-expression "]"
217 direct-abstract-declarator => direct-abstract-declarator "[" "]"
218 direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
219 direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list "]"
220 direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
221 direct-abstract-declarator => "[" type-qualifier-list assignment-expression "]"
222 direct-abstract-declarator => "[" type-qualifier-list "]"
223 direct-abstract-declarator => "[" assignment-expression "]"
224 direct-abstract-declarator => "[" "]"
225 direct-abstract-declarator => "[" "static" type-qualifier-list assignment-expression "]"
226 direct-abstract-declarator => "[" "static" type-qualifier-list "]"
227 direct-abstract-declarator => "[" type-qualifier-list "static" assignment-expression "]"
228 direct-abstract-declarator => direct-abstract-declarator "[" "*" "]"
229 direct-abstract-declarator => "[" "*" "]"
230 direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list ")"
231 direct-abstract-declarator => direct-abstract-declarator "(" ")"
232 direct-abstract-declarator => "(" parameter-type-list ")"
233 direct-abstract-declarator => "(" ")"
234 typedef-name => 'typename
235 initializer => assignment-expression
236 initializer => "{" initializer-list "}"
237 initializer => "{" initializer-list "," "}"
238 initializer-list => designation initializer
239 initializer-list => initializer
240 initializer-list => initializer-list "," designation initializer
241 initializer-list => initializer-list "," initializer
242 designation => designator-list "="
243 designator-list => designator
244 designator-list => designator-list designator
245 designator => "[" constant-expression "]"
246 designator => "." identifier
247 statement => labeled-statement
248 statement => compound-statement
249 statement => expression-statement
250 statement => selection-statement
251 statement => iteration-statement
252 statement => jump-statement
253 statement => cpp-statement
254 labeled-statement => identifier ":" statement
255 labeled-statement => "case" constant-expression ":" statement
256 labeled-statement => "default" ":" statement
257 compound-statement => "{" block-item-list "}"
258 compound-statement => "{" "}"
259 block-item-list => block-item
260 block-item-list => block-item-list block-item
261 block-item => declaration
262 block-item => statement
263 expression-statement => expression ";"
264 expression-statement => ";"
265 selection-statement => "if" "(" expression ")" statement
266 selection-statement => "if" "(" expression ")" statement "else" statement
267 selection-statement => "switch" "(" expression ")" statement
268 iteration-statement => "while" "(" expression ")" statement
269 iteration-statement => "do" statement "while" "(" expression ")" ";"
270 iteration-statement => "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
271 initial-clause => expression ";"
272 initial-clause => ";"
273 initial-clause => declaration
274 opt-expression =>
275 opt-expression => expression
276 jump-statement => "goto" identifier ";"
277 jump-statement => "continue" ";"
278 jump-statement => "break" ";"
279 jump-statement => "return" expression ";"
280 jump-statement => "return" ";"
281 translation-unit => external-declaration
282 translation-unit => translation-unit external-declaration
283 external-declaration => function-definition
284 external-declaration => declaration
285 external-declaration => lone-comment
286 external-declaration => cpp-statement
287 external-declaration => "extern" '$string "{" translation-unit "}"
288 function-definition => declaration-specifiers declarator declaration-list compound-statement
289 function-definition => declaration-specifiers declarator compound-statement
290 declaration-list => declaration
291 declaration-list => declaration-list declaration
292 opt-code-comment =>
293 opt-code-comment => code-comment
294 identifier => '$ident
295 identifier => 'cpp-ident
296 constant => '$fixed
297 constant => '$float
298 constant => '$chlit
299 string-literal => '$string
300 string-literal => string-literal '$string
301 code-comment => '$code-comm
302 lone-comment => '$lone-comm
303 cpp-statement => 'cpp-stmt

0:	$start => . translation-unit-proxy
	translation-unit-proxy => . translation-unit
	translation-unit => . external-declaration
	translation-unit => . translation-unit external-declaration
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 42
		translation-unit => shift 43
		translation-unit-proxy => shift 44

1:	typedef-name => 'typename .
		$default => reduce 234

2:	enum-specifier => "enum" . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" . "{" enumerator-list "," "}"
	enum-specifier => "enum" . "{" enumerator-list "}"
	enum-specifier => "enum" . identifier "{" enumerator-list "," "}"
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" . identifier "{" enumerator-list "}"
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 83
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 84

3:	struct-or-union-specifier => "union" . ident-like
	ident-like => . identifier
	ident-like => . typedef-name
	typedef-name => . 'typename
	identifier => . '$ident
	identifier => . 'cpp-ident
	struct-or-union-specifier => "union" . "{" struct-declaration-list "}"
	struct-or-union-specifier => "union" . ident-like "{" struct-declaration-list "}"
	ident-like => . identifier
	ident-like => . typedef-name
	typedef-name => . 'typename
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 81
		'cpp-ident => shift 50
		'$ident => shift 51
		'typename => shift 1
		typedef-name => shift 78
		identifier => shift 79
		ident-like => shift 82

4:	struct-or-union-specifier => "struct" . ident-like
	ident-like => . identifier
	ident-like => . typedef-name
	typedef-name => . 'typename
	identifier => . '$ident
	identifier => . 'cpp-ident
	struct-or-union-specifier => "struct" . "{" struct-declaration-list "}"
	struct-or-union-specifier => "struct" . ident-like "{" struct-declaration-list "}"
	ident-like => . identifier
	ident-like => . typedef-name
	typedef-name => . 'typename
	identifier => . '$ident
	identifier => . 'cpp-ident
		"{" => shift 77
		'cpp-ident => shift 50
		'$ident => shift 51
		'typename => shift 1
		typedef-name => shift 78
		identifier => shift 79
		ident-like => shift 80

5:	complex-type-specifier => "_Complex" .
		$default => reduce 139

6:	complex-type-specifier => "double" . "_Complex"
	float-type-specifier => "double" .
		"_Complex" => shift 76
		$default => reduce 137
		["_Complex" => reduce 137] REMOVED by precedence

7:	complex-type-specifier => "float" . "_Complex"
	float-type-specifier => "float" .
		"_Complex" => shift 75
		$default => reduce 136
		["_Complex" => reduce 136] REMOVED by precedence

8:	fixed-type-specifier => "char" .
		$default => reduce 133

9:	fixed-type-specifier => "unsigned" . "char"
	fixed-type-specifier => "unsigned" . "long" "long"
	fixed-type-specifier => "unsigned" . "long" "long" "int"
	fixed-type-specifier => "unsigned" . "long"
	fixed-type-specifier => "unsigned" . "long" "int"
	fixed-type-specifier => "unsigned" .
	fixed-type-specifier => "unsigned" . "int"
	fixed-type-specifier => "unsigned" . "short"
	fixed-type-specifier => "unsigned" . "short" "int"
		"short" => shift 71
		"int" => shift 72
		"long" => shift 73
		"char" => shift 74
		$default => reduce 128
		["short" => reduce 128] REMOVED by precedence
		["int" => reduce 128] REMOVED by precedence
		["long" => reduce 128] REMOVED by precedence
		["char" => reduce 128] REMOVED by precedence

10:	complex-type-specifier => "long" . "double" "_Complex"
	float-type-specifier => "long" . "double"
	fixed-type-specifier => "long" . "long" "int"
	fixed-type-specifier => "long" . "long"
	fixed-type-specifier => "long" . "int"
	fixed-type-specifier => "long" .
		"int" => shift 68
		"long" => shift 69
		"double" => shift 70
		$default => reduce 117
		["int" => reduce 117] REMOVED by precedence
		["long" => reduce 117] REMOVED by precedence
		["double" => reduce 117] REMOVED by precedence

11:	fixed-type-specifier => "int" .
		$default => reduce 114

12:	fixed-type-specifier => "signed" . "char"
	fixed-type-specifier => "signed" . "long" "long" "int"
	fixed-type-specifier => "signed" . "long" "long"
	fixed-type-specifier => "signed" . "long" "int"
	fixed-type-specifier => "signed" . "long"
	fixed-type-specifier => "signed" . "int"
	fixed-type-specifier => "signed" .
	fixed-type-specifier => "signed" . "short" "int"
	fixed-type-specifier => "signed" . "short"
		"short" => shift 64
		"int" => shift 65
		"long" => shift 66
		"char" => shift 67
		$default => reduce 115
		["short" => reduce 115] REMOVED by precedence
		["int" => reduce 115] REMOVED by precedence
		["long" => reduce 115] REMOVED by precedence
		["char" => reduce 115] REMOVED by precedence

13:	fixed-type-specifier => "short" . "int"
	fixed-type-specifier => "short" .
		"int" => shift 63
		$default => reduce 110
		["int" => reduce 110] REMOVED by precedence

14:	function-specifier => "inline" .
		$default => reduce 177

15:	type-qualifier => "restrict" .
		$default => reduce 176

16:	type-qualifier => "volatile" .
		$default => reduce 175

17:	type-qualifier => "const" .
		$default => reduce 174

18:	type-specifier => typedef-name .
		$default => reduce 109

19:	type-specifier => enum-specifier .
		$default => reduce 108

20:	type-specifier => struct-or-union-specifier .
		$default => reduce 107

21:	type-specifier => complex-type-specifier .
		$default => reduce 106

22:	type-specifier => "_Bool" .
		$default => reduce 105

23:	type-specifier => float-type-specifier .
		$default => reduce 104

24:	type-specifier => fixed-type-specifier .
		$default => reduce 103

25:	type-specifier => "void" .
		$default => reduce 102

26:	storage-class-specifier => "typedef" .
		$default => reduce 101

27:	storage-class-specifier => "static" .
		$default => reduce 100

28:	storage-class-specifier => "register" .
		$default => reduce 99

29:	storage-class-specifier => "auto" .
		$default => reduce 97

30:	declaration-specifiers => function-specifier . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => function-specifier .
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 62
		$default => reduce 91

31:	declaration-specifiers => type-qualifier . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-qualifier .
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 61
		$default => reduce 89

32:	declaration-specifiers => type-specifier . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-specifier .
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 60
		$default => reduce 87

33:	declaration-specifiers => storage-class-specifier . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => storage-class-specifier .
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 59
		$default => reduce 85

34:	cpp-statement => 'cpp-stmt .
		'$lone-comm => reduce 303
		$default => reduce 303

35:	lone-comment => '$lone-comm .
		'$lone-comm => reduce 302
		$default => reduce 302

36:	function-definition => declaration-specifiers . declarator compound-statement
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
	function-definition => declaration-specifiers . declarator declaration-list compound-statement
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
	declaration => declaration-specifiers . ";" opt-code-comment
	declaration => declaration-specifiers . init-declarator-list $P1 ";" opt-code-comment
	init-declarator-list => . init-declarator
	init-declarator-list => . init-declarator-list "," init-declarator
	init-declarator => . declarator
	init-declarator => . declarator "=" initializer
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		init-declarator => shift 47
		init-declarator-list => shift 48
		";" => shift 49
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 57

37:	storage-class-specifier => "extern" .
	external-declaration => "extern" . '$string "{" translation-unit "}"
		'$string => shift 46
		$default => reduce 98

38:	external-declaration => cpp-statement .
		'$lone-comm => reduce 286
		$default => reduce 286

39:	external-declaration => lone-comment .
		'$lone-comm => reduce 285
		$default => reduce 285

40:	external-declaration => declaration .
		'$lone-comm => reduce 284
		$default => reduce 284

41:	external-declaration => function-definition .
		'$lone-comm => reduce 283
		$default => reduce 283

42:	translation-unit => external-declaration .
		'$lone-comm => reduce 281
		$default => reduce 281

43:	translation-unit => translation-unit . external-declaration
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	translation-unit-proxy => translation-unit .
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 45
		'$end => reduce 1

44:	$start => translation-unit-proxy .
		'$end => accept 0

45:	translation-unit => translation-unit external-declaration .
		'$lone-comm => reduce 282
		$default => reduce 282

46:	external-declaration => "extern" '$string . "{" translation-unit "}"
		"{" => shift 124

47:	init-declarator-list => init-declarator .
		";" => reduce 93
		"," => reduce 93

48:	init-declarator-list => init-declarator-list . "," init-declarator
	declaration => declaration-specifiers init-declarator-list . $P1 ";" opt-code-comment
	$P1 => .
		$P1 => shift 122
		"," => shift 123
		";" => reduce 84

49:	declaration => declaration-specifiers ";" . opt-code-comment
	opt-code-comment => .
	opt-code-comment => . code-comment
	code-comment => . '$code-comm
		'$code-comm => shift 119
		code-comment => shift 120
		opt-code-comment => shift 121
		'$lone-comm => reduce 292
		$default => reduce 292

50:	identifier => 'cpp-ident .
		$default => reduce 295

51:	identifier => '$ident .
		$default => reduce 294

52:	pointer => "*" . pointer
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	pointer => "*" . type-qualifier-list pointer
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	pointer => "*" .
	pointer => "*" . type-qualifier-list
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 116
		type-qualifier-list => shift 117
		"*" => shift 52
		pointer => shift 118
		$default => reduce 194

53:	direct-declarator => "(" . declarator ")"
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 115

54:	direct-declarator => identifier .
		$default => reduce 180

55:	direct-declarator => direct-declarator . "(" ")"
	direct-declarator => direct-declarator . "(" identifier-list ")"
	direct-declarator => direct-declarator . "(" parameter-type-list ")"
	direct-declarator => direct-declarator . "[" "*" "]"
	direct-declarator => direct-declarator . "[" type-qualifier-list "*" "]"
	direct-declarator => direct-declarator . "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => direct-declarator . "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => direct-declarator . "[" "]"
	direct-declarator => direct-declarator . "[" assignment-expression "]"
	direct-declarator => direct-declarator . "[" type-qualifier-list "]"
	direct-declarator => direct-declarator . "[" type-qualifier-list assignment-expression "]"
	declarator => direct-declarator .
		"[" => shift 113
		"(" => shift 114
		$default => reduce 179

56:	declarator => pointer . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 112

57:	init-declarator => declarator . "=" initializer
	init-declarator => declarator .
	function-definition => declaration-specifiers declarator . declaration-list compound-statement
	declaration-list => . declaration
	declaration-list => . declaration-list declaration
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	function-definition => declaration-specifiers declarator . compound-statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
		"{" => shift 106
		compound-statement => shift 107
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 108
		declaration => shift 109
		declaration-list => shift 110
		"=" => shift 111
		";" => reduce 95
		"," => reduce 95

58:	storage-class-specifier => "extern" .
		$default => reduce 98

59:	declaration-specifiers => storage-class-specifier declaration-specifiers .
		$default => reduce 86

60:	declaration-specifiers => type-specifier declaration-specifiers .
		$default => reduce 88

61:	declaration-specifiers => type-qualifier declaration-specifiers .
		$default => reduce 90

62:	declaration-specifiers => function-specifier declaration-specifiers .
		$default => reduce 92

63:	fixed-type-specifier => "short" "int" .
		$default => reduce 111

64:	fixed-type-specifier => "signed" "short" .
	fixed-type-specifier => "signed" "short" . "int"
		"int" => shift 105
		$default => reduce 112
		["int" => reduce 112] REMOVED by precedence

65:	fixed-type-specifier => "signed" "int" .
		$default => reduce 116

66:	fixed-type-specifier => "signed" "long" .
	fixed-type-specifier => "signed" "long" . "int"
	fixed-type-specifier => "signed" "long" . "long"
	fixed-type-specifier => "signed" "long" . "long" "int"
		"long" => shift 103
		"int" => shift 104
		$default => reduce 119
		["long" => reduce 119] REMOVED by precedence
		["int" => reduce 119] REMOVED by precedence

67:	fixed-type-specifier => "signed" "char" .
		$default => reduce 134

68:	fixed-type-specifier => "long" "int" .
		$default => reduce 118

69:	fixed-type-specifier => "long" "long" .
	fixed-type-specifier => "long" "long" . "int"
		"int" => shift 102
		$default => reduce 121
		["int" => reduce 121] REMOVED by precedence

70:	float-type-specifier => "long" "double" .
	complex-type-specifier => "long" "double" . "_Complex"
		"_Complex" => shift 101
		$default => reduce 138
		["_Complex" => reduce 138] REMOVED by precedence

71:	fixed-type-specifier => "unsigned" "short" . "int"
	fixed-type-specifier => "unsigned" "short" .
		"int" => shift 100
		$default => reduce 126
		["int" => reduce 126] REMOVED by precedence

72:	fixed-type-specifier => "unsigned" "int" .
		$default => reduce 127

73:	fixed-type-specifier => "unsigned" "long" . "int"
	fixed-type-specifier => "unsigned" "long" .
	fixed-type-specifier => "unsigned" "long" . "long" "int"
	fixed-type-specifier => "unsigned" "long" . "long"
		"long" => shift 98
		"int" => shift 99
		$default => reduce 130
		["long" => reduce 130] REMOVED by precedence
		["int" => reduce 130] REMOVED by precedence

74:	fixed-type-specifier => "unsigned" "char" .
		$default => reduce 135

75:	complex-type-specifier => "float" "_Complex" .
		$default => reduce 140

76:	complex-type-specifier => "double" "_Complex" .
		$default => reduce 141

77:	struct-or-union-specifier => "struct" "{" . struct-declaration-list "}"
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 90
		type-specifier => shift 91
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 92
		lone-comment => shift 93
		struct-declaration => shift 94
		struct-declaration-list => shift 97

78:	ident-like => typedef-name .
		$default => reduce 150

79:	ident-like => identifier .
		$default => reduce 149

80:	struct-or-union-specifier => "struct" ident-like . "{" struct-declaration-list "}"
	struct-or-union-specifier => "struct" ident-like .
		"{" => shift 96
		$default => reduce 145

81:	struct-or-union-specifier => "union" "{" . struct-declaration-list "}"
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 90
		type-specifier => shift 91
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 92
		lone-comment => shift 93
		struct-declaration => shift 94
		struct-declaration-list => shift 95

82:	struct-or-union-specifier => "union" ident-like . "{" struct-declaration-list "}"
	struct-or-union-specifier => "union" ident-like .
		"{" => shift 89
		$default => reduce 148

83:	enum-specifier => "enum" "{" . enumerator-list "}"
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" "{" . enumerator-list "," "}"
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 86
		enumerator => shift 87
		enumerator-list => shift 88

84:	enum-specifier => "enum" identifier . "{" enumerator-list "}"
	enum-specifier => "enum" identifier . "{" enumerator-list "," "}"
	enum-specifier => "enum" identifier .
		"{" => shift 85
		$default => reduce 169

85:	enum-specifier => "enum" identifier "{" . enumerator-list "," "}"
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" identifier "{" . enumerator-list "}"
	enumerator-list => . enumerator
	enumerator-list => . enumerator-list "," enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 86
		enumerator => shift 87
		enumerator-list => shift 226

86:	enumerator => identifier . "=" constant-expression
	enumerator => identifier .
		"=" => shift 225
		"}" => reduce 172
		"," => reduce 172

87:	enumerator-list => enumerator .
		"}" => reduce 170
		"," => reduce 170

88:	enum-specifier => "enum" "{" enumerator-list . "," "}"
	enumerator-list => enumerator-list . "," enumerator
	enum-specifier => "enum" "{" enumerator-list . "}"
		"}" => shift 223
		"," => shift 224

89:	struct-or-union-specifier => "union" ident-like "{" . struct-declaration-list "}"
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 90
		type-specifier => shift 91
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 92
		lone-comment => shift 93
		struct-declaration => shift 94
		struct-declaration-list => shift 222

90:	specifier-qualifier-list => type-qualifier .
	specifier-qualifier-list => type-qualifier . specifier-qualifier-list
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 90
		type-specifier => shift 91
		specifier-qualifier-list => shift 221
		$default => reduce 159

91:	specifier-qualifier-list => type-specifier .
	specifier-qualifier-list => type-specifier . specifier-qualifier-list
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 90
		type-specifier => shift 91
		specifier-qualifier-list => shift 220
		$default => reduce 157

92:	struct-declaration => specifier-qualifier-list . struct-declarator-list ";" opt-code-comment
	struct-declarator-list => . struct-declarator
	struct-declarator-list => . struct-declarator-list "," struct-declarator
	struct-declarator => . declarator
	struct-declarator => . declarator ":" constant-expression
	struct-declarator => . ":" constant-expression
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		":" => shift 216
		declarator => shift 217
		struct-declarator => shift 218
		struct-declarator-list => shift 219

93:	struct-declaration-list => lone-comment .
		'$lone-comm => reduce 152
		$default => reduce 152

94:	struct-declaration-list => struct-declaration .
		'$lone-comm => reduce 151
		$default => reduce 151

95:	struct-declaration-list => struct-declaration-list . lone-comment
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "union" "{" struct-declaration-list . "}"
		"}" => shift 215
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 90
		type-specifier => shift 91
		specifier-qualifier-list => shift 92
		struct-declaration => shift 212
		'$lone-comm => shift 35
		lone-comment => shift 213

96:	struct-or-union-specifier => "struct" ident-like "{" . struct-declaration-list "}"
	struct-declaration-list => . struct-declaration
	struct-declaration-list => . lone-comment
	struct-declaration-list => . struct-declaration-list struct-declaration
	struct-declaration-list => . struct-declaration-list lone-comment
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	lone-comment => . '$lone-comm
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 90
		type-specifier => shift 91
		'$lone-comm => shift 35
		specifier-qualifier-list => shift 92
		lone-comment => shift 93
		struct-declaration => shift 94
		struct-declaration-list => shift 214

97:	struct-declaration-list => struct-declaration-list . lone-comment
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "struct" "{" struct-declaration-list . "}"
		"}" => shift 211
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 90
		type-specifier => shift 91
		specifier-qualifier-list => shift 92
		struct-declaration => shift 212
		'$lone-comm => shift 35
		lone-comment => shift 213

98:	fixed-type-specifier => "unsigned" "long" "long" .
	fixed-type-specifier => "unsigned" "long" "long" . "int"
		"int" => shift 210
		$default => reduce 132
		["int" => reduce 132] REMOVED by precedence

99:	fixed-type-specifier => "unsigned" "long" "int" .
		$default => reduce 129

100:	fixed-type-specifier => "unsigned" "short" "int" .
		$default => reduce 125

101:	complex-type-specifier => "long" "double" "_Complex" .
		$default => reduce 142

102:	fixed-type-specifier => "long" "long" "int" .
		$default => reduce 122

103:	fixed-type-specifier => "signed" "long" "long" . "int"
	fixed-type-specifier => "signed" "long" "long" .
		"int" => shift 209
		$default => reduce 123
		["int" => reduce 123] REMOVED by precedence

104:	fixed-type-specifier => "signed" "long" "int" .
		$default => reduce 120

105:	fixed-type-specifier => "signed" "short" "int" .
		$default => reduce 113

106:	compound-statement => "{" . "}"
	compound-statement => "{" . block-item-list "}"
	block-item-list => . block-item
	block-item-list => . block-item-list block-item
	block-item => . declaration
	block-item => . statement
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		unary-expression => shift 172
		conditional-expression => shift 173
		'cpp-ident => shift 50
		'$ident => shift 51
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		assignment-expression => shift 182
		'cpp-stmt => shift 34
		"return" => shift 183
		"break" => shift 184
		"continue" => shift 185
		"goto" => shift 186
		"for" => shift 187
		"do" => shift 188
		"while" => shift 189
		"switch" => shift 190
		"if" => shift 191
		";" => shift 192
		expression => shift 193
		"{" => shift 106
		"default" => shift 194
		"case" => shift 195
		identifier => shift 196
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		cpp-statement => shift 197
		jump-statement => shift 198
		iteration-statement => shift 199
		selection-statement => shift 200
		expression-statement => shift 201
		compound-statement => shift 202
		labeled-statement => shift 203
		declaration-specifiers => shift 108
		statement => shift 204
		declaration => shift 205
		block-item => shift 206
		block-item-list => shift 207
		"}" => shift 208

107:	function-definition => declaration-specifiers declarator compound-statement .
		'$lone-comm => reduce 289
		$default => reduce 289

108:	declaration => declaration-specifiers . ";" opt-code-comment
	declaration => declaration-specifiers . init-declarator-list $P1 ";" opt-code-comment
	init-declarator-list => . init-declarator
	init-declarator-list => . init-declarator-list "," init-declarator
	init-declarator => . declarator
	init-declarator => . declarator "=" initializer
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 126
		init-declarator => shift 47
		init-declarator-list => shift 48
		";" => shift 49

109:	declaration-list => declaration .
		$default => reduce 290

110:	declaration-list => declaration-list . declaration
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	function-definition => declaration-specifiers declarator declaration-list . compound-statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
		"{" => shift 106
		compound-statement => shift 180
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 108
		declaration => shift 181

111:	init-declarator => declarator "=" . initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		"{" => shift 177
		assignment-expression => shift 178
		initializer => shift 179

112:	direct-declarator => direct-declarator . "(" ")"
	direct-declarator => direct-declarator . "(" identifier-list ")"
	direct-declarator => direct-declarator . "(" parameter-type-list ")"
	direct-declarator => direct-declarator . "[" "*" "]"
	direct-declarator => direct-declarator . "[" type-qualifier-list "*" "]"
	direct-declarator => direct-declarator . "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => direct-declarator . "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => direct-declarator . "[" "]"
	direct-declarator => direct-declarator . "[" assignment-expression "]"
	direct-declarator => direct-declarator . "[" type-qualifier-list "]"
	direct-declarator => direct-declarator . "[" type-qualifier-list assignment-expression "]"
	declarator => pointer direct-declarator .
		"[" => shift 113
		"(" => shift 114
		$default => reduce 178

113:	direct-declarator => direct-declarator "[" . type-qualifier-list assignment-expression "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . type-qualifier-list "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-declarator => direct-declarator "[" . "]"
	direct-declarator => direct-declarator "[" . "static" type-qualifier-list assignment-expression "]"
	direct-declarator => direct-declarator "[" . type-qualifier-list "static" assignment-expression "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . type-qualifier-list "*" "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" . "*" "]"
		"static" => shift 139
		"]" => shift 140
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 162
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 174
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 116
		type-qualifier-list => shift 175

114:	direct-declarator => direct-declarator "(" . parameter-type-list ")"
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-declarator => direct-declarator "(" . identifier-list ")"
	identifier-list => . identifier
	identifier-list => . identifier-list "," identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
	direct-declarator => direct-declarator "(" . ")"
		")" => shift 132
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 133
		identifier-list => shift 134
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 135
		parameter-declaration => shift 136
		parameter-list => shift 137
		parameter-type-list => shift 138

115:	direct-declarator => "(" declarator . ")"
		")" => shift 131

116:	type-qualifier-list => type-qualifier .
		$default => reduce 197

117:	pointer => "*" type-qualifier-list .
	type-qualifier-list => type-qualifier-list . type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	pointer => "*" type-qualifier-list . pointer
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
		"*" => shift 52
		pointer => shift 129
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 130
		$default => reduce 193

118:	pointer => "*" pointer .
		$default => reduce 196

119:	code-comment => '$code-comm .
		'$lone-comm => reduce 301
		$default => reduce 301

120:	opt-code-comment => code-comment .
		'$lone-comm => reduce 293
		$default => reduce 293

121:	declaration => declaration-specifiers ";" opt-code-comment .
		'$lone-comm => reduce 83
		$default => reduce 83

122:	declaration => declaration-specifiers init-declarator-list $P1 . ";" opt-code-comment
		";" => shift 128

123:	init-declarator-list => init-declarator-list "," . init-declarator
	init-declarator => . declarator
	init-declarator => . declarator "=" initializer
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		declarator => shift 126
		init-declarator => shift 127

124:	external-declaration => "extern" '$string "{" . translation-unit "}"
	translation-unit => . external-declaration
	translation-unit => . translation-unit external-declaration
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 42
		translation-unit => shift 125

125:	translation-unit => translation-unit . external-declaration
	external-declaration => . function-definition
	external-declaration => . declaration
	external-declaration => . lone-comment
	external-declaration => . cpp-statement
	external-declaration => . "extern" '$string "{" translation-unit "}"
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	function-definition => . declaration-specifiers declarator declaration-list compound-statement
	function-definition => . declaration-specifiers declarator compound-statement
	lone-comment => . '$lone-comm
	cpp-statement => . 'cpp-stmt
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	external-declaration => "extern" '$string "{" translation-unit . "}"
		"}" => shift 332
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		'cpp-stmt => shift 34
		'$lone-comm => shift 35
		declaration-specifiers => shift 36
		"extern" => shift 37
		cpp-statement => shift 38
		lone-comment => shift 39
		declaration => shift 40
		function-definition => shift 41
		external-declaration => shift 45

126:	init-declarator => declarator . "=" initializer
	init-declarator => declarator .
		"=" => shift 111
		";" => reduce 95
		"," => reduce 95

127:	init-declarator-list => init-declarator-list "," init-declarator .
		";" => reduce 94
		"," => reduce 94

128:	declaration => declaration-specifiers init-declarator-list $P1 ";" . opt-code-comment
	opt-code-comment => .
	opt-code-comment => . code-comment
	code-comment => . '$code-comm
		'$code-comm => shift 119
		code-comment => shift 120
		opt-code-comment => shift 331
		'$lone-comm => reduce 292
		$default => reduce 292

129:	pointer => "*" type-qualifier-list pointer .
		$default => reduce 195

130:	type-qualifier-list => type-qualifier-list type-qualifier .
		$default => reduce 198

131:	direct-declarator => "(" declarator ")" .
		$default => reduce 181

132:	direct-declarator => direct-declarator "(" ")" .
		$default => reduce 192

133:	identifier-list => identifier .
		")" => reduce 206
		"," => reduce 206

134:	identifier-list => identifier-list . "," identifier
	direct-declarator => direct-declarator "(" identifier-list . ")"
		")" => shift 329
		"," => shift 330

135:	parameter-declaration => declaration-specifiers .
	parameter-declaration => declaration-specifiers . abstract-declarator
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	parameter-declaration => declaration-specifiers . declarator
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 54
		direct-declarator => shift 55
		declarator => shift 323
		"[" => shift 324
		"(" => shift 325
		"*" => shift 52
		direct-abstract-declarator => shift 326
		pointer => shift 327
		abstract-declarator => shift 328
		")" => reduce 205
		"," => reduce 205

136:	parameter-list => parameter-declaration .
		"," => reduce 201
		")" => reduce 201

137:	parameter-list => parameter-list . "," parameter-declaration
	parameter-type-list => parameter-list . "," "..."
	parameter-type-list => parameter-list .
		"," => shift 322
		")" => reduce 199

138:	direct-declarator => direct-declarator "(" parameter-type-list . ")"
		")" => shift 321

139:	direct-declarator => direct-declarator "[" "static" . type-qualifier-list assignment-expression "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 116
		type-qualifier-list => shift 320

140:	direct-declarator => direct-declarator "[" "]" .
		$default => reduce 185

141:	multiplicative-expression => cast-expression .
		$default => reduce 36

142:	multiplicative-expression => multiplicative-expression . "%" cast-expression
	multiplicative-expression => multiplicative-expression . "/" cast-expression
	multiplicative-expression => multiplicative-expression . "*" cast-expression
	additive-expression => multiplicative-expression .
		"*" => shift 317
		"/" => shift 318
		"%" => shift 319
		$default => reduce 40

143:	additive-expression => additive-expression . "-" multiplicative-expression
	additive-expression => additive-expression . "+" multiplicative-expression
	shift-expression => additive-expression .
		"+" => shift 315
		"-" => shift 316
		$default => reduce 43

144:	shift-expression => shift-expression . ">>" additive-expression
	shift-expression => shift-expression . "<<" additive-expression
	relational-expression => shift-expression .
		"<<" => shift 313
		">>" => shift 314
		$default => reduce 46

145:	relational-expression => relational-expression . ">=" shift-expression
	relational-expression => relational-expression . "<=" shift-expression
	relational-expression => relational-expression . ">" shift-expression
	relational-expression => relational-expression . "<" shift-expression
	equality-expression => relational-expression .
		"<" => shift 309
		">" => shift 310
		"<=" => shift 311
		">=" => shift 312
		$default => reduce 51

146:	equality-expression => equality-expression . "!=" relational-expression
	equality-expression => equality-expression . "==" relational-expression
	bitwise-and-expression => equality-expression .
		"==" => shift 307
		"!=" => shift 308
		$default => reduce 54

147:	bitwise-and-expression => bitwise-and-expression . "&" equality-expression
	bitwise-xor-expression => bitwise-and-expression .
		"&" => shift 306
		$default => reduce 56

148:	string-literal => '$string .
		$default => reduce 299

149:	constant => '$chlit .
		$default => reduce 298

150:	constant => '$float .
		$default => reduce 297

151:	constant => '$fixed .
		$default => reduce 296

152:	bitwise-xor-expression => bitwise-xor-expression . "^" bitwise-and-expression
	bitwise-or-expression => bitwise-xor-expression .
		"^" => shift 305
		$default => reduce 58

153:	bitwise-or-expression => bitwise-or-expression . "|" bitwise-xor-expression
	logical-and-expression => bitwise-or-expression .
		"|" => shift 304
		$default => reduce 60

154:	string-literal => string-literal . '$string
	primary-expression => string-literal .
		'$string => shift 303
		$default => reduce 4

155:	primary-expression => constant .
		$default => reduce 3

156:	primary-expression => identifier .
		$default => reduce 2

157:	logical-and-expression => logical-and-expression . "&&" bitwise-or-expression
	logical-or-expression => logical-and-expression .
		"&&" => shift 302
		$default => reduce 62

158:	unary-operator => "!" .
		$default => reduce 33

159:	unary-operator => "~" .
		$default => reduce 32

160:	unary-operator => "-" .
		$default => reduce 31

161:	unary-operator => "+" .
		$default => reduce 30

162:	direct-declarator => direct-declarator "[" "*" . "]"
	unary-operator => "*" .
		"]" => shift 301
		$default => reduce 29

163:	unary-operator => "&" .
		$default => reduce 28

164:	cast-expression => "(" . type-name ")" cast-expression
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => "(" . expression ")"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" . type-name ")" "{" initializer-list "," "}"
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	postfix-expression => "(" . type-name ")" "{" initializer-list "}"
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 295
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 296
		type-specifier => shift 297
		storage-class-specifier => shift 33
		declaration-specifiers => shift 298
		specifier-qualifier-list => shift 299
		type-name => shift 300

165:	postfix-expression => primary-expression .
		$default => reduce 6

166:	logical-or-expression => logical-or-expression . "||" logical-and-expression
	conditional-expression => logical-or-expression . "?" expression ":" conditional-expression
	conditional-expression => logical-or-expression .
		"?" => shift 293
		"||" => shift 294
		$default => reduce 64

167:	unary-expression => "sizeof" . "(" type-name ")"
	unary-expression => "sizeof" . unary-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 291
		"(" => shift 292

168:	unary-expression => unary-operator . cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 290

169:	unary-expression => "--" . unary-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 287
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 289

170:	unary-expression => "++" . unary-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 287
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 288

171:	postfix-expression => postfix-expression . "--"
	postfix-expression => postfix-expression . "++"
	postfix-expression => postfix-expression . "->" identifier
	postfix-expression => postfix-expression . "." identifier
	postfix-expression => postfix-expression . "(" ")"
	postfix-expression => postfix-expression . "(" argument-expression-list ")"
	postfix-expression => postfix-expression . "[" expression "]"
	unary-expression => postfix-expression .
		"[" => shift 281
		"(" => shift 282
		"." => shift 283
		"->" => shift 284
		"++" => shift 285
		"--" => shift 286
		$default => reduce 22

172:	cast-expression => unary-expression .
	assignment-expression => unary-expression . assignment-operator assignment-expression
	assignment-operator => . "="
	assignment-operator => . "+="
	assignment-operator => . "-="
	assignment-operator => . "*="
	assignment-operator => . "/="
	assignment-operator => . "%="
	assignment-operator => . "<<="
	assignment-operator => . ">>="
	assignment-operator => . "&="
	assignment-operator => . "^="
	assignment-operator => . "|="
		"|=" => shift 269
		"^=" => shift 270
		"&=" => shift 271
		">>=" => shift 272
		"<<=" => shift 273
		"%=" => shift 274
		"/=" => shift 275
		"*=" => shift 276
		"-=" => shift 277
		"+=" => shift 278
		"=" => shift 279
		assignment-operator => shift 280
		$default => reduce 34

173:	assignment-expression => conditional-expression .
		$default => reduce 66

174:	direct-declarator => direct-declarator "[" assignment-expression . "]"
		"]" => shift 268

175:	direct-declarator => direct-declarator "[" type-qualifier-list . "*" "]"
	direct-declarator => direct-declarator "[" type-qualifier-list . "static" assignment-expression "]"
	direct-declarator => direct-declarator "[" type-qualifier-list . "]"
	type-qualifier-list => type-qualifier-list . type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" type-qualifier-list . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 264
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 130
		"]" => shift 265
		"static" => shift 266
		"*" => shift 267

176:	unary-operator => "*" .
		$default => reduce 29

177:	initializer => "{" . initializer-list "," "}"
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	initializer => "{" . initializer-list "}"
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		"." => shift 257
		"[" => shift 258
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		designator => shift 259
		unary-expression => shift 172
		conditional-expression => shift 173
		designator-list => shift 260
		"{" => shift 177
		assignment-expression => shift 178
		initializer => shift 261
		designation => shift 262
		initializer-list => shift 263

178:	initializer => assignment-expression .
		"," => reduce 235
		"}" => reduce 235
		";" => reduce 235

179:	init-declarator => declarator "=" initializer .
		";" => reduce 96
		"," => reduce 96

180:	function-definition => declaration-specifiers declarator declaration-list compound-statement .
		'$lone-comm => reduce 288
		$default => reduce 288

181:	declaration-list => declaration-list declaration .
		$default => reduce 291

182:	expression => assignment-expression .
		$default => reduce 79

183:	jump-statement => "return" . ";"
	jump-statement => "return" . expression ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 255
		";" => shift 256

184:	jump-statement => "break" . ";"
		";" => shift 254

185:	jump-statement => "continue" . ";"
		";" => shift 253

186:	jump-statement => "goto" . identifier ";"
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 252

187:	iteration-statement => "for" . "(" initial-clause opt-expression ";" opt-expression ")" statement
		"(" => shift 251

188:	iteration-statement => "do" . statement "while" "(" expression ")" ";"
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 182
		'cpp-stmt => shift 34
		"return" => shift 183
		"break" => shift 184
		"continue" => shift 185
		"goto" => shift 186
		"for" => shift 187
		"do" => shift 188
		"while" => shift 189
		"switch" => shift 190
		"if" => shift 191
		";" => shift 192
		expression => shift 193
		"{" => shift 106
		"default" => shift 194
		"case" => shift 195
		identifier => shift 196
		cpp-statement => shift 197
		jump-statement => shift 198
		iteration-statement => shift 199
		selection-statement => shift 200
		expression-statement => shift 201
		compound-statement => shift 202
		labeled-statement => shift 203
		statement => shift 250

189:	iteration-statement => "while" . "(" expression ")" statement
		"(" => shift 249

190:	selection-statement => "switch" . "(" expression ")" statement
		"(" => shift 248

191:	selection-statement => "if" . "(" expression ")" statement "else" statement
	selection-statement => "if" . "(" expression ")" statement
		"(" => shift 247

192:	expression-statement => ";" .
		$default => reduce 264

193:	expression => expression . "," assignment-expression
	expression-statement => expression . ";"
		";" => shift 245
		"," => shift 246

194:	labeled-statement => "default" . ":" statement
		":" => shift 244

195:	labeled-statement => "case" . constant-expression ":" statement
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		logical-and-expression => shift 157
		logical-or-expression => shift 166
		conditional-expression => shift 230
		constant-expression => shift 243

196:	primary-expression => identifier .
	labeled-statement => identifier . ":" statement
		":" => shift 242
		$default => reduce 2

197:	statement => cpp-statement .
		$default => reduce 253

198:	statement => jump-statement .
		$default => reduce 252

199:	statement => iteration-statement .
		$default => reduce 251

200:	statement => selection-statement .
		$default => reduce 250

201:	statement => expression-statement .
		$default => reduce 249

202:	statement => compound-statement .
		$default => reduce 248

203:	statement => labeled-statement .
		$default => reduce 247

204:	block-item => statement .
		$default => reduce 262

205:	block-item => declaration .
		$default => reduce 261

206:	block-item-list => block-item .
		$default => reduce 259

207:	block-item-list => block-item-list . block-item
	block-item => . declaration
	block-item => . statement
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	compound-statement => "{" block-item-list . "}"
		"}" => shift 240
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		unary-expression => shift 172
		conditional-expression => shift 173
		'cpp-ident => shift 50
		'$ident => shift 51
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		assignment-expression => shift 182
		'cpp-stmt => shift 34
		"return" => shift 183
		"break" => shift 184
		"continue" => shift 185
		"goto" => shift 186
		"for" => shift 187
		"do" => shift 188
		"while" => shift 189
		"switch" => shift 190
		"if" => shift 191
		";" => shift 192
		expression => shift 193
		"{" => shift 106
		"default" => shift 194
		"case" => shift 195
		identifier => shift 196
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		cpp-statement => shift 197
		jump-statement => shift 198
		iteration-statement => shift 199
		selection-statement => shift 200
		expression-statement => shift 201
		compound-statement => shift 202
		labeled-statement => shift 203
		declaration-specifiers => shift 108
		statement => shift 204
		declaration => shift 205
		block-item => shift 241

208:	compound-statement => "{" "}" .
		'$lone-comm => reduce 258
		$default => reduce 258

209:	fixed-type-specifier => "signed" "long" "long" "int" .
		$default => reduce 124

210:	fixed-type-specifier => "unsigned" "long" "long" "int" .
		$default => reduce 131

211:	struct-or-union-specifier => "struct" "{" struct-declaration-list "}" .
		$default => reduce 144

212:	struct-declaration-list => struct-declaration-list struct-declaration .
		'$lone-comm => reduce 153
		$default => reduce 153

213:	struct-declaration-list => struct-declaration-list lone-comment .
		'$lone-comm => reduce 154
		$default => reduce 154

214:	struct-declaration-list => struct-declaration-list . lone-comment
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "struct" ident-like "{" struct-declaration-list . "}"
		"}" => shift 239
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 90
		type-specifier => shift 91
		specifier-qualifier-list => shift 92
		struct-declaration => shift 212
		'$lone-comm => shift 35
		lone-comment => shift 213

215:	struct-or-union-specifier => "union" "{" struct-declaration-list "}" .
		$default => reduce 147

216:	struct-declarator => ":" . constant-expression
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		logical-and-expression => shift 157
		logical-or-expression => shift 166
		conditional-expression => shift 230
		constant-expression => shift 238

217:	struct-declarator => declarator . ":" constant-expression
	struct-declarator => declarator .
		":" => shift 237
		";" => reduce 162
		"," => reduce 162

218:	struct-declarator-list => struct-declarator .
		";" => reduce 160
		"," => reduce 160

219:	struct-declarator-list => struct-declarator-list . "," struct-declarator
	struct-declaration => specifier-qualifier-list struct-declarator-list . ";" opt-code-comment
		";" => shift 235
		"," => shift 236

220:	specifier-qualifier-list => type-specifier specifier-qualifier-list .
		$default => reduce 156

221:	specifier-qualifier-list => type-qualifier specifier-qualifier-list .
		$default => reduce 158

222:	struct-declaration-list => struct-declaration-list . lone-comment
	lone-comment => . '$lone-comm
	struct-declaration-list => struct-declaration-list . struct-declaration
	struct-declaration => . specifier-qualifier-list struct-declarator-list ";" opt-code-comment
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	struct-or-union-specifier => "union" ident-like "{" struct-declaration-list . "}"
		"}" => shift 234
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 90
		type-specifier => shift 91
		specifier-qualifier-list => shift 92
		struct-declaration => shift 212
		'$lone-comm => shift 35
		lone-comment => shift 213

223:	enum-specifier => "enum" "{" enumerator-list "}" .
		$default => reduce 167

224:	enumerator-list => enumerator-list "," . enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	enum-specifier => "enum" "{" enumerator-list "," . "}"
		"}" => shift 232
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 86
		enumerator => shift 233

225:	enumerator => identifier "=" . constant-expression
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		logical-and-expression => shift 157
		logical-or-expression => shift 166
		conditional-expression => shift 230
		constant-expression => shift 231

226:	enum-specifier => "enum" identifier "{" enumerator-list . "}"
	enumerator-list => enumerator-list . "," enumerator
	enum-specifier => "enum" identifier "{" enumerator-list . "," "}"
		"," => shift 227
		"}" => shift 228

227:	enum-specifier => "enum" identifier "{" enumerator-list "," . "}"
	enumerator-list => enumerator-list "," . enumerator
	enumerator => . identifier
	enumerator => . identifier "=" constant-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 86
		enumerator => shift 233
		"}" => shift 410

228:	enum-specifier => "enum" identifier "{" enumerator-list "}" .
		$default => reduce 165

229:	cast-expression => unary-expression .
		$default => reduce 34

230:	constant-expression => conditional-expression .
		$default => reduce 81

231:	enumerator => identifier "=" constant-expression .
		"}" => reduce 173
		"," => reduce 173

232:	enum-specifier => "enum" "{" enumerator-list "," "}" .
		$default => reduce 168

233:	enumerator-list => enumerator-list "," enumerator .
		"}" => reduce 171
		"," => reduce 171

234:	struct-or-union-specifier => "union" ident-like "{" struct-declaration-list "}" .
		$default => reduce 146

235:	struct-declaration => specifier-qualifier-list struct-declarator-list ";" . opt-code-comment
	opt-code-comment => .
	opt-code-comment => . code-comment
	code-comment => . '$code-comm
		'$code-comm => shift 119
		code-comment => shift 120
		opt-code-comment => shift 409
		'$lone-comm => reduce 292
		$default => reduce 292

236:	struct-declarator-list => struct-declarator-list "," . struct-declarator
	struct-declarator => . declarator
	struct-declarator => . declarator ":" constant-expression
	struct-declarator => . ":" constant-expression
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 53
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 56
		":" => shift 216
		declarator => shift 217
		struct-declarator => shift 408

237:	struct-declarator => declarator ":" . constant-expression
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		logical-and-expression => shift 157
		logical-or-expression => shift 166
		conditional-expression => shift 230
		constant-expression => shift 407

238:	struct-declarator => ":" constant-expression .
		";" => reduce 164
		"," => reduce 164

239:	struct-or-union-specifier => "struct" ident-like "{" struct-declaration-list "}" .
		$default => reduce 143

240:	compound-statement => "{" block-item-list "}" .
		'$lone-comm => reduce 257
		$default => reduce 257

241:	block-item-list => block-item-list block-item .
		$default => reduce 260

242:	labeled-statement => identifier ":" . statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 182
		'cpp-stmt => shift 34
		"return" => shift 183
		"break" => shift 184
		"continue" => shift 185
		"goto" => shift 186
		"for" => shift 187
		"do" => shift 188
		"while" => shift 189
		"switch" => shift 190
		"if" => shift 191
		";" => shift 192
		expression => shift 193
		"{" => shift 106
		"default" => shift 194
		"case" => shift 195
		identifier => shift 196
		cpp-statement => shift 197
		jump-statement => shift 198
		iteration-statement => shift 199
		selection-statement => shift 200
		expression-statement => shift 201
		compound-statement => shift 202
		labeled-statement => shift 203
		statement => shift 406

243:	labeled-statement => "case" constant-expression . ":" statement
		":" => shift 405

244:	labeled-statement => "default" ":" . statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 182
		'cpp-stmt => shift 34
		"return" => shift 183
		"break" => shift 184
		"continue" => shift 185
		"goto" => shift 186
		"for" => shift 187
		"do" => shift 188
		"while" => shift 189
		"switch" => shift 190
		"if" => shift 191
		";" => shift 192
		expression => shift 193
		"{" => shift 106
		"default" => shift 194
		"case" => shift 195
		identifier => shift 196
		cpp-statement => shift 197
		jump-statement => shift 198
		iteration-statement => shift 199
		selection-statement => shift 200
		expression-statement => shift 201
		compound-statement => shift 202
		labeled-statement => shift 203
		statement => shift 404

245:	expression-statement => expression ";" .
		$default => reduce 263

246:	expression => expression "," . assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 403

247:	selection-statement => "if" "(" . expression ")" statement
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	selection-statement => "if" "(" . expression ")" statement "else" statement
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 402

248:	selection-statement => "switch" "(" . expression ")" statement
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 401

249:	iteration-statement => "while" "(" . expression ")" statement
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 400

250:	iteration-statement => "do" statement . "while" "(" expression ")" ";"
		"while" => shift 399

251:	iteration-statement => "for" "(" . initial-clause opt-expression ";" opt-expression ")" statement
	initial-clause => . expression ";"
	initial-clause => . ";"
	initial-clause => . declaration
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	declaration => . declaration-specifiers init-declarator-list $P1 ";" opt-code-comment
	declaration => . declaration-specifiers ";" opt-code-comment
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		unary-expression => shift 172
		conditional-expression => shift 173
		declaration-specifiers => shift 108
		assignment-expression => shift 182
		declaration => shift 395
		";" => shift 396
		expression => shift 397
		initial-clause => shift 398

252:	jump-statement => "goto" identifier . ";"
		";" => shift 394

253:	jump-statement => "continue" ";" .
		$default => reduce 277

254:	jump-statement => "break" ";" .
		$default => reduce 278

255:	expression => expression . "," assignment-expression
	jump-statement => "return" expression . ";"
		";" => shift 393
		"," => shift 246

256:	jump-statement => "return" ";" .
		$default => reduce 280

257:	designator => "." . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 392

258:	designator => "[" . constant-expression "]"
	constant-expression => . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		logical-and-expression => shift 157
		logical-or-expression => shift 166
		conditional-expression => shift 230
		constant-expression => shift 391

259:	designator-list => designator .
		"=" => reduce 243
		"." => reduce 243
		"[" => reduce 243

260:	designator-list => designator-list . designator
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	designation => designator-list . "="
		"=" => shift 389
		"." => shift 257
		"[" => shift 258
		designator => shift 390

261:	initializer-list => initializer .
		"," => reduce 239
		"}" => reduce 239

262:	initializer-list => designation . initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		"{" => shift 177
		assignment-expression => shift 178
		initializer => shift 388

263:	initializer => "{" initializer-list . "}"
	initializer-list => initializer-list . "," initializer
	initializer-list => initializer-list . "," designation initializer
	initializer => "{" initializer-list . "," "}"
		"," => shift 386
		"}" => shift 387

264:	direct-declarator => direct-declarator "[" type-qualifier-list assignment-expression . "]"
		"]" => shift 385

265:	direct-declarator => direct-declarator "[" type-qualifier-list "]" .
		$default => reduce 183

266:	direct-declarator => direct-declarator "[" type-qualifier-list "static" . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 384

267:	unary-operator => "*" .
	direct-declarator => direct-declarator "[" type-qualifier-list "*" . "]"
		"]" => shift 383
		$default => reduce 29

268:	direct-declarator => direct-declarator "[" assignment-expression "]" .
		$default => reduce 184

269:	assignment-operator => "|=" .
		$default => reduce 78

270:	assignment-operator => "^=" .
		$default => reduce 77

271:	assignment-operator => "&=" .
		$default => reduce 76

272:	assignment-operator => ">>=" .
		$default => reduce 75

273:	assignment-operator => "<<=" .
		$default => reduce 74

274:	assignment-operator => "%=" .
		$default => reduce 73

275:	assignment-operator => "/=" .
		$default => reduce 72

276:	assignment-operator => "*=" .
		$default => reduce 71

277:	assignment-operator => "-=" .
		$default => reduce 70

278:	assignment-operator => "+=" .
		$default => reduce 69

279:	assignment-operator => "=" .
		$default => reduce 68

280:	assignment-expression => unary-expression assignment-operator . assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 382

281:	postfix-expression => postfix-expression "[" . expression "]"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 381

282:	postfix-expression => postfix-expression "(" . argument-expression-list ")"
	argument-expression-list => . assignment-expression
	argument-expression-list => . argument-expression-list "," assignment-expression
	argument-expression-list => . arg-expr-hack
	argument-expression-list => . argument-expression-list "," arg-expr-hack
	arg-expr-hack => . declaration-specifiers abstract-declarator
	arg-expr-hack => . declaration-specifiers
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => postfix-expression "(" . ")"
		")" => shift 376
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		declaration-specifiers => shift 377
		arg-expr-hack => shift 378
		assignment-expression => shift 379
		argument-expression-list => shift 380

283:	postfix-expression => postfix-expression "." . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 375

284:	postfix-expression => postfix-expression "->" . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 374

285:	postfix-expression => postfix-expression "++" .
		$default => reduce 12

286:	postfix-expression => postfix-expression "--" .
		$default => reduce 13

287:	primary-expression => "(" . expression ")"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" . type-name ")" "{" initializer-list "," "}"
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	postfix-expression => "(" . type-name ")" "{" initializer-list "}"
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 296
		type-specifier => shift 297
		storage-class-specifier => shift 33
		declaration-specifiers => shift 298
		specifier-qualifier-list => shift 299
		type-name => shift 373
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 295

288:	unary-expression => "++" unary-expression .
		$default => reduce 23

289:	unary-expression => "--" unary-expression .
		$default => reduce 24

290:	unary-expression => unary-operator cast-expression .
		$default => reduce 25

291:	unary-expression => "sizeof" unary-expression .
		$default => reduce 26

292:	primary-expression => "(" . expression ")"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" . type-name ")" "{" initializer-list "," "}"
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	postfix-expression => "(" . type-name ")" "{" initializer-list "}"
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	unary-expression => "sizeof" "(" . type-name ")"
	type-name => . specifier-qualifier-list abstract-declarator
	type-name => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 296
		type-specifier => shift 297
		storage-class-specifier => shift 33
		declaration-specifiers => shift 298
		specifier-qualifier-list => shift 299
		type-name => shift 372
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 295

293:	conditional-expression => logical-or-expression "?" . expression ":" conditional-expression
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 371

294:	logical-or-expression => logical-or-expression "||" . logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		logical-and-expression => shift 370

295:	expression => expression . "," assignment-expression
	primary-expression => "(" expression . ")"
		")" => shift 369
		"," => shift 246

296:	specifier-qualifier-list => type-qualifier .
	specifier-qualifier-list => type-qualifier . specifier-qualifier-list
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-qualifier . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-qualifier .
		"inline" => shift 14
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		storage-class-specifier => shift 33
		declaration-specifiers => shift 61
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 296
		type-specifier => shift 297
		specifier-qualifier-list => shift 221
		")" => reduce 89
		"*" => reduce 159
		"[" => reduce 159
		"(" => reduce 159

297:	specifier-qualifier-list => type-specifier .
	specifier-qualifier-list => type-specifier . specifier-qualifier-list
	specifier-qualifier-list => . type-specifier specifier-qualifier-list
	specifier-qualifier-list => . type-specifier
	specifier-qualifier-list => . type-qualifier specifier-qualifier-list
	specifier-qualifier-list => . type-qualifier
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-specifier . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	declaration-specifiers => type-specifier .
		"inline" => shift 14
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		storage-class-specifier => shift 33
		declaration-specifiers => shift 60
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		type-qualifier => shift 296
		type-specifier => shift 297
		specifier-qualifier-list => shift 220
		")" => reduce 87
		"*" => reduce 157
		"[" => reduce 157
		"(" => reduce 157

298:	type-name => declaration-specifiers .
		")" => reduce 209

299:	type-name => specifier-qualifier-list . abstract-declarator
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 324
		"(" => shift 366
		"*" => shift 52
		direct-abstract-declarator => shift 326
		pointer => shift 367
		abstract-declarator => shift 368

300:	postfix-expression => "(" type-name . ")" "{" initializer-list "}"
	postfix-expression => "(" type-name . ")" "{" initializer-list "," "}"
	cast-expression => "(" type-name . ")" cast-expression
		")" => shift 365

301:	direct-declarator => direct-declarator "[" "*" "]" .
		$default => reduce 189

302:	logical-and-expression => logical-and-expression "&&" . bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 364

303:	string-literal => string-literal '$string .
		$default => reduce 300

304:	bitwise-or-expression => bitwise-or-expression "|" . bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		bitwise-xor-expression => shift 363

305:	bitwise-xor-expression => bitwise-xor-expression "^" . bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 362

306:	bitwise-and-expression => bitwise-and-expression "&" . equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 361

307:	equality-expression => equality-expression "==" . relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 360

308:	equality-expression => equality-expression "!=" . relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 359

309:	relational-expression => relational-expression "<" . shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 358

310:	relational-expression => relational-expression ">" . shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 357

311:	relational-expression => relational-expression "<=" . shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 356

312:	relational-expression => relational-expression ">=" . shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 355

313:	shift-expression => shift-expression "<<" . additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 354

314:	shift-expression => shift-expression ">>" . additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 353

315:	additive-expression => additive-expression "+" . multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 352

316:	additive-expression => additive-expression "-" . multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 351

317:	multiplicative-expression => multiplicative-expression "*" . cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 350

318:	multiplicative-expression => multiplicative-expression "/" . cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 349

319:	multiplicative-expression => multiplicative-expression "%" . cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 348

320:	type-qualifier-list => type-qualifier-list . type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-declarator => direct-declarator "[" "static" type-qualifier-list . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 347
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 130

321:	direct-declarator => direct-declarator "(" parameter-type-list ")" .
		$default => reduce 190

322:	parameter-type-list => parameter-list "," . "..."
	parameter-list => parameter-list "," . parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 135
		parameter-declaration => shift 345
		"..." => shift 346

323:	parameter-declaration => declaration-specifiers declarator .
		")" => reduce 203
		"," => reduce 203

324:	direct-abstract-declarator => "[" . "*" "]"
	direct-abstract-declarator => "[" . type-qualifier-list "static" assignment-expression "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" . "static" type-qualifier-list "]"
	direct-abstract-declarator => "[" . "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => "[" . "]"
	direct-abstract-declarator => "[" . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-abstract-declarator => "[" . type-qualifier-list "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" . type-qualifier-list assignment-expression "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 340
		"]" => shift 341
		"static" => shift 342
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 116
		type-qualifier-list => shift 343
		"*" => shift 344

325:	direct-declarator => "(" . declarator ")"
	declarator => . pointer direct-declarator
	declarator => . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	identifier => . '$ident
	identifier => . 'cpp-ident
	direct-abstract-declarator => "(" . ")"
	direct-abstract-declarator => "(" . parameter-type-list ")"
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-abstract-declarator => "(" . abstract-declarator ")"
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 324
		direct-abstract-declarator => shift 326
		abstract-declarator => shift 337
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 135
		parameter-declaration => shift 136
		parameter-list => shift 137
		parameter-type-list => shift 338
		")" => shift 339
		'cpp-ident => shift 50
		'$ident => shift 51
		"*" => shift 52
		"(" => shift 325
		identifier => shift 54
		direct-declarator => shift 55
		pointer => shift 327
		declarator => shift 115

326:	direct-abstract-declarator => direct-abstract-declarator . "(" ")"
	direct-abstract-declarator => direct-abstract-declarator . "(" parameter-type-list ")"
	direct-abstract-declarator => direct-abstract-declarator . "[" "*" "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" assignment-expression "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list assignment-expression "]"
	abstract-declarator => direct-abstract-declarator .
		"[" => shift 335
		"(" => shift 336
		")" => reduce 212
		"," => reduce 212

327:	declarator => pointer . direct-declarator
	direct-declarator => . identifier
	direct-declarator => . "(" declarator ")"
	direct-declarator => . direct-declarator "[" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "]"
	direct-declarator => . direct-declarator "[" assignment-expression "]"
	direct-declarator => . direct-declarator "[" "]"
	direct-declarator => . direct-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-declarator => . direct-declarator "[" type-qualifier-list "*" "]"
	direct-declarator => . direct-declarator "[" "*" "]"
	direct-declarator => . direct-declarator "(" parameter-type-list ")"
	direct-declarator => . direct-declarator "(" identifier-list ")"
	direct-declarator => . direct-declarator "(" ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	abstract-declarator => pointer . direct-abstract-declarator
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	abstract-declarator => pointer .
		"[" => shift 324
		direct-abstract-declarator => shift 334
		'cpp-ident => shift 50
		'$ident => shift 51
		"(" => shift 325
		identifier => shift 54
		direct-declarator => shift 112
		")" => reduce 210
		"," => reduce 210

328:	parameter-declaration => declaration-specifiers abstract-declarator .
		")" => reduce 204
		"," => reduce 204

329:	direct-declarator => direct-declarator "(" identifier-list ")" .
		$default => reduce 191

330:	identifier-list => identifier-list "," . identifier
	identifier => . '$ident
	identifier => . 'cpp-ident
		'cpp-ident => shift 50
		'$ident => shift 51
		identifier => shift 333

331:	declaration => declaration-specifiers init-declarator-list $P1 ";" opt-code-comment .
		'$lone-comm => reduce 82
		$default => reduce 82

332:	external-declaration => "extern" '$string "{" translation-unit "}" .
		'$lone-comm => reduce 287
		$default => reduce 287

333:	identifier-list => identifier-list "," identifier .
		")" => reduce 207
		"," => reduce 207

334:	direct-abstract-declarator => direct-abstract-declarator . "(" ")"
	direct-abstract-declarator => direct-abstract-declarator . "(" parameter-type-list ")"
	direct-abstract-declarator => direct-abstract-declarator . "[" "*" "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" assignment-expression "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list "]"
	direct-abstract-declarator => direct-abstract-declarator . "[" type-qualifier-list assignment-expression "]"
	abstract-declarator => pointer direct-abstract-declarator .
		"[" => shift 335
		"(" => shift 336
		")" => reduce 211
		"," => reduce 211

335:	direct-abstract-declarator => direct-abstract-declarator "[" . type-qualifier-list assignment-expression "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" . type-qualifier-list "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-abstract-declarator => direct-abstract-declarator "[" . "]"
	direct-abstract-declarator => direct-abstract-declarator "[" . "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => direct-abstract-declarator "[" . "static" type-qualifier-list "]"
	direct-abstract-declarator => direct-abstract-declarator "[" . type-qualifier-list "static" assignment-expression "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" . "*" "]"
		"static" => shift 444
		"]" => shift 445
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 446
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 447
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 116
		type-qualifier-list => shift 448

336:	direct-abstract-declarator => direct-abstract-declarator "(" . parameter-type-list ")"
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-abstract-declarator => direct-abstract-declarator "(" . ")"
		")" => shift 442
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 135
		parameter-declaration => shift 136
		parameter-list => shift 137
		parameter-type-list => shift 443

337:	direct-abstract-declarator => "(" abstract-declarator . ")"
		")" => shift 441

338:	direct-abstract-declarator => "(" parameter-type-list . ")"
		")" => shift 440

339:	direct-abstract-declarator => "(" ")" .
		$default => reduce 233

340:	direct-abstract-declarator => "[" assignment-expression . "]"
		"]" => shift 439

341:	direct-abstract-declarator => "[" "]" .
		$default => reduce 224

342:	direct-abstract-declarator => "[" "static" . type-qualifier-list assignment-expression "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" "static" . type-qualifier-list "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 116
		type-qualifier-list => shift 438

343:	direct-abstract-declarator => "[" type-qualifier-list . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	direct-abstract-declarator => "[" type-qualifier-list . "]"
	type-qualifier-list => type-qualifier-list . type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" type-qualifier-list . "static" assignment-expression "]"
		"static" => shift 435
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 130
		"]" => shift 436
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 437

344:	unary-operator => "*" .
	direct-abstract-declarator => "[" "*" . "]"
		"]" => shift 434
		$default => reduce 29

345:	parameter-list => parameter-list "," parameter-declaration .
		"," => reduce 202
		")" => reduce 202

346:	parameter-type-list => parameter-list "," "..." .
		")" => reduce 200

347:	direct-declarator => direct-declarator "[" "static" type-qualifier-list assignment-expression . "]"
		"]" => shift 433

348:	multiplicative-expression => multiplicative-expression "%" cast-expression .
		$default => reduce 39

349:	multiplicative-expression => multiplicative-expression "/" cast-expression .
		$default => reduce 38

350:	multiplicative-expression => multiplicative-expression "*" cast-expression .
		$default => reduce 37

351:	multiplicative-expression => multiplicative-expression . "%" cast-expression
	multiplicative-expression => multiplicative-expression . "/" cast-expression
	multiplicative-expression => multiplicative-expression . "*" cast-expression
	additive-expression => additive-expression "-" multiplicative-expression .
		"*" => shift 317
		"/" => shift 318
		"%" => shift 319
		$default => reduce 42

352:	multiplicative-expression => multiplicative-expression . "%" cast-expression
	multiplicative-expression => multiplicative-expression . "/" cast-expression
	multiplicative-expression => multiplicative-expression . "*" cast-expression
	additive-expression => additive-expression "+" multiplicative-expression .
		"*" => shift 317
		"/" => shift 318
		"%" => shift 319
		$default => reduce 41

353:	additive-expression => additive-expression . "-" multiplicative-expression
	additive-expression => additive-expression . "+" multiplicative-expression
	shift-expression => shift-expression ">>" additive-expression .
		"+" => shift 315
		"-" => shift 316
		$default => reduce 45

354:	additive-expression => additive-expression . "-" multiplicative-expression
	additive-expression => additive-expression . "+" multiplicative-expression
	shift-expression => shift-expression "<<" additive-expression .
		"+" => shift 315
		"-" => shift 316
		$default => reduce 44

355:	shift-expression => shift-expression . ">>" additive-expression
	shift-expression => shift-expression . "<<" additive-expression
	relational-expression => relational-expression ">=" shift-expression .
		"<<" => shift 313
		">>" => shift 314
		$default => reduce 50

356:	shift-expression => shift-expression . ">>" additive-expression
	shift-expression => shift-expression . "<<" additive-expression
	relational-expression => relational-expression "<=" shift-expression .
		"<<" => shift 313
		">>" => shift 314
		$default => reduce 49

357:	shift-expression => shift-expression . ">>" additive-expression
	shift-expression => shift-expression . "<<" additive-expression
	relational-expression => relational-expression ">" shift-expression .
		"<<" => shift 313
		">>" => shift 314
		$default => reduce 48

358:	shift-expression => shift-expression . ">>" additive-expression
	shift-expression => shift-expression . "<<" additive-expression
	relational-expression => relational-expression "<" shift-expression .
		"<<" => shift 313
		">>" => shift 314
		$default => reduce 47

359:	relational-expression => relational-expression . ">=" shift-expression
	relational-expression => relational-expression . "<=" shift-expression
	relational-expression => relational-expression . ">" shift-expression
	relational-expression => relational-expression . "<" shift-expression
	equality-expression => equality-expression "!=" relational-expression .
		"<" => shift 309
		">" => shift 310
		"<=" => shift 311
		">=" => shift 312
		$default => reduce 53

360:	relational-expression => relational-expression . ">=" shift-expression
	relational-expression => relational-expression . "<=" shift-expression
	relational-expression => relational-expression . ">" shift-expression
	relational-expression => relational-expression . "<" shift-expression
	equality-expression => equality-expression "==" relational-expression .
		"<" => shift 309
		">" => shift 310
		"<=" => shift 311
		">=" => shift 312
		$default => reduce 52

361:	equality-expression => equality-expression . "!=" relational-expression
	equality-expression => equality-expression . "==" relational-expression
	bitwise-and-expression => bitwise-and-expression "&" equality-expression .
		"==" => shift 307
		"!=" => shift 308
		$default => reduce 55

362:	bitwise-and-expression => bitwise-and-expression . "&" equality-expression
	bitwise-xor-expression => bitwise-xor-expression "^" bitwise-and-expression .
		"&" => shift 306
		$default => reduce 57

363:	bitwise-xor-expression => bitwise-xor-expression . "^" bitwise-and-expression
	bitwise-or-expression => bitwise-or-expression "|" bitwise-xor-expression .
		"^" => shift 305
		$default => reduce 59

364:	bitwise-or-expression => bitwise-or-expression . "|" bitwise-xor-expression
	logical-and-expression => logical-and-expression "&&" bitwise-or-expression .
		"|" => shift 304
		$default => reduce 61

365:	cast-expression => "(" type-name ")" . cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	postfix-expression => "(" type-name ")" . "{" initializer-list "," "}"
	postfix-expression => "(" type-name ")" . "{" initializer-list "}"
		"{" => shift 431
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 432

366:	direct-abstract-declarator => "(" . ")"
	direct-abstract-declarator => "(" . parameter-type-list ")"
	parameter-type-list => . parameter-list
	parameter-type-list => . parameter-list "," "..."
	parameter-list => . parameter-declaration
	parameter-list => . parameter-list "," parameter-declaration
	parameter-declaration => . declaration-specifiers declarator
	parameter-declaration => . declaration-specifiers abstract-declarator
	parameter-declaration => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
	direct-abstract-declarator => "(" . abstract-declarator ")"
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 324
		"(" => shift 366
		"*" => shift 52
		direct-abstract-declarator => shift 326
		pointer => shift 367
		abstract-declarator => shift 337
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 135
		parameter-declaration => shift 136
		parameter-list => shift 137
		parameter-type-list => shift 338
		")" => shift 339

367:	abstract-declarator => pointer . direct-abstract-declarator
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
	abstract-declarator => pointer .
		"[" => shift 324
		"(" => shift 366
		direct-abstract-declarator => shift 334
		")" => reduce 210
		"," => reduce 210

368:	type-name => specifier-qualifier-list abstract-declarator .
		")" => reduce 208

369:	primary-expression => "(" expression ")" .
		$default => reduce 5

370:	logical-and-expression => logical-and-expression . "&&" bitwise-or-expression
	logical-or-expression => logical-or-expression "||" logical-and-expression .
		"&&" => shift 302
		$default => reduce 63

371:	expression => expression . "," assignment-expression
	conditional-expression => logical-or-expression "?" expression . ":" conditional-expression
		":" => shift 430
		"," => shift 246

372:	unary-expression => "sizeof" "(" type-name . ")"
	postfix-expression => "(" type-name . ")" "{" initializer-list "}"
	postfix-expression => "(" type-name . ")" "{" initializer-list "," "}"
		")" => shift 429

373:	postfix-expression => "(" type-name . ")" "{" initializer-list "}"
	postfix-expression => "(" type-name . ")" "{" initializer-list "," "}"
		")" => shift 428

374:	postfix-expression => postfix-expression "->" identifier .
		$default => reduce 11

375:	postfix-expression => postfix-expression "." identifier .
		$default => reduce 10

376:	postfix-expression => postfix-expression "(" ")" .
		$default => reduce 9

377:	arg-expr-hack => declaration-specifiers .
	arg-expr-hack => declaration-specifiers . abstract-declarator
	abstract-declarator => . pointer
	abstract-declarator => . pointer direct-abstract-declarator
	abstract-declarator => . direct-abstract-declarator
	pointer => . "*" type-qualifier-list
	pointer => . "*"
	pointer => . "*" type-qualifier-list pointer
	pointer => . "*" pointer
	direct-abstract-declarator => . "(" abstract-declarator ")"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" type-qualifier-list "]"
	direct-abstract-declarator => . "[" assignment-expression "]"
	direct-abstract-declarator => . "[" "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list assignment-expression "]"
	direct-abstract-declarator => . "[" "static" type-qualifier-list "]"
	direct-abstract-declarator => . "[" type-qualifier-list "static" assignment-expression "]"
	direct-abstract-declarator => . direct-abstract-declarator "[" "*" "]"
	direct-abstract-declarator => . "[" "*" "]"
	direct-abstract-declarator => . direct-abstract-declarator "(" parameter-type-list ")"
	direct-abstract-declarator => . direct-abstract-declarator "(" ")"
	direct-abstract-declarator => . "(" parameter-type-list ")"
	direct-abstract-declarator => . "(" ")"
		"[" => shift 324
		"(" => shift 366
		"*" => shift 52
		direct-abstract-declarator => shift 326
		pointer => shift 367
		abstract-declarator => shift 427
		")" => reduce 21
		"," => reduce 21

378:	argument-expression-list => arg-expr-hack .
		")" => reduce 18
		"," => reduce 18

379:	argument-expression-list => assignment-expression .
		")" => reduce 16
		"," => reduce 16

380:	argument-expression-list => argument-expression-list . "," arg-expr-hack
	argument-expression-list => argument-expression-list . "," assignment-expression
	postfix-expression => postfix-expression "(" argument-expression-list . ")"
		")" => shift 425
		"," => shift 426

381:	expression => expression . "," assignment-expression
	postfix-expression => postfix-expression "[" expression . "]"
		"]" => shift 424
		"," => shift 246

382:	assignment-expression => unary-expression assignment-operator assignment-expression .
		$default => reduce 67

383:	direct-declarator => direct-declarator "[" type-qualifier-list "*" "]" .
		$default => reduce 188

384:	direct-declarator => direct-declarator "[" type-qualifier-list "static" assignment-expression . "]"
		"]" => shift 423

385:	direct-declarator => direct-declarator "[" type-qualifier-list assignment-expression "]" .
		$default => reduce 182

386:	initializer => "{" initializer-list "," . "}"
	initializer-list => initializer-list "," . designation initializer
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	initializer-list => initializer-list "," . initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		"{" => shift 177
		assignment-expression => shift 178
		initializer => shift 420
		"." => shift 257
		"[" => shift 258
		designator => shift 259
		designator-list => shift 260
		designation => shift 421
		"}" => shift 422

387:	initializer => "{" initializer-list "}" .
		"," => reduce 236
		"}" => reduce 236
		";" => reduce 236

388:	initializer-list => designation initializer .
		"," => reduce 238
		"}" => reduce 238

389:	designation => designator-list "=" .
		$default => reduce 242

390:	designator-list => designator-list designator .
		"=" => reduce 244
		"." => reduce 244
		"[" => reduce 244

391:	designator => "[" constant-expression . "]"
		"]" => shift 419

392:	designator => "." identifier .
		"=" => reduce 246
		"[" => reduce 246
		"." => reduce 246

393:	jump-statement => "return" expression ";" .
		$default => reduce 279

394:	jump-statement => "goto" identifier ";" .
		$default => reduce 276

395:	initial-clause => declaration .
		$default => reduce 273

396:	initial-clause => ";" .
		$default => reduce 272

397:	expression => expression . "," assignment-expression
	initial-clause => expression . ";"
		";" => shift 418
		"," => shift 246

398:	iteration-statement => "for" "(" initial-clause . opt-expression ";" opt-expression ")" statement
	opt-expression => .
	opt-expression => . expression
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 416
		opt-expression => shift 417
		";" => reduce 274

399:	iteration-statement => "do" statement "while" . "(" expression ")" ";"
		"(" => shift 415

400:	expression => expression . "," assignment-expression
	iteration-statement => "while" "(" expression . ")" statement
		")" => shift 414
		"," => shift 246

401:	expression => expression . "," assignment-expression
	selection-statement => "switch" "(" expression . ")" statement
		")" => shift 413
		"," => shift 246

402:	selection-statement => "if" "(" expression . ")" statement "else" statement
	expression => expression . "," assignment-expression
	selection-statement => "if" "(" expression . ")" statement
		"," => shift 246
		")" => shift 412

403:	expression => expression "," assignment-expression .
		$default => reduce 80

404:	labeled-statement => "default" ":" statement .
		$default => reduce 256

405:	labeled-statement => "case" constant-expression ":" . statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 182
		'cpp-stmt => shift 34
		"return" => shift 183
		"break" => shift 184
		"continue" => shift 185
		"goto" => shift 186
		"for" => shift 187
		"do" => shift 188
		"while" => shift 189
		"switch" => shift 190
		"if" => shift 191
		";" => shift 192
		expression => shift 193
		"{" => shift 106
		"default" => shift 194
		"case" => shift 195
		identifier => shift 196
		cpp-statement => shift 197
		jump-statement => shift 198
		iteration-statement => shift 199
		selection-statement => shift 200
		expression-statement => shift 201
		compound-statement => shift 202
		labeled-statement => shift 203
		statement => shift 411

406:	labeled-statement => identifier ":" statement .
		$default => reduce 254

407:	struct-declarator => declarator ":" constant-expression .
		";" => reduce 163
		"," => reduce 163

408:	struct-declarator-list => struct-declarator-list "," struct-declarator .
		";" => reduce 161
		"," => reduce 161

409:	struct-declaration => specifier-qualifier-list struct-declarator-list ";" opt-code-comment .
		'$lone-comm => reduce 155
		$default => reduce 155

410:	enum-specifier => "enum" identifier "{" enumerator-list "," "}" .
		$default => reduce 166

411:	labeled-statement => "case" constant-expression ":" statement .
		$default => reduce 255

412:	selection-statement => "if" "(" expression ")" . statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	selection-statement => "if" "(" expression ")" . statement "else" statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 182
		'cpp-stmt => shift 34
		"return" => shift 183
		"break" => shift 184
		"continue" => shift 185
		"goto" => shift 186
		"for" => shift 187
		"do" => shift 188
		"while" => shift 189
		"switch" => shift 190
		"if" => shift 191
		";" => shift 192
		expression => shift 193
		"{" => shift 106
		"default" => shift 194
		"case" => shift 195
		identifier => shift 196
		cpp-statement => shift 197
		jump-statement => shift 198
		iteration-statement => shift 199
		selection-statement => shift 200
		expression-statement => shift 201
		compound-statement => shift 202
		labeled-statement => shift 203
		statement => shift 469

413:	selection-statement => "switch" "(" expression ")" . statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 182
		'cpp-stmt => shift 34
		"return" => shift 183
		"break" => shift 184
		"continue" => shift 185
		"goto" => shift 186
		"for" => shift 187
		"do" => shift 188
		"while" => shift 189
		"switch" => shift 190
		"if" => shift 191
		";" => shift 192
		expression => shift 193
		"{" => shift 106
		"default" => shift 194
		"case" => shift 195
		identifier => shift 196
		cpp-statement => shift 197
		jump-statement => shift 198
		iteration-statement => shift 199
		selection-statement => shift 200
		expression-statement => shift 201
		compound-statement => shift 202
		labeled-statement => shift 203
		statement => shift 468

414:	iteration-statement => "while" "(" expression ")" . statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 182
		'cpp-stmt => shift 34
		"return" => shift 183
		"break" => shift 184
		"continue" => shift 185
		"goto" => shift 186
		"for" => shift 187
		"do" => shift 188
		"while" => shift 189
		"switch" => shift 190
		"if" => shift 191
		";" => shift 192
		expression => shift 193
		"{" => shift 106
		"default" => shift 194
		"case" => shift 195
		identifier => shift 196
		cpp-statement => shift 197
		jump-statement => shift 198
		iteration-statement => shift 199
		selection-statement => shift 200
		expression-statement => shift 201
		compound-statement => shift 202
		labeled-statement => shift 203
		statement => shift 467

415:	iteration-statement => "do" statement "while" "(" . expression ")" ";"
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 466

416:	expression => expression . "," assignment-expression
	opt-expression => expression .
		"," => shift 246
		";" => reduce 275
		")" => reduce 275

417:	iteration-statement => "for" "(" initial-clause opt-expression . ";" opt-expression ")" statement
		";" => shift 465

418:	initial-clause => expression ";" .
		$default => reduce 271

419:	designator => "[" constant-expression "]" .
		"=" => reduce 245
		"[" => reduce 245
		"." => reduce 245

420:	initializer-list => initializer-list "," initializer .
		"," => reduce 241
		"}" => reduce 241

421:	initializer-list => initializer-list "," designation . initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		"{" => shift 177
		assignment-expression => shift 178
		initializer => shift 464

422:	initializer => "{" initializer-list "," "}" .
		"," => reduce 237
		"}" => reduce 237
		";" => reduce 237

423:	direct-declarator => direct-declarator "[" type-qualifier-list "static" assignment-expression "]" .
		$default => reduce 187

424:	postfix-expression => postfix-expression "[" expression "]" .
		$default => reduce 7

425:	postfix-expression => postfix-expression "(" argument-expression-list ")" .
		$default => reduce 8

426:	argument-expression-list => argument-expression-list "," . assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	argument-expression-list => argument-expression-list "," . arg-expr-hack
	arg-expr-hack => . declaration-specifiers abstract-declarator
	arg-expr-hack => . declaration-specifiers
	declaration-specifiers => . storage-class-specifier
	declaration-specifiers => . storage-class-specifier declaration-specifiers
	declaration-specifiers => . type-specifier
	declaration-specifiers => . type-specifier declaration-specifiers
	declaration-specifiers => . type-qualifier
	declaration-specifiers => . type-qualifier declaration-specifiers
	declaration-specifiers => . function-specifier
	declaration-specifiers => . function-specifier declaration-specifiers
	storage-class-specifier => . "auto"
	storage-class-specifier => . "extern"
	storage-class-specifier => . "register"
	storage-class-specifier => . "static"
	storage-class-specifier => . "typedef"
	type-specifier => . "void"
	type-specifier => . fixed-type-specifier
	type-specifier => . float-type-specifier
	type-specifier => . "_Bool"
	type-specifier => . complex-type-specifier
	type-specifier => . struct-or-union-specifier
	type-specifier => . enum-specifier
	type-specifier => . typedef-name
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	function-specifier => . "inline"
	fixed-type-specifier => . "short"
	fixed-type-specifier => . "short" "int"
	fixed-type-specifier => . "signed" "short"
	fixed-type-specifier => . "signed" "short" "int"
	fixed-type-specifier => . "int"
	fixed-type-specifier => . "signed"
	fixed-type-specifier => . "signed" "int"
	fixed-type-specifier => . "long"
	fixed-type-specifier => . "long" "int"
	fixed-type-specifier => . "signed" "long"
	fixed-type-specifier => . "signed" "long" "int"
	fixed-type-specifier => . "long" "long"
	fixed-type-specifier => . "long" "long" "int"
	fixed-type-specifier => . "signed" "long" "long"
	fixed-type-specifier => . "signed" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "short" "int"
	fixed-type-specifier => . "unsigned" "short"
	fixed-type-specifier => . "unsigned" "int"
	fixed-type-specifier => . "unsigned"
	fixed-type-specifier => . "unsigned" "long" "int"
	fixed-type-specifier => . "unsigned" "long"
	fixed-type-specifier => . "unsigned" "long" "long" "int"
	fixed-type-specifier => . "unsigned" "long" "long"
	fixed-type-specifier => . "char"
	fixed-type-specifier => . "signed" "char"
	fixed-type-specifier => . "unsigned" "char"
	float-type-specifier => . "float"
	float-type-specifier => . "double"
	float-type-specifier => . "long" "double"
	complex-type-specifier => . "_Complex"
	complex-type-specifier => . "float" "_Complex"
	complex-type-specifier => . "double" "_Complex"
	complex-type-specifier => . "long" "double" "_Complex"
	struct-or-union-specifier => . "struct" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "struct" ident-like
	struct-or-union-specifier => . "union" ident-like "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" "{" struct-declaration-list "}"
	struct-or-union-specifier => . "union" ident-like
	enum-specifier => . "enum" identifier "{" enumerator-list "}"
	enum-specifier => . "enum" identifier "{" enumerator-list "," "}"
	enum-specifier => . "enum" "{" enumerator-list "}"
	enum-specifier => . "enum" "{" enumerator-list "," "}"
	enum-specifier => . "enum" identifier
	typedef-name => . 'typename
		'typename => shift 1
		"enum" => shift 2
		"union" => shift 3
		"struct" => shift 4
		"_Complex" => shift 5
		"double" => shift 6
		"float" => shift 7
		"char" => shift 8
		"unsigned" => shift 9
		"long" => shift 10
		"int" => shift 11
		"signed" => shift 12
		"short" => shift 13
		"inline" => shift 14
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		typedef-name => shift 18
		enum-specifier => shift 19
		struct-or-union-specifier => shift 20
		complex-type-specifier => shift 21
		"_Bool" => shift 22
		float-type-specifier => shift 23
		fixed-type-specifier => shift 24
		"void" => shift 25
		"typedef" => shift 26
		"static" => shift 27
		"register" => shift 28
		"extern" => shift 58
		"auto" => shift 29
		function-specifier => shift 30
		type-qualifier => shift 31
		type-specifier => shift 32
		storage-class-specifier => shift 33
		declaration-specifiers => shift 377
		arg-expr-hack => shift 462
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 463

427:	arg-expr-hack => declaration-specifiers abstract-declarator .
		")" => reduce 20
		"," => reduce 20

428:	postfix-expression => "(" type-name ")" . "{" initializer-list "," "}"
	postfix-expression => "(" type-name ")" . "{" initializer-list "}"
		"{" => shift 431

429:	postfix-expression => "(" type-name ")" . "{" initializer-list "," "}"
	postfix-expression => "(" type-name ")" . "{" initializer-list "}"
	unary-expression => "sizeof" "(" type-name ")" .
		"{" => shift 431
		$default => reduce 27

430:	conditional-expression => logical-or-expression "?" expression ":" . conditional-expression
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		primary-expression => shift 165
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		"(" => shift 164
		unary-expression => shift 229
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		logical-and-expression => shift 157
		logical-or-expression => shift 166
		conditional-expression => shift 461

431:	postfix-expression => "(" type-name ")" "{" . initializer-list "}"
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" type-name ")" "{" . initializer-list "," "}"
	initializer-list => . designation initializer
	initializer-list => . initializer
	initializer-list => . initializer-list "," designation initializer
	initializer-list => . initializer-list "," initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	designation => . designator-list "="
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	designator-list => . designator
	designator-list => . designator-list designator
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		"." => shift 257
		"[" => shift 258
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		designator => shift 259
		unary-expression => shift 172
		conditional-expression => shift 173
		designator-list => shift 260
		"{" => shift 177
		assignment-expression => shift 178
		initializer => shift 261
		designation => shift 262
		initializer-list => shift 460

432:	cast-expression => "(" type-name ")" cast-expression .
		$default => reduce 35

433:	direct-declarator => direct-declarator "[" "static" type-qualifier-list assignment-expression "]" .
		$default => reduce 186

434:	direct-abstract-declarator => "[" "*" "]" .
		$default => reduce 229

435:	direct-abstract-declarator => "[" type-qualifier-list "static" . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 459

436:	direct-abstract-declarator => "[" type-qualifier-list "]" .
		$default => reduce 222

437:	direct-abstract-declarator => "[" type-qualifier-list assignment-expression . "]"
		"]" => shift 458

438:	direct-abstract-declarator => "[" "static" type-qualifier-list . "]"
	type-qualifier-list => type-qualifier-list . type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => "[" "static" type-qualifier-list . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 456
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 130
		"]" => shift 457

439:	direct-abstract-declarator => "[" assignment-expression "]" .
		$default => reduce 223

440:	direct-abstract-declarator => "(" parameter-type-list ")" .
		$default => reduce 232

441:	direct-abstract-declarator => "(" abstract-declarator ")" .
		$default => reduce 213

442:	direct-abstract-declarator => direct-abstract-declarator "(" ")" .
		$default => reduce 231

443:	direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list . ")"
		")" => shift 455

444:	direct-abstract-declarator => direct-abstract-declarator "[" "static" . type-qualifier-list "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" "static" . type-qualifier-list assignment-expression "]"
	type-qualifier-list => . type-qualifier
	type-qualifier-list => . type-qualifier-list type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 116
		type-qualifier-list => shift 454

445:	direct-abstract-declarator => direct-abstract-declarator "[" "]" .
		$default => reduce 217

446:	direct-abstract-declarator => direct-abstract-declarator "[" "*" . "]"
	unary-operator => "*" .
		"]" => shift 453
		$default => reduce 29

447:	direct-abstract-declarator => direct-abstract-declarator "[" assignment-expression . "]"
		"]" => shift 452

448:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list . "static" assignment-expression "]"
	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list . "]"
	type-qualifier-list => type-qualifier-list . type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 449
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 130
		"]" => shift 450
		"static" => shift 451

449:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list assignment-expression . "]"
		"]" => shift 480

450:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "]" .
		$default => reduce 215

451:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 479

452:	direct-abstract-declarator => direct-abstract-declarator "[" assignment-expression "]" .
		$default => reduce 216

453:	direct-abstract-declarator => direct-abstract-declarator "[" "*" "]" .
		$default => reduce 228

454:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list . assignment-expression "]"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	type-qualifier-list => type-qualifier-list . type-qualifier
	type-qualifier => . "const"
	type-qualifier => . "volatile"
	type-qualifier => . "restrict"
	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list . "]"
		"]" => shift 477
		"restrict" => shift 15
		"volatile" => shift 16
		"const" => shift 17
		type-qualifier => shift 130
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 478

455:	direct-abstract-declarator => direct-abstract-declarator "(" parameter-type-list ")" .
		$default => reduce 230

456:	direct-abstract-declarator => "[" "static" type-qualifier-list assignment-expression . "]"
		"]" => shift 476

457:	direct-abstract-declarator => "[" "static" type-qualifier-list "]" .
		$default => reduce 226

458:	direct-abstract-declarator => "[" type-qualifier-list assignment-expression "]" .
		$default => reduce 221

459:	direct-abstract-declarator => "[" type-qualifier-list "static" assignment-expression . "]"
		"]" => shift 475

460:	postfix-expression => "(" type-name ")" "{" initializer-list . "," "}"
	initializer-list => initializer-list . "," initializer
	initializer-list => initializer-list . "," designation initializer
	postfix-expression => "(" type-name ")" "{" initializer-list . "}"
		"}" => shift 473
		"," => shift 474

461:	conditional-expression => logical-or-expression "?" expression ":" conditional-expression .
		$default => reduce 65

462:	argument-expression-list => argument-expression-list "," arg-expr-hack .
		")" => reduce 19
		"," => reduce 19

463:	argument-expression-list => argument-expression-list "," assignment-expression .
		")" => reduce 17
		"," => reduce 17

464:	initializer-list => initializer-list "," designation initializer .
		"," => reduce 240
		"}" => reduce 240

465:	iteration-statement => "for" "(" initial-clause opt-expression ";" . opt-expression ")" statement
	opt-expression => .
	opt-expression => . expression
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		assignment-expression => shift 182
		expression => shift 416
		opt-expression => shift 472
		")" => reduce 274

466:	expression => expression . "," assignment-expression
	iteration-statement => "do" statement "while" "(" expression . ")" ";"
		")" => shift 471
		"," => shift 246

467:	iteration-statement => "while" "(" expression ")" statement .
		$default => reduce 268

468:	selection-statement => "switch" "(" expression ")" statement .
		$default => reduce 267

469:	selection-statement => "if" "(" expression ")" statement . "else" statement
	selection-statement => "if" "(" expression ")" statement .
		"else" => shift 470
		$default => reduce 265
		["else" => reduce 265] REMOVED by precedence

470:	selection-statement => "if" "(" expression ")" statement "else" . statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 182
		'cpp-stmt => shift 34
		"return" => shift 183
		"break" => shift 184
		"continue" => shift 185
		"goto" => shift 186
		"for" => shift 187
		"do" => shift 188
		"while" => shift 189
		"switch" => shift 190
		"if" => shift 191
		";" => shift 192
		expression => shift 193
		"{" => shift 106
		"default" => shift 194
		"case" => shift 195
		identifier => shift 196
		cpp-statement => shift 197
		jump-statement => shift 198
		iteration-statement => shift 199
		selection-statement => shift 200
		expression-statement => shift 201
		compound-statement => shift 202
		labeled-statement => shift 203
		statement => shift 486

471:	iteration-statement => "do" statement "while" "(" expression ")" . ";"
		";" => shift 485

472:	iteration-statement => "for" "(" initial-clause opt-expression ";" opt-expression . ")" statement
		")" => shift 484

473:	postfix-expression => "(" type-name ")" "{" initializer-list "}" .
		$default => reduce 14

474:	initializer-list => initializer-list "," . designation initializer
	designation => . designator-list "="
	designator-list => . designator
	designator-list => . designator-list designator
	designator => . "[" constant-expression "]"
	designator => . "." identifier
	initializer-list => initializer-list "," . initializer
	initializer => . assignment-expression
	initializer => . "{" initializer-list "}"
	initializer => . "{" initializer-list "," "}"
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
	postfix-expression => "(" type-name ")" "{" initializer-list "," . "}"
		"}" => shift 483
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		'cpp-ident => shift 50
		'$ident => shift 51
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		identifier => shift 156
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		"{" => shift 177
		assignment-expression => shift 178
		initializer => shift 420
		"." => shift 257
		"[" => shift 258
		designator => shift 259
		designator-list => shift 260
		designation => shift 421

475:	direct-abstract-declarator => "[" type-qualifier-list "static" assignment-expression "]" .
		$default => reduce 227

476:	direct-abstract-declarator => "[" "static" type-qualifier-list assignment-expression "]" .
		$default => reduce 225

477:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list "]" .
		$default => reduce 219

478:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression . "]"
		"]" => shift 482

479:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression . "]"
		"]" => shift 481

480:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list assignment-expression "]" .
		$default => reduce 214

481:	direct-abstract-declarator => direct-abstract-declarator "[" type-qualifier-list "static" assignment-expression "]" .
		$default => reduce 220

482:	direct-abstract-declarator => direct-abstract-declarator "[" "static" type-qualifier-list assignment-expression "]" .
		$default => reduce 218

483:	postfix-expression => "(" type-name ")" "{" initializer-list "," "}" .
		$default => reduce 15

484:	iteration-statement => "for" "(" initial-clause opt-expression ";" opt-expression ")" . statement
	statement => . labeled-statement
	statement => . compound-statement
	statement => . expression-statement
	statement => . selection-statement
	statement => . iteration-statement
	statement => . jump-statement
	statement => . cpp-statement
	labeled-statement => . identifier ":" statement
	labeled-statement => . "case" constant-expression ":" statement
	labeled-statement => . "default" ":" statement
	compound-statement => . "{" block-item-list "}"
	compound-statement => . "{" "}"
	expression-statement => . expression ";"
	expression-statement => . ";"
	selection-statement => . "if" "(" expression ")" statement
	selection-statement => . "if" "(" expression ")" statement "else" statement
	selection-statement => . "switch" "(" expression ")" statement
	iteration-statement => . "while" "(" expression ")" statement
	iteration-statement => . "do" statement "while" "(" expression ")" ";"
	iteration-statement => . "for" "(" initial-clause opt-expression ";" opt-expression ")" statement
	jump-statement => . "goto" identifier ";"
	jump-statement => . "continue" ";"
	jump-statement => . "break" ";"
	jump-statement => . "return" expression ";"
	jump-statement => . "return" ";"
	cpp-statement => . 'cpp-stmt
	expression => . assignment-expression
	expression => . expression "," assignment-expression
	identifier => . '$ident
	identifier => . 'cpp-ident
	assignment-expression => . conditional-expression
	assignment-expression => . unary-expression assignment-operator assignment-expression
	unary-expression => . postfix-expression
	unary-expression => . "++" unary-expression
	unary-expression => . "--" unary-expression
	unary-expression => . unary-operator cast-expression
	unary-expression => . "sizeof" unary-expression
	unary-expression => . "sizeof" "(" type-name ")"
	conditional-expression => . logical-or-expression
	conditional-expression => . logical-or-expression "?" expression ":" conditional-expression
	postfix-expression => . primary-expression
	postfix-expression => . postfix-expression "[" expression "]"
	postfix-expression => . postfix-expression "(" argument-expression-list ")"
	postfix-expression => . postfix-expression "(" ")"
	postfix-expression => . postfix-expression "." identifier
	postfix-expression => . postfix-expression "->" identifier
	postfix-expression => . postfix-expression "++"
	postfix-expression => . postfix-expression "--"
	postfix-expression => . "(" type-name ")" "{" initializer-list "}"
	postfix-expression => . "(" type-name ")" "{" initializer-list "," "}"
	unary-operator => . "&"
	unary-operator => . "*"
	unary-operator => . "+"
	unary-operator => . "-"
	unary-operator => . "~"
	unary-operator => . "!"
	logical-or-expression => . logical-and-expression
	logical-or-expression => . logical-or-expression "||" logical-and-expression
	primary-expression => . identifier
	primary-expression => . constant
	primary-expression => . string-literal
	primary-expression => . "(" expression ")"
	logical-and-expression => . bitwise-or-expression
	logical-and-expression => . logical-and-expression "&&" bitwise-or-expression
	bitwise-or-expression => . bitwise-xor-expression
	bitwise-or-expression => . bitwise-or-expression "|" bitwise-xor-expression
	constant => . '$fixed
	constant => . '$float
	constant => . '$chlit
	string-literal => . '$string
	string-literal => . string-literal '$string
	bitwise-xor-expression => . bitwise-and-expression
	bitwise-xor-expression => . bitwise-xor-expression "^" bitwise-and-expression
	bitwise-and-expression => . equality-expression
	bitwise-and-expression => . bitwise-and-expression "&" equality-expression
	equality-expression => . relational-expression
	equality-expression => . equality-expression "==" relational-expression
	equality-expression => . equality-expression "!=" relational-expression
	relational-expression => . shift-expression
	relational-expression => . relational-expression "<" shift-expression
	relational-expression => . relational-expression ">" shift-expression
	relational-expression => . relational-expression "<=" shift-expression
	relational-expression => . relational-expression ">=" shift-expression
	shift-expression => . additive-expression
	shift-expression => . shift-expression "<<" additive-expression
	shift-expression => . shift-expression ">>" additive-expression
	additive-expression => . multiplicative-expression
	additive-expression => . additive-expression "+" multiplicative-expression
	additive-expression => . additive-expression "-" multiplicative-expression
	multiplicative-expression => . cast-expression
	multiplicative-expression => . multiplicative-expression "*" cast-expression
	multiplicative-expression => . multiplicative-expression "/" cast-expression
	multiplicative-expression => . multiplicative-expression "%" cast-expression
	cast-expression => . unary-expression
	cast-expression => . "(" type-name ")" cast-expression
		cast-expression => shift 141
		multiplicative-expression => shift 142
		additive-expression => shift 143
		shift-expression => shift 144
		relational-expression => shift 145
		equality-expression => shift 146
		bitwise-and-expression => shift 147
		'$string => shift 148
		'$chlit => shift 149
		'$float => shift 150
		'$fixed => shift 151
		bitwise-xor-expression => shift 152
		bitwise-or-expression => shift 153
		string-literal => shift 154
		constant => shift 155
		logical-and-expression => shift 157
		"!" => shift 158
		"~" => shift 159
		"-" => shift 160
		"+" => shift 161
		"*" => shift 176
		"&" => shift 163
		"(" => shift 164
		primary-expression => shift 165
		logical-or-expression => shift 166
		"sizeof" => shift 167
		unary-operator => shift 168
		"--" => shift 169
		"++" => shift 170
		postfix-expression => shift 171
		unary-expression => shift 172
		conditional-expression => shift 173
		'cpp-ident => shift 50
		'$ident => shift 51
		assignment-expression => shift 182
		'cpp-stmt => shift 34
		"return" => shift 183
		"break" => shift 184
		"continue" => shift 185
		"goto" => shift 186
		"for" => shift 187
		"do" => shift 188
		"while" => shift 189
		"switch" => shift 190
		"if" => shift 191
		";" => shift 192
		expression => shift 193
		"{" => shift 106
		"default" => shift 194
		"case" => shift 195
		identifier => shift 196
		cpp-statement => shift 197
		jump-statement => shift 198
		iteration-statement => shift 199
		selection-statement => shift 200
		expression-statement => shift 201
		compound-statement => shift 202
		labeled-statement => shift 203
		statement => shift 487

485:	iteration-statement => "do" statement "while" "(" expression ")" ";" .
		$default => reduce 269

486:	selection-statement => "if" "(" expression ")" statement "else" statement .
		$default => reduce 266

487:	iteration-statement => "for" "(" initial-clause opt-expression ";" opt-expression ")" statement .
		$default => reduce 270

