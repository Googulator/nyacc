;; auto-generated by ffi-help.scm

(define-module (libgit2)
  #:use-module (system ffi-help-rt)
  #:use-module ((system foreign) #:prefix ffi:)
  #:use-module (bytestructures guile)
  )
(dynamic-link "libgit2")

;; extern void git_libgit2_version(int *major, int *minor, int *rev);
(define git_libgit2_version
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "git_libgit2_version"
                (dynamic-link))
              (list '* '* '*))))
    (lambda (major minor rev)
      (let ((~major (unwrap~pointer major))
            (~minor (unwrap~pointer minor))
            (~rev (unwrap~pointer rev)))
        (~f ~major ~minor ~rev)))))
(export git_libgit2_version)

;; typedef enum {
;;   GIT_FEATURE_THREADS = 1<<0,
;;   GIT_FEATURE_HTTPS = 1<<1,
;;   GIT_FEATURE_SSH = 1<<2,
;;   GIT_FEATURE_NSEC = 1<<3,
;; } git_feature_t;
(define-fh-enum git_feature_t
  '((GIT_FEATURE_THREADS . 1)
    (GIT_FEATURE_HTTPS . 2)
    (GIT_FEATURE_SSH . 4)
    (GIT_FEATURE_NSEC . 8))
  )

;; extern int git_libgit2_features(void);
(define git_libgit2_features
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "git_libgit2_features"
                (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export git_libgit2_features)

;; typedef enum {
;;   GIT_OPT_GET_MWINDOW_SIZE,
;;   GIT_OPT_SET_MWINDOW_SIZE,
;;   GIT_OPT_GET_MWINDOW_MAPPED_LIMIT,
;;   GIT_OPT_SET_MWINDOW_MAPPED_LIMIT,
;;   GIT_OPT_GET_SEARCH_PATH,
;;   GIT_OPT_SET_SEARCH_PATH,
;;   GIT_OPT_SET_CACHE_OBJECT_LIMIT,
;;   GIT_OPT_SET_CACHE_MAX_SIZE,
;;   GIT_OPT_ENABLE_CACHING,
;;   GIT_OPT_GET_CACHED_MEMORY,
;;   GIT_OPT_GET_TEMPLATE_PATH,
;;   GIT_OPT_SET_TEMPLATE_PATH,
;;   GIT_OPT_SET_SSL_CERT_LOCATIONS,
;;   GIT_OPT_SET_USER_AGENT,
;;   GIT_OPT_ENABLE_STRICT_OBJECT_CREATION,
;;   GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION,
;;   GIT_OPT_SET_SSL_CIPHERS,
;;   GIT_OPT_GET_USER_AGENT,
;;   GIT_OPT_ENABLE_OFS_DELTA,
;;   GIT_OPT_ENABLE_FSYNC_GITDIR,
;;   GIT_OPT_GET_WINDOWS_SHAREMODE,
;;   GIT_OPT_SET_WINDOWS_SHAREMODE,
;;   GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION,
;; } git_libgit2_opt_t;
(define-fh-enum git_libgit2_opt_t
  '((GIT_OPT_GET_MWINDOW_SIZE . 0)
    (GIT_OPT_SET_MWINDOW_SIZE . 1)
    (GIT_OPT_GET_MWINDOW_MAPPED_LIMIT . 2)
    (GIT_OPT_SET_MWINDOW_MAPPED_LIMIT . 3)
    (GIT_OPT_GET_SEARCH_PATH . 4)
    (GIT_OPT_SET_SEARCH_PATH . 5)
    (GIT_OPT_SET_CACHE_OBJECT_LIMIT . 6)
    (GIT_OPT_SET_CACHE_MAX_SIZE . 7)
    (GIT_OPT_ENABLE_CACHING . 8)
    (GIT_OPT_GET_CACHED_MEMORY . 9)
    (GIT_OPT_GET_TEMPLATE_PATH . 10)
    (GIT_OPT_SET_TEMPLATE_PATH . 11)
    (GIT_OPT_SET_SSL_CERT_LOCATIONS . 12)
    (GIT_OPT_SET_USER_AGENT . 13)
    (GIT_OPT_ENABLE_STRICT_OBJECT_CREATION . 14)
    (GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION
      .
      15)
    (GIT_OPT_SET_SSL_CIPHERS . 16)
    (GIT_OPT_GET_USER_AGENT . 17)
    (GIT_OPT_ENABLE_OFS_DELTA . 18)
    (GIT_OPT_ENABLE_FSYNC_GITDIR . 19)
    (GIT_OPT_GET_WINDOWS_SHAREMODE . 20)
    (GIT_OPT_SET_WINDOWS_SHAREMODE . 21)
    (GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION . 22))
  )

;; extern int git_libgit2_opts(int option, ...);
;; ... failed.

;; typedef int64_t git_off_t;
(define unwrap-git_off_t unwrap~fixed)
(define git_off_t-desc int32)

;; typedef int64_t git_time_t;
(define unwrap-git_time_t unwrap~fixed)
(define git_time_t-desc int32)

;; typedef enum {
;;   GIT_OBJ_ANY = -2,
;;   GIT_OBJ_BAD = -1,
;;   GIT_OBJ__EXT1 = 0,
;;   GIT_OBJ_COMMIT = 1,
;;   GIT_OBJ_TREE = 2,
;;   GIT_OBJ_BLOB = 3,
;;   GIT_OBJ_TAG = 4,
;;   GIT_OBJ__EXT2 = 5,
;;   GIT_OBJ_OFS_DELTA = 6,
;;   GIT_OBJ_REF_DELTA = 7,
;; } git_otype;
(define-fh-enum git_otype
  '((GIT_OBJ_ANY . -2)
    (GIT_OBJ_BAD . -1)
    (GIT_OBJ__EXT1 . 0)
    (GIT_OBJ_COMMIT . 1)
    (GIT_OBJ_TREE . 2)
    (GIT_OBJ_BLOB . 3)
    (GIT_OBJ_TAG . 4)
    (GIT_OBJ__EXT2 . 5)
    (GIT_OBJ_OFS_DELTA . 6)
    (GIT_OBJ_REF_DELTA . 7))
  )

;; typedef struct git_odb git_odb;
(define-fh-pointer-type git_odb*)

;; typedef struct git_odb_backend git_odb_backend;
(define-fh-pointer-type git_odb_backend*)

;; typedef struct git_odb_object git_odb_object;
(define-fh-pointer-type git_odb_object*)

;; typedef struct git_odb_stream git_odb_stream;
;; struct git_odb_stream {
;;   git_odb_backend *backend;
;;   unsigned int mode;
;;   void *hash_ctx;
;;   git_off_t declared_size;
;;   git_off_t received_bytes;
;;   /**
;;   	 * Write at most `len` bytes into `buffer` and advance the stream.
;;   	 */
;;   int (*read)(git_odb_stream *stream, char *buffer, size_t len);
;;   /**
;;   	 * Write `len` bytes from `buffer` into the stream.
;;   	 */
;;   int (*write)(git_odb_stream *stream, const char *buffer, size_t len);
;;   /**
;;   	 * Store the contents of the stream as an object with the id
;;   	 * specified in `oid`.
;;   	 *
;;   	 * This method might not be invoked if:
;;   	 * - an error occurs earlier with the `write` callback,
;;   	 * - the object referred to by `oid` already exists in any backend, or
;;   	 * - the final number of received bytes differs from the size declared
;;   	 *   with `git_odb_open_wstream()`
;;   	 */
;;   int (*finalize_write)(git_odb_stream *stream, const git_oid *oid);
;;   /**
;;   	 * Free the stream's memory.
;;   	 *
;;   	 * This method might be called without a call to `finalize_write` if
;;   	 * an error occurs or if the object is already present in the ODB.
;;   	 */
;;   void (*free)(git_odb_stream *stream);
;; };
(define git_odb_stream-desc
  (bs:struct
    (list `(backend ,(bs:pointer "git_odb_backend"))
          `(mode ,unsigned-int)
          `(hash_ctx ,(bs:pointer intptr_t))
          `(declared_size ,git_off_t-desc)
          `(received_bytes ,git_off_t-desc)
          `(read ,(bs:pointer intptr_t))
          `(write ,(bs:pointer intptr_t))
          `(finalize_write ,(bs:pointer intptr_t))
          `(free ,(bs:pointer intptr_t)))))
(export git_odb_stream-desc)
(define-fh-compound-type/p git_odb_stream git_odb_stream-desc)
(define struct-git_odb_stream git_odb_stream)

;; typedef struct git_odb_writepack git_odb_writepack;
;; struct git_odb_writepack {
;;   git_odb_backend *backend;
;;   int (*append)(git_odb_writepack *writepack, const void *data, size_t size
;;       , git_transfer_progress *stats);
;;   int (*commit)(git_odb_writepack *writepack, git_transfer_progress *stats)
;;       ;
;;   void (*free)(git_odb_writepack *writepack);
;; };
(define git_odb_writepack-desc
  (bs:struct
    (list `(backend ,(bs:pointer "git_odb_backend"))
          `(append ,(bs:pointer intptr_t))
          `(commit ,(bs:pointer intptr_t))
          `(free ,(bs:pointer intptr_t)))))
(export git_odb_writepack-desc)
(define-fh-compound-type/p git_odb_writepack git_odb_writepack-desc)
(define struct-git_odb_writepack git_odb_writepack)

;; typedef struct git_refdb git_refdb;
(define-fh-pointer-type git_refdb*)

;; typedef struct git_refdb_backend git_refdb_backend;
(define-fh-pointer-type git_refdb_backend*)

;; typedef struct git_repository git_repository;
(define-fh-pointer-type git_repository*)

;; typedef struct git_worktree git_worktree;
(define-fh-pointer-type git_worktree*)

;; typedef struct git_object git_object;
(define-fh-pointer-type git_object*)

;; typedef struct git_revwalk git_revwalk;
(define-fh-pointer-type git_revwalk*)

;; typedef struct git_tag git_tag;
(define-fh-pointer-type git_tag*)

;; typedef struct git_blob git_blob;
(define-fh-pointer-type git_blob*)

;; typedef struct git_commit git_commit;
(define-fh-pointer-type git_commit*)

;; typedef struct git_tree_entry git_tree_entry;
(define-fh-pointer-type git_tree_entry*)

;; typedef struct git_tree git_tree;
(define-fh-pointer-type git_tree*)

;; typedef struct git_treebuilder git_treebuilder;
(define-fh-pointer-type git_treebuilder*)

;; typedef struct git_index git_index;
(define-fh-pointer-type git_index*)

;; typedef struct git_index_conflict_iterator git_index_conflict_iterator;
(define-fh-pointer-type git_index_conflict_iterator*)

;; typedef struct git_config git_config;
(define-fh-pointer-type git_config*)

;; typedef struct git_config_backend git_config_backend;
(define-fh-pointer-type git_config_backend*)

;; typedef struct git_reflog_entry git_reflog_entry;
(define-fh-pointer-type git_reflog_entry*)

;; typedef struct git_reflog git_reflog;
(define-fh-pointer-type git_reflog*)

;; typedef struct git_note git_note;
(define-fh-pointer-type git_note*)

;; typedef struct git_packbuilder git_packbuilder;
(define-fh-pointer-type git_packbuilder*)

;; typedef struct git_time {
;;   git_time_t time; /**< time in seconds from epoch */
;;   int offset; /**< timezone offset, in minutes */
;; } git_time;
(define git_time-desc
  (bs:struct
    (list `(time ,git_time_t-desc) `(offset ,int))))
(export git_time-desc)
(define-fh-compound-type/p git_time git_time-desc)
(define struct-git_time git_time)

;; typedef struct git_signature {
;;   char *name; /**< full name of the author */
;;   char *email; /**< email of the author */
;;   git_time when; /**< time when the action happened */
;; } git_signature;
(define git_signature-desc
  (bs:struct
    (list `(name ,(bs:pointer int))
          `(email ,(bs:pointer int))
          `(when ,git_time-desc))))
(export git_signature-desc)
(define-fh-compound-type/p git_signature git_signature-desc)
(define struct-git_signature git_signature)

;; typedef struct git_reference git_reference;
(define-fh-pointer-type git_reference*)

;; typedef struct git_reference_iterator git_reference_iterator;
(define-fh-pointer-type git_reference_iterator*)

;; typedef struct git_transaction git_transaction;
(define-fh-pointer-type git_transaction*)

;; typedef struct git_annotated_commit git_annotated_commit;
(define-fh-pointer-type git_annotated_commit*)

;; typedef struct git_merge_result git_merge_result;
(define-fh-pointer-type git_merge_result*)

;; typedef struct git_status_list git_status_list;
(define-fh-pointer-type git_status_list*)

;; typedef struct git_rebase git_rebase;
(define-fh-pointer-type git_rebase*)

;; typedef enum {
;;   GIT_REF_INVALID = 0,
;;   GIT_REF_OID = 1,
;;   GIT_REF_SYMBOLIC = 2,
;;   GIT_REF_LISTALL = GIT_REF_OID | GIT_REF_SYMBOLIC,
;; } git_ref_t;
