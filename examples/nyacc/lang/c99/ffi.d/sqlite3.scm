;; auto-generated by ffi-help.scm

(define-module (sqlite3)
  #:use-module (system ffi-help-rt)
  #:use-module ((system foreign) #:prefix ffi:)
  #:use-module (bytestructures guile)
  )
(dynamic-link "libsqlite3")

;; extern const char sqlite3_version[];
(define sqlite3_version-desc
  (bs:pointer int)
  )
(define sqlite3_version
  (bytestructure
    sqlite3_version-desc
    (ffi:pointer->bytevector
      (dynamic-pointer
        "sqlite3_version"
        (dynamic-link))
      (bytestructure-descriptor-size
        sqlite3_version-desc))))

;; const char *sqlite3_libversion(void);
(define sqlite3_libversion
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_libversion"
                (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export sqlite3_libversion)

;; const char *sqlite3_sourceid(void);
(define sqlite3_sourceid
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_sourceid" (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export sqlite3_sourceid)

;; int sqlite3_libversion_number(void);
(define sqlite3_libversion_number
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_libversion_number"
                (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export sqlite3_libversion_number)

;; int sqlite3_compileoption_used(const char *zOptName);
(define sqlite3_compileoption_used
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_compileoption_used"
                (dynamic-link))
              (list '*))))
    (lambda (zOptName)
      (let ((~zOptName (unwrap~pointer zOptName)))
        (~f ~zOptName)))))
(export sqlite3_compileoption_used)

;; const char *sqlite3_compileoption_get(int N);
(define sqlite3_compileoption_get
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_compileoption_get"
                (dynamic-link))
              (list ffi:int))))
    (lambda (N)
      (let ((~N (unwrap~fixed N))) (~f ~N)))))
(export sqlite3_compileoption_get)

;; int sqlite3_threadsafe(void);
(define sqlite3_threadsafe
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_threadsafe"
                (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export sqlite3_threadsafe)

;; typedef struct sqlite3 sqlite3;
(define-fh-pointer-type sqlite3*)

;; typedef long long int sqlite_int64;

;; typedef unsigned long long int sqlite_uint64;

;; typedef sqlite_int64 sqlite3_int64;

;; typedef sqlite_uint64 sqlite3_uint64;

;; int sqlite3_close(sqlite3 *);
(define sqlite3_close
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_close" (dynamic-link))
              (list '*))))
    (lambda (@282)
      (let ((~@282 (unwrap-sqlite3* @282))) (~f ~@282)))))
(export sqlite3_close)

;; int sqlite3_close_v2(sqlite3 *);
(define sqlite3_close_v2
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_close_v2" (dynamic-link))
              (list '*))))
    (lambda (@284)
      (let ((~@284 (unwrap-sqlite3* @284))) (~f ~@284)))))
(export sqlite3_close_v2)

;; typedef int (*sqlite3_callback)(void *, int, char **, char **);
(define-fh-function/p sqlite3_callback
  ffi:int (list (quote *) ffi:int (quote *) (quote *)))

;; int sqlite3_exec(sqlite3 *, const char *sql, int (*callback)(void *, int, 
;;     char **, char **), void *, char **errmsg);
(define sqlite3_exec
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_exec" (dynamic-link))
              (list '* '* '* '* '*))))
    (lambda (@288 sql callback @287 errmsg)
      (let ((~@288 (unwrap-sqlite3* @288))
            (~sql (unwrap~pointer sql))
            (~callback
              ((make-ftn-arg-unwrapper
                 ffi:int
                 (list '* ffi:int '* '*))
               callback))
            (~@287 (unwrap~pointer @287))
            (~errmsg (unwrap~pointer errmsg)))
        (~f ~@288 ~sql ~callback ~@287 ~errmsg)))))
(export sqlite3_exec)

;; typedef struct sqlite3_file sqlite3_file;
;; struct sqlite3_file {
;;   const struct sqlite3_io_methods *pMethods; /* Methods for an open file */
;;       
;; };
(define sqlite3_file-desc
  (bs:struct
    (list `(pMethods ,(bs:pointer intptr_t)))))
(export sqlite3_file-desc)
(define-fh-compound-type/p sqlite3_file sqlite3_file-desc)
(define struct-sqlite3_file sqlite3_file)

;; typedef struct sqlite3_io_methods sqlite3_io_methods;
;; struct sqlite3_io_methods {
;;   int iVersion;
;;   int (*xClose)(sqlite3_file *);
;;   int (*xRead)(sqlite3_file *, void *, int iAmt, sqlite3_int64 iOfst);
;;   int (*xWrite)(sqlite3_file *, const void *, int iAmt, sqlite3_int64 iOfst
;;       );
;;   int (*xTruncate)(sqlite3_file *, sqlite3_int64 size);
;;   int (*xSync)(sqlite3_file *, int flags);
;;   int (*xFileSize)(sqlite3_file *, sqlite3_int64 *pSize);
;;   int (*xLock)(sqlite3_file *, int);
;;   int (*xUnlock)(sqlite3_file *, int);
;;   int (*xCheckReservedLock)(sqlite3_file *, int *pResOut);
;;   int (*xFileControl)(sqlite3_file *, int op, void *pArg);
;;   int (*xSectorSize)(sqlite3_file *);
;;   int (*xDeviceCharacteristics)(sqlite3_file *);
;;   /* Methods above are valid for version 1 */
;;   int (*xShmMap)(sqlite3_file *, int iPg, int pgsz, int, void volatile **)
;;       ;
;;   int (*xShmLock)(sqlite3_file *, int offset, int n, int flags);
;;   void (*xShmBarrier)(sqlite3_file *);
;;   int (*xShmUnmap)(sqlite3_file *, int deleteFlag);
;;   /* Methods above are valid for version 2 */
;;   int (*xFetch)(sqlite3_file *, sqlite3_int64 iOfst, int iAmt, void **pp);
;;   int (*xUnfetch)(sqlite3_file *, sqlite3_int64 iOfst, void *p);
;;   /* Methods above are valid for version 3 */
;;   /* Additional methods may be added in future releases */
;; };
(define sqlite3_io_methods-desc
  (bs:struct
    (list `(iVersion ,int)
          `(xClose ,(bs:pointer intptr_t))
          `(xRead ,(bs:pointer intptr_t))
          `(xWrite ,(bs:pointer intptr_t))
          `(xTruncate ,(bs:pointer intptr_t))
          `(xSync ,(bs:pointer intptr_t))
          `(xFileSize ,(bs:pointer intptr_t))
          `(xLock ,(bs:pointer intptr_t))
          `(xUnlock ,(bs:pointer intptr_t))
          `(xCheckReservedLock ,(bs:pointer intptr_t))
          `(xFileControl ,(bs:pointer intptr_t))
          `(xSectorSize ,(bs:pointer intptr_t))
          `(xDeviceCharacteristics ,(bs:pointer intptr_t))
          `(xShmMap ,(bs:pointer intptr_t))
          `(xShmLock ,(bs:pointer intptr_t))
          `(xShmBarrier ,(bs:pointer intptr_t))
          `(xShmUnmap ,(bs:pointer intptr_t))
          `(xFetch ,(bs:pointer intptr_t))
          `(xUnfetch ,(bs:pointer intptr_t)))))
(export sqlite3_io_methods-desc)
(define-fh-compound-type/p sqlite3_io_methods sqlite3_io_methods-desc)
(define struct-sqlite3_io_methods sqlite3_io_methods)

;; typedef struct sqlite3_mutex sqlite3_mutex;
(define-fh-pointer-type sqlite3_mutex*)

;; typedef struct sqlite3_api_routines sqlite3_api_routines;
(define-fh-pointer-type sqlite3_api_routines*)

;; typedef struct sqlite3_vfs sqlite3_vfs;
;; struct sqlite3_vfs {
;;   int iVersion; /* Structure version number (currently 3) */
;;   int szOsFile; /* Size of subclassed sqlite3_file */
;;   int mxPathname; /* Maximum file pathname length */
;;   sqlite3_vfs *pNext; /* Next registered VFS */
;;   const char *zName; /* Name of this virtual file system */
;;   void *pAppData; /* Pointer to application-specific data */
;;   int (*xOpen)(sqlite3_vfs *, const char *zName, sqlite3_file *, int flags
;;       , int *pOutFlags);
;;   int (*xDelete)(sqlite3_vfs *, const char *zName, int syncDir);
;;   int (*xAccess)(sqlite3_vfs *, const char *zName, int flags, int *pResOut)
;;       ;
;;   int (*xFullPathname)(sqlite3_vfs *, const char *zName, int nOut, char *
;;       zOut);
;;   void *(*xDlOpen)(sqlite3_vfs *, const char *zFilename);
;;   void (*xDlError)(sqlite3_vfs *, int nByte, char *zErrMsg);
;;   void (*(*xDlSym)(sqlite3_vfs *, void *, const char *zSymbol))(void);
;;   void (*xDlClose)(sqlite3_vfs *, void *);
;;   int (*xRandomness)(sqlite3_vfs *, int nByte, char *zOut);
;;   int (*xSleep)(sqlite3_vfs *, int microseconds);
;;   int (*xCurrentTime)(sqlite3_vfs *, double *);
;;   int (*xGetLastError)(sqlite3_vfs *, int, char *);
;;   /*
;;     ** The methods above are in version 1 of the sqlite_vfs object
;;     ** definition.  Those that follow are added in version 2 or later
;;     */
;;   int (*xCurrentTimeInt64)(sqlite3_vfs *, sqlite3_int64 *);
;;   /*
;;     ** The methods above are in versions 1 and 2 of the sqlite_vfs object.
;;     ** Those below are for version 3 and greater.
;;     */
;;   int (*xSetSystemCall)(sqlite3_vfs *, const char *zName, 
;;       sqlite3_syscall_ptr);
;;   sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs *, const char *zName);
;;   const char *(*xNextSystemCall)(sqlite3_vfs *, const char *zName);
;;   /*
;;     ** The methods above are in versions 1 through 3 of the sqlite_vfs object.
;;       
;;     ** New fields may be appended in future versions.  The iVersion
;;     ** value will increment whenever this happens. 
;;     */
;; };
(define sqlite3_vfs-desc
  (bs:struct
    (list `(iVersion ,int)
          `(szOsFile ,int)
          `(mxPathname ,int)
          `(pNext ,(bs:pointer "sqlite3_vfs"))
          `(zName ,(bs:pointer int))
          `(pAppData ,(bs:pointer intptr_t))
          `(xOpen ,(bs:pointer intptr_t))
          `(xDelete ,(bs:pointer intptr_t))
          `(xAccess ,(bs:pointer intptr_t))
          `(xFullPathname ,(bs:pointer intptr_t))
          `(xDlOpen ,(bs:pointer intptr_t))
          `(xDlError ,(bs:pointer intptr_t))
          `(xDlSym ,(bs:pointer intptr_t))
          `(xDlClose ,(bs:pointer intptr_t))
          `(xRandomness ,(bs:pointer intptr_t))
          `(xSleep ,(bs:pointer intptr_t))
          `(xCurrentTime ,(bs:pointer intptr_t))
          `(xGetLastError ,(bs:pointer intptr_t))
          `(xCurrentTimeInt64 ,(bs:pointer intptr_t))
          `(xSetSystemCall ,(bs:pointer intptr_t))
          `(xGetSystemCall ,(bs:pointer intptr_t))
          `(xNextSystemCall ,(bs:pointer intptr_t)))))
(export sqlite3_vfs-desc)
(define-fh-compound-type/p sqlite3_vfs sqlite3_vfs-desc)
(define struct-sqlite3_vfs sqlite3_vfs)

;; typedef void (*sqlite3_syscall_ptr)(void);
(define-fh-function/p sqlite3_syscall_ptr
  ffi:void (list ffi:void))

;; int sqlite3_initialize(void);
(define sqlite3_initialize
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_initialize"
                (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export sqlite3_initialize)

;; int sqlite3_shutdown(void);
(define sqlite3_shutdown
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_shutdown" (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export sqlite3_shutdown)

;; int sqlite3_os_init(void);
(define sqlite3_os_init
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_os_init" (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export sqlite3_os_init)

;; int sqlite3_os_end(void);
(define sqlite3_os_end
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_os_end" (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export sqlite3_os_end)

;; int sqlite3_config(int, ...);
;; ... failed.

;; int sqlite3_db_config(sqlite3 *, int op, ...);
;; ... failed.

;; typedef struct sqlite3_mem_methods sqlite3_mem_methods;
;; struct sqlite3_mem_methods {
;;   void *(*xMalloc)(int); /* Memory allocation function */
;;   void (*xFree)(void *); /* Free a prior allocation */
;;   void *(*xRealloc)(void *, int); /* Resize an allocation */
;;   int (*xSize)(void *); /* Return the size of an allocation */
;;   int (*xRoundup)(int); /* Round up request size to allocation size */
;;   int (*xInit)(void *); /* Initialize the memory allocator */
;;   void (*xShutdown)(void *); /* Deinitialize the memory allocator */
;;   void *pAppData; /* Argument to xInit() and xShutdown() */
;; };
(define sqlite3_mem_methods-desc
  (bs:struct
    (list `(xMalloc ,(bs:pointer intptr_t))
          `(xFree ,(bs:pointer intptr_t))
          `(xRealloc ,(bs:pointer intptr_t))
          `(xSize ,(bs:pointer intptr_t))
          `(xRoundup ,(bs:pointer intptr_t))
          `(xInit ,(bs:pointer intptr_t))
          `(xShutdown ,(bs:pointer intptr_t))
          `(pAppData ,(bs:pointer intptr_t)))))
(export sqlite3_mem_methods-desc)
(define-fh-compound-type/p sqlite3_mem_methods sqlite3_mem_methods-desc)
(define struct-sqlite3_mem_methods sqlite3_mem_methods)

;; int sqlite3_extended_result_codes(sqlite3 *, int onoff);
(define sqlite3_extended_result_codes
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_extended_result_codes"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@311 onoff)
      (let ((~@311 (unwrap-sqlite3* @311))
            (~onoff (unwrap~fixed onoff)))
        (~f ~@311 ~onoff)))))
(export sqlite3_extended_result_codes)

;; sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *);
;; ... failed.

;; void sqlite3_set_last_insert_rowid(sqlite3 *, sqlite3_int64);
;; ... failed.

;; int sqlite3_changes(sqlite3 *);
(define sqlite3_changes
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_changes" (dynamic-link))
              (list '*))))
    (lambda (@315)
      (let ((~@315 (unwrap-sqlite3* @315))) (~f ~@315)))))
(export sqlite3_changes)

;; int sqlite3_total_changes(sqlite3 *);
(define sqlite3_total_changes
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_total_changes"
                (dynamic-link))
              (list '*))))
    (lambda (@317)
      (let ((~@317 (unwrap-sqlite3* @317))) (~f ~@317)))))
(export sqlite3_total_changes)

;; void sqlite3_interrupt(sqlite3 *);
(define sqlite3_interrupt
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func "sqlite3_interrupt" (dynamic-link))
              (list '*))))
    (lambda (@319)
      (let ((~@319 (unwrap-sqlite3* @319))) (~f ~@319)))))
(export sqlite3_interrupt)

;; int sqlite3_complete(const char *sql);
(define sqlite3_complete
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_complete" (dynamic-link))
              (list '*))))
    (lambda (sql)
      (let ((~sql (unwrap~pointer sql))) (~f ~sql)))))
(export sqlite3_complete)

;; int sqlite3_complete16(const void *sql);
(define sqlite3_complete16
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_complete16"
                (dynamic-link))
              (list '*))))
    (lambda (sql)
      (let ((~sql (unwrap~pointer sql))) (~f ~sql)))))
(export sqlite3_complete16)

;; int sqlite3_busy_handler(sqlite3 *, int (*)(void *, int), void *);
(define sqlite3_busy_handler
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_busy_handler"
                (dynamic-link))
              (list '* '* '*))))
    (lambda (@325 @324 @323)
      (let ((~@325 (unwrap-sqlite3* @325))
            (~@324 ((make-ftn-arg-unwrapper
                      ffi:int
                      (list '* ffi:int))
                    @324))
            (~@323 (unwrap~pointer @323)))
        (~f ~@325 ~@324 ~@323)))))
(export sqlite3_busy_handler)

;; int sqlite3_busy_timeout(sqlite3 *, int ms);
(define sqlite3_busy_timeout
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_busy_timeout"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@327 ms)
      (let ((~@327 (unwrap-sqlite3* @327))
            (~ms (unwrap~fixed ms)))
        (~f ~@327 ~ms)))))
(export sqlite3_busy_timeout)

;; int sqlite3_get_table(sqlite3 *db, const char *zSql, char ***pazResult, int
;;      *pnRow, int *pnColumn, char **pzErrmsg);
(define sqlite3_get_table
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_get_table" (dynamic-link))
              (list '* '* '* '* '* '*))))
    (lambda (db zSql pazResult pnRow pnColumn pzErrmsg)
      (let ((~db (unwrap-sqlite3* db))
            (~zSql (unwrap~pointer zSql))
            (~pazResult (unwrap~pointer pazResult))
            (~pnRow (unwrap~pointer pnRow))
            (~pnColumn (unwrap~pointer pnColumn))
            (~pzErrmsg (unwrap~pointer pzErrmsg)))
        (~f ~db
            ~zSql
            ~pazResult
            ~pnRow
            ~pnColumn
            ~pzErrmsg)))))
(export sqlite3_get_table)

;; void sqlite3_free_table(char **result);
(define sqlite3_free_table
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_free_table"
                (dynamic-link))
              (list '*))))
    (lambda (result)
      (let ((~result (unwrap~pointer result)))
        (~f ~result)))))
(export sqlite3_free_table)

;; char *sqlite3_mprintf(const char *, ...);
;; ... failed.

;; char *sqlite3_vmprintf(const char *, va_list);
(define sqlite3_vmprintf
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_vmprintf" (dynamic-link))
              (list '* '*))))
    (lambda (@332 arg-1)
      (let ((~@332 (unwrap~pointer @332))
            (~arg-1 (unwrap-va_list arg-1)))
        (~f ~@332 ~arg-1)))))
(export sqlite3_vmprintf)

;; char *sqlite3_snprintf(int, char *, const char *, ...);
;; ... failed.

;; char *sqlite3_vsnprintf(int, char *, const char *, va_list);
(define sqlite3_vsnprintf
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_vsnprintf" (dynamic-link))
              (list ffi:int '* '* '*))))
    (lambda (arg-0 @336 @335 arg-3)
      (let ((~arg-0 (unwrap~fixed arg-0))
            (~@336 (unwrap~pointer @336))
            (~@335 (unwrap~pointer @335))
            (~arg-3 (unwrap-va_list arg-3)))
        (~f ~arg-0 ~@336 ~@335 ~arg-3)))))
(export sqlite3_vsnprintf)

;; void *sqlite3_malloc(int);
(define sqlite3_malloc
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_malloc" (dynamic-link))
              (list ffi:int))))
    (lambda (arg-0)
      (let ((~arg-0 (unwrap~fixed arg-0))) (~f ~arg-0)))))
(export sqlite3_malloc)

;; void *sqlite3_malloc64(sqlite3_uint64);
;; ... failed.

;; void *sqlite3_realloc(void *, int);
(define sqlite3_realloc
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_realloc" (dynamic-link))
              (list '* ffi:int))))
    (lambda (@340 arg-1)
      (let ((~@340 (unwrap~pointer @340))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@340 ~arg-1)))))
(export sqlite3_realloc)

;; void *sqlite3_realloc64(void *, sqlite3_uint64);
;; ... failed.

;; void sqlite3_free(void *);
(define sqlite3_free
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func "sqlite3_free" (dynamic-link))
              (list '*))))
    (lambda (@343)
      (let ((~@343 (unwrap~pointer @343))) (~f ~@343)))))
(export sqlite3_free)

;; sqlite3_uint64 sqlite3_msize(void *);
;; ... failed.

;; sqlite3_int64 sqlite3_memory_used(void);
;; ... failed.

;; sqlite3_int64 sqlite3_memory_highwater(int resetFlag);
;; ... failed.

;; void sqlite3_randomness(int N, void *P);
(define sqlite3_randomness
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_randomness"
                (dynamic-link))
              (list ffi:int '*))))
    (lambda (N P)
      (let ((~N (unwrap~fixed N)) (~P (unwrap~pointer P)))
        (~f ~N ~P)))))
(export sqlite3_randomness)

;; int sqlite3_set_authorizer(sqlite3 *, int (*xAuth)(void *, int, const char 
;;     *, const char *, const char *, const char *), void *pUserData);
(define sqlite3_set_authorizer
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_set_authorizer"
                (dynamic-link))
              (list '* '* '*))))
    (lambda (@349 xAuth pUserData)
      (let ((~@349 (unwrap-sqlite3* @349))
            (~xAuth
              ((make-ftn-arg-unwrapper
                 ffi:int
                 (list '* ffi:int '* '* '* '*))
               xAuth))
            (~pUserData (unwrap~pointer pUserData)))
        (~f ~@349 ~xAuth ~pUserData)))))
(export sqlite3_set_authorizer)

;; void *sqlite3_trace(sqlite3 *, void (*xTrace)(void *, const char *), void *
;;     );
(define sqlite3_trace
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_trace" (dynamic-link))
              (list '* '* '*))))
    (lambda (@352 xTrace @351)
      (let ((~@352 (unwrap-sqlite3* @352))
            (~xTrace
              ((make-ftn-arg-unwrapper ffi:void (list '* '*))
               xTrace))
            (~@351 (unwrap~pointer @351)))
        (~f ~@352 ~xTrace ~@351)))))
(export sqlite3_trace)

;; void *sqlite3_profile(sqlite3 *, void (*xProfile)(void *, const char *, 
;;     sqlite3_uint64), void *);
;; ... failed.

;; int sqlite3_trace_v2(sqlite3 *, unsigned uMask, int (*xCallback)(unsigned, 
;;     void *, void *, void *), void *pCtx);
(define sqlite3_trace_v2
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_trace_v2" (dynamic-link))
              (list '* ffi:unsigned-int '* '*))))
    (lambda (@356 uMask xCallback pCtx)
      (let ((~@356 (unwrap-sqlite3* @356))
            (~uMask (unwrap~fixed uMask))
            (~xCallback
              ((make-ftn-arg-unwrapper
                 ffi:int
                 (list ffi:unsigned-int '* '* '*))
               xCallback))
            (~pCtx (unwrap~pointer pCtx)))
        (~f ~@356 ~uMask ~xCallback ~pCtx)))))
(export sqlite3_trace_v2)

;; void sqlite3_progress_handler(sqlite3 *, int, int (*)(void *), void *);
(define sqlite3_progress_handler
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_progress_handler"
                (dynamic-link))
              (list '* ffi:int '* '*))))
    (lambda (@360 arg-1 @359 @358)
      (let ((~@360 (unwrap-sqlite3* @360))
            (~arg-1 (unwrap~fixed arg-1))
            (~@359 ((make-ftn-arg-unwrapper ffi:int (list '*)) @359))
            (~@358 (unwrap~pointer @358)))
        (~f ~@360 ~arg-1 ~@359 ~@358)))))
(export sqlite3_progress_handler)

;; int sqlite3_open(const char *filename, sqlite3 **ppDb);
(define sqlite3_open
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_open" (dynamic-link))
              (list '* '*))))
    (lambda (filename ppDb)
      (let ((~filename (unwrap~pointer filename))
            (~ppDb (unwrap~pointer ppDb)))
        (~f ~filename ~ppDb)))))
(export sqlite3_open)

;; int sqlite3_open16(const void *filename, sqlite3 **ppDb);
(define sqlite3_open16
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_open16" (dynamic-link))
              (list '* '*))))
    (lambda (filename ppDb)
      (let ((~filename (unwrap~pointer filename))
            (~ppDb (unwrap~pointer ppDb)))
        (~f ~filename ~ppDb)))))
(export sqlite3_open16)

;; int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const 
;;     char *zVfs);
(define sqlite3_open_v2
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_open_v2" (dynamic-link))
              (list '* '* ffi:int '*))))
    (lambda (filename ppDb flags zVfs)
      (let ((~filename (unwrap~pointer filename))
            (~ppDb (unwrap~pointer ppDb))
            (~flags (unwrap~fixed flags))
            (~zVfs (unwrap~pointer zVfs)))
        (~f ~filename ~ppDb ~flags ~zVfs)))))
(export sqlite3_open_v2)

;; const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam
;;     );
(define sqlite3_uri_parameter
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_uri_parameter"
                (dynamic-link))
              (list '* '*))))
    (lambda (zFilename zParam)
      (let ((~zFilename (unwrap~pointer zFilename))
            (~zParam (unwrap~pointer zParam)))
        (~f ~zFilename ~zParam)))))
(export sqlite3_uri_parameter)

;; int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault
;;     );
(define sqlite3_uri_boolean
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_uri_boolean"
                (dynamic-link))
              (list '* '* ffi:int))))
    (lambda (zFile zParam bDefault)
      (let ((~zFile (unwrap~pointer zFile))
            (~zParam (unwrap~pointer zParam))
            (~bDefault (unwrap~fixed bDefault)))
        (~f ~zFile ~zParam ~bDefault)))))
(export sqlite3_uri_boolean)

;; sqlite3_int64 sqlite3_uri_int64(const char *, const char *, sqlite3_int64)
;;     ;
;; ... failed.

;; int sqlite3_errcode(sqlite3 *db);
(define sqlite3_errcode
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_errcode" (dynamic-link))
              (list '*))))
    (lambda (db)
      (let ((~db (unwrap-sqlite3* db))) (~f ~db)))))
(export sqlite3_errcode)

;; int sqlite3_extended_errcode(sqlite3 *db);
(define sqlite3_extended_errcode
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_extended_errcode"
                (dynamic-link))
              (list '*))))
    (lambda (db)
      (let ((~db (unwrap-sqlite3* db))) (~f ~db)))))
(export sqlite3_extended_errcode)

;; const char *sqlite3_errmsg(sqlite3 *);
(define sqlite3_errmsg
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_errmsg" (dynamic-link))
              (list '*))))
    (lambda (@370)
      (let ((~@370 (unwrap-sqlite3* @370))) (~f ~@370)))))
(export sqlite3_errmsg)

;; const void *sqlite3_errmsg16(sqlite3 *);
(define sqlite3_errmsg16
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_errmsg16" (dynamic-link))
              (list '*))))
    (lambda (@372)
      (let ((~@372 (unwrap-sqlite3* @372))) (~f ~@372)))))
(export sqlite3_errmsg16)

;; const char *sqlite3_errstr(int);
(define sqlite3_errstr
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_errstr" (dynamic-link))
              (list ffi:int))))
    (lambda (arg-0)
      (let ((~arg-0 (unwrap~fixed arg-0))) (~f ~arg-0)))))
(export sqlite3_errstr)

;; typedef struct sqlite3_stmt sqlite3_stmt;
(define-fh-pointer-type sqlite3_stmt*)

;; int sqlite3_limit(sqlite3 *, int id, int newVal);
(define sqlite3_limit
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_limit" (dynamic-link))
              (list '* ffi:int ffi:int))))
    (lambda (@376 id newVal)
      (let ((~@376 (unwrap-sqlite3* @376))
            (~id (unwrap~fixed id))
            (~newVal (unwrap~fixed newVal)))
        (~f ~@376 ~id ~newVal)))))
(export sqlite3_limit)

;; int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt 
;;     **ppStmt, const char **pzTail);
(define sqlite3_prepare
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_prepare" (dynamic-link))
              (list '* '* ffi:int '* '*))))
    (lambda (db zSql nByte ppStmt pzTail)
      (let ((~db (unwrap-sqlite3* db))
            (~zSql (unwrap~pointer zSql))
            (~nByte (unwrap~fixed nByte))
            (~ppStmt (unwrap~pointer ppStmt))
            (~pzTail (unwrap~pointer pzTail)))
        (~f ~db ~zSql ~nByte ~ppStmt ~pzTail)))))
(export sqlite3_prepare)

;; int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, 
;;     sqlite3_stmt **ppStmt, const char **pzTail);
(define sqlite3_prepare_v2
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_prepare_v2"
                (dynamic-link))
              (list '* '* ffi:int '* '*))))
    (lambda (db zSql nByte ppStmt pzTail)
      (let ((~db (unwrap-sqlite3* db))
            (~zSql (unwrap~pointer zSql))
            (~nByte (unwrap~fixed nByte))
            (~ppStmt (unwrap~pointer ppStmt))
            (~pzTail (unwrap~pointer pzTail)))
        (~f ~db ~zSql ~nByte ~ppStmt ~pzTail)))))
(export sqlite3_prepare_v2)

;; int sqlite3_prepare16(sqlite3 *db, const void *zSql, int nByte, 
;;     sqlite3_stmt **ppStmt, const void **pzTail);
(define sqlite3_prepare16
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_prepare16" (dynamic-link))
              (list '* '* ffi:int '* '*))))
    (lambda (db zSql nByte ppStmt pzTail)
      (let ((~db (unwrap-sqlite3* db))
            (~zSql (unwrap~pointer zSql))
            (~nByte (unwrap~fixed nByte))
            (~ppStmt (unwrap~pointer ppStmt))
            (~pzTail (unwrap~pointer pzTail)))
        (~f ~db ~zSql ~nByte ~ppStmt ~pzTail)))))
(export sqlite3_prepare16)

;; int sqlite3_prepare16_v2(sqlite3 *db, const void *zSql, int nByte, 
;;     sqlite3_stmt **ppStmt, const void **pzTail);
(define sqlite3_prepare16_v2
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_prepare16_v2"
                (dynamic-link))
              (list '* '* ffi:int '* '*))))
    (lambda (db zSql nByte ppStmt pzTail)
      (let ((~db (unwrap-sqlite3* db))
            (~zSql (unwrap~pointer zSql))
            (~nByte (unwrap~fixed nByte))
            (~ppStmt (unwrap~pointer ppStmt))
            (~pzTail (unwrap~pointer pzTail)))
        (~f ~db ~zSql ~nByte ~ppStmt ~pzTail)))))
(export sqlite3_prepare16_v2)

;; const char *sqlite3_sql(sqlite3_stmt *pStmt);
(define sqlite3_sql
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_sql" (dynamic-link))
              (list '*))))
    (lambda (pStmt)
      (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
        (~f ~pStmt)))))
(export sqlite3_sql)

;; char *sqlite3_expanded_sql(sqlite3_stmt *pStmt);
(define sqlite3_expanded_sql
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_expanded_sql"
                (dynamic-link))
              (list '*))))
    (lambda (pStmt)
      (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
        (~f ~pStmt)))))
(export sqlite3_expanded_sql)

;; int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);
(define sqlite3_stmt_readonly
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_stmt_readonly"
                (dynamic-link))
              (list '*))))
    (lambda (pStmt)
      (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
        (~f ~pStmt)))))
(export sqlite3_stmt_readonly)

;; int sqlite3_stmt_busy(sqlite3_stmt *);
(define sqlite3_stmt_busy
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_stmt_busy" (dynamic-link))
              (list '*))))
    (lambda (@385)
      (let ((~@385 (unwrap-sqlite3_stmt* @385)))
        (~f ~@385)))))
(export sqlite3_stmt_busy)

;; typedef struct sqlite3_value sqlite3_value;
(define-fh-pointer-type sqlite3_value*)

;; typedef struct sqlite3_context sqlite3_context;
(define-fh-pointer-type sqlite3_context*)

;; int sqlite3_bind_blob(sqlite3_stmt *, int, const void *, int n, void (*)(
;;     void *));
(define sqlite3_bind_blob
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_bind_blob" (dynamic-link))
              (list '* ffi:int '* ffi:int '*))))
    (lambda (@391 arg-1 @390 n @389)
      (let ((~@391 (unwrap-sqlite3_stmt* @391))
            (~arg-1 (unwrap~fixed arg-1))
            (~@390 (unwrap~pointer @390))
            (~n (unwrap~fixed n))
            (~@389 ((make-ftn-arg-unwrapper ffi:void (list '*))
                    @389)))
        (~f ~@391 ~arg-1 ~@390 ~n ~@389)))))
(export sqlite3_bind_blob)

;; int sqlite3_bind_blob64(sqlite3_stmt *, int, const void *, sqlite3_uint64, 
;;     void (*)(void *));
;; ... failed.

;; int sqlite3_bind_double(sqlite3_stmt *, int, double);
(define sqlite3_bind_double
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_bind_double"
                (dynamic-link))
              (list '* ffi:int ffi:double))))
    (lambda (@394 arg-1 arg-2)
      (let ((~@394 (unwrap-sqlite3_stmt* @394))
            (~arg-1 (unwrap~fixed arg-1))
            (~arg-2 (unwrap~float arg-2)))
        (~f ~@394 ~arg-1 ~arg-2)))))
(export sqlite3_bind_double)

;; int sqlite3_bind_int(sqlite3_stmt *, int, int);
(define sqlite3_bind_int
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_bind_int" (dynamic-link))
              (list '* ffi:int ffi:int))))
    (lambda (@396 arg-1 arg-2)
      (let ((~@396 (unwrap-sqlite3_stmt* @396))
            (~arg-1 (unwrap~fixed arg-1))
            (~arg-2 (unwrap~fixed arg-2)))
        (~f ~@396 ~arg-1 ~arg-2)))))
(export sqlite3_bind_int)

;; int sqlite3_bind_int64(sqlite3_stmt *, int, sqlite3_int64);
;; ... failed.

;; int sqlite3_bind_null(sqlite3_stmt *, int);
(define sqlite3_bind_null
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_bind_null" (dynamic-link))
              (list '* ffi:int))))
    (lambda (@399 arg-1)
      (let ((~@399 (unwrap-sqlite3_stmt* @399))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@399 ~arg-1)))))
(export sqlite3_bind_null)

;; int sqlite3_bind_text(sqlite3_stmt *, int, const char *, int, void (*)(void
;;      *));
(define sqlite3_bind_text
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_bind_text" (dynamic-link))
              (list '* ffi:int '* ffi:int '*))))
    (lambda (@403 arg-1 @402 arg-3 @401)
      (let ((~@403 (unwrap-sqlite3_stmt* @403))
            (~arg-1 (unwrap~fixed arg-1))
            (~@402 (unwrap~pointer @402))
            (~arg-3 (unwrap~fixed arg-3))
            (~@401 ((make-ftn-arg-unwrapper ffi:void (list '*))
                    @401)))
        (~f ~@403 ~arg-1 ~@402 ~arg-3 ~@401)))))
(export sqlite3_bind_text)

;; int sqlite3_bind_text16(sqlite3_stmt *, int, const void *, int, void (*)(
;;     void *));
(define sqlite3_bind_text16
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_bind_text16"
                (dynamic-link))
              (list '* ffi:int '* ffi:int '*))))
    (lambda (@407 arg-1 @406 arg-3 @405)
      (let ((~@407 (unwrap-sqlite3_stmt* @407))
            (~arg-1 (unwrap~fixed arg-1))
            (~@406 (unwrap~pointer @406))
            (~arg-3 (unwrap~fixed arg-3))
            (~@405 ((make-ftn-arg-unwrapper ffi:void (list '*))
                    @405)))
        (~f ~@407 ~arg-1 ~@406 ~arg-3 ~@405)))))
(export sqlite3_bind_text16)

;; int sqlite3_bind_text64(sqlite3_stmt *, int, const char *, sqlite3_uint64, 
;;     void (*)(void *), unsigned char encoding);
;; ... failed.

;; int sqlite3_bind_value(sqlite3_stmt *, int, const sqlite3_value *);
(define sqlite3_bind_value
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_bind_value"
                (dynamic-link))
              (list '* ffi:int '*))))
    (lambda (@411 arg-1 @410)
      (let ((~@411 (unwrap-sqlite3_stmt* @411))
            (~arg-1 (unwrap~fixed arg-1))
            (~@410 (unwrap-sqlite3_value* @410)))
        (~f ~@411 ~arg-1 ~@410)))))
(export sqlite3_bind_value)

;; int sqlite3_bind_zeroblob(sqlite3_stmt *, int, int n);
(define sqlite3_bind_zeroblob
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_bind_zeroblob"
                (dynamic-link))
              (list '* ffi:int ffi:int))))
    (lambda (@413 arg-1 n)
      (let ((~@413 (unwrap-sqlite3_stmt* @413))
            (~arg-1 (unwrap~fixed arg-1))
            (~n (unwrap~fixed n)))
        (~f ~@413 ~arg-1 ~n)))))
(export sqlite3_bind_zeroblob)

;; int sqlite3_bind_zeroblob64(sqlite3_stmt *, int, sqlite3_uint64);
;; ... failed.

;; int sqlite3_bind_parameter_count(sqlite3_stmt *);
(define sqlite3_bind_parameter_count
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_bind_parameter_count"
                (dynamic-link))
              (list '*))))
    (lambda (@416)
      (let ((~@416 (unwrap-sqlite3_stmt* @416)))
        (~f ~@416)))))
(export sqlite3_bind_parameter_count)

;; const char *sqlite3_bind_parameter_name(sqlite3_stmt *, int);
(define sqlite3_bind_parameter_name
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_bind_parameter_name"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@418 arg-1)
      (let ((~@418 (unwrap-sqlite3_stmt* @418))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@418 ~arg-1)))))
(export sqlite3_bind_parameter_name)

;; int sqlite3_bind_parameter_index(sqlite3_stmt *, const char *zName);
(define sqlite3_bind_parameter_index
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_bind_parameter_index"
                (dynamic-link))
              (list '* '*))))
    (lambda (@420 zName)
      (let ((~@420 (unwrap-sqlite3_stmt* @420))
            (~zName (unwrap~pointer zName)))
        (~f ~@420 ~zName)))))
(export sqlite3_bind_parameter_index)

;; int sqlite3_clear_bindings(sqlite3_stmt *);
(define sqlite3_clear_bindings
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_clear_bindings"
                (dynamic-link))
              (list '*))))
    (lambda (@422)
      (let ((~@422 (unwrap-sqlite3_stmt* @422)))
        (~f ~@422)))))
(export sqlite3_clear_bindings)

;; int sqlite3_column_count(sqlite3_stmt *pStmt);
(define sqlite3_column_count
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_column_count"
                (dynamic-link))
              (list '*))))
    (lambda (pStmt)
      (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
        (~f ~pStmt)))))
(export sqlite3_column_count)

;; const char *sqlite3_column_name(sqlite3_stmt *, int N);
(define sqlite3_column_name
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_name"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@425 N)
      (let ((~@425 (unwrap-sqlite3_stmt* @425))
            (~N (unwrap~fixed N)))
        (~f ~@425 ~N)))))
(export sqlite3_column_name)

;; const void *sqlite3_column_name16(sqlite3_stmt *, int N);
(define sqlite3_column_name16
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_name16"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@427 N)
      (let ((~@427 (unwrap-sqlite3_stmt* @427))
            (~N (unwrap~fixed N)))
        (~f ~@427 ~N)))))
(export sqlite3_column_name16)

;; const char *sqlite3_column_database_name(sqlite3_stmt *, int);
(define sqlite3_column_database_name
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_database_name"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@429 arg-1)
      (let ((~@429 (unwrap-sqlite3_stmt* @429))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@429 ~arg-1)))))
(export sqlite3_column_database_name)

;; const void *sqlite3_column_database_name16(sqlite3_stmt *, int);
(define sqlite3_column_database_name16
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_database_name16"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@431 arg-1)
      (let ((~@431 (unwrap-sqlite3_stmt* @431))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@431 ~arg-1)))))
(export sqlite3_column_database_name16)

;; const char *sqlite3_column_table_name(sqlite3_stmt *, int);
(define sqlite3_column_table_name
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_table_name"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@433 arg-1)
      (let ((~@433 (unwrap-sqlite3_stmt* @433))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@433 ~arg-1)))))
(export sqlite3_column_table_name)

;; const void *sqlite3_column_table_name16(sqlite3_stmt *, int);
(define sqlite3_column_table_name16
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_table_name16"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@435 arg-1)
      (let ((~@435 (unwrap-sqlite3_stmt* @435))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@435 ~arg-1)))))
(export sqlite3_column_table_name16)

;; const char *sqlite3_column_origin_name(sqlite3_stmt *, int);
(define sqlite3_column_origin_name
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_origin_name"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@437 arg-1)
      (let ((~@437 (unwrap-sqlite3_stmt* @437))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@437 ~arg-1)))))
(export sqlite3_column_origin_name)

;; const void *sqlite3_column_origin_name16(sqlite3_stmt *, int);
(define sqlite3_column_origin_name16
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_origin_name16"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@439 arg-1)
      (let ((~@439 (unwrap-sqlite3_stmt* @439))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@439 ~arg-1)))))
(export sqlite3_column_origin_name16)

;; const char *sqlite3_column_decltype(sqlite3_stmt *, int);
(define sqlite3_column_decltype
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_decltype"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@441 arg-1)
      (let ((~@441 (unwrap-sqlite3_stmt* @441))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@441 ~arg-1)))))
(export sqlite3_column_decltype)

;; const void *sqlite3_column_decltype16(sqlite3_stmt *, int);
(define sqlite3_column_decltype16
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_decltype16"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@443 arg-1)
      (let ((~@443 (unwrap-sqlite3_stmt* @443))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@443 ~arg-1)))))
(export sqlite3_column_decltype16)

;; int sqlite3_step(sqlite3_stmt *);
(define sqlite3_step
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_step" (dynamic-link))
              (list '*))))
    (lambda (@445)
      (let ((~@445 (unwrap-sqlite3_stmt* @445)))
        (~f ~@445)))))
(export sqlite3_step)

;; int sqlite3_data_count(sqlite3_stmt *pStmt);
(define sqlite3_data_count
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_data_count"
                (dynamic-link))
              (list '*))))
    (lambda (pStmt)
      (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
        (~f ~pStmt)))))
(export sqlite3_data_count)

;; const void *sqlite3_column_blob(sqlite3_stmt *, int iCol);
(define sqlite3_column_blob
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_blob"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@448 iCol)
      (let ((~@448 (unwrap-sqlite3_stmt* @448))
            (~iCol (unwrap~fixed iCol)))
        (~f ~@448 ~iCol)))))
(export sqlite3_column_blob)

;; int sqlite3_column_bytes(sqlite3_stmt *, int iCol);
(define sqlite3_column_bytes
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_column_bytes"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@450 iCol)
      (let ((~@450 (unwrap-sqlite3_stmt* @450))
            (~iCol (unwrap~fixed iCol)))
        (~f ~@450 ~iCol)))))
(export sqlite3_column_bytes)

;; int sqlite3_column_bytes16(sqlite3_stmt *, int iCol);
(define sqlite3_column_bytes16
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_column_bytes16"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@452 iCol)
      (let ((~@452 (unwrap-sqlite3_stmt* @452))
            (~iCol (unwrap~fixed iCol)))
        (~f ~@452 ~iCol)))))
(export sqlite3_column_bytes16)

;; double sqlite3_column_double(sqlite3_stmt *, int iCol);
(define sqlite3_column_double
  (let ((~f (ffi:pointer->procedure
              ffi:double
              (dynamic-func
                "sqlite3_column_double"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@454 iCol)
      (let ((~@454 (unwrap-sqlite3_stmt* @454))
            (~iCol (unwrap~fixed iCol)))
        (~f ~@454 ~iCol)))))
(export sqlite3_column_double)

;; int sqlite3_column_int(sqlite3_stmt *, int iCol);
(define sqlite3_column_int
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_column_int"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@456 iCol)
      (let ((~@456 (unwrap-sqlite3_stmt* @456))
            (~iCol (unwrap~fixed iCol)))
        (~f ~@456 ~iCol)))))
(export sqlite3_column_int)

;; sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *, int iCol);
;; ... failed.

;; const unsigned char *sqlite3_column_text(sqlite3_stmt *, int iCol);
(define sqlite3_column_text
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_text"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@459 iCol)
      (let ((~@459 (unwrap-sqlite3_stmt* @459))
            (~iCol (unwrap~fixed iCol)))
        (~f ~@459 ~iCol)))))
(export sqlite3_column_text)

;; const void *sqlite3_column_text16(sqlite3_stmt *, int iCol);
(define sqlite3_column_text16
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_text16"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@461 iCol)
      (let ((~@461 (unwrap-sqlite3_stmt* @461))
            (~iCol (unwrap~fixed iCol)))
        (~f ~@461 ~iCol)))))
(export sqlite3_column_text16)

;; int sqlite3_column_type(sqlite3_stmt *, int iCol);
(define sqlite3_column_type
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_column_type"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@463 iCol)
      (let ((~@463 (unwrap-sqlite3_stmt* @463))
            (~iCol (unwrap~fixed iCol)))
        (~f ~@463 ~iCol)))))
(export sqlite3_column_type)

;; sqlite3_value *sqlite3_column_value(sqlite3_stmt *, int iCol);
(define sqlite3_column_value
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_column_value"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@465 iCol)
      (let ((~@465 (unwrap-sqlite3_stmt* @465))
            (~iCol (unwrap~fixed iCol)))
        (wrap-sqlite3_value* (~f ~@465 ~iCol))))))
(export sqlite3_column_value)

;; int sqlite3_finalize(sqlite3_stmt *pStmt);
(define sqlite3_finalize
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_finalize" (dynamic-link))
              (list '*))))
    (lambda (pStmt)
      (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
        (~f ~pStmt)))))
(export sqlite3_finalize)

;; int sqlite3_reset(sqlite3_stmt *pStmt);
(define sqlite3_reset
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_reset" (dynamic-link))
              (list '*))))
    (lambda (pStmt)
      (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
        (~f ~pStmt)))))
(export sqlite3_reset)

;; int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int 
;;     nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, 
;;     sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value 
;;     **), void (*xFinal)(sqlite3_context *));
(define sqlite3_create_function
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_create_function"
                (dynamic-link))
              (list '* '* ffi:int ffi:int '* '* '* '*))))
    (lambda (db
             zFunctionName
             nArg
             eTextRep
             pApp
             xFunc
             xStep
             xFinal)
      (let ((~db (unwrap-sqlite3* db))
            (~zFunctionName (unwrap~pointer zFunctionName))
            (~nArg (unwrap~fixed nArg))
            (~eTextRep (unwrap~fixed eTextRep))
            (~pApp (unwrap~pointer pApp))
            (~xFunc
              ((make-ftn-arg-unwrapper
                 ffi:void
                 (list '* ffi:int '*))
               xFunc))
            (~xStep
              ((make-ftn-arg-unwrapper
                 ffi:void
                 (list '* ffi:int '*))
               xStep))
            (~xFinal
              ((make-ftn-arg-unwrapper ffi:void (list '*))
               xFinal)))
        (~f ~db
            ~zFunctionName
            ~nArg
            ~eTextRep
            ~pApp
            ~xFunc
            ~xStep
            ~xFinal)))))
(export sqlite3_create_function)

;; int sqlite3_create_function16(sqlite3 *db, const void *zFunctionName, int 
;;     nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, 
;;     sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value 
;;     **), void (*xFinal)(sqlite3_context *));
(define sqlite3_create_function16
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_create_function16"
                (dynamic-link))
              (list '* '* ffi:int ffi:int '* '* '* '*))))
    (lambda (db
             zFunctionName
             nArg
             eTextRep
             pApp
             xFunc
             xStep
             xFinal)
      (let ((~db (unwrap-sqlite3* db))
            (~zFunctionName (unwrap~pointer zFunctionName))
            (~nArg (unwrap~fixed nArg))
            (~eTextRep (unwrap~fixed eTextRep))
            (~pApp (unwrap~pointer pApp))
            (~xFunc
              ((make-ftn-arg-unwrapper
                 ffi:void
                 (list '* ffi:int '*))
               xFunc))
            (~xStep
              ((make-ftn-arg-unwrapper
                 ffi:void
                 (list '* ffi:int '*))
               xStep))
            (~xFinal
              ((make-ftn-arg-unwrapper ffi:void (list '*))
               xFinal)))
        (~f ~db
            ~zFunctionName
            ~nArg
            ~eTextRep
            ~pApp
            ~xFunc
            ~xStep
            ~xFinal)))))
(export sqlite3_create_function16)

;; int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int 
;;     nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, 
;;     sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value 
;;     **), void (*xFinal)(sqlite3_context *), void (*xDestroy)(void *));
(define sqlite3_create_function_v2
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_create_function_v2"
                (dynamic-link))
              (list '* '* ffi:int ffi:int '* '* '* '* '*))))
    (lambda (db
             zFunctionName
             nArg
             eTextRep
             pApp
             xFunc
             xStep
             xFinal
             xDestroy)
      (let ((~db (unwrap-sqlite3* db))
            (~zFunctionName (unwrap~pointer zFunctionName))
            (~nArg (unwrap~fixed nArg))
            (~eTextRep (unwrap~fixed eTextRep))
            (~pApp (unwrap~pointer pApp))
            (~xFunc
              ((make-ftn-arg-unwrapper
                 ffi:void
                 (list '* ffi:int '*))
               xFunc))
            (~xStep
              ((make-ftn-arg-unwrapper
                 ffi:void
                 (list '* ffi:int '*))
               xStep))
            (~xFinal
              ((make-ftn-arg-unwrapper ffi:void (list '*))
               xFinal))
            (~xDestroy
              ((make-ftn-arg-unwrapper ffi:void (list '*))
               xDestroy)))
        (~f ~db
            ~zFunctionName
            ~nArg
            ~eTextRep
            ~pApp
            ~xFunc
            ~xStep
            ~xFinal
            ~xDestroy)))))
(export sqlite3_create_function_v2)

;; int sqlite3_aggregate_count(sqlite3_context *);
(define sqlite3_aggregate_count
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_aggregate_count"
                (dynamic-link))
              (list '*))))
    (lambda (@472)
      (let ((~@472 (unwrap-sqlite3_context* @472)))
        (~f ~@472)))))
(export sqlite3_aggregate_count)

;; int sqlite3_expired(sqlite3_stmt *);
(define sqlite3_expired
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_expired" (dynamic-link))
              (list '*))))
    (lambda (@474)
      (let ((~@474 (unwrap-sqlite3_stmt* @474)))
        (~f ~@474)))))
(export sqlite3_expired)

;; int sqlite3_transfer_bindings(sqlite3_stmt *, sqlite3_stmt *);
(define sqlite3_transfer_bindings
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_transfer_bindings"
                (dynamic-link))
              (list '* '*))))
    (lambda (@477 @476)
      (let ((~@477 (unwrap-sqlite3_stmt* @477))
            (~@476 (unwrap-sqlite3_stmt* @476)))
        (~f ~@477 ~@476)))))
(export sqlite3_transfer_bindings)

;; int sqlite3_global_recover(void);
(define sqlite3_global_recover
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_global_recover"
                (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export sqlite3_global_recover)

;; void sqlite3_thread_cleanup(void);
(define sqlite3_thread_cleanup
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_thread_cleanup"
                (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export sqlite3_thread_cleanup)

;; int sqlite3_memory_alarm(void (*)(void *, sqlite3_int64, int), void *, 
;;     sqlite3_int64);
;; ... failed.

;; const void *sqlite3_value_blob(sqlite3_value *);
(define sqlite3_value_blob
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_value_blob"
                (dynamic-link))
              (list '*))))
    (lambda (@482)
      (let ((~@482 (unwrap-sqlite3_value* @482)))
        (~f ~@482)))))
(export sqlite3_value_blob)

;; int sqlite3_value_bytes(sqlite3_value *);
(define sqlite3_value_bytes
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_value_bytes"
                (dynamic-link))
              (list '*))))
    (lambda (@484)
      (let ((~@484 (unwrap-sqlite3_value* @484)))
        (~f ~@484)))))
(export sqlite3_value_bytes)

;; int sqlite3_value_bytes16(sqlite3_value *);
(define sqlite3_value_bytes16
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_value_bytes16"
                (dynamic-link))
              (list '*))))
    (lambda (@486)
      (let ((~@486 (unwrap-sqlite3_value* @486)))
        (~f ~@486)))))
(export sqlite3_value_bytes16)

;; double sqlite3_value_double(sqlite3_value *);
(define sqlite3_value_double
  (let ((~f (ffi:pointer->procedure
              ffi:double
              (dynamic-func
                "sqlite3_value_double"
                (dynamic-link))
              (list '*))))
    (lambda (@488)
      (let ((~@488 (unwrap-sqlite3_value* @488)))
        (~f ~@488)))))
(export sqlite3_value_double)

;; int sqlite3_value_int(sqlite3_value *);
(define sqlite3_value_int
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_value_int" (dynamic-link))
              (list '*))))
    (lambda (@490)
      (let ((~@490 (unwrap-sqlite3_value* @490)))
        (~f ~@490)))))
(export sqlite3_value_int)

;; sqlite3_int64 sqlite3_value_int64(sqlite3_value *);
;; ... failed.

;; const unsigned char *sqlite3_value_text(sqlite3_value *);
(define sqlite3_value_text
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_value_text"
                (dynamic-link))
              (list '*))))
    (lambda (@493)
      (let ((~@493 (unwrap-sqlite3_value* @493)))
        (~f ~@493)))))
(export sqlite3_value_text)

;; const void *sqlite3_value_text16(sqlite3_value *);
(define sqlite3_value_text16
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_value_text16"
                (dynamic-link))
              (list '*))))
    (lambda (@495)
      (let ((~@495 (unwrap-sqlite3_value* @495)))
        (~f ~@495)))))
(export sqlite3_value_text16)

;; const void *sqlite3_value_text16le(sqlite3_value *);
(define sqlite3_value_text16le
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_value_text16le"
                (dynamic-link))
              (list '*))))
    (lambda (@497)
      (let ((~@497 (unwrap-sqlite3_value* @497)))
        (~f ~@497)))))
(export sqlite3_value_text16le)

;; const void *sqlite3_value_text16be(sqlite3_value *);
(define sqlite3_value_text16be
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_value_text16be"
                (dynamic-link))
              (list '*))))
    (lambda (@499)
      (let ((~@499 (unwrap-sqlite3_value* @499)))
        (~f ~@499)))))
(export sqlite3_value_text16be)

;; int sqlite3_value_type(sqlite3_value *);
(define sqlite3_value_type
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_value_type"
                (dynamic-link))
              (list '*))))
    (lambda (@501)
      (let ((~@501 (unwrap-sqlite3_value* @501)))
        (~f ~@501)))))
(export sqlite3_value_type)

;; int sqlite3_value_numeric_type(sqlite3_value *);
(define sqlite3_value_numeric_type
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_value_numeric_type"
                (dynamic-link))
              (list '*))))
    (lambda (@503)
      (let ((~@503 (unwrap-sqlite3_value* @503)))
        (~f ~@503)))))
(export sqlite3_value_numeric_type)

;; unsigned int sqlite3_value_subtype(sqlite3_value *);
(define sqlite3_value_subtype
  (let ((~f (ffi:pointer->procedure
              ffi:unsigned-int
              (dynamic-func
                "sqlite3_value_subtype"
                (dynamic-link))
              (list '*))))
    (lambda (@505)
      (let ((~@505 (unwrap-sqlite3_value* @505)))
        (~f ~@505)))))
(export sqlite3_value_subtype)

;; sqlite3_value *sqlite3_value_dup(const sqlite3_value *);
(define sqlite3_value_dup
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_value_dup" (dynamic-link))
              (list '*))))
    (lambda (@507)
      (let ((~@507 (unwrap-sqlite3_value* @507)))
        (wrap-sqlite3_value* (~f ~@507))))))
(export sqlite3_value_dup)

;; void sqlite3_value_free(sqlite3_value *);
(define sqlite3_value_free
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_value_free"
                (dynamic-link))
              (list '*))))
    (lambda (@509)
      (let ((~@509 (unwrap-sqlite3_value* @509)))
        (~f ~@509)))))
(export sqlite3_value_free)

;; void *sqlite3_aggregate_context(sqlite3_context *, int nBytes);
(define sqlite3_aggregate_context
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_aggregate_context"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@511 nBytes)
      (let ((~@511 (unwrap-sqlite3_context* @511))
            (~nBytes (unwrap~fixed nBytes)))
        (~f ~@511 ~nBytes)))))
(export sqlite3_aggregate_context)

;; void *sqlite3_user_data(sqlite3_context *);
(define sqlite3_user_data
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_user_data" (dynamic-link))
              (list '*))))
    (lambda (@513)
      (let ((~@513 (unwrap-sqlite3_context* @513)))
        (~f ~@513)))))
(export sqlite3_user_data)

;; sqlite3 *sqlite3_context_db_handle(sqlite3_context *);
(define sqlite3_context_db_handle
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_context_db_handle"
                (dynamic-link))
              (list '*))))
    (lambda (@515)
      (let ((~@515 (unwrap-sqlite3_context* @515)))
        (wrap-sqlite3* (~f ~@515))))))
(export sqlite3_context_db_handle)

;; void *sqlite3_get_auxdata(sqlite3_context *, int N);
(define sqlite3_get_auxdata
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_get_auxdata"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@517 N)
      (let ((~@517 (unwrap-sqlite3_context* @517))
            (~N (unwrap~fixed N)))
        (~f ~@517 ~N)))))
(export sqlite3_get_auxdata)

;; void sqlite3_set_auxdata(sqlite3_context *, int N, void *, void (*)(void *)
;;     );
(define sqlite3_set_auxdata
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_set_auxdata"
                (dynamic-link))
              (list '* ffi:int '* '*))))
    (lambda (@521 N @520 @519)
      (let ((~@521 (unwrap-sqlite3_context* @521))
            (~N (unwrap~fixed N))
            (~@520 (unwrap~pointer @520))
            (~@519 ((make-ftn-arg-unwrapper ffi:void (list '*))
                    @519)))
        (~f ~@521 ~N ~@520 ~@519)))))
(export sqlite3_set_auxdata)

;; typedef void (*sqlite3_destructor_type)(void *);
(define-fh-function/p sqlite3_destructor_type
  ffi:void (list (quote *)))

;; void sqlite3_result_blob(sqlite3_context *, const void *, int, void (*)(
;;     void *));
(define sqlite3_result_blob
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_blob"
                (dynamic-link))
              (list '* '* ffi:int '*))))
    (lambda (@526 @525 arg-2 @524)
      (let ((~@526 (unwrap-sqlite3_context* @526))
            (~@525 (unwrap~pointer @525))
            (~arg-2 (unwrap~fixed arg-2))
            (~@524 ((make-ftn-arg-unwrapper ffi:void (list '*))
                    @524)))
        (~f ~@526 ~@525 ~arg-2 ~@524)))))
(export sqlite3_result_blob)

;; void sqlite3_result_blob64(sqlite3_context *, const void *, sqlite3_uint64
;;     , void (*)(void *));
;; ... failed.

;; void sqlite3_result_double(sqlite3_context *, double);
(define sqlite3_result_double
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_double"
                (dynamic-link))
              (list '* ffi:double))))
    (lambda (@529 arg-1)
      (let ((~@529 (unwrap-sqlite3_context* @529))
            (~arg-1 (unwrap~float arg-1)))
        (~f ~@529 ~arg-1)))))
(export sqlite3_result_double)

;; void sqlite3_result_error(sqlite3_context *, const char *, int);
(define sqlite3_result_error
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_error"
                (dynamic-link))
              (list '* '* ffi:int))))
    (lambda (@532 @531 arg-2)
      (let ((~@532 (unwrap-sqlite3_context* @532))
            (~@531 (unwrap~pointer @531))
            (~arg-2 (unwrap~fixed arg-2)))
        (~f ~@532 ~@531 ~arg-2)))))
(export sqlite3_result_error)

;; void sqlite3_result_error16(sqlite3_context *, const void *, int);
(define sqlite3_result_error16
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_error16"
                (dynamic-link))
              (list '* '* ffi:int))))
    (lambda (@535 @534 arg-2)
      (let ((~@535 (unwrap-sqlite3_context* @535))
            (~@534 (unwrap~pointer @534))
            (~arg-2 (unwrap~fixed arg-2)))
        (~f ~@535 ~@534 ~arg-2)))))
(export sqlite3_result_error16)

;; void sqlite3_result_error_toobig(sqlite3_context *);
(define sqlite3_result_error_toobig
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_error_toobig"
                (dynamic-link))
              (list '*))))
    (lambda (@537)
      (let ((~@537 (unwrap-sqlite3_context* @537)))
        (~f ~@537)))))
(export sqlite3_result_error_toobig)

;; void sqlite3_result_error_nomem(sqlite3_context *);
(define sqlite3_result_error_nomem
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_error_nomem"
                (dynamic-link))
              (list '*))))
    (lambda (@539)
      (let ((~@539 (unwrap-sqlite3_context* @539)))
        (~f ~@539)))))
(export sqlite3_result_error_nomem)

;; void sqlite3_result_error_code(sqlite3_context *, int);
(define sqlite3_result_error_code
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_error_code"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@541 arg-1)
      (let ((~@541 (unwrap-sqlite3_context* @541))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@541 ~arg-1)))))
(export sqlite3_result_error_code)

;; void sqlite3_result_int(sqlite3_context *, int);
(define sqlite3_result_int
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_int"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@543 arg-1)
      (let ((~@543 (unwrap-sqlite3_context* @543))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@543 ~arg-1)))))
(export sqlite3_result_int)

;; void sqlite3_result_int64(sqlite3_context *, sqlite3_int64);
;; ... failed.

;; void sqlite3_result_null(sqlite3_context *);
(define sqlite3_result_null
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_null"
                (dynamic-link))
              (list '*))))
    (lambda (@546)
      (let ((~@546 (unwrap-sqlite3_context* @546)))
        (~f ~@546)))))
(export sqlite3_result_null)

;; void sqlite3_result_text(sqlite3_context *, const char *, int, void (*)(
;;     void *));
(define sqlite3_result_text
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_text"
                (dynamic-link))
              (list '* '* ffi:int '*))))
    (lambda (@550 @549 arg-2 @548)
      (let ((~@550 (unwrap-sqlite3_context* @550))
            (~@549 (unwrap~pointer @549))
            (~arg-2 (unwrap~fixed arg-2))
            (~@548 ((make-ftn-arg-unwrapper ffi:void (list '*))
                    @548)))
        (~f ~@550 ~@549 ~arg-2 ~@548)))))
(export sqlite3_result_text)

;; void sqlite3_result_text64(sqlite3_context *, const char *, sqlite3_uint64
;;     , void (*)(void *), unsigned char encoding);
;; ... failed.

;; void sqlite3_result_text16(sqlite3_context *, const void *, int, void (*)(
;;     void *));
(define sqlite3_result_text16
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_text16"
                (dynamic-link))
              (list '* '* ffi:int '*))))
    (lambda (@555 @554 arg-2 @553)
      (let ((~@555 (unwrap-sqlite3_context* @555))
            (~@554 (unwrap~pointer @554))
            (~arg-2 (unwrap~fixed arg-2))
            (~@553 ((make-ftn-arg-unwrapper ffi:void (list '*))
                    @553)))
        (~f ~@555 ~@554 ~arg-2 ~@553)))))
(export sqlite3_result_text16)

;; void sqlite3_result_text16le(sqlite3_context *, const void *, int, void (*)
;;     (void *));
(define sqlite3_result_text16le
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_text16le"
                (dynamic-link))
              (list '* '* ffi:int '*))))
    (lambda (@559 @558 arg-2 @557)
      (let ((~@559 (unwrap-sqlite3_context* @559))
            (~@558 (unwrap~pointer @558))
            (~arg-2 (unwrap~fixed arg-2))
            (~@557 ((make-ftn-arg-unwrapper ffi:void (list '*))
                    @557)))
        (~f ~@559 ~@558 ~arg-2 ~@557)))))
(export sqlite3_result_text16le)

;; void sqlite3_result_text16be(sqlite3_context *, const void *, int, void (*)
;;     (void *));
(define sqlite3_result_text16be
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_text16be"
                (dynamic-link))
              (list '* '* ffi:int '*))))
    (lambda (@563 @562 arg-2 @561)
      (let ((~@563 (unwrap-sqlite3_context* @563))
            (~@562 (unwrap~pointer @562))
            (~arg-2 (unwrap~fixed arg-2))
            (~@561 ((make-ftn-arg-unwrapper ffi:void (list '*))
                    @561)))
        (~f ~@563 ~@562 ~arg-2 ~@561)))))
(export sqlite3_result_text16be)

;; void sqlite3_result_value(sqlite3_context *, sqlite3_value *);
(define sqlite3_result_value
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_value"
                (dynamic-link))
              (list '* '*))))
    (lambda (@566 @565)
      (let ((~@566 (unwrap-sqlite3_context* @566))
            (~@565 (unwrap-sqlite3_value* @565)))
        (~f ~@566 ~@565)))))
(export sqlite3_result_value)

;; void sqlite3_result_zeroblob(sqlite3_context *, int n);
(define sqlite3_result_zeroblob
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_zeroblob"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@568 n)
      (let ((~@568 (unwrap-sqlite3_context* @568))
            (~n (unwrap~fixed n)))
        (~f ~@568 ~n)))))
(export sqlite3_result_zeroblob)

;; int sqlite3_result_zeroblob64(sqlite3_context *, sqlite3_uint64 n);
;; ... failed.

;; void sqlite3_result_subtype(sqlite3_context *, unsigned int);
(define sqlite3_result_subtype
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_result_subtype"
                (dynamic-link))
              (list '* ffi:unsigned-int))))
    (lambda (@571 arg-1)
      (let ((~@571 (unwrap-sqlite3_context* @571))
            (~arg-1 (unwrap~fixed arg-1)))
        (~f ~@571 ~arg-1)))))
(export sqlite3_result_subtype)

;; int sqlite3_create_collation(sqlite3 *, const char *zName, int eTextRep, 
;;     void *pArg, int (*xCompare)(void *, int, const void *, int, const void 
;;     *));
(define sqlite3_create_collation
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_create_collation"
                (dynamic-link))
              (list '* '* ffi:int '* '*))))
    (lambda (@573 zName eTextRep pArg xCompare)
      (let ((~@573 (unwrap-sqlite3* @573))
            (~zName (unwrap~pointer zName))
            (~eTextRep (unwrap~fixed eTextRep))
            (~pArg (unwrap~pointer pArg))
            (~xCompare
              ((make-ftn-arg-unwrapper
                 ffi:int
                 (list '* ffi:int '* ffi:int '*))
               xCompare)))
        (~f ~@573 ~zName ~eTextRep ~pArg ~xCompare)))))
(export sqlite3_create_collation)

;; int sqlite3_create_collation_v2(sqlite3 *, const char *zName, int eTextRep
;;     , void *pArg, int (*xCompare)(void *, int, const void *, int, const 
;;     void *), void (*xDestroy)(void *));
(define sqlite3_create_collation_v2
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_create_collation_v2"
                (dynamic-link))
              (list '* '* ffi:int '* '* '*))))
    (lambda (@575 zName eTextRep pArg xCompare xDestroy)
      (let ((~@575 (unwrap-sqlite3* @575))
            (~zName (unwrap~pointer zName))
            (~eTextRep (unwrap~fixed eTextRep))
            (~pArg (unwrap~pointer pArg))
            (~xCompare
              ((make-ftn-arg-unwrapper
                 ffi:int
                 (list '* ffi:int '* ffi:int '*))
               xCompare))
            (~xDestroy
              ((make-ftn-arg-unwrapper ffi:void (list '*))
               xDestroy)))
        (~f ~@575
            ~zName
            ~eTextRep
            ~pArg
            ~xCompare
            ~xDestroy)))))
(export sqlite3_create_collation_v2)

;; int sqlite3_create_collation16(sqlite3 *, const void *zName, int eTextRep, 
;;     void *pArg, int (*xCompare)(void *, int, const void *, int, const void 
;;     *));
(define sqlite3_create_collation16
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_create_collation16"
                (dynamic-link))
              (list '* '* ffi:int '* '*))))
    (lambda (@577 zName eTextRep pArg xCompare)
      (let ((~@577 (unwrap-sqlite3* @577))
            (~zName (unwrap~pointer zName))
            (~eTextRep (unwrap~fixed eTextRep))
            (~pArg (unwrap~pointer pArg))
            (~xCompare
              ((make-ftn-arg-unwrapper
                 ffi:int
                 (list '* ffi:int '* ffi:int '*))
               xCompare)))
        (~f ~@577 ~zName ~eTextRep ~pArg ~xCompare)))))
(export sqlite3_create_collation16)

;; int sqlite3_collation_needed(sqlite3 *, void *, void (*)(void *, sqlite3 *
;;     , int eTextRep, const char *));
(define sqlite3_collation_needed
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_collation_needed"
                (dynamic-link))
              (list '* '* '*))))
    (lambda (@581 @580 @579)
      (let ((~@581 (unwrap-sqlite3* @581))
            (~@580 (unwrap~pointer @580))
            (~@579 ((make-ftn-arg-unwrapper
                      ffi:void
                      (list '* '* ffi:int '*))
                    @579)))
        (~f ~@581 ~@580 ~@579)))))
(export sqlite3_collation_needed)

;; int sqlite3_collation_needed16(sqlite3 *, void *, void (*)(void *, sqlite3 
;;     *, int eTextRep, const void *));
(define sqlite3_collation_needed16
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_collation_needed16"
                (dynamic-link))
              (list '* '* '*))))
    (lambda (@585 @584 @583)
      (let ((~@585 (unwrap-sqlite3* @585))
            (~@584 (unwrap~pointer @584))
            (~@583 ((make-ftn-arg-unwrapper
                      ffi:void
                      (list '* '* ffi:int '*))
                    @583)))
        (~f ~@585 ~@584 ~@583)))))
(export sqlite3_collation_needed16)

;; int sqlite3_sleep(int);
(define sqlite3_sleep
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_sleep" (dynamic-link))
              (list ffi:int))))
    (lambda (arg-0)
      (let ((~arg-0 (unwrap~fixed arg-0))) (~f ~arg-0)))))
(export sqlite3_sleep)

;; extern char *sqlite3_temp_directory;
(define sqlite3_temp_directory (dynamic-pointer "sqlite3_temp_directory" (dynamic-link)))

;; extern char *sqlite3_data_directory;
(define sqlite3_data_directory (dynamic-pointer "sqlite3_data_directory" (dynamic-link)))

;; int sqlite3_get_autocommit(sqlite3 *);
(define sqlite3_get_autocommit
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_get_autocommit"
                (dynamic-link))
              (list '*))))
    (lambda (@590)
      (let ((~@590 (unwrap-sqlite3* @590))) (~f ~@590)))))
(export sqlite3_get_autocommit)

;; sqlite3 *sqlite3_db_handle(sqlite3_stmt *);
(define sqlite3_db_handle
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_db_handle" (dynamic-link))
              (list '*))))
    (lambda (@592)
      (let ((~@592 (unwrap-sqlite3_stmt* @592)))
        (wrap-sqlite3* (~f ~@592))))))
(export sqlite3_db_handle)

;; const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName);
(define sqlite3_db_filename
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_db_filename"
                (dynamic-link))
              (list '* '*))))
    (lambda (db zDbName)
      (let ((~db (unwrap-sqlite3* db))
            (~zDbName (unwrap~pointer zDbName)))
        (~f ~db ~zDbName)))))
(export sqlite3_db_filename)

;; int sqlite3_db_readonly(sqlite3 *db, const char *zDbName);
(define sqlite3_db_readonly
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_db_readonly"
                (dynamic-link))
              (list '* '*))))
    (lambda (db zDbName)
      (let ((~db (unwrap-sqlite3* db))
            (~zDbName (unwrap~pointer zDbName)))
        (~f ~db ~zDbName)))))
(export sqlite3_db_readonly)

;; sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt);
(define sqlite3_next_stmt
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_next_stmt" (dynamic-link))
              (list '* '*))))
    (lambda (pDb pStmt)
      (let ((~pDb (unwrap-sqlite3* pDb))
            (~pStmt (unwrap-sqlite3_stmt* pStmt)))
        (wrap-sqlite3_stmt* (~f ~pDb ~pStmt))))))
(export sqlite3_next_stmt)

;; void *sqlite3_commit_hook(sqlite3 *, int (*)(void *), void *);
(define sqlite3_commit_hook
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_commit_hook"
                (dynamic-link))
              (list '* '* '*))))
    (lambda (@599 @598 @597)
      (let ((~@599 (unwrap-sqlite3* @599))
            (~@598 ((make-ftn-arg-unwrapper ffi:int (list '*)) @598))
            (~@597 (unwrap~pointer @597)))
        (~f ~@599 ~@598 ~@597)))))
(export sqlite3_commit_hook)

;; void *sqlite3_rollback_hook(sqlite3 *, void (*)(void *), void *);
(define sqlite3_rollback_hook
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_rollback_hook"
                (dynamic-link))
              (list '* '* '*))))
    (lambda (@603 @602 @601)
      (let ((~@603 (unwrap-sqlite3* @603))
            (~@602 ((make-ftn-arg-unwrapper ffi:void (list '*))
                    @602))
            (~@601 (unwrap~pointer @601)))
        (~f ~@603 ~@602 ~@601)))))
(export sqlite3_rollback_hook)

;; void *sqlite3_update_hook(sqlite3 *, void (*)(void *, int, char const *, 
;;     char const *, sqlite3_int64), void *);
;; ... failed.

;; int sqlite3_enable_shared_cache(int);
(define sqlite3_enable_shared_cache
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_enable_shared_cache"
                (dynamic-link))
              (list ffi:int))))
    (lambda (arg-0)
      (let ((~arg-0 (unwrap~fixed arg-0))) (~f ~arg-0)))))
(export sqlite3_enable_shared_cache)

;; int sqlite3_release_memory(int);
(define sqlite3_release_memory
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_release_memory"
                (dynamic-link))
              (list ffi:int))))
    (lambda (arg-0)
      (let ((~arg-0 (unwrap~fixed arg-0))) (~f ~arg-0)))))
(export sqlite3_release_memory)

;; int sqlite3_db_release_memory(sqlite3 *);
(define sqlite3_db_release_memory
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_db_release_memory"
                (dynamic-link))
              (list '*))))
    (lambda (@610)
      (let ((~@610 (unwrap-sqlite3* @610))) (~f ~@610)))))
(export sqlite3_db_release_memory)

;; sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);
;; ... failed.

;; void sqlite3_soft_heap_limit(int N);
(define sqlite3_soft_heap_limit
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_soft_heap_limit"
                (dynamic-link))
              (list ffi:int))))
    (lambda (N)
      (let ((~N (unwrap~fixed N))) (~f ~N)))))
(export sqlite3_soft_heap_limit)

;; int sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const 
;;     char *zTableName, const char *zColumnName, char const **pzDataType, 
;;     char const **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)
;;     ;
(define sqlite3_table_column_metadata
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_table_column_metadata"
                (dynamic-link))
              (list '* '* '* '* '* '* '* '* '*))))
    (lambda (db
             zDbName
             zTableName
             zColumnName
             pzDataType
             pzCollSeq
             pNotNull
             pPrimaryKey
             pAutoinc)
      (let ((~db (unwrap-sqlite3* db))
            (~zDbName (unwrap~pointer zDbName))
            (~zTableName (unwrap~pointer zTableName))
            (~zColumnName (unwrap~pointer zColumnName))
            (~pzDataType (unwrap~pointer pzDataType))
            (~pzCollSeq (unwrap~pointer pzCollSeq))
            (~pNotNull (unwrap~pointer pNotNull))
            (~pPrimaryKey (unwrap~pointer pPrimaryKey))
            (~pAutoinc (unwrap~pointer pAutoinc)))
        (~f ~db
            ~zDbName
            ~zTableName
            ~zColumnName
            ~pzDataType
            ~pzCollSeq
            ~pNotNull
            ~pPrimaryKey
            ~pAutoinc)))))
(export sqlite3_table_column_metadata)

;; int sqlite3_load_extension(sqlite3 *db, const char *zFile, const char *
;;     zProc, char **pzErrMsg);
(define sqlite3_load_extension
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_load_extension"
                (dynamic-link))
              (list '* '* '* '*))))
    (lambda (db zFile zProc pzErrMsg)
      (let ((~db (unwrap-sqlite3* db))
            (~zFile (unwrap~pointer zFile))
            (~zProc (unwrap~pointer zProc))
            (~pzErrMsg (unwrap~pointer pzErrMsg)))
        (~f ~db ~zFile ~zProc ~pzErrMsg)))))
(export sqlite3_load_extension)

;; int sqlite3_enable_load_extension(sqlite3 *db, int onoff);
(define sqlite3_enable_load_extension
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_enable_load_extension"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (db onoff)
      (let ((~db (unwrap-sqlite3* db))
            (~onoff (unwrap~fixed onoff)))
        (~f ~db ~onoff)))))
(export sqlite3_enable_load_extension)

;; int sqlite3_auto_extension(void (*xEntryPoint)(void));
(define sqlite3_auto_extension
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_auto_extension"
                (dynamic-link))
              (list '*))))
    (lambda (xEntryPoint)
      (let ((~xEntryPoint
              ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
               xEntryPoint)))
        (~f ~xEntryPoint)))))
(export sqlite3_auto_extension)

;; int sqlite3_cancel_auto_extension(void (*xEntryPoint)(void));
(define sqlite3_cancel_auto_extension
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_cancel_auto_extension"
                (dynamic-link))
              (list '*))))
    (lambda (xEntryPoint)
      (let ((~xEntryPoint
              ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
               xEntryPoint)))
        (~f ~xEntryPoint)))))
(export sqlite3_cancel_auto_extension)

;; void sqlite3_reset_auto_extension(void);
(define sqlite3_reset_auto_extension
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_reset_auto_extension"
                (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export sqlite3_reset_auto_extension)

;; typedef struct sqlite3_vtab sqlite3_vtab;
;; struct sqlite3_vtab {
;;   const sqlite3_module *pModule; /* The module for this virtual table */
;;   int nRef; /* Number of open cursors */
;;   char *zErrMsg; /* Error message from sqlite3_mprintf() */
;;   /* Virtual table implementations will typically add additional fields */
;; };
(define sqlite3_vtab-desc
  (bs:struct
    (list `(pModule ,(bs:pointer "sqlite3_module"))
          `(nRef ,int)
          `(zErrMsg ,(bs:pointer int)))))
(export sqlite3_vtab-desc)
(define-fh-compound-type/p sqlite3_vtab sqlite3_vtab-desc)
(define struct-sqlite3_vtab sqlite3_vtab)

;; typedef struct sqlite3_index_info sqlite3_index_info;
;; struct sqlite3_index_info {
;;   /* Inputs */
;;   int nConstraint; /* Number of entries in aConstraint */
;;   struct sqlite3_index_constraint {
;;     int iColumn; /* Column constrained.  -1 for ROWID */
;;     unsigned char op; /* Constraint operator */
;;     unsigned char usable; /* True if this constraint is usable */
;;     int iTermOffset; /* Used internally - xBestIndex should ignore */
;;   } *aConstraint; /* Table of WHERE clause constraints */
;;   int nOrderBy; /* Number of terms in the ORDER BY clause */
;;   struct sqlite3_index_orderby {
;;     int iColumn; /* Column number */
;;     unsigned char desc; /* True for DESC.  False for ASC. */
;;   } *aOrderBy; /* The ORDER BY clause */
;;   /* Outputs */
;;   struct sqlite3_index_constraint_usage {
;;     int argvIndex; /* if >0, constraint is part of argv to xFilter */
;;     unsigned char omit; /* Do not code a test for this constraint */
;;   } *aConstraintUsage;
;;   int idxNum; /* Number used to identify the index */
;;   char *idxStr; /* String, possibly obtained from sqlite3_malloc */
;;   int needToFreeIdxStr; /* Free idxStr using sqlite3_free() if true */
;;   int orderByConsumed; /* True if output is already ordered */
;;   double estimatedCost; /* Estimated cost of using this index */
;;   /* Fields below are only available in SQLite 3.8.2 and later */
;;   sqlite3_int64 estimatedRows; /* Estimated number of rows returned */
;;   /* Fields below are only available in SQLite 3.9.0 and later */
;;   int idxFlags; /* Mask of SQLITE_INDEX_SCAN_* flags */
;;   /* Fields below are only available in SQLite 3.10.0 and later */
;;   sqlite3_uint64 colUsed; /* Input: Mask of columns used by statement */
;; };
(define sqlite3_index_info-desc
  (bs:struct
    (list `(nConstraint ,int)
          `(aConstraint
             ,(bs:pointer
                (bs:struct
                  (list `(iColumn ,int)
                        `(op ,#f)
                        `(usable ,#f)
                        `(iTermOffset ,int)))))
          `(nOrderBy ,int)
          `(aOrderBy
             ,(bs:pointer
                (bs:struct (list `(iColumn ,int) `(desc ,#f)))))
          `(aConstraintUsage
             ,(bs:pointer
                (bs:struct (list `(argvIndex ,int) `(omit ,#f)))))
          `(idxNum ,int)
          `(idxStr ,(bs:pointer int))
          `(needToFreeIdxStr ,int)
          `(orderByConsumed ,int)
          `(estimatedCost ,double)
          `(estimatedRows ,sqlite3_int64-desc)
          `(idxFlags ,int)
          `(colUsed ,sqlite3_uint64-desc))))
(export sqlite3_index_info-desc)
(define-fh-compound-type/p sqlite3_index_info sqlite3_index_info-desc)
(define struct-sqlite3_index_info sqlite3_index_info)

;; typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;
;; struct sqlite3_vtab_cursor {
;;   sqlite3_vtab *pVtab; /* Virtual table of this cursor */
;;   /* Virtual table implementations will typically add additional fields */
;; };
(define sqlite3_vtab_cursor-desc
  (bs:struct
    (list `(pVtab ,(bs:pointer "sqlite3_vtab")))))
(export sqlite3_vtab_cursor-desc)
(define-fh-compound-type/p sqlite3_vtab_cursor sqlite3_vtab_cursor-desc)
(define struct-sqlite3_vtab_cursor sqlite3_vtab_cursor)

;; typedef struct sqlite3_module sqlite3_module;
;; struct sqlite3_module {
;;   int iVersion;
;;   int (*xCreate)(sqlite3 *, void *pAux, int argc, const char *const*argv, 
;;       sqlite3_vtab **ppVTab, char **);
;;   int (*xConnect)(sqlite3 *, void *pAux, int argc, const char *const*argv, 
;;       sqlite3_vtab **ppVTab, char **);
;;   int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info *);
;;   int (*xDisconnect)(sqlite3_vtab *pVTab);
;;   int (*xDestroy)(sqlite3_vtab *pVTab);
;;   int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);
;;   int (*xClose)(sqlite3_vtab_cursor *);
;;   int (*xFilter)(sqlite3_vtab_cursor *, int idxNum, const char *idxStr, int
;;        argc, sqlite3_value **argv);
;;   int (*xNext)(sqlite3_vtab_cursor *);
;;   int (*xEof)(sqlite3_vtab_cursor *);
;;   int (*xColumn)(sqlite3_vtab_cursor *, sqlite3_context *, int);
;;   int (*xRowid)(sqlite3_vtab_cursor *, sqlite3_int64 *pRowid);
;;   int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);
;;   int (*xBegin)(sqlite3_vtab *pVTab);
;;   int (*xSync)(sqlite3_vtab *pVTab);
;;   int (*xCommit)(sqlite3_vtab *pVTab);
;;   int (*xRollback)(sqlite3_vtab *pVTab);
;;   int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName, 
;;       void (**pxFunc)(sqlite3_context *, int, sqlite3_value **), void **
;;       ppArg);
;;   int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);
;;   /* The methods above are in version 1 of the sqlite_module object. Those 
;;       
;;     ** below are for version 2 and greater. */
;;   int (*xSavepoint)(sqlite3_vtab *pVTab, int);
;;   int (*xRelease)(sqlite3_vtab *pVTab, int);
;;   int (*xRollbackTo)(sqlite3_vtab *pVTab, int);
;; };
(define sqlite3_module-desc
  (bs:struct
    (list `(iVersion ,int)
          `(xCreate ,(bs:pointer intptr_t))
          `(xConnect ,(bs:pointer intptr_t))
          `(xBestIndex ,(bs:pointer intptr_t))
          `(xDisconnect ,(bs:pointer intptr_t))
          `(xDestroy ,(bs:pointer intptr_t))
          `(xOpen ,(bs:pointer intptr_t))
          `(xClose ,(bs:pointer intptr_t))
          `(xFilter ,(bs:pointer intptr_t))
          `(xNext ,(bs:pointer intptr_t))
          `(xEof ,(bs:pointer intptr_t))
          `(xColumn ,(bs:pointer intptr_t))
          `(xRowid ,(bs:pointer intptr_t))
          `(xUpdate ,(bs:pointer intptr_t))
          `(xBegin ,(bs:pointer intptr_t))
          `(xSync ,(bs:pointer intptr_t))
          `(xCommit ,(bs:pointer intptr_t))
          `(xRollback ,(bs:pointer intptr_t))
          `(xFindFunction ,(bs:pointer intptr_t))
          `(xRename ,(bs:pointer intptr_t))
          `(xSavepoint ,(bs:pointer intptr_t))
          `(xRelease ,(bs:pointer intptr_t))
          `(xRollbackTo ,(bs:pointer intptr_t)))))
(export sqlite3_module-desc)
(define-fh-compound-type/p sqlite3_module sqlite3_module-desc)
(define struct-sqlite3_module sqlite3_module)

;; int sqlite3_create_module(sqlite3 *db, const char *zName, const 
;;     sqlite3_module *p, void *pClientData);
(define sqlite3_create_module
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_create_module"
                (dynamic-link))
              (list '* '* '* '*))))
    (lambda (db zName p pClientData)
      (let ((~db (unwrap-sqlite3* db))
            (~zName (unwrap~pointer zName))
            (~p (unwrap-sqlite3_module* p))
            (~pClientData (unwrap~pointer pClientData)))
        (~f ~db ~zName ~p ~pClientData)))))
(export sqlite3_create_module)

;; int sqlite3_create_module_v2(sqlite3 *db, const char *zName, const 
;;     sqlite3_module *p, void *pClientData, void (*xDestroy)(void *));
(define sqlite3_create_module_v2
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_create_module_v2"
                (dynamic-link))
              (list '* '* '* '* '*))))
    (lambda (db zName p pClientData xDestroy)
      (let ((~db (unwrap-sqlite3* db))
            (~zName (unwrap~pointer zName))
            (~p (unwrap-sqlite3_module* p))
            (~pClientData (unwrap~pointer pClientData))
            (~xDestroy
              ((make-ftn-arg-unwrapper ffi:void (list '*))
               xDestroy)))
        (~f ~db ~zName ~p ~pClientData ~xDestroy)))))
(export sqlite3_create_module_v2)

;; int sqlite3_declare_vtab(sqlite3 *, const char *zSQL);
(define sqlite3_declare_vtab
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_declare_vtab"
                (dynamic-link))
              (list '* '*))))
    (lambda (@630 zSQL)
      (let ((~@630 (unwrap-sqlite3* @630))
            (~zSQL (unwrap~pointer zSQL)))
        (~f ~@630 ~zSQL)))))
(export sqlite3_declare_vtab)

;; int sqlite3_overload_function(sqlite3 *, const char *zFuncName, int nArg);
(define sqlite3_overload_function
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_overload_function"
                (dynamic-link))
              (list '* '* ffi:int))))
    (lambda (@632 zFuncName nArg)
      (let ((~@632 (unwrap-sqlite3* @632))
            (~zFuncName (unwrap~pointer zFuncName))
            (~nArg (unwrap~fixed nArg)))
        (~f ~@632 ~zFuncName ~nArg)))))
(export sqlite3_overload_function)

;; typedef struct sqlite3_blob sqlite3_blob;
(define-fh-pointer-type sqlite3_blob*)

;; int sqlite3_blob_open(sqlite3 *, const char *zDb, const char *zTable, const
;;      char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob);
;; ... failed.

;; int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64);
;; ... failed.

;; int sqlite3_blob_close(sqlite3_blob *);
(define sqlite3_blob_close
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_blob_close"
                (dynamic-link))
              (list '*))))
    (lambda (@637)
      (let ((~@637 (unwrap-sqlite3_blob* @637)))
        (~f ~@637)))))
(export sqlite3_blob_close)

;; int sqlite3_blob_bytes(sqlite3_blob *);
(define sqlite3_blob_bytes
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_blob_bytes"
                (dynamic-link))
              (list '*))))
    (lambda (@639)
      (let ((~@639 (unwrap-sqlite3_blob* @639)))
        (~f ~@639)))))
(export sqlite3_blob_bytes)

;; int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
(define sqlite3_blob_read
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_blob_read" (dynamic-link))
              (list '* '* ffi:int ffi:int))))
    (lambda (@641 Z N iOffset)
      (let ((~@641 (unwrap-sqlite3_blob* @641))
            (~Z (unwrap~pointer Z))
            (~N (unwrap~fixed N))
            (~iOffset (unwrap~fixed iOffset)))
        (~f ~@641 ~Z ~N ~iOffset)))))
(export sqlite3_blob_read)

;; int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset);
(define sqlite3_blob_write
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_blob_write"
                (dynamic-link))
              (list '* '* ffi:int ffi:int))))
    (lambda (@643 z n iOffset)
      (let ((~@643 (unwrap-sqlite3_blob* @643))
            (~z (unwrap~pointer z))
            (~n (unwrap~fixed n))
            (~iOffset (unwrap~fixed iOffset)))
        (~f ~@643 ~z ~n ~iOffset)))))
(export sqlite3_blob_write)

;; sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);
(define sqlite3_vfs_find
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_vfs_find" (dynamic-link))
              (list '*))))
    (lambda (zVfsName)
      (let ((~zVfsName (unwrap~pointer zVfsName)))
        (wrap-sqlite3_vfs* (~f ~zVfsName))))))
(export sqlite3_vfs_find)

;; int sqlite3_vfs_register(sqlite3_vfs *, int makeDflt);
(define sqlite3_vfs_register
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_vfs_register"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (@646 makeDflt)
      (let ((~@646 (unwrap-sqlite3_vfs* @646))
            (~makeDflt (unwrap~fixed makeDflt)))
        (~f ~@646 ~makeDflt)))))
(export sqlite3_vfs_register)

;; int sqlite3_vfs_unregister(sqlite3_vfs *);
(define sqlite3_vfs_unregister
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_vfs_unregister"
                (dynamic-link))
              (list '*))))
    (lambda (@648)
      (let ((~@648 (unwrap-sqlite3_vfs* @648)))
        (~f ~@648)))))
(export sqlite3_vfs_unregister)

;; sqlite3_mutex *sqlite3_mutex_alloc(int);
(define sqlite3_mutex_alloc
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_mutex_alloc"
                (dynamic-link))
              (list ffi:int))))
    (lambda (arg-0)
      (let ((~arg-0 (unwrap~fixed arg-0)))
        (wrap-sqlite3_mutex* (~f ~arg-0))))))
(export sqlite3_mutex_alloc)

;; void sqlite3_mutex_free(sqlite3_mutex *);
(define sqlite3_mutex_free
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_mutex_free"
                (dynamic-link))
              (list '*))))
    (lambda (@651)
      (let ((~@651 (unwrap-sqlite3_mutex* @651)))
        (~f ~@651)))))
(export sqlite3_mutex_free)

;; void sqlite3_mutex_enter(sqlite3_mutex *);
(define sqlite3_mutex_enter
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_mutex_enter"
                (dynamic-link))
              (list '*))))
    (lambda (@653)
      (let ((~@653 (unwrap-sqlite3_mutex* @653)))
        (~f ~@653)))))
(export sqlite3_mutex_enter)

;; int sqlite3_mutex_try(sqlite3_mutex *);
(define sqlite3_mutex_try
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_mutex_try" (dynamic-link))
              (list '*))))
    (lambda (@655)
      (let ((~@655 (unwrap-sqlite3_mutex* @655)))
        (~f ~@655)))))
(export sqlite3_mutex_try)

;; void sqlite3_mutex_leave(sqlite3_mutex *);
(define sqlite3_mutex_leave
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_mutex_leave"
                (dynamic-link))
              (list '*))))
    (lambda (@657)
      (let ((~@657 (unwrap-sqlite3_mutex* @657)))
        (~f ~@657)))))
(export sqlite3_mutex_leave)

;; typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;
;; struct sqlite3_mutex_methods {
;;   int (*xMutexInit)(void);
;;   int (*xMutexEnd)(void);
;;   sqlite3_mutex *(*xMutexAlloc)(int);
;;   void (*xMutexFree)(sqlite3_mutex *);
;;   void (*xMutexEnter)(sqlite3_mutex *);
;;   int (*xMutexTry)(sqlite3_mutex *);
;;   void (*xMutexLeave)(sqlite3_mutex *);
;;   int (*xMutexHeld)(sqlite3_mutex *);
;;   int (*xMutexNotheld)(sqlite3_mutex *);
;; };
(define sqlite3_mutex_methods-desc
  (bs:struct
    (list `(xMutexInit ,(bs:pointer intptr_t))
          `(xMutexEnd ,(bs:pointer intptr_t))
          `(xMutexAlloc ,(bs:pointer intptr_t))
          `(xMutexFree ,(bs:pointer intptr_t))
          `(xMutexEnter ,(bs:pointer intptr_t))
          `(xMutexTry ,(bs:pointer intptr_t))
          `(xMutexLeave ,(bs:pointer intptr_t))
          `(xMutexHeld ,(bs:pointer intptr_t))
          `(xMutexNotheld ,(bs:pointer intptr_t)))))
(export sqlite3_mutex_methods-desc)
(define-fh-compound-type/p sqlite3_mutex_methods sqlite3_mutex_methods-desc)
(define struct-sqlite3_mutex_methods sqlite3_mutex_methods)

;; int sqlite3_mutex_held(sqlite3_mutex *);
(define sqlite3_mutex_held
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_mutex_held"
                (dynamic-link))
              (list '*))))
    (lambda (@661)
      (let ((~@661 (unwrap-sqlite3_mutex* @661)))
        (~f ~@661)))))
(export sqlite3_mutex_held)

;; int sqlite3_mutex_notheld(sqlite3_mutex *);
(define sqlite3_mutex_notheld
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_mutex_notheld"
                (dynamic-link))
              (list '*))))
    (lambda (@663)
      (let ((~@663 (unwrap-sqlite3_mutex* @663)))
        (~f ~@663)))))
(export sqlite3_mutex_notheld)

;; sqlite3_mutex *sqlite3_db_mutex(sqlite3 *);
(define sqlite3_db_mutex
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_db_mutex" (dynamic-link))
              (list '*))))
    (lambda (@665)
      (let ((~@665 (unwrap-sqlite3* @665)))
        (wrap-sqlite3_mutex* (~f ~@665))))))
(export sqlite3_db_mutex)

;; int sqlite3_file_control(sqlite3 *, const char *zDbName, int op, void *);
(define sqlite3_file_control
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_file_control"
                (dynamic-link))
              (list '* '* ffi:int '*))))
    (lambda (@668 zDbName op @667)
      (let ((~@668 (unwrap-sqlite3* @668))
            (~zDbName (unwrap~pointer zDbName))
            (~op (unwrap~fixed op))
            (~@667 (unwrap~pointer @667)))
        (~f ~@668 ~zDbName ~op ~@667)))))
(export sqlite3_file_control)

;; int sqlite3_test_control(int op, ...);
;; ... failed.

;; int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag);
(define sqlite3_status
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_status" (dynamic-link))
              (list ffi:int '* '* ffi:int))))
    (lambda (op pCurrent pHighwater resetFlag)
      (let ((~op (unwrap~fixed op))
            (~pCurrent (unwrap~pointer pCurrent))
            (~pHighwater (unwrap~pointer pHighwater))
            (~resetFlag (unwrap~fixed resetFlag)))
        (~f ~op ~pCurrent ~pHighwater ~resetFlag)))))
(export sqlite3_status)

;; int sqlite3_status64(int op, sqlite3_int64 *pCurrent, sqlite3_int64 *
;;     pHighwater, int resetFlag);
(define sqlite3_status64
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_status64" (dynamic-link))
              (list ffi:int '* '* ffi:int))))
    (lambda (op pCurrent pHighwater resetFlag)
      (let ((~op (unwrap~fixed op))
            (~resetFlag (unwrap~fixed resetFlag)))
        (~f ~op pCurrent pHighwater ~resetFlag)))))
(export sqlite3_status64)

;; int sqlite3_db_status(sqlite3 *, int op, int *pCur, int *pHiwtr, int 
;;     resetFlg);
(define sqlite3_db_status
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_db_status" (dynamic-link))
              (list '* ffi:int '* '* ffi:int))))
    (lambda (@673 op pCur pHiwtr resetFlg)
      (let ((~@673 (unwrap-sqlite3* @673))
            (~op (unwrap~fixed op))
            (~pCur (unwrap~pointer pCur))
            (~pHiwtr (unwrap~pointer pHiwtr))
            (~resetFlg (unwrap~fixed resetFlg)))
        (~f ~@673 ~op ~pCur ~pHiwtr ~resetFlg)))))
(export sqlite3_db_status)

;; int sqlite3_stmt_status(sqlite3_stmt *, int op, int resetFlg);
(define sqlite3_stmt_status
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_stmt_status"
                (dynamic-link))
              (list '* ffi:int ffi:int))))
    (lambda (@675 op resetFlg)
      (let ((~@675 (unwrap-sqlite3_stmt* @675))
            (~op (unwrap~fixed op))
            (~resetFlg (unwrap~fixed resetFlg)))
        (~f ~@675 ~op ~resetFlg)))))
(export sqlite3_stmt_status)

;; typedef struct sqlite3_pcache sqlite3_pcache;
(define-fh-pointer-type sqlite3_pcache*)

;; typedef struct sqlite3_pcache_page sqlite3_pcache_page;
;; struct sqlite3_pcache_page {
;;   void *pBuf; /* The content of the page */
;;   void *pExtra; /* Extra information associated with the page */
;; };
(define sqlite3_pcache_page-desc
  (bs:struct
    (list `(pBuf ,(bs:pointer intptr_t))
          `(pExtra ,(bs:pointer intptr_t)))))
(export sqlite3_pcache_page-desc)
(define-fh-compound-type/p sqlite3_pcache_page sqlite3_pcache_page-desc)
(define struct-sqlite3_pcache_page sqlite3_pcache_page)

;; typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;
;; struct sqlite3_pcache_methods2 {
;;   int iVersion;
;;   void *pArg;
;;   int (*xInit)(void *);
;;   void (*xShutdown)(void *);
;;   sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);
;;   void (*xCachesize)(sqlite3_pcache *, int nCachesize);
;;   int (*xPagecount)(sqlite3_pcache *);
;;   sqlite3_pcache_page *(*xFetch)(sqlite3_pcache *, unsigned key, int 
;;       createFlag);
;;   void (*xUnpin)(sqlite3_pcache *, sqlite3_pcache_page *, int discard);
;;   void (*xRekey)(sqlite3_pcache *, sqlite3_pcache_page *, unsigned oldKey, 
;;       unsigned newKey);
;;   void (*xTruncate)(sqlite3_pcache *, unsigned iLimit);
;;   void (*xDestroy)(sqlite3_pcache *);
;;   void (*xShrink)(sqlite3_pcache *);
;; };
(define sqlite3_pcache_methods2-desc
  (bs:struct
    (list `(iVersion ,int)
          `(pArg ,(bs:pointer intptr_t))
          `(xInit ,(bs:pointer intptr_t))
          `(xShutdown ,(bs:pointer intptr_t))
          `(xCreate ,(bs:pointer intptr_t))
          `(xCachesize ,(bs:pointer intptr_t))
          `(xPagecount ,(bs:pointer intptr_t))
          `(xFetch ,(bs:pointer intptr_t))
          `(xUnpin ,(bs:pointer intptr_t))
          `(xRekey ,(bs:pointer intptr_t))
          `(xTruncate ,(bs:pointer intptr_t))
          `(xDestroy ,(bs:pointer intptr_t))
          `(xShrink ,(bs:pointer intptr_t)))))
(export sqlite3_pcache_methods2-desc)
(define-fh-compound-type/p sqlite3_pcache_methods2 sqlite3_pcache_methods2-desc)
(define struct-sqlite3_pcache_methods2 sqlite3_pcache_methods2)

;; typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;
;; struct sqlite3_pcache_methods {
;;   void *pArg;
;;   int (*xInit)(void *);
;;   void (*xShutdown)(void *);
;;   sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);
;;   void (*xCachesize)(sqlite3_pcache *, int nCachesize);
;;   int (*xPagecount)(sqlite3_pcache *);
;;   void *(*xFetch)(sqlite3_pcache *, unsigned key, int createFlag);
;;   void (*xUnpin)(sqlite3_pcache *, void *, int discard);
;;   void (*xRekey)(sqlite3_pcache *, void *, unsigned oldKey, unsigned newKey
;;       );
;;   void (*xTruncate)(sqlite3_pcache *, unsigned iLimit);
;;   void (*xDestroy)(sqlite3_pcache *);
;; };
(define sqlite3_pcache_methods-desc
  (bs:struct
    (list `(pArg ,(bs:pointer intptr_t))
          `(xInit ,(bs:pointer intptr_t))
          `(xShutdown ,(bs:pointer intptr_t))
          `(xCreate ,(bs:pointer intptr_t))
          `(xCachesize ,(bs:pointer intptr_t))
          `(xPagecount ,(bs:pointer intptr_t))
          `(xFetch ,(bs:pointer intptr_t))
          `(xUnpin ,(bs:pointer intptr_t))
          `(xRekey ,(bs:pointer intptr_t))
          `(xTruncate ,(bs:pointer intptr_t))
          `(xDestroy ,(bs:pointer intptr_t)))))
(export sqlite3_pcache_methods-desc)
(define-fh-compound-type/p sqlite3_pcache_methods sqlite3_pcache_methods-desc)
(define struct-sqlite3_pcache_methods sqlite3_pcache_methods)

;; typedef struct sqlite3_backup sqlite3_backup;
(define-fh-pointer-type sqlite3_backup*)

;; sqlite3_backup *sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, 
;;     sqlite3 *pSource, const char *zSourceName);
(define sqlite3_backup_init
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "sqlite3_backup_init"
                (dynamic-link))
              (list '* '* '* '*))))
    (lambda (pDest zDestName pSource zSourceName)
      (let ((~pDest (unwrap-sqlite3* pDest))
            (~zDestName (unwrap~pointer zDestName))
            (~pSource (unwrap-sqlite3* pSource))
            (~zSourceName (unwrap~pointer zSourceName)))
        (wrap-sqlite3_backup*
          (~f ~pDest ~zDestName ~pSource ~zSourceName))))))
(export sqlite3_backup_init)

;; int sqlite3_backup_step(sqlite3_backup *p, int nPage);
(define sqlite3_backup_step
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_backup_step"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (p nPage)
      (let ((~p (unwrap-sqlite3_backup* p))
            (~nPage (unwrap~fixed nPage)))
        (~f ~p ~nPage)))))
(export sqlite3_backup_step)

;; int sqlite3_backup_finish(sqlite3_backup *p);
(define sqlite3_backup_finish
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_backup_finish"
                (dynamic-link))
              (list '*))))
    (lambda (p)
      (let ((~p (unwrap-sqlite3_backup* p))) (~f ~p)))))
(export sqlite3_backup_finish)

;; int sqlite3_backup_remaining(sqlite3_backup *p);
(define sqlite3_backup_remaining
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_backup_remaining"
                (dynamic-link))
              (list '*))))
    (lambda (p)
      (let ((~p (unwrap-sqlite3_backup* p))) (~f ~p)))))
(export sqlite3_backup_remaining)

;; int sqlite3_backup_pagecount(sqlite3_backup *p);
(define sqlite3_backup_pagecount
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_backup_pagecount"
                (dynamic-link))
              (list '*))))
    (lambda (p)
      (let ((~p (unwrap-sqlite3_backup* p))) (~f ~p)))))
(export sqlite3_backup_pagecount)

;; int sqlite3_unlock_notify(sqlite3 *pBlocked, void (*xNotify)(void **apArg, 
;;     int nArg), void *pNotifyArg);
(define sqlite3_unlock_notify
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_unlock_notify"
                (dynamic-link))
              (list '* '* '*))))
    (lambda (pBlocked xNotify pNotifyArg)
      (let ((~pBlocked (unwrap-sqlite3* pBlocked))
            (~xNotify
              ((make-ftn-arg-unwrapper
                 ffi:void
                 (list '* ffi:int))
               xNotify))
            (~pNotifyArg (unwrap~pointer pNotifyArg)))
        (~f ~pBlocked ~xNotify ~pNotifyArg)))))
(export sqlite3_unlock_notify)

;; int sqlite3_stricmp(const char *, const char *);
(define sqlite3_stricmp
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_stricmp" (dynamic-link))
              (list '* '*))))
    (lambda (@692 @691)
      (let ((~@692 (unwrap~pointer @692))
            (~@691 (unwrap~pointer @691)))
        (~f ~@692 ~@691)))))
(export sqlite3_stricmp)

;; int sqlite3_strnicmp(const char *, const char *, int);
(define sqlite3_strnicmp
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_strnicmp" (dynamic-link))
              (list '* '* ffi:int))))
    (lambda (@695 @694 arg-2)
      (let ((~@695 (unwrap~pointer @695))
            (~@694 (unwrap~pointer @694))
            (~arg-2 (unwrap~fixed arg-2)))
        (~f ~@695 ~@694 ~arg-2)))))
(export sqlite3_strnicmp)

;; int sqlite3_strglob(const char *zGlob, const char *zStr);
(define sqlite3_strglob
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_strglob" (dynamic-link))
              (list '* '*))))
    (lambda (zGlob zStr)
      (let ((~zGlob (unwrap~pointer zGlob))
            (~zStr (unwrap~pointer zStr)))
        (~f ~zGlob ~zStr)))))
(export sqlite3_strglob)

;; int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc)
;;     ;
(define sqlite3_strlike
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func "sqlite3_strlike" (dynamic-link))
              (list '* '* ffi:unsigned-int))))
    (lambda (zGlob zStr cEsc)
      (let ((~zGlob (unwrap~pointer zGlob))
            (~zStr (unwrap~pointer zStr))
            (~cEsc (unwrap~fixed cEsc)))
        (~f ~zGlob ~zStr ~cEsc)))))
(export sqlite3_strlike)

;; void sqlite3_log(int iErrCode, const char *zFormat, ...);
;; ... failed.

;; void *sqlite3_wal_hook(sqlite3 *, int (*)(void *, sqlite3 *, const char *, 
;;     int), void *);
(define sqlite3_wal_hook
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "sqlite3_wal_hook" (dynamic-link))
              (list '* '* '*))))
    (lambda (@702 @701 @700)
      (let ((~@702 (unwrap-sqlite3* @702))
            (~@701 ((make-ftn-arg-unwrapper
                      ffi:int
                      (list '* '* '* ffi:int))
                    @701))
            (~@700 (unwrap~pointer @700)))
        (~f ~@702 ~@701 ~@700)))))
(export sqlite3_wal_hook)

;; int sqlite3_wal_autocheckpoint(sqlite3 *db, int N);
(define sqlite3_wal_autocheckpoint
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_wal_autocheckpoint"
                (dynamic-link))
              (list '* ffi:int))))
    (lambda (db N)
      (let ((~db (unwrap-sqlite3* db))
            (~N (unwrap~fixed N)))
        (~f ~db ~N)))))
(export sqlite3_wal_autocheckpoint)

;; int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb);
(define sqlite3_wal_checkpoint
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_wal_checkpoint"
                (dynamic-link))
              (list '* '*))))
    (lambda (db zDb)
      (let ((~db (unwrap-sqlite3* db))
            (~zDb (unwrap~pointer zDb)))
        (~f ~db ~zDb)))))
(export sqlite3_wal_checkpoint)

;; int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int 
;;     *pnLog, int *pnCkpt);
(define sqlite3_wal_checkpoint_v2
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_wal_checkpoint_v2"
                (dynamic-link))
              (list '* '* ffi:int '* '*))))
    (lambda (db zDb eMode pnLog pnCkpt)
      (let ((~db (unwrap-sqlite3* db))
            (~zDb (unwrap~pointer zDb))
            (~eMode (unwrap~fixed eMode))
            (~pnLog (unwrap~pointer pnLog))
            (~pnCkpt (unwrap~pointer pnCkpt)))
        (~f ~db ~zDb ~eMode ~pnLog ~pnCkpt)))))
(export sqlite3_wal_checkpoint_v2)

;; int sqlite3_vtab_config(sqlite3 *, int op, ...);
;; ... failed.

;; int sqlite3_vtab_on_conflict(sqlite3 *);
(define sqlite3_vtab_on_conflict
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_vtab_on_conflict"
                (dynamic-link))
              (list '*))))
    (lambda (@708)
      (let ((~@708 (unwrap-sqlite3* @708))) (~f ~@708)))))
(export sqlite3_vtab_on_conflict)

;; int sqlite3_stmt_scanstatus(sqlite3_stmt *pStmt, int idx, int iScanStatusOp
;;     , void *pOut);
(define sqlite3_stmt_scanstatus
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_stmt_scanstatus"
                (dynamic-link))
              (list '* ffi:int ffi:int '*))))
    (lambda (pStmt idx iScanStatusOp pOut)
      (let ((~pStmt (unwrap-sqlite3_stmt* pStmt))
            (~idx (unwrap~fixed idx))
            (~iScanStatusOp (unwrap~fixed iScanStatusOp))
            (~pOut (unwrap~pointer pOut)))
        (~f ~pStmt ~idx ~iScanStatusOp ~pOut)))))
(export sqlite3_stmt_scanstatus)

;; void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *);
(define sqlite3_stmt_scanstatus_reset
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_stmt_scanstatus_reset"
                (dynamic-link))
              (list '*))))
    (lambda (@711)
      (let ((~@711 (unwrap-sqlite3_stmt* @711)))
        (~f ~@711)))))
(export sqlite3_stmt_scanstatus_reset)

;; int sqlite3_db_cacheflush(sqlite3 *);
(define sqlite3_db_cacheflush
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_db_cacheflush"
                (dynamic-link))
              (list '*))))
    (lambda (@713)
      (let ((~@713 (unwrap-sqlite3* @713))) (~f ~@713)))))
(export sqlite3_db_cacheflush)

;; int sqlite3_system_errno(sqlite3 *);
(define sqlite3_system_errno
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_system_errno"
                (dynamic-link))
              (list '*))))
    (lambda (@715)
      (let ((~@715 (unwrap-sqlite3* @715))) (~f ~@715)))))
(export sqlite3_system_errno)

;; typedef struct sqlite3_snapshot {
;;   unsigned char hidden[48];
;; } sqlite3_snapshot;
(define sqlite3_snapshot-desc
  (bs:struct (list `(hidden ,(bs:vector 48 #f)))))
(export sqlite3_snapshot-desc)
(define-fh-compound-type/p sqlite3_snapshot sqlite3_snapshot-desc)
(define struct-sqlite3_snapshot sqlite3_snapshot)

;; int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot
;;      **ppSnapshot);
(define sqlite3_snapshot_get
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_snapshot_get"
                (dynamic-link))
              (list '* '* '*))))
    (lambda (db zSchema ppSnapshot)
      (let ((~db (unwrap-sqlite3* db))
            (~zSchema (unwrap~pointer zSchema))
            (~ppSnapshot (unwrap~pointer ppSnapshot)))
        (~f ~db ~zSchema ~ppSnapshot)))))
(export sqlite3_snapshot_get)

;; int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, 
;;     sqlite3_snapshot *pSnapshot);
(define sqlite3_snapshot_open
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_snapshot_open"
                (dynamic-link))
              (list '* '* '*))))
    (lambda (db zSchema pSnapshot)
      (let ((~db (unwrap-sqlite3* db))
            (~zSchema (unwrap~pointer zSchema))
            (~pSnapshot (unwrap-sqlite3_snapshot* pSnapshot)))
        (~f ~db ~zSchema ~pSnapshot)))))
(export sqlite3_snapshot_open)

;; void sqlite3_snapshot_free(sqlite3_snapshot *);
(define sqlite3_snapshot_free
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "sqlite3_snapshot_free"
                (dynamic-link))
              (list '*))))
    (lambda (@721)
      (let ((~@721 (unwrap-sqlite3_snapshot* @721)))
        (~f ~@721)))))
(export sqlite3_snapshot_free)

;; int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2);
(define sqlite3_snapshot_cmp
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_snapshot_cmp"
                (dynamic-link))
              (list '* '*))))
    (lambda (p1 p2)
      (let ((~p1 (unwrap-sqlite3_snapshot* p1))
            (~p2 (unwrap-sqlite3_snapshot* p2)))
        (~f ~p1 ~p2)))))
(export sqlite3_snapshot_cmp)

;; int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb);
(define sqlite3_snapshot_recover
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_snapshot_recover"
                (dynamic-link))
              (list '* '*))))
    (lambda (db zDb)
      (let ((~db (unwrap-sqlite3* db))
            (~zDb (unwrap~pointer zDb)))
        (~f ~db ~zDb)))))
(export sqlite3_snapshot_recover)

;; typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;
;; struct sqlite3_rtree_geometry {
;;   void *pContext; /* Copy of pContext passed to s_r_g_c() */
;;   int nParam; /* Size of array aParam[] */
;;   sqlite3_rtree_dbl *aParam; /* Parameters passed to SQL geom function */
;;   void *pUser; /* Callback implementation user data */
;;   void (*xDelUser)(void *); /* Called by SQLite to clean up pUser */
;; };
(define sqlite3_rtree_geometry-desc
  (bs:struct
    (list `(pContext ,(bs:pointer intptr_t))
          `(nParam ,int)
          `(aParam ,(bs:pointer "sqlite3_rtree_dbl"))
          `(pUser ,(bs:pointer intptr_t))
          `(xDelUser ,(bs:pointer intptr_t)))))
(export sqlite3_rtree_geometry-desc)
(define-fh-compound-type/p sqlite3_rtree_geometry sqlite3_rtree_geometry-desc)
(define struct-sqlite3_rtree_geometry sqlite3_rtree_geometry)

;; typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;
;; struct sqlite3_rtree_query_info {
;;   void *pContext; /* pContext from when function registered */
;;   int nParam; /* Number of function parameters */
;;   sqlite3_rtree_dbl *aParam; /* value of function parameters */
;;   void *pUser; /* callback can use this, if desired */
;;   void (*xDelUser)(void *); /* function to free pUser */
;;   sqlite3_rtree_dbl *aCoord; /* Coordinates of node or entry to check */
;;   unsigned int *anQueue; /* Number of pending entries in the queue */
;;   int nCoord; /* Number of coordinates */
;;   int iLevel; /* Level of current node or entry */
;;   int mxLevel; /* The largest iLevel value in the tree */
;;   sqlite3_int64 iRowid; /* Rowid for current entry */
;;   sqlite3_rtree_dbl rParentScore; /* Score of parent node */
;;   int eParentWithin; /* Visibility of parent node */
;;   int eWithin; /* OUT: Visiblity */
;;   sqlite3_rtree_dbl rScore; /* OUT: Write the score here */
;;   /* The following fields are only available in 3.8.11 and later */
;;   sqlite3_value **apSqlParam; /* Original SQL values of parameters */
;; };
(define sqlite3_rtree_query_info-desc
  (bs:struct
    (list `(pContext ,(bs:pointer intptr_t))
          `(nParam ,int)
          `(aParam ,(bs:pointer "sqlite3_rtree_dbl"))
          `(pUser ,(bs:pointer intptr_t))
          `(xDelUser ,(bs:pointer intptr_t))
          `(aCoord ,(bs:pointer "sqlite3_rtree_dbl"))
          `(anQueue ,(bs:pointer unsigned-int))
          `(nCoord ,int)
          `(iLevel ,int)
          `(mxLevel ,int)
          `(iRowid ,sqlite3_int64-desc)
          `(rParentScore ,sqlite3_rtree_dbl-desc)
          `(eParentWithin ,int)
          `(eWithin ,int)
          `(rScore ,sqlite3_rtree_dbl-desc)
          `(apSqlParam
             ,(bs:pointer (bs:pointer "sqlite3_value"))))))
(export sqlite3_rtree_query_info-desc)
(define-fh-compound-type/p sqlite3_rtree_query_info sqlite3_rtree_query_info-desc)
(define struct-sqlite3_rtree_query_info sqlite3_rtree_query_info)

;; typedef double sqlite3_rtree_dbl;

;; int sqlite3_rtree_geometry_callback(sqlite3 *db, const char *zGeom, int (*
;;     xGeom)(sqlite3_rtree_geometry *, int, sqlite3_rtree_dbl *, int *), void
;;      *pContext);
(define sqlite3_rtree_geometry_callback
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_rtree_geometry_callback"
                (dynamic-link))
              (list '* '* '* '*))))
    (lambda (db zGeom xGeom pContext)
      (let ((~db (unwrap-sqlite3* db))
            (~zGeom (unwrap~pointer zGeom))
            (~xGeom
              ((make-ftn-arg-unwrapper
                 ffi:int
                 (list '* ffi:int '* '*))
               xGeom))
            (~pContext (unwrap~pointer pContext)))
        (~f ~db ~zGeom ~xGeom ~pContext)))))
(export sqlite3_rtree_geometry_callback)

;; int sqlite3_rtree_query_callback(sqlite3 *db, const char *zQueryFunc, int (
;;     *xQueryFunc)(sqlite3_rtree_query_info *), void *pContext, void (*
;;     xDestructor)(void *));
(define sqlite3_rtree_query_callback
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "sqlite3_rtree_query_callback"
                (dynamic-link))
              (list '* '* '* '* '*))))
    (lambda (db zQueryFunc xQueryFunc pContext xDestructor)
      (let ((~db (unwrap-sqlite3* db))
            (~zQueryFunc (unwrap~pointer zQueryFunc))
            (~xQueryFunc
              ((make-ftn-arg-unwrapper ffi:int (list '*))
               xQueryFunc))
            (~pContext (unwrap~pointer pContext))
            (~xDestructor
              ((make-ftn-arg-unwrapper ffi:void (list '*))
               xDestructor)))
        (~f ~db
            ~zQueryFunc
            ~xQueryFunc
            ~pContext
            ~xDestructor)))))
(export sqlite3_rtree_query_callback)

;; typedef struct Fts5ExtensionApi Fts5ExtensionApi;
;; struct Fts5ExtensionApi {
;;   int iVersion; /* Currently always set to 3 */
;;   void *(*xUserData)(Fts5Context *);
;;   int (*xColumnCount)(Fts5Context *);
;;   int (*xRowCount)(Fts5Context *, sqlite3_int64 *pnRow);
;;   int (*xColumnTotalSize)(Fts5Context *, int iCol, sqlite3_int64 *pnToken)
;;       ;
;;   int (*xTokenize)(Fts5Context *, const char *pText, int nText, void *pCtx
;;       , int (*xToken)(void *, int, const char *, int, int, int));
;;   int (*xPhraseCount)(Fts5Context *);
;;   int (*xPhraseSize)(Fts5Context *, int iPhrase);
;;   int (*xInstCount)(Fts5Context *, int *pnInst);
;;   int (*xInst)(Fts5Context *, int iIdx, int *piPhrase, int *piCol, int *
;;       piOff);
;;   sqlite3_int64 (*xRowid)(Fts5Context *);
;;   int (*xColumnText)(Fts5Context *, int iCol, const char **pz, int *pn);
;;   int (*xColumnSize)(Fts5Context *, int iCol, int *pnToken);
;;   int (*xQueryPhrase)(Fts5Context *, int iPhrase, void *pUserData, int (*)(
;;       const Fts5ExtensionApi *, Fts5Context *, void *));
;;   int (*xSetAuxdata)(Fts5Context *, void *pAux, void (*xDelete)(void *));
;;   void *(*xGetAuxdata)(Fts5Context *, int bClear);
;;   int (*xPhraseFirst)(Fts5Context *, int iPhrase, Fts5PhraseIter *, int *, 
;;       int *);
;;   void (*xPhraseNext)(Fts5Context *, Fts5PhraseIter *, int *piCol, int *
;;       piOff);
;;   int (*xPhraseFirstColumn)(Fts5Context *, int iPhrase, Fts5PhraseIter *, 
;;       int *);
;;   void (*xPhraseNextColumn)(Fts5Context *, Fts5PhraseIter *, int *piCol);
;; };
(define Fts5ExtensionApi-desc
  (bs:struct
    (list `(iVersion ,int)
          `(xUserData ,(bs:pointer intptr_t))
          `(xColumnCount ,(bs:pointer intptr_t))
          `(xRowCount ,(bs:pointer intptr_t))
          `(xColumnTotalSize ,(bs:pointer intptr_t))
          `(xTokenize ,(bs:pointer intptr_t))
          `(xPhraseCount ,(bs:pointer intptr_t))
          `(xPhraseSize ,(bs:pointer intptr_t))
          `(xInstCount ,(bs:pointer intptr_t))
          `(xInst ,(bs:pointer intptr_t))
          `(xRowid ,(bs:pointer intptr_t))
          `(xColumnText ,(bs:pointer intptr_t))
          `(xColumnSize ,(bs:pointer intptr_t))
          `(xQueryPhrase ,(bs:pointer intptr_t))
          `(xSetAuxdata ,(bs:pointer intptr_t))
          `(xGetAuxdata ,(bs:pointer intptr_t))
          `(xPhraseFirst ,(bs:pointer intptr_t))
          `(xPhraseNext ,(bs:pointer intptr_t))
          `(xPhraseFirstColumn ,(bs:pointer intptr_t))
          `(xPhraseNextColumn ,(bs:pointer intptr_t)))))
(export Fts5ExtensionApi-desc)
(define-fh-compound-type/p Fts5ExtensionApi Fts5ExtensionApi-desc)
(define struct-Fts5ExtensionApi Fts5ExtensionApi)

;; typedef struct Fts5Context Fts5Context;
(define-fh-pointer-type Fts5Context*)

;; typedef struct Fts5PhraseIter Fts5PhraseIter;
;; struct Fts5PhraseIter {
;;   const unsigned char *a;
;;   const unsigned char *b;
;; };
(define Fts5PhraseIter-desc
  (bs:struct
    (list `(a ,(bs:pointer #f))
          `(b ,(bs:pointer #f)))))
(export Fts5PhraseIter-desc)
(define-fh-compound-type/p Fts5PhraseIter Fts5PhraseIter-desc)
(define struct-Fts5PhraseIter Fts5PhraseIter)

;; typedef void (*fts5_extension_function)(const Fts5ExtensionApi *pApi, 
;;     Fts5Context *pFts, sqlite3_context *pCtx, int nVal, sqlite3_value **
;;     apVal);
(define-fh-function/p fts5_extension_function
  ffi:void (list (quote *) (quote *) (quote *) ffi:int (quote *)))

;; typedef struct Fts5Tokenizer Fts5Tokenizer;
(define-fh-pointer-type Fts5Tokenizer*)

;; typedef struct fts5_tokenizer fts5_tokenizer;
;; struct fts5_tokenizer {
;;   int (*xCreate)(void *, const char **azArg, int nArg, Fts5Tokenizer **
;;       ppOut);
;;   void (*xDelete)(Fts5Tokenizer *);
;;   int (*xTokenize)(Fts5Tokenizer *, void *pCtx, int flags, const char *
;;       pText, int nText, int (*xToken)(void *pCtx, int tflags, const char *
;;       pToken, int nToken, int iStart, int iEnd));
;; };
(define fts5_tokenizer-desc
  (bs:struct
    (list `(xCreate ,(bs:pointer intptr_t))
          `(xDelete ,(bs:pointer intptr_t))
          `(xTokenize ,(bs:pointer intptr_t)))))
(export fts5_tokenizer-desc)
(define-fh-compound-type/p fts5_tokenizer fts5_tokenizer-desc)
(define struct-fts5_tokenizer fts5_tokenizer)

;; typedef struct fts5_api fts5_api;
;; struct fts5_api {
;;   int iVersion; /* Currently always set to 2 */
;;   /* Create a new tokenizer */
;;   int (*xCreateTokenizer)(fts5_api *pApi, const char *zName, void *pContext
;;       , fts5_tokenizer *pTokenizer, void (*xDestroy)(void *));
;;   /* Find an existing tokenizer */
;;   int (*xFindTokenizer)(fts5_api *pApi, const char *zName, void **ppContext
;;       , fts5_tokenizer *pTokenizer);
;;   /* Create a new auxiliary function */
;;   int (*xCreateFunction)(fts5_api *pApi, const char *zName, void *pContext
;;       , fts5_extension_function xFunction, void (*xDestroy)(void *));
;; };
(define fts5_api-desc
  (bs:struct
    (list `(iVersion ,int)
          `(xCreateTokenizer ,(bs:pointer intptr_t))
          `(xFindTokenizer ,(bs:pointer intptr_t))
          `(xCreateFunction ,(bs:pointer intptr_t)))))
(export fts5_api-desc)
(define-fh-compound-type/p fts5_api fts5_api-desc)
(define struct-fts5_api fts5_api)

;; access to enum symbols and #define'd constants:
(define sqlite3-symbol-val
  (let ((sym-tab
          '((SQLITE_VERSION . "3.19.3")
            (SQLITE_VERSION_NUMBER . 3019003)
            (SQLITE_SOURCE_ID
              .
              "2017-06-08 14:26:16 0ee482a1e0eae22e08edc8978c9733a96603d4509645f348ebf55b579e89636b")
            (SQLITE_OK . 0)
            (SQLITE_ERROR . 1)
            (SQLITE_INTERNAL . 2)
            (SQLITE_PERM . 3)
            (SQLITE_ABORT . 4)
            (SQLITE_BUSY . 5)
            (SQLITE_LOCKED . 6)
            (SQLITE_NOMEM . 7)
            (SQLITE_READONLY . 8)
            (SQLITE_INTERRUPT . 9)
            (SQLITE_IOERR . 10)
            (SQLITE_CORRUPT . 11)
            (SQLITE_NOTFOUND . 12)
            (SQLITE_FULL . 13)
            (SQLITE_CANTOPEN . 14)
            (SQLITE_PROTOCOL . 15)
            (SQLITE_EMPTY . 16)
            (SQLITE_SCHEMA . 17)
            (SQLITE_TOOBIG . 18)
            (SQLITE_CONSTRAINT . 19)
            (SQLITE_MISMATCH . 20)
            (SQLITE_MISUSE . 21)
            (SQLITE_NOLFS . 22)
            (SQLITE_AUTH . 23)
            (SQLITE_FORMAT . 24)
            (SQLITE_RANGE . 25)
            (SQLITE_NOTADB . 26)
            (SQLITE_NOTICE . 27)
            (SQLITE_WARNING . 28)
            (SQLITE_ROW . 100)
            (SQLITE_DONE . 101)
            (SQLITE_OPEN_READONLY . 1)
            (SQLITE_OPEN_READWRITE . 2)
            (SQLITE_OPEN_CREATE . 4)
            (SQLITE_OPEN_DELETEONCLOSE . 8)
            (SQLITE_OPEN_EXCLUSIVE . 16)
            (SQLITE_OPEN_AUTOPROXY . 32)
            (SQLITE_OPEN_URI . 64)
            (SQLITE_OPEN_MEMORY . 128)
            (SQLITE_OPEN_MAIN_DB . 256)
            (SQLITE_OPEN_TEMP_DB . 512)
            (SQLITE_OPEN_TRANSIENT_DB . 1024)
            (SQLITE_OPEN_MAIN_JOURNAL . 2048)
            (SQLITE_OPEN_TEMP_JOURNAL . 4096)
            (SQLITE_OPEN_SUBJOURNAL . 8192)
            (SQLITE_OPEN_MASTER_JOURNAL . 16384)
            (SQLITE_OPEN_NOMUTEX . 32768)
            (SQLITE_OPEN_FULLMUTEX . 65536)
            (SQLITE_OPEN_SHAREDCACHE . 131072)
            (SQLITE_OPEN_PRIVATECACHE . 262144)
            (SQLITE_OPEN_WAL . 524288)
            (SQLITE_IOCAP_ATOMIC . 1)
            (SQLITE_IOCAP_ATOMIC512 . 2)
            (SQLITE_IOCAP_ATOMIC1K . 4)
            (SQLITE_IOCAP_ATOMIC2K . 8)
            (SQLITE_IOCAP_ATOMIC4K . 16)
            (SQLITE_IOCAP_ATOMIC8K . 32)
            (SQLITE_IOCAP_ATOMIC16K . 64)
            (SQLITE_IOCAP_ATOMIC32K . 128)
            (SQLITE_IOCAP_ATOMIC64K . 256)
            (SQLITE_IOCAP_SAFE_APPEND . 512)
            (SQLITE_IOCAP_SEQUENTIAL . 1024)
            (SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN . 2048)
            (SQLITE_IOCAP_POWERSAFE_OVERWRITE . 4096)
            (SQLITE_IOCAP_IMMUTABLE . 8192)
            (SQLITE_LOCK_NONE . 0)
            (SQLITE_LOCK_SHARED . 1)
            (SQLITE_LOCK_RESERVED . 2)
            (SQLITE_LOCK_PENDING . 3)
            (SQLITE_LOCK_EXCLUSIVE . 4)
            (SQLITE_SYNC_NORMAL . 2)
            (SQLITE_SYNC_FULL . 3)
            (SQLITE_SYNC_DATAONLY . 16)
            (SQLITE_FCNTL_LOCKSTATE . 1)
            (SQLITE_FCNTL_GET_LOCKPROXYFILE . 2)
            (SQLITE_FCNTL_SET_LOCKPROXYFILE . 3)
            (SQLITE_FCNTL_LAST_ERRNO . 4)
            (SQLITE_FCNTL_SIZE_HINT . 5)
            (SQLITE_FCNTL_CHUNK_SIZE . 6)
            (SQLITE_FCNTL_FILE_POINTER . 7)
            (SQLITE_FCNTL_SYNC_OMITTED . 8)
            (SQLITE_FCNTL_WIN32_AV_RETRY . 9)
            (SQLITE_FCNTL_PERSIST_WAL . 10)
            (SQLITE_FCNTL_OVERWRITE . 11)
            (SQLITE_FCNTL_VFSNAME . 12)
            (SQLITE_FCNTL_POWERSAFE_OVERWRITE . 13)
            (SQLITE_FCNTL_PRAGMA . 14)
            (SQLITE_FCNTL_BUSYHANDLER . 15)
            (SQLITE_FCNTL_TEMPFILENAME . 16)
            (SQLITE_FCNTL_MMAP_SIZE . 18)
            (SQLITE_FCNTL_TRACE . 19)
            (SQLITE_FCNTL_HAS_MOVED . 20)
            (SQLITE_FCNTL_SYNC . 21)
            (SQLITE_FCNTL_COMMIT_PHASETWO . 22)
            (SQLITE_FCNTL_WIN32_SET_HANDLE . 23)
            (SQLITE_FCNTL_WAL_BLOCK . 24)
            (SQLITE_FCNTL_ZIPVFS . 25)
            (SQLITE_FCNTL_RBU . 26)
            (SQLITE_FCNTL_VFS_POINTER . 27)
            (SQLITE_FCNTL_JOURNAL_POINTER . 28)
            (SQLITE_FCNTL_WIN32_GET_HANDLE . 29)
            (SQLITE_FCNTL_PDB . 30)
            (SQLITE_GET_LOCKPROXYFILE . 2)
            (SQLITE_SET_LOCKPROXYFILE . 3)
            (SQLITE_LAST_ERRNO . 4)
            (SQLITE_ACCESS_EXISTS . 0)
            (SQLITE_ACCESS_READWRITE . 1)
            (SQLITE_ACCESS_READ . 2)
            (SQLITE_SHM_UNLOCK . 1)
            (SQLITE_SHM_LOCK . 2)
            (SQLITE_SHM_SHARED . 4)
            (SQLITE_SHM_EXCLUSIVE . 8)
            (SQLITE_SHM_NLOCK . 8)
            (SQLITE_CONFIG_SINGLETHREAD . 1)
            (SQLITE_CONFIG_MULTITHREAD . 2)
            (SQLITE_CONFIG_SERIALIZED . 3)
            (SQLITE_CONFIG_MALLOC . 4)
            (SQLITE_CONFIG_GETMALLOC . 5)
            (SQLITE_CONFIG_SCRATCH . 6)
            (SQLITE_CONFIG_PAGECACHE . 7)
            (SQLITE_CONFIG_HEAP . 8)
            (SQLITE_CONFIG_MEMSTATUS . 9)
            (SQLITE_CONFIG_MUTEX . 10)
            (SQLITE_CONFIG_GETMUTEX . 11)
            (SQLITE_CONFIG_LOOKASIDE . 13)
            (SQLITE_CONFIG_PCACHE . 14)
            (SQLITE_CONFIG_GETPCACHE . 15)
            (SQLITE_CONFIG_LOG . 16)
            (SQLITE_CONFIG_URI . 17)
            (SQLITE_CONFIG_PCACHE2 . 18)
            (SQLITE_CONFIG_GETPCACHE2 . 19)
            (SQLITE_CONFIG_COVERING_INDEX_SCAN . 20)
            (SQLITE_CONFIG_SQLLOG . 21)
            (SQLITE_CONFIG_MMAP_SIZE . 22)
            (SQLITE_CONFIG_WIN32_HEAPSIZE . 23)
            (SQLITE_CONFIG_PCACHE_HDRSZ . 24)
            (SQLITE_CONFIG_PMASZ . 25)
            (SQLITE_CONFIG_STMTJRNL_SPILL . 26)
            (SQLITE_DBCONFIG_MAINDBNAME . 1000)
            (SQLITE_DBCONFIG_LOOKASIDE . 1001)
            (SQLITE_DBCONFIG_ENABLE_FKEY . 1002)
            (SQLITE_DBCONFIG_ENABLE_TRIGGER . 1003)
            (SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER . 1004)
            (SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION . 1005)
            (SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE . 1006)
            (SQLITE_DENY . 1)
            (SQLITE_IGNORE . 2)
            (SQLITE_CREATE_INDEX . 1)
            (SQLITE_CREATE_TABLE . 2)
            (SQLITE_CREATE_TEMP_INDEX . 3)
            (SQLITE_CREATE_TEMP_TABLE . 4)
            (SQLITE_CREATE_TEMP_TRIGGER . 5)
            (SQLITE_CREATE_TEMP_VIEW . 6)
            (SQLITE_CREATE_TRIGGER . 7)
            (SQLITE_CREATE_VIEW . 8)
            (SQLITE_DELETE . 9)
            (SQLITE_DROP_INDEX . 10)
            (SQLITE_DROP_TABLE . 11)
            (SQLITE_DROP_TEMP_INDEX . 12)
            (SQLITE_DROP_TEMP_TABLE . 13)
            (SQLITE_DROP_TEMP_TRIGGER . 14)
            (SQLITE_DROP_TEMP_VIEW . 15)
            (SQLITE_DROP_TRIGGER . 16)
            (SQLITE_DROP_VIEW . 17)
            (SQLITE_INSERT . 18)
            (SQLITE_PRAGMA . 19)
            (SQLITE_READ . 20)
            (SQLITE_SELECT . 21)
            (SQLITE_TRANSACTION . 22)
            (SQLITE_UPDATE . 23)
            (SQLITE_ATTACH . 24)
            (SQLITE_DETACH . 25)
            (SQLITE_ALTER_TABLE . 26)
            (SQLITE_REINDEX . 27)
            (SQLITE_ANALYZE . 28)
            (SQLITE_CREATE_VTABLE . 29)
            (SQLITE_DROP_VTABLE . 30)
            (SQLITE_FUNCTION . 31)
            (SQLITE_SAVEPOINT . 32)
            (SQLITE_COPY . 0)
            (SQLITE_RECURSIVE . 33)
            (SQLITE_TRACE_STMT . 1)
            (SQLITE_TRACE_PROFILE . 2)
            (SQLITE_TRACE_ROW . 4)
            (SQLITE_TRACE_CLOSE . 8)
            (SQLITE_LIMIT_LENGTH . 0)
            (SQLITE_LIMIT_SQL_LENGTH . 1)
            (SQLITE_LIMIT_COLUMN . 2)
            (SQLITE_LIMIT_EXPR_DEPTH . 3)
            (SQLITE_LIMIT_COMPOUND_SELECT . 4)
            (SQLITE_LIMIT_VDBE_OP . 5)
            (SQLITE_LIMIT_FUNCTION_ARG . 6)
            (SQLITE_LIMIT_ATTACHED . 7)
            (SQLITE_LIMIT_LIKE_PATTERN_LENGTH . 8)
            (SQLITE_LIMIT_VARIABLE_NUMBER . 9)
            (SQLITE_LIMIT_TRIGGER_DEPTH . 10)
            (SQLITE_LIMIT_WORKER_THREADS . 11)
            (SQLITE_INTEGER . 1)
            (SQLITE_FLOAT . 2)
            (SQLITE_BLOB . 4)
            (SQLITE_NULL . 5)
            (SQLITE_TEXT . 3)
            (SQLITE3_TEXT . 3)
            (SQLITE_UTF8 . 1)
            (SQLITE_UTF16LE . 2)
            (SQLITE_UTF16BE . 3)
            (SQLITE_UTF16 . 4)
            (SQLITE_ANY . 5)
            (SQLITE_UTF16_ALIGNED . 8)
            (SQLITE_DETERMINISTIC . 2048)
            (SQLITE_INDEX_SCAN_UNIQUE . 1)
            (SQLITE_INDEX_CONSTRAINT_EQ . 2)
            (SQLITE_INDEX_CONSTRAINT_GT . 4)
            (SQLITE_INDEX_CONSTRAINT_LE . 8)
            (SQLITE_INDEX_CONSTRAINT_LT . 16)
            (SQLITE_INDEX_CONSTRAINT_GE . 32)
            (SQLITE_INDEX_CONSTRAINT_MATCH . 64)
            (SQLITE_INDEX_CONSTRAINT_LIKE . 65)
            (SQLITE_INDEX_CONSTRAINT_GLOB . 66)
            (SQLITE_INDEX_CONSTRAINT_REGEXP . 67)
            (SQLITE_MUTEX_FAST . 0)
            (SQLITE_MUTEX_RECURSIVE . 1)
            (SQLITE_MUTEX_STATIC_MASTER . 2)
            (SQLITE_MUTEX_STATIC_MEM . 3)
            (SQLITE_MUTEX_STATIC_MEM2 . 4)
            (SQLITE_MUTEX_STATIC_OPEN . 4)
            (SQLITE_MUTEX_STATIC_PRNG . 5)
            (SQLITE_MUTEX_STATIC_LRU . 6)
            (SQLITE_MUTEX_STATIC_LRU2 . 7)
            (SQLITE_MUTEX_STATIC_PMEM . 7)
            (SQLITE_MUTEX_STATIC_APP1 . 8)
            (SQLITE_MUTEX_STATIC_APP2 . 9)
            (SQLITE_MUTEX_STATIC_APP3 . 10)
            (SQLITE_MUTEX_STATIC_VFS1 . 11)
            (SQLITE_MUTEX_STATIC_VFS2 . 12)
            (SQLITE_MUTEX_STATIC_VFS3 . 13)
            (SQLITE_TESTCTRL_FIRST . 5)
            (SQLITE_TESTCTRL_PRNG_SAVE . 5)
            (SQLITE_TESTCTRL_PRNG_RESTORE . 6)
            (SQLITE_TESTCTRL_PRNG_RESET . 7)
            (SQLITE_TESTCTRL_BITVEC_TEST . 8)
            (SQLITE_TESTCTRL_FAULT_INSTALL . 9)
            (SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS . 10)
            (SQLITE_TESTCTRL_PENDING_BYTE . 11)
            (SQLITE_TESTCTRL_ASSERT . 12)
            (SQLITE_TESTCTRL_ALWAYS . 13)
            (SQLITE_TESTCTRL_RESERVE . 14)
            (SQLITE_TESTCTRL_OPTIMIZATIONS . 15)
            (SQLITE_TESTCTRL_ISKEYWORD . 16)
            (SQLITE_TESTCTRL_SCRATCHMALLOC . 17)
            (SQLITE_TESTCTRL_LOCALTIME_FAULT . 18)
            (SQLITE_TESTCTRL_EXPLAIN_STMT . 19)
            (SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD . 19)
            (SQLITE_TESTCTRL_NEVER_CORRUPT . 20)
            (SQLITE_TESTCTRL_VDBE_COVERAGE . 21)
            (SQLITE_TESTCTRL_BYTEORDER . 22)
            (SQLITE_TESTCTRL_ISINIT . 23)
            (SQLITE_TESTCTRL_SORTER_MMAP . 24)
            (SQLITE_TESTCTRL_IMPOSTER . 25)
            (SQLITE_TESTCTRL_LAST . 25)
            (SQLITE_STATUS_MEMORY_USED . 0)
            (SQLITE_STATUS_PAGECACHE_USED . 1)
            (SQLITE_STATUS_PAGECACHE_OVERFLOW . 2)
            (SQLITE_STATUS_SCRATCH_USED . 3)
            (SQLITE_STATUS_SCRATCH_OVERFLOW . 4)
            (SQLITE_STATUS_MALLOC_SIZE . 5)
            (SQLITE_STATUS_PARSER_STACK . 6)
            (SQLITE_STATUS_PAGECACHE_SIZE . 7)
            (SQLITE_STATUS_SCRATCH_SIZE . 8)
            (SQLITE_STATUS_MALLOC_COUNT . 9)
            (SQLITE_DBSTATUS_LOOKASIDE_USED . 0)
            (SQLITE_DBSTATUS_CACHE_USED . 1)
            (SQLITE_DBSTATUS_SCHEMA_USED . 2)
            (SQLITE_DBSTATUS_STMT_USED . 3)
            (SQLITE_DBSTATUS_LOOKASIDE_HIT . 4)
            (SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE . 5)
            (SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL . 6)
            (SQLITE_DBSTATUS_CACHE_HIT . 7)
            (SQLITE_DBSTATUS_CACHE_MISS . 8)
            (SQLITE_DBSTATUS_CACHE_WRITE . 9)
            (SQLITE_DBSTATUS_DEFERRED_FKS . 10)
            (SQLITE_DBSTATUS_CACHE_USED_SHARED . 11)
            (SQLITE_DBSTATUS_MAX . 11)
            (SQLITE_STMTSTATUS_FULLSCAN_STEP . 1)
            (SQLITE_STMTSTATUS_SORT . 2)
            (SQLITE_STMTSTATUS_AUTOINDEX . 3)
            (SQLITE_STMTSTATUS_VM_STEP . 4)
            (SQLITE_CHECKPOINT_PASSIVE . 0)
            (SQLITE_CHECKPOINT_FULL . 1)
            (SQLITE_CHECKPOINT_RESTART . 2)
            (SQLITE_CHECKPOINT_TRUNCATE . 3)
            (SQLITE_VTAB_CONSTRAINT_SUPPORT . 1)
            (SQLITE_ROLLBACK . 1)
            (SQLITE_FAIL . 3)
            (SQLITE_REPLACE . 5)
            (SQLITE_SCANSTAT_NLOOP . 0)
            (SQLITE_SCANSTAT_NVISIT . 1)
            (SQLITE_SCANSTAT_EST . 2)
            (SQLITE_SCANSTAT_NAME . 3)
            (SQLITE_SCANSTAT_EXPLAIN . 4)
            (SQLITE_SCANSTAT_SELECTID . 5)
            (NOT_WITHIN . 0)
            (PARTLY_WITHIN . 1)
            (FULLY_WITHIN . 2)
            (FTS5_TOKENIZE_QUERY . 1)
            (FTS5_TOKENIZE_PREFIX . 2)
            (FTS5_TOKENIZE_DOCUMENT . 4)
            (FTS5_TOKENIZE_AUX . 8)
            (FTS5_TOKEN_COLOCATED . 1))))
    (lambda (k) (assq-ref sym-tab k))))
(export sqlite3-symbol-val)

(define (unwrap-enum obj)
  (cond ((number? obj) obj)
        ((symbol? obj) (sqlite3-symbol-val obj))
        ((fh-object? obj) (struct-ref obj 0))
        (else (error "type mismatch"))))

(define sqlite3-types
  '((struct . "fts5_api") "fts5_api" (struct . "fts5_tokenizer") 
    "fts5_tokenizer" "Fts5Tokenizer" (struct . "Fts5ExtensionApi") (struct . 
    "Fts5PhraseIter") "fts5_extension_function" "Fts5PhraseIter" "Fts5Context"
    "Fts5ExtensionApi" (struct . "sqlite3_rtree_query_info") (struct . 
    "sqlite3_rtree_geometry") "sqlite3_rtree_dbl" "sqlite3_rtree_query_info" 
    "sqlite3_rtree_geometry" (struct . "sqlite3_snapshot") "sqlite3_snapshot" 
    "sqlite3_backup" (struct . "sqlite3_pcache_methods") 
    "sqlite3_pcache_methods" (struct . "sqlite3_pcache_methods2") 
    "sqlite3_pcache_methods2" (struct . "sqlite3_pcache_page") 
    "sqlite3_pcache_page" "sqlite3_pcache" (struct . "sqlite3_mutex_methods") 
    "sqlite3_mutex_methods" "sqlite3_blob" (struct . "sqlite3_vtab_cursor") (
    struct . "sqlite3_vtab") (struct . "sqlite3_index_info") (struct . 
    "sqlite3_module") "sqlite3_module" "sqlite3_vtab_cursor" 
    "sqlite3_index_info" "sqlite3_vtab" "sqlite3_destructor_type" 
    "sqlite3_context" "sqlite3_value" "sqlite3_stmt" (struct . 
    "sqlite3_mem_methods") "sqlite3_mem_methods" (struct . "sqlite3_vfs") 
    "sqlite3_syscall_ptr" "sqlite3_vfs" "sqlite3_api_routines" "sqlite3_mutex"
    (struct . "sqlite3_io_methods") "sqlite3_io_methods" (struct . 
    "sqlite3_file") "sqlite3_file" "sqlite3_callback" "sqlite3_uint64" 
    "sqlite3_int64" "sqlite3"))
(export sqlite3-types)

;; --- last line ---
