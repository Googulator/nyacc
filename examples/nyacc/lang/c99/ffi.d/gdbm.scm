;; auto-generated by ffi-help.scm

(define-module (gdbm)
  #:use-module (system ffi-help-rt)
  #:use-module ((system foreign) #:prefix ffi:)
  #:use-module (bytestructures guile)
  )
(dynamic-link "libgdbm")
(define void intptr_t)
(define echo-decls #f)

;; typedef unsigned long long int gdbm_count_t;
(define gdbm_count_t-desc unsigned-long)
(export gdbm_count_t-desc)
(define unwrap-gdbm_count_t unwrap~fixed)
(define wrap-gdbm_count_t identity)
(export gdbm_count_t-desc unwrap-gdbm_count_t wrap-gdbm_count_t)

;; typedef struct {
;;   char *dptr;
;;   int dsize;
;; } datum;
(define datum-desc
  (bs:struct
    (list `(dptr ,(bs:pointer int)) `(dsize ,int))))
(export datum-desc)
(define-fh-compound-type/p datum datum-desc)

;; typedef struct gdbm_file_info *GDBM_FILE;
(define-fh-pointer-type GDBM_FILE)

;; extern const char *gdbm_version;
(define gdbm_version (dynamic-pointer "gdbm_version" (dynamic-link)))

;; extern int const gdbm_version_number[3];
(define gdbm_version_number
  (let* ((bs* #f)
         (memoize-bs*
           (lambda ()
             (when (not addr)
                   (set! bs*
                     (make-bytestructure
                       (ffi:pointer->bytevector
                         (dynamic-pointer
                           "gdbm_version_number"
                           (dynamic-link))
                         (ffi:sizeof '*))
                       0
                       (bs:pointer (bs:vector 3 int))))))))
    (case-lambda
      (() (memoize-bs*) (bytestructure-ref bs* '*)))))
(export gdbm_version_number)

;; extern GDBM_FILE gdbm_fd_open(int fd, const char *file_name, int block_size
;;     , int flags, void (*fatal_func)(const char *));
(define gdbm_fd_open
  (let ((~f #f))
    (lambda (fd file_name block_size flags fatal_func)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_fd_open"
                '*
                (list ffi:int '* ffi:int ffi:int '*))))
      (let ((~fd (unwrap~fixed fd))
            (~file_name (unwrap~pointer file_name))
            (~block_size (unwrap~fixed block_size))
            (~flags (unwrap~fixed flags))
            (~fatal_func
              ((make-ftn-arg-unwrapper ffi:void (list '*))
               fatal_func)))
        (~f ~fd
            ~file_name
            ~block_size
            ~flags
            ~fatal_func)))))
(export gdbm_fd_open)

;; extern GDBM_FILE gdbm_open(const char *, int, int, int, void (*)(const char 
;;     *));
(define gdbm_open
  (let ((~f #f))
    (lambda (@77 arg-1 arg-2 arg-3 @76)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_open"
                '*
                (list '* ffi:int ffi:int ffi:int '*))))
      (let ((~@77 (unwrap~pointer @77))
            (~arg-1 (unwrap~fixed arg-1))
            (~arg-2 (unwrap~fixed arg-2))
            (~arg-3 (unwrap~fixed arg-3))
            (~@76 ((make-ftn-arg-unwrapper ffi:void (list '*)) @76)))
        (~f ~@77 ~arg-1 ~arg-2 ~arg-3 ~@76)))))
(export gdbm_open)

;; extern void gdbm_close(GDBM_FILE);
(define gdbm_close
  (let ((~f #f))
    (lambda (arg-0)
      (when (not ~f)
            (set! ~f
              (fh-link-proc "gdbm_close" ffi:void (list '*))))
      (let ((~arg-0 (unwrap~pointer arg-0)))
        (~f ~arg-0)))))
(export gdbm_close)

;; extern int gdbm_store(GDBM_FILE, datum, datum, int);
(define gdbm_store
  (let ((~f #f))
    (lambda (arg-0 arg-1 arg-2 arg-3)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_store"
                ffi:int
                (list '*
                      (list '* ffi:int)
                      (list '* ffi:int)
                      ffi:int))))
      (let ((~arg-0 (unwrap~pointer arg-0))
            (~arg-1 (unwrap-datum arg-1))
            (~arg-2 (unwrap-datum arg-2))
            (~arg-3 (unwrap~fixed arg-3)))
        (~f ~arg-0 ~arg-1 ~arg-2 ~arg-3)))))
(export gdbm_store)

;; extern datum gdbm_fetch(GDBM_FILE, datum);
(define gdbm_fetch
  (let ((~f #f))
    (lambda (arg-0 arg-1)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_fetch"
                (list '* ffi:int)
                (list '* (list '* ffi:int)))))
      (let ((~arg-0 (unwrap~pointer arg-0))
            (~arg-1 (unwrap-datum arg-1)))
        (wrap-datum (~f ~arg-0 ~arg-1))))))
(export gdbm_fetch)

;; extern int gdbm_delete(GDBM_FILE, datum);
(define gdbm_delete
  (let ((~f #f))
    (lambda (arg-0 arg-1)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_delete"
                ffi:int
                (list '* (list '* ffi:int)))))
      (let ((~arg-0 (unwrap~pointer arg-0))
            (~arg-1 (unwrap-datum arg-1)))
        (~f ~arg-0 ~arg-1)))))
(export gdbm_delete)

;; extern datum gdbm_firstkey(GDBM_FILE);
(define gdbm_firstkey
  (let ((~f #f))
    (lambda (arg-0)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_firstkey"
                (list '* ffi:int)
                (list '*))))
      (let ((~arg-0 (unwrap~pointer arg-0)))
        (wrap-datum (~f ~arg-0))))))
(export gdbm_firstkey)

;; extern datum gdbm_nextkey(GDBM_FILE, datum);
(define gdbm_nextkey
  (let ((~f #f))
    (lambda (arg-0 arg-1)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_nextkey"
                (list '* ffi:int)
                (list '* (list '* ffi:int)))))
      (let ((~arg-0 (unwrap~pointer arg-0))
            (~arg-1 (unwrap-datum arg-1)))
        (wrap-datum (~f ~arg-0 ~arg-1))))))
(export gdbm_nextkey)

;; extern int gdbm_reorganize(GDBM_FILE);
(define gdbm_reorganize
  (let ((~f #f))
    (lambda (arg-0)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_reorganize"
                ffi:int
                (list '*))))
      (let ((~arg-0 (unwrap~pointer arg-0)))
        (~f ~arg-0)))))
(export gdbm_reorganize)

;; extern void gdbm_sync(GDBM_FILE);
(define gdbm_sync
  (let ((~f #f))
    (lambda (arg-0)
      (when (not ~f)
            (set! ~f
              (fh-link-proc "gdbm_sync" ffi:void (list '*))))
      (let ((~arg-0 (unwrap~pointer arg-0)))
        (~f ~arg-0)))))
(export gdbm_sync)

;; extern int gdbm_exists(GDBM_FILE, datum);
(define gdbm_exists
  (let ((~f #f))
    (lambda (arg-0 arg-1)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_exists"
                ffi:int
                (list '* (list '* ffi:int)))))
      (let ((~arg-0 (unwrap~pointer arg-0))
            (~arg-1 (unwrap-datum arg-1)))
        (~f ~arg-0 ~arg-1)))))
(export gdbm_exists)

;; extern int gdbm_setopt(GDBM_FILE, int, void *, int);
(define gdbm_setopt
  (let ((~f #f))
    (lambda (arg-0 arg-1 @78 arg-3)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_setopt"
                ffi:int
                (list '* ffi:int '* ffi:int))))
      (let ((~arg-0 (unwrap~pointer arg-0))
            (~arg-1 (unwrap~fixed arg-1))
            (~@78 (unwrap~pointer @78))
            (~arg-3 (unwrap~fixed arg-3)))
        (~f ~arg-0 ~arg-1 ~@78 ~arg-3)))))
(export gdbm_setopt)

;; extern int gdbm_fdesc(GDBM_FILE);
(define gdbm_fdesc
  (let ((~f #f))
    (lambda (arg-0)
      (when (not ~f)
            (set! ~f
              (fh-link-proc "gdbm_fdesc" ffi:int (list '*))))
      (let ((~arg-0 (unwrap~pointer arg-0)))
        (~f ~arg-0)))))
(export gdbm_fdesc)

;; extern int gdbm_export(GDBM_FILE, const char *, int, int);
(define gdbm_export
  (let ((~f #f))
    (lambda (arg-0 @79 arg-2 arg-3)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_export"
                ffi:int
                (list '* '* ffi:int ffi:int))))
      (let ((~arg-0 (unwrap~pointer arg-0))
            (~@79 (unwrap~pointer @79))
            (~arg-2 (unwrap~fixed arg-2))
            (~arg-3 (unwrap~fixed arg-3)))
        (~f ~arg-0 ~@79 ~arg-2 ~arg-3)))))
(export gdbm_export)

;; extern int gdbm_export_to_file(GDBM_FILE dbf, FILE *fp);
(define gdbm_export_to_file
  (let ((~f #f))
    (lambda (dbf fp)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_export_to_file"
                ffi:int
                (list '* '*))))
      (let ((~dbf (unwrap~pointer dbf))
            (~fp (unwrap~pointer fp)))
        (~f ~dbf ~fp)))))
(export gdbm_export_to_file)

;; extern int gdbm_import(GDBM_FILE, const char *, int);
(define gdbm_import
  (let ((~f #f))
    (lambda (arg-0 @80 arg-2)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_import"
                ffi:int
                (list '* '* ffi:int))))
      (let ((~arg-0 (unwrap~pointer arg-0))
            (~@80 (unwrap~pointer @80))
            (~arg-2 (unwrap~fixed arg-2)))
        (~f ~arg-0 ~@80 ~arg-2)))))
(export gdbm_import)

;; extern int gdbm_import_from_file(GDBM_FILE dbf, FILE *fp, int flag);
(define gdbm_import_from_file
  (let ((~f #f))
    (lambda (dbf fp flag)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_import_from_file"
                ffi:int
                (list '* '* ffi:int))))
      (let ((~dbf (unwrap~pointer dbf))
            (~fp (unwrap~pointer fp))
            (~flag (unwrap~fixed flag)))
        (~f ~dbf ~fp ~flag)))))
(export gdbm_import_from_file)

;; extern int gdbm_count(GDBM_FILE dbf, gdbm_count_t *pcount);
(define gdbm_count
  (let ((~f #f))
    (lambda (dbf pcount)
      (when (not ~f)
            (set! ~f
              (fh-link-proc "gdbm_count" ffi:int (list '* '*))))
      (let ((~dbf (unwrap~pointer dbf))
            (~pcount (unwrap~pointer pcount)))
        (~f ~dbf ~pcount)))))
(export gdbm_count)

;; typedef struct gdbm_recovery_s {
;;   /* Input members.
;;      These are initialized before call to gdbm_recover.  The flags argument
;;      specifies which of them are initialized. */
;;   void (*errfun)(void *data, char const *fmt, ...);
;;   void *data;
;;   size_t max_failed_keys;
;;   size_t max_failed_buckets;
;;   size_t max_failures;
;;   /* Output members.
;;      The gdbm_recover function fills these before returning. */
;;   size_t recovered_keys;
;;   size_t recovered_buckets;
;;   size_t failed_keys;
;;   size_t failed_buckets;
;;   char *backup_name;
;; } gdbm_recovery;
(define gdbm_recovery-desc
  (bs:struct
    (list `(errfun ,(bs:pointer void))
          `(data ,(bs:pointer void))
          `(max_failed_keys ,size_t)
          `(max_failed_buckets ,size_t)
          `(max_failures ,size_t)
          `(recovered_keys ,size_t)
          `(recovered_buckets ,size_t)
          `(failed_keys ,size_t)
          `(failed_buckets ,size_t)
          `(backup_name ,(bs:pointer int)))))
(export gdbm_recovery-desc)
(define-fh-compound-type/p gdbm_recovery gdbm_recovery-desc)
(define struct-gdbm_recovery_s gdbm_recovery)

;; extern int gdbm_recover(GDBM_FILE dbf, gdbm_recovery *rcvr, int flags);
(define gdbm_recover
  (let ((~f #f))
    (lambda (dbf rcvr flags)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_recover"
                ffi:int
                (list '* '* ffi:int))))
      (let ((~dbf (unwrap~pointer dbf))
            (~rcvr (unwrap-gdbm_recovery* rcvr))
            (~flags (unwrap~fixed flags)))
        (~f ~dbf ~rcvr ~flags)))))
(export gdbm_recover)

;; extern int gdbm_dump(GDBM_FILE, const char *, int fmt, int open_flags, int 
;;     mode);
(define gdbm_dump
  (let ((~f #f))
    (lambda (arg-0 @81 fmt open_flags mode)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_dump"
                ffi:int
                (list '* '* ffi:int ffi:int ffi:int))))
      (let ((~arg-0 (unwrap~pointer arg-0))
            (~@81 (unwrap~pointer @81))
            (~fmt (unwrap~fixed fmt))
            (~open_flags (unwrap~fixed open_flags))
            (~mode (unwrap~fixed mode)))
        (~f ~arg-0 ~@81 ~fmt ~open_flags ~mode)))))
(export gdbm_dump)

;; extern int gdbm_dump_to_file(GDBM_FILE, FILE *, int fmt);
(define gdbm_dump_to_file
  (let ((~f #f))
    (lambda (arg-0 @82 fmt)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_dump_to_file"
                ffi:int
                (list '* '* ffi:int))))
      (let ((~arg-0 (unwrap~pointer arg-0))
            (~@82 (unwrap~pointer @82))
            (~fmt (unwrap~fixed fmt)))
        (~f ~arg-0 ~@82 ~fmt)))))
(export gdbm_dump_to_file)

;; extern int gdbm_load(GDBM_FILE *, const char *, int replace, int meta_flags
;;     , unsigned long *line);
(define gdbm_load
  (let ((~f #f))
    (lambda (@84 @83 replace meta_flags line)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_load"
                ffi:int
                (list '* '* ffi:int ffi:int '*))))
      (let ((~@84 (unwrap~pointer @84))
            (~@83 (unwrap~pointer @83))
            (~replace (unwrap~fixed replace))
            (~meta_flags (unwrap~fixed meta_flags))
            (~line (unwrap~pointer line)))
        (~f ~@84 ~@83 ~replace ~meta_flags ~line)))))
(export gdbm_load)

;; extern int gdbm_load_from_file(GDBM_FILE *, FILE *, int replace, int 
;;     meta_flags, unsigned long *line);
(define gdbm_load_from_file
  (let ((~f #f))
    (lambda (@86 @85 replace meta_flags line)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_load_from_file"
                ffi:int
                (list '* '* ffi:int ffi:int '*))))
      (let ((~@86 (unwrap~pointer @86))
            (~@85 (unwrap~pointer @85))
            (~replace (unwrap~fixed replace))
            (~meta_flags (unwrap~fixed meta_flags))
            (~line (unwrap~pointer line)))
        (~f ~@86 ~@85 ~replace ~meta_flags ~line)))))
(export gdbm_load_from_file)

;; extern int gdbm_copy_meta(GDBM_FILE dst, GDBM_FILE src);
(define gdbm_copy_meta
  (let ((~f #f))
    (lambda (dst src)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_copy_meta"
                ffi:int
                (list '* '*))))
      (let ((~dst (unwrap~pointer dst))
            (~src (unwrap~pointer src)))
        (~f ~dst ~src)))))
(export gdbm_copy_meta)

;; typedef int gdbm_error;
(define gdbm_error-desc int)
(export gdbm_error-desc)
(define unwrap-gdbm_error unwrap~fixed)
(define wrap-gdbm_error identity)
(export gdbm_error-desc unwrap-gdbm_error wrap-gdbm_error)

;; extern gdbm_error gdbm_errno;
(define gdbm_errno
  (let* ((bs* #f)
         (memoize-bs*
           (lambda ()
             (when (not addr)
                   (set! bs*
                     (make-bytestructure
                       (ffi:pointer->bytevector
                         (dynamic-pointer "gdbm_errno" (dynamic-link))
                         (ffi:sizeof '*))
                       0
                       (bs:pointer int)))))))
    (case-lambda
      (() (memoize-bs*) (bytestructure-ref bs* '*)))))
(export gdbm_errno)

;; extern const char *constgdbm_errlist[];
(define gdbm_errlist
  (let* ((bs* #f)
         (memoize-bs*
           (lambda ()
             (when (not addr)
                   (set! bs*
                     (make-bytestructure
                       (ffi:pointer->bytevector
                         (dynamic-pointer "gdbm_errlist" (dynamic-link))
                         (ffi:sizeof '*))
                       0
                       (bs:pointer (bs:pointer (bs:pointer int)))))))))
    (case-lambda
      (() (memoize-bs*) (bytestructure-ref bs* '*)))))
(export gdbm_errlist)

;; extern int const gdbm_syserr[];
(define gdbm_syserr
  (let* ((bs* #f)
         (memoize-bs*
           (lambda ()
             (when (not addr)
                   (set! bs*
                     (make-bytestructure
                       (ffi:pointer->bytevector
                         (dynamic-pointer "gdbm_syserr" (dynamic-link))
                         (ffi:sizeof '*))
                       0
                       (bs:pointer (bs:pointer int))))))))
    (case-lambda
      (() (memoize-bs*) (bytestructure-ref bs* '*)))))
(export gdbm_syserr)

;; extern gdbm_error gdbm_last_errno(GDBM_FILE dbf);
(define gdbm_last_errno
  (let ((~f #f))
    (lambda (dbf)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_last_errno"
                ffi:int
                (list '*))))
      (let ((~dbf (unwrap~pointer dbf))) (~f ~dbf)))))
(export gdbm_last_errno)

;; extern int gdbm_last_syserr(GDBM_FILE dbf);
(define gdbm_last_syserr
  (let ((~f #f))
    (lambda (dbf)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_last_syserr"
                ffi:int
                (list '*))))
      (let ((~dbf (unwrap~pointer dbf))) (~f ~dbf)))))
(export gdbm_last_syserr)

;; extern void gdbm_set_errno(GDBM_FILE dbf, gdbm_error ec, int fatal);
(define gdbm_set_errno
  (let ((~f #f))
    (lambda (dbf ec fatal)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_set_errno"
                ffi:void
                (list '* ffi:int ffi:int))))
      (let ((~dbf (unwrap~pointer dbf))
            (~ec (unwrap~fixed ec))
            (~fatal (unwrap~fixed fatal)))
        (~f ~dbf ~ec ~fatal)))))
(export gdbm_set_errno)

;; extern void gdbm_clear_error(GDBM_FILE dbf);
(define gdbm_clear_error
  (let ((~f #f))
    (lambda (dbf)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_clear_error"
                ffi:void
                (list '*))))
      (let ((~dbf (unwrap~pointer dbf))) (~f ~dbf)))))
(export gdbm_clear_error)

;; extern int gdbm_needs_recovery(GDBM_FILE dbf);
(define gdbm_needs_recovery
  (let ((~f #f))
    (lambda (dbf)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_needs_recovery"
                ffi:int
                (list '*))))
      (let ((~dbf (unwrap~pointer dbf))) (~f ~dbf)))))
(export gdbm_needs_recovery)

;; extern int gdbm_check_syserr(gdbm_error n);
(define gdbm_check_syserr
  (let ((~f #f))
    (lambda (n)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_check_syserr"
                ffi:int
                (list ffi:int))))
      (let ((~n (unwrap~fixed n))) (~f ~n)))))
(export gdbm_check_syserr)

;; extern const char *gdbm_strerror(gdbm_error);
(define gdbm_strerror
  (let ((~f #f))
    (lambda (arg-0)
      (when (not ~f)
            (set! ~f
              (fh-link-proc "gdbm_strerror" '* (list ffi:int))))
      (let ((~arg-0 (unwrap~fixed arg-0))) (~f ~arg-0)))))
(export gdbm_strerror)

;; extern const char *gdbm_db_strerror(GDBM_FILE dbf);
(define gdbm_db_strerror
  (let ((~f #f))
    (lambda (dbf)
      (when (not ~f)
            (set! ~f
              (fh-link-proc "gdbm_db_strerror" '* (list '*))))
      (let ((~dbf (unwrap~pointer dbf))) (~f ~dbf)))))
(export gdbm_db_strerror)

;; extern int gdbm_version_cmp(int const a[], int const b[]);
(define gdbm_version_cmp
  (let ((~f #f))
    (lambda (a b)
      (when (not ~f)
            (set! ~f
              (fh-link-proc
                "gdbm_version_cmp"
                ffi:int
                (list '* '*))))
      (let ((~a (unwrap~array a)) (~b (unwrap~array b)))
        (~f ~a ~b)))))
(export gdbm_version_cmp)

;; access to enum symbols and #define'd constants:
(define gdbm-symbol-val
  (let ((sym-tab
          '((GDBM_READER . 0)
            (GDBM_WRITER . 1)
            (GDBM_WRCREAT . 2)
            (GDBM_NEWDB . 3)
            (GDBM_OPENMASK . 7)
            (GDBM_FAST . 16)
            (GDBM_SYNC . 32)
            (GDBM_NOLOCK . 64)
            (GDBM_NOMMAP . 128)
            (GDBM_CLOEXEC . 256)
            (GDBM_BSEXACT . 512)
            (GDBM_CLOERROR . 1024)
            (GDBM_INSERT . 0)
            (GDBM_REPLACE . 1)
            (GDBM_SETCACHESIZE . 1)
            (GDBM_FASTMODE . 2)
            (GDBM_SETSYNCMODE . 3)
            (GDBM_SETCENTFREE . 4)
            (GDBM_SETCOALESCEBLKS . 5)
            (GDBM_SETMAXMAPSIZE . 6)
            (GDBM_SETMMAP . 7)
            (GDBM_CACHESIZE . 1)
            (GDBM_SYNCMODE . 3)
            (GDBM_CENTFREE . 4)
            (GDBM_COALESCEBLKS . 5)
            (GDBM_GETFLAGS . 8)
            (GDBM_GETMMAP . 9)
            (GDBM_GETCACHESIZE . 10)
            (GDBM_GETSYNCMODE . 11)
            (GDBM_GETCENTFREE . 12)
            (GDBM_GETCOALESCEBLKS . 13)
            (GDBM_GETMAXMAPSIZE . 14)
            (GDBM_GETDBNAME . 15)
            (GDBM_GETBLOCKSIZE . 16)
            (GDBM_VERSION_MAJOR . 1)
            (GDBM_VERSION_MINOR . 13)
            (GDBM_VERSION_PATCH . 0)
            (GDBM_RCVR_DEFAULT . 0)
            (GDBM_RCVR_ERRFUN . 1)
            (GDBM_RCVR_MAX_FAILED_KEYS . 2)
            (GDBM_RCVR_MAX_FAILED_BUCKETS . 4)
            (GDBM_RCVR_MAX_FAILURES . 8)
            (GDBM_RCVR_BACKUP . 16)
            (GDBM_RCVR_FORCE . 32)
            (GDBM_DUMP_FMT_BINARY . 0)
            (GDBM_DUMP_FMT_ASCII . 1)
            (GDBM_META_MASK_MODE . 1)
            (GDBM_META_MASK_OWNER . 2)
            (GDBM_NO_ERROR . 0)
            (GDBM_MALLOC_ERROR . 1)
            (GDBM_BLOCK_SIZE_ERROR . 2)
            (GDBM_FILE_OPEN_ERROR . 3)
            (GDBM_FILE_WRITE_ERROR . 4)
            (GDBM_FILE_SEEK_ERROR . 5)
            (GDBM_FILE_READ_ERROR . 6)
            (GDBM_BAD_MAGIC_NUMBER . 7)
            (GDBM_EMPTY_DATABASE . 8)
            (GDBM_CANT_BE_READER . 9)
            (GDBM_CANT_BE_WRITER . 10)
            (GDBM_READER_CANT_DELETE . 11)
            (GDBM_READER_CANT_STORE . 12)
            (GDBM_READER_CANT_REORGANIZE . 13)
            (GDBM_UNKNOWN_ERROR . 14)
            (GDBM_ITEM_NOT_FOUND . 15)
            (GDBM_REORGANIZE_FAILED . 16)
            (GDBM_CANNOT_REPLACE . 17)
            (GDBM_ILLEGAL_DATA . 18)
            (GDBM_OPT_ALREADY_SET . 19)
            (GDBM_OPT_ILLEGAL . 20)
            (GDBM_BYTE_SWAPPED . 21)
            (GDBM_BAD_FILE_OFFSET . 22)
            (GDBM_BAD_OPEN_FLAGS . 23)
            (GDBM_FILE_STAT_ERROR . 24)
            (GDBM_FILE_EOF . 25)
            (GDBM_NO_DBNAME . 26)
            (GDBM_ERR_FILE_OWNER . 27)
            (GDBM_ERR_FILE_MODE . 28)
            (GDBM_NEED_RECOVERY . 29)
            (GDBM_BACKUP_FAILED . 30)
            (GDBM_DIR_OVERFLOW . 31)
            (_GDBM_MIN_ERRNO . 0)
            (_GDBM_MAX_ERRNO . 31)
            (GDBM_UNKNOWN_UPDATE . 14))))
    (lambda (k) (assq-ref sym-tab k))))
(export gdbm-symbol-val)

(define (unwrap-enum obj)
  (cond ((number? obj) obj)
        ((symbol? obj) (gdbm-symbol-val obj))
        ((fh-object? obj) (struct-ref obj 0))
        (else (error "type mismatch"))))

(define gdbm-types
  '("datum" (struct . "gdbm_recovery_s") "gdbm_recovery"))
;;(export gdbmtypes)

(define unwrap-GDBM_FILE* unwrap-GDBM_FILE)

(define-fh-pointer-type
  gdbm_count_t*
  (bs:pointer gdbm_count_t-desc))

;; --- last line ---
