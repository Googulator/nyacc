;; auto-generated by ffi-help.scm

(define-module (gio gio)
  #:use-module (system ffi-help-rt)
  #:use-module ((system foreign) #:prefix ffi:)
  #:use-module (bytestructures guile)
  )
(dynamic-link "libgobject-2.0")
(dynamic-link "libglib-2.0")
(dynamic-link "libintl")
(dynamic-link "libgio-2.0")

;; typedef enum {
;;   G_APP_INFO_CREATE_NONE = 0,
;;   G_APP_INFO_CREATE_NEEDS_TERMINAL = 1<<0,
;;   G_APP_INFO_CREATE_SUPPORTS_URIS = 1<<1,
;;   G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 1<<2,
;; } GAppInfoCreateFlags;
(define-fh-enum GAppInfoCreateFlags
  '((G_APP_INFO_CREATE_NONE . 0)
    (G_APP_INFO_CREATE_NEEDS_TERMINAL . 1)
    (G_APP_INFO_CREATE_SUPPORTS_URIS . 2)
    (G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION
      .
      4))
  )

;; typedef enum {
;;   G_CONVERTER_NO_FLAGS = 0,
;;   G_CONVERTER_INPUT_AT_END = 1<<0,
;;   G_CONVERTER_FLUSH = 1<<1,
;; } GConverterFlags;
(define-fh-enum GConverterFlags
  '((G_CONVERTER_NO_FLAGS . 0)
    (G_CONVERTER_INPUT_AT_END . 1)
    (G_CONVERTER_FLUSH . 2))
  )

;; typedef enum {
;;   G_CONVERTER_ERROR = 0,
;;   G_CONVERTER_CONVERTED = 1,
;;   G_CONVERTER_FINISHED = 2,
;;   G_CONVERTER_FLUSHED = 3,
;; } GConverterResult;
(define-fh-enum GConverterResult
  '((G_CONVERTER_ERROR . 0)
    (G_CONVERTER_CONVERTED . 1)
    (G_CONVERTER_FINISHED . 2)
    (G_CONVERTER_FLUSHED . 3))
  )

;; typedef enum {
;;   G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN,
;;   G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN,
;;   G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN,
;; } GDataStreamByteOrder;
(define-fh-enum GDataStreamByteOrder
  '((G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN . 0)
    (G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN . 1)
    (G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN . 2))
  )

;; typedef enum {
;;   G_DATA_STREAM_NEWLINE_TYPE_LF,
;;   G_DATA_STREAM_NEWLINE_TYPE_CR,
;;   G_DATA_STREAM_NEWLINE_TYPE_CR_LF,
;;   G_DATA_STREAM_NEWLINE_TYPE_ANY,
;; } GDataStreamNewlineType;
(define-fh-enum GDataStreamNewlineType
  '((G_DATA_STREAM_NEWLINE_TYPE_LF . 0)
    (G_DATA_STREAM_NEWLINE_TYPE_CR . 1)
    (G_DATA_STREAM_NEWLINE_TYPE_CR_LF . 2)
    (G_DATA_STREAM_NEWLINE_TYPE_ANY . 3))
  )

;; typedef enum {
;;   G_FILE_ATTRIBUTE_TYPE_INVALID = 0,
;;   G_FILE_ATTRIBUTE_TYPE_STRING,
;;   G_FILE_ATTRIBUTE_TYPE_BYTE_STRING,
;;   G_FILE_ATTRIBUTE_TYPE_BOOLEAN,
;;   G_FILE_ATTRIBUTE_TYPE_UINT32,
;;   G_FILE_ATTRIBUTE_TYPE_INT32,
;;   G_FILE_ATTRIBUTE_TYPE_UINT64,
;;   G_FILE_ATTRIBUTE_TYPE_INT64,
;;   G_FILE_ATTRIBUTE_TYPE_OBJECT,
;;   G_FILE_ATTRIBUTE_TYPE_STRINGV,
;; } GFileAttributeType;
(define-fh-enum GFileAttributeType
  '((G_FILE_ATTRIBUTE_TYPE_INVALID . 0)
    (G_FILE_ATTRIBUTE_TYPE_STRING . 1)
    (G_FILE_ATTRIBUTE_TYPE_BYTE_STRING . 2)
    (G_FILE_ATTRIBUTE_TYPE_BOOLEAN . 3)
    (G_FILE_ATTRIBUTE_TYPE_UINT32 . 4)
    (G_FILE_ATTRIBUTE_TYPE_INT32 . 5)
    (G_FILE_ATTRIBUTE_TYPE_UINT64 . 6)
    (G_FILE_ATTRIBUTE_TYPE_INT64 . 7)
    (G_FILE_ATTRIBUTE_TYPE_OBJECT . 8)
    (G_FILE_ATTRIBUTE_TYPE_STRINGV . 9))
  )

;; typedef enum {
;;   G_FILE_ATTRIBUTE_INFO_NONE = 0,
;;   G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1<<0,
;;   G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 1<<1,
;; } GFileAttributeInfoFlags;
(define-fh-enum GFileAttributeInfoFlags
  '((G_FILE_ATTRIBUTE_INFO_NONE . 0)
    (G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE . 1)
    (G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED . 2))
  )

;; typedef enum {
;;   G_FILE_ATTRIBUTE_STATUS_UNSET = 0,
;;   G_FILE_ATTRIBUTE_STATUS_SET,
;;   G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING,
;; } GFileAttributeStatus;
(define-fh-enum GFileAttributeStatus
  '((G_FILE_ATTRIBUTE_STATUS_UNSET . 0)
    (G_FILE_ATTRIBUTE_STATUS_SET . 1)
    (G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING . 2))
  )

;; typedef enum {
;;   G_FILE_QUERY_INFO_NONE = 0,
;;   G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1<<0,
;; } GFileQueryInfoFlags;
(define-fh-enum GFileQueryInfoFlags
  '((G_FILE_QUERY_INFO_NONE . 0)
    (G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS . 1))
  )

;; typedef enum {
;;   G_FILE_CREATE_NONE = 0,
;;   G_FILE_CREATE_PRIVATE = 1<<0,
;;   G_FILE_CREATE_REPLACE_DESTINATION = 1<<1,
;; } GFileCreateFlags;
(define-fh-enum GFileCreateFlags
  '((G_FILE_CREATE_NONE . 0)
    (G_FILE_CREATE_PRIVATE . 1)
    (G_FILE_CREATE_REPLACE_DESTINATION . 2))
  )

;; typedef enum {
;;   G_FILE_MEASURE_NONE = 0,
;;   G_FILE_MEASURE_REPORT_ANY_ERROR = 1<<1,
;;   G_FILE_MEASURE_APPARENT_SIZE = 1<<2,
;;   G_FILE_MEASURE_NO_XDEV = 1<<3,
;; } GFileMeasureFlags;
(define-fh-enum GFileMeasureFlags
  '((G_FILE_MEASURE_NONE . 0)
    (G_FILE_MEASURE_REPORT_ANY_ERROR . 2)
    (G_FILE_MEASURE_APPARENT_SIZE . 4)
    (G_FILE_MEASURE_NO_XDEV . 8))
  )

;; typedef enum {
;;   G_MOUNT_MOUNT_NONE = 0,
;; } GMountMountFlags;
(define-fh-enum GMountMountFlags
  '((G_MOUNT_MOUNT_NONE . 0))
  )

;; typedef enum {
;;   G_MOUNT_UNMOUNT_NONE = 0,
;;   G_MOUNT_UNMOUNT_FORCE = 1<<0,
;; } GMountUnmountFlags;
(define-fh-enum GMountUnmountFlags
  '((G_MOUNT_UNMOUNT_NONE . 0)
    (G_MOUNT_UNMOUNT_FORCE . 1))
  )

;; typedef enum {
;;   G_DRIVE_START_NONE = 0,
;; } GDriveStartFlags;
(define-fh-enum GDriveStartFlags
  '((G_DRIVE_START_NONE . 0))
  )

;; typedef enum {
;;   G_DRIVE_START_STOP_TYPE_UNKNOWN,
;;   G_DRIVE_START_STOP_TYPE_SHUTDOWN,
;;   G_DRIVE_START_STOP_TYPE_NETWORK,
;;   G_DRIVE_START_STOP_TYPE_MULTIDISK,
;;   G_DRIVE_START_STOP_TYPE_PASSWORD,
;; } GDriveStartStopType;
(define-fh-enum GDriveStartStopType
  '((G_DRIVE_START_STOP_TYPE_UNKNOWN . 0)
    (G_DRIVE_START_STOP_TYPE_SHUTDOWN . 1)
    (G_DRIVE_START_STOP_TYPE_NETWORK . 2)
    (G_DRIVE_START_STOP_TYPE_MULTIDISK . 3)
    (G_DRIVE_START_STOP_TYPE_PASSWORD . 4))
  )

;; typedef enum {
;;   G_FILE_COPY_NONE = 0,
;;   G_FILE_COPY_OVERWRITE = 1<<0,
;;   G_FILE_COPY_BACKUP = 1<<1,
;;   G_FILE_COPY_NOFOLLOW_SYMLINKS = 1<<2,
;;   G_FILE_COPY_ALL_METADATA = 1<<3,
;;   G_FILE_COPY_NO_FALLBACK_FOR_MOVE = 1<<4,
;;   G_FILE_COPY_TARGET_DEFAULT_PERMS = 1<<5,
;; } GFileCopyFlags;
(define-fh-enum GFileCopyFlags
  '((G_FILE_COPY_NONE . 0)
    (G_FILE_COPY_OVERWRITE . 1)
    (G_FILE_COPY_BACKUP . 2)
    (G_FILE_COPY_NOFOLLOW_SYMLINKS . 4)
    (G_FILE_COPY_ALL_METADATA . 8)
    (G_FILE_COPY_NO_FALLBACK_FOR_MOVE . 16)
    (G_FILE_COPY_TARGET_DEFAULT_PERMS . 32))
  )

;; typedef enum {
;;   G_FILE_MONITOR_NONE = 0,
;;   G_FILE_MONITOR_WATCH_MOUNTS = 1<<0,
;;   G_FILE_MONITOR_SEND_MOVED = 1<<1,
;;   G_FILE_MONITOR_WATCH_HARD_LINKS = 1<<2,
;;   G_FILE_MONITOR_WATCH_MOVES = 1<<3,
;; } GFileMonitorFlags;
(define-fh-enum GFileMonitorFlags
  '((G_FILE_MONITOR_NONE . 0)
    (G_FILE_MONITOR_WATCH_MOUNTS . 1)
    (G_FILE_MONITOR_SEND_MOVED . 2)
    (G_FILE_MONITOR_WATCH_HARD_LINKS . 4)
    (G_FILE_MONITOR_WATCH_MOVES . 8))
  )

;; typedef enum {
;;   G_FILE_TYPE_UNKNOWN = 0,
;;   G_FILE_TYPE_REGULAR,
;;   G_FILE_TYPE_DIRECTORY,
;;   G_FILE_TYPE_SYMBOLIC_LINK,
;;   G_FILE_TYPE_SPECIAL,
;;   G_FILE_TYPE_SHORTCUT,
;;   G_FILE_TYPE_MOUNTABLE,
;; } GFileType;
(define-fh-enum GFileType
  '((G_FILE_TYPE_UNKNOWN . 0)
    (G_FILE_TYPE_REGULAR . 1)
    (G_FILE_TYPE_DIRECTORY . 2)
    (G_FILE_TYPE_SYMBOLIC_LINK . 3)
    (G_FILE_TYPE_SPECIAL . 4)
    (G_FILE_TYPE_SHORTCUT . 5)
    (G_FILE_TYPE_MOUNTABLE . 6))
  )

;; typedef enum {
;;   G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
;;   G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL,
;;   G_FILESYSTEM_PREVIEW_TYPE_NEVER,
;; } GFilesystemPreviewType;
(define-fh-enum GFilesystemPreviewType
  '((G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS . 0)
    (G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL . 1)
    (G_FILESYSTEM_PREVIEW_TYPE_NEVER . 2))
  )

;; typedef enum {
;;   G_FILE_MONITOR_EVENT_CHANGED,
;;   G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT,
;;   G_FILE_MONITOR_EVENT_DELETED,
;;   G_FILE_MONITOR_EVENT_CREATED,
;;   G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED,
;;   G_FILE_MONITOR_EVENT_PRE_UNMOUNT,
;;   G_FILE_MONITOR_EVENT_UNMOUNTED,
;;   G_FILE_MONITOR_EVENT_MOVED,
;;   G_FILE_MONITOR_EVENT_RENAMED,
;;   G_FILE_MONITOR_EVENT_MOVED_IN,
;;   G_FILE_MONITOR_EVENT_MOVED_OUT,
;; } GFileMonitorEvent;
(define-fh-enum GFileMonitorEvent
  '((G_FILE_MONITOR_EVENT_CHANGED . 0)
    (G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT . 1)
    (G_FILE_MONITOR_EVENT_DELETED . 2)
    (G_FILE_MONITOR_EVENT_CREATED . 3)
    (G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED . 4)
    (G_FILE_MONITOR_EVENT_PRE_UNMOUNT . 5)
    (G_FILE_MONITOR_EVENT_UNMOUNTED . 6)
    (G_FILE_MONITOR_EVENT_MOVED . 7)
    (G_FILE_MONITOR_EVENT_RENAMED . 8)
    (G_FILE_MONITOR_EVENT_MOVED_IN . 9)
    (G_FILE_MONITOR_EVENT_MOVED_OUT . 10))
  )

;; typedef enum {
;;   G_IO_ERROR_FAILED,
;;   G_IO_ERROR_NOT_FOUND,
;;   G_IO_ERROR_EXISTS,
;;   G_IO_ERROR_IS_DIRECTORY,
;;   G_IO_ERROR_NOT_DIRECTORY,
;;   G_IO_ERROR_NOT_EMPTY,
;;   G_IO_ERROR_NOT_REGULAR_FILE,
;;   G_IO_ERROR_NOT_SYMBOLIC_LINK,
;;   G_IO_ERROR_NOT_MOUNTABLE_FILE,
;;   G_IO_ERROR_FILENAME_TOO_LONG,
;;   G_IO_ERROR_INVALID_FILENAME,
;;   G_IO_ERROR_TOO_MANY_LINKS,
;;   G_IO_ERROR_NO_SPACE,
;;   G_IO_ERROR_INVALID_ARGUMENT,
;;   G_IO_ERROR_PERMISSION_DENIED,
;;   G_IO_ERROR_NOT_SUPPORTED,
;;   G_IO_ERROR_NOT_MOUNTED,
;;   G_IO_ERROR_ALREADY_MOUNTED,
;;   G_IO_ERROR_CLOSED,
;;   G_IO_ERROR_CANCELLED,
;;   G_IO_ERROR_PENDING,
;;   G_IO_ERROR_READ_ONLY,
;;   G_IO_ERROR_CANT_CREATE_BACKUP,
;;   G_IO_ERROR_WRONG_ETAG,
;;   G_IO_ERROR_TIMED_OUT,
;;   G_IO_ERROR_WOULD_RECURSE,
;;   G_IO_ERROR_BUSY,
;;   G_IO_ERROR_WOULD_BLOCK,
;;   G_IO_ERROR_HOST_NOT_FOUND,
;;   G_IO_ERROR_WOULD_MERGE,
;;   G_IO_ERROR_FAILED_HANDLED,
;;   G_IO_ERROR_TOO_MANY_OPEN_FILES,
;;   G_IO_ERROR_NOT_INITIALIZED,
;;   G_IO_ERROR_ADDRESS_IN_USE,
;;   G_IO_ERROR_PARTIAL_INPUT,
;;   G_IO_ERROR_INVALID_DATA,
;;   G_IO_ERROR_DBUS_ERROR,
;;   G_IO_ERROR_HOST_UNREACHABLE,
;;   G_IO_ERROR_NETWORK_UNREACHABLE,
;;   G_IO_ERROR_CONNECTION_REFUSED,
;;   G_IO_ERROR_PROXY_FAILED,
;;   G_IO_ERROR_PROXY_AUTH_FAILED,
;;   G_IO_ERROR_PROXY_NEED_AUTH,
;;   G_IO_ERROR_PROXY_NOT_ALLOWED,
;;   G_IO_ERROR_BROKEN_PIPE,
;;   G_IO_ERROR_CONNECTION_CLOSED = G_IO_ERROR_BROKEN_PIPE,
;;   G_IO_ERROR_NOT_CONNECTED,
;;   G_IO_ERROR_MESSAGE_TOO_LARGE,
;; } GIOErrorEnum;
(define-fh-enum GIOErrorEnum
  '((G_IO_ERROR_FAILED . 1)
    (G_IO_ERROR_NOT_FOUND . 2)
    (G_IO_ERROR_EXISTS . 3)
    (G_IO_ERROR_IS_DIRECTORY . 4)
    (G_IO_ERROR_NOT_DIRECTORY . 5)
    (G_IO_ERROR_NOT_EMPTY . 6)
    (G_IO_ERROR_NOT_REGULAR_FILE . 7)
    (G_IO_ERROR_NOT_SYMBOLIC_LINK . 8)
    (G_IO_ERROR_NOT_MOUNTABLE_FILE . 9)
    (G_IO_ERROR_FILENAME_TOO_LONG . 10)
    (G_IO_ERROR_INVALID_FILENAME . 11)
    (G_IO_ERROR_TOO_MANY_LINKS . 12)
    (G_IO_ERROR_NO_SPACE . 13)
    (G_IO_ERROR_INVALID_ARGUMENT . 14)
    (G_IO_ERROR_PERMISSION_DENIED . 15)
    (G_IO_ERROR_NOT_SUPPORTED . 16)
    (G_IO_ERROR_NOT_MOUNTED . 17)
    (G_IO_ERROR_ALREADY_MOUNTED . 18)
    (G_IO_ERROR_CLOSED . 19)
    (G_IO_ERROR_CANCELLED . 20)
    (G_IO_ERROR_PENDING . 21)
    (G_IO_ERROR_READ_ONLY . 22)
    (G_IO_ERROR_CANT_CREATE_BACKUP . 23)
    (G_IO_ERROR_WRONG_ETAG . 24)
    (G_IO_ERROR_TIMED_OUT . 25)
    (G_IO_ERROR_WOULD_RECURSE . 26)
    (G_IO_ERROR_BUSY . 27)
    (G_IO_ERROR_WOULD_BLOCK . 28)
    (G_IO_ERROR_HOST_NOT_FOUND . 29)
    (G_IO_ERROR_WOULD_MERGE . 30)
    (G_IO_ERROR_FAILED_HANDLED . 31)
    (G_IO_ERROR_TOO_MANY_OPEN_FILES . 32)
    (G_IO_ERROR_NOT_INITIALIZED . 33)
    (G_IO_ERROR_ADDRESS_IN_USE . 34)
    (G_IO_ERROR_PARTIAL_INPUT . 35)
    (G_IO_ERROR_INVALID_DATA . 36)
    (G_IO_ERROR_DBUS_ERROR . 37)
    (G_IO_ERROR_HOST_UNREACHABLE . 38)
    (G_IO_ERROR_NETWORK_UNREACHABLE . 39)
    (G_IO_ERROR_CONNECTION_REFUSED . 40)
    (G_IO_ERROR_PROXY_FAILED . 41)
    (G_IO_ERROR_PROXY_AUTH_FAILED . 42)
    (G_IO_ERROR_PROXY_NEED_AUTH . 43)
    (G_IO_ERROR_PROXY_NOT_ALLOWED . 44)
    (G_IO_ERROR_BROKEN_PIPE . 45)
    (G_IO_ERROR_CONNECTION_CLOSED . 0)
    (G_IO_ERROR_NOT_CONNECTED . 46)
    (G_IO_ERROR_MESSAGE_TOO_LARGE . 47))
  )

;; typedef enum {
;;   G_ASK_PASSWORD_NEED_PASSWORD = 1<<0,
;;   G_ASK_PASSWORD_NEED_USERNAME = 1<<1,
;;   G_ASK_PASSWORD_NEED_DOMAIN = 1<<2,
;;   G_ASK_PASSWORD_SAVING_SUPPORTED = 1<<3,
;;   G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 1<<4,
;; } GAskPasswordFlags;
(define-fh-enum GAskPasswordFlags
  '((G_ASK_PASSWORD_NEED_PASSWORD . 1)
    (G_ASK_PASSWORD_NEED_USERNAME . 2)
    (G_ASK_PASSWORD_NEED_DOMAIN . 4)
    (G_ASK_PASSWORD_SAVING_SUPPORTED . 8)
    (G_ASK_PASSWORD_ANONYMOUS_SUPPORTED . 16))
  )

;; typedef enum {
;;   G_PASSWORD_SAVE_NEVER,
;;   G_PASSWORD_SAVE_FOR_SESSION,
;;   G_PASSWORD_SAVE_PERMANENTLY,
;; } GPasswordSave;
(define-fh-enum GPasswordSave
  '((G_PASSWORD_SAVE_NEVER . 0)
    (G_PASSWORD_SAVE_FOR_SESSION . 1)
    (G_PASSWORD_SAVE_PERMANENTLY . 2))
  )

;; typedef enum {
;;   G_MOUNT_OPERATION_HANDLED,
;;   G_MOUNT_OPERATION_ABORTED,
;;   G_MOUNT_OPERATION_UNHANDLED,
;; } GMountOperationResult;
(define-fh-enum GMountOperationResult
  '((G_MOUNT_OPERATION_HANDLED . 0)
    (G_MOUNT_OPERATION_ABORTED . 1)
    (G_MOUNT_OPERATION_UNHANDLED . 2))
  )

;; typedef enum {
;;   G_OUTPUT_STREAM_SPLICE_NONE = 0,
;;   G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1<<0,
;;   G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 1<<1,
;; } GOutputStreamSpliceFlags;
(define-fh-enum GOutputStreamSpliceFlags
  '((G_OUTPUT_STREAM_SPLICE_NONE . 0)
    (G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE . 1)
    (G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET . 2))
  )

;; typedef enum {
;;   G_IO_STREAM_SPLICE_NONE = 0,
;;   G_IO_STREAM_SPLICE_CLOSE_STREAM1 = 1<<0,
;;   G_IO_STREAM_SPLICE_CLOSE_STREAM2 = 1<<1,
;;   G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = 1<<2,
;; } GIOStreamSpliceFlags;
(define-fh-enum GIOStreamSpliceFlags
  '((G_IO_STREAM_SPLICE_NONE . 0)
    (G_IO_STREAM_SPLICE_CLOSE_STREAM1 . 1)
    (G_IO_STREAM_SPLICE_CLOSE_STREAM2 . 2)
    (G_IO_STREAM_SPLICE_WAIT_FOR_BOTH . 4))
  )

;; typedef enum {
;;   G_EMBLEM_ORIGIN_UNKNOWN,
;;   G_EMBLEM_ORIGIN_DEVICE,
;;   G_EMBLEM_ORIGIN_LIVEMETADATA,
;;   G_EMBLEM_ORIGIN_TAG,
;; } GEmblemOrigin;
(define-fh-enum GEmblemOrigin
  '((G_EMBLEM_ORIGIN_UNKNOWN . 0)
    (G_EMBLEM_ORIGIN_DEVICE . 1)
    (G_EMBLEM_ORIGIN_LIVEMETADATA . 2)
    (G_EMBLEM_ORIGIN_TAG . 3))
  )

;; typedef enum {
;;   G_RESOLVER_ERROR_NOT_FOUND,
;;   G_RESOLVER_ERROR_TEMPORARY_FAILURE,
;;   G_RESOLVER_ERROR_INTERNAL,
;; } GResolverError;
(define-fh-enum GResolverError
  '((G_RESOLVER_ERROR_NOT_FOUND . 0)
    (G_RESOLVER_ERROR_TEMPORARY_FAILURE . 1)
    (G_RESOLVER_ERROR_INTERNAL . 2))
  )

;; typedef enum {
;;   G_RESOLVER_RECORD_SRV = 1,
;;   G_RESOLVER_RECORD_MX,
;;   G_RESOLVER_RECORD_TXT,
;;   G_RESOLVER_RECORD_SOA,
;;   G_RESOLVER_RECORD_NS,
;; } GResolverRecordType;
(define-fh-enum GResolverRecordType
  '((G_RESOLVER_RECORD_SRV . 1)
    (G_RESOLVER_RECORD_MX . 0)
    (G_RESOLVER_RECORD_TXT . 2)
    (G_RESOLVER_RECORD_SOA . 3)
    (G_RESOLVER_RECORD_NS . 4))
  )

;; typedef enum {
;;   G_RESOURCE_ERROR_NOT_FOUND,
;;   G_RESOURCE_ERROR_INTERNAL,
;; } GResourceError;
(define-fh-enum GResourceError
  '((G_RESOURCE_ERROR_NOT_FOUND . 0)
    (G_RESOURCE_ERROR_INTERNAL . 1))
  )

;; typedef enum {
;;   G_RESOURCE_FLAGS_NONE = 0,
;;   G_RESOURCE_FLAGS_COMPRESSED = 1<<0,
;; } GResourceFlags;
(define-fh-enum GResourceFlags
  '((G_RESOURCE_FLAGS_NONE . 0)
    (G_RESOURCE_FLAGS_COMPRESSED . 1))
  )

;; typedef enum {
;;   G_RESOURCE_LOOKUP_FLAGS_NONE = 0,
;; } GResourceLookupFlags;
(define-fh-enum GResourceLookupFlags
  '((G_RESOURCE_LOOKUP_FLAGS_NONE . 0))
  )

;; typedef enum {
;;   G_SOCKET_FAMILY_INVALID,
;;   G_SOCKET_FAMILY_UNIX = 1,
;;   G_SOCKET_FAMILY_IPV4 = 2,
;;   G_SOCKET_FAMILY_IPV6 = 30,
;; } GSocketFamily;
(define-fh-enum GSocketFamily
  '((G_SOCKET_FAMILY_INVALID . 0)
    (G_SOCKET_FAMILY_UNIX . 1)
    (G_SOCKET_FAMILY_IPV4 . 2)
    (G_SOCKET_FAMILY_IPV6 . 30))
  )

;; typedef enum {
;;   G_SOCKET_TYPE_INVALID,
;;   G_SOCKET_TYPE_STREAM,
;;   G_SOCKET_TYPE_DATAGRAM,
;;   G_SOCKET_TYPE_SEQPACKET,
;; } GSocketType;
(define-fh-enum GSocketType
  '((G_SOCKET_TYPE_INVALID . 0)
    (G_SOCKET_TYPE_STREAM . 1)
    (G_SOCKET_TYPE_DATAGRAM . 2)
    (G_SOCKET_TYPE_SEQPACKET . 3))
  )

;; typedef enum {
;;   G_SOCKET_MSG_NONE,
;;   G_SOCKET_MSG_OOB = 1,
;;   G_SOCKET_MSG_PEEK = 2,
;;   G_SOCKET_MSG_DONTROUTE = 4,
;; } GSocketMsgFlags;
(define-fh-enum GSocketMsgFlags
  '((G_SOCKET_MSG_NONE . 0)
    (G_SOCKET_MSG_OOB . 1)
    (G_SOCKET_MSG_PEEK . 2)
    (G_SOCKET_MSG_DONTROUTE . 4))
  )

;; typedef enum {
;;   G_SOCKET_PROTOCOL_UNKNOWN = -1,
;;   G_SOCKET_PROTOCOL_DEFAULT = 0,
;;   G_SOCKET_PROTOCOL_TCP = 6,
;;   G_SOCKET_PROTOCOL_UDP = 17,
;;   G_SOCKET_PROTOCOL_SCTP = 132,
;; } GSocketProtocol;
(define-fh-enum GSocketProtocol
  '((G_SOCKET_PROTOCOL_UNKNOWN . -1)
    (G_SOCKET_PROTOCOL_DEFAULT . 0)
    (G_SOCKET_PROTOCOL_TCP . 6)
    (G_SOCKET_PROTOCOL_UDP . 17)
    (G_SOCKET_PROTOCOL_SCTP . 132))
  )

;; typedef enum {
;;   G_ZLIB_COMPRESSOR_FORMAT_ZLIB,
;;   G_ZLIB_COMPRESSOR_FORMAT_GZIP,
;;   G_ZLIB_COMPRESSOR_FORMAT_RAW,
;; } GZlibCompressorFormat;
(define-fh-enum GZlibCompressorFormat
  '((G_ZLIB_COMPRESSOR_FORMAT_ZLIB . 0)
    (G_ZLIB_COMPRESSOR_FORMAT_GZIP . 1)
    (G_ZLIB_COMPRESSOR_FORMAT_RAW . 2))
  )

;; typedef enum {
;;   G_UNIX_SOCKET_ADDRESS_INVALID,
;;   G_UNIX_SOCKET_ADDRESS_ANONYMOUS,
;;   G_UNIX_SOCKET_ADDRESS_PATH,
;;   G_UNIX_SOCKET_ADDRESS_ABSTRACT,
;;   G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED,
;; } GUnixSocketAddressType;
(define-fh-enum GUnixSocketAddressType
  '((G_UNIX_SOCKET_ADDRESS_INVALID . 0)
    (G_UNIX_SOCKET_ADDRESS_ANONYMOUS . 1)
    (G_UNIX_SOCKET_ADDRESS_PATH . 2)
    (G_UNIX_SOCKET_ADDRESS_ABSTRACT . 3)
    (G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED . 4))
  )

;; typedef enum {
;;   G_BUS_TYPE_STARTER = -1,
;;   G_BUS_TYPE_NONE = 0,
;;   G_BUS_TYPE_SYSTEM = 1,
;;   G_BUS_TYPE_SESSION = 2,
;; } GBusType;
(define-fh-enum GBusType
  '((G_BUS_TYPE_STARTER . -1)
    (G_BUS_TYPE_NONE . 0)
    (G_BUS_TYPE_SYSTEM . 1)
    (G_BUS_TYPE_SESSION . 2))
  )

;; typedef enum {
;;   G_BUS_NAME_OWNER_FLAGS_NONE = 0,
;;   G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1<<0,
;;   G_BUS_NAME_OWNER_FLAGS_REPLACE = 1<<1,
;; } GBusNameOwnerFlags;
(define-fh-enum GBusNameOwnerFlags
  '((G_BUS_NAME_OWNER_FLAGS_NONE . 0)
    (G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT . 1)
    (G_BUS_NAME_OWNER_FLAGS_REPLACE . 2))
  )

;; typedef enum {
;;   G_BUS_NAME_WATCHER_FLAGS_NONE = 0,
;;   G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1<<0,
;; } GBusNameWatcherFlags;
(define-fh-enum GBusNameWatcherFlags
  '((G_BUS_NAME_WATCHER_FLAGS_NONE . 0)
    (G_BUS_NAME_WATCHER_FLAGS_AUTO_START . 1))
  )

;; typedef enum {
;;   G_DBUS_PROXY_FLAGS_NONE = 0,
;;   G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1<<0,
;;   G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 1<<1,
;;   G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 1<<2,
;;   G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = 1<<3,
;;   G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = 1<<4,
;; } GDBusProxyFlags;
(define-fh-enum GDBusProxyFlags
  '((G_DBUS_PROXY_FLAGS_NONE . 0)
    (G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES . 1)
    (G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS . 2)
    (G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START . 4)
    (G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES
      .
      8)
    (G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION
      .
      16))
  )

;; typedef enum {
;;   G_DBUS_ERROR_FAILED,
;;   G_DBUS_ERROR_NO_MEMORY,
;;   G_DBUS_ERROR_SERVICE_UNKNOWN,
;;   G_DBUS_ERROR_NAME_HAS_NO_OWNER,
;;   G_DBUS_ERROR_NO_REPLY,
;;   G_DBUS_ERROR_IO_ERROR,
;;   G_DBUS_ERROR_BAD_ADDRESS,
;;   G_DBUS_ERROR_NOT_SUPPORTED,
;;   G_DBUS_ERROR_LIMITS_EXCEEDED,
;;   G_DBUS_ERROR_ACCESS_DENIED,
;;   G_DBUS_ERROR_AUTH_FAILED,
;;   G_DBUS_ERROR_NO_SERVER,
;;   G_DBUS_ERROR_TIMEOUT,
;;   G_DBUS_ERROR_NO_NETWORK,
;;   G_DBUS_ERROR_ADDRESS_IN_USE,
;;   G_DBUS_ERROR_DISCONNECTED,
;;   G_DBUS_ERROR_INVALID_ARGS,
;;   G_DBUS_ERROR_FILE_NOT_FOUND,
;;   G_DBUS_ERROR_FILE_EXISTS,
;;   G_DBUS_ERROR_UNKNOWN_METHOD,
;;   G_DBUS_ERROR_TIMED_OUT,
;;   G_DBUS_ERROR_MATCH_RULE_NOT_FOUND,
;;   G_DBUS_ERROR_MATCH_RULE_INVALID,
;;   G_DBUS_ERROR_SPAWN_EXEC_FAILED,
;;   G_DBUS_ERROR_SPAWN_FORK_FAILED,
;;   G_DBUS_ERROR_SPAWN_CHILD_EXITED,
;;   G_DBUS_ERROR_SPAWN_CHILD_SIGNALED,
;;   G_DBUS_ERROR_SPAWN_FAILED,
;;   G_DBUS_ERROR_SPAWN_SETUP_FAILED,
;;   G_DBUS_ERROR_SPAWN_CONFIG_INVALID,
;;   G_DBUS_ERROR_SPAWN_SERVICE_INVALID,
;;   G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND,
;;   G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID,
;;   G_DBUS_ERROR_SPAWN_FILE_INVALID,
;;   G_DBUS_ERROR_SPAWN_NO_MEMORY,
;;   G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN,
;;   G_DBUS_ERROR_INVALID_SIGNATURE,
;;   G_DBUS_ERROR_INVALID_FILE_CONTENT,
;;   G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN,
;;   G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN,
;;   G_DBUS_ERROR_OBJECT_PATH_IN_USE,
;;   G_DBUS_ERROR_UNKNOWN_OBJECT,
;;   G_DBUS_ERROR_UNKNOWN_INTERFACE,
;;   G_DBUS_ERROR_UNKNOWN_PROPERTY,
;;   G_DBUS_ERROR_PROPERTY_READ_ONLY,
;; } GDBusError;
(define-fh-enum GDBusError
  '((G_DBUS_ERROR_FAILED . 0)
    (G_DBUS_ERROR_NO_MEMORY . 1)
    (G_DBUS_ERROR_SERVICE_UNKNOWN . 2)
    (G_DBUS_ERROR_NAME_HAS_NO_OWNER . 3)
    (G_DBUS_ERROR_NO_REPLY . 4)
    (G_DBUS_ERROR_IO_ERROR . 5)
    (G_DBUS_ERROR_BAD_ADDRESS . 6)
    (G_DBUS_ERROR_NOT_SUPPORTED . 7)
    (G_DBUS_ERROR_LIMITS_EXCEEDED . 8)
    (G_DBUS_ERROR_ACCESS_DENIED . 9)
    (G_DBUS_ERROR_AUTH_FAILED . 10)
    (G_DBUS_ERROR_NO_SERVER . 11)
    (G_DBUS_ERROR_TIMEOUT . 12)
    (G_DBUS_ERROR_NO_NETWORK . 13)
    (G_DBUS_ERROR_ADDRESS_IN_USE . 14)
    (G_DBUS_ERROR_DISCONNECTED . 15)
    (G_DBUS_ERROR_INVALID_ARGS . 16)
    (G_DBUS_ERROR_FILE_NOT_FOUND . 17)
    (G_DBUS_ERROR_FILE_EXISTS . 18)
    (G_DBUS_ERROR_UNKNOWN_METHOD . 19)
    (G_DBUS_ERROR_TIMED_OUT . 20)
    (G_DBUS_ERROR_MATCH_RULE_NOT_FOUND . 21)
    (G_DBUS_ERROR_MATCH_RULE_INVALID . 22)
    (G_DBUS_ERROR_SPAWN_EXEC_FAILED . 23)
    (G_DBUS_ERROR_SPAWN_FORK_FAILED . 24)
    (G_DBUS_ERROR_SPAWN_CHILD_EXITED . 25)
    (G_DBUS_ERROR_SPAWN_CHILD_SIGNALED . 26)
    (G_DBUS_ERROR_SPAWN_FAILED . 27)
    (G_DBUS_ERROR_SPAWN_SETUP_FAILED . 28)
    (G_DBUS_ERROR_SPAWN_CONFIG_INVALID . 29)
    (G_DBUS_ERROR_SPAWN_SERVICE_INVALID . 30)
    (G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND . 31)
    (G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID . 32)
    (G_DBUS_ERROR_SPAWN_FILE_INVALID . 33)
    (G_DBUS_ERROR_SPAWN_NO_MEMORY . 34)
    (G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN . 35)
    (G_DBUS_ERROR_INVALID_SIGNATURE . 36)
    (G_DBUS_ERROR_INVALID_FILE_CONTENT . 37)
    (G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN
      .
      38)
    (G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN . 39)
    (G_DBUS_ERROR_OBJECT_PATH_IN_USE . 40)
    (G_DBUS_ERROR_UNKNOWN_OBJECT . 41)
    (G_DBUS_ERROR_UNKNOWN_INTERFACE . 42)
    (G_DBUS_ERROR_UNKNOWN_PROPERTY . 43)
    (G_DBUS_ERROR_PROPERTY_READ_ONLY . 44))
  )

;; typedef enum {
;;   G_DBUS_CONNECTION_FLAGS_NONE = 0,
;;   G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1<<0,
;;   G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 1<<1,
;;   G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 1<<2,
;;   G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 1<<3,
;;   G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 1<<4,
;; } GDBusConnectionFlags;
(define-fh-enum GDBusConnectionFlags
  '((G_DBUS_CONNECTION_FLAGS_NONE . 0)
    (G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT
      .
      1)
    (G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER
      .
      2)
    (G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS
      .
      4)
    (G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION
      .
      8)
    (G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING
      .
      16))
  )

;; typedef enum {
;;   G_DBUS_CAPABILITY_FLAGS_NONE = 0,
;;   G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1<<0,
;; } GDBusCapabilityFlags;
(define-fh-enum GDBusCapabilityFlags
  '((G_DBUS_CAPABILITY_FLAGS_NONE . 0)
    (G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING . 1))
  )

;; typedef enum {
;;   G_DBUS_CALL_FLAGS_NONE = 0,
;;   G_DBUS_CALL_FLAGS_NO_AUTO_START = 1<<0,
;;   G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 1<<1,
;; } GDBusCallFlags;
(define-fh-enum GDBusCallFlags
  '((G_DBUS_CALL_FLAGS_NONE . 0)
    (G_DBUS_CALL_FLAGS_NO_AUTO_START . 1)
    (G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION
      .
      2))
  )

;; typedef enum {
;;   G_DBUS_MESSAGE_TYPE_INVALID,
;;   G_DBUS_MESSAGE_TYPE_METHOD_CALL,
;;   G_DBUS_MESSAGE_TYPE_METHOD_RETURN,
;;   G_DBUS_MESSAGE_TYPE_ERROR,
;;   G_DBUS_MESSAGE_TYPE_SIGNAL,
;; } GDBusMessageType;
(define-fh-enum GDBusMessageType
  '((G_DBUS_MESSAGE_TYPE_INVALID . 0)
    (G_DBUS_MESSAGE_TYPE_METHOD_CALL . 1)
    (G_DBUS_MESSAGE_TYPE_METHOD_RETURN . 2)
    (G_DBUS_MESSAGE_TYPE_ERROR . 3)
    (G_DBUS_MESSAGE_TYPE_SIGNAL . 4))
  )

;; typedef enum {
;;   G_DBUS_MESSAGE_FLAGS_NONE = 0,
;;   G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1<<0,
;;   G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = 1<<1,
;;   G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 1<<2,
;; } GDBusMessageFlags;
(define-fh-enum GDBusMessageFlags
  '((G_DBUS_MESSAGE_FLAGS_NONE . 0)
    (G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED . 1)
    (G_DBUS_MESSAGE_FLAGS_NO_AUTO_START . 2)
    (G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION
      .
      4))
  )

;; typedef enum {
;;   G_DBUS_MESSAGE_HEADER_FIELD_INVALID,
;;   G_DBUS_MESSAGE_HEADER_FIELD_PATH,
;;   G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE,
;;   G_DBUS_MESSAGE_HEADER_FIELD_MEMBER,
;;   G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME,
;;   G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL,
;;   G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION,
;;   G_DBUS_MESSAGE_HEADER_FIELD_SENDER,
;;   G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE,
;;   G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS,
;; } GDBusMessageHeaderField;
(define-fh-enum GDBusMessageHeaderField
  '((G_DBUS_MESSAGE_HEADER_FIELD_INVALID . 0)
    (G_DBUS_MESSAGE_HEADER_FIELD_PATH . 1)
    (G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE . 2)
    (G_DBUS_MESSAGE_HEADER_FIELD_MEMBER . 3)
    (G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME . 4)
    (G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL . 5)
    (G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION . 6)
    (G_DBUS_MESSAGE_HEADER_FIELD_SENDER . 7)
    (G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE . 8)
    (G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS . 9))
  )

;; typedef enum {
;;   G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0,
;;   G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1<<0,
;;   G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 1<<1,
;; } GDBusPropertyInfoFlags;
(define-fh-enum GDBusPropertyInfoFlags
  '((G_DBUS_PROPERTY_INFO_FLAGS_NONE . 0)
    (G_DBUS_PROPERTY_INFO_FLAGS_READABLE . 1)
    (G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE . 2))
  )

;; typedef enum {
;;   G_DBUS_SUBTREE_FLAGS_NONE = 0,
;;   G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1<<0,
;; } GDBusSubtreeFlags;
(define-fh-enum GDBusSubtreeFlags
  '((G_DBUS_SUBTREE_FLAGS_NONE . 0)
    (G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES
      .
      1))
  )

;; typedef enum {
;;   G_DBUS_SERVER_FLAGS_NONE = 0,
;;   G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = 1<<0,
;;   G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 1<<1,
;; } GDBusServerFlags;
(define-fh-enum GDBusServerFlags
  '((G_DBUS_SERVER_FLAGS_NONE . 0)
    (G_DBUS_SERVER_FLAGS_RUN_IN_THREAD . 1)
    (G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS
      .
      2))
  )

;; typedef enum {
;;   G_DBUS_SIGNAL_FLAGS_NONE = 0,
;;   G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = 1<<0,
;;   G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = 1<<1,
;;   G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = 1<<2,
;; } GDBusSignalFlags;
(define-fh-enum GDBusSignalFlags
  '((G_DBUS_SIGNAL_FLAGS_NONE . 0)
    (G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE . 1)
    (G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE . 2)
    (G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH . 4))
  )

;; typedef enum {
;;   G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0,
;;   G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1<<0,
;; } GDBusSendMessageFlags;
(define-fh-enum GDBusSendMessageFlags
  '((G_DBUS_SEND_MESSAGE_FLAGS_NONE . 0)
    (G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL . 1))
  )

;; typedef enum {
;;   G_CREDENTIALS_TYPE_INVALID,
;;   G_CREDENTIALS_TYPE_LINUX_UCRED,
;;   G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED,
;;   G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED,
;;   G_CREDENTIALS_TYPE_SOLARIS_UCRED,
;;   G_CREDENTIALS_TYPE_NETBSD_UNPCBID,
;; } GCredentialsType;
(define-fh-enum GCredentialsType
  '((G_CREDENTIALS_TYPE_INVALID . 0)
    (G_CREDENTIALS_TYPE_LINUX_UCRED . 1)
    (G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED . 2)
    (G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED . 3)
    (G_CREDENTIALS_TYPE_SOLARIS_UCRED . 4)
    (G_CREDENTIALS_TYPE_NETBSD_UNPCBID . 5))
  )

;; typedef enum {
;;   G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 'B',
;;   G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 'l',
;; } GDBusMessageByteOrder;
(define-fh-enum GDBusMessageByteOrder
  '((G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN . 66)
    (G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN . 108))
  )

;; typedef enum {
;;   G_APPLICATION_FLAGS_NONE,
;;   G_APPLICATION_IS_SERVICE = 1<<0,
;;   G_APPLICATION_IS_LAUNCHER = 1<<1,
;;   G_APPLICATION_HANDLES_OPEN = 1<<2,
;;   G_APPLICATION_HANDLES_COMMAND_LINE = 1<<3,
;;   G_APPLICATION_SEND_ENVIRONMENT = 1<<4,
;;   G_APPLICATION_NON_UNIQUE = 1<<5,
;;   G_APPLICATION_CAN_OVERRIDE_APP_ID = 1<<6,
;; } GApplicationFlags;
(define-fh-enum GApplicationFlags
  '((G_APPLICATION_FLAGS_NONE . 0)
    (G_APPLICATION_IS_SERVICE . 1)
    (G_APPLICATION_IS_LAUNCHER . 2)
    (G_APPLICATION_HANDLES_OPEN . 4)
    (G_APPLICATION_HANDLES_COMMAND_LINE . 8)
    (G_APPLICATION_SEND_ENVIRONMENT . 16)
    (G_APPLICATION_NON_UNIQUE . 32)
    (G_APPLICATION_CAN_OVERRIDE_APP_ID . 64))
  )

;; typedef enum {
;;   G_TLS_ERROR_UNAVAILABLE,
;;   G_TLS_ERROR_MISC,
;;   G_TLS_ERROR_BAD_CERTIFICATE,
;;   G_TLS_ERROR_NOT_TLS,
;;   G_TLS_ERROR_HANDSHAKE,
;;   G_TLS_ERROR_CERTIFICATE_REQUIRED,
;;   G_TLS_ERROR_EOF,
;; } GTlsError;
(define-fh-enum GTlsError
  '((G_TLS_ERROR_UNAVAILABLE . 0)
    (G_TLS_ERROR_MISC . 1)
    (G_TLS_ERROR_BAD_CERTIFICATE . 2)
    (G_TLS_ERROR_NOT_TLS . 3)
    (G_TLS_ERROR_HANDSHAKE . 4)
    (G_TLS_ERROR_CERTIFICATE_REQUIRED . 5)
    (G_TLS_ERROR_EOF . 6))
  )

;; typedef enum {
;;   G_TLS_CERTIFICATE_UNKNOWN_CA = 1<<0,
;;   G_TLS_CERTIFICATE_BAD_IDENTITY = 1<<1,
;;   G_TLS_CERTIFICATE_NOT_ACTIVATED = 1<<2,
;;   G_TLS_CERTIFICATE_EXPIRED = 1<<3,
;;   G_TLS_CERTIFICATE_REVOKED = 1<<4,
;;   G_TLS_CERTIFICATE_INSECURE = 1<<5,
;;   G_TLS_CERTIFICATE_GENERIC_ERROR = 1<<6,
;;   G_TLS_CERTIFICATE_VALIDATE_ALL = 0x007f,
;; } GTlsCertificateFlags;
(define-fh-enum GTlsCertificateFlags
  '((G_TLS_CERTIFICATE_UNKNOWN_CA . 1)
    (G_TLS_CERTIFICATE_BAD_IDENTITY . 2)
    (G_TLS_CERTIFICATE_NOT_ACTIVATED . 4)
    (G_TLS_CERTIFICATE_EXPIRED . 8)
    (G_TLS_CERTIFICATE_REVOKED . 16)
    (G_TLS_CERTIFICATE_INSECURE . 32)
    (G_TLS_CERTIFICATE_GENERIC_ERROR . 64)
    (G_TLS_CERTIFICATE_VALIDATE_ALL . 127))
  )

;; typedef enum {
;;   G_TLS_AUTHENTICATION_NONE,
;;   G_TLS_AUTHENTICATION_REQUESTED,
;;   G_TLS_AUTHENTICATION_REQUIRED,
;; } GTlsAuthenticationMode;
(define-fh-enum GTlsAuthenticationMode
  '((G_TLS_AUTHENTICATION_NONE . 0)
    (G_TLS_AUTHENTICATION_REQUESTED . 1)
    (G_TLS_AUTHENTICATION_REQUIRED . 2))
  )

;; typedef enum {
;;   G_TLS_REHANDSHAKE_NEVER,
;;   G_TLS_REHANDSHAKE_SAFELY,
;;   G_TLS_REHANDSHAKE_UNSAFELY,
;; } GTlsRehandshakeMode;
(define-fh-enum GTlsRehandshakeMode
  '((G_TLS_REHANDSHAKE_NEVER . 0)
    (G_TLS_REHANDSHAKE_SAFELY . 1)
    (G_TLS_REHANDSHAKE_UNSAFELY . 2))
  )

;; typedef enum _GTlsPasswordFlags {
;;   G_TLS_PASSWORD_NONE = 0,
;;   G_TLS_PASSWORD_RETRY = 1<<1,
;;   G_TLS_PASSWORD_MANY_TRIES = 1<<2,
;;   G_TLS_PASSWORD_FINAL_TRY = 1<<3,
;; } GTlsPasswordFlags;
(define-fh-enum GTlsPasswordFlags
  '((G_TLS_PASSWORD_NONE . 0)
    (G_TLS_PASSWORD_RETRY . 2)
    (G_TLS_PASSWORD_MANY_TRIES . 4)
    (G_TLS_PASSWORD_FINAL_TRY . 8))
  )
(define unwrap-enum-_GTlsPasswordFlags unwrap-GTlsPasswordFlags)
(define wrap-enum-_GTlsPasswordFlags wrap-GTlsPasswordFlags)

;; typedef enum {
;;   G_TLS_INTERACTION_UNHANDLED,
;;   G_TLS_INTERACTION_HANDLED,
;;   G_TLS_INTERACTION_FAILED,
;; } GTlsInteractionResult;
(define-fh-enum GTlsInteractionResult
  '((G_TLS_INTERACTION_UNHANDLED . 0)
    (G_TLS_INTERACTION_HANDLED . 1)
    (G_TLS_INTERACTION_FAILED . 2))
  )

;; typedef enum {
;;   G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0,
;;   G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1<<
;;       0,
;; } GDBusInterfaceSkeletonFlags;
(define-fh-enum GDBusInterfaceSkeletonFlags
  '((G_DBUS_INTERFACE_SKELETON_FLAGS_NONE . 0)
    (G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD
      .
      1))
  )

;; typedef enum {
;;   G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0,
;;   G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1<<0,
;; } GDBusObjectManagerClientFlags;
(define-fh-enum GDBusObjectManagerClientFlags
  '((G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE . 0)
    (G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START
      .
      1))
  )

;; typedef enum {
;;   G_TLS_DATABASE_VERIFY_NONE = 0,
;; } GTlsDatabaseVerifyFlags;
(define-fh-enum GTlsDatabaseVerifyFlags
  '((G_TLS_DATABASE_VERIFY_NONE . 0))
  )

;; typedef enum {
;;   G_TLS_DATABASE_LOOKUP_NONE = 0,
;;   G_TLS_DATABASE_LOOKUP_KEYPAIR = 1,
;; } GTlsDatabaseLookupFlags;
(define-fh-enum GTlsDatabaseLookupFlags
  '((G_TLS_DATABASE_LOOKUP_NONE . 0)
    (G_TLS_DATABASE_LOOKUP_KEYPAIR . 1))
  )

;; typedef enum {
;;   G_TLS_CERTIFICATE_REQUEST_NONE = 0,
;; } GTlsCertificateRequestFlags;
(define-fh-enum GTlsCertificateRequestFlags
  '((G_TLS_CERTIFICATE_REQUEST_NONE . 0))
  )

;; typedef enum {
;;   G_IO_MODULE_SCOPE_NONE,
;;   G_IO_MODULE_SCOPE_BLOCK_DUPLICATES,
;; } GIOModuleScopeFlags;
(define-fh-enum GIOModuleScopeFlags
  '((G_IO_MODULE_SCOPE_NONE . 0)
    (G_IO_MODULE_SCOPE_BLOCK_DUPLICATES . 1))
  )

;; typedef enum {
;;   G_SOCKET_CLIENT_RESOLVING,
;;   G_SOCKET_CLIENT_RESOLVED,
;;   G_SOCKET_CLIENT_CONNECTING,
;;   G_SOCKET_CLIENT_CONNECTED,
;;   G_SOCKET_CLIENT_PROXY_NEGOTIATING,
;;   G_SOCKET_CLIENT_PROXY_NEGOTIATED,
;;   G_SOCKET_CLIENT_TLS_HANDSHAKING,
;;   G_SOCKET_CLIENT_TLS_HANDSHAKED,
;;   G_SOCKET_CLIENT_COMPLETE,
;; } GSocketClientEvent;
(define-fh-enum GSocketClientEvent
  '((G_SOCKET_CLIENT_RESOLVING . 0)
    (G_SOCKET_CLIENT_RESOLVED . 1)
    (G_SOCKET_CLIENT_CONNECTING . 2)
    (G_SOCKET_CLIENT_CONNECTED . 3)
    (G_SOCKET_CLIENT_PROXY_NEGOTIATING . 4)
    (G_SOCKET_CLIENT_PROXY_NEGOTIATED . 5)
    (G_SOCKET_CLIENT_TLS_HANDSHAKING . 6)
    (G_SOCKET_CLIENT_TLS_HANDSHAKED . 7)
    (G_SOCKET_CLIENT_COMPLETE . 8))
  )

;; typedef enum {
;;   G_SOCKET_LISTENER_BINDING,
;;   G_SOCKET_LISTENER_BOUND,
;;   G_SOCKET_LISTENER_LISTENING,
;;   G_SOCKET_LISTENER_LISTENED,
;; } GSocketListenerEvent;
(define-fh-enum GSocketListenerEvent
  '((G_SOCKET_LISTENER_BINDING . 0)
    (G_SOCKET_LISTENER_BOUND . 1)
    (G_SOCKET_LISTENER_LISTENING . 2)
    (G_SOCKET_LISTENER_LISTENED . 3))
  )

;; typedef enum {
;;   G_TEST_DBUS_NONE = 0,
;; } GTestDBusFlags;
(define-fh-enum GTestDBusFlags
  '((G_TEST_DBUS_NONE . 0))
  )

;; typedef enum {
;;   G_SUBPROCESS_FLAGS_NONE = 0,
;;   G_SUBPROCESS_FLAGS_STDIN_PIPE = 1u<<0,
;;   G_SUBPROCESS_FLAGS_STDIN_INHERIT = 1u<<1,
;;   G_SUBPROCESS_FLAGS_STDOUT_PIPE = 1u<<2,
;;   G_SUBPROCESS_FLAGS_STDOUT_SILENCE = 1u<<3,
;;   G_SUBPROCESS_FLAGS_STDERR_PIPE = 1u<<4,
;;   G_SUBPROCESS_FLAGS_STDERR_SILENCE = 1u<<5,
;;   G_SUBPROCESS_FLAGS_STDERR_MERGE = 1u<<6,
;;   G_SUBPROCESS_FLAGS_INHERIT_FDS = 1u<<7,
;; } GSubprocessFlags;
(define-fh-enum GSubprocessFlags
  '((G_SUBPROCESS_FLAGS_NONE . 0)
    (G_SUBPROCESS_FLAGS_STDIN_PIPE . 1)
    (G_SUBPROCESS_FLAGS_STDIN_INHERIT . 2)
    (G_SUBPROCESS_FLAGS_STDOUT_PIPE . 4)
    (G_SUBPROCESS_FLAGS_STDOUT_SILENCE . 8)
    (G_SUBPROCESS_FLAGS_STDERR_PIPE . 16)
    (G_SUBPROCESS_FLAGS_STDERR_SILENCE . 32)
    (G_SUBPROCESS_FLAGS_STDERR_MERGE . 64)
    (G_SUBPROCESS_FLAGS_INHERIT_FDS . 128))
  )

;; typedef enum {
;;   G_NOTIFICATION_PRIORITY_NORMAL,
;;   G_NOTIFICATION_PRIORITY_LOW,
;;   G_NOTIFICATION_PRIORITY_HIGH,
;;   G_NOTIFICATION_PRIORITY_URGENT,
;; } GNotificationPriority;
(define-fh-enum GNotificationPriority
  '((G_NOTIFICATION_PRIORITY_NORMAL . 0)
    (G_NOTIFICATION_PRIORITY_LOW . 1)
    (G_NOTIFICATION_PRIORITY_HIGH . 2)
    (G_NOTIFICATION_PRIORITY_URGENT . 3))
  )

;; typedef enum {
;;   G_NETWORK_CONNECTIVITY_LOCAL = 1,
;;   G_NETWORK_CONNECTIVITY_LIMITED = 2,
;;   G_NETWORK_CONNECTIVITY_PORTAL = 3,
;;   G_NETWORK_CONNECTIVITY_FULL = 4,
;; } GNetworkConnectivity;
(define-fh-enum GNetworkConnectivity
  '((G_NETWORK_CONNECTIVITY_LOCAL . 1)
    (G_NETWORK_CONNECTIVITY_LIMITED . 2)
    (G_NETWORK_CONNECTIVITY_PORTAL . 3)
    (G_NETWORK_CONNECTIVITY_FULL . 4))
  )

;; typedef struct _GAppLaunchContext GAppLaunchContext;
;; struct _GAppLaunchContext {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GAppLaunchContextPrivate *priv;
;; };
(define GAppLaunchContext-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GAppLaunchContextPrivate")))))
(export GAppLaunchContext-desc)
(define-fh-compound-type/p GAppLaunchContext GAppLaunchContext-desc)
(define struct-_GAppLaunchContext GAppLaunchContext)

;; typedef struct _GAppInfo GAppInfo; /* Dummy typedef */
(define-fh-pointer-type GAppInfo*)

;; typedef struct _GAsyncResult GAsyncResult; /* Dummy typedef */
(define-fh-pointer-type GAsyncResult*)

;; typedef struct _GAsyncInitable GAsyncInitable;
(define-fh-pointer-type GAsyncInitable*)

;; typedef struct _GBufferedInputStream GBufferedInputStream;
;; struct _GBufferedInputStream {
;;   GFilterInputStream parent_instance;
;;   /*< private >*/
;;   GBufferedInputStreamPrivate *priv;
;; };
(define GBufferedInputStream-desc
  (bs:struct
    (list `(parent_instance ,GFilterInputStream-desc)
          `(priv ,(bs:pointer "GBufferedInputStreamPrivate")))))
(export GBufferedInputStream-desc)
(define-fh-compound-type/p GBufferedInputStream GBufferedInputStream-desc)
(define struct-_GBufferedInputStream GBufferedInputStream)

;; typedef struct _GBufferedOutputStream GBufferedOutputStream;
;; struct _GBufferedOutputStream {
;;   GFilterOutputStream parent_instance;
;;   /*< protected >*/
;;   GBufferedOutputStreamPrivate *priv;
;; };
(define GBufferedOutputStream-desc
  (bs:struct
    (list `(parent_instance ,GFilterOutputStream-desc)
          `(priv ,(bs:pointer "GBufferedOutputStreamPrivate")))))
(export GBufferedOutputStream-desc)
(define-fh-compound-type/p GBufferedOutputStream GBufferedOutputStream-desc)
(define struct-_GBufferedOutputStream GBufferedOutputStream)

;; typedef struct _GCancellable GCancellable;
;; struct _GCancellable {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GCancellablePrivate *priv;
;; };
(define GCancellable-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GCancellablePrivate")))))
(export GCancellable-desc)
(define-fh-compound-type/p GCancellable GCancellable-desc)
(define struct-_GCancellable GCancellable)

;; typedef struct _GCharsetConverter GCharsetConverter;
(define-fh-pointer-type GCharsetConverter*)

;; typedef struct _GConverter GConverter;
(define-fh-pointer-type GConverter*)

;; typedef struct _GConverterInputStream GConverterInputStream;
;; struct _GConverterInputStream {
;;   GFilterInputStream parent_instance;
;;   /*< private >*/
;;   GConverterInputStreamPrivate *priv;
;; };
(define GConverterInputStream-desc
  (bs:struct
    (list `(parent_instance ,GFilterInputStream-desc)
          `(priv ,(bs:pointer "GConverterInputStreamPrivate")))))
(export GConverterInputStream-desc)
(define-fh-compound-type/p GConverterInputStream GConverterInputStream-desc)
(define struct-_GConverterInputStream GConverterInputStream)

;; typedef struct _GConverterOutputStream GConverterOutputStream;
;; struct _GConverterOutputStream {
;;   GFilterOutputStream parent_instance;
;;   /*< private >*/
;;   GConverterOutputStreamPrivate *priv;
;; };
(define GConverterOutputStream-desc
  (bs:struct
    (list `(parent_instance ,GFilterOutputStream-desc)
          `(priv ,(bs:pointer "GConverterOutputStreamPrivate")))))
(export GConverterOutputStream-desc)
(define-fh-compound-type/p GConverterOutputStream GConverterOutputStream-desc)
(define struct-_GConverterOutputStream GConverterOutputStream)

;; typedef struct _GDatagramBased GDatagramBased;
(define-fh-pointer-type GDatagramBased*)

;; typedef struct _GDataInputStream GDataInputStream;
;; struct _GDataInputStream {
;;   GBufferedInputStream parent_instance;
;;   /*< private >*/
;;   GDataInputStreamPrivate *priv;
;; };
(define GDataInputStream-desc
  (bs:struct
    (list `(parent_instance ,GBufferedInputStream-desc)
          `(priv ,(bs:pointer "GDataInputStreamPrivate")))))
(export GDataInputStream-desc)
(define-fh-compound-type/p GDataInputStream GDataInputStream-desc)
(define struct-_GDataInputStream GDataInputStream)

;; typedef struct _GSimplePermission GSimplePermission;
(define-fh-pointer-type GSimplePermission*)

;; typedef struct _GZlibCompressor GZlibCompressor;
(define-fh-pointer-type GZlibCompressor*)

;; typedef struct _GZlibDecompressor GZlibDecompressor;
(define-fh-pointer-type GZlibDecompressor*)

;; typedef struct _GSimpleActionGroup GSimpleActionGroup;
;; struct _GSimpleActionGroup {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GSimpleActionGroupPrivate *priv;
;; };
(define GSimpleActionGroup-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GSimpleActionGroupPrivate")))))
(export GSimpleActionGroup-desc)
(define-fh-compound-type/p GSimpleActionGroup GSimpleActionGroup-desc)
(define struct-_GSimpleActionGroup GSimpleActionGroup)

;; typedef struct _GRemoteActionGroup GRemoteActionGroup;
(define-fh-pointer-type GRemoteActionGroup*)

;; typedef struct _GDBusActionGroup GDBusActionGroup;
(define-fh-pointer-type GDBusActionGroup*)

;; typedef struct _GActionMap GActionMap;
(define-fh-pointer-type GActionMap*)

;; typedef struct _GActionGroup GActionGroup;
(define-fh-pointer-type GActionGroup*)

;; typedef struct _GPropertyAction GPropertyAction;
(define-fh-pointer-type GPropertyAction*)

;; typedef struct _GSimpleAction GSimpleAction;
(define-fh-pointer-type GSimpleAction*)

;; typedef struct _GAction GAction;
(define-fh-pointer-type GAction*)

;; typedef struct _GApplication GApplication;
;; struct _GApplication {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GApplicationPrivate *priv;
;; };
(define GApplication-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GApplicationPrivate")))))
(export GApplication-desc)
(define-fh-compound-type/p GApplication GApplication-desc)
(define struct-_GApplication GApplication)

;; typedef struct _GApplicationCommandLine GApplicationCommandLine;
;; struct _GApplicationCommandLine {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GApplicationCommandLinePrivate *priv;
;; };
(define GApplicationCommandLine-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GApplicationCommandLinePrivate")))))
(export GApplicationCommandLine-desc)
(define-fh-compound-type/p GApplicationCommandLine GApplicationCommandLine-desc)
(define struct-_GApplicationCommandLine GApplicationCommandLine)

;; typedef struct _GSettingsBackend GSettingsBackend;
(define-fh-pointer-type GSettingsBackend*)

;; typedef struct _GSettings GSettings;
;; struct _GSettings {
;;   GObject parent_instance;
;;   GSettingsPrivate *priv;
;; };
(define GSettings-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GSettingsPrivate")))))
(export GSettings-desc)
(define-fh-compound-type/p GSettings GSettings-desc)
(define struct-_GSettings GSettings)

;; typedef struct _GPermission GPermission;
;; struct _GPermission {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GPermissionPrivate *priv;
;; };
(define GPermission-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GPermissionPrivate")))))
(export GPermission-desc)
(define-fh-compound-type/p GPermission GPermission-desc)
(define struct-_GPermission GPermission)

;; typedef struct _GMenuModel GMenuModel;
;; struct _GMenuModel {
;;   GObject parent_instance;
;;   GMenuModelPrivate *priv;
;; };
(define GMenuModel-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GMenuModelPrivate")))))
(export GMenuModel-desc)
(define-fh-compound-type/p GMenuModel GMenuModel-desc)
(define struct-_GMenuModel GMenuModel)

;; typedef struct _GNotification GNotification;
(define-fh-pointer-type GNotification*)

;; typedef struct _GDrive GDrive; /* Dummy typedef */
(define-fh-pointer-type GDrive*)

;; typedef struct _GFileEnumerator GFileEnumerator;
;; struct _GFileEnumerator {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GFileEnumeratorPrivate *priv;
;; };
(define GFileEnumerator-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GFileEnumeratorPrivate")))))
(export GFileEnumerator-desc)
(define-fh-compound-type/p GFileEnumerator GFileEnumerator-desc)
(define struct-_GFileEnumerator GFileEnumerator)

;; typedef struct _GFileMonitor GFileMonitor;
;; struct _GFileMonitor {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GFileMonitorPrivate *priv;
;; };
(define GFileMonitor-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GFileMonitorPrivate")))))
(export GFileMonitor-desc)
(define-fh-compound-type/p GFileMonitor GFileMonitor-desc)
(define struct-_GFileMonitor GFileMonitor)

;; typedef struct _GFilterInputStream GFilterInputStream;
;; struct _GFilterInputStream {
;;   GInputStream parent_instance;
;;   /*<protected >*/
;;   GInputStream *base_stream;
;; };
(define GFilterInputStream-desc
  (bs:struct
    (list `(parent_instance ,GInputStream-desc)
          `(base_stream ,(bs:pointer "GInputStream")))))
(export GFilterInputStream-desc)
(define-fh-compound-type/p GFilterInputStream GFilterInputStream-desc)
(define struct-_GFilterInputStream GFilterInputStream)

;; typedef struct _GFilterOutputStream GFilterOutputStream;
;; struct _GFilterOutputStream {
;;   GOutputStream parent_instance;
;;   /*< protected >*/
;;   GOutputStream *base_stream;
;; };
(define GFilterOutputStream-desc
  (bs:struct
    (list `(parent_instance ,GOutputStream-desc)
          `(base_stream ,(bs:pointer "GOutputStream")))))
(export GFilterOutputStream-desc)
(define-fh-compound-type/p GFilterOutputStream GFilterOutputStream-desc)
(define struct-_GFilterOutputStream GFilterOutputStream)

;; typedef struct _GFile GFile; /* Dummy typedef */
(define-fh-pointer-type GFile*)

;; typedef struct _GFileInfo GFileInfo;
(define-fh-pointer-type GFileInfo*)

;; typedef struct _GFileAttributeMatcher GFileAttributeMatcher;
(define-fh-pointer-type GFileAttributeMatcher*)

;; typedef struct _GFileAttributeInfo GFileAttributeInfo;
;; struct _GFileAttributeInfo {
;;   char *name;
;;   GFileAttributeType type;
;;   GFileAttributeInfoFlags flags;
;; };
(define GFileAttributeInfo-desc
  (bs:struct
    (list `(name ,(bs:pointer int))
          `(type ,GFileAttributeType-desc)
          `(flags ,GFileAttributeInfoFlags-desc))))
(export GFileAttributeInfo-desc)
(define-fh-compound-type/p GFileAttributeInfo GFileAttributeInfo-desc)
(define struct-_GFileAttributeInfo GFileAttributeInfo)

;; typedef struct _GFileAttributeInfoList GFileAttributeInfoList;
;; struct _GFileAttributeInfoList {
;;   GFileAttributeInfo *infos;
;;   int n_infos;
;; };
(define GFileAttributeInfoList-desc
  (bs:struct
    (list `(infos ,(bs:pointer "GFileAttributeInfo"))
          `(n_infos ,int))))
(export GFileAttributeInfoList-desc)
(define-fh-compound-type/p GFileAttributeInfoList GFileAttributeInfoList-desc)
(define struct-_GFileAttributeInfoList GFileAttributeInfoList)

;; typedef struct _GFileDescriptorBased GFileDescriptorBased;
(define-fh-pointer-type GFileDescriptorBased*)

;; typedef struct _GFileInputStream GFileInputStream;
;; struct _GFileInputStream {
;;   GInputStream parent_instance;
;;   /*< private >*/
;;   GFileInputStreamPrivate *priv;
;; };
(define GFileInputStream-desc
  (bs:struct
    (list `(parent_instance ,GInputStream-desc)
          `(priv ,(bs:pointer "GFileInputStreamPrivate")))))
(export GFileInputStream-desc)
(define-fh-compound-type/p GFileInputStream GFileInputStream-desc)
(define struct-_GFileInputStream GFileInputStream)

;; typedef struct _GFileOutputStream GFileOutputStream;
;; struct _GFileOutputStream {
;;   GOutputStream parent_instance;
;;   /*< private >*/
;;   GFileOutputStreamPrivate *priv;
;; };
(define GFileOutputStream-desc
  (bs:struct
    (list `(parent_instance ,GOutputStream-desc)
          `(priv ,(bs:pointer "GFileOutputStreamPrivate")))))
(export GFileOutputStream-desc)
(define-fh-compound-type/p GFileOutputStream GFileOutputStream-desc)
(define struct-_GFileOutputStream GFileOutputStream)

;; typedef struct _GFileIOStream GFileIOStream;
;; struct _GFileIOStream {
;;   GIOStream parent_instance;
;;   /*< private >*/
;;   GFileIOStreamPrivate *priv;
;; };
(define GFileIOStream-desc
  (bs:struct
    (list `(parent_instance ,GIOStream-desc)
          `(priv ,(bs:pointer "GFileIOStreamPrivate")))))
(export GFileIOStream-desc)
(define-fh-compound-type/p GFileIOStream GFileIOStream-desc)
(define struct-_GFileIOStream GFileIOStream)

;; typedef struct _GFileIcon GFileIcon;
(define-fh-pointer-type GFileIcon*)

;; typedef struct _GFilenameCompleter GFilenameCompleter;
(define-fh-pointer-type GFilenameCompleter*)

;; typedef struct _GIcon GIcon; /* Dummy typedef */
(define-fh-pointer-type GIcon*)

;; typedef struct _GInetAddress GInetAddress;
;; struct _GInetAddress {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GInetAddressPrivate *priv;
;; };
(define GInetAddress-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GInetAddressPrivate")))))
(export GInetAddress-desc)
(define-fh-compound-type/p GInetAddress GInetAddress-desc)
(define struct-_GInetAddress GInetAddress)

;; typedef struct _GInetAddressMask GInetAddressMask;
;; struct _GInetAddressMask {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GInetAddressMaskPrivate *priv;
;; };
(define GInetAddressMask-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GInetAddressMaskPrivate")))))
(export GInetAddressMask-desc)
(define-fh-compound-type/p GInetAddressMask GInetAddressMask-desc)
(define struct-_GInetAddressMask GInetAddressMask)

;; typedef struct _GInetSocketAddress GInetSocketAddress;
;; struct _GInetSocketAddress {
;;   GSocketAddress parent_instance;
;;   /*< private >*/
;;   GInetSocketAddressPrivate *priv;
;; };
(define GInetSocketAddress-desc
  (bs:struct
    (list `(parent_instance ,GSocketAddress-desc)
          `(priv ,(bs:pointer "GInetSocketAddressPrivate")))))
(export GInetSocketAddress-desc)
(define-fh-compound-type/p GInetSocketAddress GInetSocketAddress-desc)
(define struct-_GInetSocketAddress GInetSocketAddress)

;; typedef struct _GNativeSocketAddress GNativeSocketAddress;
(define-fh-pointer-type GNativeSocketAddress*)

;; typedef struct _GInputStream GInputStream;
;; struct _GInputStream {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GInputStreamPrivate *priv;
;; };
(define GInputStream-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GInputStreamPrivate")))))
(export GInputStream-desc)
(define-fh-compound-type/p GInputStream GInputStream-desc)
(define struct-_GInputStream GInputStream)

;; typedef struct _GInitable GInitable;
(define-fh-pointer-type GInitable*)

;; typedef struct _GIOModule GIOModule;
(define-fh-pointer-type GIOModule*)

;; typedef struct _GIOExtensionPoint GIOExtensionPoint;
(define-fh-pointer-type GIOExtensionPoint*)

;; typedef struct _GIOExtension GIOExtension;
(define-fh-pointer-type GIOExtension*)

;; typedef struct _GIOSchedulerJob GIOSchedulerJob;
(define-fh-pointer-type GIOSchedulerJob*)

;; typedef struct _GIOStreamAdapter GIOStreamAdapter;
(define-fh-pointer-type GIOStreamAdapter*)

;; typedef struct _GLoadableIcon GLoadableIcon; /* Dummy typedef */
(define-fh-pointer-type GLoadableIcon*)

;; typedef struct _GBytesIcon GBytesIcon;
(define-fh-pointer-type GBytesIcon*)

;; typedef struct _GMemoryInputStream GMemoryInputStream;
;; struct _GMemoryInputStream {
;;   GInputStream parent_instance;
;;   /*< private >*/
;;   GMemoryInputStreamPrivate *priv;
;; };
(define GMemoryInputStream-desc
  (bs:struct
    (list `(parent_instance ,GInputStream-desc)
          `(priv ,(bs:pointer "GMemoryInputStreamPrivate")))))
(export GMemoryInputStream-desc)
(define-fh-compound-type/p GMemoryInputStream GMemoryInputStream-desc)
(define struct-_GMemoryInputStream GMemoryInputStream)

;; typedef struct _GMemoryOutputStream GMemoryOutputStream;
;; struct _GMemoryOutputStream {
;;   GOutputStream parent_instance;
;;   /*< private >*/
;;   GMemoryOutputStreamPrivate *priv;
;; };
(define GMemoryOutputStream-desc
  (bs:struct
    (list `(parent_instance ,GOutputStream-desc)
          `(priv ,(bs:pointer "GMemoryOutputStreamPrivate")))))
(export GMemoryOutputStream-desc)
(define-fh-compound-type/p GMemoryOutputStream GMemoryOutputStream-desc)
(define struct-_GMemoryOutputStream GMemoryOutputStream)

;; typedef struct _GMount GMount; /* Dummy typedef */
(define-fh-pointer-type GMount*)

;; typedef struct _GMountOperation GMountOperation;
;; struct _GMountOperation {
;;   GObject parent_instance;
;;   GMountOperationPrivate *priv;
;; };
(define GMountOperation-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GMountOperationPrivate")))))
(export GMountOperation-desc)
(define-fh-compound-type/p GMountOperation GMountOperation-desc)
(define struct-_GMountOperation GMountOperation)

;; typedef struct _GNetworkAddress GNetworkAddress;
;; struct _GNetworkAddress {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GNetworkAddressPrivate *priv;
;; };
(define GNetworkAddress-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GNetworkAddressPrivate")))))
(export GNetworkAddress-desc)
(define-fh-compound-type/p GNetworkAddress GNetworkAddress-desc)
(define struct-_GNetworkAddress GNetworkAddress)

;; typedef struct _GNetworkMonitor GNetworkMonitor;
(define-fh-pointer-type GNetworkMonitor*)

;; typedef struct _GNetworkService GNetworkService;
;; struct _GNetworkService {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GNetworkServicePrivate *priv;
;; };
(define GNetworkService-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GNetworkServicePrivate")))))
(export GNetworkService-desc)
(define-fh-compound-type/p GNetworkService GNetworkService-desc)
(define struct-_GNetworkService GNetworkService)

;; typedef struct _GOutputStream GOutputStream;
;; struct _GOutputStream {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GOutputStreamPrivate *priv;
;; };
(define GOutputStream-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GOutputStreamPrivate")))))
(export GOutputStream-desc)
(define-fh-compound-type/p GOutputStream GOutputStream-desc)
(define struct-_GOutputStream GOutputStream)

;; typedef struct _GIOStream GIOStream;
;; struct _GIOStream {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GIOStreamPrivate *priv;
;; };
(define GIOStream-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GIOStreamPrivate")))))
(export GIOStream-desc)
(define-fh-compound-type/p GIOStream GIOStream-desc)
(define struct-_GIOStream GIOStream)

;; typedef struct _GSimpleIOStream GSimpleIOStream;
(define-fh-pointer-type GSimpleIOStream*)

;; typedef struct _GPollableInputStream GPollableInputStream; 
;;     /* Dummy typedef */
(define-fh-pointer-type GPollableInputStream*)

;; typedef struct _GPollableOutputStream GPollableOutputStream; 
;;     /* Dummy typedef */
(define-fh-pointer-type GPollableOutputStream*)

;; typedef struct _GResolver GResolver;
;; struct _GResolver {
;;   GObject parent_instance;
;;   GResolverPrivate *priv;
;; };
(define GResolver-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GResolverPrivate")))))
(export GResolver-desc)
(define-fh-compound-type/p GResolver GResolver-desc)
(define struct-_GResolver GResolver)

;; typedef struct _GResource GResource;
(define-fh-pointer-type GResource*)

;; typedef struct _GSeekable GSeekable;
(define-fh-pointer-type GSeekable*)

;; typedef struct _GSimpleAsyncResult GSimpleAsyncResult;
(define-fh-pointer-type GSimpleAsyncResult*)

;; typedef struct _GSocket GSocket;
;; struct _GSocket {
;;   GObject parent_instance;
;;   GSocketPrivate *priv;
;; };
(define GSocket-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GSocketPrivate")))))
(export GSocket-desc)
(define-fh-compound-type/p GSocket GSocket-desc)
(define struct-_GSocket GSocket)

;; typedef struct _GSocketControlMessage GSocketControlMessage;
;; struct _GSocketControlMessage {
;;   GObject parent_instance;
;;   GSocketControlMessagePrivate *priv;
;; };
(define GSocketControlMessage-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GSocketControlMessagePrivate")))))
(export GSocketControlMessage-desc)
(define-fh-compound-type/p GSocketControlMessage GSocketControlMessage-desc)
(define struct-_GSocketControlMessage GSocketControlMessage)

;; typedef struct _GSocketClient GSocketClient;
;; struct _GSocketClient {
;;   GObject parent_instance;
;;   GSocketClientPrivate *priv;
;; };
(define GSocketClient-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GSocketClientPrivate")))))
(export GSocketClient-desc)
(define-fh-compound-type/p GSocketClient GSocketClient-desc)
(define struct-_GSocketClient GSocketClient)

;; typedef struct _GSocketConnection GSocketConnection;
;; struct _GSocketConnection {
;;   GIOStream parent_instance;
;;   GSocketConnectionPrivate *priv;
;; };
(define GSocketConnection-desc
  (bs:struct
    (list `(parent_instance ,GIOStream-desc)
          `(priv ,(bs:pointer "GSocketConnectionPrivate")))))
(export GSocketConnection-desc)
(define-fh-compound-type/p GSocketConnection GSocketConnection-desc)
(define struct-_GSocketConnection GSocketConnection)

;; typedef struct _GSocketListener GSocketListener;
;; struct _GSocketListener {
;;   GObject parent_instance;
;;   GSocketListenerPrivate *priv;
;; };
(define GSocketListener-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GSocketListenerPrivate")))))
(export GSocketListener-desc)
(define-fh-compound-type/p GSocketListener GSocketListener-desc)
(define struct-_GSocketListener GSocketListener)

;; typedef struct _GSocketService GSocketService;
;; struct _GSocketService {
;;   GSocketListener parent_instance;
;;   GSocketServicePrivate *priv;
;; };
(define GSocketService-desc
  (bs:struct
    (list `(parent_instance ,GSocketListener-desc)
          `(priv ,(bs:pointer "GSocketServicePrivate")))))
(export GSocketService-desc)
(define-fh-compound-type/p GSocketService GSocketService-desc)
(define struct-_GSocketService GSocketService)

;; typedef struct _GSocketAddress GSocketAddress;
;; struct _GSocketAddress {
;;   GObject parent_instance;
;; };
(define GSocketAddress-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData"))))))))
(export GSocketAddress-desc)
(define-fh-compound-type/p GSocketAddress GSocketAddress-desc)
(define struct-_GSocketAddress GSocketAddress)

;; typedef struct _GSocketAddressEnumerator GSocketAddressEnumerator;
;; struct _GSocketAddressEnumerator {
;;   GObject parent_instance;
;; };
(define GSocketAddressEnumerator-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData"))))))))
(export GSocketAddressEnumerator-desc)
(define-fh-compound-type/p GSocketAddressEnumerator GSocketAddressEnumerator-desc)
(define struct-_GSocketAddressEnumerator GSocketAddressEnumerator)

;; typedef struct _GSocketConnectable GSocketConnectable;
(define-fh-pointer-type GSocketConnectable*)

;; typedef struct _GSrvTarget GSrvTarget;
(define-fh-pointer-type GSrvTarget*)

;; typedef struct _GTask GTask;
(define-fh-pointer-type GTask*)

;; typedef struct _GTcpConnection GTcpConnection;
;; struct _GTcpConnection {
;;   GSocketConnection parent_instance;
;;   GTcpConnectionPrivate *priv;
;; };
(define GTcpConnection-desc
  (bs:struct
    (list `(parent_instance ,GSocketConnection-desc)
          `(priv ,(bs:pointer "GTcpConnectionPrivate")))))
(export GTcpConnection-desc)
(define-fh-compound-type/p GTcpConnection GTcpConnection-desc)
(define struct-_GTcpConnection GTcpConnection)

;; typedef struct _GTcpWrapperConnection GTcpWrapperConnection;
;; struct _GTcpWrapperConnection {
;;   GTcpConnection parent_instance;
;;   GTcpWrapperConnectionPrivate *priv;
;; };
(define GTcpWrapperConnection-desc
  (bs:struct
    (list `(parent_instance ,GTcpConnection-desc)
          `(priv ,(bs:pointer "GTcpWrapperConnectionPrivate")))))
(export GTcpWrapperConnection-desc)
(define-fh-compound-type/p GTcpWrapperConnection GTcpWrapperConnection-desc)
(define struct-_GTcpWrapperConnection GTcpWrapperConnection)

;; typedef struct _GThreadedSocketService GThreadedSocketService;
;; struct _GThreadedSocketService {
;;   GSocketService parent_instance;
;;   GThreadedSocketServicePrivate *priv;
;; };
(define GThreadedSocketService-desc
  (bs:struct
    (list `(parent_instance ,GSocketService-desc)
          `(priv ,(bs:pointer "GThreadedSocketServicePrivate")))))
(export GThreadedSocketService-desc)
(define-fh-compound-type/p GThreadedSocketService GThreadedSocketService-desc)
(define struct-_GThreadedSocketService GThreadedSocketService)

;; typedef struct _GDtlsConnection GDtlsConnection;
(define-fh-pointer-type GDtlsConnection*)

;; typedef struct _GDtlsClientConnection GDtlsClientConnection; 
;;     /* Dummy typedef */
(define-fh-pointer-type GDtlsClientConnection*)

;; typedef struct _GDtlsServerConnection GDtlsServerConnection; 
;;     /* Dummy typedef */
(define-fh-pointer-type GDtlsServerConnection*)

;; typedef struct _GThemedIcon GThemedIcon;
(define-fh-pointer-type GThemedIcon*)

;; typedef struct _GTlsCertificate GTlsCertificate;
;; struct _GTlsCertificate {
;;   GObject parent_instance;
;;   GTlsCertificatePrivate *priv;
;; };
(define GTlsCertificate-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GTlsCertificatePrivate")))))
(export GTlsCertificate-desc)
(define-fh-compound-type/p GTlsCertificate GTlsCertificate-desc)
(define struct-_GTlsCertificate GTlsCertificate)

;; typedef struct _GTlsClientConnection GTlsClientConnection; 
;;     /* Dummy typedef */
(define-fh-pointer-type GTlsClientConnection*)

;; typedef struct _GTlsConnection GTlsConnection;
;; struct _GTlsConnection {
;;   GIOStream parent_instance;
;;   GTlsConnectionPrivate *priv;
;; };
(define GTlsConnection-desc
  (bs:struct
    (list `(parent_instance ,GIOStream-desc)
          `(priv ,(bs:pointer "GTlsConnectionPrivate")))))
(export GTlsConnection-desc)
(define-fh-compound-type/p GTlsConnection GTlsConnection-desc)
(define struct-_GTlsConnection GTlsConnection)

;; typedef struct _GTlsDatabase GTlsDatabase;
;; struct _GTlsDatabase {
;;   GObject parent_instance;
;;   GTlsDatabasePrivate *priv;
;; };
(define GTlsDatabase-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GTlsDatabasePrivate")))))
(export GTlsDatabase-desc)
(define-fh-compound-type/p GTlsDatabase GTlsDatabase-desc)
(define struct-_GTlsDatabase GTlsDatabase)

;; typedef struct _GTlsFileDatabase GTlsFileDatabase;
(define-fh-pointer-type GTlsFileDatabase*)

;; typedef struct _GTlsInteraction GTlsInteraction;
;; struct _GTlsInteraction {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GTlsInteractionPrivate *priv;
;; };
(define GTlsInteraction-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GTlsInteractionPrivate")))))
(export GTlsInteraction-desc)
(define-fh-compound-type/p GTlsInteraction GTlsInteraction-desc)
(define struct-_GTlsInteraction GTlsInteraction)

;; typedef struct _GTlsPassword GTlsPassword;
;; struct _GTlsPassword {
;;   GObject parent_instance;
;;   GTlsPasswordPrivate *priv;
;; };
(define GTlsPassword-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GTlsPasswordPrivate")))))
(export GTlsPassword-desc)
(define-fh-compound-type/p GTlsPassword GTlsPassword-desc)
(define struct-_GTlsPassword GTlsPassword)

;; typedef struct _GTlsServerConnection GTlsServerConnection; 
;;     /* Dummy typedef */
(define-fh-pointer-type GTlsServerConnection*)

;; typedef struct _GVfs GVfs; /* Dummy typedef */
;; struct _GVfs {
;;   GObject parent_instance;
;; };
(define GVfs-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData"))))))))
(export GVfs-desc)
(define-fh-compound-type/p GVfs GVfs-desc)
(define struct-_GVfs GVfs)

;; typedef struct _GProxyResolver GProxyResolver;
(define-fh-pointer-type GProxyResolver*)

;; typedef struct _GProxy GProxy;
(define-fh-pointer-type GProxy*)

;; typedef struct _GProxyAddress GProxyAddress;
;; struct _GProxyAddress {
;;   GInetSocketAddress parent_instance;
;;   /*< private >*/
;;   GProxyAddressPrivate *priv;
;; };
(define GProxyAddress-desc
  (bs:struct
    (list `(parent_instance ,GInetSocketAddress-desc)
          `(priv ,(bs:pointer "GProxyAddressPrivate")))))
(export GProxyAddress-desc)
(define-fh-compound-type/p GProxyAddress GProxyAddress-desc)
(define struct-_GProxyAddress GProxyAddress)

;; typedef struct _GProxyAddressEnumerator GProxyAddressEnumerator;
;; struct _GProxyAddressEnumerator {
;;   GSocketAddressEnumerator parent_instance;
;;   GProxyAddressEnumeratorPrivate *priv;
;; };
(define GProxyAddressEnumerator-desc
  (bs:struct
    (list `(parent_instance ,GSocketAddressEnumerator-desc)
          `(priv ,(bs:pointer "GProxyAddressEnumeratorPrivate")))))
(export GProxyAddressEnumerator-desc)
(define-fh-compound-type/p GProxyAddressEnumerator GProxyAddressEnumerator-desc)
(define struct-_GProxyAddressEnumerator GProxyAddressEnumerator)

;; typedef struct _GVolume GVolume; /* Dummy typedef */
(define-fh-pointer-type GVolume*)

;; typedef struct _GVolumeMonitor GVolumeMonitor;
;; struct _GVolumeMonitor {
;;   GObject parent_instance;
;;   /*< private >*/
;;   gpointer priv;
;; };
(define GVolumeMonitor-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer intptr_t)))))
(export GVolumeMonitor-desc)
(define-fh-compound-type/p GVolumeMonitor GVolumeMonitor-desc)
(define struct-_GVolumeMonitor GVolumeMonitor)

;; typedef void (*GAsyncReadyCallback)(GObject *source_object, GAsyncResult *
;;     res, gpointer user_data);
(define-fh-function/p GAsyncReadyCallback
  ffi:void (list (quote *) (quote *) (quote *)))

;; typedef void (*GFileProgressCallback)(goffset current_num_bytes, goffset 
;;     total_num_bytes, gpointer user_data);
;; ... failed.

;; typedef gboolean (*GFileReadMoreCallback)(const char *file_contents, 
;;     goffset file_size, gpointer callback_data);
;; ... failed.

;; typedef void (*GFileMeasureProgressCallback)(gboolean reporting, guint64 
;;     current_size, guint64 num_dirs, guint64 num_files, gpointer user_data)
;;     ;
(define-fh-function/p GFileMeasureProgressCallback
  ffi:void (list ffi:int ffi:unsigned-long ffi:unsigned-long ffi:unsigned-long (quote *)))

;; typedef gboolean (*GIOSchedulerJobFunc)(GIOSchedulerJob *job, GCancellable 
;;     *cancellable, gpointer user_data);
(define-fh-function/p GIOSchedulerJobFunc
  ffi:int (list (quote *) (quote *) (quote *)))

;; typedef void (*GSimpleAsyncThreadFunc)(GSimpleAsyncResult *res, GObject *
;;     object, GCancellable *cancellable);
(define-fh-function/p GSimpleAsyncThreadFunc
  ffi:void (list (quote *) (quote *) (quote *)))

;; typedef gboolean (*GSocketSourceFunc)(GSocket *socket, GIOCondition 
;;     condition, gpointer user_data);
(define-fh-function/p GSocketSourceFunc
  ffi:int (list (quote *) ffi:int (quote *)))

;; typedef gboolean (*GDatagramBasedSourceFunc)(GDatagramBased *datagram_based
;;     , GIOCondition condition, gpointer user_data);
(define-fh-function/p GDatagramBasedSourceFunc
  ffi:int (list (quote *) ffi:int (quote *)))

;; typedef struct _GInputVector GInputVector;
;; struct _GInputVector {
;;   gpointer buffer;
;;   gsize size;
;; };
(define GInputVector-desc
  (bs:struct
    (list `(buffer ,(bs:pointer intptr_t))
          `(size ,unsigned-long))))
(export GInputVector-desc)
(define-fh-compound-type/p GInputVector GInputVector-desc)
(define struct-_GInputVector GInputVector)

;; typedef struct _GInputMessage GInputMessage;
;; struct _GInputMessage {
;;   GSocketAddress **address;
;;   GInputVector *vectors;
;;   guint num_vectors;
;;   gsize bytes_received;
;;   gint flags;
;;   GSocketControlMessage ***control_messages;
;;   guint *num_control_messages;
;; };
(define GInputMessage-desc
  (bs:struct
    (list `(address
             ,(bs:pointer (bs:pointer "GSocketAddress")))
          `(vectors ,(bs:pointer "GInputVector"))
          `(num_vectors ,unsigned-int)
          `(bytes_received ,unsigned-long)
          `(flags ,int)
          `(control_messages
             ,(bs:pointer
                (bs:pointer (bs:pointer "GSocketControlMessage"))))
          `(num_control_messages ,(bs:pointer intptr_t)))))
(export GInputMessage-desc)
(define-fh-compound-type/p GInputMessage GInputMessage-desc)
(define struct-_GInputMessage GInputMessage)

;; typedef struct _GOutputVector GOutputVector;
;; struct _GOutputVector {
;;   gconstpointer buffer;
;;   gsize size;
;; };
(define GOutputVector-desc
  (bs:struct
    (list `(buffer ,(bs:pointer intptr_t))
          `(size ,unsigned-long))))
(export GOutputVector-desc)
(define-fh-compound-type/p GOutputVector GOutputVector-desc)
(define struct-_GOutputVector GOutputVector)

;; typedef struct _GOutputMessage GOutputMessage;
;; struct _GOutputMessage {
;;   GSocketAddress *address;
;;   GOutputVector *vectors;
;;   guint num_vectors;
;;   guint bytes_sent;
;;   GSocketControlMessage **control_messages;
;;   guint num_control_messages;
;; };
(define GOutputMessage-desc
  (bs:struct
    (list `(address ,(bs:pointer "GSocketAddress"))
          `(vectors ,(bs:pointer "GOutputVector"))
          `(num_vectors ,unsigned-int)
          `(bytes_sent ,unsigned-int)
          `(control_messages
             ,(bs:pointer (bs:pointer "GSocketControlMessage")))
          `(num_control_messages ,unsigned-int))))
(export GOutputMessage-desc)
(define-fh-compound-type/p GOutputMessage GOutputMessage-desc)
(define struct-_GOutputMessage GOutputMessage)

;; typedef struct _GCredentials GCredentials;
(define-fh-pointer-type GCredentials*)

;; typedef struct _GUnixCredentialsMessage GUnixCredentialsMessage;
(define-fh-pointer-type GUnixCredentialsMessage*)

;; typedef struct _GUnixFDList GUnixFDList;
(define-fh-pointer-type GUnixFDList*)

;; typedef struct _GDBusMessage GDBusMessage;
(define-fh-pointer-type GDBusMessage*)

;; typedef struct _GDBusConnection GDBusConnection;
(define-fh-pointer-type GDBusConnection*)

;; typedef struct _GDBusProxy GDBusProxy;
;; struct _GDBusProxy {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusProxyPrivate *priv;
;; };
(define GDBusProxy-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GDBusProxyPrivate")))))
(export GDBusProxy-desc)
(define-fh-compound-type/p GDBusProxy GDBusProxy-desc)
(define struct-_GDBusProxy GDBusProxy)

;; typedef struct _GDBusMethodInvocation GDBusMethodInvocation;
(define-fh-pointer-type GDBusMethodInvocation*)

;; typedef struct _GDBusServer GDBusServer;
(define-fh-pointer-type GDBusServer*)

;; typedef struct _GDBusAuthObserver GDBusAuthObserver;
(define-fh-pointer-type GDBusAuthObserver*)

;; typedef struct _GDBusErrorEntry GDBusErrorEntry;
;; struct _GDBusErrorEntry {
;;   gint error_code;
;;   const gchar *dbus_error_name;
;; };
(define GDBusErrorEntry-desc
  (bs:struct
    (list `(error_code ,int)
          `(dbus_error_name ,(bs:pointer intptr_t)))))
(export GDBusErrorEntry-desc)
(define-fh-compound-type/p GDBusErrorEntry GDBusErrorEntry-desc)
(define struct-_GDBusErrorEntry GDBusErrorEntry)

;; typedef struct _GDBusInterfaceVTable GDBusInterfaceVTable;
;; struct _GDBusInterfaceVTable {
;;   GDBusInterfaceMethodCallFunc method_call;
;;   GDBusInterfaceGetPropertyFunc get_property;
;;   GDBusInterfaceSetPropertyFunc set_property;
;;   /*< private >*/
;;   /* Padding for future expansion - also remember to update
;;      * gdbusconnection.c:_g_dbus_interface_vtable_copy() when
;;      * changing this.
;;      */
;;   gpointer padding[8];
;; };
(define GDBusInterfaceVTable-desc
  (bs:struct
    (list `(method_call ,GDBusInterfaceMethodCallFunc-desc)
          `(get_property
             ,GDBusInterfaceGetPropertyFunc-desc)
          `(set_property
             ,GDBusInterfaceSetPropertyFunc-desc)
          `(padding ,(bs:vector 8 (bs:pointer intptr_t))))))
(export GDBusInterfaceVTable-desc)
(define-fh-compound-type/p GDBusInterfaceVTable GDBusInterfaceVTable-desc)
(define struct-_GDBusInterfaceVTable GDBusInterfaceVTable)

;; typedef struct _GDBusSubtreeVTable GDBusSubtreeVTable;
;; struct _GDBusSubtreeVTable {
;;   GDBusSubtreeEnumerateFunc enumerate;
;;   GDBusSubtreeIntrospectFunc introspect;
;;   GDBusSubtreeDispatchFunc dispatch;
;;   /*< private >*/
;;   /* Padding for future expansion - also remember to update
;;      * gdbusconnection.c:_g_dbus_subtree_vtable_copy() when
;;      * changing this.
;;      */
;;   gpointer padding[8];
;; };
(define GDBusSubtreeVTable-desc
  (bs:struct
    (list `(enumerate ,GDBusSubtreeEnumerateFunc-desc)
          `(introspect ,GDBusSubtreeIntrospectFunc-desc)
          `(dispatch ,GDBusSubtreeDispatchFunc-desc)
          `(padding ,(bs:vector 8 (bs:pointer intptr_t))))))
(export GDBusSubtreeVTable-desc)
(define-fh-compound-type/p GDBusSubtreeVTable GDBusSubtreeVTable-desc)
(define struct-_GDBusSubtreeVTable GDBusSubtreeVTable)

;; typedef struct _GDBusAnnotationInfo GDBusAnnotationInfo;
;; struct _GDBusAnnotationInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *key;
;;   gchar *value;
;;   GDBusAnnotationInfo **annotations;
;; };
(define GDBusAnnotationInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(key ,(bs:pointer intptr_t))
          `(value ,(bs:pointer intptr_t))
          `(annotations
             ,(bs:pointer (bs:pointer "GDBusAnnotationInfo"))))))
(export GDBusAnnotationInfo-desc)
(define-fh-compound-type/p GDBusAnnotationInfo GDBusAnnotationInfo-desc)
(define struct-_GDBusAnnotationInfo GDBusAnnotationInfo)

;; typedef struct _GDBusArgInfo GDBusArgInfo;
;; struct _GDBusArgInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *name;
;;   gchar *signature;
;;   GDBusAnnotationInfo **annotations;
;; };
(define GDBusArgInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(name ,(bs:pointer intptr_t))
          `(signature ,(bs:pointer intptr_t))
          `(annotations
             ,(bs:pointer (bs:pointer "GDBusAnnotationInfo"))))))
(export GDBusArgInfo-desc)
(define-fh-compound-type/p GDBusArgInfo GDBusArgInfo-desc)
(define struct-_GDBusArgInfo GDBusArgInfo)

;; typedef struct _GDBusMethodInfo GDBusMethodInfo;
;; struct _GDBusMethodInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *name;
;;   GDBusArgInfo **in_args;
;;   GDBusArgInfo **out_args;
;;   GDBusAnnotationInfo **annotations;
;; };
(define GDBusMethodInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(name ,(bs:pointer intptr_t))
          `(in_args
             ,(bs:pointer (bs:pointer "GDBusArgInfo")))
          `(out_args
             ,(bs:pointer (bs:pointer "GDBusArgInfo")))
          `(annotations
             ,(bs:pointer (bs:pointer "GDBusAnnotationInfo"))))))
(export GDBusMethodInfo-desc)
(define-fh-compound-type/p GDBusMethodInfo GDBusMethodInfo-desc)
(define struct-_GDBusMethodInfo GDBusMethodInfo)

;; typedef struct _GDBusSignalInfo GDBusSignalInfo;
;; struct _GDBusSignalInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *name;
;;   GDBusArgInfo **args;
;;   GDBusAnnotationInfo **annotations;
;; };
(define GDBusSignalInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(name ,(bs:pointer intptr_t))
          `(args ,(bs:pointer (bs:pointer "GDBusArgInfo")))
          `(annotations
             ,(bs:pointer (bs:pointer "GDBusAnnotationInfo"))))))
(export GDBusSignalInfo-desc)
(define-fh-compound-type/p GDBusSignalInfo GDBusSignalInfo-desc)
(define struct-_GDBusSignalInfo GDBusSignalInfo)

;; typedef struct _GDBusPropertyInfo GDBusPropertyInfo;
;; struct _GDBusPropertyInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *name;
;;   gchar *signature;
;;   GDBusPropertyInfoFlags flags;
;;   GDBusAnnotationInfo **annotations;
;; };
(define GDBusPropertyInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(name ,(bs:pointer intptr_t))
          `(signature ,(bs:pointer intptr_t))
          `(flags ,GDBusPropertyInfoFlags-desc)
          `(annotations
             ,(bs:pointer (bs:pointer "GDBusAnnotationInfo"))))))
(export GDBusPropertyInfo-desc)
(define-fh-compound-type/p GDBusPropertyInfo GDBusPropertyInfo-desc)
(define struct-_GDBusPropertyInfo GDBusPropertyInfo)

;; typedef struct _GDBusInterfaceInfo GDBusInterfaceInfo;
;; struct _GDBusInterfaceInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *name;
;;   GDBusMethodInfo **methods;
;;   GDBusSignalInfo **signals;
;;   GDBusPropertyInfo **properties;
;;   GDBusAnnotationInfo **annotations;
;; };
(define GDBusInterfaceInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(name ,(bs:pointer intptr_t))
          `(methods
             ,(bs:pointer (bs:pointer "GDBusMethodInfo")))
          `(signals
             ,(bs:pointer (bs:pointer "GDBusSignalInfo")))
          `(properties
             ,(bs:pointer (bs:pointer "GDBusPropertyInfo")))
          `(annotations
             ,(bs:pointer (bs:pointer "GDBusAnnotationInfo"))))))
(export GDBusInterfaceInfo-desc)
(define-fh-compound-type/p GDBusInterfaceInfo GDBusInterfaceInfo-desc)
(define struct-_GDBusInterfaceInfo GDBusInterfaceInfo)

;; typedef struct _GDBusNodeInfo GDBusNodeInfo;
;; struct _GDBusNodeInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *path;
;;   GDBusInterfaceInfo **interfaces;
;;   GDBusNodeInfo **nodes;
;;   GDBusAnnotationInfo **annotations;
;; };
(define GDBusNodeInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(path ,(bs:pointer intptr_t))
          `(interfaces
             ,(bs:pointer (bs:pointer "GDBusInterfaceInfo")))
          `(nodes ,(bs:pointer (bs:pointer "GDBusNodeInfo")))
          `(annotations
             ,(bs:pointer (bs:pointer "GDBusAnnotationInfo"))))))
(export GDBusNodeInfo-desc)
(define-fh-compound-type/p GDBusNodeInfo GDBusNodeInfo-desc)
(define struct-_GDBusNodeInfo GDBusNodeInfo)

;; typedef gboolean (*GCancellableSourceFunc)(GCancellable *cancellable, 
;;     gpointer user_data);
(define-fh-function/p GCancellableSourceFunc
  ffi:int (list (quote *) (quote *)))

;; typedef gboolean (*GPollableSourceFunc)(GObject *pollable_stream, gpointer 
;;     user_data);
(define-fh-function/p GPollableSourceFunc
  ffi:int (list (quote *) (quote *)))

;; typedef struct _GDBusInterface GDBusInterface; /* Dummy typedef */
(define-fh-pointer-type GDBusInterface*)

;; typedef struct _GDBusInterfaceSkeleton GDBusInterfaceSkeleton;
;; struct _GDBusInterfaceSkeleton {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusInterfaceSkeletonPrivate *priv;
;; };
(define GDBusInterfaceSkeleton-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GDBusInterfaceSkeletonPrivate")))))
(export GDBusInterfaceSkeleton-desc)
(define-fh-compound-type/p GDBusInterfaceSkeleton GDBusInterfaceSkeleton-desc)
(define struct-_GDBusInterfaceSkeleton GDBusInterfaceSkeleton)

;; typedef struct _GDBusObject GDBusObject; /* Dummy typedef */
(define-fh-pointer-type GDBusObject*)

;; typedef struct _GDBusObjectSkeleton GDBusObjectSkeleton;
;; struct _GDBusObjectSkeleton {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusObjectSkeletonPrivate *priv;
;; };
(define GDBusObjectSkeleton-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GDBusObjectSkeletonPrivate")))))
(export GDBusObjectSkeleton-desc)
(define-fh-compound-type/p GDBusObjectSkeleton GDBusObjectSkeleton-desc)
(define struct-_GDBusObjectSkeleton GDBusObjectSkeleton)

;; typedef struct _GDBusObjectProxy GDBusObjectProxy;
;; struct _GDBusObjectProxy {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusObjectProxyPrivate *priv;
;; };
(define GDBusObjectProxy-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GDBusObjectProxyPrivate")))))
(export GDBusObjectProxy-desc)
(define-fh-compound-type/p GDBusObjectProxy GDBusObjectProxy-desc)
(define struct-_GDBusObjectProxy GDBusObjectProxy)

;; typedef struct _GDBusObjectManager GDBusObjectManager; /* Dummy typedef */
(define-fh-pointer-type GDBusObjectManager*)

;; typedef struct _GDBusObjectManagerClient GDBusObjectManagerClient;
;; struct _GDBusObjectManagerClient {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusObjectManagerClientPrivate *priv;
;; };
(define GDBusObjectManagerClient-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GDBusObjectManagerClientPrivate")))))
(export GDBusObjectManagerClient-desc)
(define-fh-compound-type/p GDBusObjectManagerClient GDBusObjectManagerClient-desc)
(define struct-_GDBusObjectManagerClient GDBusObjectManagerClient)

;; typedef struct _GDBusObjectManagerServer GDBusObjectManagerServer;
;; struct _GDBusObjectManagerServer {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusObjectManagerServerPrivate *priv;
;; };
(define GDBusObjectManagerServer-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance ,GTypeInstance-desc)
                      `(ref_count ,guint-desc)
                      `(qdata ,(bs:pointer "GData")))))
          `(priv ,(bs:pointer "GDBusObjectManagerServerPrivate")))))
(export GDBusObjectManagerServer-desc)
(define-fh-compound-type/p GDBusObjectManagerServer GDBusObjectManagerServer-desc)
(define struct-_GDBusObjectManagerServer GDBusObjectManagerServer)

;; typedef GType (*GDBusProxyTypeFunc)(GDBusObjectManagerClient *manager, 
;;     const gchar *object_path, const gchar *interface_name, gpointer 
;;     user_data);
(define-fh-function/p GDBusProxyTypeFunc
  ffi:unsigned-long (list (quote *) (quote *) (quote *) (quote *)))

;; typedef struct _GTestDBus GTestDBus;
(define-fh-pointer-type GTestDBus*)

;; typedef struct _GSubprocess GSubprocess;
(define-fh-pointer-type GSubprocess*)

;; typedef struct _GSubprocessLauncher GSubprocessLauncher;
(define-fh-pointer-type GSubprocessLauncher*)

;; typedef struct _GActionInterface GActionInterface;
;; struct _GActionInterface {
;;   GTypeInterface g_iface;
;;   /* virtual functions */
;;   const gchar *(*get_name)(GAction *action);
;;   const GVariantType *(*get_parameter_type)(GAction *action);
;;   const GVariantType *(*get_state_type)(GAction *action);
;;   GVariant *(*get_state_hint)(GAction *action);
;;   gboolean (*get_enabled)(GAction *action);
;;   GVariant *(*get_state)(GAction *action);
;;   void (*change_state)(GAction *action, GVariant *value);
;;   void (*activate)(GAction *action, GVariant *parameter);
;; };
(define GActionInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,GType-desc)
                      `(g_instance_type ,GType-desc))))
          `(get_name ,(bs:pointer intptr_t))
          `(get_parameter_type ,(bs:pointer intptr_t))
          `(get_state_type ,(bs:pointer intptr_t))
          `(get_state_hint ,(bs:pointer intptr_t))
          `(get_enabled ,(bs:pointer intptr_t))
          `(get_state ,(bs:pointer intptr_t))
          `(change_state ,(bs:pointer intptr_t))
          `(activate ,(bs:pointer intptr_t)))))
(export GActionInterface-desc)
(define-fh-compound-type/p GActionInterface GActionInterface-desc)
(define struct-_GActionInterface GActionInterface)

;; extern GType g_action_get_type(void);
(define g_action_get_type
  (let ((~f (ffi:pointer->procedure
              ffi:unsigned-long
              (dynamic-func "g_action_get_type" (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export g_action_get_type)

;; extern const gchar *g_action_get_name(GAction *action);
(define g_action_get_name
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func "g_action_get_name" (dynamic-link))
              (list '*))))
    (lambda (action)
      (let ((~action (unwrap-GAction* action)))
        (~f ~action)))))
(export g_action_get_name)

;; extern const GVariantType *g_action_get_parameter_type(GAction *action);
(define g_action_get_parameter_type
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "g_action_get_parameter_type"
                (dynamic-link))
              (list '*))))
    (lambda (action)
      (let ((~action (unwrap-GAction* action)))
        (~f ~action)))))
(export g_action_get_parameter_type)

;; extern const GVariantType *g_action_get_state_type(GAction *action);
(define g_action_get_state_type
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "g_action_get_state_type"
                (dynamic-link))
              (list '*))))
    (lambda (action)
      (let ((~action (unwrap-GAction* action)))
        (~f ~action)))))
(export g_action_get_state_type)

;; extern GVariant *g_action_get_state_hint(GAction *action);
(define g_action_get_state_hint
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "g_action_get_state_hint"
                (dynamic-link))
              (list '*))))
    (lambda (action)
      (let ((~action (unwrap-GAction* action)))
        (~f ~action)))))
(export g_action_get_state_hint)

;; extern gboolean g_action_get_enabled(GAction *action);
(define g_action_get_enabled
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "g_action_get_enabled"
                (dynamic-link))
              (list '*))))
    (lambda (action)
      (let ((~action (unwrap-GAction* action)))
        (~f ~action)))))
(export g_action_get_enabled)

;; extern GVariant *g_action_get_state(GAction *action);
(define g_action_get_state
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "g_action_get_state"
                (dynamic-link))
              (list '*))))
    (lambda (action)
      (let ((~action (unwrap-GAction* action)))
        (~f ~action)))))
(export g_action_get_state)

;; extern void g_action_change_state(GAction *action, GVariant *value);
(define g_action_change_state
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func
                "g_action_change_state"
                (dynamic-link))
              (list '* '*))))
    (lambda (action value)
      (let ((~action (unwrap-GAction* action))
            (~value (unwrap~pointer value)))
        (~f ~action ~value)))))
(export g_action_change_state)

;; extern void g_action_activate(GAction *action, GVariant *parameter);
(define g_action_activate
  (let ((~f (ffi:pointer->procedure
              ffi:void
              (dynamic-func "g_action_activate" (dynamic-link))
              (list '* '*))))
    (lambda (action parameter)
      (let ((~action (unwrap-GAction* action))
            (~parameter (unwrap~pointer parameter)))
        (~f ~action ~parameter)))))
(export g_action_activate)

;; extern gboolean g_action_name_is_valid(const gchar *action_name);
(define g_action_name_is_valid
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "g_action_name_is_valid"
                (dynamic-link))
              (list '*))))
    (lambda (action_name)
      (let ((~action_name (unwrap~pointer action_name)))
        (~f ~action_name)))))
(export g_action_name_is_valid)

;; extern gboolean g_action_parse_detailed_name(const gchar *detailed_name, 
;;     gchar **action_name, GVariant **target_value, GError **error);
(define g_action_parse_detailed_name
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "g_action_parse_detailed_name"
                (dynamic-link))
              (list '* '* '* '*))))
    (lambda (detailed_name action_name target_value error)
      (let ((~detailed_name (unwrap~pointer detailed_name))
            (~action_name (unwrap~pointer action_name))
            (~target_value (unwrap~pointer target_value))
            (~error (unwrap~pointer error)))
        (~f ~detailed_name
            ~action_name
            ~target_value
            ~error)))))
(export g_action_parse_detailed_name)

;; extern gchar *g_action_print_detailed_name(const gchar *action_name, 
;;     GVariant *target_value);
(define g_action_print_detailed_name
  (let ((~f (ffi:pointer->procedure
              '*
              (dynamic-func
                "g_action_print_detailed_name"
                (dynamic-link))
              (list '* '*))))
    (lambda (action_name target_value)
      (let ((~action_name (unwrap~pointer action_name))
            (~target_value (unwrap~pointer target_value)))
        (~f ~action_name ~target_value)))))
(export g_action_print_detailed_name)

;; typedef struct _GActionGroupInterface GActionGroupInterface;
;; struct _GActionGroupInterface {
;;   GTypeInterface g_iface;
;;   /* virtual functions */
;;   gboolean (*has_action)(GActionGroup *action_group, const gchar *
;;       action_name);
;;   gchar **(*list_actions)(GActionGroup *action_group);
;;   gboolean (*get_action_enabled)(GActionGroup *action_group, const gchar *
;;       action_name);
;;   const GVariantType *(*get_action_parameter_type)(GActionGroup *
;;       action_group, const gchar *action_name);
;;   const GVariantType *(*get_action_state_type)(GActionGroup *action_group, 
;;       const gchar *action_name);
;;   GVariant *(*get_action_state_hint)(GActionGroup *action_group, const 
;;       gchar *action_name);
;;   GVariant *(*get_action_state)(GActionGroup *action_group, const gchar *
;;       action_name);
;;   void (*change_action_state)(GActionGroup *action_group, const gchar *
;;       action_name, GVariant *value);
;;   void (*activate_action)(GActionGroup *action_group, const gchar *
;;       action_name, GVariant *parameter);
;;   /* signals */
;;   void (*action_added)(GActionGroup *action_group, const gchar *action_name
;;       );
;;   void (*action_removed)(GActionGroup *action_group, const gchar *
;;       action_name);
;;   void (*action_enabled_changed)(GActionGroup *action_group, const gchar *
;;       action_name, gboolean enabled);
;;   void (*action_state_changed)(GActionGroup *action_group, const gchar *
;;       action_name, GVariant *state);
;;   /* more virtual functions */
;;   gboolean (*query_action)(GActionGroup *action_group, const gchar *
;;       action_name, gboolean *enabled, const GVariantType **parameter_type, 
;;       const GVariantType **state_type, GVariant **state_hint, GVariant **
;;       state);
;; };
(define GActionGroupInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,GType-desc)
                      `(g_instance_type ,GType-desc))))
          `(has_action ,(bs:pointer intptr_t))
          `(list_actions ,(bs:pointer intptr_t))
          `(get_action_enabled ,(bs:pointer intptr_t))
          `(get_action_parameter_type
             ,(bs:pointer intptr_t))
          `(get_action_state_type ,(bs:pointer intptr_t))
          `(get_action_state_hint ,(bs:pointer intptr_t))
          `(get_action_state ,(bs:pointer intptr_t))
          `(change_action_state ,(bs:pointer intptr_t))
          `(activate_action ,(bs:pointer intptr_t))
          `(action_added ,(bs:pointer intptr_t))
          `(action_removed ,(bs:pointer intptr_t))
          `(action_enabled_changed ,(bs:pointer intptr_t))
          `(action_state_changed ,(bs:pointer intptr_t))
          `(query_action ,(bs:pointer intptr_t)))))
(export GActionGroupInterface-desc)
(define-fh-compound-type/p GActionGroupInterface GActionGroupInterface-desc)
(define struct-_GActionGroupInterface GActionGroupInterface)

;; extern GType g_action_group_get_type(void);
(define g_action_group_get_type
  (let ((~f (ffi:pointer->procedure
              ffi:unsigned-long
              (dynamic-func
                "g_action_group_get_type"
                (dynamic-link))
              (list))))
    (lambda () (let () (~f)))))
(export g_action_group_get_type)

;; extern gboolean g_action_group_has_action(GActionGroup *action_group, const
;;      gchar *action_name);
(define g_action_group_has_action
  (let ((~f (ffi:pointer->procedure
              ffi:int
              (dynamic-func
                "g_action_group_has_action"
                (dynamic-link))
              (list '* '*))))
    (lambda (action_group action_name)
      (let ((~action_group
              (unwrap-GActionGroup* action_group))
            (~action_name (unwrap~pointer action_name)))
        (~f ~action_group ~action_name)))))
(export g_action_group_has_action)

;; extern gchar **g_action_group_list_actions(GActionGroup *action_group);
