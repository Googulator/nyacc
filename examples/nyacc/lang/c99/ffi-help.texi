\input texinfo.tex
@setfilename ffi-help.info
@settitle FFI Helper for Guile

@copying
Copyright (C) 2017 -- Matthew R. Wette.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included with the distribution as COPYING.DOC.
@end copying

@headings off
@everyfooting @| @thispage @|

@node Top
@top FFI Helper for Guile
@format
Matt Wette
December 2017
With NYACC Version 0.99.1
@end format

@raisesections

@section Introduction

The acronym FFI stands for ``Foreign Function Interface''.  It refers
to the Guile facility for binding functions and variables from C source
libraries into Guile programs.  This distribution provides utilities
for generating a loadable Guile module from a set of C declarations
and associated libraries.  The C declarations can, and conventionally
do, come from naming a set of C include files.  The
nominal method for use is to write a @emph{ffi-module} specification
in a file which includes a @code{define-ffi-module} declaration and
then use the command @code{guild compile-ffi} to convert this to Guile
Scheme.
@example
$ guild compile-ffi ffi/cairo.ffi
wrote `ffi/cairo.scm'
@end example
@noindent
Note that no C code is generated.  The hooks to access C-coded
functions in the Cairo library are provided in 100% Guile Scheme.

The compiler for the FFI Helper (FH) is based on the C parser and utilities
which are included in the @uref{https://www.nongnu.org/nyacc,@sc{NYACC}}
package.  Development for the FH is currently being performed in the
@code{c99dev} branch of the associated git repository.  Within the
@sc{NYACC} distribution, the relevant modules can be found under the
directory @file{examples/}.

Use of the FFI-helper module depends on the
@emph{scheme-bytestructure} package available from
@uref{https://github.com/TaylanUB/scheme-bytestructures}.  Since this
package is currently not under version control we provide a partial
copy in the @sc{NYACC} distribution.

At runtime, after the FFI Helper has been used to create Scheme code,
the modules @code{(system ffi-help-rt)} and @code{(bytestructures
guile)} are required.  No other code from the @sc{NYACC} distribution
is needed.  However, note that this is C code we are working with, the
generated code may well contain operating system and machine dependencies.

You are probably hoping to see an example, so let's do that.

@section Demonstration

This is a small FFI Helper example to illustrate its use.  We will
start with the @uref{cairographics.org,Cairo} package because that is
the first one I started with in developing the FFI Helper.  Say you
are an avid Guile user and want to be able to use Cairo in Guile.
Notes that on most systems Cairo comes with the associated
@emph{pkg-config} support files; this demo depends on that support.

WARNING: The FFI-helper package is under active development and there
is some chance the following example will cease to work in the future.

If you want to follow along and are working in the distribution
tree, you should source the file @file{env.sh} in the @file{examples}
directory.

By practice, I like to put all FH generated modules under a directory
called @file{ffi/}, so we will do that.  We start by generating, in
the @file{ffi} directory, a file named @file{cairo.ffi} with the
following contents:
@example
(define-ffi-module (ffi cairo)
  #:pkg-config "cairo"
  #:include '("cairo.h" "cairo-pdf.h" "cairo-svg.h"))
@end example

Now to generate a Guile module you use @code{guild} as follows:
@example
$ guild compile-ffi ffi/cairo.ffi
wrote `ffi/cairo.scm'
@end example
@noindent
Though the file @file{cairo/cairo.ffi} is only three lines long, the file 
@file{ffi/cairo.scm} will be over five thousand lines long.  It looks
like the following:
@example
(define-module (ffi cairo)
  #:use-module (system ffi-help-rt)
  #:use-module ((system foreign) #:prefix ffi:)
  #:use-module (bytestructures guile)
  )
(define link-libs
  (list (dynamic-link "libcairo")))

;; int cairo_version(void);
(define ~cairo_version
  (delay (fh-link-proc
           ffi:int
           "cairo_version"
           (list)
           link-libs)))
(define (cairo_version)
  (let () ((force ~cairo_version))))
(export cairo_version)

@dots{}

;; typedef struct _cairo_matrix @{
;;   double xx;
;;   double yx;
;;   double xy;
;;   double yy;
;;   double x0;
;;   double y0;
;; @} cairo_matrix_t;
(define-public cairo_matrix_t-desc
  (bs:struct
    (list `(xx ,double)
          `(yx ,double)
          `(xy ,double)
          `(yy ,double)
          `(x0 ,double)
          `(y0 ,double))))
(define-fh-compound-type cairo_matrix_t cairo_matrix_t-desc cairo_matrix_t?
 make-cairo_matrix_t)
(export cairo_matrix_t cairo_matrix_t? make-cairo_matrix_t)

@dots{} @i{many, many more declarations} @dots{}

;; access to enum symbols and #define'd constants:
(define ffi-cairo-symbol-val
  (let ((sym-tab
          '((CAIRO_SVG_VERSION_1_1 . 0)
            (CAIRO_SVG_VERSION_1_2 . 1)
            (CAIRO_PDF_VERSION_1_4 . 0)
            (CAIRO_PDF_VERSION_1_5 . 1)
            (CAIRO_REGION_OVERLAP_IN . 0)
            (CAIRO_REGION_OVERLAP_OUT . 1)
            (CAIRO_REGION_OVERLAP_PART . 2)
            (CAIRO_FILTER_FAST . 0)
            (CAIRO_FILTER_GOOD . 1)
            (CAIRO_FILTER_BEST . 2)
            @dots{} @i{more constants} @dots{}
            (CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID
              .
              "application/x-cairo.jbig2-global-id"))))
    (lambda (k) (or (assq-ref sym-tab k)))))
(export ffi-cairo-symbol-val)
(export cairo-lookup)

@dots{} @i{more} @dots{}

@end example
@noindent
Note that from the @emph{pkg-config} spec the FH compiler picks up the
required libraries to bind in.  Also, @code{#define} based constants,
as well as those defined by enums, are provided in a lookup function
@code{ffi-cairo-symbol-val}.  So, for example
@example
guile> (use-modules (ffi cairo))
;;; ffi/cairo.scm:6112:11: warning: possibly unbound variable `cairo_raster_source_acquire_func_t*'
;;; ffi/cairo.scm:6115:11: warning: possibly unbound variable `cairo_raster_source_release_func_t*'
guile> (ffi-cairo-symbol-val 'CAIRO_FORMAT_ARGB32))
$1 = 0
@end example
@noindent
We will discuss the warnings later.  These are signals that extra code
needs to be added to the ffi module.  But you see how the constants
(but not CPP function macros) can be accessed.

Let's try something more useful: a real program.  Create the following
code in a file, say @code{cairo-demo.scm}, then fire up a Guile sesion
and @code{load} the file.
@example
(use-modules (ffi cairo))
(define srf (cairo_image_surface_create 'CAIRO_FORMAT_ARGB32 200 200))
(define cr (cairo_create srf))
(cairo_move_to cr 10.0 10.0)
(cairo_line_to cr 190.0 10.0)
(cairo_line_to cr 190.0 190.0)
(cairo_line_to cr 10.0 190.0)
(cairo_line_to cr 10.0 10.0)
(cairo_stroke cr)
(cairo_surface_write_to_png srf "cairo-demo.png")
(cairo_destroy cr)
(cairo_surface_destroy srf)
@end example
@noindent
If we set up everything correctly you should have the target
@code{png} image of a square.  A few items in the above code are
notable.  First, the call to @code{cairo_image_surface_create}
accepted a symbolic form (@code{'CAIRO_FORMAT_ARGB32}) for the format.
It would have also accepted the associated constant @code{0}.  In
addition, procedures declared in @code{(ffi cairo)} will accept Scheme
strings where the C function wants ``pointer to string.''

Now try this in your Guile session:
@example
guile> srf
$4 = #<cairo_surface_t* 0x7fda53e01880>
guile> cr
$5 = #<cairo_t* 0x7fda54828800>
@end example
@noindent
Note that the FH keeps track of the C types you use.  This can be
useful for debugging but may bloat the namespace.  The constants you
see are the pointer values.  But it goes further.  Let's generate a
matrix type:
@example
guile> (define m (make-cairo_matrix_t))
guile> m
$6 = #<cairo_matrix_t 0x10cc26c00>
guile> (use-modules (system ffh-help-rt))
guile> (pointer-to m)
$7 = #<cairo_matrix_t* 0x10cc26c00>
@end example
@noindent
When it comes to C APIs that expect the user to allocate memory for a
structure and pass the pointer address to the C function, FH provides
a solution:
@example
guile> (cairo_get_matrix cr (pointer-to m))
guile> (fh-object-ref m 'xx)
$9 = 1.0
@end example

@section Creating FFI Modules

@example
  #:library '("libcairo" "libmisc")
  #:inc-dirs '("/opt/local/include/cairo" "/opt/local/include")
  #:renamer (string-renamer
	     (lambda (n)
	       (if (string=? "cairo" (substring n 0 5)) n
		   (string-append "cairo-" n))))
  #:pkg-config "cairo"
  #:include '("cairo.h" "cairo-svg.h")
  #:inc-help (cond
              ((string-contains %host-type "darwin")
               '(("__builtin" "__builtin_va_list=void*")
                 ("sys/cdefs.h" "__DARWIN_ALIAS(X)=")))
              (else '()))
  #:decl-filter (string-member-proc
  		 "cairo_t" "cairo_status_t" "cairo_surface_t"
                 "cairo_create" "cairo_svg_surface_create"
                 "cairo_destroy" "cairo_surface_destroy")
  #:export (make-cairo-unit-matrix)
@end example

Another decl-filter, useful for debugging.
@example
  #:decl-filter (lambda (k)
                  (cond
                   ((member k '(
                                "cairo_t" "cairo_status_t"
                                "cairo_glyph_t" "cairo_path_data_t"
				)) #t)
                   ((equal? k '(union . "union-_cairo_glyph_t")) #t)
                   (else #f)))
@end example

@section Trimming Things Down

After using the FFI Helper to provide code for some packages you may
notice that the quantity of code produced is large.  For example, to
generate a guile interface for gtk2+, along with glib, gobject, pango
and gdk you will end up with over 100k lines of scm code.  This may
seem bulky.  Instead it may be preferable to generate a small number
of calls for gtk and work from there.  In order to achieve this you
could use the (upcoming) @code{#:api-code} interface.  This is akin
to generating a small dot-h file and BLA BLA BLA.

For example, if we wanted to just generate code for the gtk hello
world demo we could geneate
@example
(define-ffi-module (hack1)
  #:pkg-config "gtk+-2.0"
  #:api-code "
  #include <gtk2.h>
  void gtk_init(int *argc, char ***argv);
  g_signal_connect
  void gtk_container_set_border_width(GtkContainer *container,
       guint border_width);
  void gtk_container_add(GtkContainer *container, GtkWidget *widget);
  void gtk_widget_show(GtkWidget *widget);
  void gtk_main(void);
  "
@end example

Since the above example does not ask the FH to pull in typedef's then
the pointer types will be expanded to native.  You could invent your
own types or echo the typedefs from the package headers
@example

@end example
                   
@section The Guile Foreign Function Interface

@subsection Function Calls

There are two parts to calling functions.  The first is to declare a
function from the C-function address, the C-function argument types
and the C-function return type.  The second is to call the
function.  Scheme does not have the same type system as C and the
Guile FFI is forgiving here.   When we declare a C function interface
with, say, an int32 argument type, Guile expects us to pass a possibly
negative TBD type. [TODO Figure out what Guile really does wrt
C-Scheme type validity and conversion.

@section Bytestructure Function Type
We need to add bytestructure function (pointer) type.  Now C is a bit
odd about function and function pointers.  They are treated as the
same.  We will work functions as follows, where @code{f-bs} represents
a pointer to a function bytestructure 
@example
(fh-object-ref f-bs) => #<pointer ...>
(fh-object-ref f-bs '*) => #<procedure ...>
@end example
@noindent
On the other hand, setters can take either.  Any of these will get
the desired behavior:
@example
(fh-object-set! f-bs #<pointer ...>)
(fh-object-set! f-bs #<number>) ;; aka pointer-address
(fh-object-set! f-bs #<procedure ...>)
@end example
@noindent
We still have to deal with @code{ref<->deref!}.  I think this should
be self referencing.  That is
@example
(pointer-to f-bs) => f-bs
@end example

This descriptor includes fields
@enumerate
@item return descriptor
@item parameter list
@end enumerate
@noindent
Elements of parameter list may be
@itemize
@item descriptor
@item a pair: symbolic name and descriptor
@item the ellipsis symbol: @code{'...}
@end itemize

When @code{bs:function} is called to create a descriptor, either the
descriptor for the return type, or the list of descriptors for the
parameters can be a promise.  That is
@example
(define f-desc (bs:function (delay ret-desc) (delay (list int xxx xxx))))
@end example
@noindent

@section The Type System

Explain why in Scheme we need to have distinct pointer types!  And
then explain how we deal with them: type => define type*.
expand-typerefs will not expand pointer types if

We want a closed type system with accessors and setters.  We rely on
@emph{bytestrutures} for compound types, vectors, etc.  For base C
types we will keep xxx.  Enums are a speial case.
Let use the following convention
@table @code
@item objS
FH object with scheme type representation
@item objB
FH object with underying bytestructure representation
@item valGS
A Guile Scheme value: number, xxx
@item valGP
A Guile Pointer (@code{#<pointer ...>})
@item valBS
A bytestructure: @code{#<bytestructure ...>}.
@item valBV
A bytevector @code{#<bytevector ...>}.
@end table
@noindent
There will be FH types for structs, unions, vectors, pointers, but not
for enums, scalar integer or floating types.  Strings will be handled
as pointers.

Consider working with the following C types
@table @code
@item foo_t
a compount type
@item bar_t
a typedef for a doulble
@item int
base type
@item who_t
an enum
@end table

The user use cases are generate variable
@itemize
@item
Generate type w/ any content:
@code{(make foo_t)}
@item

@code{(make foo_t objGS)}
@item
@code{(make foo_t objBS)}
@end itemize

@itemize
@item
Pass pointer to data to C function:
@example
(define v (make-double))
(c_funtion (pointer-to v))
(fh-object-ref v) => number
@end example
@end itemize

@code{bar_t} that is a @code{double} and an enum type @code{baz_t}.
In the items below, @code{foo_t} is a type and @code{bar} is a wrap/unwrap.
@itemize
@item
(make-foo_t) => #<foo_t valS> | #<foo_t valX>
@item
(make-foo_t valS) => #<foo_t valS|valX>
@item
(fh-object-ref objS) => valS
@item
(fh-object-ref objX) => valX
@item
(fh-object-ref objX 'sel) => valX | valS
@end itemize
@noindent
We need a (somewhat?) closed type system.  In the FFI Helper we choose
to classify the following
@table @asis
@item compound
structs, unions and arrays (Scheme does not have arrays)
@item simple
fixed and float scalars
@item special
special are enums and pointers
@end table

The FFI Helper uses the Guile struct-vtable constructs to deal with
types.  In addition to the builtin name and printer fields, each type
includes
@table @asis
@item wrapper
a procedure to convert a (raw) Scheme object into a FH type
@item un-wrapper
(sloppy) procedure to convert a FH type (or simpilar) into a (raw)
scheme object
@item pointer-to
the FH type describing a pointer to this type, or @code{#f}
@item points-to
the FH type describing the dereferened pointer type, or @code{#f}
@end table

Think of wrapper as @code{ffi->scm} and unwrapper as @code{scm->ffi}.

@itemize
@item
For vectors, structs and unions the raw Scheme object type is
`bytevector'.
@item
For numeric types, the raw Scheme object type is a Scheme numeric type.
@end itemize

@subsection Support for Aggregate Types

As mentioned @code{scheme-bytestructures} is used to support structs
and unions.  Here is a segment of generated code to illustrate:
@example
;; typedef union _cairo_path_data_t cairo_path_data_t;
;; union _cairo_path_data_t @{
;;   struct @{
;;     cairo_path_data_type_t type;
;;     int length;
;;   @} header;
;;   struct @{
;;     double x, y;
;;   @} point;
;; @};
(define union-_cairo_path_data_t-desc
  (bs:union
    (list `(header
             ,(bs:struct
                (list `(type ,cairo_path_data_type_t-desc)
                      `(length ,int))))
          `(point ,(bs:struct (list `(y ,double) `(x ,double)))))))
(define cairo_path_data_t-desc union-_cairo_path_data_t-desc)
@end example
@noindent
Note that forward references are swapped around.

@subsubsection forward references

Here we do it but store @code{GObject} 
@example
;; typedef struct _GObject GObject;
(define-public GObject-desc 'void)
(define-public GObject*-desc (bs:pointer (delay GObject-desc)))
(define-fh-pointer-type GObject* GObject*-desc GObject*? make-GObject*)
(export GObject* GObject*? make-GObject*)
@end example

@example
;; typedef struct _GObject GInitiallyUnowned;
(define-public GInitiallyUnowned-desc 'void)
(define-public GInitiallyUnowned*-desc
  (bs:pointer (delay GInitiallyUnowned-desc)))
(define-fh-pointer-type GInitiallyUnowned* GInitiallyUnowned*-desc 
                        GInitiallyUnowned*? make-GInitiallyUnowned*)
(export GInitiallyUnowned* GInitiallyUnowned*? make-GInitiallyUnowned*)
@end example

@example
;; struct _GObject @{
;;   GTypeInstance g_type_instance;
;;   /*< private >*/
;;   volatile guint ref_count;
;;   GData *qdata;
;; @};
(define-public struct-_GObject-desc
  (bs:struct
    (list `(g_type_instance ,GTypeInstance-desc)
          `(ref_count ,unsigned-int)
          `(qdata ,(bs:pointer GData-desc)))))
(define-fh-compound-type struct-_GObject struct-_GObject-desc struct-_GObject?
 make-struct-_GObject)
(export struct-_GObject struct-_GObject? make-struct-_GObject)
(define-public struct-_GObject*-desc
  (bs:pointer struct-_GObject-desc))
(define-fh-pointer-type struct-_GObject* struct-_GObject*-desc 
 struct-_GObject*? make-struct-_GObject*)
(export struct-_GObject* struct-_GObject*? make-struct-_GObject*)
(ref<->deref! struct-_GObject* make-struct-_GObject*
              struct-_GObject make-struct-_GObject)
(set! GObject-desc struct-_GObject-desc)
(define-fh-compound-type GObject GObject-desc GObject? make-GObject)
(export GObject GObject? make-GObject)
@end example


@subsection Base Types

The module @code{(system ffi-help-rt)} provides types for
the following
@table @code
@item char*
string pointer
@item double*
pointer to double
@item int*
pointer to int
@item unsigned-int*
pointer to unsigned int
@end table
@noindent
These types are useful for sitaions where the corresponding types are
passed by reference as return types.  For example
@lisp
(let ((name (make-char*)))
  (some_function (pointer-to name))
  (display "name: ") (display (char*->string name)) (newline))
(let ((return-val (make-double))) ;; <= to do ???
  (another_function (pointer-to return-val))
  (simple-format #t "val is ~S\n" (fh-object-ref return-val)))
@end lisp



@subsection Type Support

For @code{bytestructures}, arguments to setters and return values
from getters are Scheme values for numerical types and bytestructures
for other types (e.g., structs and unions).

In FH C object types are either ``wrapped'' or ``defined''.  If a type
is wrapped then we provide a wrap and unwrap function for that type.
Numeric types and enum's are wrapped.  Other types are defined as FH
types.  The FH types have a wrapper and unwrapper properties.  These
properties are procedures and
can be accessed with
@code{(fht-unwrap type)} and @code{(fht-wrap type)}
or executed with
@code{(fh-unwrap object)} and @code{(fh-wrap object)}.

@deffn {Procedure} fh-type? type
This predicate tests for FH types.
@end deffn

@deffn {Procedure} fh-object? obj
This predicate tests for FH objects.
@end deffn

@deffn {Syntax} define-fh-aggregate-type name desc
@deffnx {Syntax} define-fh-aggregate-type/p name desc
@deffnx {Syntax} define-fh-aggregate-type/pp name desc
The first form generates an FY aggregate type based on a bytestructure
descriptor.  The second and third forms will build, in addition,
pointer-to type and pointer-to-pointer-to type.  The primary form
will generate and export the following:
@table @code
@item type
a Guile (vtable) struct representing the type
@item type?
a predicate to test an object to be of type
@item make
a procedure to wrap based on args provided to the @code{bytestructure}
procedure
@item wrap
same as @code{make} with one bytevector argument
@item unwrap
a procedure to produce a Scheme bytevector
@end table
@end deffn

The following shows that we can store a procedure as a bogus
bytevector.
@example
(use-modules ((system foreign) #:prefix ffi:))
(define (foo arg) arg)
(define foo-ptr (ffi:procedure->pointer ffi:int foo (list ffi:int)))
(define foo-bv (ffi:pointer->bytevector foo-ptr (ffi:sizeof '*)))
(define foo-bv-ptr (ffi:bytevector->pointer foo-bv))
(define foo-echo (ffi:pointer->procedure ffi:int foo-bv-ptr (list ffi:int)))
@end example
@noindent
But we won't use this.

@deffn {Syntax} define-fh-enum-type name sv-map
Generate an enum type.  Exports wrap, unwrap, type? but no make.
@end deffn

@deffn {Syntax} define-fh-pointer-type name [desc]
Generate a pointer type.  With (bytestructure @code{bs:pointer})
descriptor @var{desc} generates a bytestructe-based type.  Otherwise,
generates a Guile FFI pointer based type.
@end deffn


@subsection Function Argument Return Types 

Here are the FFI simple types:
@verbatim
  short unsigned-short int unsigned-int long unsigned-long
  int8 uint8  int16 uint16 int32 uint32 uint64
  size_t ssize_t ptrdiff_t
  float double
  void
@end verbatim

Here are the BS simple types:
@verbatim
  short unsigned-short int unsigned-int long unsigned-long
  long-long unsigned-long-long
  int8 uint8  int16 uint16 int32 uint32 uint64
  size_t ssize_t ptrdiff_t intptr_t uintptr_t
  float double complex64 complex128
@end verbatim

The C standard says
@quotation
A declaration of a parameter as ‘‘function returning type’’ shall be
adjusted to ‘‘pointer to function returning type.’’
@end quotation
I'm guessing this goes for struct fields as well.

C says bitfields are (signed) int, unsigned int, or _Bool.

C says if function parameter declared as arrays should be interpreted
as pointers.


@subsection Library Variables

Access to externs is provide through access procedure:
@example
;; C header says: extern int foo_errno;
;; So we use:
(foo_errno)
@end example

@section Debugging FFI Helper Modules

Since this is not all straightforward you will get errors.

Method
@enumerate
@item
compile-ffi with flag to echo declarations
@item
compile -O0 the resulting scm file
@item
guile -c '(use-modules (ffi mymod))'
@end enumerate

@subsection @code{MAX_HEAP_SECTS}

The message is
@quotation
Too many heap sections: Increase MAXHINCR or MAX_HEAP_SECTS
@end quotation
The message comes from the garbage collector.  It means you've run out
of memory.  The recommended fix is to @code{GC_INITIAL_HEAP_SIZE} to
something big:
@example
export GC_INITIAL_HEAP_SIZE=16G
@end example
I found that this actually came from a bug in the ff-compiler which
generated this code:
@example
  (bs:struct
    (list ...
          `(compose_buffer ,(bs:vector #f unsigned-int))
@end example
@noindent
The original C declaration was
@example
struct _GtkIMContextSimple @{
  ...
  guint compose_buffer[7 + 1];
  ...
@};
@end example
@noindent

@subsection Warning: Possibly Unbound Variable

@smallexample
;;; ffi/gtk2+.scm:3564:5: warning: possibly unbound variable `GtkEnumValue*'
;;; ffi/gtk2+.scm:3581:5: warning: possibly unbound variable `GtkFlagValue*'
;;; ffi/gtk2+.scm:10717:11: warning: possibly unbound variable `GtkAllocation*'
;;; ffi/gtk2+.scm:15107:15: warning: possibly unbound variable `GdkNativeWindow'
;;; ffi/gtk2+.scm:15122:15: warning: possibly unbound variable `GdkNativeWindow'
;;; ffi/gtk2+.scm:26522:11: warning: possibly unbound variable `GSignalCMarshaller'
;;; ffi/gtk2+.scm:62440:11: warning: possibly unbound variable `GdkNativeWindow'
;;; ffi/gtk2+.scm:62453:5: warning: possibly unbound variable `GdkNativeWindow'
@end smallexample

When I see this I usually check the scm file and see one of many
things
@table @code
@item (fht-unwrap GtkAllocation*)
This usually means that @code{GtkAllocation} was somehow defined
but not the pointer type.
@end table

@section Brief API Specification

What might go into the Guile Ref Manual needs to include these:
@example
#:api-code
#:cpp-defs
#:decl-filter
#:inc-dirs
#:inc-filter
#:inc-help
#:include
#:library
#:pkg-config
#:renamer
#:use-ffi-module
@end example


@section Miscellaneous Notes

@subsection Unwrapping and Wrapping

For functions we use @emph{unwrappers} and @emph{wrappers}.  Arguments
to a function are unwrapped before being passed to the routine
generated by @code{pointer->procedure}.  The end user will nominally not be
using these procedures.  If an argument is a pointer
to a type with a typedef (e.g., a struct type) then the type unwrapper
is called
@example
((fht-unwrap <type>) arg) => ~arg
@end example
@noindent
If the argument is not associated with a defined type (e.g., enums)
then the associated unwrapper will be called:
@example
(unwrap-enum-foo arg) => ~arg
(unwrap~float arg) => ~arg
OR
(unwrap-enum-foo 'FOO_TRUE) => 1
(unwrap~float 1) => 1.0
@end example

In @file{ffi-help.scm}, the code generator, we convert structs, unions and
their associated typedefs to defined types, but enums and enum
typedefs are only provided with unwrappers and wrappers.

@subsection Other

User is responsible for calling string->pointer and pointer->string.

By definition: wrap is c->scm; unwrap is scm->c.
 
@code{define-ffi-module} options:
@table @code
@item #:decl-filter proc
@item #:inc-filter proc
@item #:include expr
expr is string or list or procecure that evaluates to string or list
@item #:library expr
expr is string or list or procecure that evaluates to string or list
@item #:pkg-config string
@item #:renamer proc
procdure
@end table

Here are the type of hacks I need to parse inside @file{/usr/include}
with NYACC's C99 parser.  There is no such thing as a working C standard.
@example
(define cpp-defs
  (cond
   ((string-contains %host-type "darwin")
    '("__GNUC__=6")
    (remove (lambda (s)
	      (string-contains s "_ENVIRONMENT_MAC_OS_X_VERSION"))
	    (get-gcc-cpp-defs)))
   (else '())))
(define fh-inc-dirs
  (append
   `(,(assq-ref %guile-build-info 'includedir) "/usr/include")
   (get-gcc-inc-dirs)))
(define fh-inc-help
  (cond
   ((string-contains %host-type "darwin")
    '(("__builtin"
       "__builtin_va_list=void*"
       "__attribute__(X)="
       "__inline=" "__inline__="
       "__asm(X)=" "__asm__(X)="
       "__has_include(X)=__has_include__(X)"
       "__extension__="
       "__signed=signed"
       )))
   (else
    '(("__builtin"
       "__builtin_va_list=void*" "__attribute__(X)="
       "__inline=" "__inline__="
       "__asm(X)=" "__asm__(X)="
       "__has_include(X)=__has_include__(X)"
       "__extension__="
       )))))
@end example

@subsection Current Assumptions

We generate types for all C types and their pointers.  This makes
working C types convenient, I think, at the cost of bloating the
namespace.

Here is a list of assumptions
@enumerate
@item
no raw aggregates get passed to C functions
@end enumerate

@subsection Caveats

@enumerate
@item
Forward references are handled by lookup.
@item
Function pointer types as fields in structures are just turned into
pointers to @code{intptr_t}.
@item
How the hell do I deal with varargs?  Skip for now.
@end enumerate

@section Work to Go 

@table @asis
@item 02
if need foo_t pointer then I gen wrapper for foo_t* but add
foo_t to *wrappers* so if I later run into need for foo_t may be prob
@item 03
allow user to specify #:renamer (lambda (n) "make_goo" => "make-goo")
@item 04
Now the hard part if we want to reference other ffi-modules for types
or other c-routines.  Say ffi-module foo defines foo_t
now in ffi-module bar we want to reference, but redefine, foo_t
@example
(define-ffi-module (cairo cairo) ...)
(define-ffi-module (cairo cairo-svg) #:use-ffi-module (cairo cairo)
@end example
@item 05
Should setters for @code{bs:struct} enum fields check for symbolic
arg?
@item 06
Use guardians for @code{cairo_destroy} and
@code{cairo_surface_destroy}?
@item 07
What about vectors? If @code{foo(foo_t x[]},
@enumerate
@item user must make vector of foo_t
@item ffi-module author should generate a make-foo_t-vector procedure
@end enumerate
@end table

@subsection Completed
@table @asis
@item 01
@example
enum-wrap 0 => 'CAIRO_STATUS_SUCCESS
enum-unwrap 'CAIRO_STATUS_SUCCESS => 0
@end example
@end table

@section Administrative Items

@subsection Copyright

Copyright (C) 2017 -- Matthew R. Wette.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included with the distribution as COPYING.DOC.

@bye
@c --- last line ---
