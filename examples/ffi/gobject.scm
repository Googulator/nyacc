;; auto-generated by ffi-help.scm

(define-module (ffi gobject)
  #:use-module (ffi glib)
  #:use-module (system ffi-help-rt)
  #:use-module ((system foreign) #:prefix ffi:)
  #:use-module (bytestructures guile)
  )
(dynamic-link "libglib-2.0")
(dynamic-link "libintl")
(dynamic-link "libgobject-2.0")
(define void intptr_t)
(define echo-decls #f)

;; typedef gsize GType;
(define GType-desc unsigned-long)
(export GType-desc)
(define unwrap-GType unwrap~fixed)
(define wrap-GType identity)
(export GType-desc unwrap-GType wrap-GType)

;; typedef struct _GValue GValue;
(define GValue-desc void)
(export GValue-desc)
(define GValue*-desc (bs:pointer (delay GValue-desc)))
(export GValue*-desc)
(define-fh-pointer-type GValue* GValue*-desc)

;; typedef union _GTypeCValue GTypeCValue;
(define-fh-pointer-type GTypeCValue*)

;; typedef struct _GTypePlugin GTypePlugin;
(define GTypePlugin-desc void)
(export GTypePlugin-desc)
(define GTypePlugin*-desc (bs:pointer GTypePlugin-desc))
(export GTypePlugin*-desc)
(define-fh-pointer-type GTypePlugin* GTypePlugin*-desc)

;; typedef struct _GTypeClass GTypeClass;
(define GTypeClass-desc void)
(export GTypeClass-desc)
(define GTypeClass*-desc (bs:pointer (delay GTypeClass-desc)))
(export GTypeClass*-desc)
(define-fh-pointer-type GTypeClass* GTypeClass*-desc)

;; typedef struct _GTypeInterface GTypeInterface;
(define GTypeInterface-desc void)
(export GTypeInterface-desc)
(define GTypeInterface*-desc (bs:pointer (delay GTypeInterface-desc)))
(export GTypeInterface*-desc)
(define-fh-pointer-type GTypeInterface* GTypeInterface*-desc)

;; typedef struct _GTypeInstance GTypeInstance;
(define GTypeInstance-desc void)
(export GTypeInstance-desc)
(define GTypeInstance*-desc (bs:pointer (delay GTypeInstance-desc)))
(export GTypeInstance*-desc)
(define-fh-pointer-type GTypeInstance* GTypeInstance*-desc)

;; typedef struct _GTypeInfo GTypeInfo;
(define GTypeInfo-desc void)
(export GTypeInfo-desc)
(define GTypeInfo*-desc (bs:pointer (delay GTypeInfo-desc)))
(export GTypeInfo*-desc)
(define-fh-pointer-type GTypeInfo* GTypeInfo*-desc)

;; typedef struct _GTypeFundamentalInfo GTypeFundamentalInfo;
(define GTypeFundamentalInfo-desc void)
(export GTypeFundamentalInfo-desc)
(define GTypeFundamentalInfo*-desc (bs:pointer (delay GTypeFundamentalInfo-desc)))
(export GTypeFundamentalInfo*-desc)
(define-fh-pointer-type GTypeFundamentalInfo* GTypeFundamentalInfo*-desc)

;; typedef struct _GInterfaceInfo GInterfaceInfo;
(define GInterfaceInfo-desc void)
(export GInterfaceInfo-desc)
(define GInterfaceInfo*-desc (bs:pointer (delay GInterfaceInfo-desc)))
(export GInterfaceInfo*-desc)
(define-fh-pointer-type GInterfaceInfo* GInterfaceInfo*-desc)

;; typedef struct _GTypeValueTable GTypeValueTable;
(define GTypeValueTable-desc void)
(export GTypeValueTable-desc)
(define GTypeValueTable*-desc (bs:pointer (delay GTypeValueTable-desc)))
(export GTypeValueTable*-desc)
(define-fh-pointer-type GTypeValueTable* GTypeValueTable*-desc)

;; typedef struct _GTypeQuery GTypeQuery;
(define GTypeQuery-desc void)
(export GTypeQuery-desc)
(define GTypeQuery*-desc (bs:pointer (delay GTypeQuery-desc)))
(export GTypeQuery*-desc)
(define-fh-pointer-type GTypeQuery* GTypeQuery*-desc)

;; struct _GTypeClass {
;;   /*< private >*/
;;   GType g_type;
;; };
(define struct-_GTypeClass-desc
  (bs:struct (list `(g_type ,unsigned-long))))
(export struct-_GTypeClass-desc)
(define-fh-compound-type/p struct-_GTypeClass struct-_GTypeClass-desc)
(set! GTypeClass-desc struct-_GTypeClass-desc)
(define-fh-compound-type GTypeClass GTypeClass-desc)

;; struct _GTypeInstance {
;;   /*< private >*/
;;   GTypeClass *g_class;
;; };
(define struct-_GTypeInstance-desc
  (bs:struct
    (list `(g_class ,(bs:pointer (delay GTypeClass*-desc))))))
(export struct-_GTypeInstance-desc)
(define-fh-compound-type/p struct-_GTypeInstance struct-_GTypeInstance-desc)
(set! GTypeInstance-desc struct-_GTypeInstance-desc)
(define-fh-compound-type GTypeInstance GTypeInstance-desc)

;; struct _GTypeInterface {
;;   /*< private >*/
;;   GType g_type; /* iface type */
;;   GType g_instance_type;
;; };
(define struct-_GTypeInterface-desc
  (bs:struct
    (list `(g_type ,unsigned-long)
          `(g_instance_type ,unsigned-long))))
(export struct-_GTypeInterface-desc)
(define-fh-compound-type/p struct-_GTypeInterface struct-_GTypeInterface-desc)
(set! GTypeInterface-desc struct-_GTypeInterface-desc)
(define-fh-compound-type GTypeInterface GTypeInterface-desc)

;; struct _GTypeQuery {
;;   GType type;
;;   const gchar *type_name;
;;   guint class_size;
;;   guint instance_size;
;; };
(define struct-_GTypeQuery-desc
  (bs:struct
    (list `(type ,unsigned-long)
          `(type_name ,(bs:pointer int))
          `(class_size ,unsigned-int)
          `(instance_size ,unsigned-int))))
(export struct-_GTypeQuery-desc)
(define-fh-compound-type/p struct-_GTypeQuery struct-_GTypeQuery-desc)
(set! GTypeQuery-desc struct-_GTypeQuery-desc)
(define-fh-compound-type GTypeQuery GTypeQuery-desc)

;; typedef enum {
;;   G_TYPE_DEBUG_NONE = 0,
;;   G_TYPE_DEBUG_OBJECTS = 1<<0,
;;   G_TYPE_DEBUG_SIGNALS = 1<<1,
;;   G_TYPE_DEBUG_INSTANCE_COUNT = 1<<2,
;;   G_TYPE_DEBUG_MASK = 0x07,
;; } GTypeDebugFlags;
(define-fh-enum GTypeDebugFlags
  '((G_TYPE_DEBUG_NONE . 0)
    (G_TYPE_DEBUG_OBJECTS . 1)
    (G_TYPE_DEBUG_SIGNALS . 2)
    (G_TYPE_DEBUG_INSTANCE_COUNT . 4)
    (G_TYPE_DEBUG_MASK . 7))
  )

;; extern void g_type_init(void);
(define ~g_type_init #f)
(define (g_type_init)
  (unless
    ~g_type_init
    (set! ~g_type_init
      (fh-link-proc "g_type_init" ffi:void (list))))
  (let () (~g_type_init)))
(export g_type_init)

;; extern void g_type_init_with_debug_flags(GTypeDebugFlags debug_flags);
(define ~g_type_init_with_debug_flags #f)
(define (g_type_init_with_debug_flags debug_flags)
  (unless
    ~g_type_init_with_debug_flags
    (set! ~g_type_init_with_debug_flags
      (fh-link-proc
        "g_type_init_with_debug_flags"
        ffi:void
        (list ffi:int))))
  (let ((~debug_flags (unwrap~fixed debug_flags)))
    (~g_type_init_with_debug_flags ~debug_flags)))
(export g_type_init_with_debug_flags)

;; extern const gchar *g_type_name(GType type);
(define ~g_type_name #f)
(define (g_type_name type)
  (unless
    ~g_type_name
    (set! ~g_type_name
      (fh-link-proc
        "g_type_name"
        '*
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (~g_type_name ~type)))
(export g_type_name)

;; extern GQuark g_type_qname(GType type);
(define ~g_type_qname #f)
(define (g_type_qname type)
  (unless
    ~g_type_qname
    (set! ~g_type_qname
      (fh-link-proc
        "g_type_qname"
        ffi:unsigned-int
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (~g_type_qname ~type)))
(export g_type_qname)

;; extern GType g_type_from_name(const gchar *name);
(define ~g_type_from_name #f)
(define (g_type_from_name name)
  (unless
    ~g_type_from_name
    (set! ~g_type_from_name
      (fh-link-proc
        "g_type_from_name"
        ffi:unsigned-long
        (list '*))))
  (let ((~name (unwrap~pointer name)))
    (~g_type_from_name ~name)))
(export g_type_from_name)

;; extern GType g_type_parent(GType type);
(define ~g_type_parent #f)
(define (g_type_parent type)
  (unless
    ~g_type_parent
    (set! ~g_type_parent
      (fh-link-proc
        "g_type_parent"
        ffi:unsigned-long
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (~g_type_parent ~type)))
(export g_type_parent)

;; extern guint g_type_depth(GType type);
(define ~g_type_depth #f)
(define (g_type_depth type)
  (unless
    ~g_type_depth
    (set! ~g_type_depth
      (fh-link-proc
        "g_type_depth"
        ffi:unsigned-int
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (~g_type_depth ~type)))
(export g_type_depth)

;; extern GType g_type_next_base(GType leaf_type, GType root_type);
(define ~g_type_next_base #f)
(define (g_type_next_base leaf_type root_type)
  (unless
    ~g_type_next_base
    (set! ~g_type_next_base
      (fh-link-proc
        "g_type_next_base"
        ffi:unsigned-long
        (list ffi:unsigned-long ffi:unsigned-long))))
  (let ((~leaf_type (unwrap~fixed leaf_type))
        (~root_type (unwrap~fixed root_type)))
    (~g_type_next_base ~leaf_type ~root_type)))
(export g_type_next_base)

;; extern gboolean g_type_is_a(GType type, GType is_a_type);
(define ~g_type_is_a #f)
(define (g_type_is_a type is_a_type)
  (unless
    ~g_type_is_a
    (set! ~g_type_is_a
      (fh-link-proc
        "g_type_is_a"
        ffi:int
        (list ffi:unsigned-long ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type))
        (~is_a_type (unwrap~fixed is_a_type)))
    (~g_type_is_a ~type ~is_a_type)))
(export g_type_is_a)

;; extern gpointer g_type_class_ref(GType type);
(define ~g_type_class_ref #f)
(define (g_type_class_ref type)
  (unless
    ~g_type_class_ref
    (set! ~g_type_class_ref
      (fh-link-proc
        "g_type_class_ref"
        '*
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (wrap-gpointer (~g_type_class_ref ~type))))
(export g_type_class_ref)

;; extern gpointer g_type_class_peek(GType type);
(define ~g_type_class_peek #f)
(define (g_type_class_peek type)
  (unless
    ~g_type_class_peek
    (set! ~g_type_class_peek
      (fh-link-proc
        "g_type_class_peek"
        '*
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (wrap-gpointer (~g_type_class_peek ~type))))
(export g_type_class_peek)

;; extern gpointer g_type_class_peek_static(GType type);
(define ~g_type_class_peek_static #f)
(define (g_type_class_peek_static type)
  (unless
    ~g_type_class_peek_static
    (set! ~g_type_class_peek_static
      (fh-link-proc
        "g_type_class_peek_static"
        '*
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (wrap-gpointer (~g_type_class_peek_static ~type))))
(export g_type_class_peek_static)

;; extern void g_type_class_unref(gpointer g_class);
(define ~g_type_class_unref #f)
(define (g_type_class_unref g_class)
  (unless
    ~g_type_class_unref
    (set! ~g_type_class_unref
      (fh-link-proc
        "g_type_class_unref"
        ffi:void
        (list '*))))
  (let ((~g_class (unwrap-gpointer g_class)))
    (~g_type_class_unref ~g_class)))
(export g_type_class_unref)

;; extern gpointer g_type_class_peek_parent(gpointer g_class);
(define ~g_type_class_peek_parent #f)
(define (g_type_class_peek_parent g_class)
  (unless
    ~g_type_class_peek_parent
    (set! ~g_type_class_peek_parent
      (fh-link-proc
        "g_type_class_peek_parent"
        '*
        (list '*))))
  (let ((~g_class (unwrap-gpointer g_class)))
    (wrap-gpointer
      (~g_type_class_peek_parent ~g_class))))
(export g_type_class_peek_parent)

;; extern gpointer g_type_interface_peek(gpointer instance_class, GType 
;;     iface_type);
(define ~g_type_interface_peek #f)
(define (g_type_interface_peek instance_class iface_type)
  (unless
    ~g_type_interface_peek
    (set! ~g_type_interface_peek
      (fh-link-proc
        "g_type_interface_peek"
        '*
        (list '* ffi:unsigned-long))))
  (let ((~instance_class
          (unwrap-gpointer instance_class))
        (~iface_type (unwrap~fixed iface_type)))
    (wrap-gpointer
      (~g_type_interface_peek
        ~instance_class
        ~iface_type))))
(export g_type_interface_peek)

;; extern gpointer g_type_interface_peek_parent(gpointer g_iface);
(define ~g_type_interface_peek_parent #f)
(define (g_type_interface_peek_parent g_iface)
  (unless
    ~g_type_interface_peek_parent
    (set! ~g_type_interface_peek_parent
      (fh-link-proc
        "g_type_interface_peek_parent"
        '*
        (list '*))))
  (let ((~g_iface (unwrap-gpointer g_iface)))
    (wrap-gpointer
      (~g_type_interface_peek_parent ~g_iface))))
(export g_type_interface_peek_parent)

;; extern gpointer g_type_default_interface_ref(GType g_type);
(define ~g_type_default_interface_ref #f)
(define (g_type_default_interface_ref g_type)
  (unless
    ~g_type_default_interface_ref
    (set! ~g_type_default_interface_ref
      (fh-link-proc
        "g_type_default_interface_ref"
        '*
        (list ffi:unsigned-long))))
  (let ((~g_type (unwrap~fixed g_type)))
    (wrap-gpointer
      (~g_type_default_interface_ref ~g_type))))
(export g_type_default_interface_ref)

;; extern gpointer g_type_default_interface_peek(GType g_type);
(define ~g_type_default_interface_peek #f)
(define (g_type_default_interface_peek g_type)
  (unless
    ~g_type_default_interface_peek
    (set! ~g_type_default_interface_peek
      (fh-link-proc
        "g_type_default_interface_peek"
        '*
        (list ffi:unsigned-long))))
  (let ((~g_type (unwrap~fixed g_type)))
    (wrap-gpointer
      (~g_type_default_interface_peek ~g_type))))
(export g_type_default_interface_peek)

;; extern void g_type_default_interface_unref(gpointer g_iface);
(define ~g_type_default_interface_unref #f)
(define (g_type_default_interface_unref g_iface)
  (unless
    ~g_type_default_interface_unref
    (set! ~g_type_default_interface_unref
      (fh-link-proc
        "g_type_default_interface_unref"
        ffi:void
        (list '*))))
  (let ((~g_iface (unwrap-gpointer g_iface)))
    (~g_type_default_interface_unref ~g_iface)))
(export g_type_default_interface_unref)

;; extern GType *g_type_children(GType type, guint *n_children);
(define ~g_type_children #f)
(define (g_type_children type n_children)
  (unless
    ~g_type_children
    (set! ~g_type_children
      (fh-link-proc
        "g_type_children"
        '*
        (list ffi:unsigned-long '*))))
  (let ((~type (unwrap~fixed type))
        (~n_children (unwrap~pointer n_children)))
    (~g_type_children ~type ~n_children)))
(export g_type_children)

;; extern GType *g_type_interfaces(GType type, guint *n_interfaces);
(define ~g_type_interfaces #f)
(define (g_type_interfaces type n_interfaces)
  (unless
    ~g_type_interfaces
    (set! ~g_type_interfaces
      (fh-link-proc
        "g_type_interfaces"
        '*
        (list ffi:unsigned-long '*))))
  (let ((~type (unwrap~fixed type))
        (~n_interfaces (unwrap~pointer n_interfaces)))
    (~g_type_interfaces ~type ~n_interfaces)))
(export g_type_interfaces)

;; extern void g_type_set_qdata(GType type, GQuark quark, gpointer data);
(define ~g_type_set_qdata #f)
(define (g_type_set_qdata type quark data)
  (unless
    ~g_type_set_qdata
    (set! ~g_type_set_qdata
      (fh-link-proc
        "g_type_set_qdata"
        ffi:void
        (list ffi:unsigned-long ffi:unsigned-int '*))))
  (let ((~type (unwrap~fixed type))
        (~quark (unwrap~fixed quark))
        (~data (unwrap-gpointer data)))
    (~g_type_set_qdata ~type ~quark ~data)))
(export g_type_set_qdata)

;; extern gpointer g_type_get_qdata(GType type, GQuark quark);
(define ~g_type_get_qdata #f)
(define (g_type_get_qdata type quark)
  (unless
    ~g_type_get_qdata
    (set! ~g_type_get_qdata
      (fh-link-proc
        "g_type_get_qdata"
        '*
        (list ffi:unsigned-long ffi:unsigned-int))))
  (let ((~type (unwrap~fixed type))
        (~quark (unwrap~fixed quark)))
    (wrap-gpointer (~g_type_get_qdata ~type ~quark))))
(export g_type_get_qdata)

;; extern void g_type_query(GType type, GTypeQuery *query);
(define ~g_type_query #f)
(define (g_type_query type query)
  (unless
    ~g_type_query
    (set! ~g_type_query
      (fh-link-proc
        "g_type_query"
        ffi:void
        (list ffi:unsigned-long '*))))
  (let ((~type (unwrap~fixed type))
        (~query (unwrap-GTypeQuery* query)))
    (~g_type_query ~type ~query)))
(export g_type_query)

;; extern int g_type_get_instance_count(GType type);
(define ~g_type_get_instance_count #f)
(define (g_type_get_instance_count type)
  (unless
    ~g_type_get_instance_count
    (set! ~g_type_get_instance_count
      (fh-link-proc
        "g_type_get_instance_count"
        ffi:int
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (~g_type_get_instance_count ~type)))
(export g_type_get_instance_count)

;; typedef void (*GBaseInitFunc)(gpointer g_class);
(define-fh-function/p GBaseInitFunc
  ffi:void (list (quote *)))

;; typedef void (*GBaseFinalizeFunc)(gpointer g_class);
(define-fh-function/p GBaseFinalizeFunc
  ffi:void (list (quote *)))

;; typedef void (*GClassInitFunc)(gpointer g_class, gpointer class_data);
(define-fh-function/p GClassInitFunc
  ffi:void (list (quote *) (quote *)))

;; typedef void (*GClassFinalizeFunc)(gpointer g_class, gpointer class_data);
(define-fh-function/p GClassFinalizeFunc
  ffi:void (list (quote *) (quote *)))

;; typedef void (*GInstanceInitFunc)(GTypeInstance *instance, gpointer g_class)
;;     ;
(define-fh-function/p GInstanceInitFunc
  ffi:void (list (quote *) (quote *)))

;; typedef void (*GInterfaceInitFunc)(gpointer g_iface, gpointer iface_data);
(define-fh-function/p GInterfaceInitFunc
  ffi:void (list (quote *) (quote *)))

;; typedef void (*GInterfaceFinalizeFunc)(gpointer g_iface, gpointer iface_data
;;     );
(define-fh-function/p GInterfaceFinalizeFunc
  ffi:void (list (quote *) (quote *)))

;; typedef gboolean (*GTypeClassCacheFunc)(gpointer cache_data, GTypeClass *
;;     g_class);
(define-fh-function/p GTypeClassCacheFunc
  ffi:int (list (quote *) (quote *)))

;; typedef void (*GTypeInterfaceCheckFunc)(gpointer check_data, gpointer 
;;     g_iface);
(define-fh-function/p GTypeInterfaceCheckFunc
  ffi:void (list (quote *) (quote *)))

;; typedef enum {
;;   G_TYPE_FLAG_CLASSED = 1<<0,
;;   G_TYPE_FLAG_INSTANTIATABLE = 1<<1,
;;   G_TYPE_FLAG_DERIVABLE = 1<<2,
;;   G_TYPE_FLAG_DEEP_DERIVABLE = 1<<3,
;; } GTypeFundamentalFlags;
(define-fh-enum GTypeFundamentalFlags
  '((G_TYPE_FLAG_CLASSED . 1)
    (G_TYPE_FLAG_INSTANTIATABLE . 2)
    (G_TYPE_FLAG_DERIVABLE . 4)
    (G_TYPE_FLAG_DEEP_DERIVABLE . 8))
  )

;; typedef enum {
;;   G_TYPE_FLAG_ABSTRACT = 1<<4,
;;   G_TYPE_FLAG_VALUE_ABSTRACT = 1<<5,
;; } GTypeFlags;
(define-fh-enum GTypeFlags
  '((G_TYPE_FLAG_ABSTRACT . 16)
    (G_TYPE_FLAG_VALUE_ABSTRACT . 32))
  )

;; struct _GTypeInfo {
;;   /* interface types, classed types, instantiated types */
;;   guint16 class_size;
;;   GBaseInitFunc base_init;
;;   GBaseFinalizeFunc base_finalize;
;;   /* interface types, classed types, instantiated types */
;;   GClassInitFunc class_init;
;;   GClassFinalizeFunc class_finalize;
;;   gconstpointer class_data;
;;   /* instantiated types */
;;   guint16 instance_size;
;;   guint16 n_preallocs;
;;   GInstanceInitFunc instance_init;
;;   /* value handling */
;;   const GTypeValueTable *value_table;
;; };
(define struct-_GTypeInfo-desc
  (bs:struct
    (list `(class_size ,unsigned-short)
          `(base_init ,(bs:pointer void))
          `(base_finalize ,(bs:pointer void))
          `(class_init ,(bs:pointer void))
          `(class_finalize ,(bs:pointer void))
          `(class_data ,gconstpointer-desc)
          `(instance_size ,unsigned-short)
          `(n_preallocs ,unsigned-short)
          `(instance_init ,(bs:pointer void))
          `(value_table
             ,(bs:pointer (delay GTypeValueTable*-desc))))))
(export struct-_GTypeInfo-desc)
(define-fh-compound-type/p struct-_GTypeInfo struct-_GTypeInfo-desc)
(set! GTypeInfo-desc struct-_GTypeInfo-desc)
(define-fh-compound-type GTypeInfo GTypeInfo-desc)

;; struct _GTypeFundamentalInfo {
;;   GTypeFundamentalFlags type_flags;
;; };
(define struct-_GTypeFundamentalInfo-desc
  (bs:struct (list `(type_flags ,int))))
(export struct-_GTypeFundamentalInfo-desc)
(define-fh-compound-type/p struct-_GTypeFundamentalInfo struct-_GTypeFundamentalInfo-desc)
(set! GTypeFundamentalInfo-desc struct-_GTypeFundamentalInfo-desc)
(define-fh-compound-type GTypeFundamentalInfo GTypeFundamentalInfo-desc)

;; struct _GInterfaceInfo {
;;   GInterfaceInitFunc interface_init;
;;   GInterfaceFinalizeFunc interface_finalize;
;;   gpointer interface_data;
;; };
(define struct-_GInterfaceInfo-desc
  (bs:struct
    (list `(interface_init ,(bs:pointer void))
          `(interface_finalize ,(bs:pointer void))
          `(interface_data ,gpointer-desc))))
(export struct-_GInterfaceInfo-desc)
(define-fh-compound-type/p struct-_GInterfaceInfo struct-_GInterfaceInfo-desc)
(set! GInterfaceInfo-desc struct-_GInterfaceInfo-desc)
(define-fh-compound-type GInterfaceInfo GInterfaceInfo-desc)

;; struct _GTypeValueTable {
;;   void (*value_init)(GValue *value);
;;   void (*value_free)(GValue *value);
;;   void (*value_copy)(const GValue *src_value, GValue *dest_value);
;;   /* varargs functionality (optional) */
;;   gpointer (*value_peek_pointer)(const GValue *value);
;;   const gchar *collect_format;
;;   gchar *(*collect_value)(GValue *value, guint n_collect_values, GTypeCValue
;;        *collect_values, guint collect_flags);
;;   const gchar *lcopy_format;
;;   gchar *(*lcopy_value)(const GValue *value, guint n_collect_values, 
;;       GTypeCValue *collect_values, guint collect_flags);
;; };
(define struct-_GTypeValueTable-desc
  (bs:struct
    (list `(value_init ,(bs:pointer void))
          `(value_free ,(bs:pointer void))
          `(value_copy ,(bs:pointer void))
          `(value_peek_pointer ,(bs:pointer void))
          `(collect_format ,(bs:pointer int))
          `(collect_value ,(bs:pointer void))
          `(lcopy_format ,(bs:pointer int))
          `(lcopy_value ,(bs:pointer void)))))
(export struct-_GTypeValueTable-desc)
(define-fh-compound-type/p struct-_GTypeValueTable struct-_GTypeValueTable-desc)
(set! GTypeValueTable-desc struct-_GTypeValueTable-desc)
(define-fh-compound-type GTypeValueTable GTypeValueTable-desc)

;; extern GType g_type_register_static(GType parent_type, const gchar *
;;     type_name, const GTypeInfo *info, GTypeFlags flags);
(define ~g_type_register_static #f)
(define (g_type_register_static
         parent_type
         type_name
         info
         flags)
  (unless
    ~g_type_register_static
    (set! ~g_type_register_static
      (fh-link-proc
        "g_type_register_static"
        ffi:unsigned-long
        (list ffi:unsigned-long '* '* ffi:int))))
  (let ((~parent_type (unwrap~fixed parent_type))
        (~type_name (unwrap~pointer type_name))
        (~info (unwrap-GTypeInfo* info))
        (~flags (unwrap~fixed flags)))
    (~g_type_register_static
      ~parent_type
      ~type_name
      ~info
      ~flags)))
(export g_type_register_static)

;; extern GType g_type_register_static_simple(GType parent_type, const gchar *
;;     type_name, guint class_size, GClassInitFunc class_init, guint 
;;     instance_size, GInstanceInitFunc instance_init, GTypeFlags flags);
(define ~g_type_register_static_simple #f)
(define (g_type_register_static_simple
         parent_type
         type_name
         class_size
         class_init
         instance_size
         instance_init
         flags)
  (unless
    ~g_type_register_static_simple
    (set! ~g_type_register_static_simple
      (fh-link-proc
        "g_type_register_static_simple"
        ffi:unsigned-long
        (list ffi:unsigned-long
              '*
              ffi:unsigned-int
              '*
              ffi:unsigned-int
              '*
              ffi:int))))
  (let ((~parent_type (unwrap~fixed parent_type))
        (~type_name (unwrap~pointer type_name))
        (~class_size (unwrap~fixed class_size))
        (~class_init
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           class_init))
        (~instance_size (unwrap~fixed instance_size))
        (~instance_init
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           instance_init))
        (~flags (unwrap~fixed flags)))
    (~g_type_register_static_simple
      ~parent_type
      ~type_name
      ~class_size
      ~class_init
      ~instance_size
      ~instance_init
      ~flags)))
(export g_type_register_static_simple)

;; extern GType g_type_register_dynamic(GType parent_type, const gchar *
;;     type_name, GTypePlugin *plugin, GTypeFlags flags);
(define ~g_type_register_dynamic #f)
(define (g_type_register_dynamic
         parent_type
         type_name
         plugin
         flags)
  (unless
    ~g_type_register_dynamic
    (set! ~g_type_register_dynamic
      (fh-link-proc
        "g_type_register_dynamic"
        ffi:unsigned-long
        (list ffi:unsigned-long '* '* ffi:int))))
  (let ((~parent_type (unwrap~fixed parent_type))
        (~type_name (unwrap~pointer type_name))
        (~plugin (unwrap-GTypePlugin* plugin))
        (~flags (unwrap~fixed flags)))
    (~g_type_register_dynamic
      ~parent_type
      ~type_name
      ~plugin
      ~flags)))
(export g_type_register_dynamic)

;; extern GType g_type_register_fundamental(GType type_id, const gchar *
;;     type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, 
;;     GTypeFlags flags);
(define ~g_type_register_fundamental #f)
(define (g_type_register_fundamental
         type_id
         type_name
         info
         finfo
         flags)
  (unless
    ~g_type_register_fundamental
    (set! ~g_type_register_fundamental
      (fh-link-proc
        "g_type_register_fundamental"
        ffi:unsigned-long
        (list ffi:unsigned-long '* '* '* ffi:int))))
  (let ((~type_id (unwrap~fixed type_id))
        (~type_name (unwrap~pointer type_name))
        (~info (unwrap-GTypeInfo* info))
        (~finfo (unwrap-GTypeFundamentalInfo* finfo))
        (~flags (unwrap~fixed flags)))
    (~g_type_register_fundamental
      ~type_id
      ~type_name
      ~info
      ~finfo
      ~flags)))
(export g_type_register_fundamental)

;; extern void g_type_add_interface_static(GType instance_type, GType 
;;     interface_type, const GInterfaceInfo *info);
(define ~g_type_add_interface_static #f)
(define (g_type_add_interface_static
         instance_type
         interface_type
         info)
  (unless
    ~g_type_add_interface_static
    (set! ~g_type_add_interface_static
      (fh-link-proc
        "g_type_add_interface_static"
        ffi:void
        (list ffi:unsigned-long ffi:unsigned-long '*))))
  (let ((~instance_type (unwrap~fixed instance_type))
        (~interface_type (unwrap~fixed interface_type))
        (~info (unwrap-GInterfaceInfo* info)))
    (~g_type_add_interface_static
      ~instance_type
      ~interface_type
      ~info)))
(export g_type_add_interface_static)

;; extern void g_type_add_interface_dynamic(GType instance_type, GType 
;;     interface_type, GTypePlugin *plugin);
(define ~g_type_add_interface_dynamic #f)
(define (g_type_add_interface_dynamic
         instance_type
         interface_type
         plugin)
  (unless
    ~g_type_add_interface_dynamic
    (set! ~g_type_add_interface_dynamic
      (fh-link-proc
        "g_type_add_interface_dynamic"
        ffi:void
        (list ffi:unsigned-long ffi:unsigned-long '*))))
  (let ((~instance_type (unwrap~fixed instance_type))
        (~interface_type (unwrap~fixed interface_type))
        (~plugin (unwrap-GTypePlugin* plugin)))
    (~g_type_add_interface_dynamic
      ~instance_type
      ~interface_type
      ~plugin)))
(export g_type_add_interface_dynamic)

;; extern void g_type_interface_add_prerequisite(GType interface_type, GType 
;;     prerequisite_type);
(define ~g_type_interface_add_prerequisite #f)
(define (g_type_interface_add_prerequisite
         interface_type
         prerequisite_type)
  (unless
    ~g_type_interface_add_prerequisite
    (set! ~g_type_interface_add_prerequisite
      (fh-link-proc
        "g_type_interface_add_prerequisite"
        ffi:void
        (list ffi:unsigned-long ffi:unsigned-long))))
  (let ((~interface_type (unwrap~fixed interface_type))
        (~prerequisite_type
          (unwrap~fixed prerequisite_type)))
    (~g_type_interface_add_prerequisite
      ~interface_type
      ~prerequisite_type)))
(export g_type_interface_add_prerequisite)

;; extern GType *g_type_interface_prerequisites(GType interface_type, guint *
;;     n_prerequisites);
(define ~g_type_interface_prerequisites #f)
(define (g_type_interface_prerequisites
         interface_type
         n_prerequisites)
  (unless
    ~g_type_interface_prerequisites
    (set! ~g_type_interface_prerequisites
      (fh-link-proc
        "g_type_interface_prerequisites"
        '*
        (list ffi:unsigned-long '*))))
  (let ((~interface_type (unwrap~fixed interface_type))
        (~n_prerequisites
          (unwrap~pointer n_prerequisites)))
    (~g_type_interface_prerequisites
      ~interface_type
      ~n_prerequisites)))
(export g_type_interface_prerequisites)

;; extern void g_type_class_add_private(gpointer g_class, gsize private_size);
(define ~g_type_class_add_private #f)
(define (g_type_class_add_private g_class private_size)
  (unless
    ~g_type_class_add_private
    (set! ~g_type_class_add_private
      (fh-link-proc
        "g_type_class_add_private"
        ffi:void
        (list '* ffi:unsigned-long))))
  (let ((~g_class (unwrap-gpointer g_class))
        (~private_size (unwrap~fixed private_size)))
    (~g_type_class_add_private
      ~g_class
      ~private_size)))
(export g_type_class_add_private)

;; extern gint g_type_add_instance_private(GType class_type, gsize private_size
;;     );
(define ~g_type_add_instance_private #f)
(define (g_type_add_instance_private
         class_type
         private_size)
  (unless
    ~g_type_add_instance_private
    (set! ~g_type_add_instance_private
      (fh-link-proc
        "g_type_add_instance_private"
        ffi:int
        (list ffi:unsigned-long ffi:unsigned-long))))
  (let ((~class_type (unwrap~fixed class_type))
        (~private_size (unwrap~fixed private_size)))
    (~g_type_add_instance_private
      ~class_type
      ~private_size)))
(export g_type_add_instance_private)

;; extern gpointer g_type_instance_get_private(GTypeInstance *instance, GType 
;;     private_type);
(define ~g_type_instance_get_private #f)
(define (g_type_instance_get_private
         instance
         private_type)
  (unless
    ~g_type_instance_get_private
    (set! ~g_type_instance_get_private
      (fh-link-proc
        "g_type_instance_get_private"
        '*
        (list '* ffi:unsigned-long))))
  (let ((~instance (unwrap-GTypeInstance* instance))
        (~private_type (unwrap~fixed private_type)))
    (wrap-gpointer
      (~g_type_instance_get_private
        ~instance
        ~private_type))))
(export g_type_instance_get_private)

;; extern void g_type_class_adjust_private_offset(gpointer g_class, gint *
;;     private_size_or_offset);
(define ~g_type_class_adjust_private_offset #f)
(define (g_type_class_adjust_private_offset
         g_class
         private_size_or_offset)
  (unless
    ~g_type_class_adjust_private_offset
    (set! ~g_type_class_adjust_private_offset
      (fh-link-proc
        "g_type_class_adjust_private_offset"
        ffi:void
        (list '* '*))))
  (let ((~g_class (unwrap-gpointer g_class))
        (~private_size_or_offset
          (unwrap~pointer private_size_or_offset)))
    (~g_type_class_adjust_private_offset
      ~g_class
      ~private_size_or_offset)))
(export g_type_class_adjust_private_offset)

;; extern void g_type_add_class_private(GType class_type, gsize private_size);
(define ~g_type_add_class_private #f)
(define (g_type_add_class_private
         class_type
         private_size)
  (unless
    ~g_type_add_class_private
    (set! ~g_type_add_class_private
      (fh-link-proc
        "g_type_add_class_private"
        ffi:void
        (list ffi:unsigned-long ffi:unsigned-long))))
  (let ((~class_type (unwrap~fixed class_type))
        (~private_size (unwrap~fixed private_size)))
    (~g_type_add_class_private
      ~class_type
      ~private_size)))
(export g_type_add_class_private)

;; extern gpointer g_type_class_get_private(GTypeClass *klass, GType 
;;     private_type);
(define ~g_type_class_get_private #f)
(define (g_type_class_get_private klass private_type)
  (unless
    ~g_type_class_get_private
    (set! ~g_type_class_get_private
      (fh-link-proc
        "g_type_class_get_private"
        '*
        (list '* ffi:unsigned-long))))
  (let ((~klass (unwrap-GTypeClass* klass))
        (~private_type (unwrap~fixed private_type)))
    (wrap-gpointer
      (~g_type_class_get_private ~klass ~private_type))))
(export g_type_class_get_private)

;; extern gint g_type_class_get_instance_private_offset(gpointer g_class);
(define ~g_type_class_get_instance_private_offset #f)
(define (g_type_class_get_instance_private_offset
         g_class)
  (unless
    ~g_type_class_get_instance_private_offset
    (set! ~g_type_class_get_instance_private_offset
      (fh-link-proc
        "g_type_class_get_instance_private_offset"
        ffi:int
        (list '*))))
  (let ((~g_class (unwrap-gpointer g_class)))
    (~g_type_class_get_instance_private_offset
      ~g_class)))
(export g_type_class_get_instance_private_offset)

;; extern void g_type_ensure(GType type);
(define ~g_type_ensure #f)
(define (g_type_ensure type)
  (unless
    ~g_type_ensure
    (set! ~g_type_ensure
      (fh-link-proc
        "g_type_ensure"
        ffi:void
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (~g_type_ensure ~type)))
(export g_type_ensure)

;; extern guint g_type_get_type_registration_serial(void);
(define ~g_type_get_type_registration_serial #f)
(define (g_type_get_type_registration_serial)
  (unless
    ~g_type_get_type_registration_serial
    (set! ~g_type_get_type_registration_serial
      (fh-link-proc
        "g_type_get_type_registration_serial"
        ffi:unsigned-int
        (list))))
  (let () (~g_type_get_type_registration_serial)))
(export g_type_get_type_registration_serial)

;; extern GTypePlugin *g_type_get_plugin(GType type);
(define ~g_type_get_plugin #f)
(define (g_type_get_plugin type)
  (unless
    ~g_type_get_plugin
    (set! ~g_type_get_plugin
      (fh-link-proc
        "g_type_get_plugin"
        '*
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (wrap-GTypePlugin* (~g_type_get_plugin ~type))))
(export g_type_get_plugin)

;; extern GTypePlugin *g_type_interface_get_plugin(GType instance_type, GType 
;;     interface_type);
(define ~g_type_interface_get_plugin #f)
(define (g_type_interface_get_plugin
         instance_type
         interface_type)
  (unless
    ~g_type_interface_get_plugin
    (set! ~g_type_interface_get_plugin
      (fh-link-proc
        "g_type_interface_get_plugin"
        '*
        (list ffi:unsigned-long ffi:unsigned-long))))
  (let ((~instance_type (unwrap~fixed instance_type))
        (~interface_type (unwrap~fixed interface_type)))
    (wrap-GTypePlugin*
      (~g_type_interface_get_plugin
        ~instance_type
        ~interface_type))))
(export g_type_interface_get_plugin)

;; extern GType g_type_fundamental_next(void);
(define ~g_type_fundamental_next #f)
(define (g_type_fundamental_next)
  (unless
    ~g_type_fundamental_next
    (set! ~g_type_fundamental_next
      (fh-link-proc
        "g_type_fundamental_next"
        ffi:unsigned-long
        (list))))
  (let () (~g_type_fundamental_next)))
(export g_type_fundamental_next)

;; extern GType g_type_fundamental(GType type_id);
(define ~g_type_fundamental #f)
(define (g_type_fundamental type_id)
  (unless
    ~g_type_fundamental
    (set! ~g_type_fundamental
      (fh-link-proc
        "g_type_fundamental"
        ffi:unsigned-long
        (list ffi:unsigned-long))))
  (let ((~type_id (unwrap~fixed type_id)))
    (~g_type_fundamental ~type_id)))
(export g_type_fundamental)

;; extern GTypeInstance *g_type_create_instance(GType type);
(define ~g_type_create_instance #f)
(define (g_type_create_instance type)
  (unless
    ~g_type_create_instance
    (set! ~g_type_create_instance
      (fh-link-proc
        "g_type_create_instance"
        '*
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (wrap-GTypeInstance*
      (~g_type_create_instance ~type))))
(export g_type_create_instance)

;; extern void g_type_free_instance(GTypeInstance *instance);
(define ~g_type_free_instance #f)
(define (g_type_free_instance instance)
  (unless
    ~g_type_free_instance
    (set! ~g_type_free_instance
      (fh-link-proc
        "g_type_free_instance"
        ffi:void
        (list '*))))
  (let ((~instance (unwrap-GTypeInstance* instance)))
    (~g_type_free_instance ~instance)))
(export g_type_free_instance)

;; extern void g_type_add_class_cache_func(gpointer cache_data, 
;;     GTypeClassCacheFunc cache_func);
(define ~g_type_add_class_cache_func #f)
(define (g_type_add_class_cache_func
         cache_data
         cache_func)
  (unless
    ~g_type_add_class_cache_func
    (set! ~g_type_add_class_cache_func
      (fh-link-proc
        "g_type_add_class_cache_func"
        ffi:void
        (list '* '*))))
  (let ((~cache_data (unwrap-gpointer cache_data))
        (~cache_func
          ((make-ftn-arg-unwrapper ffi:int (list '* '*))
           cache_func)))
    (~g_type_add_class_cache_func
      ~cache_data
      ~cache_func)))
(export g_type_add_class_cache_func)

;; extern void g_type_remove_class_cache_func(gpointer cache_data, 
;;     GTypeClassCacheFunc cache_func);
(define ~g_type_remove_class_cache_func #f)
(define (g_type_remove_class_cache_func
         cache_data
         cache_func)
  (unless
    ~g_type_remove_class_cache_func
    (set! ~g_type_remove_class_cache_func
      (fh-link-proc
        "g_type_remove_class_cache_func"
        ffi:void
        (list '* '*))))
  (let ((~cache_data (unwrap-gpointer cache_data))
        (~cache_func
          ((make-ftn-arg-unwrapper ffi:int (list '* '*))
           cache_func)))
    (~g_type_remove_class_cache_func
      ~cache_data
      ~cache_func)))
(export g_type_remove_class_cache_func)

;; extern void g_type_class_unref_uncached(gpointer g_class);
(define ~g_type_class_unref_uncached #f)
(define (g_type_class_unref_uncached g_class)
  (unless
    ~g_type_class_unref_uncached
    (set! ~g_type_class_unref_uncached
      (fh-link-proc
        "g_type_class_unref_uncached"
        ffi:void
        (list '*))))
  (let ((~g_class (unwrap-gpointer g_class)))
    (~g_type_class_unref_uncached ~g_class)))
(export g_type_class_unref_uncached)

;; extern void g_type_add_interface_check(gpointer check_data, 
;;     GTypeInterfaceCheckFunc check_func);
(define ~g_type_add_interface_check #f)
(define (g_type_add_interface_check
         check_data
         check_func)
  (unless
    ~g_type_add_interface_check
    (set! ~g_type_add_interface_check
      (fh-link-proc
        "g_type_add_interface_check"
        ffi:void
        (list '* '*))))
  (let ((~check_data (unwrap-gpointer check_data))
        (~check_func
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           check_func)))
    (~g_type_add_interface_check
      ~check_data
      ~check_func)))
(export g_type_add_interface_check)

;; extern void g_type_remove_interface_check(gpointer check_data, 
;;     GTypeInterfaceCheckFunc check_func);
(define ~g_type_remove_interface_check #f)
(define (g_type_remove_interface_check
         check_data
         check_func)
  (unless
    ~g_type_remove_interface_check
    (set! ~g_type_remove_interface_check
      (fh-link-proc
        "g_type_remove_interface_check"
        ffi:void
        (list '* '*))))
  (let ((~check_data (unwrap-gpointer check_data))
        (~check_func
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           check_func)))
    (~g_type_remove_interface_check
      ~check_data
      ~check_func)))
(export g_type_remove_interface_check)

;; extern GTypeValueTable *g_type_value_table_peek(GType type);
(define ~g_type_value_table_peek #f)
(define (g_type_value_table_peek type)
  (unless
    ~g_type_value_table_peek
    (set! ~g_type_value_table_peek
      (fh-link-proc
        "g_type_value_table_peek"
        '*
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (wrap-GTypeValueTable*
      (~g_type_value_table_peek ~type))))
(export g_type_value_table_peek)

;; extern gboolean g_type_check_instance(GTypeInstance *instance);
(define ~g_type_check_instance #f)
(define (g_type_check_instance instance)
  (unless
    ~g_type_check_instance
    (set! ~g_type_check_instance
      (fh-link-proc
        "g_type_check_instance"
        ffi:int
        (list '*))))
  (let ((~instance (unwrap-GTypeInstance* instance)))
    (~g_type_check_instance ~instance)))
(export g_type_check_instance)

;; extern GTypeInstance *g_type_check_instance_cast(GTypeInstance *instance, 
;;     GType iface_type);
(define ~g_type_check_instance_cast #f)
(define (g_type_check_instance_cast instance iface_type)
  (unless
    ~g_type_check_instance_cast
    (set! ~g_type_check_instance_cast
      (fh-link-proc
        "g_type_check_instance_cast"
        '*
        (list '* ffi:unsigned-long))))
  (let ((~instance (unwrap-GTypeInstance* instance))
        (~iface_type (unwrap~fixed iface_type)))
    (wrap-GTypeInstance*
      (~g_type_check_instance_cast
        ~instance
        ~iface_type))))
(export g_type_check_instance_cast)

;; extern gboolean g_type_check_instance_is_a(GTypeInstance *instance, GType 
;;     iface_type);
(define ~g_type_check_instance_is_a #f)
(define (g_type_check_instance_is_a instance iface_type)
  (unless
    ~g_type_check_instance_is_a
    (set! ~g_type_check_instance_is_a
      (fh-link-proc
        "g_type_check_instance_is_a"
        ffi:int
        (list '* ffi:unsigned-long))))
  (let ((~instance (unwrap-GTypeInstance* instance))
        (~iface_type (unwrap~fixed iface_type)))
    (~g_type_check_instance_is_a
      ~instance
      ~iface_type)))
(export g_type_check_instance_is_a)

;; extern gboolean g_type_check_instance_is_fundamentally_a(GTypeInstance *
;;     instance, GType fundamental_type);
(define ~g_type_check_instance_is_fundamentally_a #f)
(define (g_type_check_instance_is_fundamentally_a
         instance
         fundamental_type)
  (unless
    ~g_type_check_instance_is_fundamentally_a
    (set! ~g_type_check_instance_is_fundamentally_a
      (fh-link-proc
        "g_type_check_instance_is_fundamentally_a"
        ffi:int
        (list '* ffi:unsigned-long))))
  (let ((~instance (unwrap-GTypeInstance* instance))
        (~fundamental_type
          (unwrap~fixed fundamental_type)))
    (~g_type_check_instance_is_fundamentally_a
      ~instance
      ~fundamental_type)))
(export g_type_check_instance_is_fundamentally_a)

;; extern GTypeClass *g_type_check_class_cast(GTypeClass *g_class, GType 
;;     is_a_type);
(define ~g_type_check_class_cast #f)
(define (g_type_check_class_cast g_class is_a_type)
  (unless
    ~g_type_check_class_cast
    (set! ~g_type_check_class_cast
      (fh-link-proc
        "g_type_check_class_cast"
        '*
        (list '* ffi:unsigned-long))))
  (let ((~g_class (unwrap-GTypeClass* g_class))
        (~is_a_type (unwrap~fixed is_a_type)))
    (wrap-GTypeClass*
      (~g_type_check_class_cast ~g_class ~is_a_type))))
(export g_type_check_class_cast)

;; extern gboolean g_type_check_class_is_a(GTypeClass *g_class, GType is_a_type
;;     );
(define ~g_type_check_class_is_a #f)
(define (g_type_check_class_is_a g_class is_a_type)
  (unless
    ~g_type_check_class_is_a
    (set! ~g_type_check_class_is_a
      (fh-link-proc
        "g_type_check_class_is_a"
        ffi:int
        (list '* ffi:unsigned-long))))
  (let ((~g_class (unwrap-GTypeClass* g_class))
        (~is_a_type (unwrap~fixed is_a_type)))
    (~g_type_check_class_is_a ~g_class ~is_a_type)))
(export g_type_check_class_is_a)

;; extern gboolean g_type_check_is_value_type(GType type);
(define ~g_type_check_is_value_type #f)
(define (g_type_check_is_value_type type)
  (unless
    ~g_type_check_is_value_type
    (set! ~g_type_check_is_value_type
      (fh-link-proc
        "g_type_check_is_value_type"
        ffi:int
        (list ffi:unsigned-long))))
  (let ((~type (unwrap~fixed type)))
    (~g_type_check_is_value_type ~type)))
(export g_type_check_is_value_type)

;; extern gboolean g_type_check_value(GValue *value);
(define ~g_type_check_value #f)
(define (g_type_check_value value)
  (unless
    ~g_type_check_value
    (set! ~g_type_check_value
      (fh-link-proc
        "g_type_check_value"
        ffi:int
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_type_check_value ~value)))
(export g_type_check_value)

;; extern gboolean g_type_check_value_holds(GValue *value, GType type);
(define ~g_type_check_value_holds #f)
(define (g_type_check_value_holds value type)
  (unless
    ~g_type_check_value_holds
    (set! ~g_type_check_value_holds
      (fh-link-proc
        "g_type_check_value_holds"
        ffi:int
        (list '* ffi:unsigned-long))))
  (let ((~value (unwrap-GValue* value))
        (~type (unwrap~fixed type)))
    (~g_type_check_value_holds ~value ~type)))
(export g_type_check_value_holds)

;; extern gboolean g_type_test_flags(GType type, guint flags);
(define ~g_type_test_flags #f)
(define (g_type_test_flags type flags)
  (unless
    ~g_type_test_flags
    (set! ~g_type_test_flags
      (fh-link-proc
        "g_type_test_flags"
        ffi:int
        (list ffi:unsigned-long ffi:unsigned-int))))
  (let ((~type (unwrap~fixed type))
        (~flags (unwrap~fixed flags)))
    (~g_type_test_flags ~type ~flags)))
(export g_type_test_flags)

;; extern const gchar *g_type_name_from_instance(GTypeInstance *instance);
(define ~g_type_name_from_instance #f)
(define (g_type_name_from_instance instance)
  (unless
    ~g_type_name_from_instance
    (set! ~g_type_name_from_instance
      (fh-link-proc
        "g_type_name_from_instance"
        '*
        (list '*))))
  (let ((~instance (unwrap-GTypeInstance* instance)))
    (~g_type_name_from_instance ~instance)))
(export g_type_name_from_instance)

;; extern const gchar *g_type_name_from_class(GTypeClass *g_class);
(define ~g_type_name_from_class #f)
(define (g_type_name_from_class g_class)
  (unless
    ~g_type_name_from_class
    (set! ~g_type_name_from_class
      (fh-link-proc
        "g_type_name_from_class"
        '*
        (list '*))))
  (let ((~g_class (unwrap-GTypeClass* g_class)))
    (~g_type_name_from_class ~g_class)))
(export g_type_name_from_class)

;; typedef void (*GValueTransform)(const GValue *src_value, GValue *dest_value)
;;     ;
(define-fh-function/p GValueTransform
  ffi:void (list (quote *) (quote *)))

;; struct _GValue {
;;   /*< private >*/
;;   GType g_type;
;;   /* public for GTypeValueTable methods */
;;   union {
;;     gint v_int;
;;     guint v_uint;
;;     glong v_long;
;;     gulong v_ulong;
;;     gint64 v_int64;
;;     guint64 v_uint64;
;;     gfloat v_float;
;;     gdouble v_double;
;;     gpointer v_pointer;
;;   } data[2];
;; };
(define struct-_GValue-desc
  (bs:struct
    (list `(g_type ,unsigned-long)
          `(data ,(bs:vector
                    2
                    (bs:union
                      (list `(v_int ,int)
                            `(v_uint ,unsigned-int)
                            `(v_long ,long)
                            `(v_ulong ,unsigned-long)
                            `(v_int64 ,long)
                            `(v_uint64 ,unsigned-long)
                            `(v_float ,gfloat-desc)
                            `(v_double ,gdouble-desc)
                            `(v_pointer ,gpointer-desc))))))))
(export struct-_GValue-desc)
(define-fh-compound-type/p struct-_GValue struct-_GValue-desc)
(set! GValue-desc struct-_GValue-desc)
(define-fh-compound-type GValue GValue-desc)

;; extern GValue *g_value_init(GValue *value, GType g_type);
(define ~g_value_init #f)
(define (g_value_init value g_type)
  (unless
    ~g_value_init
    (set! ~g_value_init
      (fh-link-proc
        "g_value_init"
        '*
        (list '* ffi:unsigned-long))))
  (let ((~value (unwrap-GValue* value))
        (~g_type (unwrap~fixed g_type)))
    (wrap-GValue* (~g_value_init ~value ~g_type))))
(export g_value_init)

;; extern void g_value_copy(const GValue *src_value, GValue *dest_value);
(define ~g_value_copy #f)
(define (g_value_copy src_value dest_value)
  (unless
    ~g_value_copy
    (set! ~g_value_copy
      (fh-link-proc
        "g_value_copy"
        ffi:void
        (list '* '*))))
  (let ((~src_value (unwrap-GValue* src_value))
        (~dest_value (unwrap-GValue* dest_value)))
    (~g_value_copy ~src_value ~dest_value)))
(export g_value_copy)

;; extern GValue *g_value_reset(GValue *value);
(define ~g_value_reset #f)
(define (g_value_reset value)
  (unless
    ~g_value_reset
    (set! ~g_value_reset
      (fh-link-proc "g_value_reset" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (wrap-GValue* (~g_value_reset ~value))))
(export g_value_reset)

;; extern void g_value_unset(GValue *value);
(define ~g_value_unset #f)
(define (g_value_unset value)
  (unless
    ~g_value_unset
    (set! ~g_value_unset
      (fh-link-proc "g_value_unset" ffi:void (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_unset ~value)))
(export g_value_unset)

;; extern void g_value_set_instance(GValue *value, gpointer instance);
(define ~g_value_set_instance #f)
(define (g_value_set_instance value instance)
  (unless
    ~g_value_set_instance
    (set! ~g_value_set_instance
      (fh-link-proc
        "g_value_set_instance"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~instance (unwrap-gpointer instance)))
    (~g_value_set_instance ~value ~instance)))
(export g_value_set_instance)

;; extern void g_value_init_from_instance(GValue *value, gpointer instance);
(define ~g_value_init_from_instance #f)
(define (g_value_init_from_instance value instance)
  (unless
    ~g_value_init_from_instance
    (set! ~g_value_init_from_instance
      (fh-link-proc
        "g_value_init_from_instance"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~instance (unwrap-gpointer instance)))
    (~g_value_init_from_instance ~value ~instance)))
(export g_value_init_from_instance)

;; extern gboolean g_value_fits_pointer(const GValue *value);
(define ~g_value_fits_pointer #f)
(define (g_value_fits_pointer value)
  (unless
    ~g_value_fits_pointer
    (set! ~g_value_fits_pointer
      (fh-link-proc
        "g_value_fits_pointer"
        ffi:int
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_fits_pointer ~value)))
(export g_value_fits_pointer)

;; extern gpointer g_value_peek_pointer(const GValue *value);
(define ~g_value_peek_pointer #f)
(define (g_value_peek_pointer value)
  (unless
    ~g_value_peek_pointer
    (set! ~g_value_peek_pointer
      (fh-link-proc
        "g_value_peek_pointer"
        '*
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (wrap-gpointer (~g_value_peek_pointer ~value))))
(export g_value_peek_pointer)

;; extern gboolean g_value_type_compatible(GType src_type, GType dest_type);
(define ~g_value_type_compatible #f)
(define (g_value_type_compatible src_type dest_type)
  (unless
    ~g_value_type_compatible
    (set! ~g_value_type_compatible
      (fh-link-proc
        "g_value_type_compatible"
        ffi:int
        (list ffi:unsigned-long ffi:unsigned-long))))
  (let ((~src_type (unwrap~fixed src_type))
        (~dest_type (unwrap~fixed dest_type)))
    (~g_value_type_compatible ~src_type ~dest_type)))
(export g_value_type_compatible)

;; extern gboolean g_value_type_transformable(GType src_type, GType dest_type)
;;     ;
(define ~g_value_type_transformable #f)
(define (g_value_type_transformable src_type dest_type)
  (unless
    ~g_value_type_transformable
    (set! ~g_value_type_transformable
      (fh-link-proc
        "g_value_type_transformable"
        ffi:int
        (list ffi:unsigned-long ffi:unsigned-long))))
  (let ((~src_type (unwrap~fixed src_type))
        (~dest_type (unwrap~fixed dest_type)))
    (~g_value_type_transformable
      ~src_type
      ~dest_type)))
(export g_value_type_transformable)

;; extern gboolean g_value_transform(const GValue *src_value, GValue *
;;     dest_value);
(define ~g_value_transform #f)
(define (g_value_transform src_value dest_value)
  (unless
    ~g_value_transform
    (set! ~g_value_transform
      (fh-link-proc
        "g_value_transform"
        ffi:int
        (list '* '*))))
  (let ((~src_value (unwrap-GValue* src_value))
        (~dest_value (unwrap-GValue* dest_value)))
    (~g_value_transform ~src_value ~dest_value)))
(export g_value_transform)

;; extern void g_value_register_transform_func(GType src_type, GType dest_type
;;     , GValueTransform transform_func);
(define ~g_value_register_transform_func #f)
(define (g_value_register_transform_func
         src_type
         dest_type
         transform_func)
  (unless
    ~g_value_register_transform_func
    (set! ~g_value_register_transform_func
      (fh-link-proc
        "g_value_register_transform_func"
        ffi:void
        (list ffi:unsigned-long ffi:unsigned-long '*))))
  (let ((~src_type (unwrap~fixed src_type))
        (~dest_type (unwrap~fixed dest_type))
        (~transform_func
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           transform_func)))
    (~g_value_register_transform_func
      ~src_type
      ~dest_type
      ~transform_func)))
(export g_value_register_transform_func)

;; typedef enum {
;;   G_PARAM_READABLE = 1<<0,
;;   G_PARAM_WRITABLE = 1<<1,
;;   G_PARAM_READWRITE = G_PARAM_READABLE | G_PARAM_WRITABLE,
;;   G_PARAM_CONSTRUCT = 1<<2,
;;   G_PARAM_CONSTRUCT_ONLY = 1<<3,
;;   G_PARAM_LAX_VALIDATION = 1<<4,
;;   G_PARAM_STATIC_NAME = 1<<5,
;;   G_PARAM_PRIVATE = G_PARAM_STATIC_NAME,
;;   G_PARAM_STATIC_NICK = 1<<6,
;;   G_PARAM_STATIC_BLURB = 1<<7,
;;   G_PARAM_EXPLICIT_NOTIFY = 1<<30,
;;   G_PARAM_DEPRECATED = (gint)(1u<<31),
;; } GParamFlags;
(define-fh-enum GParamFlags
  '((G_PARAM_READABLE . 1)
    (G_PARAM_WRITABLE . 2)
    (G_PARAM_READWRITE . 3)
    (G_PARAM_CONSTRUCT . 4)
    (G_PARAM_CONSTRUCT_ONLY . 8)
    (G_PARAM_LAX_VALIDATION . 16)
    (G_PARAM_STATIC_NAME . 32)
    (G_PARAM_PRIVATE . 32)
    (G_PARAM_STATIC_NICK . 64)
    (G_PARAM_STATIC_BLURB . 128)
    (G_PARAM_EXPLICIT_NOTIFY . 1073741824)
    (G_PARAM_DEPRECATED . 2147483648))
  )

;; typedef struct _GParamSpec GParamSpec;
(define GParamSpec-desc void)
(export GParamSpec-desc)
(define GParamSpec*-desc (bs:pointer (delay GParamSpec-desc)))
(export GParamSpec*-desc)
(define-fh-pointer-type GParamSpec* GParamSpec*-desc)

;; typedef struct _GParamSpecClass GParamSpecClass;
(define GParamSpecClass-desc void)
(export GParamSpecClass-desc)
(define GParamSpecClass*-desc (bs:pointer (delay GParamSpecClass-desc)))
(export GParamSpecClass*-desc)
(define-fh-pointer-type GParamSpecClass* GParamSpecClass*-desc)

;; typedef struct _GParameter GParameter;
(define GParameter-desc void)
(export GParameter-desc)
(define GParameter*-desc (bs:pointer (delay GParameter-desc)))
(export GParameter*-desc)
(define-fh-pointer-type GParameter* GParameter*-desc)

;; typedef struct _GParamSpecPool GParamSpecPool;
(define GParamSpecPool-desc void)
(export GParamSpecPool-desc)
(define GParamSpecPool*-desc (bs:pointer GParamSpecPool-desc))
(export GParamSpecPool*-desc)
(define-fh-pointer-type GParamSpecPool* GParamSpecPool*-desc)

;; struct _GParamSpec {
;;   GTypeInstance g_type_instance;
;;   const gchar *name; /* interned string */
;;   GParamFlags flags;
;;   GType value_type;
;;   GType owner_type; /* class or interface using this property */
;;   /*< private >*/
;;   gchar *_nick;
;;   gchar *_blurb;
;;   GData *qdata;
;;   guint ref_count;
;;   guint param_id; /* sort-criteria */
;; };
(define struct-_GParamSpec-desc
  (bs:struct
    (list `(g_type_instance ,GTypeInstance-desc)
          `(name ,(bs:pointer int))
          `(flags ,int)
          `(value_type ,unsigned-long)
          `(owner_type ,unsigned-long)
          `(_nick ,(bs:pointer int))
          `(_blurb ,(bs:pointer int))
          `(qdata ,(bs:pointer (delay GData*-desc)))
          `(ref_count ,unsigned-int)
          `(param_id ,unsigned-int))))
(export struct-_GParamSpec-desc)
(define-fh-compound-type/p struct-_GParamSpec struct-_GParamSpec-desc)
(set! GParamSpec-desc struct-_GParamSpec-desc)
(define-fh-compound-type GParamSpec GParamSpec-desc)

;; struct _GParamSpecClass {
;;   GTypeClass g_type_class;
;;   GType value_type;
;;   void (*finalize)(GParamSpec *pspec);
;;   /* GParam methods */
;;   void (*value_set_default)(GParamSpec *pspec, GValue *value);
;;   gboolean (*value_validate)(GParamSpec *pspec, GValue *value);
;;   gint (*values_cmp)(GParamSpec *pspec, const GValue *value1, const GValue *
;;       value2);
;;   /*< private >*/
;;   gpointer dummy[4];
;; };
(define struct-_GParamSpecClass-desc
  (bs:struct
    (list `(g_type_class ,GTypeClass-desc)
          `(value_type ,unsigned-long)
          `(finalize ,(bs:pointer void))
          `(value_set_default ,(bs:pointer void))
          `(value_validate ,(bs:pointer void))
          `(values_cmp ,(bs:pointer void))
          `(dummy ,(bs:vector 4 gpointer-desc)))))
(export struct-_GParamSpecClass-desc)
(define-fh-compound-type/p struct-_GParamSpecClass struct-_GParamSpecClass-desc)
(set! GParamSpecClass-desc struct-_GParamSpecClass-desc)
(define-fh-compound-type GParamSpecClass GParamSpecClass-desc)

;; struct _GParameter {
;;   const gchar *name;
;;   GValue value;
;; };
(define struct-_GParameter-desc
  (bs:struct
    (list `(name ,(bs:pointer int))
          `(value ,GValue-desc))))
(export struct-_GParameter-desc)
(define-fh-compound-type/p struct-_GParameter struct-_GParameter-desc)
(set! GParameter-desc struct-_GParameter-desc)
(define-fh-compound-type GParameter GParameter-desc)

;; extern GParamSpec *g_param_spec_ref(GParamSpec *pspec);
(define ~g_param_spec_ref #f)
(define (g_param_spec_ref pspec)
  (unless
    ~g_param_spec_ref
    (set! ~g_param_spec_ref
      (fh-link-proc "g_param_spec_ref" '* (list '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec)))
    (wrap-GParamSpec* (~g_param_spec_ref ~pspec))))
(export g_param_spec_ref)

;; extern void g_param_spec_unref(GParamSpec *pspec);
(define ~g_param_spec_unref #f)
(define (g_param_spec_unref pspec)
  (unless
    ~g_param_spec_unref
    (set! ~g_param_spec_unref
      (fh-link-proc
        "g_param_spec_unref"
        ffi:void
        (list '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec)))
    (~g_param_spec_unref ~pspec)))
(export g_param_spec_unref)

;; extern void g_param_spec_sink(GParamSpec *pspec);
(define ~g_param_spec_sink #f)
(define (g_param_spec_sink pspec)
  (unless
    ~g_param_spec_sink
    (set! ~g_param_spec_sink
      (fh-link-proc
        "g_param_spec_sink"
        ffi:void
        (list '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec)))
    (~g_param_spec_sink ~pspec)))
(export g_param_spec_sink)

;; extern GParamSpec *g_param_spec_ref_sink(GParamSpec *pspec);
(define ~g_param_spec_ref_sink #f)
(define (g_param_spec_ref_sink pspec)
  (unless
    ~g_param_spec_ref_sink
    (set! ~g_param_spec_ref_sink
      (fh-link-proc
        "g_param_spec_ref_sink"
        '*
        (list '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec)))
    (wrap-GParamSpec*
      (~g_param_spec_ref_sink ~pspec))))
(export g_param_spec_ref_sink)

;; extern gpointer g_param_spec_get_qdata(GParamSpec *pspec, GQuark quark);
(define ~g_param_spec_get_qdata #f)
(define (g_param_spec_get_qdata pspec quark)
  (unless
    ~g_param_spec_get_qdata
    (set! ~g_param_spec_get_qdata
      (fh-link-proc
        "g_param_spec_get_qdata"
        '*
        (list '* ffi:unsigned-int))))
  (let ((~pspec (unwrap-GParamSpec* pspec))
        (~quark (unwrap~fixed quark)))
    (wrap-gpointer
      (~g_param_spec_get_qdata ~pspec ~quark))))
(export g_param_spec_get_qdata)

;; extern void g_param_spec_set_qdata(GParamSpec *pspec, GQuark quark, gpointer
;;      data);
(define ~g_param_spec_set_qdata #f)
(define (g_param_spec_set_qdata pspec quark data)
  (unless
    ~g_param_spec_set_qdata
    (set! ~g_param_spec_set_qdata
      (fh-link-proc
        "g_param_spec_set_qdata"
        ffi:void
        (list '* ffi:unsigned-int '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec))
        (~quark (unwrap~fixed quark))
        (~data (unwrap-gpointer data)))
    (~g_param_spec_set_qdata ~pspec ~quark ~data)))
(export g_param_spec_set_qdata)

;; extern void g_param_spec_set_qdata_full(GParamSpec *pspec, GQuark quark, 
;;     gpointer data, GDestroyNotify destroy);
(define ~g_param_spec_set_qdata_full #f)
(define (g_param_spec_set_qdata_full
         pspec
         quark
         data
         destroy)
  (unless
    ~g_param_spec_set_qdata_full
    (set! ~g_param_spec_set_qdata_full
      (fh-link-proc
        "g_param_spec_set_qdata_full"
        ffi:void
        (list '* ffi:unsigned-int '* '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec))
        (~quark (unwrap~fixed quark))
        (~data (unwrap-gpointer data))
        (~destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy)))
    (~g_param_spec_set_qdata_full
      ~pspec
      ~quark
      ~data
      ~destroy)))
(export g_param_spec_set_qdata_full)

;; extern gpointer g_param_spec_steal_qdata(GParamSpec *pspec, GQuark quark);
(define ~g_param_spec_steal_qdata #f)
(define (g_param_spec_steal_qdata pspec quark)
  (unless
    ~g_param_spec_steal_qdata
    (set! ~g_param_spec_steal_qdata
      (fh-link-proc
        "g_param_spec_steal_qdata"
        '*
        (list '* ffi:unsigned-int))))
  (let ((~pspec (unwrap-GParamSpec* pspec))
        (~quark (unwrap~fixed quark)))
    (wrap-gpointer
      (~g_param_spec_steal_qdata ~pspec ~quark))))
(export g_param_spec_steal_qdata)

;; extern GParamSpec *g_param_spec_get_redirect_target(GParamSpec *pspec);
(define ~g_param_spec_get_redirect_target #f)
(define (g_param_spec_get_redirect_target pspec)
  (unless
    ~g_param_spec_get_redirect_target
    (set! ~g_param_spec_get_redirect_target
      (fh-link-proc
        "g_param_spec_get_redirect_target"
        '*
        (list '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec)))
    (wrap-GParamSpec*
      (~g_param_spec_get_redirect_target ~pspec))))
(export g_param_spec_get_redirect_target)

;; extern void g_param_value_set_default(GParamSpec *pspec, GValue *value);
(define ~g_param_value_set_default #f)
(define (g_param_value_set_default pspec value)
  (unless
    ~g_param_value_set_default
    (set! ~g_param_value_set_default
      (fh-link-proc
        "g_param_value_set_default"
        ffi:void
        (list '* '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec))
        (~value (unwrap-GValue* value)))
    (~g_param_value_set_default ~pspec ~value)))
(export g_param_value_set_default)

;; extern gboolean g_param_value_defaults(GParamSpec *pspec, GValue *value);
(define ~g_param_value_defaults #f)
(define (g_param_value_defaults pspec value)
  (unless
    ~g_param_value_defaults
    (set! ~g_param_value_defaults
      (fh-link-proc
        "g_param_value_defaults"
        ffi:int
        (list '* '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec))
        (~value (unwrap-GValue* value)))
    (~g_param_value_defaults ~pspec ~value)))
(export g_param_value_defaults)

;; extern gboolean g_param_value_validate(GParamSpec *pspec, GValue *value);
(define ~g_param_value_validate #f)
(define (g_param_value_validate pspec value)
  (unless
    ~g_param_value_validate
    (set! ~g_param_value_validate
      (fh-link-proc
        "g_param_value_validate"
        ffi:int
        (list '* '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec))
        (~value (unwrap-GValue* value)))
    (~g_param_value_validate ~pspec ~value)))
(export g_param_value_validate)

;; extern gboolean g_param_value_convert(GParamSpec *pspec, const GValue *
;;     src_value, GValue *dest_value, gboolean strict_validation);
(define ~g_param_value_convert #f)
(define (g_param_value_convert
         pspec
         src_value
         dest_value
         strict_validation)
  (unless
    ~g_param_value_convert
    (set! ~g_param_value_convert
      (fh-link-proc
        "g_param_value_convert"
        ffi:int
        (list '* '* '* ffi:int))))
  (let ((~pspec (unwrap-GParamSpec* pspec))
        (~src_value (unwrap-GValue* src_value))
        (~dest_value (unwrap-GValue* dest_value))
        (~strict_validation
          (unwrap~fixed strict_validation)))
    (~g_param_value_convert
      ~pspec
      ~src_value
      ~dest_value
      ~strict_validation)))
(export g_param_value_convert)

;; extern gint g_param_values_cmp(GParamSpec *pspec, const GValue *value1, 
;;     const GValue *value2);
(define ~g_param_values_cmp #f)
(define (g_param_values_cmp pspec value1 value2)
  (unless
    ~g_param_values_cmp
    (set! ~g_param_values_cmp
      (fh-link-proc
        "g_param_values_cmp"
        ffi:int
        (list '* '* '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec))
        (~value1 (unwrap-GValue* value1))
        (~value2 (unwrap-GValue* value2)))
    (~g_param_values_cmp ~pspec ~value1 ~value2)))
(export g_param_values_cmp)

;; extern const gchar *g_param_spec_get_name(GParamSpec *pspec);
(define ~g_param_spec_get_name #f)
(define (g_param_spec_get_name pspec)
  (unless
    ~g_param_spec_get_name
    (set! ~g_param_spec_get_name
      (fh-link-proc
        "g_param_spec_get_name"
        '*
        (list '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec)))
    (~g_param_spec_get_name ~pspec)))
(export g_param_spec_get_name)

;; extern const gchar *g_param_spec_get_nick(GParamSpec *pspec);
(define ~g_param_spec_get_nick #f)
(define (g_param_spec_get_nick pspec)
  (unless
    ~g_param_spec_get_nick
    (set! ~g_param_spec_get_nick
      (fh-link-proc
        "g_param_spec_get_nick"
        '*
        (list '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec)))
    (~g_param_spec_get_nick ~pspec)))
(export g_param_spec_get_nick)

;; extern const gchar *g_param_spec_get_blurb(GParamSpec *pspec);
(define ~g_param_spec_get_blurb #f)
(define (g_param_spec_get_blurb pspec)
  (unless
    ~g_param_spec_get_blurb
    (set! ~g_param_spec_get_blurb
      (fh-link-proc
        "g_param_spec_get_blurb"
        '*
        (list '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec)))
    (~g_param_spec_get_blurb ~pspec)))
(export g_param_spec_get_blurb)

;; extern void g_value_set_param(GValue *value, GParamSpec *param);
(define ~g_value_set_param #f)
(define (g_value_set_param value param)
  (unless
    ~g_value_set_param
    (set! ~g_value_set_param
      (fh-link-proc
        "g_value_set_param"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~param (unwrap-GParamSpec* param)))
    (~g_value_set_param ~value ~param)))
(export g_value_set_param)

;; extern GParamSpec *g_value_get_param(const GValue *value);
(define ~g_value_get_param #f)
(define (g_value_get_param value)
  (unless
    ~g_value_get_param
    (set! ~g_value_get_param
      (fh-link-proc "g_value_get_param" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (wrap-GParamSpec* (~g_value_get_param ~value))))
(export g_value_get_param)

;; extern GParamSpec *g_value_dup_param(const GValue *value);
(define ~g_value_dup_param #f)
(define (g_value_dup_param value)
  (unless
    ~g_value_dup_param
    (set! ~g_value_dup_param
      (fh-link-proc "g_value_dup_param" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (wrap-GParamSpec* (~g_value_dup_param ~value))))
(export g_value_dup_param)

;; extern void g_value_take_param(GValue *value, GParamSpec *param);
(define ~g_value_take_param #f)
(define (g_value_take_param value param)
  (unless
    ~g_value_take_param
    (set! ~g_value_take_param
      (fh-link-proc
        "g_value_take_param"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~param (unwrap-GParamSpec* param)))
    (~g_value_take_param ~value ~param)))
(export g_value_take_param)

;; extern void g_value_set_param_take_ownership(GValue *value, GParamSpec *
;;     param);
(define ~g_value_set_param_take_ownership #f)
(define (g_value_set_param_take_ownership value param)
  (unless
    ~g_value_set_param_take_ownership
    (set! ~g_value_set_param_take_ownership
      (fh-link-proc
        "g_value_set_param_take_ownership"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~param (unwrap-GParamSpec* param)))
    (~g_value_set_param_take_ownership ~value ~param)))
(export g_value_set_param_take_ownership)

;; extern const GValue *g_param_spec_get_default_value(GParamSpec *pspec);
(define ~g_param_spec_get_default_value #f)
(define (g_param_spec_get_default_value pspec)
  (unless
    ~g_param_spec_get_default_value
    (set! ~g_param_spec_get_default_value
      (fh-link-proc
        "g_param_spec_get_default_value"
        '*
        (list '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec)))
    (wrap-GValue*
      (~g_param_spec_get_default_value ~pspec))))
(export g_param_spec_get_default_value)

;; extern GQuark g_param_spec_get_name_quark(GParamSpec *pspec);
(define ~g_param_spec_get_name_quark #f)
(define (g_param_spec_get_name_quark pspec)
  (unless
    ~g_param_spec_get_name_quark
    (set! ~g_param_spec_get_name_quark
      (fh-link-proc
        "g_param_spec_get_name_quark"
        ffi:unsigned-int
        (list '*))))
  (let ((~pspec (unwrap-GParamSpec* pspec)))
    (~g_param_spec_get_name_quark ~pspec)))
(export g_param_spec_get_name_quark)

;; typedef struct _GParamSpecTypeInfo GParamSpecTypeInfo;
(define GParamSpecTypeInfo-desc void)
(export GParamSpecTypeInfo-desc)
(define GParamSpecTypeInfo*-desc (bs:pointer (delay GParamSpecTypeInfo-desc)))
(export GParamSpecTypeInfo*-desc)
(define-fh-pointer-type GParamSpecTypeInfo* GParamSpecTypeInfo*-desc)

;; struct _GParamSpecTypeInfo {
;;   /* type system portion */
;;   guint16 instance_size; /* obligatory */
;;   guint16 n_preallocs; /* optional */
;;   void (*instance_init)(GParamSpec *pspec); /* optional */
;;   /* class portion */
;;   GType value_type; /* obligatory */
;;   void (*finalize)(GParamSpec *pspec); /* optional */
;;   void (*value_set_default)(GParamSpec *pspec, GValue *value);
;;   gboolean (*value_validate)(GParamSpec *pspec, GValue *value);
;;   gint (*values_cmp)(GParamSpec *pspec, const GValue *value1, const GValue *
;;       value2);
;; };
(define struct-_GParamSpecTypeInfo-desc
  (bs:struct
    (list `(instance_size ,unsigned-short)
          `(n_preallocs ,unsigned-short)
          `(instance_init ,(bs:pointer void))
          `(value_type ,unsigned-long)
          `(finalize ,(bs:pointer void))
          `(value_set_default ,(bs:pointer void))
          `(value_validate ,(bs:pointer void))
          `(values_cmp ,(bs:pointer void)))))
(export struct-_GParamSpecTypeInfo-desc)
(define-fh-compound-type/p struct-_GParamSpecTypeInfo struct-_GParamSpecTypeInfo-desc)
(set! GParamSpecTypeInfo-desc struct-_GParamSpecTypeInfo-desc)
(define-fh-compound-type GParamSpecTypeInfo GParamSpecTypeInfo-desc)

;; extern GType g_param_type_register_static(const gchar *name, const 
;;     GParamSpecTypeInfo *pspec_info);
(define ~g_param_type_register_static #f)
(define (g_param_type_register_static name pspec_info)
  (unless
    ~g_param_type_register_static
    (set! ~g_param_type_register_static
      (fh-link-proc
        "g_param_type_register_static"
        ffi:unsigned-long
        (list '* '*))))
  (let ((~name (unwrap~pointer name))
        (~pspec_info
          (unwrap-GParamSpecTypeInfo* pspec_info)))
    (~g_param_type_register_static ~name ~pspec_info)))
(export g_param_type_register_static)

;; GType _g_param_type_register_static_constant(const gchar *name, const 
;;     GParamSpecTypeInfo *pspec_info, GType opt_type);
(define ~_g_param_type_register_static_constant #f)
(define (_g_param_type_register_static_constant
         name
         pspec_info
         opt_type)
  (unless
    ~_g_param_type_register_static_constant
    (set! ~_g_param_type_register_static_constant
      (fh-link-proc
        "_g_param_type_register_static_constant"
        ffi:unsigned-long
        (list '* '* ffi:unsigned-long))))
  (let ((~name (unwrap~pointer name))
        (~pspec_info
          (unwrap-GParamSpecTypeInfo* pspec_info))
        (~opt_type (unwrap~fixed opt_type)))
    (~_g_param_type_register_static_constant
      ~name
      ~pspec_info
      ~opt_type)))
(export _g_param_type_register_static_constant)

;; extern gpointer g_param_spec_internal(GType param_type, const gchar *name, 
;;     const gchar *nick, const gchar *blurb, GParamFlags flags);
(define ~g_param_spec_internal #f)
(define (g_param_spec_internal
         param_type
         name
         nick
         blurb
         flags)
  (unless
    ~g_param_spec_internal
    (set! ~g_param_spec_internal
      (fh-link-proc
        "g_param_spec_internal"
        '*
        (list ffi:unsigned-long '* '* '* ffi:int))))
  (let ((~param_type (unwrap~fixed param_type))
        (~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~flags (unwrap~fixed flags)))
    (wrap-gpointer
      (~g_param_spec_internal
        ~param_type
        ~name
        ~nick
        ~blurb
        ~flags))))
(export g_param_spec_internal)

;; extern GParamSpecPool *g_param_spec_pool_new(gboolean type_prefixing);
(define ~g_param_spec_pool_new #f)
(define (g_param_spec_pool_new type_prefixing)
  (unless
    ~g_param_spec_pool_new
    (set! ~g_param_spec_pool_new
      (fh-link-proc
        "g_param_spec_pool_new"
        '*
        (list ffi:int))))
  (let ((~type_prefixing (unwrap~fixed type_prefixing)))
    (wrap-GParamSpecPool*
      (~g_param_spec_pool_new ~type_prefixing))))
(export g_param_spec_pool_new)

;; extern void g_param_spec_pool_insert(GParamSpecPool *pool, GParamSpec *pspec
;;     , GType owner_type);
(define ~g_param_spec_pool_insert #f)
(define (g_param_spec_pool_insert pool pspec owner_type)
  (unless
    ~g_param_spec_pool_insert
    (set! ~g_param_spec_pool_insert
      (fh-link-proc
        "g_param_spec_pool_insert"
        ffi:void
        (list '* '* ffi:unsigned-long))))
  (let ((~pool (unwrap-GParamSpecPool* pool))
        (~pspec (unwrap-GParamSpec* pspec))
        (~owner_type (unwrap~fixed owner_type)))
    (~g_param_spec_pool_insert
      ~pool
      ~pspec
      ~owner_type)))
(export g_param_spec_pool_insert)

;; extern void g_param_spec_pool_remove(GParamSpecPool *pool, GParamSpec *pspec
;;     );
(define ~g_param_spec_pool_remove #f)
(define (g_param_spec_pool_remove pool pspec)
  (unless
    ~g_param_spec_pool_remove
    (set! ~g_param_spec_pool_remove
      (fh-link-proc
        "g_param_spec_pool_remove"
        ffi:void
        (list '* '*))))
  (let ((~pool (unwrap-GParamSpecPool* pool))
        (~pspec (unwrap-GParamSpec* pspec)))
    (~g_param_spec_pool_remove ~pool ~pspec)))
(export g_param_spec_pool_remove)

;; extern GParamSpec *g_param_spec_pool_lookup(GParamSpecPool *pool, const 
;;     gchar *param_name, GType owner_type, gboolean walk_ancestors);
(define ~g_param_spec_pool_lookup #f)
(define (g_param_spec_pool_lookup
         pool
         param_name
         owner_type
         walk_ancestors)
  (unless
    ~g_param_spec_pool_lookup
    (set! ~g_param_spec_pool_lookup
      (fh-link-proc
        "g_param_spec_pool_lookup"
        '*
        (list '* '* ffi:unsigned-long ffi:int))))
  (let ((~pool (unwrap-GParamSpecPool* pool))
        (~param_name (unwrap~pointer param_name))
        (~owner_type (unwrap~fixed owner_type))
        (~walk_ancestors (unwrap~fixed walk_ancestors)))
    (wrap-GParamSpec*
      (~g_param_spec_pool_lookup
        ~pool
        ~param_name
        ~owner_type
        ~walk_ancestors))))
(export g_param_spec_pool_lookup)

;; extern GList *g_param_spec_pool_list_owned(GParamSpecPool *pool, GType 
;;     owner_type);
(define ~g_param_spec_pool_list_owned #f)
(define (g_param_spec_pool_list_owned pool owner_type)
  (unless
    ~g_param_spec_pool_list_owned
    (set! ~g_param_spec_pool_list_owned
      (fh-link-proc
        "g_param_spec_pool_list_owned"
        '*
        (list '* ffi:unsigned-long))))
  (let ((~pool (unwrap-GParamSpecPool* pool))
        (~owner_type (unwrap~fixed owner_type)))
    (~g_param_spec_pool_list_owned ~pool ~owner_type)))
(export g_param_spec_pool_list_owned)

;; extern GParamSpec **g_param_spec_pool_list(GParamSpecPool *pool, GType 
;;     owner_type, guint *n_pspecs_p);
(define ~g_param_spec_pool_list #f)
(define (g_param_spec_pool_list
         pool
         owner_type
         n_pspecs_p)
  (unless
    ~g_param_spec_pool_list
    (set! ~g_param_spec_pool_list
      (fh-link-proc
        "g_param_spec_pool_list"
        '*
        (list '* ffi:unsigned-long '*))))
  (let ((~pool (unwrap-GParamSpecPool* pool))
        (~owner_type (unwrap~fixed owner_type))
        (~n_pspecs_p (unwrap~pointer n_pspecs_p)))
    (wrap-GParamSpec*
      (~g_param_spec_pool_list
        ~pool
        ~owner_type
        ~n_pspecs_p))))
(export g_param_spec_pool_list)

;; typedef struct _GClosure GClosure;
(define GClosure-desc void)
(export GClosure-desc)
(define GClosure*-desc (bs:pointer (delay GClosure-desc)))
(export GClosure*-desc)
(define-fh-pointer-type GClosure* GClosure*-desc)

;; typedef struct _GClosureNotifyData GClosureNotifyData;
(define GClosureNotifyData-desc void)
(export GClosureNotifyData-desc)
(define GClosureNotifyData*-desc (bs:pointer (delay GClosureNotifyData-desc)))
(export GClosureNotifyData*-desc)
(define-fh-pointer-type GClosureNotifyData* GClosureNotifyData*-desc)

;; typedef void (*GCallback)(void);
(define-fh-function/p GCallback
  ffi:void (list ffi:void))

;; typedef void (*GClosureNotify)(gpointer data, GClosure *closure);
(define-fh-function/p GClosureNotify
  ffi:void (list (quote *) (quote *)))

;; typedef void (*GClosureMarshal)(GClosure *closure, GValue *return_value, 
;;     guint n_param_values, const GValue *param_values, gpointer 
;;     invocation_hint, gpointer marshal_data);
(define-fh-function/p GClosureMarshal
  ffi:void (list (quote *) (quote *) ffi:unsigned-int (quote *) (quote *) (quote *)))

;; typedef void (*GVaClosureMarshal)(GClosure *closure, GValue *return_value, 
;;     gpointer instance, va_list args, gpointer marshal_data, int n_params, 
;;     GType *param_types);
(define-fh-function/p GVaClosureMarshal
  ffi:void (list (quote *) (quote *) (quote *) (quote *) (quote *) ffi:int (quote *)))

;; typedef struct _GCClosure GCClosure;
(define GCClosure-desc void)
(export GCClosure-desc)
(define GCClosure*-desc (bs:pointer (delay GCClosure-desc)))
(export GCClosure*-desc)
(define-fh-pointer-type GCClosure* GCClosure*-desc)

;; struct _GClosureNotifyData {
;;   gpointer data;
;;   GClosureNotify notify;
;; };
(define struct-_GClosureNotifyData-desc
  (bs:struct
    (list `(data ,gpointer-desc)
          `(notify ,(bs:pointer void)))))
(export struct-_GClosureNotifyData-desc)
(define-fh-compound-type/p struct-_GClosureNotifyData struct-_GClosureNotifyData-desc)
(set! GClosureNotifyData-desc struct-_GClosureNotifyData-desc)
(define-fh-compound-type GClosureNotifyData GClosureNotifyData-desc)

;; struct _GClosure {
;;   /*< private >*/
;;   volatile guint ref_count : 15;
;;   /* meta_marshal is not used anymore but must be zero for historical reasons
;;       
;;      as it was exposed in the G_CLOSURE_N_NOTIFIERS macro */
;;   volatile guint meta_marshal_nouse : 1;
;;   volatile guint n_guards : 1;
;;   volatile guint n_fnotifiers : 2; /* finalization notifiers */
;;   volatile guint n_inotifiers : 8; /* invalidation notifiers */
;;   volatile guint in_inotify : 1;
;;   volatile guint floating : 1;
;;   /*< protected >*/
;;   volatile guint derivative_flag : 1;
;;   /*< public >*/
;;   volatile guint in_marshal : 1;
;;   volatile guint is_invalid : 1;
;;   /*< private >*/
;;   void (*marshal)(GClosure *closure, GValue *return_value, guint 
;;       n_param_values, const GValue *param_values, gpointer invocation_hint, 
;;       gpointer marshal_data);
;;   /*< protected >*/
;;   gpointer data;
;;   /*< private >*/
;;   GClosureNotifyData *notifiers;
;;   /* invariants/constrains:
;;    * - ->marshal and ->data are _invalid_ as soon as ->is_invalid==TRUE
;;    * - invocation of all inotifiers occours prior to fnotifiers
;;    * - order of inotifiers is random
;;    *   inotifiers may _not_ free/invalidate parameter values (e.g. ->data)
;;    * - order of fnotifiers is random
;;    * - each notifier may only be removed before or during its invocation
;;    * - reference counting may only happen prior to fnotify invocation
;;    *   (in that sense, fnotifiers are really finalization handlers)
;;    */
;; };
(define struct-_GClosure-desc
  (bs:struct
    (list `(ref_count ,unsigned-int ,15)
          `(meta_marshal_nouse ,unsigned-int ,1)
          `(n_guards ,unsigned-int ,1)
          `(n_fnotifiers ,unsigned-int ,2)
          `(n_inotifiers ,unsigned-int ,8)
          `(in_inotify ,unsigned-int ,1)
          `(floating ,unsigned-int ,1)
          `(derivative_flag ,unsigned-int ,1)
          `(in_marshal ,unsigned-int ,1)
          `(is_invalid ,unsigned-int ,1)
          `(marshal ,(bs:pointer void))
          `(data ,gpointer-desc)
          `(notifiers
             ,(bs:pointer (delay GClosureNotifyData*-desc))))))
(export struct-_GClosure-desc)
(define-fh-compound-type/p struct-_GClosure struct-_GClosure-desc)
(set! GClosure-desc struct-_GClosure-desc)
(define-fh-compound-type GClosure GClosure-desc)

;; struct _GCClosure {
;;   GClosure closure;
;;   gpointer callback;
;; };
(define struct-_GCClosure-desc
  (bs:struct
    (list `(closure ,GClosure-desc)
          `(callback ,gpointer-desc))))
(export struct-_GCClosure-desc)
(define-fh-compound-type/p struct-_GCClosure struct-_GCClosure-desc)
(set! GCClosure-desc struct-_GCClosure-desc)
(define-fh-compound-type GCClosure GCClosure-desc)

;; extern GClosure *g_cclosure_new(GCallback callback_func, gpointer user_data
;;     , GClosureNotify destroy_data);
(define ~g_cclosure_new #f)
(define (g_cclosure_new
         callback_func
         user_data
         destroy_data)
  (unless
    ~g_cclosure_new
    (set! ~g_cclosure_new
      (fh-link-proc
        "g_cclosure_new"
        '*
        (list '* '* '*))))
  (let ((~callback_func
          ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
           callback_func))
        (~user_data (unwrap-gpointer user_data))
        (~destroy_data
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           destroy_data)))
    (wrap-GClosure*
      (~g_cclosure_new
        ~callback_func
        ~user_data
        ~destroy_data))))
(export g_cclosure_new)

;; extern GClosure *g_cclosure_new_swap(GCallback callback_func, gpointer 
;;     user_data, GClosureNotify destroy_data);
(define ~g_cclosure_new_swap #f)
(define (g_cclosure_new_swap
         callback_func
         user_data
         destroy_data)
  (unless
    ~g_cclosure_new_swap
    (set! ~g_cclosure_new_swap
      (fh-link-proc
        "g_cclosure_new_swap"
        '*
        (list '* '* '*))))
  (let ((~callback_func
          ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
           callback_func))
        (~user_data (unwrap-gpointer user_data))
        (~destroy_data
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           destroy_data)))
    (wrap-GClosure*
      (~g_cclosure_new_swap
        ~callback_func
        ~user_data
        ~destroy_data))))
(export g_cclosure_new_swap)

;; extern GClosure *g_signal_type_cclosure_new(GType itype, guint struct_offset
;;     );
(define ~g_signal_type_cclosure_new #f)
(define (g_signal_type_cclosure_new itype struct_offset)
  (unless
    ~g_signal_type_cclosure_new
    (set! ~g_signal_type_cclosure_new
      (fh-link-proc
        "g_signal_type_cclosure_new"
        '*
        (list ffi:unsigned-long ffi:unsigned-int))))
  (let ((~itype (unwrap~fixed itype))
        (~struct_offset (unwrap~fixed struct_offset)))
    (wrap-GClosure*
      (~g_signal_type_cclosure_new
        ~itype
        ~struct_offset))))
(export g_signal_type_cclosure_new)

;; extern GClosure *g_closure_ref(GClosure *closure);
(define ~g_closure_ref #f)
(define (g_closure_ref closure)
  (unless
    ~g_closure_ref
    (set! ~g_closure_ref
      (fh-link-proc "g_closure_ref" '* (list '*))))
  (let ((~closure (unwrap-GClosure* closure)))
    (wrap-GClosure* (~g_closure_ref ~closure))))
(export g_closure_ref)

;; extern void g_closure_sink(GClosure *closure);
(define ~g_closure_sink #f)
(define (g_closure_sink closure)
  (unless
    ~g_closure_sink
    (set! ~g_closure_sink
      (fh-link-proc
        "g_closure_sink"
        ffi:void
        (list '*))))
  (let ((~closure (unwrap-GClosure* closure)))
    (~g_closure_sink ~closure)))
(export g_closure_sink)

;; extern void g_closure_unref(GClosure *closure);
(define ~g_closure_unref #f)
(define (g_closure_unref closure)
  (unless
    ~g_closure_unref
    (set! ~g_closure_unref
      (fh-link-proc
        "g_closure_unref"
        ffi:void
        (list '*))))
  (let ((~closure (unwrap-GClosure* closure)))
    (~g_closure_unref ~closure)))
(export g_closure_unref)

;; extern GClosure *g_closure_new_simple(guint sizeof_closure, gpointer data);
(define ~g_closure_new_simple #f)
(define (g_closure_new_simple sizeof_closure data)
  (unless
    ~g_closure_new_simple
    (set! ~g_closure_new_simple
      (fh-link-proc
        "g_closure_new_simple"
        '*
        (list ffi:unsigned-int '*))))
  (let ((~sizeof_closure (unwrap~fixed sizeof_closure))
        (~data (unwrap-gpointer data)))
    (wrap-GClosure*
      (~g_closure_new_simple ~sizeof_closure ~data))))
(export g_closure_new_simple)

;; extern void g_closure_add_finalize_notifier(GClosure *closure, gpointer 
;;     notify_data, GClosureNotify notify_func);
(define ~g_closure_add_finalize_notifier #f)
(define (g_closure_add_finalize_notifier
         closure
         notify_data
         notify_func)
  (unless
    ~g_closure_add_finalize_notifier
    (set! ~g_closure_add_finalize_notifier
      (fh-link-proc
        "g_closure_add_finalize_notifier"
        ffi:void
        (list '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~notify_data (unwrap-gpointer notify_data))
        (~notify_func
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           notify_func)))
    (~g_closure_add_finalize_notifier
      ~closure
      ~notify_data
      ~notify_func)))
(export g_closure_add_finalize_notifier)

;; extern void g_closure_remove_finalize_notifier(GClosure *closure, gpointer 
;;     notify_data, GClosureNotify notify_func);
(define ~g_closure_remove_finalize_notifier #f)
(define (g_closure_remove_finalize_notifier
         closure
         notify_data
         notify_func)
  (unless
    ~g_closure_remove_finalize_notifier
    (set! ~g_closure_remove_finalize_notifier
      (fh-link-proc
        "g_closure_remove_finalize_notifier"
        ffi:void
        (list '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~notify_data (unwrap-gpointer notify_data))
        (~notify_func
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           notify_func)))
    (~g_closure_remove_finalize_notifier
      ~closure
      ~notify_data
      ~notify_func)))
(export g_closure_remove_finalize_notifier)

;; extern void g_closure_add_invalidate_notifier(GClosure *closure, gpointer 
;;     notify_data, GClosureNotify notify_func);
(define ~g_closure_add_invalidate_notifier #f)
(define (g_closure_add_invalidate_notifier
         closure
         notify_data
         notify_func)
  (unless
    ~g_closure_add_invalidate_notifier
    (set! ~g_closure_add_invalidate_notifier
      (fh-link-proc
        "g_closure_add_invalidate_notifier"
        ffi:void
        (list '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~notify_data (unwrap-gpointer notify_data))
        (~notify_func
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           notify_func)))
    (~g_closure_add_invalidate_notifier
      ~closure
      ~notify_data
      ~notify_func)))
(export g_closure_add_invalidate_notifier)

;; extern void g_closure_remove_invalidate_notifier(GClosure *closure, gpointer
;;      notify_data, GClosureNotify notify_func);
(define ~g_closure_remove_invalidate_notifier #f)
(define (g_closure_remove_invalidate_notifier
         closure
         notify_data
         notify_func)
  (unless
    ~g_closure_remove_invalidate_notifier
    (set! ~g_closure_remove_invalidate_notifier
      (fh-link-proc
        "g_closure_remove_invalidate_notifier"
        ffi:void
        (list '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~notify_data (unwrap-gpointer notify_data))
        (~notify_func
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           notify_func)))
    (~g_closure_remove_invalidate_notifier
      ~closure
      ~notify_data
      ~notify_func)))
(export g_closure_remove_invalidate_notifier)

;; extern void g_closure_add_marshal_guards(GClosure *closure, gpointer 
;;     pre_marshal_data, GClosureNotify pre_marshal_notify, gpointer 
;;     post_marshal_data, GClosureNotify post_marshal_notify);
(define ~g_closure_add_marshal_guards #f)
(define (g_closure_add_marshal_guards
         closure
         pre_marshal_data
         pre_marshal_notify
         post_marshal_data
         post_marshal_notify)
  (unless
    ~g_closure_add_marshal_guards
    (set! ~g_closure_add_marshal_guards
      (fh-link-proc
        "g_closure_add_marshal_guards"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~pre_marshal_data
          (unwrap-gpointer pre_marshal_data))
        (~pre_marshal_notify
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           pre_marshal_notify))
        (~post_marshal_data
          (unwrap-gpointer post_marshal_data))
        (~post_marshal_notify
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           post_marshal_notify)))
    (~g_closure_add_marshal_guards
      ~closure
      ~pre_marshal_data
      ~pre_marshal_notify
      ~post_marshal_data
      ~post_marshal_notify)))
(export g_closure_add_marshal_guards)

;; extern void g_closure_set_marshal(GClosure *closure, GClosureMarshal marshal
;;     );
(define ~g_closure_set_marshal #f)
(define (g_closure_set_marshal closure marshal)
  (unless
    ~g_closure_set_marshal
    (set! ~g_closure_set_marshal
      (fh-link-proc
        "g_closure_set_marshal"
        ffi:void
        (list '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~marshal
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* ffi:unsigned-int '* '* '*))
           marshal)))
    (~g_closure_set_marshal ~closure ~marshal)))
(export g_closure_set_marshal)

;; extern void g_closure_set_meta_marshal(GClosure *closure, gpointer 
;;     marshal_data, GClosureMarshal meta_marshal);
(define ~g_closure_set_meta_marshal #f)
(define (g_closure_set_meta_marshal
         closure
         marshal_data
         meta_marshal)
  (unless
    ~g_closure_set_meta_marshal
    (set! ~g_closure_set_meta_marshal
      (fh-link-proc
        "g_closure_set_meta_marshal"
        ffi:void
        (list '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~meta_marshal
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* ffi:unsigned-int '* '* '*))
           meta_marshal)))
    (~g_closure_set_meta_marshal
      ~closure
      ~marshal_data
      ~meta_marshal)))
(export g_closure_set_meta_marshal)

;; extern void g_closure_invalidate(GClosure *closure);
(define ~g_closure_invalidate #f)
(define (g_closure_invalidate closure)
  (unless
    ~g_closure_invalidate
    (set! ~g_closure_invalidate
      (fh-link-proc
        "g_closure_invalidate"
        ffi:void
        (list '*))))
  (let ((~closure (unwrap-GClosure* closure)))
    (~g_closure_invalidate ~closure)))
(export g_closure_invalidate)

;; extern void g_closure_invoke(GClosure *closure, GValue *return_value, guint 
;;     n_param_values, const GValue *param_values, gpointer invocation_hint);
(define ~g_closure_invoke #f)
(define (g_closure_invoke
         closure
         return_value
         n_param_values
         param_values
         invocation_hint)
  (unless
    ~g_closure_invoke
    (set! ~g_closure_invoke
      (fh-link-proc
        "g_closure_invoke"
        ffi:void
        (list '* '* ffi:unsigned-int '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint)))
    (~g_closure_invoke
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint)))
(export g_closure_invoke)

;; extern void g_cclosure_marshal_generic(GClosure *closure, GValue *
;;     return_gvalue, guint n_param_values, const GValue *param_values, 
;;     gpointer invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_generic #f)
(define (g_cclosure_marshal_generic
         closure
         return_gvalue
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_generic
    (set! ~g_cclosure_marshal_generic
      (fh-link-proc
        "g_cclosure_marshal_generic"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_gvalue (unwrap-GValue* return_gvalue))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_generic
      ~closure
      ~return_gvalue
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_generic)

;; extern void g_cclosure_marshal_generic_va(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args_list, gpointer 
;;     marshal_data, int n_params, GType *param_types);
(define ~g_cclosure_marshal_generic_va #f)
(define (g_cclosure_marshal_generic_va
         closure
         return_value
         instance
         args_list
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_generic_va
    (set! ~g_cclosure_marshal_generic_va
      (fh-link-proc
        "g_cclosure_marshal_generic_va"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args_list (unwrap~pointer args_list))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_generic_va
      ~closure
      ~return_value
      ~instance
      ~args_list
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_generic_va)

;; extern void g_cclosure_marshal_VOID__VOID(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__VOID #f)
(define (g_cclosure_marshal_VOID__VOID
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__VOID
    (set! ~g_cclosure_marshal_VOID__VOID
      (fh-link-proc
        "g_cclosure_marshal_VOID__VOID"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__VOID
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__VOID)

;; extern void g_cclosure_marshal_VOID__VOIDv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__VOIDv #f)
(define (g_cclosure_marshal_VOID__VOIDv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__VOIDv
    (set! ~g_cclosure_marshal_VOID__VOIDv
      (fh-link-proc
        "g_cclosure_marshal_VOID__VOIDv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__VOIDv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__VOIDv)

;; extern void g_cclosure_marshal_VOID__BOOLEAN(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__BOOLEAN #f)
(define (g_cclosure_marshal_VOID__BOOLEAN
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__BOOLEAN
    (set! ~g_cclosure_marshal_VOID__BOOLEAN
      (fh-link-proc
        "g_cclosure_marshal_VOID__BOOLEAN"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__BOOLEAN
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__BOOLEAN)

;; extern void g_cclosure_marshal_VOID__BOOLEANv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__BOOLEANv #f)
(define (g_cclosure_marshal_VOID__BOOLEANv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__BOOLEANv
    (set! ~g_cclosure_marshal_VOID__BOOLEANv
      (fh-link-proc
        "g_cclosure_marshal_VOID__BOOLEANv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__BOOLEANv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__BOOLEANv)

;; extern void g_cclosure_marshal_VOID__CHAR(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__CHAR #f)
(define (g_cclosure_marshal_VOID__CHAR
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__CHAR
    (set! ~g_cclosure_marshal_VOID__CHAR
      (fh-link-proc
        "g_cclosure_marshal_VOID__CHAR"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__CHAR
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__CHAR)

;; extern void g_cclosure_marshal_VOID__CHARv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__CHARv #f)
(define (g_cclosure_marshal_VOID__CHARv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__CHARv
    (set! ~g_cclosure_marshal_VOID__CHARv
      (fh-link-proc
        "g_cclosure_marshal_VOID__CHARv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__CHARv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__CHARv)

;; extern void g_cclosure_marshal_VOID__UCHAR(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__UCHAR #f)
(define (g_cclosure_marshal_VOID__UCHAR
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__UCHAR
    (set! ~g_cclosure_marshal_VOID__UCHAR
      (fh-link-proc
        "g_cclosure_marshal_VOID__UCHAR"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__UCHAR
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__UCHAR)

;; extern void g_cclosure_marshal_VOID__UCHARv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__UCHARv #f)
(define (g_cclosure_marshal_VOID__UCHARv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__UCHARv
    (set! ~g_cclosure_marshal_VOID__UCHARv
      (fh-link-proc
        "g_cclosure_marshal_VOID__UCHARv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__UCHARv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__UCHARv)

;; extern void g_cclosure_marshal_VOID__INT(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__INT #f)
(define (g_cclosure_marshal_VOID__INT
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__INT
    (set! ~g_cclosure_marshal_VOID__INT
      (fh-link-proc
        "g_cclosure_marshal_VOID__INT"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__INT
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__INT)

;; extern void g_cclosure_marshal_VOID__INTv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__INTv #f)
(define (g_cclosure_marshal_VOID__INTv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__INTv
    (set! ~g_cclosure_marshal_VOID__INTv
      (fh-link-proc
        "g_cclosure_marshal_VOID__INTv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__INTv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__INTv)

;; extern void g_cclosure_marshal_VOID__UINT(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__UINT #f)
(define (g_cclosure_marshal_VOID__UINT
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__UINT
    (set! ~g_cclosure_marshal_VOID__UINT
      (fh-link-proc
        "g_cclosure_marshal_VOID__UINT"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__UINT
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__UINT)

;; extern void g_cclosure_marshal_VOID__UINTv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__UINTv #f)
(define (g_cclosure_marshal_VOID__UINTv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__UINTv
    (set! ~g_cclosure_marshal_VOID__UINTv
      (fh-link-proc
        "g_cclosure_marshal_VOID__UINTv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__UINTv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__UINTv)

;; extern void g_cclosure_marshal_VOID__LONG(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__LONG #f)
(define (g_cclosure_marshal_VOID__LONG
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__LONG
    (set! ~g_cclosure_marshal_VOID__LONG
      (fh-link-proc
        "g_cclosure_marshal_VOID__LONG"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__LONG
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__LONG)

;; extern void g_cclosure_marshal_VOID__LONGv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__LONGv #f)
(define (g_cclosure_marshal_VOID__LONGv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__LONGv
    (set! ~g_cclosure_marshal_VOID__LONGv
      (fh-link-proc
        "g_cclosure_marshal_VOID__LONGv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__LONGv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__LONGv)

;; extern void g_cclosure_marshal_VOID__ULONG(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__ULONG #f)
(define (g_cclosure_marshal_VOID__ULONG
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__ULONG
    (set! ~g_cclosure_marshal_VOID__ULONG
      (fh-link-proc
        "g_cclosure_marshal_VOID__ULONG"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__ULONG
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__ULONG)

;; extern void g_cclosure_marshal_VOID__ULONGv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__ULONGv #f)
(define (g_cclosure_marshal_VOID__ULONGv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__ULONGv
    (set! ~g_cclosure_marshal_VOID__ULONGv
      (fh-link-proc
        "g_cclosure_marshal_VOID__ULONGv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__ULONGv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__ULONGv)

;; extern void g_cclosure_marshal_VOID__ENUM(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__ENUM #f)
(define (g_cclosure_marshal_VOID__ENUM
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__ENUM
    (set! ~g_cclosure_marshal_VOID__ENUM
      (fh-link-proc
        "g_cclosure_marshal_VOID__ENUM"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__ENUM
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__ENUM)

;; extern void g_cclosure_marshal_VOID__ENUMv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__ENUMv #f)
(define (g_cclosure_marshal_VOID__ENUMv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__ENUMv
    (set! ~g_cclosure_marshal_VOID__ENUMv
      (fh-link-proc
        "g_cclosure_marshal_VOID__ENUMv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__ENUMv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__ENUMv)

;; extern void g_cclosure_marshal_VOID__FLAGS(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__FLAGS #f)
(define (g_cclosure_marshal_VOID__FLAGS
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__FLAGS
    (set! ~g_cclosure_marshal_VOID__FLAGS
      (fh-link-proc
        "g_cclosure_marshal_VOID__FLAGS"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__FLAGS
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__FLAGS)

;; extern void g_cclosure_marshal_VOID__FLAGSv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__FLAGSv #f)
(define (g_cclosure_marshal_VOID__FLAGSv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__FLAGSv
    (set! ~g_cclosure_marshal_VOID__FLAGSv
      (fh-link-proc
        "g_cclosure_marshal_VOID__FLAGSv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__FLAGSv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__FLAGSv)

;; extern void g_cclosure_marshal_VOID__FLOAT(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__FLOAT #f)
(define (g_cclosure_marshal_VOID__FLOAT
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__FLOAT
    (set! ~g_cclosure_marshal_VOID__FLOAT
      (fh-link-proc
        "g_cclosure_marshal_VOID__FLOAT"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__FLOAT
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__FLOAT)

;; extern void g_cclosure_marshal_VOID__FLOATv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__FLOATv #f)
(define (g_cclosure_marshal_VOID__FLOATv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__FLOATv
    (set! ~g_cclosure_marshal_VOID__FLOATv
      (fh-link-proc
        "g_cclosure_marshal_VOID__FLOATv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__FLOATv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__FLOATv)

;; extern void g_cclosure_marshal_VOID__DOUBLE(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__DOUBLE #f)
(define (g_cclosure_marshal_VOID__DOUBLE
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__DOUBLE
    (set! ~g_cclosure_marshal_VOID__DOUBLE
      (fh-link-proc
        "g_cclosure_marshal_VOID__DOUBLE"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__DOUBLE
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__DOUBLE)

;; extern void g_cclosure_marshal_VOID__DOUBLEv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__DOUBLEv #f)
(define (g_cclosure_marshal_VOID__DOUBLEv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__DOUBLEv
    (set! ~g_cclosure_marshal_VOID__DOUBLEv
      (fh-link-proc
        "g_cclosure_marshal_VOID__DOUBLEv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__DOUBLEv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__DOUBLEv)

;; extern void g_cclosure_marshal_VOID__STRING(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__STRING #f)
(define (g_cclosure_marshal_VOID__STRING
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__STRING
    (set! ~g_cclosure_marshal_VOID__STRING
      (fh-link-proc
        "g_cclosure_marshal_VOID__STRING"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__STRING
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__STRING)

;; extern void g_cclosure_marshal_VOID__STRINGv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__STRINGv #f)
(define (g_cclosure_marshal_VOID__STRINGv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__STRINGv
    (set! ~g_cclosure_marshal_VOID__STRINGv
      (fh-link-proc
        "g_cclosure_marshal_VOID__STRINGv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__STRINGv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__STRINGv)

;; extern void g_cclosure_marshal_VOID__PARAM(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__PARAM #f)
(define (g_cclosure_marshal_VOID__PARAM
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__PARAM
    (set! ~g_cclosure_marshal_VOID__PARAM
      (fh-link-proc
        "g_cclosure_marshal_VOID__PARAM"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__PARAM
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__PARAM)

;; extern void g_cclosure_marshal_VOID__PARAMv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__PARAMv #f)
(define (g_cclosure_marshal_VOID__PARAMv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__PARAMv
    (set! ~g_cclosure_marshal_VOID__PARAMv
      (fh-link-proc
        "g_cclosure_marshal_VOID__PARAMv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__PARAMv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__PARAMv)

;; extern void g_cclosure_marshal_VOID__BOXED(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__BOXED #f)
(define (g_cclosure_marshal_VOID__BOXED
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__BOXED
    (set! ~g_cclosure_marshal_VOID__BOXED
      (fh-link-proc
        "g_cclosure_marshal_VOID__BOXED"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__BOXED
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__BOXED)

;; extern void g_cclosure_marshal_VOID__BOXEDv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__BOXEDv #f)
(define (g_cclosure_marshal_VOID__BOXEDv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__BOXEDv
    (set! ~g_cclosure_marshal_VOID__BOXEDv
      (fh-link-proc
        "g_cclosure_marshal_VOID__BOXEDv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__BOXEDv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__BOXEDv)

;; extern void g_cclosure_marshal_VOID__POINTER(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__POINTER #f)
(define (g_cclosure_marshal_VOID__POINTER
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__POINTER
    (set! ~g_cclosure_marshal_VOID__POINTER
      (fh-link-proc
        "g_cclosure_marshal_VOID__POINTER"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__POINTER
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__POINTER)

;; extern void g_cclosure_marshal_VOID__POINTERv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__POINTERv #f)
(define (g_cclosure_marshal_VOID__POINTERv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__POINTERv
    (set! ~g_cclosure_marshal_VOID__POINTERv
      (fh-link-proc
        "g_cclosure_marshal_VOID__POINTERv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__POINTERv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__POINTERv)

;; extern void g_cclosure_marshal_VOID__OBJECT(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__OBJECT #f)
(define (g_cclosure_marshal_VOID__OBJECT
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__OBJECT
    (set! ~g_cclosure_marshal_VOID__OBJECT
      (fh-link-proc
        "g_cclosure_marshal_VOID__OBJECT"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__OBJECT
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__OBJECT)

;; extern void g_cclosure_marshal_VOID__OBJECTv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__OBJECTv #f)
(define (g_cclosure_marshal_VOID__OBJECTv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__OBJECTv
    (set! ~g_cclosure_marshal_VOID__OBJECTv
      (fh-link-proc
        "g_cclosure_marshal_VOID__OBJECTv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__OBJECTv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__OBJECTv)

;; extern void g_cclosure_marshal_VOID__VARIANT(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__VARIANT #f)
(define (g_cclosure_marshal_VOID__VARIANT
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__VARIANT
    (set! ~g_cclosure_marshal_VOID__VARIANT
      (fh-link-proc
        "g_cclosure_marshal_VOID__VARIANT"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__VARIANT
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__VARIANT)

;; extern void g_cclosure_marshal_VOID__VARIANTv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__VARIANTv #f)
(define (g_cclosure_marshal_VOID__VARIANTv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__VARIANTv
    (set! ~g_cclosure_marshal_VOID__VARIANTv
      (fh-link-proc
        "g_cclosure_marshal_VOID__VARIANTv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__VARIANTv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__VARIANTv)

;; extern void g_cclosure_marshal_VOID__UINT_POINTER(GClosure *closure, GValue 
;;     *return_value, guint n_param_values, const GValue *param_values, 
;;     gpointer invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_VOID__UINT_POINTER #f)
(define (g_cclosure_marshal_VOID__UINT_POINTER
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_VOID__UINT_POINTER
    (set! ~g_cclosure_marshal_VOID__UINT_POINTER
      (fh-link-proc
        "g_cclosure_marshal_VOID__UINT_POINTER"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_VOID__UINT_POINTER
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_VOID__UINT_POINTER)

;; extern void g_cclosure_marshal_VOID__UINT_POINTERv(GClosure *closure, GValue
;;      *return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_VOID__UINT_POINTERv #f)
(define (g_cclosure_marshal_VOID__UINT_POINTERv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_VOID__UINT_POINTERv
    (set! ~g_cclosure_marshal_VOID__UINT_POINTERv
      (fh-link-proc
        "g_cclosure_marshal_VOID__UINT_POINTERv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_VOID__UINT_POINTERv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_VOID__UINT_POINTERv)

;; extern void g_cclosure_marshal_BOOLEAN__FLAGS(GClosure *closure, GValue *
;;     return_value, guint n_param_values, const GValue *param_values, gpointer
;;      invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_BOOLEAN__FLAGS #f)
(define (g_cclosure_marshal_BOOLEAN__FLAGS
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_BOOLEAN__FLAGS
    (set! ~g_cclosure_marshal_BOOLEAN__FLAGS
      (fh-link-proc
        "g_cclosure_marshal_BOOLEAN__FLAGS"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_BOOLEAN__FLAGS
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_BOOLEAN__FLAGS)

;; extern void g_cclosure_marshal_BOOLEAN__FLAGSv(GClosure *closure, GValue *
;;     return_value, gpointer instance, va_list args, gpointer marshal_data, 
;;     int n_params, GType *param_types);
(define ~g_cclosure_marshal_BOOLEAN__FLAGSv #f)
(define (g_cclosure_marshal_BOOLEAN__FLAGSv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_BOOLEAN__FLAGSv
    (set! ~g_cclosure_marshal_BOOLEAN__FLAGSv
      (fh-link-proc
        "g_cclosure_marshal_BOOLEAN__FLAGSv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_BOOLEAN__FLAGSv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_BOOLEAN__FLAGSv)

;; extern void g_cclosure_marshal_STRING__OBJECT_POINTER(GClosure *closure, 
;;     GValue *return_value, guint n_param_values, const GValue *param_values, 
;;     gpointer invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_STRING__OBJECT_POINTER #f)
(define (g_cclosure_marshal_STRING__OBJECT_POINTER
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_STRING__OBJECT_POINTER
    (set! ~g_cclosure_marshal_STRING__OBJECT_POINTER
      (fh-link-proc
        "g_cclosure_marshal_STRING__OBJECT_POINTER"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_STRING__OBJECT_POINTER
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_STRING__OBJECT_POINTER)

;; extern void g_cclosure_marshal_STRING__OBJECT_POINTERv(GClosure *closure, 
;;     GValue *return_value, gpointer instance, va_list args, gpointer 
;;     marshal_data, int n_params, GType *param_types);
(define ~g_cclosure_marshal_STRING__OBJECT_POINTERv #f)
(define (g_cclosure_marshal_STRING__OBJECT_POINTERv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_STRING__OBJECT_POINTERv
    (set! ~g_cclosure_marshal_STRING__OBJECT_POINTERv
      (fh-link-proc
        "g_cclosure_marshal_STRING__OBJECT_POINTERv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_STRING__OBJECT_POINTERv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_STRING__OBJECT_POINTERv)

;; extern void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(GClosure *closure, 
;;     GValue *return_value, guint n_param_values, const GValue *param_values, 
;;     gpointer invocation_hint, gpointer marshal_data);
(define ~g_cclosure_marshal_BOOLEAN__BOXED_BOXED #f)
(define (g_cclosure_marshal_BOOLEAN__BOXED_BOXED
         closure
         return_value
         n_param_values
         param_values
         invocation_hint
         marshal_data)
  (unless
    ~g_cclosure_marshal_BOOLEAN__BOXED_BOXED
    (set! ~g_cclosure_marshal_BOOLEAN__BOXED_BOXED
      (fh-link-proc
        "g_cclosure_marshal_BOOLEAN__BOXED_BOXED"
        ffi:void
        (list '* '* ffi:unsigned-int '* '* '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~n_param_values (unwrap~fixed n_param_values))
        (~param_values (unwrap-GValue* param_values))
        (~invocation_hint
          (unwrap-gpointer invocation_hint))
        (~marshal_data (unwrap-gpointer marshal_data)))
    (~g_cclosure_marshal_BOOLEAN__BOXED_BOXED
      ~closure
      ~return_value
      ~n_param_values
      ~param_values
      ~invocation_hint
      ~marshal_data)))
(export g_cclosure_marshal_BOOLEAN__BOXED_BOXED)

;; extern void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(GClosure *closure, 
;;     GValue *return_value, gpointer instance, va_list args, gpointer 
;;     marshal_data, int n_params, GType *param_types);
(define ~g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv #f)
(define (g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv
         closure
         return_value
         instance
         args
         marshal_data
         n_params
         param_types)
  (unless
    ~g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv
    (set! ~g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv
      (fh-link-proc
        "g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv"
        ffi:void
        (list '* '* '* '* '* ffi:int '*))))
  (let ((~closure (unwrap-GClosure* closure))
        (~return_value (unwrap-GValue* return_value))
        (~instance (unwrap-gpointer instance))
        (~args (unwrap~pointer args))
        (~marshal_data (unwrap-gpointer marshal_data))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv
      ~closure
      ~return_value
      ~instance
      ~args
      ~marshal_data
      ~n_params
      ~param_types)))
(export g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv)

;; typedef struct _GSignalQuery GSignalQuery;
(define GSignalQuery-desc void)
(export GSignalQuery-desc)
(define GSignalQuery*-desc (bs:pointer (delay GSignalQuery-desc)))
(export GSignalQuery*-desc)
(define-fh-pointer-type GSignalQuery* GSignalQuery*-desc)

;; typedef struct _GSignalInvocationHint GSignalInvocationHint;
(define GSignalInvocationHint-desc void)
(export GSignalInvocationHint-desc)
(define GSignalInvocationHint*-desc (bs:pointer (delay GSignalInvocationHint-desc)))
(export GSignalInvocationHint*-desc)
(define-fh-pointer-type GSignalInvocationHint* GSignalInvocationHint*-desc)

;; typedef GClosureMarshal GSignalCMarshaller;
(define unwrap-GSignalCMarshaller unwrap-GClosureMarshal)
(define wrap-GSignalCMarshaller wrap-GClosureMarshal)

;; typedef GVaClosureMarshal GSignalCVaMarshaller;
(define unwrap-GSignalCVaMarshaller unwrap-GVaClosureMarshal)
(define wrap-GSignalCVaMarshaller wrap-GVaClosureMarshal)

;; typedef gboolean (*GSignalEmissionHook)(GSignalInvocationHint *ihint, guint 
;;     n_param_values, const GValue *param_values, gpointer data);
(define-fh-function/p GSignalEmissionHook
  ffi:int (list (quote *) ffi:unsigned-int (quote *) (quote *)))

;; typedef gboolean (*GSignalAccumulator)(GSignalInvocationHint *ihint, GValue 
;;     *return_accu, const GValue *handler_return, gpointer data);
(define-fh-function/p GSignalAccumulator
  ffi:int (list (quote *) (quote *) (quote *) (quote *)))

;; typedef enum {
;;   G_SIGNAL_RUN_FIRST = 1<<0,
;;   G_SIGNAL_RUN_LAST = 1<<1,
;;   G_SIGNAL_RUN_CLEANUP = 1<<2,
;;   G_SIGNAL_NO_RECURSE = 1<<3,
;;   G_SIGNAL_DETAILED = 1<<4,
;;   G_SIGNAL_ACTION = 1<<5,
;;   G_SIGNAL_NO_HOOKS = 1<<6,
;;   G_SIGNAL_MUST_COLLECT = 1<<7,
;;   G_SIGNAL_DEPRECATED = 1<<8,
;; } GSignalFlags;
(define-fh-enum GSignalFlags
  '((G_SIGNAL_RUN_FIRST . 1)
    (G_SIGNAL_RUN_LAST . 2)
    (G_SIGNAL_RUN_CLEANUP . 4)
    (G_SIGNAL_NO_RECURSE . 8)
    (G_SIGNAL_DETAILED . 16)
    (G_SIGNAL_ACTION . 32)
    (G_SIGNAL_NO_HOOKS . 64)
    (G_SIGNAL_MUST_COLLECT . 128)
    (G_SIGNAL_DEPRECATED . 256))
  )

;; typedef enum {
;;   G_CONNECT_AFTER = 1<<0,
;;   G_CONNECT_SWAPPED = 1<<1,
;; } GConnectFlags;
(define-fh-enum GConnectFlags
  '((G_CONNECT_AFTER . 1) (G_CONNECT_SWAPPED . 2))
  )

;; typedef enum {
;;   G_SIGNAL_MATCH_ID = 1<<0,
;;   G_SIGNAL_MATCH_DETAIL = 1<<1,
;;   G_SIGNAL_MATCH_CLOSURE = 1<<2,
;;   G_SIGNAL_MATCH_FUNC = 1<<3,
;;   G_SIGNAL_MATCH_DATA = 1<<4,
;;   G_SIGNAL_MATCH_UNBLOCKED = 1<<5,
;; } GSignalMatchType;
(define-fh-enum GSignalMatchType
  '((G_SIGNAL_MATCH_ID . 1)
    (G_SIGNAL_MATCH_DETAIL . 2)
    (G_SIGNAL_MATCH_CLOSURE . 4)
    (G_SIGNAL_MATCH_FUNC . 8)
    (G_SIGNAL_MATCH_DATA . 16)
    (G_SIGNAL_MATCH_UNBLOCKED . 32))
  )

;; struct _GSignalInvocationHint {
;;   guint signal_id;
;;   GQuark detail;
;;   GSignalFlags run_type;
;; };
(define struct-_GSignalInvocationHint-desc
  (bs:struct
    (list `(signal_id ,unsigned-int)
          `(detail ,unsigned-int)
          `(run_type ,int))))
(export struct-_GSignalInvocationHint-desc)
(define-fh-compound-type/p struct-_GSignalInvocationHint struct-_GSignalInvocationHint-desc)
(set! GSignalInvocationHint-desc struct-_GSignalInvocationHint-desc)
(define-fh-compound-type GSignalInvocationHint GSignalInvocationHint-desc)

;; struct _GSignalQuery {
;;   guint signal_id;
;;   const gchar *signal_name;
;;   GType itype;
;;   GSignalFlags signal_flags;
;;   GType return_type; /* mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag */
;;   guint n_params;
;;   const GType *param_types; 
;;       /* mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag */
;; };
(define struct-_GSignalQuery-desc
  (bs:struct
    (list `(signal_id ,unsigned-int)
          `(signal_name ,(bs:pointer int))
          `(itype ,unsigned-long)
          `(signal_flags ,int)
          `(return_type ,unsigned-long)
          `(n_params ,unsigned-int)
          `(param_types ,(bs:pointer unsigned-long)))))
(export struct-_GSignalQuery-desc)
(define-fh-compound-type/p struct-_GSignalQuery struct-_GSignalQuery-desc)
(set! GSignalQuery-desc struct-_GSignalQuery-desc)
(define-fh-compound-type GSignalQuery GSignalQuery-desc)

;; extern guint g_signal_newv(const gchar *signal_name, GType itype, 
;;     GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator 
;;     accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType 
;;     return_type, guint n_params, GType *param_types);
(define ~g_signal_newv #f)
(define (g_signal_newv
         signal_name
         itype
         signal_flags
         class_closure
         accumulator
         accu_data
         c_marshaller
         return_type
         n_params
         param_types)
  (unless
    ~g_signal_newv
    (set! ~g_signal_newv
      (fh-link-proc
        "g_signal_newv"
        ffi:unsigned-int
        (list '*
              ffi:unsigned-long
              ffi:int
              '*
              '*
              '*
              '*
              ffi:unsigned-long
              ffi:unsigned-int
              '*))))
  (let ((~signal_name (unwrap~pointer signal_name))
        (~itype (unwrap~fixed itype))
        (~signal_flags (unwrap~fixed signal_flags))
        (~class_closure (unwrap-GClosure* class_closure))
        (~accumulator
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* '* '* '*))
           accumulator))
        (~accu_data (unwrap-gpointer accu_data))
        (~c_marshaller
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* ffi:unsigned-int '* '* '*))
           c_marshaller))
        (~return_type (unwrap~fixed return_type))
        (~n_params (unwrap~fixed n_params))
        (~param_types (unwrap~pointer param_types)))
    (~g_signal_newv
      ~signal_name
      ~itype
      ~signal_flags
      ~class_closure
      ~accumulator
      ~accu_data
      ~c_marshaller
      ~return_type
      ~n_params
      ~param_types)))
(export g_signal_newv)

;; extern guint g_signal_new_valist(const gchar *signal_name, GType itype, 
;;     GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator 
;;     accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType 
;;     return_type, guint n_params, va_list args);
(define ~g_signal_new_valist #f)
(define (g_signal_new_valist
         signal_name
         itype
         signal_flags
         class_closure
         accumulator
         accu_data
         c_marshaller
         return_type
         n_params
         args)
  (unless
    ~g_signal_new_valist
    (set! ~g_signal_new_valist
      (fh-link-proc
        "g_signal_new_valist"
        ffi:unsigned-int
        (list '*
              ffi:unsigned-long
              ffi:int
              '*
              '*
              '*
              '*
              ffi:unsigned-long
              ffi:unsigned-int
              '*))))
  (let ((~signal_name (unwrap~pointer signal_name))
        (~itype (unwrap~fixed itype))
        (~signal_flags (unwrap~fixed signal_flags))
        (~class_closure (unwrap-GClosure* class_closure))
        (~accumulator
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* '* '* '*))
           accumulator))
        (~accu_data (unwrap-gpointer accu_data))
        (~c_marshaller
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* ffi:unsigned-int '* '* '*))
           c_marshaller))
        (~return_type (unwrap~fixed return_type))
        (~n_params (unwrap~fixed n_params))
        (~args (unwrap~pointer args)))
    (~g_signal_new_valist
      ~signal_name
      ~itype
      ~signal_flags
      ~class_closure
      ~accumulator
      ~accu_data
      ~c_marshaller
      ~return_type
      ~n_params
      ~args)))
(export g_signal_new_valist)

;; extern guint g_signal_new(const gchar *signal_name, GType itype, 
;;     GSignalFlags signal_flags, guint class_offset, GSignalAccumulator 
;;     accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType 
;;     return_type, guint n_params, ...);
;; ... failed.

;; extern guint g_signal_new_class_handler(const gchar *signal_name, GType 
;;     itype, GSignalFlags signal_flags, GCallback class_handler, 
;;     GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller 
;;     c_marshaller, GType return_type, guint n_params, ...);
;; ... failed.

;; extern void g_signal_set_va_marshaller(guint signal_id, GType instance_type
;;     , GSignalCVaMarshaller va_marshaller);
(define ~g_signal_set_va_marshaller #f)
(define (g_signal_set_va_marshaller
         signal_id
         instance_type
         va_marshaller)
  (unless
    ~g_signal_set_va_marshaller
    (set! ~g_signal_set_va_marshaller
      (fh-link-proc
        "g_signal_set_va_marshaller"
        ffi:void
        (list ffi:unsigned-int ffi:unsigned-long '*))))
  (let ((~signal_id (unwrap~fixed signal_id))
        (~instance_type (unwrap~fixed instance_type))
        (~va_marshaller
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* '* '* '* ffi:int '*))
           va_marshaller)))
    (~g_signal_set_va_marshaller
      ~signal_id
      ~instance_type
      ~va_marshaller)))
(export g_signal_set_va_marshaller)

;; extern void g_signal_emitv(const GValue *instance_and_params, guint 
;;     signal_id, GQuark detail, GValue *return_value);
(define ~g_signal_emitv #f)
(define (g_signal_emitv
         instance_and_params
         signal_id
         detail
         return_value)
  (unless
    ~g_signal_emitv
    (set! ~g_signal_emitv
      (fh-link-proc
        "g_signal_emitv"
        ffi:void
        (list '* ffi:unsigned-int ffi:unsigned-int '*))))
  (let ((~instance_and_params
          (unwrap-GValue* instance_and_params))
        (~signal_id (unwrap~fixed signal_id))
        (~detail (unwrap~fixed detail))
        (~return_value (unwrap-GValue* return_value)))
    (~g_signal_emitv
      ~instance_and_params
      ~signal_id
      ~detail
      ~return_value)))
(export g_signal_emitv)

;; extern void g_signal_emit_valist(gpointer instance, guint signal_id, GQuark 
;;     detail, va_list var_args);
(define ~g_signal_emit_valist #f)
(define (g_signal_emit_valist
         instance
         signal_id
         detail
         var_args)
  (unless
    ~g_signal_emit_valist
    (set! ~g_signal_emit_valist
      (fh-link-proc
        "g_signal_emit_valist"
        ffi:void
        (list '* ffi:unsigned-int ffi:unsigned-int '*))))
  (let ((~instance (unwrap-gpointer instance))
        (~signal_id (unwrap~fixed signal_id))
        (~detail (unwrap~fixed detail))
        (~var_args (unwrap~pointer var_args)))
    (~g_signal_emit_valist
      ~instance
      ~signal_id
      ~detail
      ~var_args)))
(export g_signal_emit_valist)

;; extern void g_signal_emit(gpointer instance, guint signal_id, GQuark detail
;;     , ...);
;; ... failed.

;; extern void g_signal_emit_by_name(gpointer instance, const gchar *
;;     detailed_signal, ...);
;; ... failed.

;; extern guint g_signal_lookup(const gchar *name, GType itype);
(define ~g_signal_lookup #f)
(define (g_signal_lookup name itype)
  (unless
    ~g_signal_lookup
    (set! ~g_signal_lookup
      (fh-link-proc
        "g_signal_lookup"
        ffi:unsigned-int
        (list '* ffi:unsigned-long))))
  (let ((~name (unwrap~pointer name))
        (~itype (unwrap~fixed itype)))
    (~g_signal_lookup ~name ~itype)))
(export g_signal_lookup)

;; extern const gchar *g_signal_name(guint signal_id);
(define ~g_signal_name #f)
(define (g_signal_name signal_id)
  (unless
    ~g_signal_name
    (set! ~g_signal_name
      (fh-link-proc
        "g_signal_name"
        '*
        (list ffi:unsigned-int))))
  (let ((~signal_id (unwrap~fixed signal_id)))
    (~g_signal_name ~signal_id)))
(export g_signal_name)

;; extern void g_signal_query(guint signal_id, GSignalQuery *query);
(define ~g_signal_query #f)
(define (g_signal_query signal_id query)
  (unless
    ~g_signal_query
    (set! ~g_signal_query
      (fh-link-proc
        "g_signal_query"
        ffi:void
        (list ffi:unsigned-int '*))))
  (let ((~signal_id (unwrap~fixed signal_id))
        (~query (unwrap-GSignalQuery* query)))
    (~g_signal_query ~signal_id ~query)))
(export g_signal_query)

;; extern guint *g_signal_list_ids(GType itype, guint *n_ids);
(define ~g_signal_list_ids #f)
(define (g_signal_list_ids itype n_ids)
  (unless
    ~g_signal_list_ids
    (set! ~g_signal_list_ids
      (fh-link-proc
        "g_signal_list_ids"
        '*
        (list ffi:unsigned-long '*))))
  (let ((~itype (unwrap~fixed itype))
        (~n_ids (unwrap~pointer n_ids)))
    (~g_signal_list_ids ~itype ~n_ids)))
(export g_signal_list_ids)

;; extern gboolean g_signal_parse_name(const gchar *detailed_signal, GType 
;;     itype, guint *signal_id_p, GQuark *detail_p, gboolean force_detail_quark
;;     );
(define ~g_signal_parse_name #f)
(define (g_signal_parse_name
         detailed_signal
         itype
         signal_id_p
         detail_p
         force_detail_quark)
  (unless
    ~g_signal_parse_name
    (set! ~g_signal_parse_name
      (fh-link-proc
        "g_signal_parse_name"
        ffi:int
        (list '* ffi:unsigned-long '* '* ffi:int))))
  (let ((~detailed_signal
          (unwrap~pointer detailed_signal))
        (~itype (unwrap~fixed itype))
        (~signal_id_p (unwrap~pointer signal_id_p))
        (~detail_p (unwrap~pointer detail_p))
        (~force_detail_quark
          (unwrap~fixed force_detail_quark)))
    (~g_signal_parse_name
      ~detailed_signal
      ~itype
      ~signal_id_p
      ~detail_p
      ~force_detail_quark)))
(export g_signal_parse_name)

;; extern GSignalInvocationHint *g_signal_get_invocation_hint(gpointer instance
;;     );
(define ~g_signal_get_invocation_hint #f)
(define (g_signal_get_invocation_hint instance)
  (unless
    ~g_signal_get_invocation_hint
    (set! ~g_signal_get_invocation_hint
      (fh-link-proc
        "g_signal_get_invocation_hint"
        '*
        (list '*))))
  (let ((~instance (unwrap-gpointer instance)))
    (wrap-GSignalInvocationHint*
      (~g_signal_get_invocation_hint ~instance))))
(export g_signal_get_invocation_hint)

;; extern void g_signal_stop_emission(gpointer instance, guint signal_id, 
;;     GQuark detail);
(define ~g_signal_stop_emission #f)
(define (g_signal_stop_emission
         instance
         signal_id
         detail)
  (unless
    ~g_signal_stop_emission
    (set! ~g_signal_stop_emission
      (fh-link-proc
        "g_signal_stop_emission"
        ffi:void
        (list '* ffi:unsigned-int ffi:unsigned-int))))
  (let ((~instance (unwrap-gpointer instance))
        (~signal_id (unwrap~fixed signal_id))
        (~detail (unwrap~fixed detail)))
    (~g_signal_stop_emission
      ~instance
      ~signal_id
      ~detail)))
(export g_signal_stop_emission)

;; extern void g_signal_stop_emission_by_name(gpointer instance, const gchar *
;;     detailed_signal);
(define ~g_signal_stop_emission_by_name #f)
(define (g_signal_stop_emission_by_name
         instance
         detailed_signal)
  (unless
    ~g_signal_stop_emission_by_name
    (set! ~g_signal_stop_emission_by_name
      (fh-link-proc
        "g_signal_stop_emission_by_name"
        ffi:void
        (list '* '*))))
  (let ((~instance (unwrap-gpointer instance))
        (~detailed_signal
          (unwrap~pointer detailed_signal)))
    (~g_signal_stop_emission_by_name
      ~instance
      ~detailed_signal)))
(export g_signal_stop_emission_by_name)

;; extern gulong g_signal_add_emission_hook(guint signal_id, GQuark detail, 
;;     GSignalEmissionHook hook_func, gpointer hook_data, GDestroyNotify 
;;     data_destroy);
(define ~g_signal_add_emission_hook #f)
(define (g_signal_add_emission_hook
         signal_id
         detail
         hook_func
         hook_data
         data_destroy)
  (unless
    ~g_signal_add_emission_hook
    (set! ~g_signal_add_emission_hook
      (fh-link-proc
        "g_signal_add_emission_hook"
        ffi:unsigned-long
        (list ffi:unsigned-int ffi:unsigned-int '* '* '*))))
  (let ((~signal_id (unwrap~fixed signal_id))
        (~detail (unwrap~fixed detail))
        (~hook_func
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* ffi:unsigned-int '* '*))
           hook_func))
        (~hook_data (unwrap-gpointer hook_data))
        (~data_destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           data_destroy)))
    (~g_signal_add_emission_hook
      ~signal_id
      ~detail
      ~hook_func
      ~hook_data
      ~data_destroy)))
(export g_signal_add_emission_hook)

;; extern void g_signal_remove_emission_hook(guint signal_id, gulong hook_id);
(define ~g_signal_remove_emission_hook #f)
(define (g_signal_remove_emission_hook signal_id hook_id)
  (unless
    ~g_signal_remove_emission_hook
    (set! ~g_signal_remove_emission_hook
      (fh-link-proc
        "g_signal_remove_emission_hook"
        ffi:void
        (list ffi:unsigned-int ffi:unsigned-long))))
  (let ((~signal_id (unwrap~fixed signal_id))
        (~hook_id (unwrap~fixed hook_id)))
    (~g_signal_remove_emission_hook
      ~signal_id
      ~hook_id)))
(export g_signal_remove_emission_hook)

;; extern gboolean g_signal_has_handler_pending(gpointer instance, guint 
;;     signal_id, GQuark detail, gboolean may_be_blocked);
(define ~g_signal_has_handler_pending #f)
(define (g_signal_has_handler_pending
         instance
         signal_id
         detail
         may_be_blocked)
  (unless
    ~g_signal_has_handler_pending
    (set! ~g_signal_has_handler_pending
      (fh-link-proc
        "g_signal_has_handler_pending"
        ffi:int
        (list '*
              ffi:unsigned-int
              ffi:unsigned-int
              ffi:int))))
  (let ((~instance (unwrap-gpointer instance))
        (~signal_id (unwrap~fixed signal_id))
        (~detail (unwrap~fixed detail))
        (~may_be_blocked (unwrap~fixed may_be_blocked)))
    (~g_signal_has_handler_pending
      ~instance
      ~signal_id
      ~detail
      ~may_be_blocked)))
(export g_signal_has_handler_pending)

;; extern gulong g_signal_connect_closure_by_id(gpointer instance, guint 
;;     signal_id, GQuark detail, GClosure *closure, gboolean after);
(define ~g_signal_connect_closure_by_id #f)
(define (g_signal_connect_closure_by_id
         instance
         signal_id
         detail
         closure
         after)
  (unless
    ~g_signal_connect_closure_by_id
    (set! ~g_signal_connect_closure_by_id
      (fh-link-proc
        "g_signal_connect_closure_by_id"
        ffi:unsigned-long
        (list '*
              ffi:unsigned-int
              ffi:unsigned-int
              '*
              ffi:int))))
  (let ((~instance (unwrap-gpointer instance))
        (~signal_id (unwrap~fixed signal_id))
        (~detail (unwrap~fixed detail))
        (~closure (unwrap-GClosure* closure))
        (~after (unwrap~fixed after)))
    (~g_signal_connect_closure_by_id
      ~instance
      ~signal_id
      ~detail
      ~closure
      ~after)))
(export g_signal_connect_closure_by_id)

;; extern gulong g_signal_connect_closure(gpointer instance, const gchar *
;;     detailed_signal, GClosure *closure, gboolean after);
(define ~g_signal_connect_closure #f)
(define (g_signal_connect_closure
         instance
         detailed_signal
         closure
         after)
  (unless
    ~g_signal_connect_closure
    (set! ~g_signal_connect_closure
      (fh-link-proc
        "g_signal_connect_closure"
        ffi:unsigned-long
        (list '* '* '* ffi:int))))
  (let ((~instance (unwrap-gpointer instance))
        (~detailed_signal
          (unwrap~pointer detailed_signal))
        (~closure (unwrap-GClosure* closure))
        (~after (unwrap~fixed after)))
    (~g_signal_connect_closure
      ~instance
      ~detailed_signal
      ~closure
      ~after)))
(export g_signal_connect_closure)

;; extern gulong g_signal_connect_data(gpointer instance, const gchar *
;;     detailed_signal, GCallback c_handler, gpointer data, GClosureNotify 
;;     destroy_data, GConnectFlags connect_flags);
(define ~g_signal_connect_data #f)
(define (g_signal_connect_data
         instance
         detailed_signal
         c_handler
         data
         destroy_data
         connect_flags)
  (unless
    ~g_signal_connect_data
    (set! ~g_signal_connect_data
      (fh-link-proc
        "g_signal_connect_data"
        ffi:unsigned-long
        (list '* '* '* '* '* ffi:int))))
  (let ((~instance (unwrap-gpointer instance))
        (~detailed_signal
          (unwrap~pointer detailed_signal))
        (~c_handler
          ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
           c_handler))
        (~data (unwrap-gpointer data))
        (~destroy_data
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           destroy_data))
        (~connect_flags (unwrap~fixed connect_flags)))
    (~g_signal_connect_data
      ~instance
      ~detailed_signal
      ~c_handler
      ~data
      ~destroy_data
      ~connect_flags)))
(export g_signal_connect_data)

;; extern void g_signal_handler_block(gpointer instance, gulong handler_id);
(define ~g_signal_handler_block #f)
(define (g_signal_handler_block instance handler_id)
  (unless
    ~g_signal_handler_block
    (set! ~g_signal_handler_block
      (fh-link-proc
        "g_signal_handler_block"
        ffi:void
        (list '* ffi:unsigned-long))))
  (let ((~instance (unwrap-gpointer instance))
        (~handler_id (unwrap~fixed handler_id)))
    (~g_signal_handler_block ~instance ~handler_id)))
(export g_signal_handler_block)

;; extern void g_signal_handler_unblock(gpointer instance, gulong handler_id);
(define ~g_signal_handler_unblock #f)
(define (g_signal_handler_unblock instance handler_id)
  (unless
    ~g_signal_handler_unblock
    (set! ~g_signal_handler_unblock
      (fh-link-proc
        "g_signal_handler_unblock"
        ffi:void
        (list '* ffi:unsigned-long))))
  (let ((~instance (unwrap-gpointer instance))
        (~handler_id (unwrap~fixed handler_id)))
    (~g_signal_handler_unblock ~instance ~handler_id)))
(export g_signal_handler_unblock)

;; extern void g_signal_handler_disconnect(gpointer instance, gulong handler_id
;;     );
(define ~g_signal_handler_disconnect #f)
(define (g_signal_handler_disconnect instance handler_id)
  (unless
    ~g_signal_handler_disconnect
    (set! ~g_signal_handler_disconnect
      (fh-link-proc
        "g_signal_handler_disconnect"
        ffi:void
        (list '* ffi:unsigned-long))))
  (let ((~instance (unwrap-gpointer instance))
        (~handler_id (unwrap~fixed handler_id)))
    (~g_signal_handler_disconnect
      ~instance
      ~handler_id)))
(export g_signal_handler_disconnect)

;; extern gboolean g_signal_handler_is_connected(gpointer instance, gulong 
;;     handler_id);
(define ~g_signal_handler_is_connected #f)
(define (g_signal_handler_is_connected
         instance
         handler_id)
  (unless
    ~g_signal_handler_is_connected
    (set! ~g_signal_handler_is_connected
      (fh-link-proc
        "g_signal_handler_is_connected"
        ffi:int
        (list '* ffi:unsigned-long))))
  (let ((~instance (unwrap-gpointer instance))
        (~handler_id (unwrap~fixed handler_id)))
    (~g_signal_handler_is_connected
      ~instance
      ~handler_id)))
(export g_signal_handler_is_connected)

;; extern gulong g_signal_handler_find(gpointer instance, GSignalMatchType mask
;;     , guint signal_id, GQuark detail, GClosure *closure, gpointer func, 
;;     gpointer data);
(define ~g_signal_handler_find #f)
(define (g_signal_handler_find
         instance
         mask
         signal_id
         detail
         closure
         func
         data)
  (unless
    ~g_signal_handler_find
    (set! ~g_signal_handler_find
      (fh-link-proc
        "g_signal_handler_find"
        ffi:unsigned-long
        (list '*
              ffi:int
              ffi:unsigned-int
              ffi:unsigned-int
              '*
              '*
              '*))))
  (let ((~instance (unwrap-gpointer instance))
        (~mask (unwrap~fixed mask))
        (~signal_id (unwrap~fixed signal_id))
        (~detail (unwrap~fixed detail))
        (~closure (unwrap-GClosure* closure))
        (~func (unwrap-gpointer func))
        (~data (unwrap-gpointer data)))
    (~g_signal_handler_find
      ~instance
      ~mask
      ~signal_id
      ~detail
      ~closure
      ~func
      ~data)))
(export g_signal_handler_find)

;; extern guint g_signal_handlers_block_matched(gpointer instance, 
;;     GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure
;;     , gpointer func, gpointer data);
(define ~g_signal_handlers_block_matched #f)
(define (g_signal_handlers_block_matched
         instance
         mask
         signal_id
         detail
         closure
         func
         data)
  (unless
    ~g_signal_handlers_block_matched
    (set! ~g_signal_handlers_block_matched
      (fh-link-proc
        "g_signal_handlers_block_matched"
        ffi:unsigned-int
        (list '*
              ffi:int
              ffi:unsigned-int
              ffi:unsigned-int
              '*
              '*
              '*))))
  (let ((~instance (unwrap-gpointer instance))
        (~mask (unwrap~fixed mask))
        (~signal_id (unwrap~fixed signal_id))
        (~detail (unwrap~fixed detail))
        (~closure (unwrap-GClosure* closure))
        (~func (unwrap-gpointer func))
        (~data (unwrap-gpointer data)))
    (~g_signal_handlers_block_matched
      ~instance
      ~mask
      ~signal_id
      ~detail
      ~closure
      ~func
      ~data)))
(export g_signal_handlers_block_matched)

;; extern guint g_signal_handlers_unblock_matched(gpointer instance, 
;;     GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure
;;     , gpointer func, gpointer data);
(define ~g_signal_handlers_unblock_matched #f)
(define (g_signal_handlers_unblock_matched
         instance
         mask
         signal_id
         detail
         closure
         func
         data)
  (unless
    ~g_signal_handlers_unblock_matched
    (set! ~g_signal_handlers_unblock_matched
      (fh-link-proc
        "g_signal_handlers_unblock_matched"
        ffi:unsigned-int
        (list '*
              ffi:int
              ffi:unsigned-int
              ffi:unsigned-int
              '*
              '*
              '*))))
  (let ((~instance (unwrap-gpointer instance))
        (~mask (unwrap~fixed mask))
        (~signal_id (unwrap~fixed signal_id))
        (~detail (unwrap~fixed detail))
        (~closure (unwrap-GClosure* closure))
        (~func (unwrap-gpointer func))
        (~data (unwrap-gpointer data)))
    (~g_signal_handlers_unblock_matched
      ~instance
      ~mask
      ~signal_id
      ~detail
      ~closure
      ~func
      ~data)))
(export g_signal_handlers_unblock_matched)

;; extern guint g_signal_handlers_disconnect_matched(gpointer instance, 
;;     GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure
;;     , gpointer func, gpointer data);
(define ~g_signal_handlers_disconnect_matched #f)
(define (g_signal_handlers_disconnect_matched
         instance
         mask
         signal_id
         detail
         closure
         func
         data)
  (unless
    ~g_signal_handlers_disconnect_matched
    (set! ~g_signal_handlers_disconnect_matched
      (fh-link-proc
        "g_signal_handlers_disconnect_matched"
        ffi:unsigned-int
        (list '*
              ffi:int
              ffi:unsigned-int
              ffi:unsigned-int
              '*
              '*
              '*))))
  (let ((~instance (unwrap-gpointer instance))
        (~mask (unwrap~fixed mask))
        (~signal_id (unwrap~fixed signal_id))
        (~detail (unwrap~fixed detail))
        (~closure (unwrap-GClosure* closure))
        (~func (unwrap-gpointer func))
        (~data (unwrap-gpointer data)))
    (~g_signal_handlers_disconnect_matched
      ~instance
      ~mask
      ~signal_id
      ~detail
      ~closure
      ~func
      ~data)))
(export g_signal_handlers_disconnect_matched)

;; extern void g_signal_override_class_closure(guint signal_id, GType 
;;     instance_type, GClosure *class_closure);
(define ~g_signal_override_class_closure #f)
(define (g_signal_override_class_closure
         signal_id
         instance_type
         class_closure)
  (unless
    ~g_signal_override_class_closure
    (set! ~g_signal_override_class_closure
      (fh-link-proc
        "g_signal_override_class_closure"
        ffi:void
        (list ffi:unsigned-int ffi:unsigned-long '*))))
  (let ((~signal_id (unwrap~fixed signal_id))
        (~instance_type (unwrap~fixed instance_type))
        (~class_closure (unwrap-GClosure* class_closure)))
    (~g_signal_override_class_closure
      ~signal_id
      ~instance_type
      ~class_closure)))
(export g_signal_override_class_closure)

;; extern void g_signal_override_class_handler(const gchar *signal_name, GType 
;;     instance_type, GCallback class_handler);
(define ~g_signal_override_class_handler #f)
(define (g_signal_override_class_handler
         signal_name
         instance_type
         class_handler)
  (unless
    ~g_signal_override_class_handler
    (set! ~g_signal_override_class_handler
      (fh-link-proc
        "g_signal_override_class_handler"
        ffi:void
        (list '* ffi:unsigned-long '*))))
  (let ((~signal_name (unwrap~pointer signal_name))
        (~instance_type (unwrap~fixed instance_type))
        (~class_handler
          ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
           class_handler)))
    (~g_signal_override_class_handler
      ~signal_name
      ~instance_type
      ~class_handler)))
(export g_signal_override_class_handler)

;; extern void g_signal_chain_from_overridden(const GValue *instance_and_params
;;     , GValue *return_value);
(define ~g_signal_chain_from_overridden #f)
(define (g_signal_chain_from_overridden
         instance_and_params
         return_value)
  (unless
    ~g_signal_chain_from_overridden
    (set! ~g_signal_chain_from_overridden
      (fh-link-proc
        "g_signal_chain_from_overridden"
        ffi:void
        (list '* '*))))
  (let ((~instance_and_params
          (unwrap-GValue* instance_and_params))
        (~return_value (unwrap-GValue* return_value)))
    (~g_signal_chain_from_overridden
      ~instance_and_params
      ~return_value)))
(export g_signal_chain_from_overridden)

;; extern void g_signal_chain_from_overridden_handler(gpointer instance, ...);
;; ... failed.

;; extern gboolean g_signal_accumulator_true_handled(GSignalInvocationHint *
;;     ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy
;;     );
(define ~g_signal_accumulator_true_handled #f)
(define (g_signal_accumulator_true_handled
         ihint
         return_accu
         handler_return
         dummy)
  (unless
    ~g_signal_accumulator_true_handled
    (set! ~g_signal_accumulator_true_handled
      (fh-link-proc
        "g_signal_accumulator_true_handled"
        ffi:int
        (list '* '* '* '*))))
  (let ((~ihint (unwrap-GSignalInvocationHint* ihint))
        (~return_accu (unwrap-GValue* return_accu))
        (~handler_return (unwrap-GValue* handler_return))
        (~dummy (unwrap-gpointer dummy)))
    (~g_signal_accumulator_true_handled
      ~ihint
      ~return_accu
      ~handler_return
      ~dummy)))
(export g_signal_accumulator_true_handled)

;; extern gboolean g_signal_accumulator_first_wins(GSignalInvocationHint *ihint
;;     , GValue *return_accu, const GValue *handler_return, gpointer dummy);
(define ~g_signal_accumulator_first_wins #f)
(define (g_signal_accumulator_first_wins
         ihint
         return_accu
         handler_return
         dummy)
  (unless
    ~g_signal_accumulator_first_wins
    (set! ~g_signal_accumulator_first_wins
      (fh-link-proc
        "g_signal_accumulator_first_wins"
        ffi:int
        (list '* '* '* '*))))
  (let ((~ihint (unwrap-GSignalInvocationHint* ihint))
        (~return_accu (unwrap-GValue* return_accu))
        (~handler_return (unwrap-GValue* handler_return))
        (~dummy (unwrap-gpointer dummy)))
    (~g_signal_accumulator_first_wins
      ~ihint
      ~return_accu
      ~handler_return
      ~dummy)))
(export g_signal_accumulator_first_wins)

;; extern void g_signal_handlers_destroy(gpointer instance);
(define ~g_signal_handlers_destroy #f)
(define (g_signal_handlers_destroy instance)
  (unless
    ~g_signal_handlers_destroy
    (set! ~g_signal_handlers_destroy
      (fh-link-proc
        "g_signal_handlers_destroy"
        ffi:void
        (list '*))))
  (let ((~instance (unwrap-gpointer instance)))
    (~g_signal_handlers_destroy ~instance)))
(export g_signal_handlers_destroy)

;; void _g_signals_destroy(GType itype);
(define ~_g_signals_destroy #f)
(define (_g_signals_destroy itype)
  (unless
    ~_g_signals_destroy
    (set! ~_g_signals_destroy
      (fh-link-proc
        "_g_signals_destroy"
        ffi:void
        (list ffi:unsigned-long))))
  (let ((~itype (unwrap~fixed itype)))
    (~_g_signals_destroy ~itype)))
(export _g_signals_destroy)

;; extern GType g_date_get_type(void);
(define ~g_date_get_type #f)
(define (g_date_get_type)
  (unless
    ~g_date_get_type
    (set! ~g_date_get_type
      (fh-link-proc
        "g_date_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_date_get_type)))
(export g_date_get_type)

;; extern GType g_strv_get_type(void);
(define ~g_strv_get_type #f)
(define (g_strv_get_type)
  (unless
    ~g_strv_get_type
    (set! ~g_strv_get_type
      (fh-link-proc
        "g_strv_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_strv_get_type)))
(export g_strv_get_type)

;; extern GType g_gstring_get_type(void);
(define ~g_gstring_get_type #f)
(define (g_gstring_get_type)
  (unless
    ~g_gstring_get_type
    (set! ~g_gstring_get_type
      (fh-link-proc
        "g_gstring_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_gstring_get_type)))
(export g_gstring_get_type)

;; extern GType g_hash_table_get_type(void);
(define ~g_hash_table_get_type #f)
(define (g_hash_table_get_type)
  (unless
    ~g_hash_table_get_type
    (set! ~g_hash_table_get_type
      (fh-link-proc
        "g_hash_table_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_hash_table_get_type)))
(export g_hash_table_get_type)

;; extern GType g_array_get_type(void);
(define ~g_array_get_type #f)
(define (g_array_get_type)
  (unless
    ~g_array_get_type
    (set! ~g_array_get_type
      (fh-link-proc
        "g_array_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_array_get_type)))
(export g_array_get_type)

;; extern GType g_byte_array_get_type(void);
(define ~g_byte_array_get_type #f)
(define (g_byte_array_get_type)
  (unless
    ~g_byte_array_get_type
    (set! ~g_byte_array_get_type
      (fh-link-proc
        "g_byte_array_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_byte_array_get_type)))
(export g_byte_array_get_type)

;; extern GType g_ptr_array_get_type(void);
(define ~g_ptr_array_get_type #f)
(define (g_ptr_array_get_type)
  (unless
    ~g_ptr_array_get_type
    (set! ~g_ptr_array_get_type
      (fh-link-proc
        "g_ptr_array_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_ptr_array_get_type)))
(export g_ptr_array_get_type)

;; extern GType g_bytes_get_type(void);
(define ~g_bytes_get_type #f)
(define (g_bytes_get_type)
  (unless
    ~g_bytes_get_type
    (set! ~g_bytes_get_type
      (fh-link-proc
        "g_bytes_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_bytes_get_type)))
(export g_bytes_get_type)

;; extern GType g_variant_type_get_gtype(void);
(define ~g_variant_type_get_gtype #f)
(define (g_variant_type_get_gtype)
  (unless
    ~g_variant_type_get_gtype
    (set! ~g_variant_type_get_gtype
      (fh-link-proc
        "g_variant_type_get_gtype"
        ffi:unsigned-long
        (list))))
  (let () (~g_variant_type_get_gtype)))
(export g_variant_type_get_gtype)

;; extern GType g_regex_get_type(void);
(define ~g_regex_get_type #f)
(define (g_regex_get_type)
  (unless
    ~g_regex_get_type
    (set! ~g_regex_get_type
      (fh-link-proc
        "g_regex_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_regex_get_type)))
(export g_regex_get_type)

;; extern GType g_match_info_get_type(void);
(define ~g_match_info_get_type #f)
(define (g_match_info_get_type)
  (unless
    ~g_match_info_get_type
    (set! ~g_match_info_get_type
      (fh-link-proc
        "g_match_info_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_match_info_get_type)))
(export g_match_info_get_type)

;; extern GType g_error_get_type(void);
(define ~g_error_get_type #f)
(define (g_error_get_type)
  (unless
    ~g_error_get_type
    (set! ~g_error_get_type
      (fh-link-proc
        "g_error_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_error_get_type)))
(export g_error_get_type)

;; extern GType g_date_time_get_type(void);
(define ~g_date_time_get_type #f)
(define (g_date_time_get_type)
  (unless
    ~g_date_time_get_type
    (set! ~g_date_time_get_type
      (fh-link-proc
        "g_date_time_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_date_time_get_type)))
(export g_date_time_get_type)

;; extern GType g_time_zone_get_type(void);
(define ~g_time_zone_get_type #f)
(define (g_time_zone_get_type)
  (unless
    ~g_time_zone_get_type
    (set! ~g_time_zone_get_type
      (fh-link-proc
        "g_time_zone_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_time_zone_get_type)))
(export g_time_zone_get_type)

;; extern GType g_io_channel_get_type(void);
(define ~g_io_channel_get_type #f)
(define (g_io_channel_get_type)
  (unless
    ~g_io_channel_get_type
    (set! ~g_io_channel_get_type
      (fh-link-proc
        "g_io_channel_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_io_channel_get_type)))
(export g_io_channel_get_type)

;; extern GType g_io_condition_get_type(void);
(define ~g_io_condition_get_type #f)
(define (g_io_condition_get_type)
  (unless
    ~g_io_condition_get_type
    (set! ~g_io_condition_get_type
      (fh-link-proc
        "g_io_condition_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_io_condition_get_type)))
(export g_io_condition_get_type)

;; extern GType g_variant_builder_get_type(void);
(define ~g_variant_builder_get_type #f)
(define (g_variant_builder_get_type)
  (unless
    ~g_variant_builder_get_type
    (set! ~g_variant_builder_get_type
      (fh-link-proc
        "g_variant_builder_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_variant_builder_get_type)))
(export g_variant_builder_get_type)

;; extern GType g_variant_dict_get_type(void);
(define ~g_variant_dict_get_type #f)
(define (g_variant_dict_get_type)
  (unless
    ~g_variant_dict_get_type
    (set! ~g_variant_dict_get_type
      (fh-link-proc
        "g_variant_dict_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_variant_dict_get_type)))
(export g_variant_dict_get_type)

;; extern GType g_key_file_get_type(void);
(define ~g_key_file_get_type #f)
(define (g_key_file_get_type)
  (unless
    ~g_key_file_get_type
    (set! ~g_key_file_get_type
      (fh-link-proc
        "g_key_file_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_key_file_get_type)))
(export g_key_file_get_type)

;; extern GType g_main_loop_get_type(void);
(define ~g_main_loop_get_type #f)
(define (g_main_loop_get_type)
  (unless
    ~g_main_loop_get_type
    (set! ~g_main_loop_get_type
      (fh-link-proc
        "g_main_loop_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_main_loop_get_type)))
(export g_main_loop_get_type)

;; extern GType g_main_context_get_type(void);
(define ~g_main_context_get_type #f)
(define (g_main_context_get_type)
  (unless
    ~g_main_context_get_type
    (set! ~g_main_context_get_type
      (fh-link-proc
        "g_main_context_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_main_context_get_type)))
(export g_main_context_get_type)

;; extern GType g_source_get_type(void);
(define ~g_source_get_type #f)
(define (g_source_get_type)
  (unless
    ~g_source_get_type
    (set! ~g_source_get_type
      (fh-link-proc
        "g_source_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_source_get_type)))
(export g_source_get_type)

;; extern GType g_pollfd_get_type(void);
(define ~g_pollfd_get_type #f)
(define (g_pollfd_get_type)
  (unless
    ~g_pollfd_get_type
    (set! ~g_pollfd_get_type
      (fh-link-proc
        "g_pollfd_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_pollfd_get_type)))
(export g_pollfd_get_type)

;; extern GType g_thread_get_type(void);
(define ~g_thread_get_type #f)
(define (g_thread_get_type)
  (unless
    ~g_thread_get_type
    (set! ~g_thread_get_type
      (fh-link-proc
        "g_thread_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_thread_get_type)))
(export g_thread_get_type)

;; extern GType g_checksum_get_type(void);
(define ~g_checksum_get_type #f)
(define (g_checksum_get_type)
  (unless
    ~g_checksum_get_type
    (set! ~g_checksum_get_type
      (fh-link-proc
        "g_checksum_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_checksum_get_type)))
(export g_checksum_get_type)

;; extern GType g_markup_parse_context_get_type(void);
(define ~g_markup_parse_context_get_type #f)
(define (g_markup_parse_context_get_type)
  (unless
    ~g_markup_parse_context_get_type
    (set! ~g_markup_parse_context_get_type
      (fh-link-proc
        "g_markup_parse_context_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_markup_parse_context_get_type)))
(export g_markup_parse_context_get_type)

;; extern GType g_mapped_file_get_type(void);
(define ~g_mapped_file_get_type #f)
(define (g_mapped_file_get_type)
  (unless
    ~g_mapped_file_get_type
    (set! ~g_mapped_file_get_type
      (fh-link-proc
        "g_mapped_file_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_mapped_file_get_type)))
(export g_mapped_file_get_type)

;; extern GType g_option_group_get_type(void);
(define ~g_option_group_get_type #f)
(define (g_option_group_get_type)
  (unless
    ~g_option_group_get_type
    (set! ~g_option_group_get_type
      (fh-link-proc
        "g_option_group_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_option_group_get_type)))
(export g_option_group_get_type)

;; extern GType g_variant_get_gtype(void);
(define ~g_variant_get_gtype #f)
(define (g_variant_get_gtype)
  (unless
    ~g_variant_get_gtype
    (set! ~g_variant_get_gtype
      (fh-link-proc
        "g_variant_get_gtype"
        ffi:unsigned-long
        (list))))
  (let () (~g_variant_get_gtype)))
(export g_variant_get_gtype)

;; typedef gpointer (*GBoxedCopyFunc)(gpointer boxed);
(define-fh-function/p GBoxedCopyFunc
  (quote *) (list (quote *)))

;; typedef void (*GBoxedFreeFunc)(gpointer boxed);
(define-fh-function/p GBoxedFreeFunc
  ffi:void (list (quote *)))

;; extern gpointer g_boxed_copy(GType boxed_type, gconstpointer src_boxed);
(define ~g_boxed_copy #f)
(define (g_boxed_copy boxed_type src_boxed)
  (unless
    ~g_boxed_copy
    (set! ~g_boxed_copy
      (fh-link-proc
        "g_boxed_copy"
        '*
        (list ffi:unsigned-long '*))))
  (let ((~boxed_type (unwrap~fixed boxed_type))
        (~src_boxed (unwrap-gconstpointer src_boxed)))
    (wrap-gpointer
      (~g_boxed_copy ~boxed_type ~src_boxed))))
(export g_boxed_copy)

;; extern void g_boxed_free(GType boxed_type, gpointer boxed);
(define ~g_boxed_free #f)
(define (g_boxed_free boxed_type boxed)
  (unless
    ~g_boxed_free
    (set! ~g_boxed_free
      (fh-link-proc
        "g_boxed_free"
        ffi:void
        (list ffi:unsigned-long '*))))
  (let ((~boxed_type (unwrap~fixed boxed_type))
        (~boxed (unwrap-gpointer boxed)))
    (~g_boxed_free ~boxed_type ~boxed)))
(export g_boxed_free)

;; extern void g_value_set_boxed(GValue *value, gconstpointer v_boxed);
(define ~g_value_set_boxed #f)
(define (g_value_set_boxed value v_boxed)
  (unless
    ~g_value_set_boxed
    (set! ~g_value_set_boxed
      (fh-link-proc
        "g_value_set_boxed"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_boxed (unwrap-gconstpointer v_boxed)))
    (~g_value_set_boxed ~value ~v_boxed)))
(export g_value_set_boxed)

;; extern void g_value_set_static_boxed(GValue *value, gconstpointer v_boxed);
(define ~g_value_set_static_boxed #f)
(define (g_value_set_static_boxed value v_boxed)
  (unless
    ~g_value_set_static_boxed
    (set! ~g_value_set_static_boxed
      (fh-link-proc
        "g_value_set_static_boxed"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_boxed (unwrap-gconstpointer v_boxed)))
    (~g_value_set_static_boxed ~value ~v_boxed)))
(export g_value_set_static_boxed)

;; extern void g_value_take_boxed(GValue *value, gconstpointer v_boxed);
(define ~g_value_take_boxed #f)
(define (g_value_take_boxed value v_boxed)
  (unless
    ~g_value_take_boxed
    (set! ~g_value_take_boxed
      (fh-link-proc
        "g_value_take_boxed"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_boxed (unwrap-gconstpointer v_boxed)))
    (~g_value_take_boxed ~value ~v_boxed)))
(export g_value_take_boxed)

;; extern void g_value_set_boxed_take_ownership(GValue *value, gconstpointer 
;;     v_boxed);
(define ~g_value_set_boxed_take_ownership #f)
(define (g_value_set_boxed_take_ownership value v_boxed)
  (unless
    ~g_value_set_boxed_take_ownership
    (set! ~g_value_set_boxed_take_ownership
      (fh-link-proc
        "g_value_set_boxed_take_ownership"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_boxed (unwrap-gconstpointer v_boxed)))
    (~g_value_set_boxed_take_ownership
      ~value
      ~v_boxed)))
(export g_value_set_boxed_take_ownership)

;; extern gpointer g_value_get_boxed(const GValue *value);
(define ~g_value_get_boxed #f)
(define (g_value_get_boxed value)
  (unless
    ~g_value_get_boxed
    (set! ~g_value_get_boxed
      (fh-link-proc "g_value_get_boxed" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (wrap-gpointer (~g_value_get_boxed ~value))))
(export g_value_get_boxed)

;; extern gpointer g_value_dup_boxed(const GValue *value);
(define ~g_value_dup_boxed #f)
(define (g_value_dup_boxed value)
  (unless
    ~g_value_dup_boxed
    (set! ~g_value_dup_boxed
      (fh-link-proc "g_value_dup_boxed" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (wrap-gpointer (~g_value_dup_boxed ~value))))
(export g_value_dup_boxed)

;; extern GType g_boxed_type_register_static(const gchar *name, GBoxedCopyFunc 
;;     boxed_copy, GBoxedFreeFunc boxed_free);
(define ~g_boxed_type_register_static #f)
(define (g_boxed_type_register_static
         name
         boxed_copy
         boxed_free)
  (unless
    ~g_boxed_type_register_static
    (set! ~g_boxed_type_register_static
      (fh-link-proc
        "g_boxed_type_register_static"
        ffi:unsigned-long
        (list '* '* '*))))
  (let ((~name (unwrap~pointer name))
        (~boxed_copy
          ((make-ftn-arg-unwrapper '* (list '*))
           boxed_copy))
        (~boxed_free
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           boxed_free)))
    (~g_boxed_type_register_static
      ~name
      ~boxed_copy
      ~boxed_free)))
(export g_boxed_type_register_static)

;; extern GType g_closure_get_type(void);
(define ~g_closure_get_type #f)
(define (g_closure_get_type)
  (unless
    ~g_closure_get_type
    (set! ~g_closure_get_type
      (fh-link-proc
        "g_closure_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_closure_get_type)))
(export g_closure_get_type)

;; extern GType g_value_get_type(void);
(define ~g_value_get_type #f)
(define (g_value_get_type)
  (unless
    ~g_value_get_type
    (set! ~g_value_get_type
      (fh-link-proc
        "g_value_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_value_get_type)))
(export g_value_get_type)

;; typedef struct _GObject GObject;
(define GObject-desc void)
(export GObject-desc)
(define GObject*-desc (bs:pointer (delay GObject-desc)))
(export GObject*-desc)
(define-fh-pointer-type GObject* GObject*-desc)

;; typedef struct _GObjectClass GObjectClass;
(define GObjectClass-desc void)
(export GObjectClass-desc)
(define GObjectClass*-desc (bs:pointer (delay GObjectClass-desc)))
(export GObjectClass*-desc)
(define-fh-pointer-type GObjectClass* GObjectClass*-desc)

;; typedef struct _GObject GInitiallyUnowned;
(define GInitiallyUnowned-desc void)
(export GInitiallyUnowned-desc)
(define GInitiallyUnowned*-desc (bs:pointer (delay GInitiallyUnowned-desc)))
(export GInitiallyUnowned*-desc)
(define-fh-pointer-type GInitiallyUnowned* GInitiallyUnowned*-desc)

;; typedef struct _GObjectClass GInitiallyUnownedClass;
(define GInitiallyUnownedClass-desc void)
(export GInitiallyUnownedClass-desc)
(define GInitiallyUnownedClass*-desc (bs:pointer (delay GInitiallyUnownedClass-desc)))
(export GInitiallyUnownedClass*-desc)
(define-fh-pointer-type GInitiallyUnownedClass* GInitiallyUnownedClass*-desc)

;; typedef struct _GObjectConstructParam GObjectConstructParam;
(define GObjectConstructParam-desc void)
(export GObjectConstructParam-desc)
(define GObjectConstructParam*-desc (bs:pointer (delay GObjectConstructParam-desc)))
(export GObjectConstructParam*-desc)
(define-fh-pointer-type GObjectConstructParam* GObjectConstructParam*-desc)

;; typedef void (*GObjectGetPropertyFunc)(GObject *object, guint property_id, 
;;     GValue *value, GParamSpec *pspec);
(define-fh-function/p GObjectGetPropertyFunc
  ffi:void (list (quote *) ffi:unsigned-int (quote *) (quote *)))

;; typedef void (*GObjectSetPropertyFunc)(GObject *object, guint property_id, 
;;     const GValue *value, GParamSpec *pspec);
(define-fh-function/p GObjectSetPropertyFunc
  ffi:void (list (quote *) ffi:unsigned-int (quote *) (quote *)))

;; typedef void (*GObjectFinalizeFunc)(GObject *object);
(define-fh-function/p GObjectFinalizeFunc
  ffi:void (list (quote *)))

;; typedef void (*GWeakNotify)(gpointer data, GObject *where_the_object_was);
(define-fh-function/p GWeakNotify
  ffi:void (list (quote *) (quote *)))

;; struct _GObject {
;;   GTypeInstance g_type_instance;
;;   /*< private >*/
;;   volatile guint ref_count;
;;   GData *qdata;
;; };
(define struct-_GObject-desc
  (bs:struct
    (list `(g_type_instance ,GTypeInstance-desc)
          `(ref_count ,unsigned-int)
          `(qdata ,(bs:pointer (delay GData*-desc))))))
(export struct-_GObject-desc)
(define-fh-compound-type/p struct-_GObject struct-_GObject-desc)
(set! GInitiallyUnowned-desc struct-_GObject-desc)
(define-fh-compound-type GInitiallyUnowned GInitiallyUnowned-desc)

;; struct _GObjectClass {
;;   GTypeClass g_type_class;
;;   /*< private >*/
;;   GSList *construct_properties;
;;   /*< public >*/
;;   /* seldom overidden */
;;   GObject *(*constructor)(GType type, guint n_construct_properties, 
;;       GObjectConstructParam *construct_properties);
;;   /* overridable methods */
;;   void (*set_property)(GObject *object, guint property_id, const GValue *
;;       value, GParamSpec *pspec);
;;   void (*get_property)(GObject *object, guint property_id, GValue *value, 
;;       GParamSpec *pspec);
;;   void (*dispose)(GObject *object);
;;   void (*finalize)(GObject *object);
;;   /* seldom overidden */
;;   void (*dispatch_properties_changed)(GObject *object, guint n_pspecs, 
;;       GParamSpec **pspecs);
;;   /* signals */
;;   void (*notify)(GObject *object, GParamSpec *pspec);
;;   /* called when done constructing */
;;   void (*constructed)(GObject *object);
;;   /*< private >*/
;;   gsize flags;
;;   /* padding */
;;   gpointer pdummy[6];
;; };
(define struct-_GObjectClass-desc
  (bs:struct
    (list `(g_type_class ,GTypeClass-desc)
          `(construct_properties
             ,(bs:pointer (delay GSList*-desc)))
          `(constructor ,(bs:pointer void))
          `(set_property ,(bs:pointer void))
          `(get_property ,(bs:pointer void))
          `(dispose ,(bs:pointer void))
          `(finalize ,(bs:pointer void))
          `(dispatch_properties_changed ,(bs:pointer void))
          `(notify ,(bs:pointer void))
          `(constructed ,(bs:pointer void))
          `(flags ,unsigned-long)
          `(pdummy ,(bs:vector 6 gpointer-desc)))))
(export struct-_GObjectClass-desc)
(define-fh-compound-type/p struct-_GObjectClass struct-_GObjectClass-desc)
(set! GInitiallyUnownedClass-desc struct-_GObjectClass-desc)
(define-fh-compound-type GInitiallyUnownedClass GInitiallyUnownedClass-desc)

;; struct _GObjectConstructParam {
;;   GParamSpec *pspec;
;;   GValue *value;
;; };
(define struct-_GObjectConstructParam-desc
  (bs:struct
    (list `(pspec ,(bs:pointer (delay GParamSpec*-desc)))
          `(value ,(bs:pointer (delay GValue*-desc))))))
(export struct-_GObjectConstructParam-desc)
(define-fh-compound-type/p struct-_GObjectConstructParam struct-_GObjectConstructParam-desc)
(set! GObjectConstructParam-desc struct-_GObjectConstructParam-desc)
(define-fh-compound-type GObjectConstructParam GObjectConstructParam-desc)

;; extern GType g_initially_unowned_get_type(void);
(define ~g_initially_unowned_get_type #f)
(define (g_initially_unowned_get_type)
  (unless
    ~g_initially_unowned_get_type
    (set! ~g_initially_unowned_get_type
      (fh-link-proc
        "g_initially_unowned_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_initially_unowned_get_type)))
(export g_initially_unowned_get_type)

;; extern void g_object_class_install_property(GObjectClass *oclass, guint 
;;     property_id, GParamSpec *pspec);
(define ~g_object_class_install_property #f)
(define (g_object_class_install_property
         oclass
         property_id
         pspec)
  (unless
    ~g_object_class_install_property
    (set! ~g_object_class_install_property
      (fh-link-proc
        "g_object_class_install_property"
        ffi:void
        (list '* ffi:unsigned-int '*))))
  (let ((~oclass (unwrap-GObjectClass* oclass))
        (~property_id (unwrap~fixed property_id))
        (~pspec (unwrap-GParamSpec* pspec)))
    (~g_object_class_install_property
      ~oclass
      ~property_id
      ~pspec)))
(export g_object_class_install_property)

;; extern GParamSpec *g_object_class_find_property(GObjectClass *oclass, const 
;;     gchar *property_name);
(define ~g_object_class_find_property #f)
(define (g_object_class_find_property
         oclass
         property_name)
  (unless
    ~g_object_class_find_property
    (set! ~g_object_class_find_property
      (fh-link-proc
        "g_object_class_find_property"
        '*
        (list '* '*))))
  (let ((~oclass (unwrap-GObjectClass* oclass))
        (~property_name (unwrap~pointer property_name)))
    (wrap-GParamSpec*
      (~g_object_class_find_property
        ~oclass
        ~property_name))))
(export g_object_class_find_property)

;; extern GParamSpec **g_object_class_list_properties(GObjectClass *oclass, 
;;     guint *n_properties);
(define ~g_object_class_list_properties #f)
(define (g_object_class_list_properties
         oclass
         n_properties)
  (unless
    ~g_object_class_list_properties
    (set! ~g_object_class_list_properties
      (fh-link-proc
        "g_object_class_list_properties"
        '*
        (list '* '*))))
  (let ((~oclass (unwrap-GObjectClass* oclass))
        (~n_properties (unwrap~pointer n_properties)))
    (wrap-GParamSpec*
      (~g_object_class_list_properties
        ~oclass
        ~n_properties))))
(export g_object_class_list_properties)

;; extern void g_object_class_override_property(GObjectClass *oclass, guint 
;;     property_id, const gchar *name);
(define ~g_object_class_override_property #f)
(define (g_object_class_override_property
         oclass
         property_id
         name)
  (unless
    ~g_object_class_override_property
    (set! ~g_object_class_override_property
      (fh-link-proc
        "g_object_class_override_property"
        ffi:void
        (list '* ffi:unsigned-int '*))))
  (let ((~oclass (unwrap-GObjectClass* oclass))
        (~property_id (unwrap~fixed property_id))
        (~name (unwrap~pointer name)))
    (~g_object_class_override_property
      ~oclass
      ~property_id
      ~name)))
(export g_object_class_override_property)

;; extern void g_object_class_install_properties(GObjectClass *oclass, guint 
;;     n_pspecs, GParamSpec **pspecs);
(define ~g_object_class_install_properties #f)
(define (g_object_class_install_properties
         oclass
         n_pspecs
         pspecs)
  (unless
    ~g_object_class_install_properties
    (set! ~g_object_class_install_properties
      (fh-link-proc
        "g_object_class_install_properties"
        ffi:void
        (list '* ffi:unsigned-int '*))))
  (let ((~oclass (unwrap-GObjectClass* oclass))
        (~n_pspecs (unwrap~fixed n_pspecs))
        (~pspecs (unwrap~pointer pspecs)))
    (~g_object_class_install_properties
      ~oclass
      ~n_pspecs
      ~pspecs)))
(export g_object_class_install_properties)

;; extern void g_object_interface_install_property(gpointer g_iface, GParamSpec
;;      *pspec);
(define ~g_object_interface_install_property #f)
(define (g_object_interface_install_property
         g_iface
         pspec)
  (unless
    ~g_object_interface_install_property
    (set! ~g_object_interface_install_property
      (fh-link-proc
        "g_object_interface_install_property"
        ffi:void
        (list '* '*))))
  (let ((~g_iface (unwrap-gpointer g_iface))
        (~pspec (unwrap-GParamSpec* pspec)))
    (~g_object_interface_install_property
      ~g_iface
      ~pspec)))
(export g_object_interface_install_property)

;; extern GParamSpec *g_object_interface_find_property(gpointer g_iface, const 
;;     gchar *property_name);
(define ~g_object_interface_find_property #f)
(define (g_object_interface_find_property
         g_iface
         property_name)
  (unless
    ~g_object_interface_find_property
    (set! ~g_object_interface_find_property
      (fh-link-proc
        "g_object_interface_find_property"
        '*
        (list '* '*))))
  (let ((~g_iface (unwrap-gpointer g_iface))
        (~property_name (unwrap~pointer property_name)))
    (wrap-GParamSpec*
      (~g_object_interface_find_property
        ~g_iface
        ~property_name))))
(export g_object_interface_find_property)

;; extern GParamSpec **g_object_interface_list_properties(gpointer g_iface, 
;;     guint *n_properties_p);
(define ~g_object_interface_list_properties #f)
(define (g_object_interface_list_properties
         g_iface
         n_properties_p)
  (unless
    ~g_object_interface_list_properties
    (set! ~g_object_interface_list_properties
      (fh-link-proc
        "g_object_interface_list_properties"
        '*
        (list '* '*))))
  (let ((~g_iface (unwrap-gpointer g_iface))
        (~n_properties_p (unwrap~pointer n_properties_p)))
    (wrap-GParamSpec*
      (~g_object_interface_list_properties
        ~g_iface
        ~n_properties_p))))
(export g_object_interface_list_properties)

;; extern GType g_object_get_type(void);
(define ~g_object_get_type #f)
(define (g_object_get_type)
  (unless
    ~g_object_get_type
    (set! ~g_object_get_type
      (fh-link-proc
        "g_object_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_object_get_type)))
(export g_object_get_type)

;; extern gpointer g_object_new(GType object_type, const gchar *
;;     first_property_name, ...);
;; ... failed.

;; extern gpointer g_object_newv(GType object_type, guint n_parameters, 
;;     GParameter *parameters);
(define ~g_object_newv #f)
(define (g_object_newv
         object_type
         n_parameters
         parameters)
  (unless
    ~g_object_newv
    (set! ~g_object_newv
      (fh-link-proc
        "g_object_newv"
        '*
        (list ffi:unsigned-long ffi:unsigned-int '*))))
  (let ((~object_type (unwrap~fixed object_type))
        (~n_parameters (unwrap~fixed n_parameters))
        (~parameters (unwrap-GParameter* parameters)))
    (wrap-gpointer
      (~g_object_newv
        ~object_type
        ~n_parameters
        ~parameters))))
(export g_object_newv)

;; extern GObject *g_object_new_valist(GType object_type, const gchar *
;;     first_property_name, va_list var_args);
(define ~g_object_new_valist #f)
(define (g_object_new_valist
         object_type
         first_property_name
         var_args)
  (unless
    ~g_object_new_valist
    (set! ~g_object_new_valist
      (fh-link-proc
        "g_object_new_valist"
        '*
        (list ffi:unsigned-long '* '*))))
  (let ((~object_type (unwrap~fixed object_type))
        (~first_property_name
          (unwrap~pointer first_property_name))
        (~var_args (unwrap~pointer var_args)))
    (wrap-GObject*
      (~g_object_new_valist
        ~object_type
        ~first_property_name
        ~var_args))))
(export g_object_new_valist)

;; extern void g_object_set(gpointer object, const gchar *first_property_name, 
;;     ...);
;; ... failed.

;; extern void g_object_get(gpointer object, const gchar *first_property_name, 
;;     ...);
;; ... failed.

;; extern gpointer g_object_connect(gpointer object, const gchar *signal_spec, 
;;     ...);
;; ... failed.

;; extern void g_object_disconnect(gpointer object, const gchar *signal_spec, 
;;     ...);
;; ... failed.

;; extern void g_object_set_valist(GObject *object, const gchar *
;;     first_property_name, va_list var_args);
(define ~g_object_set_valist #f)
(define (g_object_set_valist
         object
         first_property_name
         var_args)
  (unless
    ~g_object_set_valist
    (set! ~g_object_set_valist
      (fh-link-proc
        "g_object_set_valist"
        ffi:void
        (list '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~first_property_name
          (unwrap~pointer first_property_name))
        (~var_args (unwrap~pointer var_args)))
    (~g_object_set_valist
      ~object
      ~first_property_name
      ~var_args)))
(export g_object_set_valist)

;; extern void g_object_get_valist(GObject *object, const gchar *
;;     first_property_name, va_list var_args);
(define ~g_object_get_valist #f)
(define (g_object_get_valist
         object
         first_property_name
         var_args)
  (unless
    ~g_object_get_valist
    (set! ~g_object_get_valist
      (fh-link-proc
        "g_object_get_valist"
        ffi:void
        (list '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~first_property_name
          (unwrap~pointer first_property_name))
        (~var_args (unwrap~pointer var_args)))
    (~g_object_get_valist
      ~object
      ~first_property_name
      ~var_args)))
(export g_object_get_valist)

;; extern void g_object_set_property(GObject *object, const gchar *
;;     property_name, const GValue *value);
(define ~g_object_set_property #f)
(define (g_object_set_property
         object
         property_name
         value)
  (unless
    ~g_object_set_property
    (set! ~g_object_set_property
      (fh-link-proc
        "g_object_set_property"
        ffi:void
        (list '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~property_name (unwrap~pointer property_name))
        (~value (unwrap-GValue* value)))
    (~g_object_set_property
      ~object
      ~property_name
      ~value)))
(export g_object_set_property)

;; extern void g_object_get_property(GObject *object, const gchar *
;;     property_name, GValue *value);
(define ~g_object_get_property #f)
(define (g_object_get_property
         object
         property_name
         value)
  (unless
    ~g_object_get_property
    (set! ~g_object_get_property
      (fh-link-proc
        "g_object_get_property"
        ffi:void
        (list '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~property_name (unwrap~pointer property_name))
        (~value (unwrap-GValue* value)))
    (~g_object_get_property
      ~object
      ~property_name
      ~value)))
(export g_object_get_property)

;; extern void g_object_freeze_notify(GObject *object);
(define ~g_object_freeze_notify #f)
(define (g_object_freeze_notify object)
  (unless
    ~g_object_freeze_notify
    (set! ~g_object_freeze_notify
      (fh-link-proc
        "g_object_freeze_notify"
        ffi:void
        (list '*))))
  (let ((~object (unwrap-GObject* object)))
    (~g_object_freeze_notify ~object)))
(export g_object_freeze_notify)

;; extern void g_object_notify(GObject *object, const gchar *property_name);
(define ~g_object_notify #f)
(define (g_object_notify object property_name)
  (unless
    ~g_object_notify
    (set! ~g_object_notify
      (fh-link-proc
        "g_object_notify"
        ffi:void
        (list '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~property_name (unwrap~pointer property_name)))
    (~g_object_notify ~object ~property_name)))
(export g_object_notify)

;; extern void g_object_notify_by_pspec(GObject *object, GParamSpec *pspec);
(define ~g_object_notify_by_pspec #f)
(define (g_object_notify_by_pspec object pspec)
  (unless
    ~g_object_notify_by_pspec
    (set! ~g_object_notify_by_pspec
      (fh-link-proc
        "g_object_notify_by_pspec"
        ffi:void
        (list '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~pspec (unwrap-GParamSpec* pspec)))
    (~g_object_notify_by_pspec ~object ~pspec)))
(export g_object_notify_by_pspec)

;; extern void g_object_thaw_notify(GObject *object);
(define ~g_object_thaw_notify #f)
(define (g_object_thaw_notify object)
  (unless
    ~g_object_thaw_notify
    (set! ~g_object_thaw_notify
      (fh-link-proc
        "g_object_thaw_notify"
        ffi:void
        (list '*))))
  (let ((~object (unwrap-GObject* object)))
    (~g_object_thaw_notify ~object)))
(export g_object_thaw_notify)

;; extern gboolean g_object_is_floating(gpointer object);
(define ~g_object_is_floating #f)
(define (g_object_is_floating object)
  (unless
    ~g_object_is_floating
    (set! ~g_object_is_floating
      (fh-link-proc
        "g_object_is_floating"
        ffi:int
        (list '*))))
  (let ((~object (unwrap-gpointer object)))
    (~g_object_is_floating ~object)))
(export g_object_is_floating)

;; extern gpointer g_object_ref_sink(gpointer object);
(define ~g_object_ref_sink #f)
(define (g_object_ref_sink object)
  (unless
    ~g_object_ref_sink
    (set! ~g_object_ref_sink
      (fh-link-proc "g_object_ref_sink" '* (list '*))))
  (let ((~object (unwrap-gpointer object)))
    (wrap-gpointer (~g_object_ref_sink ~object))))
(export g_object_ref_sink)

;; extern gpointer g_object_ref(gpointer object);
(define ~g_object_ref #f)
(define (g_object_ref object)
  (unless
    ~g_object_ref
    (set! ~g_object_ref
      (fh-link-proc "g_object_ref" '* (list '*))))
  (let ((~object (unwrap-gpointer object)))
    (wrap-gpointer (~g_object_ref ~object))))
(export g_object_ref)

;; extern void g_object_unref(gpointer object);
(define ~g_object_unref #f)
(define (g_object_unref object)
  (unless
    ~g_object_unref
    (set! ~g_object_unref
      (fh-link-proc
        "g_object_unref"
        ffi:void
        (list '*))))
  (let ((~object (unwrap-gpointer object)))
    (~g_object_unref ~object)))
(export g_object_unref)

;; extern void g_object_weak_ref(GObject *object, GWeakNotify notify, gpointer 
;;     data);
(define ~g_object_weak_ref #f)
(define (g_object_weak_ref object notify data)
  (unless
    ~g_object_weak_ref
    (set! ~g_object_weak_ref
      (fh-link-proc
        "g_object_weak_ref"
        ffi:void
        (list '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~notify
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           notify))
        (~data (unwrap-gpointer data)))
    (~g_object_weak_ref ~object ~notify ~data)))
(export g_object_weak_ref)

;; extern void g_object_weak_unref(GObject *object, GWeakNotify notify, 
;;     gpointer data);
(define ~g_object_weak_unref #f)
(define (g_object_weak_unref object notify data)
  (unless
    ~g_object_weak_unref
    (set! ~g_object_weak_unref
      (fh-link-proc
        "g_object_weak_unref"
        ffi:void
        (list '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~notify
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           notify))
        (~data (unwrap-gpointer data)))
    (~g_object_weak_unref ~object ~notify ~data)))
(export g_object_weak_unref)

;; extern void g_object_add_weak_pointer(GObject *object, gpointer *
;;     weak_pointer_location);
(define ~g_object_add_weak_pointer #f)
(define (g_object_add_weak_pointer
         object
         weak_pointer_location)
  (unless
    ~g_object_add_weak_pointer
    (set! ~g_object_add_weak_pointer
      (fh-link-proc
        "g_object_add_weak_pointer"
        ffi:void
        (list '* '*))))
  (let ((~object (unwrap-GObject* object)))
    (~g_object_add_weak_pointer
      ~object
      weak_pointer_location)))
(export g_object_add_weak_pointer)

;; extern void g_object_remove_weak_pointer(GObject *object, gpointer *
;;     weak_pointer_location);
(define ~g_object_remove_weak_pointer #f)
(define (g_object_remove_weak_pointer
         object
         weak_pointer_location)
  (unless
    ~g_object_remove_weak_pointer
    (set! ~g_object_remove_weak_pointer
      (fh-link-proc
        "g_object_remove_weak_pointer"
        ffi:void
        (list '* '*))))
  (let ((~object (unwrap-GObject* object)))
    (~g_object_remove_weak_pointer
      ~object
      weak_pointer_location)))
(export g_object_remove_weak_pointer)

;; typedef void (*GToggleNotify)(gpointer data, GObject *object, gboolean 
;;     is_last_ref);
(define-fh-function/p GToggleNotify
  ffi:void (list (quote *) (quote *) ffi:int))

;; extern void g_object_add_toggle_ref(GObject *object, GToggleNotify notify, 
;;     gpointer data);
(define ~g_object_add_toggle_ref #f)
(define (g_object_add_toggle_ref object notify data)
  (unless
    ~g_object_add_toggle_ref
    (set! ~g_object_add_toggle_ref
      (fh-link-proc
        "g_object_add_toggle_ref"
        ffi:void
        (list '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~notify
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* ffi:int))
           notify))
        (~data (unwrap-gpointer data)))
    (~g_object_add_toggle_ref ~object ~notify ~data)))
(export g_object_add_toggle_ref)

;; extern void g_object_remove_toggle_ref(GObject *object, GToggleNotify notify
;;     , gpointer data);
(define ~g_object_remove_toggle_ref #f)
(define (g_object_remove_toggle_ref object notify data)
  (unless
    ~g_object_remove_toggle_ref
    (set! ~g_object_remove_toggle_ref
      (fh-link-proc
        "g_object_remove_toggle_ref"
        ffi:void
        (list '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~notify
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* ffi:int))
           notify))
        (~data (unwrap-gpointer data)))
    (~g_object_remove_toggle_ref
      ~object
      ~notify
      ~data)))
(export g_object_remove_toggle_ref)

;; extern gpointer g_object_get_qdata(GObject *object, GQuark quark);
(define ~g_object_get_qdata #f)
(define (g_object_get_qdata object quark)
  (unless
    ~g_object_get_qdata
    (set! ~g_object_get_qdata
      (fh-link-proc
        "g_object_get_qdata"
        '*
        (list '* ffi:unsigned-int))))
  (let ((~object (unwrap-GObject* object))
        (~quark (unwrap~fixed quark)))
    (wrap-gpointer
      (~g_object_get_qdata ~object ~quark))))
(export g_object_get_qdata)

;; extern void g_object_set_qdata(GObject *object, GQuark quark, gpointer data)
;;     ;
(define ~g_object_set_qdata #f)
(define (g_object_set_qdata object quark data)
  (unless
    ~g_object_set_qdata
    (set! ~g_object_set_qdata
      (fh-link-proc
        "g_object_set_qdata"
        ffi:void
        (list '* ffi:unsigned-int '*))))
  (let ((~object (unwrap-GObject* object))
        (~quark (unwrap~fixed quark))
        (~data (unwrap-gpointer data)))
    (~g_object_set_qdata ~object ~quark ~data)))
(export g_object_set_qdata)

;; extern void g_object_set_qdata_full(GObject *object, GQuark quark, gpointer 
;;     data, GDestroyNotify destroy);
(define ~g_object_set_qdata_full #f)
(define (g_object_set_qdata_full
         object
         quark
         data
         destroy)
  (unless
    ~g_object_set_qdata_full
    (set! ~g_object_set_qdata_full
      (fh-link-proc
        "g_object_set_qdata_full"
        ffi:void
        (list '* ffi:unsigned-int '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~quark (unwrap~fixed quark))
        (~data (unwrap-gpointer data))
        (~destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy)))
    (~g_object_set_qdata_full
      ~object
      ~quark
      ~data
      ~destroy)))
(export g_object_set_qdata_full)

;; extern gpointer g_object_steal_qdata(GObject *object, GQuark quark);
(define ~g_object_steal_qdata #f)
(define (g_object_steal_qdata object quark)
  (unless
    ~g_object_steal_qdata
    (set! ~g_object_steal_qdata
      (fh-link-proc
        "g_object_steal_qdata"
        '*
        (list '* ffi:unsigned-int))))
  (let ((~object (unwrap-GObject* object))
        (~quark (unwrap~fixed quark)))
    (wrap-gpointer
      (~g_object_steal_qdata ~object ~quark))))
(export g_object_steal_qdata)

;; extern gpointer g_object_dup_qdata(GObject *object, GQuark quark, 
;;     GDuplicateFunc dup_func, gpointer user_data);
(define ~g_object_dup_qdata #f)
(define (g_object_dup_qdata
         object
         quark
         dup_func
         user_data)
  (unless
    ~g_object_dup_qdata
    (set! ~g_object_dup_qdata
      (fh-link-proc
        "g_object_dup_qdata"
        '*
        (list '* ffi:unsigned-int '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~quark (unwrap~fixed quark))
        (~dup_func
          ((make-ftn-arg-unwrapper '* (list '* '*))
           dup_func))
        (~user_data (unwrap-gpointer user_data)))
    (wrap-gpointer
      (~g_object_dup_qdata
        ~object
        ~quark
        ~dup_func
        ~user_data))))
(export g_object_dup_qdata)

;; extern gboolean g_object_replace_qdata(GObject *object, GQuark quark, 
;;     gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify
;;      *old_destroy);
(define ~g_object_replace_qdata #f)
(define (g_object_replace_qdata
         object
         quark
         oldval
         newval
         destroy
         old_destroy)
  (unless
    ~g_object_replace_qdata
    (set! ~g_object_replace_qdata
      (fh-link-proc
        "g_object_replace_qdata"
        ffi:int
        (list '* ffi:unsigned-int '* '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~quark (unwrap~fixed quark))
        (~oldval (unwrap-gpointer oldval))
        (~newval (unwrap-gpointer newval))
        (~destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy))
        (~old_destroy (unwrap~pointer old_destroy)))
    (~g_object_replace_qdata
      ~object
      ~quark
      ~oldval
      ~newval
      ~destroy
      ~old_destroy)))
(export g_object_replace_qdata)

;; extern gpointer g_object_get_data(GObject *object, const gchar *key);
(define ~g_object_get_data #f)
(define (g_object_get_data object key)
  (unless
    ~g_object_get_data
    (set! ~g_object_get_data
      (fh-link-proc
        "g_object_get_data"
        '*
        (list '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~key (unwrap~pointer key)))
    (wrap-gpointer (~g_object_get_data ~object ~key))))
(export g_object_get_data)

;; extern void g_object_set_data(GObject *object, const gchar *key, gpointer 
;;     data);
(define ~g_object_set_data #f)
(define (g_object_set_data object key data)
  (unless
    ~g_object_set_data
    (set! ~g_object_set_data
      (fh-link-proc
        "g_object_set_data"
        ffi:void
        (list '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~key (unwrap~pointer key))
        (~data (unwrap-gpointer data)))
    (~g_object_set_data ~object ~key ~data)))
(export g_object_set_data)

;; extern void g_object_set_data_full(GObject *object, const gchar *key, 
;;     gpointer data, GDestroyNotify destroy);
(define ~g_object_set_data_full #f)
(define (g_object_set_data_full object key data destroy)
  (unless
    ~g_object_set_data_full
    (set! ~g_object_set_data_full
      (fh-link-proc
        "g_object_set_data_full"
        ffi:void
        (list '* '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~key (unwrap~pointer key))
        (~data (unwrap-gpointer data))
        (~destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy)))
    (~g_object_set_data_full
      ~object
      ~key
      ~data
      ~destroy)))
(export g_object_set_data_full)

;; extern gpointer g_object_steal_data(GObject *object, const gchar *key);
(define ~g_object_steal_data #f)
(define (g_object_steal_data object key)
  (unless
    ~g_object_steal_data
    (set! ~g_object_steal_data
      (fh-link-proc
        "g_object_steal_data"
        '*
        (list '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~key (unwrap~pointer key)))
    (wrap-gpointer
      (~g_object_steal_data ~object ~key))))
(export g_object_steal_data)

;; extern gpointer g_object_dup_data(GObject *object, const gchar *key, 
;;     GDuplicateFunc dup_func, gpointer user_data);
(define ~g_object_dup_data #f)
(define (g_object_dup_data object key dup_func user_data)
  (unless
    ~g_object_dup_data
    (set! ~g_object_dup_data
      (fh-link-proc
        "g_object_dup_data"
        '*
        (list '* '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~key (unwrap~pointer key))
        (~dup_func
          ((make-ftn-arg-unwrapper '* (list '* '*))
           dup_func))
        (~user_data (unwrap-gpointer user_data)))
    (wrap-gpointer
      (~g_object_dup_data
        ~object
        ~key
        ~dup_func
        ~user_data))))
(export g_object_dup_data)

;; extern gboolean g_object_replace_data(GObject *object, const gchar *key, 
;;     gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify
;;      *old_destroy);
(define ~g_object_replace_data #f)
(define (g_object_replace_data
         object
         key
         oldval
         newval
         destroy
         old_destroy)
  (unless
    ~g_object_replace_data
    (set! ~g_object_replace_data
      (fh-link-proc
        "g_object_replace_data"
        ffi:int
        (list '* '* '* '* '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~key (unwrap~pointer key))
        (~oldval (unwrap-gpointer oldval))
        (~newval (unwrap-gpointer newval))
        (~destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy))
        (~old_destroy (unwrap~pointer old_destroy)))
    (~g_object_replace_data
      ~object
      ~key
      ~oldval
      ~newval
      ~destroy
      ~old_destroy)))
(export g_object_replace_data)

;; extern void g_object_watch_closure(GObject *object, GClosure *closure);
(define ~g_object_watch_closure #f)
(define (g_object_watch_closure object closure)
  (unless
    ~g_object_watch_closure
    (set! ~g_object_watch_closure
      (fh-link-proc
        "g_object_watch_closure"
        ffi:void
        (list '* '*))))
  (let ((~object (unwrap-GObject* object))
        (~closure (unwrap-GClosure* closure)))
    (~g_object_watch_closure ~object ~closure)))
(export g_object_watch_closure)

;; extern GClosure *g_cclosure_new_object(GCallback callback_func, GObject *
;;     object);
(define ~g_cclosure_new_object #f)
(define (g_cclosure_new_object callback_func object)
  (unless
    ~g_cclosure_new_object
    (set! ~g_cclosure_new_object
      (fh-link-proc
        "g_cclosure_new_object"
        '*
        (list '* '*))))
  (let ((~callback_func
          ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
           callback_func))
        (~object (unwrap-GObject* object)))
    (wrap-GClosure*
      (~g_cclosure_new_object ~callback_func ~object))))
(export g_cclosure_new_object)

;; extern GClosure *g_cclosure_new_object_swap(GCallback callback_func, GObject
;;      *object);
(define ~g_cclosure_new_object_swap #f)
(define (g_cclosure_new_object_swap callback_func object)
  (unless
    ~g_cclosure_new_object_swap
    (set! ~g_cclosure_new_object_swap
      (fh-link-proc
        "g_cclosure_new_object_swap"
        '*
        (list '* '*))))
  (let ((~callback_func
          ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
           callback_func))
        (~object (unwrap-GObject* object)))
    (wrap-GClosure*
      (~g_cclosure_new_object_swap
        ~callback_func
        ~object))))
(export g_cclosure_new_object_swap)

;; extern GClosure *g_closure_new_object(guint sizeof_closure, GObject *object)
;;     ;
(define ~g_closure_new_object #f)
(define (g_closure_new_object sizeof_closure object)
  (unless
    ~g_closure_new_object
    (set! ~g_closure_new_object
      (fh-link-proc
        "g_closure_new_object"
        '*
        (list ffi:unsigned-int '*))))
  (let ((~sizeof_closure (unwrap~fixed sizeof_closure))
        (~object (unwrap-GObject* object)))
    (wrap-GClosure*
      (~g_closure_new_object ~sizeof_closure ~object))))
(export g_closure_new_object)

;; extern void g_value_set_object(GValue *value, gpointer v_object);
(define ~g_value_set_object #f)
(define (g_value_set_object value v_object)
  (unless
    ~g_value_set_object
    (set! ~g_value_set_object
      (fh-link-proc
        "g_value_set_object"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_object (unwrap-gpointer v_object)))
    (~g_value_set_object ~value ~v_object)))
(export g_value_set_object)

;; extern gpointer g_value_get_object(const GValue *value);
(define ~g_value_get_object #f)
(define (g_value_get_object value)
  (unless
    ~g_value_get_object
    (set! ~g_value_get_object
      (fh-link-proc "g_value_get_object" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (wrap-gpointer (~g_value_get_object ~value))))
(export g_value_get_object)

;; extern gpointer g_value_dup_object(const GValue *value);
(define ~g_value_dup_object #f)
(define (g_value_dup_object value)
  (unless
    ~g_value_dup_object
    (set! ~g_value_dup_object
      (fh-link-proc "g_value_dup_object" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (wrap-gpointer (~g_value_dup_object ~value))))
(export g_value_dup_object)

;; extern gulong g_signal_connect_object(gpointer instance, const gchar *
;;     detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags 
;;     connect_flags);
(define ~g_signal_connect_object #f)
(define (g_signal_connect_object
         instance
         detailed_signal
         c_handler
         gobject
         connect_flags)
  (unless
    ~g_signal_connect_object
    (set! ~g_signal_connect_object
      (fh-link-proc
        "g_signal_connect_object"
        ffi:unsigned-long
        (list '* '* '* '* ffi:int))))
  (let ((~instance (unwrap-gpointer instance))
        (~detailed_signal
          (unwrap~pointer detailed_signal))
        (~c_handler
          ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
           c_handler))
        (~gobject (unwrap-gpointer gobject))
        (~connect_flags (unwrap~fixed connect_flags)))
    (~g_signal_connect_object
      ~instance
      ~detailed_signal
      ~c_handler
      ~gobject
      ~connect_flags)))
(export g_signal_connect_object)

;; extern void g_object_force_floating(GObject *object);
(define ~g_object_force_floating #f)
(define (g_object_force_floating object)
  (unless
    ~g_object_force_floating
    (set! ~g_object_force_floating
      (fh-link-proc
        "g_object_force_floating"
        ffi:void
        (list '*))))
  (let ((~object (unwrap-GObject* object)))
    (~g_object_force_floating ~object)))
(export g_object_force_floating)

;; extern void g_object_run_dispose(GObject *object);
(define ~g_object_run_dispose #f)
(define (g_object_run_dispose object)
  (unless
    ~g_object_run_dispose
    (set! ~g_object_run_dispose
      (fh-link-proc
        "g_object_run_dispose"
        ffi:void
        (list '*))))
  (let ((~object (unwrap-GObject* object)))
    (~g_object_run_dispose ~object)))
(export g_object_run_dispose)

;; extern void g_value_take_object(GValue *value, gpointer v_object);
(define ~g_value_take_object #f)
(define (g_value_take_object value v_object)
  (unless
    ~g_value_take_object
    (set! ~g_value_take_object
      (fh-link-proc
        "g_value_take_object"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_object (unwrap-gpointer v_object)))
    (~g_value_take_object ~value ~v_object)))
(export g_value_take_object)

;; extern void g_value_set_object_take_ownership(GValue *value, gpointer 
;;     v_object);
(define ~g_value_set_object_take_ownership #f)
(define (g_value_set_object_take_ownership
         value
         v_object)
  (unless
    ~g_value_set_object_take_ownership
    (set! ~g_value_set_object_take_ownership
      (fh-link-proc
        "g_value_set_object_take_ownership"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_object (unwrap-gpointer v_object)))
    (~g_value_set_object_take_ownership
      ~value
      ~v_object)))
(export g_value_set_object_take_ownership)

;; extern gsize g_object_compat_control(gsize what, gpointer data);
(define ~g_object_compat_control #f)
(define (g_object_compat_control what data)
  (unless
    ~g_object_compat_control
    (set! ~g_object_compat_control
      (fh-link-proc
        "g_object_compat_control"
        ffi:unsigned-long
        (list ffi:unsigned-long '*))))
  (let ((~what (unwrap~fixed what))
        (~data (unwrap-gpointer data)))
    (~g_object_compat_control ~what ~data)))
(export g_object_compat_control)

;; extern void g_clear_object(volatile GObject **object_ptr);
(define ~g_clear_object #f)
(define (g_clear_object object_ptr)
  (unless
    ~g_clear_object
    (set! ~g_clear_object
      (fh-link-proc
        "g_clear_object"
        ffi:void
        (list '*))))
  (let ((~object_ptr (unwrap~pointer object_ptr)))
    (~g_clear_object ~object_ptr)))
(export g_clear_object)

;; typedef struct {
;;   /*<private>*/
;;   union {
;;     gpointer p;
;;   } priv;
;; } GWeakRef;
(define GWeakRef-desc
  (bs:struct
    (list `(priv ,(bs:union (list `(p ,gpointer-desc)))))))
(export GWeakRef-desc)
(define-fh-compound-type/p GWeakRef GWeakRef-desc)

;; extern void g_weak_ref_init(GWeakRef *weak_ref, gpointer object);
(define ~g_weak_ref_init #f)
(define (g_weak_ref_init weak_ref object)
  (unless
    ~g_weak_ref_init
    (set! ~g_weak_ref_init
      (fh-link-proc
        "g_weak_ref_init"
        ffi:void
        (list '* '*))))
  (let ((~weak_ref (unwrap-GWeakRef* weak_ref))
        (~object (unwrap-gpointer object)))
    (~g_weak_ref_init ~weak_ref ~object)))
(export g_weak_ref_init)

;; extern void g_weak_ref_clear(GWeakRef *weak_ref);
(define ~g_weak_ref_clear #f)
(define (g_weak_ref_clear weak_ref)
  (unless
    ~g_weak_ref_clear
    (set! ~g_weak_ref_clear
      (fh-link-proc
        "g_weak_ref_clear"
        ffi:void
        (list '*))))
  (let ((~weak_ref (unwrap-GWeakRef* weak_ref)))
    (~g_weak_ref_clear ~weak_ref)))
(export g_weak_ref_clear)

;; extern gpointer g_weak_ref_get(GWeakRef *weak_ref);
(define ~g_weak_ref_get #f)
(define (g_weak_ref_get weak_ref)
  (unless
    ~g_weak_ref_get
    (set! ~g_weak_ref_get
      (fh-link-proc "g_weak_ref_get" '* (list '*))))
  (let ((~weak_ref (unwrap-GWeakRef* weak_ref)))
    (wrap-gpointer (~g_weak_ref_get ~weak_ref))))
(export g_weak_ref_get)

;; extern void g_weak_ref_set(GWeakRef *weak_ref, gpointer object);
(define ~g_weak_ref_set #f)
(define (g_weak_ref_set weak_ref object)
  (unless
    ~g_weak_ref_set
    (set! ~g_weak_ref_set
      (fh-link-proc
        "g_weak_ref_set"
        ffi:void
        (list '* '*))))
  (let ((~weak_ref (unwrap-GWeakRef* weak_ref))
        (~object (unwrap-gpointer object)))
    (~g_weak_ref_set ~weak_ref ~object)))
(export g_weak_ref_set)

;; typedef struct _GBinding GBinding;
(define GBinding-desc void)
(export GBinding-desc)
(define GBinding*-desc (bs:pointer GBinding-desc))
(export GBinding*-desc)
(define-fh-pointer-type GBinding* GBinding*-desc)

;; typedef gboolean (*GBindingTransformFunc)(GBinding *binding, const GValue *
;;     from_value, GValue *to_value, gpointer user_data);
(define-fh-function/p GBindingTransformFunc
  ffi:int (list (quote *) (quote *) (quote *) (quote *)))

;; typedef enum {
;;   G_BINDING_DEFAULT = 0,
;;   G_BINDING_BIDIRECTIONAL = 1<<0,
;;   G_BINDING_SYNC_CREATE = 1<<1,
;;   G_BINDING_INVERT_BOOLEAN = 1<<2,
;; } GBindingFlags;
(define-fh-enum GBindingFlags
  '((G_BINDING_DEFAULT . 0)
    (G_BINDING_BIDIRECTIONAL . 1)
    (G_BINDING_SYNC_CREATE . 2)
    (G_BINDING_INVERT_BOOLEAN . 4))
  )

;; extern GType g_binding_flags_get_type(void);
(define ~g_binding_flags_get_type #f)
(define (g_binding_flags_get_type)
  (unless
    ~g_binding_flags_get_type
    (set! ~g_binding_flags_get_type
      (fh-link-proc
        "g_binding_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_binding_flags_get_type)))
(export g_binding_flags_get_type)

;; extern GType g_binding_get_type(void);
(define ~g_binding_get_type #f)
(define (g_binding_get_type)
  (unless
    ~g_binding_get_type
    (set! ~g_binding_get_type
      (fh-link-proc
        "g_binding_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_binding_get_type)))
(export g_binding_get_type)

;; extern GBindingFlags g_binding_get_flags(GBinding *binding);
(define ~g_binding_get_flags #f)
(define (g_binding_get_flags binding)
  (unless
    ~g_binding_get_flags
    (set! ~g_binding_get_flags
      (fh-link-proc
        "g_binding_get_flags"
        ffi:int
        (list '*))))
  (let ((~binding (unwrap-GBinding* binding)))
    (~g_binding_get_flags ~binding)))
(export g_binding_get_flags)

;; extern GObject *g_binding_get_source(GBinding *binding);
(define ~g_binding_get_source #f)
(define (g_binding_get_source binding)
  (unless
    ~g_binding_get_source
    (set! ~g_binding_get_source
      (fh-link-proc
        "g_binding_get_source"
        '*
        (list '*))))
  (let ((~binding (unwrap-GBinding* binding)))
    (wrap-GObject* (~g_binding_get_source ~binding))))
(export g_binding_get_source)

;; extern GObject *g_binding_get_target(GBinding *binding);
(define ~g_binding_get_target #f)
(define (g_binding_get_target binding)
  (unless
    ~g_binding_get_target
    (set! ~g_binding_get_target
      (fh-link-proc
        "g_binding_get_target"
        '*
        (list '*))))
  (let ((~binding (unwrap-GBinding* binding)))
    (wrap-GObject* (~g_binding_get_target ~binding))))
(export g_binding_get_target)

;; extern const gchar *g_binding_get_source_property(GBinding *binding);
(define ~g_binding_get_source_property #f)
(define (g_binding_get_source_property binding)
  (unless
    ~g_binding_get_source_property
    (set! ~g_binding_get_source_property
      (fh-link-proc
        "g_binding_get_source_property"
        '*
        (list '*))))
  (let ((~binding (unwrap-GBinding* binding)))
    (~g_binding_get_source_property ~binding)))
(export g_binding_get_source_property)

;; extern const gchar *g_binding_get_target_property(GBinding *binding);
(define ~g_binding_get_target_property #f)
(define (g_binding_get_target_property binding)
  (unless
    ~g_binding_get_target_property
    (set! ~g_binding_get_target_property
      (fh-link-proc
        "g_binding_get_target_property"
        '*
        (list '*))))
  (let ((~binding (unwrap-GBinding* binding)))
    (~g_binding_get_target_property ~binding)))
(export g_binding_get_target_property)

;; extern void g_binding_unbind(GBinding *binding);
(define ~g_binding_unbind #f)
(define (g_binding_unbind binding)
  (unless
    ~g_binding_unbind
    (set! ~g_binding_unbind
      (fh-link-proc
        "g_binding_unbind"
        ffi:void
        (list '*))))
  (let ((~binding (unwrap-GBinding* binding)))
    (~g_binding_unbind ~binding)))
(export g_binding_unbind)

;; extern GBinding *g_object_bind_property(gpointer source, const gchar *
;;     source_property, gpointer target, const gchar *target_property, 
;;     GBindingFlags flags);
(define ~g_object_bind_property #f)
(define (g_object_bind_property
         source
         source_property
         target
         target_property
         flags)
  (unless
    ~g_object_bind_property
    (set! ~g_object_bind_property
      (fh-link-proc
        "g_object_bind_property"
        '*
        (list '* '* '* '* ffi:int))))
  (let ((~source (unwrap-gpointer source))
        (~source_property
          (unwrap~pointer source_property))
        (~target (unwrap-gpointer target))
        (~target_property
          (unwrap~pointer target_property))
        (~flags (unwrap~fixed flags)))
    (wrap-GBinding*
      (~g_object_bind_property
        ~source
        ~source_property
        ~target
        ~target_property
        ~flags))))
(export g_object_bind_property)

;; extern GBinding *g_object_bind_property_full(gpointer source, const gchar *
;;     source_property, gpointer target, const gchar *target_property, 
;;     GBindingFlags flags, GBindingTransformFunc transform_to, 
;;     GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify
;;      notify);
(define ~g_object_bind_property_full #f)
(define (g_object_bind_property_full
         source
         source_property
         target
         target_property
         flags
         transform_to
         transform_from
         user_data
         notify)
  (unless
    ~g_object_bind_property_full
    (set! ~g_object_bind_property_full
      (fh-link-proc
        "g_object_bind_property_full"
        '*
        (list '* '* '* '* ffi:int '* '* '* '*))))
  (let ((~source (unwrap-gpointer source))
        (~source_property
          (unwrap~pointer source_property))
        (~target (unwrap-gpointer target))
        (~target_property
          (unwrap~pointer target_property))
        (~flags (unwrap~fixed flags))
        (~transform_to
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* '* '* '*))
           transform_to))
        (~transform_from
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* '* '* '*))
           transform_from))
        (~user_data (unwrap-gpointer user_data))
        (~notify
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           notify)))
    (wrap-GBinding*
      (~g_object_bind_property_full
        ~source
        ~source_property
        ~target
        ~target_property
        ~flags
        ~transform_to
        ~transform_from
        ~user_data
        ~notify))))
(export g_object_bind_property_full)

;; extern GBinding *g_object_bind_property_with_closures(gpointer source, const
;;      gchar *source_property, gpointer target, const gchar *target_property, 
;;     GBindingFlags flags, GClosure *transform_to, GClosure *transform_from);
(define ~g_object_bind_property_with_closures #f)
(define (g_object_bind_property_with_closures
         source
         source_property
         target
         target_property
         flags
         transform_to
         transform_from)
  (unless
    ~g_object_bind_property_with_closures
    (set! ~g_object_bind_property_with_closures
      (fh-link-proc
        "g_object_bind_property_with_closures"
        '*
        (list '* '* '* '* ffi:int '* '*))))
  (let ((~source (unwrap-gpointer source))
        (~source_property
          (unwrap~pointer source_property))
        (~target (unwrap-gpointer target))
        (~target_property
          (unwrap~pointer target_property))
        (~flags (unwrap~fixed flags))
        (~transform_to (unwrap-GClosure* transform_to))
        (~transform_from
          (unwrap-GClosure* transform_from)))
    (wrap-GBinding*
      (~g_object_bind_property_with_closures
        ~source
        ~source_property
        ~target
        ~target_property
        ~flags
        ~transform_to
        ~transform_from))))
(export g_object_bind_property_with_closures)

;; typedef struct _GEnumClass GEnumClass;
(define GEnumClass-desc void)
(export GEnumClass-desc)
(define GEnumClass*-desc (bs:pointer (delay GEnumClass-desc)))
(export GEnumClass*-desc)
(define-fh-pointer-type GEnumClass* GEnumClass*-desc)

;; typedef struct _GFlagsClass GFlagsClass;
(define GFlagsClass-desc void)
(export GFlagsClass-desc)
(define GFlagsClass*-desc (bs:pointer (delay GFlagsClass-desc)))
(export GFlagsClass*-desc)
(define-fh-pointer-type GFlagsClass* GFlagsClass*-desc)

;; typedef struct _GEnumValue GEnumValue;
(define GEnumValue-desc void)
(export GEnumValue-desc)
(define GEnumValue*-desc (bs:pointer (delay GEnumValue-desc)))
(export GEnumValue*-desc)
(define-fh-pointer-type GEnumValue* GEnumValue*-desc)

;; typedef struct _GFlagsValue GFlagsValue;
(define GFlagsValue-desc void)
(export GFlagsValue-desc)
(define GFlagsValue*-desc (bs:pointer (delay GFlagsValue-desc)))
(export GFlagsValue*-desc)
(define-fh-pointer-type GFlagsValue* GFlagsValue*-desc)

;; struct _GEnumClass {
;;   GTypeClass g_type_class;
;;   /*< public >*/
;;   gint minimum;
;;   gint maximum;
;;   guint n_values;
;;   GEnumValue *values;
;; };
(define struct-_GEnumClass-desc
  (bs:struct
    (list `(g_type_class ,GTypeClass-desc)
          `(minimum ,int)
          `(maximum ,int)
          `(n_values ,unsigned-int)
          `(values ,(bs:pointer (delay GEnumValue*-desc))))))
(export struct-_GEnumClass-desc)
(define-fh-compound-type/p struct-_GEnumClass struct-_GEnumClass-desc)
(set! GEnumClass-desc struct-_GEnumClass-desc)
(define-fh-compound-type GEnumClass GEnumClass-desc)

;; struct _GFlagsClass {
;;   GTypeClass g_type_class;
;;   /*< public >*/
;;   guint mask;
;;   guint n_values;
;;   GFlagsValue *values;
;; };
(define struct-_GFlagsClass-desc
  (bs:struct
    (list `(g_type_class ,GTypeClass-desc)
          `(mask ,unsigned-int)
          `(n_values ,unsigned-int)
          `(values ,(bs:pointer (delay GFlagsValue*-desc))))))
(export struct-_GFlagsClass-desc)
(define-fh-compound-type/p struct-_GFlagsClass struct-_GFlagsClass-desc)
(set! GFlagsClass-desc struct-_GFlagsClass-desc)
(define-fh-compound-type GFlagsClass GFlagsClass-desc)

;; struct _GEnumValue {
;;   gint value;
;;   const gchar *value_name;
;;   const gchar *value_nick;
;; };
(define struct-_GEnumValue-desc
  (bs:struct
    (list `(value ,int)
          `(value_name ,(bs:pointer int))
          `(value_nick ,(bs:pointer int)))))
(export struct-_GEnumValue-desc)
(define-fh-compound-type/p struct-_GEnumValue struct-_GEnumValue-desc)
(set! GEnumValue-desc struct-_GEnumValue-desc)
(define-fh-compound-type GEnumValue GEnumValue-desc)

;; struct _GFlagsValue {
;;   guint value;
;;   const gchar *value_name;
;;   const gchar *value_nick;
;; };
(define struct-_GFlagsValue-desc
  (bs:struct
    (list `(value ,unsigned-int)
          `(value_name ,(bs:pointer int))
          `(value_nick ,(bs:pointer int)))))
(export struct-_GFlagsValue-desc)
(define-fh-compound-type/p struct-_GFlagsValue struct-_GFlagsValue-desc)
(set! GFlagsValue-desc struct-_GFlagsValue-desc)
(define-fh-compound-type GFlagsValue GFlagsValue-desc)

;; extern GEnumValue *g_enum_get_value(GEnumClass *enum_class, gint value);
(define ~g_enum_get_value #f)
(define (g_enum_get_value enum_class value)
  (unless
    ~g_enum_get_value
    (set! ~g_enum_get_value
      (fh-link-proc
        "g_enum_get_value"
        '*
        (list '* ffi:int))))
  (let ((~enum_class (unwrap-GEnumClass* enum_class))
        (~value (unwrap~fixed value)))
    (wrap-GEnumValue*
      (~g_enum_get_value ~enum_class ~value))))
(export g_enum_get_value)

;; extern GEnumValue *g_enum_get_value_by_name(GEnumClass *enum_class, const 
;;     gchar *name);
(define ~g_enum_get_value_by_name #f)
(define (g_enum_get_value_by_name enum_class name)
  (unless
    ~g_enum_get_value_by_name
    (set! ~g_enum_get_value_by_name
      (fh-link-proc
        "g_enum_get_value_by_name"
        '*
        (list '* '*))))
  (let ((~enum_class (unwrap-GEnumClass* enum_class))
        (~name (unwrap~pointer name)))
    (wrap-GEnumValue*
      (~g_enum_get_value_by_name ~enum_class ~name))))
(export g_enum_get_value_by_name)

;; extern GEnumValue *g_enum_get_value_by_nick(GEnumClass *enum_class, const 
;;     gchar *nick);
(define ~g_enum_get_value_by_nick #f)
(define (g_enum_get_value_by_nick enum_class nick)
  (unless
    ~g_enum_get_value_by_nick
    (set! ~g_enum_get_value_by_nick
      (fh-link-proc
        "g_enum_get_value_by_nick"
        '*
        (list '* '*))))
  (let ((~enum_class (unwrap-GEnumClass* enum_class))
        (~nick (unwrap~pointer nick)))
    (wrap-GEnumValue*
      (~g_enum_get_value_by_nick ~enum_class ~nick))))
(export g_enum_get_value_by_nick)

;; extern GFlagsValue *g_flags_get_first_value(GFlagsClass *flags_class, guint 
;;     value);
(define ~g_flags_get_first_value #f)
(define (g_flags_get_first_value flags_class value)
  (unless
    ~g_flags_get_first_value
    (set! ~g_flags_get_first_value
      (fh-link-proc
        "g_flags_get_first_value"
        '*
        (list '* ffi:unsigned-int))))
  (let ((~flags_class (unwrap-GFlagsClass* flags_class))
        (~value (unwrap~fixed value)))
    (wrap-GFlagsValue*
      (~g_flags_get_first_value ~flags_class ~value))))
(export g_flags_get_first_value)

;; extern GFlagsValue *g_flags_get_value_by_name(GFlagsClass *flags_class, 
;;     const gchar *name);
(define ~g_flags_get_value_by_name #f)
(define (g_flags_get_value_by_name flags_class name)
  (unless
    ~g_flags_get_value_by_name
    (set! ~g_flags_get_value_by_name
      (fh-link-proc
        "g_flags_get_value_by_name"
        '*
        (list '* '*))))
  (let ((~flags_class (unwrap-GFlagsClass* flags_class))
        (~name (unwrap~pointer name)))
    (wrap-GFlagsValue*
      (~g_flags_get_value_by_name ~flags_class ~name))))
(export g_flags_get_value_by_name)

;; extern GFlagsValue *g_flags_get_value_by_nick(GFlagsClass *flags_class, 
;;     const gchar *nick);
(define ~g_flags_get_value_by_nick #f)
(define (g_flags_get_value_by_nick flags_class nick)
  (unless
    ~g_flags_get_value_by_nick
    (set! ~g_flags_get_value_by_nick
      (fh-link-proc
        "g_flags_get_value_by_nick"
        '*
        (list '* '*))))
  (let ((~flags_class (unwrap-GFlagsClass* flags_class))
        (~nick (unwrap~pointer nick)))
    (wrap-GFlagsValue*
      (~g_flags_get_value_by_nick ~flags_class ~nick))))
(export g_flags_get_value_by_nick)

;; extern void g_value_set_enum(GValue *value, gint v_enum);
(define ~g_value_set_enum #f)
(define (g_value_set_enum value v_enum)
  (unless
    ~g_value_set_enum
    (set! ~g_value_set_enum
      (fh-link-proc
        "g_value_set_enum"
        ffi:void
        (list '* ffi:int))))
  (let ((~value (unwrap-GValue* value))
        (~v_enum (unwrap~fixed v_enum)))
    (~g_value_set_enum ~value ~v_enum)))
(export g_value_set_enum)

;; extern gint g_value_get_enum(const GValue *value);
(define ~g_value_get_enum #f)
(define (g_value_get_enum value)
  (unless
    ~g_value_get_enum
    (set! ~g_value_get_enum
      (fh-link-proc
        "g_value_get_enum"
        ffi:int
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_enum ~value)))
(export g_value_get_enum)

;; extern void g_value_set_flags(GValue *value, guint v_flags);
(define ~g_value_set_flags #f)
(define (g_value_set_flags value v_flags)
  (unless
    ~g_value_set_flags
    (set! ~g_value_set_flags
      (fh-link-proc
        "g_value_set_flags"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~value (unwrap-GValue* value))
        (~v_flags (unwrap~fixed v_flags)))
    (~g_value_set_flags ~value ~v_flags)))
(export g_value_set_flags)

;; extern guint g_value_get_flags(const GValue *value);
(define ~g_value_get_flags #f)
(define (g_value_get_flags value)
  (unless
    ~g_value_get_flags
    (set! ~g_value_get_flags
      (fh-link-proc
        "g_value_get_flags"
        ffi:unsigned-int
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_flags ~value)))
(export g_value_get_flags)

;; extern GType g_enum_register_static(const gchar *name, const GEnumValue *
;;     const_static_values);
(define ~g_enum_register_static #f)
(define (g_enum_register_static name const_static_values)
  (unless
    ~g_enum_register_static
    (set! ~g_enum_register_static
      (fh-link-proc
        "g_enum_register_static"
        ffi:unsigned-long
        (list '* '*))))
  (let ((~name (unwrap~pointer name))
        (~const_static_values
          (unwrap-GEnumValue* const_static_values)))
    (~g_enum_register_static
      ~name
      ~const_static_values)))
(export g_enum_register_static)

;; extern GType g_flags_register_static(const gchar *name, const GFlagsValue *
;;     const_static_values);
(define ~g_flags_register_static #f)
(define (g_flags_register_static
         name
         const_static_values)
  (unless
    ~g_flags_register_static
    (set! ~g_flags_register_static
      (fh-link-proc
        "g_flags_register_static"
        ffi:unsigned-long
        (list '* '*))))
  (let ((~name (unwrap~pointer name))
        (~const_static_values
          (unwrap-GFlagsValue* const_static_values)))
    (~g_flags_register_static
      ~name
      ~const_static_values)))
(export g_flags_register_static)

;; extern void g_enum_complete_type_info(GType g_enum_type, GTypeInfo *info, 
;;     const GEnumValue *const_values);
(define ~g_enum_complete_type_info #f)
(define (g_enum_complete_type_info
         g_enum_type
         info
         const_values)
  (unless
    ~g_enum_complete_type_info
    (set! ~g_enum_complete_type_info
      (fh-link-proc
        "g_enum_complete_type_info"
        ffi:void
        (list ffi:unsigned-long '* '*))))
  (let ((~g_enum_type (unwrap~fixed g_enum_type))
        (~info (unwrap-GTypeInfo* info))
        (~const_values (unwrap-GEnumValue* const_values)))
    (~g_enum_complete_type_info
      ~g_enum_type
      ~info
      ~const_values)))
(export g_enum_complete_type_info)

;; extern void g_flags_complete_type_info(GType g_flags_type, GTypeInfo *info, 
;;     const GFlagsValue *const_values);
(define ~g_flags_complete_type_info #f)
(define (g_flags_complete_type_info
         g_flags_type
         info
         const_values)
  (unless
    ~g_flags_complete_type_info
    (set! ~g_flags_complete_type_info
      (fh-link-proc
        "g_flags_complete_type_info"
        ffi:void
        (list ffi:unsigned-long '* '*))))
  (let ((~g_flags_type (unwrap~fixed g_flags_type))
        (~info (unwrap-GTypeInfo* info))
        (~const_values
          (unwrap-GFlagsValue* const_values)))
    (~g_flags_complete_type_info
      ~g_flags_type
      ~info
      ~const_values)))
(export g_flags_complete_type_info)

;; typedef struct _GParamSpecChar GParamSpecChar;
(define GParamSpecChar-desc void)
(export GParamSpecChar-desc)
(define GParamSpecChar*-desc (bs:pointer (delay GParamSpecChar-desc)))
(export GParamSpecChar*-desc)
(define-fh-pointer-type GParamSpecChar* GParamSpecChar*-desc)

;; typedef struct _GParamSpecUChar GParamSpecUChar;
(define GParamSpecUChar-desc void)
(export GParamSpecUChar-desc)
(define GParamSpecUChar*-desc (bs:pointer (delay GParamSpecUChar-desc)))
(export GParamSpecUChar*-desc)
(define-fh-pointer-type GParamSpecUChar* GParamSpecUChar*-desc)

;; typedef struct _GParamSpecBoolean GParamSpecBoolean;
(define GParamSpecBoolean-desc void)
(export GParamSpecBoolean-desc)
(define GParamSpecBoolean*-desc (bs:pointer (delay GParamSpecBoolean-desc)))
(export GParamSpecBoolean*-desc)
(define-fh-pointer-type GParamSpecBoolean* GParamSpecBoolean*-desc)

;; typedef struct _GParamSpecInt GParamSpecInt;
(define GParamSpecInt-desc void)
(export GParamSpecInt-desc)
(define GParamSpecInt*-desc (bs:pointer (delay GParamSpecInt-desc)))
(export GParamSpecInt*-desc)
(define-fh-pointer-type GParamSpecInt* GParamSpecInt*-desc)

;; typedef struct _GParamSpecUInt GParamSpecUInt;
(define GParamSpecUInt-desc void)
(export GParamSpecUInt-desc)
(define GParamSpecUInt*-desc (bs:pointer (delay GParamSpecUInt-desc)))
(export GParamSpecUInt*-desc)
(define-fh-pointer-type GParamSpecUInt* GParamSpecUInt*-desc)

;; typedef struct _GParamSpecLong GParamSpecLong;
(define GParamSpecLong-desc void)
(export GParamSpecLong-desc)
(define GParamSpecLong*-desc (bs:pointer (delay GParamSpecLong-desc)))
(export GParamSpecLong*-desc)
(define-fh-pointer-type GParamSpecLong* GParamSpecLong*-desc)

;; typedef struct _GParamSpecULong GParamSpecULong;
(define GParamSpecULong-desc void)
(export GParamSpecULong-desc)
(define GParamSpecULong*-desc (bs:pointer (delay GParamSpecULong-desc)))
(export GParamSpecULong*-desc)
(define-fh-pointer-type GParamSpecULong* GParamSpecULong*-desc)

;; typedef struct _GParamSpecInt64 GParamSpecInt64;
(define GParamSpecInt64-desc void)
(export GParamSpecInt64-desc)
(define GParamSpecInt64*-desc (bs:pointer (delay GParamSpecInt64-desc)))
(export GParamSpecInt64*-desc)
(define-fh-pointer-type GParamSpecInt64* GParamSpecInt64*-desc)

;; typedef struct _GParamSpecUInt64 GParamSpecUInt64;
(define GParamSpecUInt64-desc void)
(export GParamSpecUInt64-desc)
(define GParamSpecUInt64*-desc (bs:pointer (delay GParamSpecUInt64-desc)))
(export GParamSpecUInt64*-desc)
(define-fh-pointer-type GParamSpecUInt64* GParamSpecUInt64*-desc)

;; typedef struct _GParamSpecUnichar GParamSpecUnichar;
(define GParamSpecUnichar-desc void)
(export GParamSpecUnichar-desc)
(define GParamSpecUnichar*-desc (bs:pointer (delay GParamSpecUnichar-desc)))
(export GParamSpecUnichar*-desc)
(define-fh-pointer-type GParamSpecUnichar* GParamSpecUnichar*-desc)

;; typedef struct _GParamSpecEnum GParamSpecEnum;
(define GParamSpecEnum-desc void)
(export GParamSpecEnum-desc)
(define GParamSpecEnum*-desc (bs:pointer (delay GParamSpecEnum-desc)))
(export GParamSpecEnum*-desc)
(define-fh-pointer-type GParamSpecEnum* GParamSpecEnum*-desc)

;; typedef struct _GParamSpecFlags GParamSpecFlags;
(define GParamSpecFlags-desc void)
(export GParamSpecFlags-desc)
(define GParamSpecFlags*-desc (bs:pointer (delay GParamSpecFlags-desc)))
(export GParamSpecFlags*-desc)
(define-fh-pointer-type GParamSpecFlags* GParamSpecFlags*-desc)

;; typedef struct _GParamSpecFloat GParamSpecFloat;
(define GParamSpecFloat-desc void)
(export GParamSpecFloat-desc)
(define GParamSpecFloat*-desc (bs:pointer (delay GParamSpecFloat-desc)))
(export GParamSpecFloat*-desc)
(define-fh-pointer-type GParamSpecFloat* GParamSpecFloat*-desc)

;; typedef struct _GParamSpecDouble GParamSpecDouble;
(define GParamSpecDouble-desc void)
(export GParamSpecDouble-desc)
(define GParamSpecDouble*-desc (bs:pointer (delay GParamSpecDouble-desc)))
(export GParamSpecDouble*-desc)
(define-fh-pointer-type GParamSpecDouble* GParamSpecDouble*-desc)

;; typedef struct _GParamSpecString GParamSpecString;
(define GParamSpecString-desc void)
(export GParamSpecString-desc)
(define GParamSpecString*-desc (bs:pointer (delay GParamSpecString-desc)))
(export GParamSpecString*-desc)
(define-fh-pointer-type GParamSpecString* GParamSpecString*-desc)

;; typedef struct _GParamSpecParam GParamSpecParam;
(define GParamSpecParam-desc void)
(export GParamSpecParam-desc)
(define GParamSpecParam*-desc (bs:pointer (delay GParamSpecParam-desc)))
(export GParamSpecParam*-desc)
(define-fh-pointer-type GParamSpecParam* GParamSpecParam*-desc)

;; typedef struct _GParamSpecBoxed GParamSpecBoxed;
(define GParamSpecBoxed-desc void)
(export GParamSpecBoxed-desc)
(define GParamSpecBoxed*-desc (bs:pointer (delay GParamSpecBoxed-desc)))
(export GParamSpecBoxed*-desc)
(define-fh-pointer-type GParamSpecBoxed* GParamSpecBoxed*-desc)

;; typedef struct _GParamSpecPointer GParamSpecPointer;
(define GParamSpecPointer-desc void)
(export GParamSpecPointer-desc)
(define GParamSpecPointer*-desc (bs:pointer (delay GParamSpecPointer-desc)))
(export GParamSpecPointer*-desc)
(define-fh-pointer-type GParamSpecPointer* GParamSpecPointer*-desc)

;; typedef struct _GParamSpecValueArray GParamSpecValueArray;
(define GParamSpecValueArray-desc void)
(export GParamSpecValueArray-desc)
(define GParamSpecValueArray*-desc (bs:pointer (delay GParamSpecValueArray-desc)))
(export GParamSpecValueArray*-desc)
(define-fh-pointer-type GParamSpecValueArray* GParamSpecValueArray*-desc)

;; typedef struct _GParamSpecObject GParamSpecObject;
(define GParamSpecObject-desc void)
(export GParamSpecObject-desc)
(define GParamSpecObject*-desc (bs:pointer (delay GParamSpecObject-desc)))
(export GParamSpecObject*-desc)
(define-fh-pointer-type GParamSpecObject* GParamSpecObject*-desc)

;; typedef struct _GParamSpecOverride GParamSpecOverride;
(define GParamSpecOverride-desc void)
(export GParamSpecOverride-desc)
(define GParamSpecOverride*-desc (bs:pointer (delay GParamSpecOverride-desc)))
(export GParamSpecOverride*-desc)
(define-fh-pointer-type GParamSpecOverride* GParamSpecOverride*-desc)

;; typedef struct _GParamSpecGType GParamSpecGType;
(define GParamSpecGType-desc void)
(export GParamSpecGType-desc)
(define GParamSpecGType*-desc (bs:pointer (delay GParamSpecGType-desc)))
(export GParamSpecGType*-desc)
(define-fh-pointer-type GParamSpecGType* GParamSpecGType*-desc)

;; typedef struct _GParamSpecVariant GParamSpecVariant;
(define GParamSpecVariant-desc void)
(export GParamSpecVariant-desc)
(define GParamSpecVariant*-desc (bs:pointer (delay GParamSpecVariant-desc)))
(export GParamSpecVariant*-desc)
(define-fh-pointer-type GParamSpecVariant* GParamSpecVariant*-desc)

;; struct _GParamSpecChar {
;;   GParamSpec parent_instance;
;;   gint8 minimum;
;;   gint8 maximum;
;;   gint8 default_value;
;; };
(define struct-_GParamSpecChar-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(minimum ,int)
          `(maximum ,int)
          `(default_value ,int))))
(export struct-_GParamSpecChar-desc)
(define-fh-compound-type/p struct-_GParamSpecChar struct-_GParamSpecChar-desc)
(set! GParamSpecChar-desc struct-_GParamSpecChar-desc)
(define-fh-compound-type GParamSpecChar GParamSpecChar-desc)

;; struct _GParamSpecUChar {
;;   GParamSpec parent_instance;
;;   guint8 minimum;
;;   guint8 maximum;
;;   guint8 default_value;
;; };
(define struct-_GParamSpecUChar-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(minimum ,unsigned-int)
          `(maximum ,unsigned-int)
          `(default_value ,unsigned-int))))
(export struct-_GParamSpecUChar-desc)
(define-fh-compound-type/p struct-_GParamSpecUChar struct-_GParamSpecUChar-desc)
(set! GParamSpecUChar-desc struct-_GParamSpecUChar-desc)
(define-fh-compound-type GParamSpecUChar GParamSpecUChar-desc)

;; struct _GParamSpecBoolean {
;;   GParamSpec parent_instance;
;;   gboolean default_value;
;; };
(define struct-_GParamSpecBoolean-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(default_value ,int))))
(export struct-_GParamSpecBoolean-desc)
(define-fh-compound-type/p struct-_GParamSpecBoolean struct-_GParamSpecBoolean-desc)
(set! GParamSpecBoolean-desc struct-_GParamSpecBoolean-desc)
(define-fh-compound-type GParamSpecBoolean GParamSpecBoolean-desc)

;; struct _GParamSpecInt {
;;   GParamSpec parent_instance;
;;   gint minimum;
;;   gint maximum;
;;   gint default_value;
;; };
(define struct-_GParamSpecInt-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(minimum ,int)
          `(maximum ,int)
          `(default_value ,int))))
(export struct-_GParamSpecInt-desc)
(define-fh-compound-type/p struct-_GParamSpecInt struct-_GParamSpecInt-desc)
(set! GParamSpecInt-desc struct-_GParamSpecInt-desc)
(define-fh-compound-type GParamSpecInt GParamSpecInt-desc)

;; struct _GParamSpecUInt {
;;   GParamSpec parent_instance;
;;   guint minimum;
;;   guint maximum;
;;   guint default_value;
;; };
(define struct-_GParamSpecUInt-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(minimum ,unsigned-int)
          `(maximum ,unsigned-int)
          `(default_value ,unsigned-int))))
(export struct-_GParamSpecUInt-desc)
(define-fh-compound-type/p struct-_GParamSpecUInt struct-_GParamSpecUInt-desc)
(set! GParamSpecUInt-desc struct-_GParamSpecUInt-desc)
(define-fh-compound-type GParamSpecUInt GParamSpecUInt-desc)

;; struct _GParamSpecLong {
;;   GParamSpec parent_instance;
;;   glong minimum;
;;   glong maximum;
;;   glong default_value;
;; };
(define struct-_GParamSpecLong-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(minimum ,long)
          `(maximum ,long)
          `(default_value ,long))))
(export struct-_GParamSpecLong-desc)
(define-fh-compound-type/p struct-_GParamSpecLong struct-_GParamSpecLong-desc)
(set! GParamSpecLong-desc struct-_GParamSpecLong-desc)
(define-fh-compound-type GParamSpecLong GParamSpecLong-desc)

;; struct _GParamSpecULong {
;;   GParamSpec parent_instance;
;;   gulong minimum;
;;   gulong maximum;
;;   gulong default_value;
;; };
(define struct-_GParamSpecULong-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(minimum ,unsigned-long)
          `(maximum ,unsigned-long)
          `(default_value ,unsigned-long))))
(export struct-_GParamSpecULong-desc)
(define-fh-compound-type/p struct-_GParamSpecULong struct-_GParamSpecULong-desc)
(set! GParamSpecULong-desc struct-_GParamSpecULong-desc)
(define-fh-compound-type GParamSpecULong GParamSpecULong-desc)

;; struct _GParamSpecInt64 {
;;   GParamSpec parent_instance;
;;   gint64 minimum;
;;   gint64 maximum;
;;   gint64 default_value;
;; };
(define struct-_GParamSpecInt64-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(minimum ,long)
          `(maximum ,long)
          `(default_value ,long))))
(export struct-_GParamSpecInt64-desc)
(define-fh-compound-type/p struct-_GParamSpecInt64 struct-_GParamSpecInt64-desc)
(set! GParamSpecInt64-desc struct-_GParamSpecInt64-desc)
(define-fh-compound-type GParamSpecInt64 GParamSpecInt64-desc)

;; struct _GParamSpecUInt64 {
;;   GParamSpec parent_instance;
;;   guint64 minimum;
;;   guint64 maximum;
;;   guint64 default_value;
;; };
(define struct-_GParamSpecUInt64-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(minimum ,unsigned-long)
          `(maximum ,unsigned-long)
          `(default_value ,unsigned-long))))
(export struct-_GParamSpecUInt64-desc)
(define-fh-compound-type/p struct-_GParamSpecUInt64 struct-_GParamSpecUInt64-desc)
(set! GParamSpecUInt64-desc struct-_GParamSpecUInt64-desc)
(define-fh-compound-type GParamSpecUInt64 GParamSpecUInt64-desc)

;; struct _GParamSpecUnichar {
;;   GParamSpec parent_instance;
;;   gunichar default_value;
;; };
(define struct-_GParamSpecUnichar-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(default_value ,unsigned-int))))
(export struct-_GParamSpecUnichar-desc)
(define-fh-compound-type/p struct-_GParamSpecUnichar struct-_GParamSpecUnichar-desc)
(set! GParamSpecUnichar-desc struct-_GParamSpecUnichar-desc)
(define-fh-compound-type GParamSpecUnichar GParamSpecUnichar-desc)

;; struct _GParamSpecEnum {
;;   GParamSpec parent_instance;
;;   GEnumClass *enum_class;
;;   gint default_value;
;; };
(define struct-_GParamSpecEnum-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(enum_class
             ,(bs:pointer (delay GEnumClass*-desc)))
          `(default_value ,int))))
(export struct-_GParamSpecEnum-desc)
(define-fh-compound-type/p struct-_GParamSpecEnum struct-_GParamSpecEnum-desc)
(set! GParamSpecEnum-desc struct-_GParamSpecEnum-desc)
(define-fh-compound-type GParamSpecEnum GParamSpecEnum-desc)

;; struct _GParamSpecFlags {
;;   GParamSpec parent_instance;
;;   GFlagsClass *flags_class;
;;   guint default_value;
;; };
(define struct-_GParamSpecFlags-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(flags_class
             ,(bs:pointer (delay GFlagsClass*-desc)))
          `(default_value ,unsigned-int))))
(export struct-_GParamSpecFlags-desc)
(define-fh-compound-type/p struct-_GParamSpecFlags struct-_GParamSpecFlags-desc)
(set! GParamSpecFlags-desc struct-_GParamSpecFlags-desc)
(define-fh-compound-type GParamSpecFlags GParamSpecFlags-desc)

;; struct _GParamSpecFloat {
;;   GParamSpec parent_instance;
;;   gfloat minimum;
;;   gfloat maximum;
;;   gfloat default_value;
;;   gfloat epsilon;
;; };
(define struct-_GParamSpecFloat-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(minimum ,gfloat-desc)
          `(maximum ,gfloat-desc)
          `(default_value ,gfloat-desc)
          `(epsilon ,gfloat-desc))))
(export struct-_GParamSpecFloat-desc)
(define-fh-compound-type/p struct-_GParamSpecFloat struct-_GParamSpecFloat-desc)
(set! GParamSpecFloat-desc struct-_GParamSpecFloat-desc)
(define-fh-compound-type GParamSpecFloat GParamSpecFloat-desc)

;; struct _GParamSpecDouble {
;;   GParamSpec parent_instance;
;;   gdouble minimum;
;;   gdouble maximum;
;;   gdouble default_value;
;;   gdouble epsilon;
;; };
(define struct-_GParamSpecDouble-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(minimum ,gdouble-desc)
          `(maximum ,gdouble-desc)
          `(default_value ,gdouble-desc)
          `(epsilon ,gdouble-desc))))
(export struct-_GParamSpecDouble-desc)
(define-fh-compound-type/p struct-_GParamSpecDouble struct-_GParamSpecDouble-desc)
(set! GParamSpecDouble-desc struct-_GParamSpecDouble-desc)
(define-fh-compound-type GParamSpecDouble GParamSpecDouble-desc)

;; struct _GParamSpecString {
;;   GParamSpec parent_instance;
;;   gchar *default_value;
;;   gchar *cset_first;
;;   gchar *cset_nth;
;;   gchar substitutor;
;;   guint null_fold_if_empty : 1;
;;   guint ensure_non_null : 1;
;; };
(define struct-_GParamSpecString-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(default_value ,(bs:pointer int))
          `(cset_first ,(bs:pointer int))
          `(cset_nth ,(bs:pointer int))
          `(substitutor ,int)
          `(null_fold_if_empty ,unsigned-int ,1)
          `(ensure_non_null ,unsigned-int ,1))))
(export struct-_GParamSpecString-desc)
(define-fh-compound-type/p struct-_GParamSpecString struct-_GParamSpecString-desc)
(set! GParamSpecString-desc struct-_GParamSpecString-desc)
(define-fh-compound-type GParamSpecString GParamSpecString-desc)

;; struct _GParamSpecParam {
;;   GParamSpec parent_instance;
;; };
(define struct-_GParamSpecParam-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc))))
(export struct-_GParamSpecParam-desc)
(define-fh-compound-type/p struct-_GParamSpecParam struct-_GParamSpecParam-desc)
(set! GParamSpecParam-desc struct-_GParamSpecParam-desc)
(define-fh-compound-type GParamSpecParam GParamSpecParam-desc)

;; struct _GParamSpecBoxed {
;;   GParamSpec parent_instance;
;; };
(define struct-_GParamSpecBoxed-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc))))
(export struct-_GParamSpecBoxed-desc)
(define-fh-compound-type/p struct-_GParamSpecBoxed struct-_GParamSpecBoxed-desc)
(set! GParamSpecBoxed-desc struct-_GParamSpecBoxed-desc)
(define-fh-compound-type GParamSpecBoxed GParamSpecBoxed-desc)

;; struct _GParamSpecPointer {
;;   GParamSpec parent_instance;
;; };
(define struct-_GParamSpecPointer-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc))))
(export struct-_GParamSpecPointer-desc)
(define-fh-compound-type/p struct-_GParamSpecPointer struct-_GParamSpecPointer-desc)
(set! GParamSpecPointer-desc struct-_GParamSpecPointer-desc)
(define-fh-compound-type GParamSpecPointer GParamSpecPointer-desc)

;; struct _GParamSpecValueArray {
;;   GParamSpec parent_instance;
;;   GParamSpec *element_spec;
;;   guint fixed_n_elements;
;; };
(define struct-_GParamSpecValueArray-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(element_spec
             ,(bs:pointer (delay GParamSpec*-desc)))
          `(fixed_n_elements ,unsigned-int))))
(export struct-_GParamSpecValueArray-desc)
(define-fh-compound-type/p struct-_GParamSpecValueArray struct-_GParamSpecValueArray-desc)
(set! GParamSpecValueArray-desc struct-_GParamSpecValueArray-desc)
(define-fh-compound-type GParamSpecValueArray GParamSpecValueArray-desc)

;; struct _GParamSpecObject {
;;   GParamSpec parent_instance;
;; };
(define struct-_GParamSpecObject-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc))))
(export struct-_GParamSpecObject-desc)
(define-fh-compound-type/p struct-_GParamSpecObject struct-_GParamSpecObject-desc)
(set! GParamSpecObject-desc struct-_GParamSpecObject-desc)
(define-fh-compound-type GParamSpecObject GParamSpecObject-desc)

;; struct _GParamSpecOverride {
;;   /*< private >*/
;;   GParamSpec parent_instance;
;;   GParamSpec *overridden;
;; };
(define struct-_GParamSpecOverride-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(overridden
             ,(bs:pointer (delay GParamSpec*-desc))))))
(export struct-_GParamSpecOverride-desc)
(define-fh-compound-type/p struct-_GParamSpecOverride struct-_GParamSpecOverride-desc)
(set! GParamSpecOverride-desc struct-_GParamSpecOverride-desc)
(define-fh-compound-type GParamSpecOverride GParamSpecOverride-desc)

;; struct _GParamSpecGType {
;;   GParamSpec parent_instance;
;;   GType is_a_type;
;; };
(define struct-_GParamSpecGType-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(is_a_type ,unsigned-long))))
(export struct-_GParamSpecGType-desc)
(define-fh-compound-type/p struct-_GParamSpecGType struct-_GParamSpecGType-desc)
(set! GParamSpecGType-desc struct-_GParamSpecGType-desc)
(define-fh-compound-type GParamSpecGType GParamSpecGType-desc)

;; struct _GParamSpecVariant {
;;   GParamSpec parent_instance;
;;   GVariantType *type;
;;   GVariant *default_value;
;;   /*< private >*/
;;   gpointer padding[4];
;; };
(define struct-_GParamSpecVariant-desc
  (bs:struct
    (list `(parent_instance ,GParamSpec-desc)
          `(type ,(bs:pointer (delay GVariantType*-desc)))
          `(default_value
             ,(bs:pointer (delay GVariant*-desc)))
          `(padding ,(bs:vector 4 gpointer-desc)))))
(export struct-_GParamSpecVariant-desc)
(define-fh-compound-type/p struct-_GParamSpecVariant struct-_GParamSpecVariant-desc)
(set! GParamSpecVariant-desc struct-_GParamSpecVariant-desc)
(define-fh-compound-type GParamSpecVariant GParamSpecVariant-desc)

;; extern GParamSpec *g_param_spec_char(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, gint8 minimum, gint8 maximum, gint8 default_value, 
;;     GParamFlags flags);
(define ~g_param_spec_char #f)
(define (g_param_spec_char
         name
         nick
         blurb
         minimum
         maximum
         default_value
         flags)
  (unless
    ~g_param_spec_char
    (set! ~g_param_spec_char
      (fh-link-proc
        "g_param_spec_char"
        '*
        (list '* '* '* ffi:int ffi:int ffi:int ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~minimum (unwrap~fixed minimum))
        (~maximum (unwrap~fixed maximum))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_char
        ~name
        ~nick
        ~blurb
        ~minimum
        ~maximum
        ~default_value
        ~flags))))
(export g_param_spec_char)

;; extern GParamSpec *g_param_spec_uchar(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, guint8 minimum, guint8 maximum, guint8 default_value
;;     , GParamFlags flags);
(define ~g_param_spec_uchar #f)
(define (g_param_spec_uchar
         name
         nick
         blurb
         minimum
         maximum
         default_value
         flags)
  (unless
    ~g_param_spec_uchar
    (set! ~g_param_spec_uchar
      (fh-link-proc
        "g_param_spec_uchar"
        '*
        (list '*
              '*
              '*
              ffi:unsigned-int
              ffi:unsigned-int
              ffi:unsigned-int
              ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~minimum (unwrap~fixed minimum))
        (~maximum (unwrap~fixed maximum))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_uchar
        ~name
        ~nick
        ~blurb
        ~minimum
        ~maximum
        ~default_value
        ~flags))))
(export g_param_spec_uchar)

;; extern GParamSpec *g_param_spec_boolean(const gchar *name, const gchar *nick
;;     , const gchar *blurb, gboolean default_value, GParamFlags flags);
(define ~g_param_spec_boolean #f)
(define (g_param_spec_boolean
         name
         nick
         blurb
         default_value
         flags)
  (unless
    ~g_param_spec_boolean
    (set! ~g_param_spec_boolean
      (fh-link-proc
        "g_param_spec_boolean"
        '*
        (list '* '* '* ffi:int ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_boolean
        ~name
        ~nick
        ~blurb
        ~default_value
        ~flags))))
(export g_param_spec_boolean)

;; extern GParamSpec *g_param_spec_int(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, gint minimum, gint maximum, gint default_value, 
;;     GParamFlags flags);
(define ~g_param_spec_int #f)
(define (g_param_spec_int
         name
         nick
         blurb
         minimum
         maximum
         default_value
         flags)
  (unless
    ~g_param_spec_int
    (set! ~g_param_spec_int
      (fh-link-proc
        "g_param_spec_int"
        '*
        (list '* '* '* ffi:int ffi:int ffi:int ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~minimum (unwrap~fixed minimum))
        (~maximum (unwrap~fixed maximum))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_int
        ~name
        ~nick
        ~blurb
        ~minimum
        ~maximum
        ~default_value
        ~flags))))
(export g_param_spec_int)

;; extern GParamSpec *g_param_spec_uint(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, guint minimum, guint maximum, guint default_value, 
;;     GParamFlags flags);
(define ~g_param_spec_uint #f)
(define (g_param_spec_uint
         name
         nick
         blurb
         minimum
         maximum
         default_value
         flags)
  (unless
    ~g_param_spec_uint
    (set! ~g_param_spec_uint
      (fh-link-proc
        "g_param_spec_uint"
        '*
        (list '*
              '*
              '*
              ffi:unsigned-int
              ffi:unsigned-int
              ffi:unsigned-int
              ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~minimum (unwrap~fixed minimum))
        (~maximum (unwrap~fixed maximum))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_uint
        ~name
        ~nick
        ~blurb
        ~minimum
        ~maximum
        ~default_value
        ~flags))))
(export g_param_spec_uint)

;; extern GParamSpec *g_param_spec_long(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, glong minimum, glong maximum, glong default_value, 
;;     GParamFlags flags);
(define ~g_param_spec_long #f)
(define (g_param_spec_long
         name
         nick
         blurb
         minimum
         maximum
         default_value
         flags)
  (unless
    ~g_param_spec_long
    (set! ~g_param_spec_long
      (fh-link-proc
        "g_param_spec_long"
        '*
        (list '*
              '*
              '*
              ffi:long
              ffi:long
              ffi:long
              ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~minimum (unwrap~fixed minimum))
        (~maximum (unwrap~fixed maximum))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_long
        ~name
        ~nick
        ~blurb
        ~minimum
        ~maximum
        ~default_value
        ~flags))))
(export g_param_spec_long)

;; extern GParamSpec *g_param_spec_ulong(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, gulong minimum, gulong maximum, gulong default_value
;;     , GParamFlags flags);
(define ~g_param_spec_ulong #f)
(define (g_param_spec_ulong
         name
         nick
         blurb
         minimum
         maximum
         default_value
         flags)
  (unless
    ~g_param_spec_ulong
    (set! ~g_param_spec_ulong
      (fh-link-proc
        "g_param_spec_ulong"
        '*
        (list '*
              '*
              '*
              ffi:unsigned-long
              ffi:unsigned-long
              ffi:unsigned-long
              ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~minimum (unwrap~fixed minimum))
        (~maximum (unwrap~fixed maximum))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_ulong
        ~name
        ~nick
        ~blurb
        ~minimum
        ~maximum
        ~default_value
        ~flags))))
(export g_param_spec_ulong)

;; extern GParamSpec *g_param_spec_int64(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, gint64 minimum, gint64 maximum, gint64 default_value
;;     , GParamFlags flags);
(define ~g_param_spec_int64 #f)
(define (g_param_spec_int64
         name
         nick
         blurb
         minimum
         maximum
         default_value
         flags)
  (unless
    ~g_param_spec_int64
    (set! ~g_param_spec_int64
      (fh-link-proc
        "g_param_spec_int64"
        '*
        (list '*
              '*
              '*
              ffi:long
              ffi:long
              ffi:long
              ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~minimum (unwrap~fixed minimum))
        (~maximum (unwrap~fixed maximum))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_int64
        ~name
        ~nick
        ~blurb
        ~minimum
        ~maximum
        ~default_value
        ~flags))))
(export g_param_spec_int64)

;; extern GParamSpec *g_param_spec_uint64(const gchar *name, const gchar *nick
;;     , const gchar *blurb, guint64 minimum, guint64 maximum, guint64 
;;     default_value, GParamFlags flags);
(define ~g_param_spec_uint64 #f)
(define (g_param_spec_uint64
         name
         nick
         blurb
         minimum
         maximum
         default_value
         flags)
  (unless
    ~g_param_spec_uint64
    (set! ~g_param_spec_uint64
      (fh-link-proc
        "g_param_spec_uint64"
        '*
        (list '*
              '*
              '*
              ffi:unsigned-long
              ffi:unsigned-long
              ffi:unsigned-long
              ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~minimum (unwrap~fixed minimum))
        (~maximum (unwrap~fixed maximum))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_uint64
        ~name
        ~nick
        ~blurb
        ~minimum
        ~maximum
        ~default_value
        ~flags))))
(export g_param_spec_uint64)

;; extern GParamSpec *g_param_spec_unichar(const gchar *name, const gchar *nick
;;     , const gchar *blurb, gunichar default_value, GParamFlags flags);
(define ~g_param_spec_unichar #f)
(define (g_param_spec_unichar
         name
         nick
         blurb
         default_value
         flags)
  (unless
    ~g_param_spec_unichar
    (set! ~g_param_spec_unichar
      (fh-link-proc
        "g_param_spec_unichar"
        '*
        (list '* '* '* ffi:unsigned-int ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_unichar
        ~name
        ~nick
        ~blurb
        ~default_value
        ~flags))))
(export g_param_spec_unichar)

;; extern GParamSpec *g_param_spec_enum(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, GType enum_type, gint default_value, GParamFlags 
;;     flags);
(define ~g_param_spec_enum #f)
(define (g_param_spec_enum
         name
         nick
         blurb
         enum_type
         default_value
         flags)
  (unless
    ~g_param_spec_enum
    (set! ~g_param_spec_enum
      (fh-link-proc
        "g_param_spec_enum"
        '*
        (list '* '* '* ffi:unsigned-long ffi:int ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~enum_type (unwrap~fixed enum_type))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_enum
        ~name
        ~nick
        ~blurb
        ~enum_type
        ~default_value
        ~flags))))
(export g_param_spec_enum)

;; extern GParamSpec *g_param_spec_flags(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, GType flags_type, guint default_value, GParamFlags 
;;     flags);
(define ~g_param_spec_flags #f)
(define (g_param_spec_flags
         name
         nick
         blurb
         flags_type
         default_value
         flags)
  (unless
    ~g_param_spec_flags
    (set! ~g_param_spec_flags
      (fh-link-proc
        "g_param_spec_flags"
        '*
        (list '*
              '*
              '*
              ffi:unsigned-long
              ffi:unsigned-int
              ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~flags_type (unwrap~fixed flags_type))
        (~default_value (unwrap~fixed default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_flags
        ~name
        ~nick
        ~blurb
        ~flags_type
        ~default_value
        ~flags))))
(export g_param_spec_flags)

;; extern GParamSpec *g_param_spec_float(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, gfloat minimum, gfloat maximum, gfloat default_value
;;     , GParamFlags flags);
(define ~g_param_spec_float #f)
(define (g_param_spec_float
         name
         nick
         blurb
         minimum
         maximum
         default_value
         flags)
  (unless
    ~g_param_spec_float
    (set! ~g_param_spec_float
      (fh-link-proc
        "g_param_spec_float"
        '*
        (list '*
              '*
              '*
              ffi:float
              ffi:float
              ffi:float
              ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~minimum (unwrap-gfloat minimum))
        (~maximum (unwrap-gfloat maximum))
        (~default_value (unwrap-gfloat default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_float
        ~name
        ~nick
        ~blurb
        ~minimum
        ~maximum
        ~default_value
        ~flags))))
(export g_param_spec_float)

;; extern GParamSpec *g_param_spec_double(const gchar *name, const gchar *nick
;;     , const gchar *blurb, gdouble minimum, gdouble maximum, gdouble 
;;     default_value, GParamFlags flags);
(define ~g_param_spec_double #f)
(define (g_param_spec_double
         name
         nick
         blurb
         minimum
         maximum
         default_value
         flags)
  (unless
    ~g_param_spec_double
    (set! ~g_param_spec_double
      (fh-link-proc
        "g_param_spec_double"
        '*
        (list '*
              '*
              '*
              ffi:double
              ffi:double
              ffi:double
              ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~minimum (unwrap-gdouble minimum))
        (~maximum (unwrap-gdouble maximum))
        (~default_value (unwrap-gdouble default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_double
        ~name
        ~nick
        ~blurb
        ~minimum
        ~maximum
        ~default_value
        ~flags))))
(export g_param_spec_double)

;; extern GParamSpec *g_param_spec_string(const gchar *name, const gchar *nick
;;     , const gchar *blurb, const gchar *default_value, GParamFlags flags);
(define ~g_param_spec_string #f)
(define (g_param_spec_string
         name
         nick
         blurb
         default_value
         flags)
  (unless
    ~g_param_spec_string
    (set! ~g_param_spec_string
      (fh-link-proc
        "g_param_spec_string"
        '*
        (list '* '* '* '* ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~default_value (unwrap~pointer default_value))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_string
        ~name
        ~nick
        ~blurb
        ~default_value
        ~flags))))
(export g_param_spec_string)

;; extern GParamSpec *g_param_spec_param(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, GType param_type, GParamFlags flags);
(define ~g_param_spec_param #f)
(define (g_param_spec_param
         name
         nick
         blurb
         param_type
         flags)
  (unless
    ~g_param_spec_param
    (set! ~g_param_spec_param
      (fh-link-proc
        "g_param_spec_param"
        '*
        (list '* '* '* ffi:unsigned-long ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~param_type (unwrap~fixed param_type))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_param
        ~name
        ~nick
        ~blurb
        ~param_type
        ~flags))))
(export g_param_spec_param)

;; extern GParamSpec *g_param_spec_boxed(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, GType boxed_type, GParamFlags flags);
(define ~g_param_spec_boxed #f)
(define (g_param_spec_boxed
         name
         nick
         blurb
         boxed_type
         flags)
  (unless
    ~g_param_spec_boxed
    (set! ~g_param_spec_boxed
      (fh-link-proc
        "g_param_spec_boxed"
        '*
        (list '* '* '* ffi:unsigned-long ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~boxed_type (unwrap~fixed boxed_type))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_boxed
        ~name
        ~nick
        ~blurb
        ~boxed_type
        ~flags))))
(export g_param_spec_boxed)

;; extern GParamSpec *g_param_spec_pointer(const gchar *name, const gchar *nick
;;     , const gchar *blurb, GParamFlags flags);
(define ~g_param_spec_pointer #f)
(define (g_param_spec_pointer name nick blurb flags)
  (unless
    ~g_param_spec_pointer
    (set! ~g_param_spec_pointer
      (fh-link-proc
        "g_param_spec_pointer"
        '*
        (list '* '* '* ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_pointer ~name ~nick ~blurb ~flags))))
(export g_param_spec_pointer)

;; extern GParamSpec *g_param_spec_value_array(const gchar *name, const gchar *
;;     nick, const gchar *blurb, GParamSpec *element_spec, GParamFlags flags);
(define ~g_param_spec_value_array #f)
(define (g_param_spec_value_array
         name
         nick
         blurb
         element_spec
         flags)
  (unless
    ~g_param_spec_value_array
    (set! ~g_param_spec_value_array
      (fh-link-proc
        "g_param_spec_value_array"
        '*
        (list '* '* '* '* ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~element_spec (unwrap-GParamSpec* element_spec))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_value_array
        ~name
        ~nick
        ~blurb
        ~element_spec
        ~flags))))
(export g_param_spec_value_array)

;; extern GParamSpec *g_param_spec_object(const gchar *name, const gchar *nick
;;     , const gchar *blurb, GType object_type, GParamFlags flags);
(define ~g_param_spec_object #f)
(define (g_param_spec_object
         name
         nick
         blurb
         object_type
         flags)
  (unless
    ~g_param_spec_object
    (set! ~g_param_spec_object
      (fh-link-proc
        "g_param_spec_object"
        '*
        (list '* '* '* ffi:unsigned-long ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~object_type (unwrap~fixed object_type))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_object
        ~name
        ~nick
        ~blurb
        ~object_type
        ~flags))))
(export g_param_spec_object)

;; extern GParamSpec *g_param_spec_override(const gchar *name, GParamSpec *
;;     overridden);
(define ~g_param_spec_override #f)
(define (g_param_spec_override name overridden)
  (unless
    ~g_param_spec_override
    (set! ~g_param_spec_override
      (fh-link-proc
        "g_param_spec_override"
        '*
        (list '* '*))))
  (let ((~name (unwrap~pointer name))
        (~overridden (unwrap-GParamSpec* overridden)))
    (wrap-GParamSpec*
      (~g_param_spec_override ~name ~overridden))))
(export g_param_spec_override)

;; extern GParamSpec *g_param_spec_gtype(const gchar *name, const gchar *nick, 
;;     const gchar *blurb, GType is_a_type, GParamFlags flags);
(define ~g_param_spec_gtype #f)
(define (g_param_spec_gtype
         name
         nick
         blurb
         is_a_type
         flags)
  (unless
    ~g_param_spec_gtype
    (set! ~g_param_spec_gtype
      (fh-link-proc
        "g_param_spec_gtype"
        '*
        (list '* '* '* ffi:unsigned-long ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~is_a_type (unwrap~fixed is_a_type))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_gtype
        ~name
        ~nick
        ~blurb
        ~is_a_type
        ~flags))))
(export g_param_spec_gtype)

;; extern GParamSpec *g_param_spec_variant(const gchar *name, const gchar *nick
;;     , const gchar *blurb, const GVariantType *type, GVariant *default_value
;;     , GParamFlags flags);
(define ~g_param_spec_variant #f)
(define (g_param_spec_variant
         name
         nick
         blurb
         type
         default_value
         flags)
  (unless
    ~g_param_spec_variant
    (set! ~g_param_spec_variant
      (fh-link-proc
        "g_param_spec_variant"
        '*
        (list '* '* '* '* '* ffi:int))))
  (let ((~name (unwrap~pointer name))
        (~nick (unwrap~pointer nick))
        (~blurb (unwrap~pointer blurb))
        (~flags (unwrap~fixed flags)))
    (wrap-GParamSpec*
      (~g_param_spec_variant
        ~name
        ~nick
        ~blurb
        type
        default_value
        ~flags))))
(export g_param_spec_variant)

;; extern GType *g_param_spec_types;
(define g_param_spec_types (dynamic-pointer "g_param_spec_types" (dynamic-link)))

;; extern void g_source_set_closure(GSource *source, GClosure *closure);
(define ~g_source_set_closure #f)
(define (g_source_set_closure source closure)
  (unless
    ~g_source_set_closure
    (set! ~g_source_set_closure
      (fh-link-proc
        "g_source_set_closure"
        ffi:void
        (list '* '*))))
  (let ((~closure (unwrap-GClosure* closure)))
    (~g_source_set_closure source ~closure)))
(export g_source_set_closure)

;; extern void g_source_set_dummy_callback(GSource *source);
(define ~g_source_set_dummy_callback #f)
(define (g_source_set_dummy_callback source)
  (unless
    ~g_source_set_dummy_callback
    (set! ~g_source_set_dummy_callback
      (fh-link-proc
        "g_source_set_dummy_callback"
        ffi:void
        (list '*))))
  (let () (~g_source_set_dummy_callback source)))
(export g_source_set_dummy_callback)

;; typedef struct _GTypeModule GTypeModule;
(define GTypeModule-desc void)
(export GTypeModule-desc)
(define GTypeModule*-desc (bs:pointer (delay GTypeModule-desc)))
(export GTypeModule*-desc)
(define-fh-pointer-type GTypeModule* GTypeModule*-desc)

;; typedef struct _GTypeModuleClass GTypeModuleClass;
(define GTypeModuleClass-desc void)
(export GTypeModuleClass-desc)
(define GTypeModuleClass*-desc (bs:pointer (delay GTypeModuleClass-desc)))
(export GTypeModuleClass*-desc)
(define-fh-pointer-type GTypeModuleClass* GTypeModuleClass*-desc)

;; typedef GTypeModule *GTypeModule_autoptr;
(define GTypeModule_autoptr-desc (bs:pointer GTypeModule-desc))
(export GTypeModule_autoptr-desc)
(define-fh-pointer-type GTypeModule_autoptr GTypeModule_autoptr-desc)

;; struct _GTypeModule {
;;   GObject parent_instance;
;;   guint use_count;
;;   GSList *type_infos;
;;   GSList *interface_infos;
;;   /*< public >*/
;;   gchar *name;
;; };
(define struct-_GTypeModule-desc
  (bs:struct
    (list `(parent_instance ,GObject-desc)
          `(use_count ,unsigned-int)
          `(type_infos ,(bs:pointer (delay GSList*-desc)))
          `(interface_infos
             ,(bs:pointer (delay GSList*-desc)))
          `(name ,(bs:pointer int)))))
(export struct-_GTypeModule-desc)
(define-fh-compound-type/p struct-_GTypeModule struct-_GTypeModule-desc)
(set! GTypeModule-desc struct-_GTypeModule-desc)
(define-fh-compound-type GTypeModule GTypeModule-desc)

;; struct _GTypeModuleClass {
;;   GObjectClass parent_class;
;;   /*< public >*/
;;   gboolean (*load)(GTypeModule *module);
;;   void (*unload)(GTypeModule *module);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*reserved1)(void);
;;   void (*reserved2)(void);
;;   void (*reserved3)(void);
;;   void (*reserved4)(void);
;; };
(define struct-_GTypeModuleClass-desc
  (bs:struct
    (list `(parent_class ,GObjectClass-desc)
          `(load ,(bs:pointer void))
          `(unload ,(bs:pointer void))
          `(reserved1 ,(bs:pointer void))
          `(reserved2 ,(bs:pointer void))
          `(reserved3 ,(bs:pointer void))
          `(reserved4 ,(bs:pointer void)))))
(export struct-_GTypeModuleClass-desc)
(define-fh-compound-type/p struct-_GTypeModuleClass struct-_GTypeModuleClass-desc)
(set! GTypeModuleClass-desc struct-_GTypeModuleClass-desc)
(define-fh-compound-type GTypeModuleClass GTypeModuleClass-desc)

;; extern GType g_type_module_get_type(void);
(define ~g_type_module_get_type #f)
(define (g_type_module_get_type)
  (unless
    ~g_type_module_get_type
    (set! ~g_type_module_get_type
      (fh-link-proc
        "g_type_module_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_type_module_get_type)))
(export g_type_module_get_type)

;; extern gboolean g_type_module_use(GTypeModule *module);
(define ~g_type_module_use #f)
(define (g_type_module_use module)
  (unless
    ~g_type_module_use
    (set! ~g_type_module_use
      (fh-link-proc
        "g_type_module_use"
        ffi:int
        (list '*))))
  (let ((~module (unwrap-GTypeModule* module)))
    (~g_type_module_use ~module)))
(export g_type_module_use)

;; extern void g_type_module_unuse(GTypeModule *module);
(define ~g_type_module_unuse #f)
(define (g_type_module_unuse module)
  (unless
    ~g_type_module_unuse
    (set! ~g_type_module_unuse
      (fh-link-proc
        "g_type_module_unuse"
        ffi:void
        (list '*))))
  (let ((~module (unwrap-GTypeModule* module)))
    (~g_type_module_unuse ~module)))
(export g_type_module_unuse)

;; extern void g_type_module_set_name(GTypeModule *module, const gchar *name);
(define ~g_type_module_set_name #f)
(define (g_type_module_set_name module name)
  (unless
    ~g_type_module_set_name
    (set! ~g_type_module_set_name
      (fh-link-proc
        "g_type_module_set_name"
        ffi:void
        (list '* '*))))
  (let ((~module (unwrap-GTypeModule* module))
        (~name (unwrap~pointer name)))
    (~g_type_module_set_name ~module ~name)))
(export g_type_module_set_name)

;; extern GType g_type_module_register_type(GTypeModule *module, GType 
;;     parent_type, const gchar *type_name, const GTypeInfo *type_info, 
;;     GTypeFlags flags);
(define ~g_type_module_register_type #f)
(define (g_type_module_register_type
         module
         parent_type
         type_name
         type_info
         flags)
  (unless
    ~g_type_module_register_type
    (set! ~g_type_module_register_type
      (fh-link-proc
        "g_type_module_register_type"
        ffi:unsigned-long
        (list '* ffi:unsigned-long '* '* ffi:int))))
  (let ((~module (unwrap-GTypeModule* module))
        (~parent_type (unwrap~fixed parent_type))
        (~type_name (unwrap~pointer type_name))
        (~type_info (unwrap-GTypeInfo* type_info))
        (~flags (unwrap~fixed flags)))
    (~g_type_module_register_type
      ~module
      ~parent_type
      ~type_name
      ~type_info
      ~flags)))
(export g_type_module_register_type)

;; extern void g_type_module_add_interface(GTypeModule *module, GType 
;;     instance_type, GType interface_type, const GInterfaceInfo *
;;     interface_info);
(define ~g_type_module_add_interface #f)
(define (g_type_module_add_interface
         module
         instance_type
         interface_type
         interface_info)
  (unless
    ~g_type_module_add_interface
    (set! ~g_type_module_add_interface
      (fh-link-proc
        "g_type_module_add_interface"
        ffi:void
        (list '* ffi:unsigned-long ffi:unsigned-long '*))))
  (let ((~module (unwrap-GTypeModule* module))
        (~instance_type (unwrap~fixed instance_type))
        (~interface_type (unwrap~fixed interface_type))
        (~interface_info
          (unwrap-GInterfaceInfo* interface_info)))
    (~g_type_module_add_interface
      ~module
      ~instance_type
      ~interface_type
      ~interface_info)))
(export g_type_module_add_interface)

;; extern GType g_type_module_register_enum(GTypeModule *module, const gchar *
;;     name, const GEnumValue *const_static_values);
(define ~g_type_module_register_enum #f)
(define (g_type_module_register_enum
         module
         name
         const_static_values)
  (unless
    ~g_type_module_register_enum
    (set! ~g_type_module_register_enum
      (fh-link-proc
        "g_type_module_register_enum"
        ffi:unsigned-long
        (list '* '* '*))))
  (let ((~module (unwrap-GTypeModule* module))
        (~name (unwrap~pointer name))
        (~const_static_values
          (unwrap-GEnumValue* const_static_values)))
    (~g_type_module_register_enum
      ~module
      ~name
      ~const_static_values)))
(export g_type_module_register_enum)

;; extern GType g_type_module_register_flags(GTypeModule *module, const gchar *
;;     name, const GFlagsValue *const_static_values);
(define ~g_type_module_register_flags #f)
(define (g_type_module_register_flags
         module
         name
         const_static_values)
  (unless
    ~g_type_module_register_flags
    (set! ~g_type_module_register_flags
      (fh-link-proc
        "g_type_module_register_flags"
        ffi:unsigned-long
        (list '* '* '*))))
  (let ((~module (unwrap-GTypeModule* module))
        (~name (unwrap~pointer name))
        (~const_static_values
          (unwrap-GFlagsValue* const_static_values)))
    (~g_type_module_register_flags
      ~module
      ~name
      ~const_static_values)))
(export g_type_module_register_flags)

;; typedef struct _GTypePluginClass GTypePluginClass;
(define GTypePluginClass-desc void)
(export GTypePluginClass-desc)
(define GTypePluginClass*-desc (bs:pointer (delay GTypePluginClass-desc)))
(export GTypePluginClass*-desc)
(define-fh-pointer-type GTypePluginClass* GTypePluginClass*-desc)

;; typedef void (*GTypePluginUse)(GTypePlugin *plugin);
(define-fh-function/p GTypePluginUse
  ffi:void (list (quote *)))

;; typedef void (*GTypePluginUnuse)(GTypePlugin *plugin);
(define-fh-function/p GTypePluginUnuse
  ffi:void (list (quote *)))

;; typedef void (*GTypePluginCompleteTypeInfo)(GTypePlugin *plugin, GType 
;;     g_type, GTypeInfo *info, GTypeValueTable *value_table);
(define-fh-function/p GTypePluginCompleteTypeInfo
  ffi:void (list (quote *) ffi:unsigned-long (quote *) (quote *)))

;; typedef void (*GTypePluginCompleteInterfaceInfo)(GTypePlugin *plugin, GType 
;;     instance_type, GType interface_type, GInterfaceInfo *info);
(define-fh-function/p GTypePluginCompleteInterfaceInfo
  ffi:void (list (quote *) ffi:unsigned-long ffi:unsigned-long (quote *)))

;; struct _GTypePluginClass {
;;   /*< private >*/
;;   GTypeInterface base_iface;
;;   /*< public >*/
;;   GTypePluginUse use_plugin;
;;   GTypePluginUnuse unuse_plugin;
;;   GTypePluginCompleteTypeInfo complete_type_info;
;;   GTypePluginCompleteInterfaceInfo complete_interface_info;
;; };
(define struct-_GTypePluginClass-desc
  (bs:struct
    (list `(base_iface ,GTypeInterface-desc)
          `(use_plugin ,(bs:pointer void))
          `(unuse_plugin ,(bs:pointer void))
          `(complete_type_info ,(bs:pointer void))
          `(complete_interface_info ,(bs:pointer void)))))
(export struct-_GTypePluginClass-desc)
(define-fh-compound-type/p struct-_GTypePluginClass struct-_GTypePluginClass-desc)
(set! GTypePluginClass-desc struct-_GTypePluginClass-desc)
(define-fh-compound-type GTypePluginClass GTypePluginClass-desc)

;; extern GType g_type_plugin_get_type(void);
(define ~g_type_plugin_get_type #f)
(define (g_type_plugin_get_type)
  (unless
    ~g_type_plugin_get_type
    (set! ~g_type_plugin_get_type
      (fh-link-proc
        "g_type_plugin_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_type_plugin_get_type)))
(export g_type_plugin_get_type)

;; extern void g_type_plugin_use(GTypePlugin *plugin);
(define ~g_type_plugin_use #f)
(define (g_type_plugin_use plugin)
  (unless
    ~g_type_plugin_use
    (set! ~g_type_plugin_use
      (fh-link-proc
        "g_type_plugin_use"
        ffi:void
        (list '*))))
  (let ((~plugin (unwrap-GTypePlugin* plugin)))
    (~g_type_plugin_use ~plugin)))
(export g_type_plugin_use)

;; extern void g_type_plugin_unuse(GTypePlugin *plugin);
(define ~g_type_plugin_unuse #f)
(define (g_type_plugin_unuse plugin)
  (unless
    ~g_type_plugin_unuse
    (set! ~g_type_plugin_unuse
      (fh-link-proc
        "g_type_plugin_unuse"
        ffi:void
        (list '*))))
  (let ((~plugin (unwrap-GTypePlugin* plugin)))
    (~g_type_plugin_unuse ~plugin)))
(export g_type_plugin_unuse)

;; extern void g_type_plugin_complete_type_info(GTypePlugin *plugin, GType 
;;     g_type, GTypeInfo *info, GTypeValueTable *value_table);
(define ~g_type_plugin_complete_type_info #f)
(define (g_type_plugin_complete_type_info
         plugin
         g_type
         info
         value_table)
  (unless
    ~g_type_plugin_complete_type_info
    (set! ~g_type_plugin_complete_type_info
      (fh-link-proc
        "g_type_plugin_complete_type_info"
        ffi:void
        (list '* ffi:unsigned-long '* '*))))
  (let ((~plugin (unwrap-GTypePlugin* plugin))
        (~g_type (unwrap~fixed g_type))
        (~info (unwrap-GTypeInfo* info))
        (~value_table
          (unwrap-GTypeValueTable* value_table)))
    (~g_type_plugin_complete_type_info
      ~plugin
      ~g_type
      ~info
      ~value_table)))
(export g_type_plugin_complete_type_info)

;; extern void g_type_plugin_complete_interface_info(GTypePlugin *plugin, GType
;;      instance_type, GType interface_type, GInterfaceInfo *info);
(define ~g_type_plugin_complete_interface_info #f)
(define (g_type_plugin_complete_interface_info
         plugin
         instance_type
         interface_type
         info)
  (unless
    ~g_type_plugin_complete_interface_info
    (set! ~g_type_plugin_complete_interface_info
      (fh-link-proc
        "g_type_plugin_complete_interface_info"
        ffi:void
        (list '* ffi:unsigned-long ffi:unsigned-long '*))))
  (let ((~plugin (unwrap-GTypePlugin* plugin))
        (~instance_type (unwrap~fixed instance_type))
        (~interface_type (unwrap~fixed interface_type))
        (~info (unwrap-GInterfaceInfo* info)))
    (~g_type_plugin_complete_interface_info
      ~plugin
      ~instance_type
      ~interface_type
      ~info)))
(export g_type_plugin_complete_interface_info)

;; typedef struct _GValueArray GValueArray;
(define GValueArray-desc void)
(export GValueArray-desc)
(define GValueArray*-desc (bs:pointer (delay GValueArray-desc)))
(export GValueArray*-desc)
(define-fh-pointer-type GValueArray* GValueArray*-desc)

;; struct _GValueArray {
;;   guint n_values;
;;   GValue *values;
;;   /*< private >*/
;;   guint n_prealloced;
;; };
(define struct-_GValueArray-desc
  (bs:struct
    (list `(n_values ,unsigned-int)
          `(values ,(bs:pointer (delay GValue*-desc)))
          `(n_prealloced ,unsigned-int))))
(export struct-_GValueArray-desc)
(define-fh-compound-type/p struct-_GValueArray struct-_GValueArray-desc)
(set! GValueArray-desc struct-_GValueArray-desc)
(define-fh-compound-type GValueArray GValueArray-desc)

;; extern GType g_value_array_get_type(void);
(define ~g_value_array_get_type #f)
(define (g_value_array_get_type)
  (unless
    ~g_value_array_get_type
    (set! ~g_value_array_get_type
      (fh-link-proc
        "g_value_array_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_value_array_get_type)))
(export g_value_array_get_type)

;; extern GValue *g_value_array_get_nth(GValueArray *value_array, guint index_)
;;     ;
(define ~g_value_array_get_nth #f)
(define (g_value_array_get_nth value_array index_)
  (unless
    ~g_value_array_get_nth
    (set! ~g_value_array_get_nth
      (fh-link-proc
        "g_value_array_get_nth"
        '*
        (list '* ffi:unsigned-int))))
  (let ((~value_array (unwrap-GValueArray* value_array))
        (~index_ (unwrap~fixed index_)))
    (wrap-GValue*
      (~g_value_array_get_nth ~value_array ~index_))))
(export g_value_array_get_nth)

;; extern GValueArray *g_value_array_new(guint n_prealloced);
(define ~g_value_array_new #f)
(define (g_value_array_new n_prealloced)
  (unless
    ~g_value_array_new
    (set! ~g_value_array_new
      (fh-link-proc
        "g_value_array_new"
        '*
        (list ffi:unsigned-int))))
  (let ((~n_prealloced (unwrap~fixed n_prealloced)))
    (wrap-GValueArray*
      (~g_value_array_new ~n_prealloced))))
(export g_value_array_new)

;; extern void g_value_array_free(GValueArray *value_array);
(define ~g_value_array_free #f)
(define (g_value_array_free value_array)
  (unless
    ~g_value_array_free
    (set! ~g_value_array_free
      (fh-link-proc
        "g_value_array_free"
        ffi:void
        (list '*))))
  (let ((~value_array (unwrap-GValueArray* value_array)))
    (~g_value_array_free ~value_array)))
(export g_value_array_free)

;; extern GValueArray *g_value_array_copy(const GValueArray *value_array);
(define ~g_value_array_copy #f)
(define (g_value_array_copy value_array)
  (unless
    ~g_value_array_copy
    (set! ~g_value_array_copy
      (fh-link-proc "g_value_array_copy" '* (list '*))))
  (let ((~value_array (unwrap-GValueArray* value_array)))
    (wrap-GValueArray*
      (~g_value_array_copy ~value_array))))
(export g_value_array_copy)

;; extern GValueArray *g_value_array_prepend(GValueArray *value_array, const 
;;     GValue *value);
(define ~g_value_array_prepend #f)
(define (g_value_array_prepend value_array value)
  (unless
    ~g_value_array_prepend
    (set! ~g_value_array_prepend
      (fh-link-proc
        "g_value_array_prepend"
        '*
        (list '* '*))))
  (let ((~value_array (unwrap-GValueArray* value_array))
        (~value (unwrap-GValue* value)))
    (wrap-GValueArray*
      (~g_value_array_prepend ~value_array ~value))))
(export g_value_array_prepend)

;; extern GValueArray *g_value_array_append(GValueArray *value_array, const 
;;     GValue *value);
(define ~g_value_array_append #f)
(define (g_value_array_append value_array value)
  (unless
    ~g_value_array_append
    (set! ~g_value_array_append
      (fh-link-proc
        "g_value_array_append"
        '*
        (list '* '*))))
  (let ((~value_array (unwrap-GValueArray* value_array))
        (~value (unwrap-GValue* value)))
    (wrap-GValueArray*
      (~g_value_array_append ~value_array ~value))))
(export g_value_array_append)

;; extern GValueArray *g_value_array_insert(GValueArray *value_array, guint 
;;     index_, const GValue *value);
(define ~g_value_array_insert #f)
(define (g_value_array_insert value_array index_ value)
  (unless
    ~g_value_array_insert
    (set! ~g_value_array_insert
      (fh-link-proc
        "g_value_array_insert"
        '*
        (list '* ffi:unsigned-int '*))))
  (let ((~value_array (unwrap-GValueArray* value_array))
        (~index_ (unwrap~fixed index_))
        (~value (unwrap-GValue* value)))
    (wrap-GValueArray*
      (~g_value_array_insert
        ~value_array
        ~index_
        ~value))))
(export g_value_array_insert)

;; extern GValueArray *g_value_array_remove(GValueArray *value_array, guint 
;;     index_);
(define ~g_value_array_remove #f)
(define (g_value_array_remove value_array index_)
  (unless
    ~g_value_array_remove
    (set! ~g_value_array_remove
      (fh-link-proc
        "g_value_array_remove"
        '*
        (list '* ffi:unsigned-int))))
  (let ((~value_array (unwrap-GValueArray* value_array))
        (~index_ (unwrap~fixed index_)))
    (wrap-GValueArray*
      (~g_value_array_remove ~value_array ~index_))))
(export g_value_array_remove)

;; extern GValueArray *g_value_array_sort(GValueArray *value_array, 
;;     GCompareFunc compare_func);
(define ~g_value_array_sort #f)
(define (g_value_array_sort value_array compare_func)
  (unless
    ~g_value_array_sort
    (set! ~g_value_array_sort
      (fh-link-proc
        "g_value_array_sort"
        '*
        (list '* '*))))
  (let ((~value_array (unwrap-GValueArray* value_array))
        (~compare_func
          ((make-ftn-arg-unwrapper ffi:int (list '* '*))
           compare_func)))
    (wrap-GValueArray*
      (~g_value_array_sort ~value_array ~compare_func))))
(export g_value_array_sort)

;; extern GValueArray *g_value_array_sort_with_data(GValueArray *value_array, 
;;     GCompareDataFunc compare_func, gpointer user_data);
(define ~g_value_array_sort_with_data #f)
(define (g_value_array_sort_with_data
         value_array
         compare_func
         user_data)
  (unless
    ~g_value_array_sort_with_data
    (set! ~g_value_array_sort_with_data
      (fh-link-proc
        "g_value_array_sort_with_data"
        '*
        (list '* '* '*))))
  (let ((~value_array (unwrap-GValueArray* value_array))
        (~compare_func
          ((make-ftn-arg-unwrapper ffi:int (list '* '* '*))
           compare_func))
        (~user_data (unwrap-gpointer user_data)))
    (wrap-GValueArray*
      (~g_value_array_sort_with_data
        ~value_array
        ~compare_func
        ~user_data))))
(export g_value_array_sort_with_data)

;; extern void g_value_set_char(GValue *value, gchar v_char);
(define ~g_value_set_char #f)
(define (g_value_set_char value v_char)
  (unless
    ~g_value_set_char
    (set! ~g_value_set_char
      (fh-link-proc
        "g_value_set_char"
        ffi:void
        (list '* ffi:int))))
  (let ((~value (unwrap-GValue* value))
        (~v_char (unwrap~fixed v_char)))
    (~g_value_set_char ~value ~v_char)))
(export g_value_set_char)

;; extern gchar g_value_get_char(const GValue *value);
(define ~g_value_get_char #f)
(define (g_value_get_char value)
  (unless
    ~g_value_get_char
    (set! ~g_value_get_char
      (fh-link-proc
        "g_value_get_char"
        ffi:int
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_char ~value)))
(export g_value_get_char)

;; extern void g_value_set_schar(GValue *value, gint8 v_char);
(define ~g_value_set_schar #f)
(define (g_value_set_schar value v_char)
  (unless
    ~g_value_set_schar
    (set! ~g_value_set_schar
      (fh-link-proc
        "g_value_set_schar"
        ffi:void
        (list '* ffi:int))))
  (let ((~value (unwrap-GValue* value))
        (~v_char (unwrap~fixed v_char)))
    (~g_value_set_schar ~value ~v_char)))
(export g_value_set_schar)

;; extern gint8 g_value_get_schar(const GValue *value);
(define ~g_value_get_schar #f)
(define (g_value_get_schar value)
  (unless
    ~g_value_get_schar
    (set! ~g_value_get_schar
      (fh-link-proc
        "g_value_get_schar"
        ffi:int
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_schar ~value)))
(export g_value_get_schar)

;; extern void g_value_set_uchar(GValue *value, guchar v_uchar);
(define ~g_value_set_uchar #f)
(define (g_value_set_uchar value v_uchar)
  (unless
    ~g_value_set_uchar
    (set! ~g_value_set_uchar
      (fh-link-proc
        "g_value_set_uchar"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~value (unwrap-GValue* value))
        (~v_uchar (unwrap~fixed v_uchar)))
    (~g_value_set_uchar ~value ~v_uchar)))
(export g_value_set_uchar)

;; extern guchar g_value_get_uchar(const GValue *value);
(define ~g_value_get_uchar #f)
(define (g_value_get_uchar value)
  (unless
    ~g_value_get_uchar
    (set! ~g_value_get_uchar
      (fh-link-proc
        "g_value_get_uchar"
        ffi:unsigned-int
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_uchar ~value)))
(export g_value_get_uchar)

;; extern void g_value_set_boolean(GValue *value, gboolean v_boolean);
(define ~g_value_set_boolean #f)
(define (g_value_set_boolean value v_boolean)
  (unless
    ~g_value_set_boolean
    (set! ~g_value_set_boolean
      (fh-link-proc
        "g_value_set_boolean"
        ffi:void
        (list '* ffi:int))))
  (let ((~value (unwrap-GValue* value))
        (~v_boolean (unwrap~fixed v_boolean)))
    (~g_value_set_boolean ~value ~v_boolean)))
(export g_value_set_boolean)

;; extern gboolean g_value_get_boolean(const GValue *value);
(define ~g_value_get_boolean #f)
(define (g_value_get_boolean value)
  (unless
    ~g_value_get_boolean
    (set! ~g_value_get_boolean
      (fh-link-proc
        "g_value_get_boolean"
        ffi:int
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_boolean ~value)))
(export g_value_get_boolean)

;; extern void g_value_set_int(GValue *value, gint v_int);
(define ~g_value_set_int #f)
(define (g_value_set_int value v_int)
  (unless
    ~g_value_set_int
    (set! ~g_value_set_int
      (fh-link-proc
        "g_value_set_int"
        ffi:void
        (list '* ffi:int))))
  (let ((~value (unwrap-GValue* value))
        (~v_int (unwrap~fixed v_int)))
    (~g_value_set_int ~value ~v_int)))
(export g_value_set_int)

;; extern gint g_value_get_int(const GValue *value);
(define ~g_value_get_int #f)
(define (g_value_get_int value)
  (unless
    ~g_value_get_int
    (set! ~g_value_get_int
      (fh-link-proc
        "g_value_get_int"
        ffi:int
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_int ~value)))
(export g_value_get_int)

;; extern void g_value_set_uint(GValue *value, guint v_uint);
(define ~g_value_set_uint #f)
(define (g_value_set_uint value v_uint)
  (unless
    ~g_value_set_uint
    (set! ~g_value_set_uint
      (fh-link-proc
        "g_value_set_uint"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~value (unwrap-GValue* value))
        (~v_uint (unwrap~fixed v_uint)))
    (~g_value_set_uint ~value ~v_uint)))
(export g_value_set_uint)

;; extern guint g_value_get_uint(const GValue *value);
(define ~g_value_get_uint #f)
(define (g_value_get_uint value)
  (unless
    ~g_value_get_uint
    (set! ~g_value_get_uint
      (fh-link-proc
        "g_value_get_uint"
        ffi:unsigned-int
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_uint ~value)))
(export g_value_get_uint)

;; extern void g_value_set_long(GValue *value, glong v_long);
(define ~g_value_set_long #f)
(define (g_value_set_long value v_long)
  (unless
    ~g_value_set_long
    (set! ~g_value_set_long
      (fh-link-proc
        "g_value_set_long"
        ffi:void
        (list '* ffi:long))))
  (let ((~value (unwrap-GValue* value))
        (~v_long (unwrap~fixed v_long)))
    (~g_value_set_long ~value ~v_long)))
(export g_value_set_long)

;; extern glong g_value_get_long(const GValue *value);
(define ~g_value_get_long #f)
(define (g_value_get_long value)
  (unless
    ~g_value_get_long
    (set! ~g_value_get_long
      (fh-link-proc
        "g_value_get_long"
        ffi:long
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_long ~value)))
(export g_value_get_long)

;; extern void g_value_set_ulong(GValue *value, gulong v_ulong);
(define ~g_value_set_ulong #f)
(define (g_value_set_ulong value v_ulong)
  (unless
    ~g_value_set_ulong
    (set! ~g_value_set_ulong
      (fh-link-proc
        "g_value_set_ulong"
        ffi:void
        (list '* ffi:unsigned-long))))
  (let ((~value (unwrap-GValue* value))
        (~v_ulong (unwrap~fixed v_ulong)))
    (~g_value_set_ulong ~value ~v_ulong)))
(export g_value_set_ulong)

;; extern gulong g_value_get_ulong(const GValue *value);
(define ~g_value_get_ulong #f)
(define (g_value_get_ulong value)
  (unless
    ~g_value_get_ulong
    (set! ~g_value_get_ulong
      (fh-link-proc
        "g_value_get_ulong"
        ffi:unsigned-long
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_ulong ~value)))
(export g_value_get_ulong)

;; extern void g_value_set_int64(GValue *value, gint64 v_int64);
(define ~g_value_set_int64 #f)
(define (g_value_set_int64 value v_int64)
  (unless
    ~g_value_set_int64
    (set! ~g_value_set_int64
      (fh-link-proc
        "g_value_set_int64"
        ffi:void
        (list '* ffi:long))))
  (let ((~value (unwrap-GValue* value))
        (~v_int64 (unwrap~fixed v_int64)))
    (~g_value_set_int64 ~value ~v_int64)))
(export g_value_set_int64)

;; extern gint64 g_value_get_int64(const GValue *value);
(define ~g_value_get_int64 #f)
(define (g_value_get_int64 value)
  (unless
    ~g_value_get_int64
    (set! ~g_value_get_int64
      (fh-link-proc
        "g_value_get_int64"
        ffi:long
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_int64 ~value)))
(export g_value_get_int64)

;; extern void g_value_set_uint64(GValue *value, guint64 v_uint64);
(define ~g_value_set_uint64 #f)
(define (g_value_set_uint64 value v_uint64)
  (unless
    ~g_value_set_uint64
    (set! ~g_value_set_uint64
      (fh-link-proc
        "g_value_set_uint64"
        ffi:void
        (list '* ffi:unsigned-long))))
  (let ((~value (unwrap-GValue* value))
        (~v_uint64 (unwrap~fixed v_uint64)))
    (~g_value_set_uint64 ~value ~v_uint64)))
(export g_value_set_uint64)

;; extern guint64 g_value_get_uint64(const GValue *value);
(define ~g_value_get_uint64 #f)
(define (g_value_get_uint64 value)
  (unless
    ~g_value_get_uint64
    (set! ~g_value_get_uint64
      (fh-link-proc
        "g_value_get_uint64"
        ffi:unsigned-long
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_uint64 ~value)))
(export g_value_get_uint64)

;; extern void g_value_set_float(GValue *value, gfloat v_float);
(define ~g_value_set_float #f)
(define (g_value_set_float value v_float)
  (unless
    ~g_value_set_float
    (set! ~g_value_set_float
      (fh-link-proc
        "g_value_set_float"
        ffi:void
        (list '* ffi:float))))
  (let ((~value (unwrap-GValue* value))
        (~v_float (unwrap-gfloat v_float)))
    (~g_value_set_float ~value ~v_float)))
(export g_value_set_float)

;; extern gfloat g_value_get_float(const GValue *value);
(define ~g_value_get_float #f)
(define (g_value_get_float value)
  (unless
    ~g_value_get_float
    (set! ~g_value_get_float
      (fh-link-proc
        "g_value_get_float"
        ffi:float
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (wrap-gfloat (~g_value_get_float ~value))))
(export g_value_get_float)

;; extern void g_value_set_double(GValue *value, gdouble v_double);
(define ~g_value_set_double #f)
(define (g_value_set_double value v_double)
  (unless
    ~g_value_set_double
    (set! ~g_value_set_double
      (fh-link-proc
        "g_value_set_double"
        ffi:void
        (list '* ffi:double))))
  (let ((~value (unwrap-GValue* value))
        (~v_double (unwrap-gdouble v_double)))
    (~g_value_set_double ~value ~v_double)))
(export g_value_set_double)

;; extern gdouble g_value_get_double(const GValue *value);
(define ~g_value_get_double #f)
(define (g_value_get_double value)
  (unless
    ~g_value_get_double
    (set! ~g_value_get_double
      (fh-link-proc
        "g_value_get_double"
        ffi:double
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (wrap-gdouble (~g_value_get_double ~value))))
(export g_value_get_double)

;; extern void g_value_set_string(GValue *value, const gchar *v_string);
(define ~g_value_set_string #f)
(define (g_value_set_string value v_string)
  (unless
    ~g_value_set_string
    (set! ~g_value_set_string
      (fh-link-proc
        "g_value_set_string"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_string (unwrap~pointer v_string)))
    (~g_value_set_string ~value ~v_string)))
(export g_value_set_string)

;; extern void g_value_set_static_string(GValue *value, const gchar *v_string)
;;     ;
(define ~g_value_set_static_string #f)
(define (g_value_set_static_string value v_string)
  (unless
    ~g_value_set_static_string
    (set! ~g_value_set_static_string
      (fh-link-proc
        "g_value_set_static_string"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_string (unwrap~pointer v_string)))
    (~g_value_set_static_string ~value ~v_string)))
(export g_value_set_static_string)

;; extern const gchar *g_value_get_string(const GValue *value);
(define ~g_value_get_string #f)
(define (g_value_get_string value)
  (unless
    ~g_value_get_string
    (set! ~g_value_get_string
      (fh-link-proc "g_value_get_string" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_string ~value)))
(export g_value_get_string)

;; extern gchar *g_value_dup_string(const GValue *value);
(define ~g_value_dup_string #f)
(define (g_value_dup_string value)
  (unless
    ~g_value_dup_string
    (set! ~g_value_dup_string
      (fh-link-proc "g_value_dup_string" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_dup_string ~value)))
(export g_value_dup_string)

;; extern void g_value_set_pointer(GValue *value, gpointer v_pointer);
(define ~g_value_set_pointer #f)
(define (g_value_set_pointer value v_pointer)
  (unless
    ~g_value_set_pointer
    (set! ~g_value_set_pointer
      (fh-link-proc
        "g_value_set_pointer"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_pointer (unwrap-gpointer v_pointer)))
    (~g_value_set_pointer ~value ~v_pointer)))
(export g_value_set_pointer)

;; extern gpointer g_value_get_pointer(const GValue *value);
(define ~g_value_get_pointer #f)
(define (g_value_get_pointer value)
  (unless
    ~g_value_get_pointer
    (set! ~g_value_get_pointer
      (fh-link-proc "g_value_get_pointer" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (wrap-gpointer (~g_value_get_pointer ~value))))
(export g_value_get_pointer)

;; extern GType g_gtype_get_type(void);
(define ~g_gtype_get_type #f)
(define (g_gtype_get_type)
  (unless
    ~g_gtype_get_type
    (set! ~g_gtype_get_type
      (fh-link-proc
        "g_gtype_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_gtype_get_type)))
(export g_gtype_get_type)

;; extern void g_value_set_gtype(GValue *value, GType v_gtype);
(define ~g_value_set_gtype #f)
(define (g_value_set_gtype value v_gtype)
  (unless
    ~g_value_set_gtype
    (set! ~g_value_set_gtype
      (fh-link-proc
        "g_value_set_gtype"
        ffi:void
        (list '* ffi:unsigned-long))))
  (let ((~value (unwrap-GValue* value))
        (~v_gtype (unwrap~fixed v_gtype)))
    (~g_value_set_gtype ~value ~v_gtype)))
(export g_value_set_gtype)

;; extern GType g_value_get_gtype(const GValue *value);
(define ~g_value_get_gtype #f)
(define (g_value_get_gtype value)
  (unless
    ~g_value_get_gtype
    (set! ~g_value_get_gtype
      (fh-link-proc
        "g_value_get_gtype"
        ffi:unsigned-long
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_gtype ~value)))
(export g_value_get_gtype)

;; extern void g_value_set_variant(GValue *value, GVariant *variant);
(define ~g_value_set_variant #f)
(define (g_value_set_variant value variant)
  (unless
    ~g_value_set_variant
    (set! ~g_value_set_variant
      (fh-link-proc
        "g_value_set_variant"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_set_variant ~value variant)))
(export g_value_set_variant)

;; extern void g_value_take_variant(GValue *value, GVariant *variant);
(define ~g_value_take_variant #f)
(define (g_value_take_variant value variant)
  (unless
    ~g_value_take_variant
    (set! ~g_value_take_variant
      (fh-link-proc
        "g_value_take_variant"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_take_variant ~value variant)))
(export g_value_take_variant)

;; extern GVariant *g_value_get_variant(const GValue *value);
(define ~g_value_get_variant #f)
(define (g_value_get_variant value)
  (unless
    ~g_value_get_variant
    (set! ~g_value_get_variant
      (fh-link-proc "g_value_get_variant" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_get_variant ~value)))
(export g_value_get_variant)

;; extern GVariant *g_value_dup_variant(const GValue *value);
(define ~g_value_dup_variant #f)
(define (g_value_dup_variant value)
  (unless
    ~g_value_dup_variant
    (set! ~g_value_dup_variant
      (fh-link-proc "g_value_dup_variant" '* (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_value_dup_variant ~value)))
(export g_value_dup_variant)

;; extern GType g_pointer_type_register_static(const gchar *name);
(define ~g_pointer_type_register_static #f)
(define (g_pointer_type_register_static name)
  (unless
    ~g_pointer_type_register_static
    (set! ~g_pointer_type_register_static
      (fh-link-proc
        "g_pointer_type_register_static"
        ffi:unsigned-long
        (list '*))))
  (let ((~name (unwrap~pointer name)))
    (~g_pointer_type_register_static ~name)))
(export g_pointer_type_register_static)

;; extern gchar *g_strdup_value_contents(const GValue *value);
(define ~g_strdup_value_contents #f)
(define (g_strdup_value_contents value)
  (unless
    ~g_strdup_value_contents
    (set! ~g_strdup_value_contents
      (fh-link-proc
        "g_strdup_value_contents"
        '*
        (list '*))))
  (let ((~value (unwrap-GValue* value)))
    (~g_strdup_value_contents ~value)))
(export g_strdup_value_contents)

;; extern void g_value_take_string(GValue *value, gchar *v_string);
(define ~g_value_take_string #f)
(define (g_value_take_string value v_string)
  (unless
    ~g_value_take_string
    (set! ~g_value_take_string
      (fh-link-proc
        "g_value_take_string"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_string (unwrap~pointer v_string)))
    (~g_value_take_string ~value ~v_string)))
(export g_value_take_string)

;; extern void g_value_set_string_take_ownership(GValue *value, gchar *v_string
;;     );
(define ~g_value_set_string_take_ownership #f)
(define (g_value_set_string_take_ownership
         value
         v_string)
  (unless
    ~g_value_set_string_take_ownership
    (set! ~g_value_set_string_take_ownership
      (fh-link-proc
        "g_value_set_string_take_ownership"
        ffi:void
        (list '* '*))))
  (let ((~value (unwrap-GValue* value))
        (~v_string (unwrap~pointer v_string)))
    (~g_value_set_string_take_ownership
      ~value
      ~v_string)))
(export g_value_set_string_take_ownership)

;; typedef gchar *gchararray;
(define gchararray-desc (bs:pointer gchar-desc))
(export gchararray-desc)
(define-fh-pointer-type gchararray gchararray-desc)

;; typedef GObject *GObject_autoptr;
(define GObject_autoptr-desc (bs:pointer GObject-desc))
(export GObject_autoptr-desc)
(define-fh-pointer-type GObject_autoptr GObject_autoptr-desc)

;; typedef GInitiallyUnowned *GInitiallyUnowned_autoptr;
(define GInitiallyUnowned_autoptr-desc (bs:pointer GInitiallyUnowned-desc))
(export GInitiallyUnowned_autoptr-desc)
(define-fh-pointer-type GInitiallyUnowned_autoptr GInitiallyUnowned_autoptr-desc)

;; access to enum symbols and #define'd constants:
(define ffi-gobject-symbol-val
  (let ((sym-tab
          '((_CLOCK_REALTIME . 0)
            (_CLOCK_MONOTONIC . 6)
            (_CLOCK_MONOTONIC_RAW . 4)
            (_CLOCK_MONOTONIC_RAW_APPROX . 5)
            (_CLOCK_UPTIME_RAW . 8)
            (_CLOCK_UPTIME_RAW_APPROX . 9)
            (_CLOCK_PROCESS_CPUTIME_ID . 12)
            (_CLOCK_THREAD_CPUTIME_ID . 16)
            (G_USER_DIRECTORY_DESKTOP . 0)
            (G_USER_DIRECTORY_DOCUMENTS . 1)
            (G_USER_DIRECTORY_DOWNLOAD . 2)
            (G_USER_DIRECTORY_MUSIC . 3)
            (G_USER_DIRECTORY_PICTURES . 4)
            (G_USER_DIRECTORY_PUBLIC_SHARE . 5)
            (G_USER_DIRECTORY_TEMPLATES . 6)
            (G_USER_DIRECTORY_VIDEOS . 7)
            (G_USER_N_DIRECTORIES . 8)
            (G_FORMAT_SIZE_DEFAULT . 0)
            (G_FORMAT_SIZE_LONG_FORMAT . 1)
            (G_FORMAT_SIZE_IEC_UNITS . 2)
            (G_THREAD_ERROR_AGAIN . 0)
            (G_ONCE_STATUS_NOTCALLED . 0)
            (G_ONCE_STATUS_PROGRESS . 1)
            (G_ONCE_STATUS_READY . 2)
            (G_BOOKMARK_FILE_ERROR_INVALID_URI . 0)
            (G_BOOKMARK_FILE_ERROR_INVALID_VALUE . 1)
            (G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED . 2)
            (G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND . 3)
            (G_BOOKMARK_FILE_ERROR_READ . 4)
            (G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING . 5)
            (G_BOOKMARK_FILE_ERROR_WRITE . 6)
            (G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND . 7)
            (G_CHECKSUM_MD5 . 0)
            (G_CHECKSUM_SHA1 . 1)
            (G_CHECKSUM_SHA256 . 2)
            (G_CHECKSUM_SHA512 . 3)
            (G_CHECKSUM_SHA384 . 4)
            (G_CONVERT_ERROR_NO_CONVERSION . 0)
            (G_CONVERT_ERROR_ILLEGAL_SEQUENCE . 1)
            (G_CONVERT_ERROR_FAILED . 2)
            (G_CONVERT_ERROR_PARTIAL_INPUT . 3)
            (G_CONVERT_ERROR_BAD_URI . 4)
            (G_CONVERT_ERROR_NOT_ABSOLUTE_PATH . 5)
            (G_CONVERT_ERROR_NO_MEMORY . 6)
            (G_DATE_DAY . 0)
            (G_DATE_MONTH . 1)
            (G_DATE_YEAR . 2)
            (G_DATE_BAD_WEEKDAY . 0)
            (G_DATE_MONDAY . 1)
            (G_DATE_TUESDAY . 2)
            (G_DATE_WEDNESDAY . 3)
            (G_DATE_THURSDAY . 4)
            (G_DATE_FRIDAY . 5)
            (G_DATE_SATURDAY . 6)
            (G_DATE_SUNDAY . 7)
            (G_DATE_BAD_MONTH . 0)
            (G_DATE_JANUARY . 1)
            (G_DATE_FEBRUARY . 2)
            (G_DATE_MARCH . 3)
            (G_DATE_APRIL . 4)
            (G_DATE_MAY . 5)
            (G_DATE_JUNE . 6)
            (G_DATE_JULY . 7)
            (G_DATE_AUGUST . 8)
            (G_DATE_SEPTEMBER . 9)
            (G_DATE_OCTOBER . 10)
            (G_DATE_NOVEMBER . 11)
            (G_DATE_DECEMBER . 12)
            (G_TIME_TYPE_STANDARD . 0)
            (G_TIME_TYPE_DAYLIGHT . 1)
            (G_TIME_TYPE_UNIVERSAL . 2)
            (G_FILE_ERROR_EXIST . 0)
            (G_FILE_ERROR_ISDIR . 1)
            (G_FILE_ERROR_ACCES . 2)
            (G_FILE_ERROR_NAMETOOLONG . 3)
            (G_FILE_ERROR_NOENT . 4)
            (G_FILE_ERROR_NOTDIR . 5)
            (G_FILE_ERROR_NXIO . 6)
            (G_FILE_ERROR_NODEV . 7)
            (G_FILE_ERROR_ROFS . 8)
            (G_FILE_ERROR_TXTBSY . 9)
            (G_FILE_ERROR_FAULT . 10)
            (G_FILE_ERROR_LOOP . 11)
            (G_FILE_ERROR_NOSPC . 12)
            (G_FILE_ERROR_NOMEM . 13)
            (G_FILE_ERROR_MFILE . 14)
            (G_FILE_ERROR_NFILE . 15)
            (G_FILE_ERROR_BADF . 16)
            (G_FILE_ERROR_INVAL . 17)
            (G_FILE_ERROR_PIPE . 18)
            (G_FILE_ERROR_AGAIN . 19)
            (G_FILE_ERROR_INTR . 20)
            (G_FILE_ERROR_IO . 21)
            (G_FILE_ERROR_PERM . 22)
            (G_FILE_ERROR_NOSYS . 23)
            (G_FILE_ERROR_FAILED . 24)
            (G_FILE_TEST_IS_REGULAR . 1)
            (G_FILE_TEST_IS_SYMLINK . 2)
            (G_FILE_TEST_IS_DIR . 4)
            (G_FILE_TEST_IS_EXECUTABLE . 8)
            (G_FILE_TEST_EXISTS . 16)
            (G_TRAVERSE_LEAVES . 1)
            (G_TRAVERSE_NON_LEAVES . 2)
            (G_TRAVERSE_ALL . 3)
            (G_TRAVERSE_MASK . 3)
            (G_TRAVERSE_LEAFS . 1)
            (G_TRAVERSE_NON_LEAFS . 2)
            (G_IN_ORDER . 0)
            (G_PRE_ORDER . 1)
            (G_POST_ORDER . 2)
            (G_LEVEL_ORDER . 3)
            (G_HOOK_FLAG_ACTIVE . 1)
            (G_HOOK_FLAG_IN_CALL . 2)
            (G_HOOK_FLAG_MASK . 15)
            (G_IO_IN . 1)
            (G_IO_OUT . 4)
            (G_IO_PRI . 2)
            (G_IO_ERR . 8)
            (G_IO_HUP . 16)
            (G_IO_NVAL . 32)
            (G_UNICODE_CONTROL . 0)
            (G_UNICODE_FORMAT . 1)
            (G_UNICODE_UNASSIGNED . 2)
            (G_UNICODE_PRIVATE_USE . 3)
            (G_UNICODE_SURROGATE . 4)
            (G_UNICODE_LOWERCASE_LETTER . 5)
            (G_UNICODE_MODIFIER_LETTER . 6)
            (G_UNICODE_OTHER_LETTER . 7)
            (G_UNICODE_TITLECASE_LETTER . 8)
            (G_UNICODE_UPPERCASE_LETTER . 9)
            (G_UNICODE_SPACING_MARK . 10)
            (G_UNICODE_ENCLOSING_MARK . 11)
            (G_UNICODE_NON_SPACING_MARK . 12)
            (G_UNICODE_DECIMAL_NUMBER . 13)
            (G_UNICODE_LETTER_NUMBER . 14)
            (G_UNICODE_OTHER_NUMBER . 15)
            (G_UNICODE_CONNECT_PUNCTUATION . 16)
            (G_UNICODE_DASH_PUNCTUATION . 17)
            (G_UNICODE_CLOSE_PUNCTUATION . 18)
            (G_UNICODE_FINAL_PUNCTUATION . 19)
            (G_UNICODE_INITIAL_PUNCTUATION . 20)
            (G_UNICODE_OTHER_PUNCTUATION . 21)
            (G_UNICODE_OPEN_PUNCTUATION . 22)
            (G_UNICODE_CURRENCY_SYMBOL . 23)
            (G_UNICODE_MODIFIER_SYMBOL . 24)
            (G_UNICODE_MATH_SYMBOL . 25)
            (G_UNICODE_OTHER_SYMBOL . 26)
            (G_UNICODE_LINE_SEPARATOR . 27)
            (G_UNICODE_PARAGRAPH_SEPARATOR . 28)
            (G_UNICODE_SPACE_SEPARATOR . 29)
            (G_UNICODE_BREAK_MANDATORY . 0)
            (G_UNICODE_BREAK_CARRIAGE_RETURN . 1)
            (G_UNICODE_BREAK_LINE_FEED . 2)
            (G_UNICODE_BREAK_COMBINING_MARK . 3)
            (G_UNICODE_BREAK_SURROGATE . 4)
            (G_UNICODE_BREAK_ZERO_WIDTH_SPACE . 5)
            (G_UNICODE_BREAK_INSEPARABLE . 6)
            (G_UNICODE_BREAK_NON_BREAKING_GLUE . 7)
            (G_UNICODE_BREAK_CONTINGENT . 8)
            (G_UNICODE_BREAK_SPACE . 9)
            (G_UNICODE_BREAK_AFTER . 10)
            (G_UNICODE_BREAK_BEFORE . 11)
            (G_UNICODE_BREAK_BEFORE_AND_AFTER . 12)
            (G_UNICODE_BREAK_HYPHEN . 13)
            (G_UNICODE_BREAK_NON_STARTER . 14)
            (G_UNICODE_BREAK_OPEN_PUNCTUATION . 15)
            (G_UNICODE_BREAK_CLOSE_PUNCTUATION . 16)
            (G_UNICODE_BREAK_QUOTATION . 17)
            (G_UNICODE_BREAK_EXCLAMATION . 18)
            (G_UNICODE_BREAK_IDEOGRAPHIC . 19)
            (G_UNICODE_BREAK_NUMERIC . 20)
            (G_UNICODE_BREAK_INFIX_SEPARATOR . 21)
            (G_UNICODE_BREAK_SYMBOL . 22)
            (G_UNICODE_BREAK_ALPHABETIC . 23)
            (G_UNICODE_BREAK_PREFIX . 24)
            (G_UNICODE_BREAK_POSTFIX . 25)
            (G_UNICODE_BREAK_COMPLEX_CONTEXT . 26)
            (G_UNICODE_BREAK_AMBIGUOUS . 27)
            (G_UNICODE_BREAK_UNKNOWN . 28)
            (G_UNICODE_BREAK_NEXT_LINE . 29)
            (G_UNICODE_BREAK_WORD_JOINER . 30)
            (G_UNICODE_BREAK_HANGUL_L_JAMO . 31)
            (G_UNICODE_BREAK_HANGUL_V_JAMO . 32)
            (G_UNICODE_BREAK_HANGUL_T_JAMO . 33)
            (G_UNICODE_BREAK_HANGUL_LV_SYLLABLE . 34)
            (G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE . 35)
            (G_UNICODE_BREAK_CLOSE_PARANTHESIS . 36)
            (G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER
              .
              37)
            (G_UNICODE_BREAK_HEBREW_LETTER . 38)
            (G_UNICODE_BREAK_REGIONAL_INDICATOR . 39)
            (G_UNICODE_BREAK_EMOJI_BASE . 40)
            (G_UNICODE_BREAK_EMOJI_MODIFIER . 41)
            (G_UNICODE_BREAK_ZERO_WIDTH_JOINER . 42)
            (G_UNICODE_SCRIPT_INVALID_CODE . -1)
            (G_UNICODE_SCRIPT_COMMON . 0)
            (G_UNICODE_SCRIPT_INHERITED . 1)
            (G_UNICODE_SCRIPT_ARABIC . 2)
            (G_UNICODE_SCRIPT_ARMENIAN . 3)
            (G_UNICODE_SCRIPT_BENGALI . 4)
            (G_UNICODE_SCRIPT_BOPOMOFO . 5)
            (G_UNICODE_SCRIPT_CHEROKEE . 6)
            (G_UNICODE_SCRIPT_COPTIC . 7)
            (G_UNICODE_SCRIPT_CYRILLIC . 8)
            (G_UNICODE_SCRIPT_DESERET . 9)
            (G_UNICODE_SCRIPT_DEVANAGARI . 10)
            (G_UNICODE_SCRIPT_ETHIOPIC . 11)
            (G_UNICODE_SCRIPT_GEORGIAN . 12)
            (G_UNICODE_SCRIPT_GOTHIC . 13)
            (G_UNICODE_SCRIPT_GREEK . 14)
            (G_UNICODE_SCRIPT_GUJARATI . 15)
            (G_UNICODE_SCRIPT_GURMUKHI . 16)
            (G_UNICODE_SCRIPT_HAN . 17)
            (G_UNICODE_SCRIPT_HANGUL . 18)
            (G_UNICODE_SCRIPT_HEBREW . 19)
            (G_UNICODE_SCRIPT_HIRAGANA . 20)
            (G_UNICODE_SCRIPT_KANNADA . 21)
            (G_UNICODE_SCRIPT_KATAKANA . 22)
            (G_UNICODE_SCRIPT_KHMER . 23)
            (G_UNICODE_SCRIPT_LAO . 24)
            (G_UNICODE_SCRIPT_LATIN . 25)
            (G_UNICODE_SCRIPT_MALAYALAM . 26)
            (G_UNICODE_SCRIPT_MONGOLIAN . 27)
            (G_UNICODE_SCRIPT_MYANMAR . 28)
            (G_UNICODE_SCRIPT_OGHAM . 29)
            (G_UNICODE_SCRIPT_OLD_ITALIC . 30)
            (G_UNICODE_SCRIPT_ORIYA . 31)
            (G_UNICODE_SCRIPT_RUNIC . 32)
            (G_UNICODE_SCRIPT_SINHALA . 33)
            (G_UNICODE_SCRIPT_SYRIAC . 34)
            (G_UNICODE_SCRIPT_TAMIL . 35)
            (G_UNICODE_SCRIPT_TELUGU . 36)
            (G_UNICODE_SCRIPT_THAANA . 37)
            (G_UNICODE_SCRIPT_THAI . 38)
            (G_UNICODE_SCRIPT_TIBETAN . 39)
            (G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL . 40)
            (G_UNICODE_SCRIPT_YI . 41)
            (G_UNICODE_SCRIPT_TAGALOG . 42)
            (G_UNICODE_SCRIPT_HANUNOO . 43)
            (G_UNICODE_SCRIPT_BUHID . 44)
            (G_UNICODE_SCRIPT_TAGBANWA . 45)
            (G_UNICODE_SCRIPT_BRAILLE . 46)
            (G_UNICODE_SCRIPT_CYPRIOT . 47)
            (G_UNICODE_SCRIPT_LIMBU . 48)
            (G_UNICODE_SCRIPT_OSMANYA . 49)
            (G_UNICODE_SCRIPT_SHAVIAN . 50)
            (G_UNICODE_SCRIPT_LINEAR_B . 51)
            (G_UNICODE_SCRIPT_TAI_LE . 52)
            (G_UNICODE_SCRIPT_UGARITIC . 53)
            (G_UNICODE_SCRIPT_NEW_TAI_LUE . 54)
            (G_UNICODE_SCRIPT_BUGINESE . 55)
            (G_UNICODE_SCRIPT_GLAGOLITIC . 56)
            (G_UNICODE_SCRIPT_TIFINAGH . 57)
            (G_UNICODE_SCRIPT_SYLOTI_NAGRI . 58)
            (G_UNICODE_SCRIPT_OLD_PERSIAN . 59)
            (G_UNICODE_SCRIPT_KHAROSHTHI . 60)
            (G_UNICODE_SCRIPT_UNKNOWN . 61)
            (G_UNICODE_SCRIPT_BALINESE . 62)
            (G_UNICODE_SCRIPT_CUNEIFORM . 63)
            (G_UNICODE_SCRIPT_PHOENICIAN . 64)
            (G_UNICODE_SCRIPT_PHAGS_PA . 65)
            (G_UNICODE_SCRIPT_NKO . 66)
            (G_UNICODE_SCRIPT_KAYAH_LI . 67)
            (G_UNICODE_SCRIPT_LEPCHA . 68)
            (G_UNICODE_SCRIPT_REJANG . 69)
            (G_UNICODE_SCRIPT_SUNDANESE . 70)
            (G_UNICODE_SCRIPT_SAURASHTRA . 71)
            (G_UNICODE_SCRIPT_CHAM . 72)
            (G_UNICODE_SCRIPT_OL_CHIKI . 73)
            (G_UNICODE_SCRIPT_VAI . 74)
            (G_UNICODE_SCRIPT_CARIAN . 75)
            (G_UNICODE_SCRIPT_LYCIAN . 76)
            (G_UNICODE_SCRIPT_LYDIAN . 77)
            (G_UNICODE_SCRIPT_AVESTAN . 78)
            (G_UNICODE_SCRIPT_BAMUM . 79)
            (G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS . 80)
            (G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC . 81)
            (G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI . 82)
            (G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN . 83)
            (G_UNICODE_SCRIPT_JAVANESE . 84)
            (G_UNICODE_SCRIPT_KAITHI . 85)
            (G_UNICODE_SCRIPT_LISU . 86)
            (G_UNICODE_SCRIPT_MEETEI_MAYEK . 87)
            (G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN . 88)
            (G_UNICODE_SCRIPT_OLD_TURKIC . 89)
            (G_UNICODE_SCRIPT_SAMARITAN . 90)
            (G_UNICODE_SCRIPT_TAI_THAM . 91)
            (G_UNICODE_SCRIPT_TAI_VIET . 92)
            (G_UNICODE_SCRIPT_BATAK . 93)
            (G_UNICODE_SCRIPT_BRAHMI . 94)
            (G_UNICODE_SCRIPT_MANDAIC . 95)
            (G_UNICODE_SCRIPT_CHAKMA . 96)
            (G_UNICODE_SCRIPT_MEROITIC_CURSIVE . 97)
            (G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS . 98)
            (G_UNICODE_SCRIPT_MIAO . 99)
            (G_UNICODE_SCRIPT_SHARADA . 100)
            (G_UNICODE_SCRIPT_SORA_SOMPENG . 101)
            (G_UNICODE_SCRIPT_TAKRI . 102)
            (G_UNICODE_SCRIPT_BASSA_VAH . 103)
            (G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN . 104)
            (G_UNICODE_SCRIPT_DUPLOYAN . 105)
            (G_UNICODE_SCRIPT_ELBASAN . 106)
            (G_UNICODE_SCRIPT_GRANTHA . 107)
            (G_UNICODE_SCRIPT_KHOJKI . 108)
            (G_UNICODE_SCRIPT_KHUDAWADI . 109)
            (G_UNICODE_SCRIPT_LINEAR_A . 110)
            (G_UNICODE_SCRIPT_MAHAJANI . 111)
            (G_UNICODE_SCRIPT_MANICHAEAN . 112)
            (G_UNICODE_SCRIPT_MENDE_KIKAKUI . 113)
            (G_UNICODE_SCRIPT_MODI . 114)
            (G_UNICODE_SCRIPT_MRO . 115)
            (G_UNICODE_SCRIPT_NABATAEAN . 116)
            (G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN . 117)
            (G_UNICODE_SCRIPT_OLD_PERMIC . 118)
            (G_UNICODE_SCRIPT_PAHAWH_HMONG . 119)
            (G_UNICODE_SCRIPT_PALMYRENE . 120)
            (G_UNICODE_SCRIPT_PAU_CIN_HAU . 121)
            (G_UNICODE_SCRIPT_PSALTER_PAHLAVI . 122)
            (G_UNICODE_SCRIPT_SIDDHAM . 123)
            (G_UNICODE_SCRIPT_TIRHUTA . 124)
            (G_UNICODE_SCRIPT_WARANG_CITI . 125)
            (G_UNICODE_SCRIPT_AHOM . 126)
            (G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS . 127)
            (G_UNICODE_SCRIPT_HATRAN . 128)
            (G_UNICODE_SCRIPT_MULTANI . 129)
            (G_UNICODE_SCRIPT_OLD_HUNGARIAN . 130)
            (G_UNICODE_SCRIPT_SIGNWRITING . 131)
            (G_UNICODE_SCRIPT_ADLAM . 132)
            (G_UNICODE_SCRIPT_BHAIKSUKI . 133)
            (G_UNICODE_SCRIPT_MARCHEN . 134)
            (G_UNICODE_SCRIPT_NEWA . 135)
            (G_UNICODE_SCRIPT_OSAGE . 136)
            (G_UNICODE_SCRIPT_TANGUT . 137)
            (G_NORMALIZE_DEFAULT . 0)
            (G_NORMALIZE_NFD . 0)
            (G_NORMALIZE_DEFAULT_COMPOSE . 1)
            (G_NORMALIZE_NFC . 1)
            (G_NORMALIZE_ALL . 2)
            (G_NORMALIZE_NFKD . 2)
            (G_NORMALIZE_ALL_COMPOSE . 3)
            (G_NORMALIZE_NFKC . 3)
            (G_IO_ERROR_NONE . 0)
            (G_IO_ERROR_AGAIN . 1)
            (G_IO_ERROR_INVAL . 2)
            (G_IO_ERROR_UNKNOWN . 3)
            (G_IO_CHANNEL_ERROR_FBIG . 0)
            (G_IO_CHANNEL_ERROR_INVAL . 1)
            (G_IO_CHANNEL_ERROR_IO . 2)
            (G_IO_CHANNEL_ERROR_ISDIR . 3)
            (G_IO_CHANNEL_ERROR_NOSPC . 4)
            (G_IO_CHANNEL_ERROR_NXIO . 5)
            (G_IO_CHANNEL_ERROR_OVERFLOW . 6)
            (G_IO_CHANNEL_ERROR_PIPE . 7)
            (G_IO_CHANNEL_ERROR_FAILED . 8)
            (G_IO_STATUS_ERROR . 0)
            (G_IO_STATUS_NORMAL . 1)
            (G_IO_STATUS_EOF . 2)
            (G_IO_STATUS_AGAIN . 3)
            (G_SEEK_CUR . 0)
            (G_SEEK_SET . 1)
            (G_SEEK_END . 2)
            (G_IO_FLAG_APPEND . 1)
            (G_IO_FLAG_NONBLOCK . 2)
            (G_IO_FLAG_IS_READABLE . 4)
            (G_IO_FLAG_IS_WRITABLE . 8)
            (G_IO_FLAG_IS_WRITEABLE . 8)
            (G_IO_FLAG_IS_SEEKABLE . 16)
            (G_IO_FLAG_MASK . 31)
            (G_IO_FLAG_GET_MASK . 31)
            (G_IO_FLAG_SET_MASK . 3)
            (G_KEY_FILE_ERROR_UNKNOWN_ENCODING . 0)
            (G_KEY_FILE_ERROR_PARSE . 1)
            (G_KEY_FILE_ERROR_NOT_FOUND . 2)
            (G_KEY_FILE_ERROR_KEY_NOT_FOUND . 3)
            (G_KEY_FILE_ERROR_GROUP_NOT_FOUND . 4)
            (G_KEY_FILE_ERROR_INVALID_VALUE . 5)
            (G_KEY_FILE_NONE . 0)
            (G_KEY_FILE_KEEP_COMMENTS . 1)
            (G_KEY_FILE_KEEP_TRANSLATIONS . 2)
            (G_MARKUP_ERROR_BAD_UTF8 . 0)
            (G_MARKUP_ERROR_EMPTY . 1)
            (G_MARKUP_ERROR_PARSE . 2)
            (G_MARKUP_ERROR_UNKNOWN_ELEMENT . 3)
            (G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE . 4)
            (G_MARKUP_ERROR_INVALID_CONTENT . 5)
            (G_MARKUP_ERROR_MISSING_ATTRIBUTE . 6)
            (G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG . 1)
            (G_MARKUP_TREAT_CDATA_AS_TEXT . 2)
            (G_MARKUP_PREFIX_ERROR_POSITION . 4)
            (G_MARKUP_IGNORE_QUALIFIED . 8)
            (G_MARKUP_COLLECT_INVALID . 0)
            (G_MARKUP_COLLECT_STRING . 1)
            (G_MARKUP_COLLECT_STRDUP . 2)
            (G_MARKUP_COLLECT_BOOLEAN . 3)
            (G_MARKUP_COLLECT_TRISTATE . 4)
            (G_MARKUP_COLLECT_OPTIONAL . 65536)
            (G_VARIANT_CLASS_BOOLEAN . 98)
            (G_VARIANT_CLASS_BYTE . 121)
            (G_VARIANT_CLASS_INT16 . 110)
            (G_VARIANT_CLASS_UINT16 . 113)
            (G_VARIANT_CLASS_INT32 . 105)
            (G_VARIANT_CLASS_UINT32 . 117)
            (G_VARIANT_CLASS_INT64 . 120)
            (G_VARIANT_CLASS_UINT64 . 116)
            (G_VARIANT_CLASS_HANDLE . 104)
            (G_VARIANT_CLASS_DOUBLE . 100)
            (G_VARIANT_CLASS_STRING . 115)
            (G_VARIANT_CLASS_OBJECT_PATH . 111)
            (G_VARIANT_CLASS_SIGNATURE . 103)
            (G_VARIANT_CLASS_VARIANT . 118)
            (G_VARIANT_CLASS_MAYBE . 109)
            (G_VARIANT_CLASS_ARRAY . 97)
            (G_VARIANT_CLASS_TUPLE . 40)
            (G_VARIANT_CLASS_DICT_ENTRY . 123)
            (G_VARIANT_PARSE_ERROR_FAILED . 0)
            (G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED . 1)
            (G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE . 2)
            (G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED
              .
              3)
            (G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END . 4)
            (G_VARIANT_PARSE_ERROR_INVALID_CHARACTER . 5)
            (G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING . 6)
            (G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH . 7)
            (G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE . 8)
            (G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING . 9)
            (G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE . 10)
            (G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE . 11)
            (G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG . 12)
            (G_VARIANT_PARSE_ERROR_TYPE_ERROR . 13)
            (G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN . 14)
            (G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD . 15)
            (G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT
              .
              16)
            (G_VARIANT_PARSE_ERROR_VALUE_EXPECTED . 17)
            (G_LOG_FLAG_RECURSION . 1)
            (G_LOG_FLAG_FATAL . 2)
            (G_LOG_LEVEL_ERROR . 4)
            (G_LOG_LEVEL_CRITICAL . 8)
            (G_LOG_LEVEL_WARNING . 16)
            (G_LOG_LEVEL_MESSAGE . 32)
            (G_LOG_LEVEL_INFO . 64)
            (G_LOG_LEVEL_DEBUG . 128)
            (G_LOG_LEVEL_MASK . -4)
            (G_LOG_WRITER_HANDLED . 1)
            (G_LOG_WRITER_UNHANDLED . 0)
            (G_OPTION_FLAG_NONE . 0)
            (G_OPTION_FLAG_HIDDEN . 1)
            (G_OPTION_FLAG_IN_MAIN . 2)
            (G_OPTION_FLAG_REVERSE . 4)
            (G_OPTION_FLAG_NO_ARG . 8)
            (G_OPTION_FLAG_FILENAME . 16)
            (G_OPTION_FLAG_OPTIONAL_ARG . 32)
            (G_OPTION_FLAG_NOALIAS . 64)
            (G_OPTION_ARG_NONE . 0)
            (G_OPTION_ARG_STRING . 1)
            (G_OPTION_ARG_INT . 2)
            (G_OPTION_ARG_CALLBACK . 3)
            (G_OPTION_ARG_FILENAME . 4)
            (G_OPTION_ARG_STRING_ARRAY . 5)
            (G_OPTION_ARG_FILENAME_ARRAY . 6)
            (G_OPTION_ARG_DOUBLE . 7)
            (G_OPTION_ARG_INT64 . 8)
            (G_OPTION_ERROR_UNKNOWN_OPTION . 0)
            (G_OPTION_ERROR_BAD_VALUE . 1)
            (G_OPTION_ERROR_FAILED . 2)
            (G_REGEX_ERROR_COMPILE . 0)
            (G_REGEX_ERROR_OPTIMIZE . 1)
            (G_REGEX_ERROR_REPLACE . 2)
            (G_REGEX_ERROR_MATCH . 3)
            (G_REGEX_ERROR_INTERNAL . 4)
            (G_REGEX_ERROR_STRAY_BACKSLASH . 101)
            (G_REGEX_ERROR_MISSING_CONTROL_CHAR . 102)
            (G_REGEX_ERROR_UNRECOGNIZED_ESCAPE . 103)
            (G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER . 104)
            (G_REGEX_ERROR_QUANTIFIER_TOO_BIG . 105)
            (G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS
              .
              106)
            (G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS
              .
              107)
            (G_REGEX_ERROR_RANGE_OUT_OF_ORDER . 108)
            (G_REGEX_ERROR_NOTHING_TO_REPEAT . 109)
            (G_REGEX_ERROR_UNRECOGNIZED_CHARACTER . 112)
            (G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS
              .
              113)
            (G_REGEX_ERROR_UNMATCHED_PARENTHESIS . 114)
            (G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE
              .
              115)
            (G_REGEX_ERROR_UNTERMINATED_COMMENT . 118)
            (G_REGEX_ERROR_EXPRESSION_TOO_LARGE . 120)
            (G_REGEX_ERROR_MEMORY_ERROR . 121)
            (G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND . 125)
            (G_REGEX_ERROR_MALFORMED_CONDITION . 126)
            (G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES
              .
              127)
            (G_REGEX_ERROR_ASSERTION_EXPECTED . 128)
            (G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME . 130)
            (G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED
              .
              131)
            (G_REGEX_ERROR_HEX_CODE_TOO_LARGE . 134)
            (G_REGEX_ERROR_INVALID_CONDITION . 135)
            (G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND
              .
              136)
            (G_REGEX_ERROR_INFINITE_LOOP . 140)
            (G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR
              .
              142)
            (G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME . 143)
            (G_REGEX_ERROR_MALFORMED_PROPERTY . 146)
            (G_REGEX_ERROR_UNKNOWN_PROPERTY . 147)
            (G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG . 148)
            (G_REGEX_ERROR_TOO_MANY_SUBPATTERNS . 149)
            (G_REGEX_ERROR_INVALID_OCTAL_VALUE . 151)
            (G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE . 154)
            (G_REGEX_ERROR_DEFINE_REPETION . 155)
            (G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS
              .
              156)
            (G_REGEX_ERROR_MISSING_BACK_REFERENCE . 157)
            (G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE . 158)
            (G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN
              .
              159)
            (G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB
              .
              160)
            (G_REGEX_ERROR_NUMBER_TOO_BIG . 161)
            (G_REGEX_ERROR_MISSING_SUBPATTERN_NAME . 162)
            (G_REGEX_ERROR_MISSING_DIGIT . 163)
            (G_REGEX_ERROR_INVALID_DATA_CHARACTER . 164)
            (G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME . 165)
            (G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED
              .
              166)
            (G_REGEX_ERROR_INVALID_CONTROL_CHAR . 168)
            (G_REGEX_ERROR_MISSING_NAME . 169)
            (G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS . 171)
            (G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES . 172)
            (G_REGEX_ERROR_NAME_TOO_LONG . 175)
            (G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE . 176)
            (G_REGEX_CASELESS . 1)
            (G_REGEX_MULTILINE . 2)
            (G_REGEX_DOTALL . 4)
            (G_REGEX_EXTENDED . 8)
            (G_REGEX_ANCHORED . 16)
            (G_REGEX_DOLLAR_ENDONLY . 32)
            (G_REGEX_UNGREEDY . 512)
            (G_REGEX_RAW . 2048)
            (G_REGEX_NO_AUTO_CAPTURE . 4096)
            (G_REGEX_OPTIMIZE . 8192)
            (G_REGEX_FIRSTLINE . 262144)
            (G_REGEX_DUPNAMES . 524288)
            (G_REGEX_NEWLINE_CR . 1048576)
            (G_REGEX_NEWLINE_LF . 2097152)
            (G_REGEX_NEWLINE_CRLF . 3145728)
            (G_REGEX_NEWLINE_ANYCRLF . 5242880)
            (G_REGEX_BSR_ANYCRLF . 8388608)
            (G_REGEX_JAVASCRIPT_COMPAT . 33554432)
            (G_REGEX_MATCH_ANCHORED . 16)
            (G_REGEX_MATCH_NOTBOL . 128)
            (G_REGEX_MATCH_NOTEOL . 256)
            (G_REGEX_MATCH_NOTEMPTY . 1024)
            (G_REGEX_MATCH_PARTIAL . 32768)
            (G_REGEX_MATCH_NEWLINE_CR . 1048576)
            (G_REGEX_MATCH_NEWLINE_LF . 2097152)
            (G_REGEX_MATCH_NEWLINE_CRLF . 3145728)
            (G_REGEX_MATCH_NEWLINE_ANY . 4194304)
            (G_REGEX_MATCH_NEWLINE_ANYCRLF . 5242880)
            (G_REGEX_MATCH_BSR_ANYCRLF . 8388608)
            (G_REGEX_MATCH_BSR_ANY . 16777216)
            (G_REGEX_MATCH_PARTIAL_SOFT . 32768)
            (G_REGEX_MATCH_PARTIAL_HARD . 134217728)
            (G_REGEX_MATCH_NOTEMPTY_ATSTART . 268435456)
            (G_ERR_UNKNOWN . 0)
            (G_ERR_UNEXP_EOF . 1)
            (G_ERR_UNEXP_EOF_IN_STRING . 2)
            (G_ERR_UNEXP_EOF_IN_COMMENT . 3)
            (G_ERR_NON_DIGIT_IN_CONST . 4)
            (G_ERR_DIGIT_RADIX . 5)
            (G_ERR_FLOAT_RADIX . 6)
            (G_ERR_FLOAT_MALFORMED . 7)
            (G_TOKEN_EOF . 0)
            (G_TOKEN_LEFT_PAREN . 40)
            (G_TOKEN_RIGHT_PAREN . 41)
            (G_TOKEN_LEFT_CURLY . 123)
            (G_TOKEN_RIGHT_CURLY . 125)
            (G_TOKEN_LEFT_BRACE . 91)
            (G_TOKEN_RIGHT_BRACE . 93)
            (G_TOKEN_EQUAL_SIGN . 61)
            (G_TOKEN_COMMA . 44)
            (G_TOKEN_NONE . 256)
            (G_TOKEN_ERROR . 257)
            (G_TOKEN_CHAR . 258)
            (G_TOKEN_BINARY . 259)
            (G_TOKEN_OCTAL . 260)
            (G_TOKEN_INT . 261)
            (G_TOKEN_HEX . 262)
            (G_TOKEN_FLOAT . 263)
            (G_TOKEN_STRING . 264)
            (G_TOKEN_SYMBOL . 265)
            (G_TOKEN_IDENTIFIER . 266)
            (G_TOKEN_IDENTIFIER_NULL . 267)
            (G_TOKEN_COMMENT_SINGLE . 268)
            (G_TOKEN_COMMENT_MULTI . 269)
            (G_TOKEN_LAST . 270)
            (G_SHELL_ERROR_BAD_QUOTING . 0)
            (G_SHELL_ERROR_EMPTY_STRING . 1)
            (G_SHELL_ERROR_FAILED . 2)
            (G_SLICE_CONFIG_ALWAYS_MALLOC . 1)
            (G_SLICE_CONFIG_BYPASS_MAGAZINES . 2)
            (G_SLICE_CONFIG_WORKING_SET_MSECS . 3)
            (G_SLICE_CONFIG_COLOR_INCREMENT . 4)
            (G_SLICE_CONFIG_CHUNK_SIZES . 5)
            (G_SLICE_CONFIG_CONTENTION_COUNTER . 6)
            (G_SPAWN_ERROR_FORK . 0)
            (G_SPAWN_ERROR_READ . 1)
            (G_SPAWN_ERROR_CHDIR . 2)
            (G_SPAWN_ERROR_ACCES . 3)
            (G_SPAWN_ERROR_PERM . 4)
            (G_SPAWN_ERROR_TOO_BIG . 5)
            (G_SPAWN_ERROR_2BIG . 5)
            (G_SPAWN_ERROR_NOEXEC . 6)
            (G_SPAWN_ERROR_NAMETOOLONG . 7)
            (G_SPAWN_ERROR_NOENT . 8)
            (G_SPAWN_ERROR_NOMEM . 9)
            (G_SPAWN_ERROR_NOTDIR . 10)
            (G_SPAWN_ERROR_LOOP . 11)
            (G_SPAWN_ERROR_TXTBUSY . 12)
            (G_SPAWN_ERROR_IO . 13)
            (G_SPAWN_ERROR_NFILE . 14)
            (G_SPAWN_ERROR_MFILE . 15)
            (G_SPAWN_ERROR_INVAL . 16)
            (G_SPAWN_ERROR_ISDIR . 17)
            (G_SPAWN_ERROR_LIBBAD . 18)
            (G_SPAWN_ERROR_FAILED . 19)
            (G_SPAWN_DEFAULT . 0)
            (G_SPAWN_LEAVE_DESCRIPTORS_OPEN . 1)
            (G_SPAWN_DO_NOT_REAP_CHILD . 2)
            (G_SPAWN_SEARCH_PATH . 4)
            (G_SPAWN_STDOUT_TO_DEV_NULL . 8)
            (G_SPAWN_STDERR_TO_DEV_NULL . 16)
            (G_SPAWN_CHILD_INHERITS_STDIN . 32)
            (G_SPAWN_FILE_AND_ARGV_ZERO . 64)
            (G_SPAWN_SEARCH_PATH_FROM_ENVP . 128)
            (G_SPAWN_CLOEXEC_PIPES . 256)
            (G_ASCII_ALNUM . 1)
            (G_ASCII_ALPHA . 2)
            (G_ASCII_CNTRL . 4)
            (G_ASCII_DIGIT . 8)
            (G_ASCII_GRAPH . 16)
            (G_ASCII_LOWER . 32)
            (G_ASCII_PRINT . 64)
            (G_ASCII_PUNCT . 128)
            (G_ASCII_SPACE . 256)
            (G_ASCII_UPPER . 512)
            (G_ASCII_XDIGIT . 1024)
            (G_TEST_TRAP_SILENCE_STDOUT . 128)
            (G_TEST_TRAP_SILENCE_STDERR . 256)
            (G_TEST_TRAP_INHERIT_STDIN . 512)
            (G_TEST_SUBPROCESS_INHERIT_STDIN . 1)
            (G_TEST_SUBPROCESS_INHERIT_STDOUT . 2)
            (G_TEST_SUBPROCESS_INHERIT_STDERR . 4)
            (G_TEST_LOG_NONE . 0)
            (G_TEST_LOG_ERROR . 1)
            (G_TEST_LOG_START_BINARY . 2)
            (G_TEST_LOG_LIST_CASE . 3)
            (G_TEST_LOG_SKIP_CASE . 4)
            (G_TEST_LOG_START_CASE . 5)
            (G_TEST_LOG_STOP_CASE . 6)
            (G_TEST_LOG_MIN_RESULT . 7)
            (G_TEST_LOG_MAX_RESULT . 8)
            (G_TEST_LOG_MESSAGE . 9)
            (G_TEST_LOG_START_SUITE . 10)
            (G_TEST_LOG_STOP_SUITE . 11)
            (G_TEST_DIST . 0)
            (G_TEST_BUILT . 1)
            (G_THREAD_PRIORITY_LOW . 0)
            (G_THREAD_PRIORITY_NORMAL . 1)
            (G_THREAD_PRIORITY_HIGH . 2)
            (G_THREAD_PRIORITY_URGENT . 3)
            (QOS_CLASS_USER_INTERACTIVE . 33)
            (QOS_CLASS_USER_INITIATED . 25)
            (QOS_CLASS_DEFAULT . 21)
            (QOS_CLASS_UTILITY . 17)
            (QOS_CLASS_BACKGROUND . 9)
            (QOS_CLASS_UNSPECIFIED . 0)
            (G_TYPE_DEBUG_NONE . 0)
            (G_TYPE_DEBUG_OBJECTS . 1)
            (G_TYPE_DEBUG_SIGNALS . 2)
            (G_TYPE_DEBUG_INSTANCE_COUNT . 4)
            (G_TYPE_DEBUG_MASK . 7)
            (G_TYPE_FLAG_CLASSED . 1)
            (G_TYPE_FLAG_INSTANTIATABLE . 2)
            (G_TYPE_FLAG_DERIVABLE . 4)
            (G_TYPE_FLAG_DEEP_DERIVABLE . 8)
            (G_TYPE_FLAG_ABSTRACT . 16)
            (G_TYPE_FLAG_VALUE_ABSTRACT . 32)
            (G_PARAM_READABLE . 1)
            (G_PARAM_WRITABLE . 2)
            (G_PARAM_READWRITE . 3)
            (G_PARAM_CONSTRUCT . 4)
            (G_PARAM_CONSTRUCT_ONLY . 8)
            (G_PARAM_LAX_VALIDATION . 16)
            (G_PARAM_STATIC_NAME . 32)
            (G_PARAM_PRIVATE . 32)
            (G_PARAM_STATIC_NICK . 64)
            (G_PARAM_STATIC_BLURB . 128)
            (G_PARAM_EXPLICIT_NOTIFY . 1073741824)
            (G_PARAM_DEPRECATED . 2147483648)
            (G_SIGNAL_RUN_FIRST . 1)
            (G_SIGNAL_RUN_LAST . 2)
            (G_SIGNAL_RUN_CLEANUP . 4)
            (G_SIGNAL_NO_RECURSE . 8)
            (G_SIGNAL_DETAILED . 16)
            (G_SIGNAL_ACTION . 32)
            (G_SIGNAL_NO_HOOKS . 64)
            (G_SIGNAL_MUST_COLLECT . 128)
            (G_SIGNAL_DEPRECATED . 256)
            (G_CONNECT_AFTER . 1)
            (G_CONNECT_SWAPPED . 2)
            (G_SIGNAL_MATCH_ID . 1)
            (G_SIGNAL_MATCH_DETAIL . 2)
            (G_SIGNAL_MATCH_CLOSURE . 4)
            (G_SIGNAL_MATCH_FUNC . 8)
            (G_SIGNAL_MATCH_DATA . 16)
            (G_SIGNAL_MATCH_UNBLOCKED . 32)
            (G_BINDING_DEFAULT . 0)
            (G_BINDING_BIDIRECTIONAL . 1)
            (G_BINDING_SYNC_CREATE . 2)
            (G_BINDING_INVERT_BOOLEAN . 4)
            (G_SIGNAL_FLAGS_MASK . 511)
            (G_SIGNAL_MATCH_MASK . 63))))
    (lambda (k) (assq-ref sym-tab k))))
(export ffi-gobject-symbol-val)

(define (unwrap-enum obj)
  (cond ((number? obj) obj)
        ((symbol? obj) (ffi-gobject-symbol-val obj))
        ((fh-object? obj) (struct-ref obj 0))
        (else (error "type mismatch"))))

(define ffi-gobject-types
  '("GValue" "GTypePlugin" "GTypeClass" "GTypeInterface" "GTypeInstance" 
    "GTypeInfo" "GTypeFundamentalInfo" "GInterfaceInfo" "GTypeValueTable" 
    "GTypeQuery" (struct . "_GTypeClass") (struct . "_GTypeInstance") (struct 
    . "_GTypeInterface") (struct . "_GTypeQuery") (struct . "_GTypeInfo") (
    struct . "_GTypeFundamentalInfo") (struct . "_GInterfaceInfo") (struct . 
    "_GTypeValueTable") (struct . "_GValue") "GParamSpec" "GParamSpecClass" 
    "GParameter" "GParamSpecPool" (struct . "_GParamSpec") (struct . 
    "_GParamSpecClass") (struct . "_GParameter") "GParamSpecTypeInfo" (struct 
    . "_GParamSpecTypeInfo") "GClosure" "GClosureNotifyData" "GCClosure" (
    struct . "_GClosureNotifyData") (struct . "_GClosure") (struct . 
    "_GCClosure") "GSignalQuery" "GSignalInvocationHint" (struct . 
    "_GSignalInvocationHint") (struct . "_GSignalQuery") "GObject" 
    "GObjectClass" "GInitiallyUnowned" "GInitiallyUnownedClass" 
    "GObjectConstructParam" (struct . "_GObject") (struct . "_GObjectClass") (
    struct . "_GObjectConstructParam") "GWeakRef" "GBinding" "GEnumClass" 
    "GFlagsClass" "GEnumValue" "GFlagsValue" (struct . "_GEnumClass") (struct 
    . "_GFlagsClass") (struct . "_GEnumValue") (struct . "_GFlagsValue") 
    "GParamSpecChar" "GParamSpecUChar" "GParamSpecBoolean" "GParamSpecInt" 
    "GParamSpecUInt" "GParamSpecLong" "GParamSpecULong" "GParamSpecInt64" 
    "GParamSpecUInt64" "GParamSpecUnichar" "GParamSpecEnum" "GParamSpecFlags" 
    "GParamSpecFloat" "GParamSpecDouble" "GParamSpecString" "GParamSpecParam" 
    "GParamSpecBoxed" "GParamSpecPointer" "GParamSpecValueArray" 
    "GParamSpecObject" "GParamSpecOverride" "GParamSpecGType" 
    "GParamSpecVariant" (struct . "_GParamSpecChar") (struct . 
    "_GParamSpecUChar") (struct . "_GParamSpecBoolean") (struct . 
    "_GParamSpecInt") (struct . "_GParamSpecUInt") (struct . "_GParamSpecLong"
    ) (struct . "_GParamSpecULong") (struct . "_GParamSpecInt64") (struct . 
    "_GParamSpecUInt64") (struct . "_GParamSpecUnichar") (struct . 
    "_GParamSpecEnum") (struct . "_GParamSpecFlags") (struct . 
    "_GParamSpecFloat") (struct . "_GParamSpecDouble") (struct . 
    "_GParamSpecString") (struct . "_GParamSpecParam") (struct . 
    "_GParamSpecBoxed") (struct . "_GParamSpecPointer") (struct . 
    "_GParamSpecValueArray") (struct . "_GParamSpecObject") (struct . 
    "_GParamSpecOverride") (struct . "_GParamSpecGType") (struct . 
    "_GParamSpecVariant") "GTypeModule" "GTypeModuleClass" 
    "GTypeModule_autoptr" (struct . "_GTypeModule") (struct . 
    "_GTypeModuleClass") "GTypePluginClass" (struct . "_GTypePluginClass") 
    "GValueArray" (struct . "_GValueArray") "gchararray" "GObject_autoptr" 
    "GInitiallyUnowned_autoptr"))
;;(export ffi-gobjecttypes)

;; --- last line ---
