;; auto-generated by ffi-help.scm

(define-module (ffi gio)
  #:use-module (ffi glib)
  #:use-module (system ffi-help-rt)
  #:use-module ((system foreign) #:prefix ffi:)
  #:use-module (bytestructures guile)
  )
(dynamic-link "libgobject-2.0")
(dynamic-link "libglib-2.0")
(dynamic-link "libintl")
(dynamic-link "libgio-2.0")
(define void intptr_t)
(define echo-decls #f)

;; typedef enum {
;;   G_APP_INFO_CREATE_NONE = 0,
;;   G_APP_INFO_CREATE_NEEDS_TERMINAL = 1<<0,
;;   G_APP_INFO_CREATE_SUPPORTS_URIS = 1<<1,
;;   G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 1<<2,
;; } GAppInfoCreateFlags;
(define-fh-enum GAppInfoCreateFlags
  '((G_APP_INFO_CREATE_NONE . 0)
    (G_APP_INFO_CREATE_NEEDS_TERMINAL . 1)
    (G_APP_INFO_CREATE_SUPPORTS_URIS . 2)
    (G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION
      .
      4))
  )

;; typedef enum {
;;   G_CONVERTER_NO_FLAGS = 0,
;;   G_CONVERTER_INPUT_AT_END = 1<<0,
;;   G_CONVERTER_FLUSH = 1<<1,
;; } GConverterFlags;
(define-fh-enum GConverterFlags
  '((G_CONVERTER_NO_FLAGS . 0)
    (G_CONVERTER_INPUT_AT_END . 1)
    (G_CONVERTER_FLUSH . 2))
  )

;; typedef enum {
;;   G_CONVERTER_ERROR = 0,
;;   G_CONVERTER_CONVERTED = 1,
;;   G_CONVERTER_FINISHED = 2,
;;   G_CONVERTER_FLUSHED = 3,
;; } GConverterResult;
(define-fh-enum GConverterResult
  '((G_CONVERTER_ERROR . 0)
    (G_CONVERTER_CONVERTED . 1)
    (G_CONVERTER_FINISHED . 2)
    (G_CONVERTER_FLUSHED . 3))
  )

;; typedef enum {
;;   G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN,
;;   G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN,
;;   G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN,
;; } GDataStreamByteOrder;
(define-fh-enum GDataStreamByteOrder
  '((G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN . 0)
    (G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN . 1)
    (G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN . 2))
  )

;; typedef enum {
;;   G_DATA_STREAM_NEWLINE_TYPE_LF,
;;   G_DATA_STREAM_NEWLINE_TYPE_CR,
;;   G_DATA_STREAM_NEWLINE_TYPE_CR_LF,
;;   G_DATA_STREAM_NEWLINE_TYPE_ANY,
;; } GDataStreamNewlineType;
(define-fh-enum GDataStreamNewlineType
  '((G_DATA_STREAM_NEWLINE_TYPE_LF . 0)
    (G_DATA_STREAM_NEWLINE_TYPE_CR . 1)
    (G_DATA_STREAM_NEWLINE_TYPE_CR_LF . 2)
    (G_DATA_STREAM_NEWLINE_TYPE_ANY . 3))
  )

;; typedef enum {
;;   G_FILE_ATTRIBUTE_TYPE_INVALID = 0,
;;   G_FILE_ATTRIBUTE_TYPE_STRING,
;;   G_FILE_ATTRIBUTE_TYPE_BYTE_STRING,
;;   G_FILE_ATTRIBUTE_TYPE_BOOLEAN,
;;   G_FILE_ATTRIBUTE_TYPE_UINT32,
;;   G_FILE_ATTRIBUTE_TYPE_INT32,
;;   G_FILE_ATTRIBUTE_TYPE_UINT64,
;;   G_FILE_ATTRIBUTE_TYPE_INT64,
;;   G_FILE_ATTRIBUTE_TYPE_OBJECT,
;;   G_FILE_ATTRIBUTE_TYPE_STRINGV,
;; } GFileAttributeType;
(define-fh-enum GFileAttributeType
  '((G_FILE_ATTRIBUTE_TYPE_INVALID . 0)
    (G_FILE_ATTRIBUTE_TYPE_STRING . 1)
    (G_FILE_ATTRIBUTE_TYPE_BYTE_STRING . 2)
    (G_FILE_ATTRIBUTE_TYPE_BOOLEAN . 3)
    (G_FILE_ATTRIBUTE_TYPE_UINT32 . 4)
    (G_FILE_ATTRIBUTE_TYPE_INT32 . 5)
    (G_FILE_ATTRIBUTE_TYPE_UINT64 . 6)
    (G_FILE_ATTRIBUTE_TYPE_INT64 . 7)
    (G_FILE_ATTRIBUTE_TYPE_OBJECT . 8)
    (G_FILE_ATTRIBUTE_TYPE_STRINGV . 9))
  )

;; typedef enum {
;;   G_FILE_ATTRIBUTE_INFO_NONE = 0,
;;   G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1<<0,
;;   G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 1<<1,
;; } GFileAttributeInfoFlags;
(define-fh-enum GFileAttributeInfoFlags
  '((G_FILE_ATTRIBUTE_INFO_NONE . 0)
    (G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE . 1)
    (G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED . 2))
  )

;; typedef enum {
;;   G_FILE_ATTRIBUTE_STATUS_UNSET = 0,
;;   G_FILE_ATTRIBUTE_STATUS_SET,
;;   G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING,
;; } GFileAttributeStatus;
(define-fh-enum GFileAttributeStatus
  '((G_FILE_ATTRIBUTE_STATUS_UNSET . 0)
    (G_FILE_ATTRIBUTE_STATUS_SET . 1)
    (G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING . 2))
  )

;; typedef enum {
;;   G_FILE_QUERY_INFO_NONE = 0,
;;   G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1<<0,
;; } GFileQueryInfoFlags;
(define-fh-enum GFileQueryInfoFlags
  '((G_FILE_QUERY_INFO_NONE . 0)
    (G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS . 1))
  )

;; typedef enum {
;;   G_FILE_CREATE_NONE = 0,
;;   G_FILE_CREATE_PRIVATE = 1<<0,
;;   G_FILE_CREATE_REPLACE_DESTINATION = 1<<1,
;; } GFileCreateFlags;
(define-fh-enum GFileCreateFlags
  '((G_FILE_CREATE_NONE . 0)
    (G_FILE_CREATE_PRIVATE . 1)
    (G_FILE_CREATE_REPLACE_DESTINATION . 2))
  )

;; typedef enum {
;;   G_FILE_MEASURE_NONE = 0,
;;   G_FILE_MEASURE_REPORT_ANY_ERROR = 1<<1,
;;   G_FILE_MEASURE_APPARENT_SIZE = 1<<2,
;;   G_FILE_MEASURE_NO_XDEV = 1<<3,
;; } GFileMeasureFlags;
(define-fh-enum GFileMeasureFlags
  '((G_FILE_MEASURE_NONE . 0)
    (G_FILE_MEASURE_REPORT_ANY_ERROR . 2)
    (G_FILE_MEASURE_APPARENT_SIZE . 4)
    (G_FILE_MEASURE_NO_XDEV . 8))
  )

;; typedef enum {
;;   G_MOUNT_MOUNT_NONE = 0,
;; } GMountMountFlags;
(define-fh-enum GMountMountFlags
  '((G_MOUNT_MOUNT_NONE . 0))
  )

;; typedef enum {
;;   G_MOUNT_UNMOUNT_NONE = 0,
;;   G_MOUNT_UNMOUNT_FORCE = 1<<0,
;; } GMountUnmountFlags;
(define-fh-enum GMountUnmountFlags
  '((G_MOUNT_UNMOUNT_NONE . 0)
    (G_MOUNT_UNMOUNT_FORCE . 1))
  )

;; typedef enum {
;;   G_DRIVE_START_NONE = 0,
;; } GDriveStartFlags;
(define-fh-enum GDriveStartFlags
  '((G_DRIVE_START_NONE . 0))
  )

;; typedef enum {
;;   G_DRIVE_START_STOP_TYPE_UNKNOWN,
;;   G_DRIVE_START_STOP_TYPE_SHUTDOWN,
;;   G_DRIVE_START_STOP_TYPE_NETWORK,
;;   G_DRIVE_START_STOP_TYPE_MULTIDISK,
;;   G_DRIVE_START_STOP_TYPE_PASSWORD,
;; } GDriveStartStopType;
(define-fh-enum GDriveStartStopType
  '((G_DRIVE_START_STOP_TYPE_UNKNOWN . 0)
    (G_DRIVE_START_STOP_TYPE_SHUTDOWN . 1)
    (G_DRIVE_START_STOP_TYPE_NETWORK . 2)
    (G_DRIVE_START_STOP_TYPE_MULTIDISK . 3)
    (G_DRIVE_START_STOP_TYPE_PASSWORD . 4))
  )

;; typedef enum {
;;   G_FILE_COPY_NONE = 0,
;;   G_FILE_COPY_OVERWRITE = 1<<0,
;;   G_FILE_COPY_BACKUP = 1<<1,
;;   G_FILE_COPY_NOFOLLOW_SYMLINKS = 1<<2,
;;   G_FILE_COPY_ALL_METADATA = 1<<3,
;;   G_FILE_COPY_NO_FALLBACK_FOR_MOVE = 1<<4,
;;   G_FILE_COPY_TARGET_DEFAULT_PERMS = 1<<5,
;; } GFileCopyFlags;
(define-fh-enum GFileCopyFlags
  '((G_FILE_COPY_NONE . 0)
    (G_FILE_COPY_OVERWRITE . 1)
    (G_FILE_COPY_BACKUP . 2)
    (G_FILE_COPY_NOFOLLOW_SYMLINKS . 4)
    (G_FILE_COPY_ALL_METADATA . 8)
    (G_FILE_COPY_NO_FALLBACK_FOR_MOVE . 16)
    (G_FILE_COPY_TARGET_DEFAULT_PERMS . 32))
  )

;; typedef enum {
;;   G_FILE_MONITOR_NONE = 0,
;;   G_FILE_MONITOR_WATCH_MOUNTS = 1<<0,
;;   G_FILE_MONITOR_SEND_MOVED = 1<<1,
;;   G_FILE_MONITOR_WATCH_HARD_LINKS = 1<<2,
;;   G_FILE_MONITOR_WATCH_MOVES = 1<<3,
;; } GFileMonitorFlags;
(define-fh-enum GFileMonitorFlags
  '((G_FILE_MONITOR_NONE . 0)
    (G_FILE_MONITOR_WATCH_MOUNTS . 1)
    (G_FILE_MONITOR_SEND_MOVED . 2)
    (G_FILE_MONITOR_WATCH_HARD_LINKS . 4)
    (G_FILE_MONITOR_WATCH_MOVES . 8))
  )

;; typedef enum {
;;   G_FILE_TYPE_UNKNOWN = 0,
;;   G_FILE_TYPE_REGULAR,
;;   G_FILE_TYPE_DIRECTORY,
;;   G_FILE_TYPE_SYMBOLIC_LINK,
;;   G_FILE_TYPE_SPECIAL,
;;   G_FILE_TYPE_SHORTCUT,
;;   G_FILE_TYPE_MOUNTABLE,
;; } GFileType;
(define-fh-enum GFileType
  '((G_FILE_TYPE_UNKNOWN . 0)
    (G_FILE_TYPE_REGULAR . 1)
    (G_FILE_TYPE_DIRECTORY . 2)
    (G_FILE_TYPE_SYMBOLIC_LINK . 3)
    (G_FILE_TYPE_SPECIAL . 4)
    (G_FILE_TYPE_SHORTCUT . 5)
    (G_FILE_TYPE_MOUNTABLE . 6))
  )

;; typedef enum {
;;   G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
;;   G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL,
;;   G_FILESYSTEM_PREVIEW_TYPE_NEVER,
;; } GFilesystemPreviewType;
(define-fh-enum GFilesystemPreviewType
  '((G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS . 0)
    (G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL . 1)
    (G_FILESYSTEM_PREVIEW_TYPE_NEVER . 2))
  )

;; typedef enum {
;;   G_FILE_MONITOR_EVENT_CHANGED,
;;   G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT,
;;   G_FILE_MONITOR_EVENT_DELETED,
;;   G_FILE_MONITOR_EVENT_CREATED,
;;   G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED,
;;   G_FILE_MONITOR_EVENT_PRE_UNMOUNT,
;;   G_FILE_MONITOR_EVENT_UNMOUNTED,
;;   G_FILE_MONITOR_EVENT_MOVED,
;;   G_FILE_MONITOR_EVENT_RENAMED,
;;   G_FILE_MONITOR_EVENT_MOVED_IN,
;;   G_FILE_MONITOR_EVENT_MOVED_OUT,
;; } GFileMonitorEvent;
(define-fh-enum GFileMonitorEvent
  '((G_FILE_MONITOR_EVENT_CHANGED . 0)
    (G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT . 1)
    (G_FILE_MONITOR_EVENT_DELETED . 2)
    (G_FILE_MONITOR_EVENT_CREATED . 3)
    (G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED . 4)
    (G_FILE_MONITOR_EVENT_PRE_UNMOUNT . 5)
    (G_FILE_MONITOR_EVENT_UNMOUNTED . 6)
    (G_FILE_MONITOR_EVENT_MOVED . 7)
    (G_FILE_MONITOR_EVENT_RENAMED . 8)
    (G_FILE_MONITOR_EVENT_MOVED_IN . 9)
    (G_FILE_MONITOR_EVENT_MOVED_OUT . 10))
  )

;; typedef enum {
;;   G_IO_ERROR_FAILED,
;;   G_IO_ERROR_NOT_FOUND,
;;   G_IO_ERROR_EXISTS,
;;   G_IO_ERROR_IS_DIRECTORY,
;;   G_IO_ERROR_NOT_DIRECTORY,
;;   G_IO_ERROR_NOT_EMPTY,
;;   G_IO_ERROR_NOT_REGULAR_FILE,
;;   G_IO_ERROR_NOT_SYMBOLIC_LINK,
;;   G_IO_ERROR_NOT_MOUNTABLE_FILE,
;;   G_IO_ERROR_FILENAME_TOO_LONG,
;;   G_IO_ERROR_INVALID_FILENAME,
;;   G_IO_ERROR_TOO_MANY_LINKS,
;;   G_IO_ERROR_NO_SPACE,
;;   G_IO_ERROR_INVALID_ARGUMENT,
;;   G_IO_ERROR_PERMISSION_DENIED,
;;   G_IO_ERROR_NOT_SUPPORTED,
;;   G_IO_ERROR_NOT_MOUNTED,
;;   G_IO_ERROR_ALREADY_MOUNTED,
;;   G_IO_ERROR_CLOSED,
;;   G_IO_ERROR_CANCELLED,
;;   G_IO_ERROR_PENDING,
;;   G_IO_ERROR_READ_ONLY,
;;   G_IO_ERROR_CANT_CREATE_BACKUP,
;;   G_IO_ERROR_WRONG_ETAG,
;;   G_IO_ERROR_TIMED_OUT,
;;   G_IO_ERROR_WOULD_RECURSE,
;;   G_IO_ERROR_BUSY,
;;   G_IO_ERROR_WOULD_BLOCK,
;;   G_IO_ERROR_HOST_NOT_FOUND,
;;   G_IO_ERROR_WOULD_MERGE,
;;   G_IO_ERROR_FAILED_HANDLED,
;;   G_IO_ERROR_TOO_MANY_OPEN_FILES,
;;   G_IO_ERROR_NOT_INITIALIZED,
;;   G_IO_ERROR_ADDRESS_IN_USE,
;;   G_IO_ERROR_PARTIAL_INPUT,
;;   G_IO_ERROR_INVALID_DATA,
;;   G_IO_ERROR_DBUS_ERROR,
;;   G_IO_ERROR_HOST_UNREACHABLE,
;;   G_IO_ERROR_NETWORK_UNREACHABLE,
;;   G_IO_ERROR_CONNECTION_REFUSED,
;;   G_IO_ERROR_PROXY_FAILED,
;;   G_IO_ERROR_PROXY_AUTH_FAILED,
;;   G_IO_ERROR_PROXY_NEED_AUTH,
;;   G_IO_ERROR_PROXY_NOT_ALLOWED,
;;   G_IO_ERROR_BROKEN_PIPE,
;;   G_IO_ERROR_CONNECTION_CLOSED = G_IO_ERROR_BROKEN_PIPE,
;;   G_IO_ERROR_NOT_CONNECTED,
;;   G_IO_ERROR_MESSAGE_TOO_LARGE,
;; } GIOErrorEnum;
(define-fh-enum GIOErrorEnum
  '((G_IO_ERROR_FAILED . 0)
    (G_IO_ERROR_NOT_FOUND . 1)
    (G_IO_ERROR_EXISTS . 2)
    (G_IO_ERROR_IS_DIRECTORY . 3)
    (G_IO_ERROR_NOT_DIRECTORY . 4)
    (G_IO_ERROR_NOT_EMPTY . 5)
    (G_IO_ERROR_NOT_REGULAR_FILE . 6)
    (G_IO_ERROR_NOT_SYMBOLIC_LINK . 7)
    (G_IO_ERROR_NOT_MOUNTABLE_FILE . 8)
    (G_IO_ERROR_FILENAME_TOO_LONG . 9)
    (G_IO_ERROR_INVALID_FILENAME . 10)
    (G_IO_ERROR_TOO_MANY_LINKS . 11)
    (G_IO_ERROR_NO_SPACE . 12)
    (G_IO_ERROR_INVALID_ARGUMENT . 13)
    (G_IO_ERROR_PERMISSION_DENIED . 14)
    (G_IO_ERROR_NOT_SUPPORTED . 15)
    (G_IO_ERROR_NOT_MOUNTED . 16)
    (G_IO_ERROR_ALREADY_MOUNTED . 17)
    (G_IO_ERROR_CLOSED . 18)
    (G_IO_ERROR_CANCELLED . 19)
    (G_IO_ERROR_PENDING . 20)
    (G_IO_ERROR_READ_ONLY . 21)
    (G_IO_ERROR_CANT_CREATE_BACKUP . 22)
    (G_IO_ERROR_WRONG_ETAG . 23)
    (G_IO_ERROR_TIMED_OUT . 24)
    (G_IO_ERROR_WOULD_RECURSE . 25)
    (G_IO_ERROR_BUSY . 26)
    (G_IO_ERROR_WOULD_BLOCK . 27)
    (G_IO_ERROR_HOST_NOT_FOUND . 28)
    (G_IO_ERROR_WOULD_MERGE . 29)
    (G_IO_ERROR_FAILED_HANDLED . 30)
    (G_IO_ERROR_TOO_MANY_OPEN_FILES . 31)
    (G_IO_ERROR_NOT_INITIALIZED . 32)
    (G_IO_ERROR_ADDRESS_IN_USE . 33)
    (G_IO_ERROR_PARTIAL_INPUT . 34)
    (G_IO_ERROR_INVALID_DATA . 35)
    (G_IO_ERROR_DBUS_ERROR . 36)
    (G_IO_ERROR_HOST_UNREACHABLE . 37)
    (G_IO_ERROR_NETWORK_UNREACHABLE . 38)
    (G_IO_ERROR_CONNECTION_REFUSED . 39)
    (G_IO_ERROR_PROXY_FAILED . 40)
    (G_IO_ERROR_PROXY_AUTH_FAILED . 41)
    (G_IO_ERROR_PROXY_NEED_AUTH . 42)
    (G_IO_ERROR_PROXY_NOT_ALLOWED . 43)
    (G_IO_ERROR_BROKEN_PIPE . 44)
    (G_IO_ERROR_CONNECTION_CLOSED . 44)
    (G_IO_ERROR_NOT_CONNECTED . 45)
    (G_IO_ERROR_MESSAGE_TOO_LARGE . 46))
  )

;; typedef enum {
;;   G_ASK_PASSWORD_NEED_PASSWORD = 1<<0,
;;   G_ASK_PASSWORD_NEED_USERNAME = 1<<1,
;;   G_ASK_PASSWORD_NEED_DOMAIN = 1<<2,
;;   G_ASK_PASSWORD_SAVING_SUPPORTED = 1<<3,
;;   G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 1<<4,
;; } GAskPasswordFlags;
(define-fh-enum GAskPasswordFlags
  '((G_ASK_PASSWORD_NEED_PASSWORD . 1)
    (G_ASK_PASSWORD_NEED_USERNAME . 2)
    (G_ASK_PASSWORD_NEED_DOMAIN . 4)
    (G_ASK_PASSWORD_SAVING_SUPPORTED . 8)
    (G_ASK_PASSWORD_ANONYMOUS_SUPPORTED . 16))
  )

;; typedef enum {
;;   G_PASSWORD_SAVE_NEVER,
;;   G_PASSWORD_SAVE_FOR_SESSION,
;;   G_PASSWORD_SAVE_PERMANENTLY,
;; } GPasswordSave;
(define-fh-enum GPasswordSave
  '((G_PASSWORD_SAVE_NEVER . 0)
    (G_PASSWORD_SAVE_FOR_SESSION . 1)
    (G_PASSWORD_SAVE_PERMANENTLY . 2))
  )

;; typedef enum {
;;   G_MOUNT_OPERATION_HANDLED,
;;   G_MOUNT_OPERATION_ABORTED,
;;   G_MOUNT_OPERATION_UNHANDLED,
;; } GMountOperationResult;
(define-fh-enum GMountOperationResult
  '((G_MOUNT_OPERATION_HANDLED . 0)
    (G_MOUNT_OPERATION_ABORTED . 1)
    (G_MOUNT_OPERATION_UNHANDLED . 2))
  )

;; typedef enum {
;;   G_OUTPUT_STREAM_SPLICE_NONE = 0,
;;   G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1<<0,
;;   G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 1<<1,
;; } GOutputStreamSpliceFlags;
(define-fh-enum GOutputStreamSpliceFlags
  '((G_OUTPUT_STREAM_SPLICE_NONE . 0)
    (G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE . 1)
    (G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET . 2))
  )

;; typedef enum {
;;   G_IO_STREAM_SPLICE_NONE = 0,
;;   G_IO_STREAM_SPLICE_CLOSE_STREAM1 = 1<<0,
;;   G_IO_STREAM_SPLICE_CLOSE_STREAM2 = 1<<1,
;;   G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = 1<<2,
;; } GIOStreamSpliceFlags;
(define-fh-enum GIOStreamSpliceFlags
  '((G_IO_STREAM_SPLICE_NONE . 0)
    (G_IO_STREAM_SPLICE_CLOSE_STREAM1 . 1)
    (G_IO_STREAM_SPLICE_CLOSE_STREAM2 . 2)
    (G_IO_STREAM_SPLICE_WAIT_FOR_BOTH . 4))
  )

;; typedef enum {
;;   G_EMBLEM_ORIGIN_UNKNOWN,
;;   G_EMBLEM_ORIGIN_DEVICE,
;;   G_EMBLEM_ORIGIN_LIVEMETADATA,
;;   G_EMBLEM_ORIGIN_TAG,
;; } GEmblemOrigin;
(define-fh-enum GEmblemOrigin
  '((G_EMBLEM_ORIGIN_UNKNOWN . 0)
    (G_EMBLEM_ORIGIN_DEVICE . 1)
    (G_EMBLEM_ORIGIN_LIVEMETADATA . 2)
    (G_EMBLEM_ORIGIN_TAG . 3))
  )

;; typedef enum {
;;   G_RESOLVER_ERROR_NOT_FOUND,
;;   G_RESOLVER_ERROR_TEMPORARY_FAILURE,
;;   G_RESOLVER_ERROR_INTERNAL,
;; } GResolverError;
(define-fh-enum GResolverError
  '((G_RESOLVER_ERROR_NOT_FOUND . 0)
    (G_RESOLVER_ERROR_TEMPORARY_FAILURE . 1)
    (G_RESOLVER_ERROR_INTERNAL . 2))
  )

;; typedef enum {
;;   G_RESOLVER_RECORD_SRV = 1,
;;   G_RESOLVER_RECORD_MX,
;;   G_RESOLVER_RECORD_TXT,
;;   G_RESOLVER_RECORD_SOA,
;;   G_RESOLVER_RECORD_NS,
;; } GResolverRecordType;
(define-fh-enum GResolverRecordType
  '((G_RESOLVER_RECORD_SRV . 1)
    (G_RESOLVER_RECORD_MX . 2)
    (G_RESOLVER_RECORD_TXT . 3)
    (G_RESOLVER_RECORD_SOA . 4)
    (G_RESOLVER_RECORD_NS . 5))
  )

;; typedef enum {
;;   G_RESOURCE_ERROR_NOT_FOUND,
;;   G_RESOURCE_ERROR_INTERNAL,
;; } GResourceError;
(define-fh-enum GResourceError
  '((G_RESOURCE_ERROR_NOT_FOUND . 0)
    (G_RESOURCE_ERROR_INTERNAL . 1))
  )

;; typedef enum {
;;   G_RESOURCE_FLAGS_NONE = 0,
;;   G_RESOURCE_FLAGS_COMPRESSED = 1<<0,
;; } GResourceFlags;
(define-fh-enum GResourceFlags
  '((G_RESOURCE_FLAGS_NONE . 0)
    (G_RESOURCE_FLAGS_COMPRESSED . 1))
  )

;; typedef enum {
;;   G_RESOURCE_LOOKUP_FLAGS_NONE = 0,
;; } GResourceLookupFlags;
(define-fh-enum GResourceLookupFlags
  '((G_RESOURCE_LOOKUP_FLAGS_NONE . 0))
  )

;; typedef enum {
;;   G_SOCKET_FAMILY_INVALID,
;;   G_SOCKET_FAMILY_UNIX = 1,
;;   G_SOCKET_FAMILY_IPV4 = 2,
;;   G_SOCKET_FAMILY_IPV6 = 30,
;; } GSocketFamily;
(define-fh-enum GSocketFamily
  '((G_SOCKET_FAMILY_INVALID . 0)
    (G_SOCKET_FAMILY_UNIX . 1)
    (G_SOCKET_FAMILY_IPV4 . 2)
    (G_SOCKET_FAMILY_IPV6 . 30))
  )

;; typedef enum {
;;   G_SOCKET_TYPE_INVALID,
;;   G_SOCKET_TYPE_STREAM,
;;   G_SOCKET_TYPE_DATAGRAM,
;;   G_SOCKET_TYPE_SEQPACKET,
;; } GSocketType;
(define-fh-enum GSocketType
  '((G_SOCKET_TYPE_INVALID . 0)
    (G_SOCKET_TYPE_STREAM . 1)
    (G_SOCKET_TYPE_DATAGRAM . 2)
    (G_SOCKET_TYPE_SEQPACKET . 3))
  )

;; typedef enum {
;;   G_SOCKET_MSG_NONE,
;;   G_SOCKET_MSG_OOB = 1,
;;   G_SOCKET_MSG_PEEK = 2,
;;   G_SOCKET_MSG_DONTROUTE = 4,
;; } GSocketMsgFlags;
(define-fh-enum GSocketMsgFlags
  '((G_SOCKET_MSG_NONE . 0)
    (G_SOCKET_MSG_OOB . 1)
    (G_SOCKET_MSG_PEEK . 2)
    (G_SOCKET_MSG_DONTROUTE . 4))
  )

;; typedef enum {
;;   G_SOCKET_PROTOCOL_UNKNOWN = -1,
;;   G_SOCKET_PROTOCOL_DEFAULT = 0,
;;   G_SOCKET_PROTOCOL_TCP = 6,
;;   G_SOCKET_PROTOCOL_UDP = 17,
;;   G_SOCKET_PROTOCOL_SCTP = 132,
;; } GSocketProtocol;
(define-fh-enum GSocketProtocol
  '((G_SOCKET_PROTOCOL_UNKNOWN . -1)
    (G_SOCKET_PROTOCOL_DEFAULT . 0)
    (G_SOCKET_PROTOCOL_TCP . 6)
    (G_SOCKET_PROTOCOL_UDP . 17)
    (G_SOCKET_PROTOCOL_SCTP . 132))
  )

;; typedef enum {
;;   G_ZLIB_COMPRESSOR_FORMAT_ZLIB,
;;   G_ZLIB_COMPRESSOR_FORMAT_GZIP,
;;   G_ZLIB_COMPRESSOR_FORMAT_RAW,
;; } GZlibCompressorFormat;
(define-fh-enum GZlibCompressorFormat
  '((G_ZLIB_COMPRESSOR_FORMAT_ZLIB . 0)
    (G_ZLIB_COMPRESSOR_FORMAT_GZIP . 1)
    (G_ZLIB_COMPRESSOR_FORMAT_RAW . 2))
  )

;; typedef enum {
;;   G_UNIX_SOCKET_ADDRESS_INVALID,
;;   G_UNIX_SOCKET_ADDRESS_ANONYMOUS,
;;   G_UNIX_SOCKET_ADDRESS_PATH,
;;   G_UNIX_SOCKET_ADDRESS_ABSTRACT,
;;   G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED,
;; } GUnixSocketAddressType;
(define-fh-enum GUnixSocketAddressType
  '((G_UNIX_SOCKET_ADDRESS_INVALID . 0)
    (G_UNIX_SOCKET_ADDRESS_ANONYMOUS . 1)
    (G_UNIX_SOCKET_ADDRESS_PATH . 2)
    (G_UNIX_SOCKET_ADDRESS_ABSTRACT . 3)
    (G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED . 4))
  )

;; typedef enum {
;;   G_BUS_TYPE_STARTER = -1,
;;   G_BUS_TYPE_NONE = 0,
;;   G_BUS_TYPE_SYSTEM = 1,
;;   G_BUS_TYPE_SESSION = 2,
;; } GBusType;
(define-fh-enum GBusType
  '((G_BUS_TYPE_STARTER . -1)
    (G_BUS_TYPE_NONE . 0)
    (G_BUS_TYPE_SYSTEM . 1)
    (G_BUS_TYPE_SESSION . 2))
  )

;; typedef enum {
;;   G_BUS_NAME_OWNER_FLAGS_NONE = 0,
;;   G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1<<0,
;;   G_BUS_NAME_OWNER_FLAGS_REPLACE = 1<<1,
;; } GBusNameOwnerFlags;
(define-fh-enum GBusNameOwnerFlags
  '((G_BUS_NAME_OWNER_FLAGS_NONE . 0)
    (G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT . 1)
    (G_BUS_NAME_OWNER_FLAGS_REPLACE . 2))
  )

;; typedef enum {
;;   G_BUS_NAME_WATCHER_FLAGS_NONE = 0,
;;   G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1<<0,
;; } GBusNameWatcherFlags;
(define-fh-enum GBusNameWatcherFlags
  '((G_BUS_NAME_WATCHER_FLAGS_NONE . 0)
    (G_BUS_NAME_WATCHER_FLAGS_AUTO_START . 1))
  )

;; typedef enum {
;;   G_DBUS_PROXY_FLAGS_NONE = 0,
;;   G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1<<0,
;;   G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 1<<1,
;;   G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 1<<2,
;;   G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = 1<<3,
;;   G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = 1<<4,
;; } GDBusProxyFlags;
(define-fh-enum GDBusProxyFlags
  '((G_DBUS_PROXY_FLAGS_NONE . 0)
    (G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES . 1)
    (G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS . 2)
    (G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START . 4)
    (G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES
      .
      8)
    (G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION
      .
      16))
  )

;; typedef enum {
;;   G_DBUS_ERROR_FAILED,
;;   G_DBUS_ERROR_NO_MEMORY,
;;   G_DBUS_ERROR_SERVICE_UNKNOWN,
;;   G_DBUS_ERROR_NAME_HAS_NO_OWNER,
;;   G_DBUS_ERROR_NO_REPLY,
;;   G_DBUS_ERROR_IO_ERROR,
;;   G_DBUS_ERROR_BAD_ADDRESS,
;;   G_DBUS_ERROR_NOT_SUPPORTED,
;;   G_DBUS_ERROR_LIMITS_EXCEEDED,
;;   G_DBUS_ERROR_ACCESS_DENIED,
;;   G_DBUS_ERROR_AUTH_FAILED,
;;   G_DBUS_ERROR_NO_SERVER,
;;   G_DBUS_ERROR_TIMEOUT,
;;   G_DBUS_ERROR_NO_NETWORK,
;;   G_DBUS_ERROR_ADDRESS_IN_USE,
;;   G_DBUS_ERROR_DISCONNECTED,
;;   G_DBUS_ERROR_INVALID_ARGS,
;;   G_DBUS_ERROR_FILE_NOT_FOUND,
;;   G_DBUS_ERROR_FILE_EXISTS,
;;   G_DBUS_ERROR_UNKNOWN_METHOD,
;;   G_DBUS_ERROR_TIMED_OUT,
;;   G_DBUS_ERROR_MATCH_RULE_NOT_FOUND,
;;   G_DBUS_ERROR_MATCH_RULE_INVALID,
;;   G_DBUS_ERROR_SPAWN_EXEC_FAILED,
;;   G_DBUS_ERROR_SPAWN_FORK_FAILED,
;;   G_DBUS_ERROR_SPAWN_CHILD_EXITED,
;;   G_DBUS_ERROR_SPAWN_CHILD_SIGNALED,
;;   G_DBUS_ERROR_SPAWN_FAILED,
;;   G_DBUS_ERROR_SPAWN_SETUP_FAILED,
;;   G_DBUS_ERROR_SPAWN_CONFIG_INVALID,
;;   G_DBUS_ERROR_SPAWN_SERVICE_INVALID,
;;   G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND,
;;   G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID,
;;   G_DBUS_ERROR_SPAWN_FILE_INVALID,
;;   G_DBUS_ERROR_SPAWN_NO_MEMORY,
;;   G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN,
;;   G_DBUS_ERROR_INVALID_SIGNATURE,
;;   G_DBUS_ERROR_INVALID_FILE_CONTENT,
;;   G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN,
;;   G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN,
;;   G_DBUS_ERROR_OBJECT_PATH_IN_USE,
;;   G_DBUS_ERROR_UNKNOWN_OBJECT,
;;   G_DBUS_ERROR_UNKNOWN_INTERFACE,
;;   G_DBUS_ERROR_UNKNOWN_PROPERTY,
;;   G_DBUS_ERROR_PROPERTY_READ_ONLY,
;; } GDBusError;
(define-fh-enum GDBusError
  '((G_DBUS_ERROR_FAILED . 0)
    (G_DBUS_ERROR_NO_MEMORY . 1)
    (G_DBUS_ERROR_SERVICE_UNKNOWN . 2)
    (G_DBUS_ERROR_NAME_HAS_NO_OWNER . 3)
    (G_DBUS_ERROR_NO_REPLY . 4)
    (G_DBUS_ERROR_IO_ERROR . 5)
    (G_DBUS_ERROR_BAD_ADDRESS . 6)
    (G_DBUS_ERROR_NOT_SUPPORTED . 7)
    (G_DBUS_ERROR_LIMITS_EXCEEDED . 8)
    (G_DBUS_ERROR_ACCESS_DENIED . 9)
    (G_DBUS_ERROR_AUTH_FAILED . 10)
    (G_DBUS_ERROR_NO_SERVER . 11)
    (G_DBUS_ERROR_TIMEOUT . 12)
    (G_DBUS_ERROR_NO_NETWORK . 13)
    (G_DBUS_ERROR_ADDRESS_IN_USE . 14)
    (G_DBUS_ERROR_DISCONNECTED . 15)
    (G_DBUS_ERROR_INVALID_ARGS . 16)
    (G_DBUS_ERROR_FILE_NOT_FOUND . 17)
    (G_DBUS_ERROR_FILE_EXISTS . 18)
    (G_DBUS_ERROR_UNKNOWN_METHOD . 19)
    (G_DBUS_ERROR_TIMED_OUT . 20)
    (G_DBUS_ERROR_MATCH_RULE_NOT_FOUND . 21)
    (G_DBUS_ERROR_MATCH_RULE_INVALID . 22)
    (G_DBUS_ERROR_SPAWN_EXEC_FAILED . 23)
    (G_DBUS_ERROR_SPAWN_FORK_FAILED . 24)
    (G_DBUS_ERROR_SPAWN_CHILD_EXITED . 25)
    (G_DBUS_ERROR_SPAWN_CHILD_SIGNALED . 26)
    (G_DBUS_ERROR_SPAWN_FAILED . 27)
    (G_DBUS_ERROR_SPAWN_SETUP_FAILED . 28)
    (G_DBUS_ERROR_SPAWN_CONFIG_INVALID . 29)
    (G_DBUS_ERROR_SPAWN_SERVICE_INVALID . 30)
    (G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND . 31)
    (G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID . 32)
    (G_DBUS_ERROR_SPAWN_FILE_INVALID . 33)
    (G_DBUS_ERROR_SPAWN_NO_MEMORY . 34)
    (G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN . 35)
    (G_DBUS_ERROR_INVALID_SIGNATURE . 36)
    (G_DBUS_ERROR_INVALID_FILE_CONTENT . 37)
    (G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN
      .
      38)
    (G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN . 39)
    (G_DBUS_ERROR_OBJECT_PATH_IN_USE . 40)
    (G_DBUS_ERROR_UNKNOWN_OBJECT . 41)
    (G_DBUS_ERROR_UNKNOWN_INTERFACE . 42)
    (G_DBUS_ERROR_UNKNOWN_PROPERTY . 43)
    (G_DBUS_ERROR_PROPERTY_READ_ONLY . 44))
  )

;; typedef enum {
;;   G_DBUS_CONNECTION_FLAGS_NONE = 0,
;;   G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1<<0,
;;   G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 1<<1,
;;   G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 1<<2,
;;   G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 1<<3,
;;   G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 1<<4,
;; } GDBusConnectionFlags;
(define-fh-enum GDBusConnectionFlags
  '((G_DBUS_CONNECTION_FLAGS_NONE . 0)
    (G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT
      .
      1)
    (G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER
      .
      2)
    (G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS
      .
      4)
    (G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION
      .
      8)
    (G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING
      .
      16))
  )

;; typedef enum {
;;   G_DBUS_CAPABILITY_FLAGS_NONE = 0,
;;   G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1<<0,
;; } GDBusCapabilityFlags;
(define-fh-enum GDBusCapabilityFlags
  '((G_DBUS_CAPABILITY_FLAGS_NONE . 0)
    (G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING . 1))
  )

;; typedef enum {
;;   G_DBUS_CALL_FLAGS_NONE = 0,
;;   G_DBUS_CALL_FLAGS_NO_AUTO_START = 1<<0,
;;   G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 1<<1,
;; } GDBusCallFlags;
(define-fh-enum GDBusCallFlags
  '((G_DBUS_CALL_FLAGS_NONE . 0)
    (G_DBUS_CALL_FLAGS_NO_AUTO_START . 1)
    (G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION
      .
      2))
  )

;; typedef enum {
;;   G_DBUS_MESSAGE_TYPE_INVALID,
;;   G_DBUS_MESSAGE_TYPE_METHOD_CALL,
;;   G_DBUS_MESSAGE_TYPE_METHOD_RETURN,
;;   G_DBUS_MESSAGE_TYPE_ERROR,
;;   G_DBUS_MESSAGE_TYPE_SIGNAL,
;; } GDBusMessageType;
(define-fh-enum GDBusMessageType
  '((G_DBUS_MESSAGE_TYPE_INVALID . 0)
    (G_DBUS_MESSAGE_TYPE_METHOD_CALL . 1)
    (G_DBUS_MESSAGE_TYPE_METHOD_RETURN . 2)
    (G_DBUS_MESSAGE_TYPE_ERROR . 3)
    (G_DBUS_MESSAGE_TYPE_SIGNAL . 4))
  )

;; typedef enum {
;;   G_DBUS_MESSAGE_FLAGS_NONE = 0,
;;   G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1<<0,
;;   G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = 1<<1,
;;   G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 1<<2,
;; } GDBusMessageFlags;
(define-fh-enum GDBusMessageFlags
  '((G_DBUS_MESSAGE_FLAGS_NONE . 0)
    (G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED . 1)
    (G_DBUS_MESSAGE_FLAGS_NO_AUTO_START . 2)
    (G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION
      .
      4))
  )

;; typedef enum {
;;   G_DBUS_MESSAGE_HEADER_FIELD_INVALID,
;;   G_DBUS_MESSAGE_HEADER_FIELD_PATH,
;;   G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE,
;;   G_DBUS_MESSAGE_HEADER_FIELD_MEMBER,
;;   G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME,
;;   G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL,
;;   G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION,
;;   G_DBUS_MESSAGE_HEADER_FIELD_SENDER,
;;   G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE,
;;   G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS,
;; } GDBusMessageHeaderField;
(define-fh-enum GDBusMessageHeaderField
  '((G_DBUS_MESSAGE_HEADER_FIELD_INVALID . 0)
    (G_DBUS_MESSAGE_HEADER_FIELD_PATH . 1)
    (G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE . 2)
    (G_DBUS_MESSAGE_HEADER_FIELD_MEMBER . 3)
    (G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME . 4)
    (G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL . 5)
    (G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION . 6)
    (G_DBUS_MESSAGE_HEADER_FIELD_SENDER . 7)
    (G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE . 8)
    (G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS . 9))
  )

;; typedef enum {
;;   G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0,
;;   G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1<<0,
;;   G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 1<<1,
;; } GDBusPropertyInfoFlags;
(define-fh-enum GDBusPropertyInfoFlags
  '((G_DBUS_PROPERTY_INFO_FLAGS_NONE . 0)
    (G_DBUS_PROPERTY_INFO_FLAGS_READABLE . 1)
    (G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE . 2))
  )

;; typedef enum {
;;   G_DBUS_SUBTREE_FLAGS_NONE = 0,
;;   G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1<<0,
;; } GDBusSubtreeFlags;
(define-fh-enum GDBusSubtreeFlags
  '((G_DBUS_SUBTREE_FLAGS_NONE . 0)
    (G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES
      .
      1))
  )

;; typedef enum {
;;   G_DBUS_SERVER_FLAGS_NONE = 0,
;;   G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = 1<<0,
;;   G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 1<<1,
;; } GDBusServerFlags;
(define-fh-enum GDBusServerFlags
  '((G_DBUS_SERVER_FLAGS_NONE . 0)
    (G_DBUS_SERVER_FLAGS_RUN_IN_THREAD . 1)
    (G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS
      .
      2))
  )

;; typedef enum {
;;   G_DBUS_SIGNAL_FLAGS_NONE = 0,
;;   G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = 1<<0,
;;   G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = 1<<1,
;;   G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = 1<<2,
;; } GDBusSignalFlags;
(define-fh-enum GDBusSignalFlags
  '((G_DBUS_SIGNAL_FLAGS_NONE . 0)
    (G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE . 1)
    (G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE . 2)
    (G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH . 4))
  )

;; typedef enum {
;;   G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0,
;;   G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1<<0,
;; } GDBusSendMessageFlags;
(define-fh-enum GDBusSendMessageFlags
  '((G_DBUS_SEND_MESSAGE_FLAGS_NONE . 0)
    (G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL . 1))
  )

;; typedef enum {
;;   G_CREDENTIALS_TYPE_INVALID,
;;   G_CREDENTIALS_TYPE_LINUX_UCRED,
;;   G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED,
;;   G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED,
;;   G_CREDENTIALS_TYPE_SOLARIS_UCRED,
;;   G_CREDENTIALS_TYPE_NETBSD_UNPCBID,
;; } GCredentialsType;
(define-fh-enum GCredentialsType
  '((G_CREDENTIALS_TYPE_INVALID . 0)
    (G_CREDENTIALS_TYPE_LINUX_UCRED . 1)
    (G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED . 2)
    (G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED . 3)
    (G_CREDENTIALS_TYPE_SOLARIS_UCRED . 4)
    (G_CREDENTIALS_TYPE_NETBSD_UNPCBID . 5))
  )

;; typedef enum {
;;   G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 'B',
;;   G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 'l',
;; } GDBusMessageByteOrder;
(define-fh-enum GDBusMessageByteOrder
  '((G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN . 66)
    (G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN . 108))
  )

;; typedef enum {
;;   G_APPLICATION_FLAGS_NONE,
;;   G_APPLICATION_IS_SERVICE = 1<<0,
;;   G_APPLICATION_IS_LAUNCHER = 1<<1,
;;   G_APPLICATION_HANDLES_OPEN = 1<<2,
;;   G_APPLICATION_HANDLES_COMMAND_LINE = 1<<3,
;;   G_APPLICATION_SEND_ENVIRONMENT = 1<<4,
;;   G_APPLICATION_NON_UNIQUE = 1<<5,
;;   G_APPLICATION_CAN_OVERRIDE_APP_ID = 1<<6,
;; } GApplicationFlags;
(define-fh-enum GApplicationFlags
  '((G_APPLICATION_FLAGS_NONE . 0)
    (G_APPLICATION_IS_SERVICE . 1)
    (G_APPLICATION_IS_LAUNCHER . 2)
    (G_APPLICATION_HANDLES_OPEN . 4)
    (G_APPLICATION_HANDLES_COMMAND_LINE . 8)
    (G_APPLICATION_SEND_ENVIRONMENT . 16)
    (G_APPLICATION_NON_UNIQUE . 32)
    (G_APPLICATION_CAN_OVERRIDE_APP_ID . 64))
  )

;; typedef enum {
;;   G_TLS_ERROR_UNAVAILABLE,
;;   G_TLS_ERROR_MISC,
;;   G_TLS_ERROR_BAD_CERTIFICATE,
;;   G_TLS_ERROR_NOT_TLS,
;;   G_TLS_ERROR_HANDSHAKE,
;;   G_TLS_ERROR_CERTIFICATE_REQUIRED,
;;   G_TLS_ERROR_EOF,
;; } GTlsError;
(define-fh-enum GTlsError
  '((G_TLS_ERROR_UNAVAILABLE . 0)
    (G_TLS_ERROR_MISC . 1)
    (G_TLS_ERROR_BAD_CERTIFICATE . 2)
    (G_TLS_ERROR_NOT_TLS . 3)
    (G_TLS_ERROR_HANDSHAKE . 4)
    (G_TLS_ERROR_CERTIFICATE_REQUIRED . 5)
    (G_TLS_ERROR_EOF . 6))
  )

;; typedef enum {
;;   G_TLS_CERTIFICATE_UNKNOWN_CA = 1<<0,
;;   G_TLS_CERTIFICATE_BAD_IDENTITY = 1<<1,
;;   G_TLS_CERTIFICATE_NOT_ACTIVATED = 1<<2,
;;   G_TLS_CERTIFICATE_EXPIRED = 1<<3,
;;   G_TLS_CERTIFICATE_REVOKED = 1<<4,
;;   G_TLS_CERTIFICATE_INSECURE = 1<<5,
;;   G_TLS_CERTIFICATE_GENERIC_ERROR = 1<<6,
;;   G_TLS_CERTIFICATE_VALIDATE_ALL = 0x007f,
;; } GTlsCertificateFlags;
(define-fh-enum GTlsCertificateFlags
  '((G_TLS_CERTIFICATE_UNKNOWN_CA . 1)
    (G_TLS_CERTIFICATE_BAD_IDENTITY . 2)
    (G_TLS_CERTIFICATE_NOT_ACTIVATED . 4)
    (G_TLS_CERTIFICATE_EXPIRED . 8)
    (G_TLS_CERTIFICATE_REVOKED . 16)
    (G_TLS_CERTIFICATE_INSECURE . 32)
    (G_TLS_CERTIFICATE_GENERIC_ERROR . 64)
    (G_TLS_CERTIFICATE_VALIDATE_ALL . 127))
  )

;; typedef enum {
;;   G_TLS_AUTHENTICATION_NONE,
;;   G_TLS_AUTHENTICATION_REQUESTED,
;;   G_TLS_AUTHENTICATION_REQUIRED,
;; } GTlsAuthenticationMode;
(define-fh-enum GTlsAuthenticationMode
  '((G_TLS_AUTHENTICATION_NONE . 0)
    (G_TLS_AUTHENTICATION_REQUESTED . 1)
    (G_TLS_AUTHENTICATION_REQUIRED . 2))
  )

;; typedef enum {
;;   G_TLS_REHANDSHAKE_NEVER,
;;   G_TLS_REHANDSHAKE_SAFELY,
;;   G_TLS_REHANDSHAKE_UNSAFELY,
;; } GTlsRehandshakeMode;
(define-fh-enum GTlsRehandshakeMode
  '((G_TLS_REHANDSHAKE_NEVER . 0)
    (G_TLS_REHANDSHAKE_SAFELY . 1)
    (G_TLS_REHANDSHAKE_UNSAFELY . 2))
  )

;; typedef enum _GTlsPasswordFlags {
;;   G_TLS_PASSWORD_NONE = 0,
;;   G_TLS_PASSWORD_RETRY = 1<<1,
;;   G_TLS_PASSWORD_MANY_TRIES = 1<<2,
;;   G_TLS_PASSWORD_FINAL_TRY = 1<<3,
;; } GTlsPasswordFlags;
(define-fh-enum GTlsPasswordFlags
  '((G_TLS_PASSWORD_NONE . 0)
    (G_TLS_PASSWORD_RETRY . 2)
    (G_TLS_PASSWORD_MANY_TRIES . 4)
    (G_TLS_PASSWORD_FINAL_TRY . 8))
  )
(define unwrap-enum-_GTlsPasswordFlags unwrap-GTlsPasswordFlags)
(define wrap-enum-_GTlsPasswordFlags wrap-GTlsPasswordFlags)

;; typedef enum {
;;   G_TLS_INTERACTION_UNHANDLED,
;;   G_TLS_INTERACTION_HANDLED,
;;   G_TLS_INTERACTION_FAILED,
;; } GTlsInteractionResult;
(define-fh-enum GTlsInteractionResult
  '((G_TLS_INTERACTION_UNHANDLED . 0)
    (G_TLS_INTERACTION_HANDLED . 1)
    (G_TLS_INTERACTION_FAILED . 2))
  )

;; typedef enum {
;;   G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0,
;;   G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1<<0
;;       ,
;; } GDBusInterfaceSkeletonFlags;
(define-fh-enum GDBusInterfaceSkeletonFlags
  '((G_DBUS_INTERFACE_SKELETON_FLAGS_NONE . 0)
    (G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD
      .
      1))
  )

;; typedef enum {
;;   G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0,
;;   G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1<<0,
;; } GDBusObjectManagerClientFlags;
(define-fh-enum GDBusObjectManagerClientFlags
  '((G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE . 0)
    (G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START
      .
      1))
  )

;; typedef enum {
;;   G_TLS_DATABASE_VERIFY_NONE = 0,
;; } GTlsDatabaseVerifyFlags;
(define-fh-enum GTlsDatabaseVerifyFlags
  '((G_TLS_DATABASE_VERIFY_NONE . 0))
  )

;; typedef enum {
;;   G_TLS_DATABASE_LOOKUP_NONE = 0,
;;   G_TLS_DATABASE_LOOKUP_KEYPAIR = 1,
;; } GTlsDatabaseLookupFlags;
(define-fh-enum GTlsDatabaseLookupFlags
  '((G_TLS_DATABASE_LOOKUP_NONE . 0)
    (G_TLS_DATABASE_LOOKUP_KEYPAIR . 1))
  )

;; typedef enum {
;;   G_TLS_CERTIFICATE_REQUEST_NONE = 0,
;; } GTlsCertificateRequestFlags;
(define-fh-enum GTlsCertificateRequestFlags
  '((G_TLS_CERTIFICATE_REQUEST_NONE . 0))
  )

;; typedef enum {
;;   G_IO_MODULE_SCOPE_NONE,
;;   G_IO_MODULE_SCOPE_BLOCK_DUPLICATES,
;; } GIOModuleScopeFlags;
(define-fh-enum GIOModuleScopeFlags
  '((G_IO_MODULE_SCOPE_NONE . 0)
    (G_IO_MODULE_SCOPE_BLOCK_DUPLICATES . 1))
  )

;; typedef enum {
;;   G_SOCKET_CLIENT_RESOLVING,
;;   G_SOCKET_CLIENT_RESOLVED,
;;   G_SOCKET_CLIENT_CONNECTING,
;;   G_SOCKET_CLIENT_CONNECTED,
;;   G_SOCKET_CLIENT_PROXY_NEGOTIATING,
;;   G_SOCKET_CLIENT_PROXY_NEGOTIATED,
;;   G_SOCKET_CLIENT_TLS_HANDSHAKING,
;;   G_SOCKET_CLIENT_TLS_HANDSHAKED,
;;   G_SOCKET_CLIENT_COMPLETE,
;; } GSocketClientEvent;
(define-fh-enum GSocketClientEvent
  '((G_SOCKET_CLIENT_RESOLVING . 0)
    (G_SOCKET_CLIENT_RESOLVED . 1)
    (G_SOCKET_CLIENT_CONNECTING . 2)
    (G_SOCKET_CLIENT_CONNECTED . 3)
    (G_SOCKET_CLIENT_PROXY_NEGOTIATING . 4)
    (G_SOCKET_CLIENT_PROXY_NEGOTIATED . 5)
    (G_SOCKET_CLIENT_TLS_HANDSHAKING . 6)
    (G_SOCKET_CLIENT_TLS_HANDSHAKED . 7)
    (G_SOCKET_CLIENT_COMPLETE . 8))
  )

;; typedef enum {
;;   G_SOCKET_LISTENER_BINDING,
;;   G_SOCKET_LISTENER_BOUND,
;;   G_SOCKET_LISTENER_LISTENING,
;;   G_SOCKET_LISTENER_LISTENED,
;; } GSocketListenerEvent;
(define-fh-enum GSocketListenerEvent
  '((G_SOCKET_LISTENER_BINDING . 0)
    (G_SOCKET_LISTENER_BOUND . 1)
    (G_SOCKET_LISTENER_LISTENING . 2)
    (G_SOCKET_LISTENER_LISTENED . 3))
  )

;; typedef enum {
;;   G_TEST_DBUS_NONE = 0,
;; } GTestDBusFlags;
(define-fh-enum GTestDBusFlags
  '((G_TEST_DBUS_NONE . 0))
  )

;; typedef enum {
;;   G_SUBPROCESS_FLAGS_NONE = 0,
;;   G_SUBPROCESS_FLAGS_STDIN_PIPE = 1u<<0,
;;   G_SUBPROCESS_FLAGS_STDIN_INHERIT = 1u<<1,
;;   G_SUBPROCESS_FLAGS_STDOUT_PIPE = 1u<<2,
;;   G_SUBPROCESS_FLAGS_STDOUT_SILENCE = 1u<<3,
;;   G_SUBPROCESS_FLAGS_STDERR_PIPE = 1u<<4,
;;   G_SUBPROCESS_FLAGS_STDERR_SILENCE = 1u<<5,
;;   G_SUBPROCESS_FLAGS_STDERR_MERGE = 1u<<6,
;;   G_SUBPROCESS_FLAGS_INHERIT_FDS = 1u<<7,
;; } GSubprocessFlags;
(define-fh-enum GSubprocessFlags
  '((G_SUBPROCESS_FLAGS_NONE . 0)
    (G_SUBPROCESS_FLAGS_STDIN_PIPE . 1)
    (G_SUBPROCESS_FLAGS_STDIN_INHERIT . 2)
    (G_SUBPROCESS_FLAGS_STDOUT_PIPE . 4)
    (G_SUBPROCESS_FLAGS_STDOUT_SILENCE . 8)
    (G_SUBPROCESS_FLAGS_STDERR_PIPE . 16)
    (G_SUBPROCESS_FLAGS_STDERR_SILENCE . 32)
    (G_SUBPROCESS_FLAGS_STDERR_MERGE . 64)
    (G_SUBPROCESS_FLAGS_INHERIT_FDS . 128))
  )

;; typedef enum {
;;   G_NOTIFICATION_PRIORITY_NORMAL,
;;   G_NOTIFICATION_PRIORITY_LOW,
;;   G_NOTIFICATION_PRIORITY_HIGH,
;;   G_NOTIFICATION_PRIORITY_URGENT,
;; } GNotificationPriority;
(define-fh-enum GNotificationPriority
  '((G_NOTIFICATION_PRIORITY_NORMAL . 0)
    (G_NOTIFICATION_PRIORITY_LOW . 1)
    (G_NOTIFICATION_PRIORITY_HIGH . 2)
    (G_NOTIFICATION_PRIORITY_URGENT . 3))
  )

;; typedef enum {
;;   G_NETWORK_CONNECTIVITY_LOCAL = 1,
;;   G_NETWORK_CONNECTIVITY_LIMITED = 2,
;;   G_NETWORK_CONNECTIVITY_PORTAL = 3,
;;   G_NETWORK_CONNECTIVITY_FULL = 4,
;; } GNetworkConnectivity;
(define-fh-enum GNetworkConnectivity
  '((G_NETWORK_CONNECTIVITY_LOCAL . 1)
    (G_NETWORK_CONNECTIVITY_LIMITED . 2)
    (G_NETWORK_CONNECTIVITY_PORTAL . 3)
    (G_NETWORK_CONNECTIVITY_FULL . 4))
  )

;; typedef struct _GAppLaunchContext GAppLaunchContext;
(define GAppLaunchContext-desc void)
(export GAppLaunchContext-desc)
(define GAppLaunchContext*-desc (bs:pointer (delay GAppLaunchContext-desc)))
(export GAppLaunchContext*-desc)
(define-fh-pointer-type GAppLaunchContext* GAppLaunchContext*-desc)

;; typedef struct _GAppInfo GAppInfo; /* Dummy typedef */
(define GAppInfo-desc void)
(export GAppInfo-desc)
(define GAppInfo*-desc (bs:pointer GAppInfo-desc))
(export GAppInfo*-desc)
(define-fh-pointer-type GAppInfo* GAppInfo*-desc)

;; typedef struct _GAsyncResult GAsyncResult; /* Dummy typedef */
(define GAsyncResult-desc void)
(export GAsyncResult-desc)
(define GAsyncResult*-desc (bs:pointer GAsyncResult-desc))
(export GAsyncResult*-desc)
(define-fh-pointer-type GAsyncResult* GAsyncResult*-desc)

;; typedef struct _GAsyncInitable GAsyncInitable;
(define GAsyncInitable-desc void)
(export GAsyncInitable-desc)
(define GAsyncInitable*-desc (bs:pointer GAsyncInitable-desc))
(export GAsyncInitable*-desc)
(define-fh-pointer-type GAsyncInitable* GAsyncInitable*-desc)

;; typedef struct _GBufferedInputStream GBufferedInputStream;
(define GBufferedInputStream-desc void)
(export GBufferedInputStream-desc)
(define GBufferedInputStream*-desc (bs:pointer (delay GBufferedInputStream-desc)))
(export GBufferedInputStream*-desc)
(define-fh-pointer-type GBufferedInputStream* GBufferedInputStream*-desc)

;; typedef struct _GBufferedOutputStream GBufferedOutputStream;
(define GBufferedOutputStream-desc void)
(export GBufferedOutputStream-desc)
(define GBufferedOutputStream*-desc (bs:pointer (delay GBufferedOutputStream-desc)))
(export GBufferedOutputStream*-desc)
(define-fh-pointer-type GBufferedOutputStream* GBufferedOutputStream*-desc)

;; typedef struct _GCancellable GCancellable;
(define GCancellable-desc void)
(export GCancellable-desc)
(define GCancellable*-desc (bs:pointer (delay GCancellable-desc)))
(export GCancellable*-desc)
(define-fh-pointer-type GCancellable* GCancellable*-desc)

;; typedef struct _GCharsetConverter GCharsetConverter;
(define GCharsetConverter-desc void)
(export GCharsetConverter-desc)
(define GCharsetConverter*-desc (bs:pointer GCharsetConverter-desc))
(export GCharsetConverter*-desc)
(define-fh-pointer-type GCharsetConverter* GCharsetConverter*-desc)

;; typedef struct _GConverter GConverter;
(define GConverter-desc void)
(export GConverter-desc)
(define GConverter*-desc (bs:pointer GConverter-desc))
(export GConverter*-desc)
(define-fh-pointer-type GConverter* GConverter*-desc)

;; typedef struct _GConverterInputStream GConverterInputStream;
(define GConverterInputStream-desc void)
(export GConverterInputStream-desc)
(define GConverterInputStream*-desc (bs:pointer (delay GConverterInputStream-desc)))
(export GConverterInputStream*-desc)
(define-fh-pointer-type GConverterInputStream* GConverterInputStream*-desc)

;; typedef struct _GConverterOutputStream GConverterOutputStream;
(define GConverterOutputStream-desc void)
(export GConverterOutputStream-desc)
(define GConverterOutputStream*-desc (bs:pointer (delay GConverterOutputStream-desc)))
(export GConverterOutputStream*-desc)
(define-fh-pointer-type GConverterOutputStream* GConverterOutputStream*-desc)

;; typedef struct _GDatagramBased GDatagramBased;
(define GDatagramBased-desc void)
(export GDatagramBased-desc)
(define GDatagramBased*-desc (bs:pointer GDatagramBased-desc))
(export GDatagramBased*-desc)
(define-fh-pointer-type GDatagramBased* GDatagramBased*-desc)

;; typedef struct _GDataInputStream GDataInputStream;
(define GDataInputStream-desc void)
(export GDataInputStream-desc)
(define GDataInputStream*-desc (bs:pointer (delay GDataInputStream-desc)))
(export GDataInputStream*-desc)
(define-fh-pointer-type GDataInputStream* GDataInputStream*-desc)

;; typedef struct _GSimplePermission GSimplePermission;
(define GSimplePermission-desc void)
(export GSimplePermission-desc)
(define GSimplePermission*-desc (bs:pointer GSimplePermission-desc))
(export GSimplePermission*-desc)
(define-fh-pointer-type GSimplePermission* GSimplePermission*-desc)

;; typedef struct _GZlibCompressor GZlibCompressor;
(define GZlibCompressor-desc void)
(export GZlibCompressor-desc)
(define GZlibCompressor*-desc (bs:pointer GZlibCompressor-desc))
(export GZlibCompressor*-desc)
(define-fh-pointer-type GZlibCompressor* GZlibCompressor*-desc)

;; typedef struct _GZlibDecompressor GZlibDecompressor;
(define GZlibDecompressor-desc void)
(export GZlibDecompressor-desc)
(define GZlibDecompressor*-desc (bs:pointer GZlibDecompressor-desc))
(export GZlibDecompressor*-desc)
(define-fh-pointer-type GZlibDecompressor* GZlibDecompressor*-desc)

;; typedef struct _GSimpleActionGroup GSimpleActionGroup;
(define GSimpleActionGroup-desc void)
(export GSimpleActionGroup-desc)
(define GSimpleActionGroup*-desc (bs:pointer (delay GSimpleActionGroup-desc)))
(export GSimpleActionGroup*-desc)
(define-fh-pointer-type GSimpleActionGroup* GSimpleActionGroup*-desc)

;; typedef struct _GRemoteActionGroup GRemoteActionGroup;
(define GRemoteActionGroup-desc void)
(export GRemoteActionGroup-desc)
(define GRemoteActionGroup*-desc (bs:pointer GRemoteActionGroup-desc))
(export GRemoteActionGroup*-desc)
(define-fh-pointer-type GRemoteActionGroup* GRemoteActionGroup*-desc)

;; typedef struct _GDBusActionGroup GDBusActionGroup;
(define GDBusActionGroup-desc void)
(export GDBusActionGroup-desc)
(define GDBusActionGroup*-desc (bs:pointer GDBusActionGroup-desc))
(export GDBusActionGroup*-desc)
(define-fh-pointer-type GDBusActionGroup* GDBusActionGroup*-desc)

;; typedef struct _GActionMap GActionMap;
(define GActionMap-desc void)
(export GActionMap-desc)
(define GActionMap*-desc (bs:pointer GActionMap-desc))
(export GActionMap*-desc)
(define-fh-pointer-type GActionMap* GActionMap*-desc)

;; typedef struct _GActionGroup GActionGroup;
(define GActionGroup-desc void)
(export GActionGroup-desc)
(define GActionGroup*-desc (bs:pointer GActionGroup-desc))
(export GActionGroup*-desc)
(define-fh-pointer-type GActionGroup* GActionGroup*-desc)

;; typedef struct _GPropertyAction GPropertyAction;
(define GPropertyAction-desc void)
(export GPropertyAction-desc)
(define GPropertyAction*-desc (bs:pointer GPropertyAction-desc))
(export GPropertyAction*-desc)
(define-fh-pointer-type GPropertyAction* GPropertyAction*-desc)

;; typedef struct _GSimpleAction GSimpleAction;
(define GSimpleAction-desc void)
(export GSimpleAction-desc)
(define GSimpleAction*-desc (bs:pointer GSimpleAction-desc))
(export GSimpleAction*-desc)
(define-fh-pointer-type GSimpleAction* GSimpleAction*-desc)

;; typedef struct _GAction GAction;
(define GAction-desc void)
(export GAction-desc)
(define GAction*-desc (bs:pointer GAction-desc))
(export GAction*-desc)
(define-fh-pointer-type GAction* GAction*-desc)

;; typedef struct _GApplication GApplication;
(define GApplication-desc void)
(export GApplication-desc)
(define GApplication*-desc (bs:pointer (delay GApplication-desc)))
(export GApplication*-desc)
(define-fh-pointer-type GApplication* GApplication*-desc)

;; typedef struct _GApplicationCommandLine GApplicationCommandLine;
(define GApplicationCommandLine-desc void)
(export GApplicationCommandLine-desc)
(define GApplicationCommandLine*-desc (bs:pointer (delay GApplicationCommandLine-desc)))
(export GApplicationCommandLine*-desc)
(define-fh-pointer-type GApplicationCommandLine* GApplicationCommandLine*-desc)

;; typedef struct _GSettingsBackend GSettingsBackend;
(define GSettingsBackend-desc void)
(export GSettingsBackend-desc)
(define GSettingsBackend*-desc (bs:pointer GSettingsBackend-desc))
(export GSettingsBackend*-desc)
(define-fh-pointer-type GSettingsBackend* GSettingsBackend*-desc)

;; typedef struct _GSettings GSettings;
(define GSettings-desc void)
(export GSettings-desc)
(define GSettings*-desc (bs:pointer (delay GSettings-desc)))
(export GSettings*-desc)
(define-fh-pointer-type GSettings* GSettings*-desc)

;; typedef struct _GPermission GPermission;
(define GPermission-desc void)
(export GPermission-desc)
(define GPermission*-desc (bs:pointer (delay GPermission-desc)))
(export GPermission*-desc)
(define-fh-pointer-type GPermission* GPermission*-desc)

;; typedef struct _GMenuModel GMenuModel;
(define GMenuModel-desc void)
(export GMenuModel-desc)
(define GMenuModel*-desc (bs:pointer (delay GMenuModel-desc)))
(export GMenuModel*-desc)
(define-fh-pointer-type GMenuModel* GMenuModel*-desc)

;; typedef struct _GNotification GNotification;
(define GNotification-desc void)
(export GNotification-desc)
(define GNotification*-desc (bs:pointer GNotification-desc))
(export GNotification*-desc)
(define-fh-pointer-type GNotification* GNotification*-desc)

;; typedef struct _GDrive GDrive; /* Dummy typedef */
(define GDrive-desc void)
(export GDrive-desc)
(define GDrive*-desc (bs:pointer GDrive-desc))
(export GDrive*-desc)
(define-fh-pointer-type GDrive* GDrive*-desc)

;; typedef struct _GFileEnumerator GFileEnumerator;
(define GFileEnumerator-desc void)
(export GFileEnumerator-desc)
(define GFileEnumerator*-desc (bs:pointer (delay GFileEnumerator-desc)))
(export GFileEnumerator*-desc)
(define-fh-pointer-type GFileEnumerator* GFileEnumerator*-desc)

;; typedef struct _GFileMonitor GFileMonitor;
(define GFileMonitor-desc void)
(export GFileMonitor-desc)
(define GFileMonitor*-desc (bs:pointer (delay GFileMonitor-desc)))
(export GFileMonitor*-desc)
(define-fh-pointer-type GFileMonitor* GFileMonitor*-desc)

;; typedef struct _GFilterInputStream GFilterInputStream;
(define GFilterInputStream-desc void)
(export GFilterInputStream-desc)
(define GFilterInputStream*-desc (bs:pointer (delay GFilterInputStream-desc)))
(export GFilterInputStream*-desc)
(define-fh-pointer-type GFilterInputStream* GFilterInputStream*-desc)

;; typedef struct _GFilterOutputStream GFilterOutputStream;
(define GFilterOutputStream-desc void)
(export GFilterOutputStream-desc)
(define GFilterOutputStream*-desc (bs:pointer (delay GFilterOutputStream-desc)))
(export GFilterOutputStream*-desc)
(define-fh-pointer-type GFilterOutputStream* GFilterOutputStream*-desc)

;; typedef struct _GFile GFile; /* Dummy typedef */
(define GFile-desc void)
(export GFile-desc)
(define GFile*-desc (bs:pointer GFile-desc))
(export GFile*-desc)
(define-fh-pointer-type GFile* GFile*-desc)

;; typedef struct _GFileInfo GFileInfo;
(define GFileInfo-desc void)
(export GFileInfo-desc)
(define GFileInfo*-desc (bs:pointer GFileInfo-desc))
(export GFileInfo*-desc)
(define-fh-pointer-type GFileInfo* GFileInfo*-desc)

;; typedef struct _GFileAttributeMatcher GFileAttributeMatcher;
(define GFileAttributeMatcher-desc void)
(export GFileAttributeMatcher-desc)
(define GFileAttributeMatcher*-desc (bs:pointer GFileAttributeMatcher-desc))
(export GFileAttributeMatcher*-desc)
(define-fh-pointer-type GFileAttributeMatcher* GFileAttributeMatcher*-desc)

;; typedef struct _GFileAttributeInfo GFileAttributeInfo;
(define GFileAttributeInfo-desc void)
(export GFileAttributeInfo-desc)
(define GFileAttributeInfo*-desc (bs:pointer (delay GFileAttributeInfo-desc)))
(export GFileAttributeInfo*-desc)
(define-fh-pointer-type GFileAttributeInfo* GFileAttributeInfo*-desc)

;; typedef struct _GFileAttributeInfoList GFileAttributeInfoList;
(define GFileAttributeInfoList-desc void)
(export GFileAttributeInfoList-desc)
(define GFileAttributeInfoList*-desc (bs:pointer (delay GFileAttributeInfoList-desc)))
(export GFileAttributeInfoList*-desc)
(define-fh-pointer-type GFileAttributeInfoList* GFileAttributeInfoList*-desc)

;; typedef struct _GFileDescriptorBased GFileDescriptorBased;
(define GFileDescriptorBased-desc void)
(export GFileDescriptorBased-desc)
(define GFileDescriptorBased*-desc (bs:pointer GFileDescriptorBased-desc))
(export GFileDescriptorBased*-desc)
(define-fh-pointer-type GFileDescriptorBased* GFileDescriptorBased*-desc)

;; typedef struct _GFileInputStream GFileInputStream;
(define GFileInputStream-desc void)
(export GFileInputStream-desc)
(define GFileInputStream*-desc (bs:pointer (delay GFileInputStream-desc)))
(export GFileInputStream*-desc)
(define-fh-pointer-type GFileInputStream* GFileInputStream*-desc)

;; typedef struct _GFileOutputStream GFileOutputStream;
(define GFileOutputStream-desc void)
(export GFileOutputStream-desc)
(define GFileOutputStream*-desc (bs:pointer (delay GFileOutputStream-desc)))
(export GFileOutputStream*-desc)
(define-fh-pointer-type GFileOutputStream* GFileOutputStream*-desc)

;; typedef struct _GFileIOStream GFileIOStream;
(define GFileIOStream-desc void)
(export GFileIOStream-desc)
(define GFileIOStream*-desc (bs:pointer (delay GFileIOStream-desc)))
(export GFileIOStream*-desc)
(define-fh-pointer-type GFileIOStream* GFileIOStream*-desc)

;; typedef struct _GFileIcon GFileIcon;
(define GFileIcon-desc void)
(export GFileIcon-desc)
(define GFileIcon*-desc (bs:pointer GFileIcon-desc))
(export GFileIcon*-desc)
(define-fh-pointer-type GFileIcon* GFileIcon*-desc)

;; typedef struct _GFilenameCompleter GFilenameCompleter;
(define GFilenameCompleter-desc void)
(export GFilenameCompleter-desc)
(define GFilenameCompleter*-desc (bs:pointer GFilenameCompleter-desc))
(export GFilenameCompleter*-desc)
(define-fh-pointer-type GFilenameCompleter* GFilenameCompleter*-desc)

;; typedef struct _GIcon GIcon; /* Dummy typedef */
(define GIcon-desc void)
(export GIcon-desc)
(define GIcon*-desc (bs:pointer GIcon-desc))
(export GIcon*-desc)
(define-fh-pointer-type GIcon* GIcon*-desc)

;; typedef struct _GInetAddress GInetAddress;
(define GInetAddress-desc void)
(export GInetAddress-desc)
(define GInetAddress*-desc (bs:pointer (delay GInetAddress-desc)))
(export GInetAddress*-desc)
(define-fh-pointer-type GInetAddress* GInetAddress*-desc)

;; typedef struct _GInetAddressMask GInetAddressMask;
(define GInetAddressMask-desc void)
(export GInetAddressMask-desc)
(define GInetAddressMask*-desc (bs:pointer (delay GInetAddressMask-desc)))
(export GInetAddressMask*-desc)
(define-fh-pointer-type GInetAddressMask* GInetAddressMask*-desc)

;; typedef struct _GInetSocketAddress GInetSocketAddress;
(define GInetSocketAddress-desc void)
(export GInetSocketAddress-desc)
(define GInetSocketAddress*-desc (bs:pointer (delay GInetSocketAddress-desc)))
(export GInetSocketAddress*-desc)
(define-fh-pointer-type GInetSocketAddress* GInetSocketAddress*-desc)

;; typedef struct _GNativeSocketAddress GNativeSocketAddress;
(define GNativeSocketAddress-desc void)
(export GNativeSocketAddress-desc)
(define GNativeSocketAddress*-desc (bs:pointer GNativeSocketAddress-desc))
(export GNativeSocketAddress*-desc)
(define-fh-pointer-type GNativeSocketAddress* GNativeSocketAddress*-desc)

;; typedef struct _GInputStream GInputStream;
(define GInputStream-desc void)
(export GInputStream-desc)
(define GInputStream*-desc (bs:pointer (delay GInputStream-desc)))
(export GInputStream*-desc)
(define-fh-pointer-type GInputStream* GInputStream*-desc)

;; typedef struct _GInitable GInitable;
(define GInitable-desc void)
(export GInitable-desc)
(define GInitable*-desc (bs:pointer GInitable-desc))
(export GInitable*-desc)
(define-fh-pointer-type GInitable* GInitable*-desc)

;; typedef struct _GIOModule GIOModule;
(define GIOModule-desc void)
(export GIOModule-desc)
(define GIOModule*-desc (bs:pointer GIOModule-desc))
(export GIOModule*-desc)
(define-fh-pointer-type GIOModule* GIOModule*-desc)

;; typedef struct _GIOExtensionPoint GIOExtensionPoint;
(define GIOExtensionPoint-desc void)
(export GIOExtensionPoint-desc)
(define GIOExtensionPoint*-desc (bs:pointer GIOExtensionPoint-desc))
(export GIOExtensionPoint*-desc)
(define-fh-pointer-type GIOExtensionPoint* GIOExtensionPoint*-desc)

;; typedef struct _GIOExtension GIOExtension;
(define GIOExtension-desc void)
(export GIOExtension-desc)
(define GIOExtension*-desc (bs:pointer GIOExtension-desc))
(export GIOExtension*-desc)
(define-fh-pointer-type GIOExtension* GIOExtension*-desc)

;; typedef struct _GIOSchedulerJob GIOSchedulerJob;
(define GIOSchedulerJob-desc void)
(export GIOSchedulerJob-desc)
(define GIOSchedulerJob*-desc (bs:pointer GIOSchedulerJob-desc))
(export GIOSchedulerJob*-desc)
(define-fh-pointer-type GIOSchedulerJob* GIOSchedulerJob*-desc)

;; typedef struct _GIOStreamAdapter GIOStreamAdapter;
(define GIOStreamAdapter-desc void)
(export GIOStreamAdapter-desc)
(define GIOStreamAdapter*-desc (bs:pointer GIOStreamAdapter-desc))
(export GIOStreamAdapter*-desc)
(define-fh-pointer-type GIOStreamAdapter* GIOStreamAdapter*-desc)

;; typedef struct _GLoadableIcon GLoadableIcon; /* Dummy typedef */
(define GLoadableIcon-desc void)
(export GLoadableIcon-desc)
(define GLoadableIcon*-desc (bs:pointer GLoadableIcon-desc))
(export GLoadableIcon*-desc)
(define-fh-pointer-type GLoadableIcon* GLoadableIcon*-desc)

;; typedef struct _GBytesIcon GBytesIcon;
(define GBytesIcon-desc void)
(export GBytesIcon-desc)
(define GBytesIcon*-desc (bs:pointer GBytesIcon-desc))
(export GBytesIcon*-desc)
(define-fh-pointer-type GBytesIcon* GBytesIcon*-desc)

;; typedef struct _GMemoryInputStream GMemoryInputStream;
(define GMemoryInputStream-desc void)
(export GMemoryInputStream-desc)
(define GMemoryInputStream*-desc (bs:pointer (delay GMemoryInputStream-desc)))
(export GMemoryInputStream*-desc)
(define-fh-pointer-type GMemoryInputStream* GMemoryInputStream*-desc)

;; typedef struct _GMemoryOutputStream GMemoryOutputStream;
(define GMemoryOutputStream-desc void)
(export GMemoryOutputStream-desc)
(define GMemoryOutputStream*-desc (bs:pointer (delay GMemoryOutputStream-desc)))
(export GMemoryOutputStream*-desc)
(define-fh-pointer-type GMemoryOutputStream* GMemoryOutputStream*-desc)

;; typedef struct _GMount GMount; /* Dummy typedef */
(define GMount-desc void)
(export GMount-desc)
(define GMount*-desc (bs:pointer GMount-desc))
(export GMount*-desc)
(define-fh-pointer-type GMount* GMount*-desc)

;; typedef struct _GMountOperation GMountOperation;
(define GMountOperation-desc void)
(export GMountOperation-desc)
(define GMountOperation*-desc (bs:pointer (delay GMountOperation-desc)))
(export GMountOperation*-desc)
(define-fh-pointer-type GMountOperation* GMountOperation*-desc)

;; typedef struct _GNetworkAddress GNetworkAddress;
(define GNetworkAddress-desc void)
(export GNetworkAddress-desc)
(define GNetworkAddress*-desc (bs:pointer (delay GNetworkAddress-desc)))
(export GNetworkAddress*-desc)
(define-fh-pointer-type GNetworkAddress* GNetworkAddress*-desc)

;; typedef struct _GNetworkMonitor GNetworkMonitor;
(define GNetworkMonitor-desc void)
(export GNetworkMonitor-desc)
(define GNetworkMonitor*-desc (bs:pointer GNetworkMonitor-desc))
(export GNetworkMonitor*-desc)
(define-fh-pointer-type GNetworkMonitor* GNetworkMonitor*-desc)

;; typedef struct _GNetworkService GNetworkService;
(define GNetworkService-desc void)
(export GNetworkService-desc)
(define GNetworkService*-desc (bs:pointer (delay GNetworkService-desc)))
(export GNetworkService*-desc)
(define-fh-pointer-type GNetworkService* GNetworkService*-desc)

;; typedef struct _GOutputStream GOutputStream;
(define GOutputStream-desc void)
(export GOutputStream-desc)
(define GOutputStream*-desc (bs:pointer (delay GOutputStream-desc)))
(export GOutputStream*-desc)
(define-fh-pointer-type GOutputStream* GOutputStream*-desc)

;; typedef struct _GIOStream GIOStream;
(define GIOStream-desc void)
(export GIOStream-desc)
(define GIOStream*-desc (bs:pointer (delay GIOStream-desc)))
(export GIOStream*-desc)
(define-fh-pointer-type GIOStream* GIOStream*-desc)

;; typedef struct _GSimpleIOStream GSimpleIOStream;
(define GSimpleIOStream-desc void)
(export GSimpleIOStream-desc)
(define GSimpleIOStream*-desc (bs:pointer GSimpleIOStream-desc))
(export GSimpleIOStream*-desc)
(define-fh-pointer-type GSimpleIOStream* GSimpleIOStream*-desc)

;; typedef struct _GPollableInputStream GPollableInputStream; 
;;     /* Dummy typedef */
(define GPollableInputStream-desc void)
(export GPollableInputStream-desc)
(define GPollableInputStream*-desc (bs:pointer GPollableInputStream-desc))
(export GPollableInputStream*-desc)
(define-fh-pointer-type GPollableInputStream* GPollableInputStream*-desc)

;; typedef struct _GPollableOutputStream GPollableOutputStream; 
;;     /* Dummy typedef */
(define GPollableOutputStream-desc void)
(export GPollableOutputStream-desc)
(define GPollableOutputStream*-desc (bs:pointer GPollableOutputStream-desc))
(export GPollableOutputStream*-desc)
(define-fh-pointer-type GPollableOutputStream* GPollableOutputStream*-desc)

;; typedef struct _GResolver GResolver;
(define GResolver-desc void)
(export GResolver-desc)
(define GResolver*-desc (bs:pointer (delay GResolver-desc)))
(export GResolver*-desc)
(define-fh-pointer-type GResolver* GResolver*-desc)

;; typedef struct _GResource GResource;
(define GResource-desc void)
(export GResource-desc)
(define GResource*-desc (bs:pointer GResource-desc))
(export GResource*-desc)
(define-fh-pointer-type GResource* GResource*-desc)

;; typedef struct _GSeekable GSeekable;
(define GSeekable-desc void)
(export GSeekable-desc)
(define GSeekable*-desc (bs:pointer GSeekable-desc))
(export GSeekable*-desc)
(define-fh-pointer-type GSeekable* GSeekable*-desc)

;; typedef struct _GSimpleAsyncResult GSimpleAsyncResult;
(define GSimpleAsyncResult-desc void)
(export GSimpleAsyncResult-desc)
(define GSimpleAsyncResult*-desc (bs:pointer GSimpleAsyncResult-desc))
(export GSimpleAsyncResult*-desc)
(define-fh-pointer-type GSimpleAsyncResult* GSimpleAsyncResult*-desc)

;; typedef struct _GSocket GSocket;
(define GSocket-desc void)
(export GSocket-desc)
(define GSocket*-desc (bs:pointer (delay GSocket-desc)))
(export GSocket*-desc)
(define-fh-pointer-type GSocket* GSocket*-desc)

;; typedef struct _GSocketControlMessage GSocketControlMessage;
(define GSocketControlMessage-desc void)
(export GSocketControlMessage-desc)
(define GSocketControlMessage*-desc (bs:pointer (delay GSocketControlMessage-desc)))
(export GSocketControlMessage*-desc)
(define-fh-pointer-type GSocketControlMessage* GSocketControlMessage*-desc)

;; typedef struct _GSocketClient GSocketClient;
(define GSocketClient-desc void)
(export GSocketClient-desc)
(define GSocketClient*-desc (bs:pointer (delay GSocketClient-desc)))
(export GSocketClient*-desc)
(define-fh-pointer-type GSocketClient* GSocketClient*-desc)

;; typedef struct _GSocketConnection GSocketConnection;
(define GSocketConnection-desc void)
(export GSocketConnection-desc)
(define GSocketConnection*-desc (bs:pointer (delay GSocketConnection-desc)))
(export GSocketConnection*-desc)
(define-fh-pointer-type GSocketConnection* GSocketConnection*-desc)

;; typedef struct _GSocketListener GSocketListener;
(define GSocketListener-desc void)
(export GSocketListener-desc)
(define GSocketListener*-desc (bs:pointer (delay GSocketListener-desc)))
(export GSocketListener*-desc)
(define-fh-pointer-type GSocketListener* GSocketListener*-desc)

;; typedef struct _GSocketService GSocketService;
(define GSocketService-desc void)
(export GSocketService-desc)
(define GSocketService*-desc (bs:pointer (delay GSocketService-desc)))
(export GSocketService*-desc)
(define-fh-pointer-type GSocketService* GSocketService*-desc)

;; typedef struct _GSocketAddress GSocketAddress;
(define GSocketAddress-desc void)
(export GSocketAddress-desc)
(define GSocketAddress*-desc (bs:pointer (delay GSocketAddress-desc)))
(export GSocketAddress*-desc)
(define-fh-pointer-type GSocketAddress* GSocketAddress*-desc)

;; typedef struct _GSocketAddressEnumerator GSocketAddressEnumerator;
(define GSocketAddressEnumerator-desc void)
(export GSocketAddressEnumerator-desc)
(define GSocketAddressEnumerator*-desc (bs:pointer (delay GSocketAddressEnumerator-desc)))
(export GSocketAddressEnumerator*-desc)
(define-fh-pointer-type GSocketAddressEnumerator* GSocketAddressEnumerator*-desc)

;; typedef struct _GSocketConnectable GSocketConnectable;
(define GSocketConnectable-desc void)
(export GSocketConnectable-desc)
(define GSocketConnectable*-desc (bs:pointer GSocketConnectable-desc))
(export GSocketConnectable*-desc)
(define-fh-pointer-type GSocketConnectable* GSocketConnectable*-desc)

;; typedef struct _GSrvTarget GSrvTarget;
(define GSrvTarget-desc void)
(export GSrvTarget-desc)
(define GSrvTarget*-desc (bs:pointer GSrvTarget-desc))
(export GSrvTarget*-desc)
(define-fh-pointer-type GSrvTarget* GSrvTarget*-desc)

;; typedef struct _GTask GTask;
(define GTask-desc void)
(export GTask-desc)
(define GTask*-desc (bs:pointer GTask-desc))
(export GTask*-desc)
(define-fh-pointer-type GTask* GTask*-desc)

;; typedef struct _GTcpConnection GTcpConnection;
(define GTcpConnection-desc void)
(export GTcpConnection-desc)
(define GTcpConnection*-desc (bs:pointer (delay GTcpConnection-desc)))
(export GTcpConnection*-desc)
(define-fh-pointer-type GTcpConnection* GTcpConnection*-desc)

;; typedef struct _GTcpWrapperConnection GTcpWrapperConnection;
(define GTcpWrapperConnection-desc void)
(export GTcpWrapperConnection-desc)
(define GTcpWrapperConnection*-desc (bs:pointer (delay GTcpWrapperConnection-desc)))
(export GTcpWrapperConnection*-desc)
(define-fh-pointer-type GTcpWrapperConnection* GTcpWrapperConnection*-desc)

;; typedef struct _GThreadedSocketService GThreadedSocketService;
(define GThreadedSocketService-desc void)
(export GThreadedSocketService-desc)
(define GThreadedSocketService*-desc (bs:pointer (delay GThreadedSocketService-desc)))
(export GThreadedSocketService*-desc)
(define-fh-pointer-type GThreadedSocketService* GThreadedSocketService*-desc)

;; typedef struct _GDtlsConnection GDtlsConnection;
(define GDtlsConnection-desc void)
(export GDtlsConnection-desc)
(define GDtlsConnection*-desc (bs:pointer GDtlsConnection-desc))
(export GDtlsConnection*-desc)
(define-fh-pointer-type GDtlsConnection* GDtlsConnection*-desc)

;; typedef struct _GDtlsClientConnection GDtlsClientConnection; 
;;     /* Dummy typedef */
(define GDtlsClientConnection-desc void)
(export GDtlsClientConnection-desc)
(define GDtlsClientConnection*-desc (bs:pointer GDtlsClientConnection-desc))
(export GDtlsClientConnection*-desc)
(define-fh-pointer-type GDtlsClientConnection* GDtlsClientConnection*-desc)

;; typedef struct _GDtlsServerConnection GDtlsServerConnection; 
;;     /* Dummy typedef */
(define GDtlsServerConnection-desc void)
(export GDtlsServerConnection-desc)
(define GDtlsServerConnection*-desc (bs:pointer GDtlsServerConnection-desc))
(export GDtlsServerConnection*-desc)
(define-fh-pointer-type GDtlsServerConnection* GDtlsServerConnection*-desc)

;; typedef struct _GThemedIcon GThemedIcon;
(define GThemedIcon-desc void)
(export GThemedIcon-desc)
(define GThemedIcon*-desc (bs:pointer GThemedIcon-desc))
(export GThemedIcon*-desc)
(define-fh-pointer-type GThemedIcon* GThemedIcon*-desc)

;; typedef struct _GTlsCertificate GTlsCertificate;
(define GTlsCertificate-desc void)
(export GTlsCertificate-desc)
(define GTlsCertificate*-desc (bs:pointer (delay GTlsCertificate-desc)))
(export GTlsCertificate*-desc)
(define-fh-pointer-type GTlsCertificate* GTlsCertificate*-desc)

;; typedef struct _GTlsClientConnection GTlsClientConnection; 
;;     /* Dummy typedef */
(define GTlsClientConnection-desc void)
(export GTlsClientConnection-desc)
(define GTlsClientConnection*-desc (bs:pointer GTlsClientConnection-desc))
(export GTlsClientConnection*-desc)
(define-fh-pointer-type GTlsClientConnection* GTlsClientConnection*-desc)

;; typedef struct _GTlsConnection GTlsConnection;
(define GTlsConnection-desc void)
(export GTlsConnection-desc)
(define GTlsConnection*-desc (bs:pointer (delay GTlsConnection-desc)))
(export GTlsConnection*-desc)
(define-fh-pointer-type GTlsConnection* GTlsConnection*-desc)

;; typedef struct _GTlsDatabase GTlsDatabase;
(define GTlsDatabase-desc void)
(export GTlsDatabase-desc)
(define GTlsDatabase*-desc (bs:pointer (delay GTlsDatabase-desc)))
(export GTlsDatabase*-desc)
(define-fh-pointer-type GTlsDatabase* GTlsDatabase*-desc)

;; typedef struct _GTlsFileDatabase GTlsFileDatabase;
(define GTlsFileDatabase-desc void)
(export GTlsFileDatabase-desc)
(define GTlsFileDatabase*-desc (bs:pointer GTlsFileDatabase-desc))
(export GTlsFileDatabase*-desc)
(define-fh-pointer-type GTlsFileDatabase* GTlsFileDatabase*-desc)

;; typedef struct _GTlsInteraction GTlsInteraction;
(define GTlsInteraction-desc void)
(export GTlsInteraction-desc)
(define GTlsInteraction*-desc (bs:pointer (delay GTlsInteraction-desc)))
(export GTlsInteraction*-desc)
(define-fh-pointer-type GTlsInteraction* GTlsInteraction*-desc)

;; typedef struct _GTlsPassword GTlsPassword;
(define GTlsPassword-desc void)
(export GTlsPassword-desc)
(define GTlsPassword*-desc (bs:pointer (delay GTlsPassword-desc)))
(export GTlsPassword*-desc)
(define-fh-pointer-type GTlsPassword* GTlsPassword*-desc)

;; typedef struct _GTlsServerConnection GTlsServerConnection; 
;;     /* Dummy typedef */
(define GTlsServerConnection-desc void)
(export GTlsServerConnection-desc)
(define GTlsServerConnection*-desc (bs:pointer GTlsServerConnection-desc))
(export GTlsServerConnection*-desc)
(define-fh-pointer-type GTlsServerConnection* GTlsServerConnection*-desc)

;; typedef struct _GVfs GVfs; /* Dummy typedef */
(define GVfs-desc void)
(export GVfs-desc)
(define GVfs*-desc (bs:pointer (delay GVfs-desc)))
(export GVfs*-desc)
(define-fh-pointer-type GVfs* GVfs*-desc)

;; typedef struct _GProxyResolver GProxyResolver;
(define GProxyResolver-desc void)
(export GProxyResolver-desc)
(define GProxyResolver*-desc (bs:pointer GProxyResolver-desc))
(export GProxyResolver*-desc)
(define-fh-pointer-type GProxyResolver* GProxyResolver*-desc)

;; typedef struct _GProxy GProxy;
(define GProxy-desc void)
(export GProxy-desc)
(define GProxy*-desc (bs:pointer GProxy-desc))
(export GProxy*-desc)
(define-fh-pointer-type GProxy* GProxy*-desc)

;; typedef struct _GProxyAddress GProxyAddress;
(define GProxyAddress-desc void)
(export GProxyAddress-desc)
(define GProxyAddress*-desc (bs:pointer (delay GProxyAddress-desc)))
(export GProxyAddress*-desc)
(define-fh-pointer-type GProxyAddress* GProxyAddress*-desc)

;; typedef struct _GProxyAddressEnumerator GProxyAddressEnumerator;
(define GProxyAddressEnumerator-desc void)
(export GProxyAddressEnumerator-desc)
(define GProxyAddressEnumerator*-desc (bs:pointer (delay GProxyAddressEnumerator-desc)))
(export GProxyAddressEnumerator*-desc)
(define-fh-pointer-type GProxyAddressEnumerator* GProxyAddressEnumerator*-desc)

;; typedef struct _GVolume GVolume; /* Dummy typedef */
(define GVolume-desc void)
(export GVolume-desc)
(define GVolume*-desc (bs:pointer GVolume-desc))
(export GVolume*-desc)
(define-fh-pointer-type GVolume* GVolume*-desc)

;; typedef struct _GVolumeMonitor GVolumeMonitor;
(define GVolumeMonitor-desc void)
(export GVolumeMonitor-desc)
(define GVolumeMonitor*-desc (bs:pointer (delay GVolumeMonitor-desc)))
(export GVolumeMonitor*-desc)
(define-fh-pointer-type GVolumeMonitor* GVolumeMonitor*-desc)

;; typedef void (*GAsyncReadyCallback)(GObject *source_object, GAsyncResult *
;;     res, gpointer user_data);
(define-fh-function/p GAsyncReadyCallback
  ffi:void (list (quote *) (quote *) (quote *)))

;; typedef void (*GFileProgressCallback)(goffset current_num_bytes, goffset 
;;     total_num_bytes, gpointer user_data);
(define-fh-function/p GFileProgressCallback
  ffi:void (list ffi:long ffi:long (quote *)))

;; typedef gboolean (*GFileReadMoreCallback)(const char *file_contents, goffset
;;      file_size, gpointer callback_data);
(define-fh-function/p GFileReadMoreCallback
  ffi:int (list (quote *) ffi:long (quote *)))

;; typedef void (*GFileMeasureProgressCallback)(gboolean reporting, guint64 
;;     current_size, guint64 num_dirs, guint64 num_files, gpointer user_data);
(define-fh-function/p GFileMeasureProgressCallback
  ffi:void (list ffi:int ffi:unsigned-long ffi:unsigned-long ffi:unsigned-long (quote *)))

;; typedef gboolean (*GIOSchedulerJobFunc)(GIOSchedulerJob *job, GCancellable *
;;     cancellable, gpointer user_data);
(define-fh-function/p GIOSchedulerJobFunc
  ffi:int (list (quote *) (quote *) (quote *)))

;; typedef void (*GSimpleAsyncThreadFunc)(GSimpleAsyncResult *res, GObject *
;;     object, GCancellable *cancellable);
(define-fh-function/p GSimpleAsyncThreadFunc
  ffi:void (list (quote *) (quote *) (quote *)))

;; typedef gboolean (*GSocketSourceFunc)(GSocket *socket, GIOCondition 
;;     condition, gpointer user_data);
(define-fh-function/p GSocketSourceFunc
  ffi:int (list (quote *) ffi:int (quote *)))

;; typedef gboolean (*GDatagramBasedSourceFunc)(GDatagramBased *datagram_based
;;     , GIOCondition condition, gpointer user_data);
(define-fh-function/p GDatagramBasedSourceFunc
  ffi:int (list (quote *) ffi:int (quote *)))

;; typedef struct _GInputVector GInputVector;
(define GInputVector-desc void)
(export GInputVector-desc)
(define GInputVector*-desc (bs:pointer (delay GInputVector-desc)))
(export GInputVector*-desc)
(define-fh-pointer-type GInputVector* GInputVector*-desc)

;; struct _GInputVector {
;;   gpointer buffer;
;;   gsize size;
;; };
(define struct-_GInputVector-desc
  (bs:struct
    (list `(buffer ,gpointer-desc)
          `(size ,unsigned-long))))
(export struct-_GInputVector-desc)
(define-fh-compound-type/p struct-_GInputVector struct-_GInputVector-desc)
(set! GInputVector-desc struct-_GInputVector-desc)
(define-fh-compound-type GInputVector GInputVector-desc)

;; typedef struct _GInputMessage GInputMessage;
(define GInputMessage-desc void)
(export GInputMessage-desc)
(define GInputMessage*-desc (bs:pointer (delay GInputMessage-desc)))
(export GInputMessage*-desc)
(define-fh-pointer-type GInputMessage* GInputMessage*-desc)

;; struct _GInputMessage {
;;   GSocketAddress **address;
;;   GInputVector *vectors;
;;   guint num_vectors;
;;   gsize bytes_received;
;;   gint flags;
;;   GSocketControlMessage ***control_messages;
;;   guint *num_control_messages;
;; };
(define struct-_GInputMessage-desc
  (bs:struct
    (list `(address
             ,(bs:pointer
                (bs:pointer (delay GSocketAddress*-desc))))
          `(vectors
             ,(bs:pointer (delay GInputVector*-desc)))
          `(num_vectors ,unsigned-int)
          `(bytes_received ,unsigned-long)
          `(flags ,int)
          `(control_messages
             ,(bs:pointer
                (bs:pointer
                  (bs:pointer (delay GSocketControlMessage*-desc)))))
          `(num_control_messages ,(bs:pointer unsigned-int)))))
(export struct-_GInputMessage-desc)
(define-fh-compound-type/p struct-_GInputMessage struct-_GInputMessage-desc)
(set! GInputMessage-desc struct-_GInputMessage-desc)
(define-fh-compound-type GInputMessage GInputMessage-desc)

;; typedef struct _GOutputVector GOutputVector;
(define GOutputVector-desc void)
(export GOutputVector-desc)
(define GOutputVector*-desc (bs:pointer (delay GOutputVector-desc)))
(export GOutputVector*-desc)
(define-fh-pointer-type GOutputVector* GOutputVector*-desc)

;; struct _GOutputVector {
;;   gconstpointer buffer;
;;   gsize size;
;; };
(define struct-_GOutputVector-desc
  (bs:struct
    (list `(buffer ,gconstpointer-desc)
          `(size ,unsigned-long))))
(export struct-_GOutputVector-desc)
(define-fh-compound-type/p struct-_GOutputVector struct-_GOutputVector-desc)
(set! GOutputVector-desc struct-_GOutputVector-desc)
(define-fh-compound-type GOutputVector GOutputVector-desc)

;; typedef struct _GOutputMessage GOutputMessage;
(define GOutputMessage-desc void)
(export GOutputMessage-desc)
(define GOutputMessage*-desc (bs:pointer (delay GOutputMessage-desc)))
(export GOutputMessage*-desc)
(define-fh-pointer-type GOutputMessage* GOutputMessage*-desc)

;; struct _GOutputMessage {
;;   GSocketAddress *address;
;;   GOutputVector *vectors;
;;   guint num_vectors;
;;   guint bytes_sent;
;;   GSocketControlMessage **control_messages;
;;   guint num_control_messages;
;; };
(define struct-_GOutputMessage-desc
  (bs:struct
    (list `(address
             ,(bs:pointer (delay GSocketAddress*-desc)))
          `(vectors
             ,(bs:pointer (delay GOutputVector*-desc)))
          `(num_vectors ,unsigned-int)
          `(bytes_sent ,unsigned-int)
          `(control_messages
             ,(bs:pointer
                (bs:pointer (delay GSocketControlMessage*-desc))))
          `(num_control_messages ,unsigned-int))))
(export struct-_GOutputMessage-desc)
(define-fh-compound-type/p struct-_GOutputMessage struct-_GOutputMessage-desc)
(set! GOutputMessage-desc struct-_GOutputMessage-desc)
(define-fh-compound-type GOutputMessage GOutputMessage-desc)

;; typedef struct _GCredentials GCredentials;
(define GCredentials-desc void)
(export GCredentials-desc)
(define GCredentials*-desc (bs:pointer GCredentials-desc))
(export GCredentials*-desc)
(define-fh-pointer-type GCredentials* GCredentials*-desc)

;; typedef struct _GUnixCredentialsMessage GUnixCredentialsMessage;
(define GUnixCredentialsMessage-desc void)
(export GUnixCredentialsMessage-desc)
(define GUnixCredentialsMessage*-desc (bs:pointer GUnixCredentialsMessage-desc))
(export GUnixCredentialsMessage*-desc)
(define-fh-pointer-type GUnixCredentialsMessage* GUnixCredentialsMessage*-desc)

;; typedef struct _GUnixFDList GUnixFDList;
(define GUnixFDList-desc void)
(export GUnixFDList-desc)
(define GUnixFDList*-desc (bs:pointer GUnixFDList-desc))
(export GUnixFDList*-desc)
(define-fh-pointer-type GUnixFDList* GUnixFDList*-desc)

;; typedef struct _GDBusMessage GDBusMessage;
(define GDBusMessage-desc void)
(export GDBusMessage-desc)
(define GDBusMessage*-desc (bs:pointer GDBusMessage-desc))
(export GDBusMessage*-desc)
(define-fh-pointer-type GDBusMessage* GDBusMessage*-desc)

;; typedef struct _GDBusConnection GDBusConnection;
(define GDBusConnection-desc void)
(export GDBusConnection-desc)
(define GDBusConnection*-desc (bs:pointer GDBusConnection-desc))
(export GDBusConnection*-desc)
(define-fh-pointer-type GDBusConnection* GDBusConnection*-desc)

;; typedef struct _GDBusProxy GDBusProxy;
(define GDBusProxy-desc void)
(export GDBusProxy-desc)
(define GDBusProxy*-desc (bs:pointer (delay GDBusProxy-desc)))
(export GDBusProxy*-desc)
(define-fh-pointer-type GDBusProxy* GDBusProxy*-desc)

;; typedef struct _GDBusMethodInvocation GDBusMethodInvocation;
(define GDBusMethodInvocation-desc void)
(export GDBusMethodInvocation-desc)
(define GDBusMethodInvocation*-desc (bs:pointer GDBusMethodInvocation-desc))
(export GDBusMethodInvocation*-desc)
(define-fh-pointer-type GDBusMethodInvocation* GDBusMethodInvocation*-desc)

;; typedef struct _GDBusServer GDBusServer;
(define GDBusServer-desc void)
(export GDBusServer-desc)
(define GDBusServer*-desc (bs:pointer GDBusServer-desc))
(export GDBusServer*-desc)
(define-fh-pointer-type GDBusServer* GDBusServer*-desc)

;; typedef struct _GDBusAuthObserver GDBusAuthObserver;
(define GDBusAuthObserver-desc void)
(export GDBusAuthObserver-desc)
(define GDBusAuthObserver*-desc (bs:pointer GDBusAuthObserver-desc))
(export GDBusAuthObserver*-desc)
(define-fh-pointer-type GDBusAuthObserver* GDBusAuthObserver*-desc)

;; typedef struct _GDBusErrorEntry GDBusErrorEntry;
(define GDBusErrorEntry-desc void)
(export GDBusErrorEntry-desc)
(define GDBusErrorEntry*-desc (bs:pointer (delay GDBusErrorEntry-desc)))
(export GDBusErrorEntry*-desc)
(define-fh-pointer-type GDBusErrorEntry* GDBusErrorEntry*-desc)

;; typedef struct _GDBusInterfaceVTable GDBusInterfaceVTable;
(define GDBusInterfaceVTable-desc void)
(export GDBusInterfaceVTable-desc)
(define GDBusInterfaceVTable*-desc (bs:pointer (delay GDBusInterfaceVTable-desc)))
(export GDBusInterfaceVTable*-desc)
(define-fh-pointer-type GDBusInterfaceVTable* GDBusInterfaceVTable*-desc)

;; typedef struct _GDBusSubtreeVTable GDBusSubtreeVTable;
(define GDBusSubtreeVTable-desc void)
(export GDBusSubtreeVTable-desc)
(define GDBusSubtreeVTable*-desc (bs:pointer (delay GDBusSubtreeVTable-desc)))
(export GDBusSubtreeVTable*-desc)
(define-fh-pointer-type GDBusSubtreeVTable* GDBusSubtreeVTable*-desc)

;; typedef struct _GDBusAnnotationInfo GDBusAnnotationInfo;
(define GDBusAnnotationInfo-desc void)
(export GDBusAnnotationInfo-desc)
(define GDBusAnnotationInfo*-desc (bs:pointer (delay GDBusAnnotationInfo-desc)))
(export GDBusAnnotationInfo*-desc)
(define-fh-pointer-type GDBusAnnotationInfo* GDBusAnnotationInfo*-desc)

;; typedef struct _GDBusArgInfo GDBusArgInfo;
(define GDBusArgInfo-desc void)
(export GDBusArgInfo-desc)
(define GDBusArgInfo*-desc (bs:pointer (delay GDBusArgInfo-desc)))
(export GDBusArgInfo*-desc)
(define-fh-pointer-type GDBusArgInfo* GDBusArgInfo*-desc)

;; typedef struct _GDBusMethodInfo GDBusMethodInfo;
(define GDBusMethodInfo-desc void)
(export GDBusMethodInfo-desc)
(define GDBusMethodInfo*-desc (bs:pointer (delay GDBusMethodInfo-desc)))
(export GDBusMethodInfo*-desc)
(define-fh-pointer-type GDBusMethodInfo* GDBusMethodInfo*-desc)

;; typedef struct _GDBusSignalInfo GDBusSignalInfo;
(define GDBusSignalInfo-desc void)
(export GDBusSignalInfo-desc)
(define GDBusSignalInfo*-desc (bs:pointer (delay GDBusSignalInfo-desc)))
(export GDBusSignalInfo*-desc)
(define-fh-pointer-type GDBusSignalInfo* GDBusSignalInfo*-desc)

;; typedef struct _GDBusPropertyInfo GDBusPropertyInfo;
(define GDBusPropertyInfo-desc void)
(export GDBusPropertyInfo-desc)
(define GDBusPropertyInfo*-desc (bs:pointer (delay GDBusPropertyInfo-desc)))
(export GDBusPropertyInfo*-desc)
(define-fh-pointer-type GDBusPropertyInfo* GDBusPropertyInfo*-desc)

;; typedef struct _GDBusInterfaceInfo GDBusInterfaceInfo;
(define GDBusInterfaceInfo-desc void)
(export GDBusInterfaceInfo-desc)
(define GDBusInterfaceInfo*-desc (bs:pointer (delay GDBusInterfaceInfo-desc)))
(export GDBusInterfaceInfo*-desc)
(define-fh-pointer-type GDBusInterfaceInfo* GDBusInterfaceInfo*-desc)

;; typedef struct _GDBusNodeInfo GDBusNodeInfo;
(define GDBusNodeInfo-desc void)
(export GDBusNodeInfo-desc)
(define GDBusNodeInfo*-desc (bs:pointer (delay GDBusNodeInfo-desc)))
(export GDBusNodeInfo*-desc)
(define-fh-pointer-type GDBusNodeInfo* GDBusNodeInfo*-desc)

;; typedef gboolean (*GCancellableSourceFunc)(GCancellable *cancellable, 
;;     gpointer user_data);
(define-fh-function/p GCancellableSourceFunc
  ffi:int (list (quote *) (quote *)))

;; typedef gboolean (*GPollableSourceFunc)(GObject *pollable_stream, gpointer 
;;     user_data);
(define-fh-function/p GPollableSourceFunc
  ffi:int (list (quote *) (quote *)))

;; typedef struct _GDBusInterface GDBusInterface; /* Dummy typedef */
(define GDBusInterface-desc void)
(export GDBusInterface-desc)
(define GDBusInterface*-desc (bs:pointer GDBusInterface-desc))
(export GDBusInterface*-desc)
(define-fh-pointer-type GDBusInterface* GDBusInterface*-desc)

;; typedef struct _GDBusInterfaceSkeleton GDBusInterfaceSkeleton;
(define GDBusInterfaceSkeleton-desc void)
(export GDBusInterfaceSkeleton-desc)
(define GDBusInterfaceSkeleton*-desc (bs:pointer (delay GDBusInterfaceSkeleton-desc)))
(export GDBusInterfaceSkeleton*-desc)
(define-fh-pointer-type GDBusInterfaceSkeleton* GDBusInterfaceSkeleton*-desc)

;; typedef struct _GDBusObject GDBusObject; /* Dummy typedef */
(define GDBusObject-desc void)
(export GDBusObject-desc)
(define GDBusObject*-desc (bs:pointer GDBusObject-desc))
(export GDBusObject*-desc)
(define-fh-pointer-type GDBusObject* GDBusObject*-desc)

;; typedef struct _GDBusObjectSkeleton GDBusObjectSkeleton;
(define GDBusObjectSkeleton-desc void)
(export GDBusObjectSkeleton-desc)
(define GDBusObjectSkeleton*-desc (bs:pointer (delay GDBusObjectSkeleton-desc)))
(export GDBusObjectSkeleton*-desc)
(define-fh-pointer-type GDBusObjectSkeleton* GDBusObjectSkeleton*-desc)

;; typedef struct _GDBusObjectProxy GDBusObjectProxy;
(define GDBusObjectProxy-desc void)
(export GDBusObjectProxy-desc)
(define GDBusObjectProxy*-desc (bs:pointer (delay GDBusObjectProxy-desc)))
(export GDBusObjectProxy*-desc)
(define-fh-pointer-type GDBusObjectProxy* GDBusObjectProxy*-desc)

;; typedef struct _GDBusObjectManager GDBusObjectManager; /* Dummy typedef */
(define GDBusObjectManager-desc void)
(export GDBusObjectManager-desc)
(define GDBusObjectManager*-desc (bs:pointer GDBusObjectManager-desc))
(export GDBusObjectManager*-desc)
(define-fh-pointer-type GDBusObjectManager* GDBusObjectManager*-desc)

;; typedef struct _GDBusObjectManagerClient GDBusObjectManagerClient;
(define GDBusObjectManagerClient-desc void)
(export GDBusObjectManagerClient-desc)
(define GDBusObjectManagerClient*-desc (bs:pointer (delay GDBusObjectManagerClient-desc)))
(export GDBusObjectManagerClient*-desc)
(define-fh-pointer-type GDBusObjectManagerClient* GDBusObjectManagerClient*-desc)

;; typedef struct _GDBusObjectManagerServer GDBusObjectManagerServer;
(define GDBusObjectManagerServer-desc void)
(export GDBusObjectManagerServer-desc)
(define GDBusObjectManagerServer*-desc (bs:pointer (delay GDBusObjectManagerServer-desc)))
(export GDBusObjectManagerServer*-desc)
(define-fh-pointer-type GDBusObjectManagerServer* GDBusObjectManagerServer*-desc)

;; typedef GType (*GDBusProxyTypeFunc)(GDBusObjectManagerClient *manager, const
;;      gchar *object_path, const gchar *interface_name, gpointer user_data);
(define-fh-function/p GDBusProxyTypeFunc
  ffi:unsigned-long (list (quote *) (quote *) (quote *) (quote *)))

;; typedef struct _GTestDBus GTestDBus;
(define GTestDBus-desc void)
(export GTestDBus-desc)
(define GTestDBus*-desc (bs:pointer GTestDBus-desc))
(export GTestDBus*-desc)
(define-fh-pointer-type GTestDBus* GTestDBus*-desc)

;; typedef struct _GSubprocess GSubprocess;
(define GSubprocess-desc void)
(export GSubprocess-desc)
(define GSubprocess*-desc (bs:pointer GSubprocess-desc))
(export GSubprocess*-desc)
(define-fh-pointer-type GSubprocess* GSubprocess*-desc)

;; typedef struct _GSubprocessLauncher GSubprocessLauncher;
(define GSubprocessLauncher-desc void)
(export GSubprocessLauncher-desc)
(define GSubprocessLauncher*-desc (bs:pointer GSubprocessLauncher-desc))
(export GSubprocessLauncher*-desc)
(define-fh-pointer-type GSubprocessLauncher* GSubprocessLauncher*-desc)

;; typedef struct _GActionInterface GActionInterface;
(define GActionInterface-desc void)
(export GActionInterface-desc)
(define GActionInterface*-desc (bs:pointer (delay GActionInterface-desc)))
(export GActionInterface*-desc)
(define-fh-pointer-type GActionInterface* GActionInterface*-desc)

;; struct _GActionInterface {
;;   GTypeInterface g_iface;
;;   /* virtual functions */
;;   const gchar *(*get_name)(GAction *action);
;;   const GVariantType *(*get_parameter_type)(GAction *action);
;;   const GVariantType *(*get_state_type)(GAction *action);
;;   GVariant *(*get_state_hint)(GAction *action);
;;   gboolean (*get_enabled)(GAction *action);
;;   GVariant *(*get_state)(GAction *action);
;;   void (*change_state)(GAction *action, GVariant *value);
;;   void (*activate)(GAction *action, GVariant *parameter);
;; };
(define struct-_GActionInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(get_name ,(bs:pointer void))
          `(get_parameter_type ,(bs:pointer void))
          `(get_state_type ,(bs:pointer void))
          `(get_state_hint ,(bs:pointer void))
          `(get_enabled ,(bs:pointer void))
          `(get_state ,(bs:pointer void))
          `(change_state ,(bs:pointer void))
          `(activate ,(bs:pointer void)))))
(export struct-_GActionInterface-desc)
(define-fh-compound-type/p struct-_GActionInterface struct-_GActionInterface-desc)
(set! GActionInterface-desc struct-_GActionInterface-desc)
(define-fh-compound-type GActionInterface GActionInterface-desc)

;; extern GType g_action_get_type(void);
(define ~g_action_get_type #f)
(define (g_action_get_type)
  (unless
    ~g_action_get_type
    (set! ~g_action_get_type
      (fh-link-proc
        "g_action_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_action_get_type)))
(export g_action_get_type)

;; extern const gchar *g_action_get_name(GAction *action);
(define ~g_action_get_name #f)
(define (g_action_get_name action)
  (unless
    ~g_action_get_name
    (set! ~g_action_get_name
      (fh-link-proc "g_action_get_name" '* (list '*))))
  (let ((~action (unwrap-GAction* action)))
    (~g_action_get_name ~action)))
(export g_action_get_name)

;; extern const GVariantType *g_action_get_parameter_type(GAction *action);
(define ~g_action_get_parameter_type #f)
(define (g_action_get_parameter_type action)
  (unless
    ~g_action_get_parameter_type
    (set! ~g_action_get_parameter_type
      (fh-link-proc
        "g_action_get_parameter_type"
        '*
        (list '*))))
  (let ((~action (unwrap-GAction* action)))
    (~g_action_get_parameter_type ~action)))
(export g_action_get_parameter_type)

;; extern const GVariantType *g_action_get_state_type(GAction *action);
(define ~g_action_get_state_type #f)
(define (g_action_get_state_type action)
  (unless
    ~g_action_get_state_type
    (set! ~g_action_get_state_type
      (fh-link-proc
        "g_action_get_state_type"
        '*
        (list '*))))
  (let ((~action (unwrap-GAction* action)))
    (~g_action_get_state_type ~action)))
(export g_action_get_state_type)

;; extern GVariant *g_action_get_state_hint(GAction *action);
(define ~g_action_get_state_hint #f)
(define (g_action_get_state_hint action)
  (unless
    ~g_action_get_state_hint
    (set! ~g_action_get_state_hint
      (fh-link-proc
        "g_action_get_state_hint"
        '*
        (list '*))))
  (let ((~action (unwrap-GAction* action)))
    (~g_action_get_state_hint ~action)))
(export g_action_get_state_hint)

;; extern gboolean g_action_get_enabled(GAction *action);
(define ~g_action_get_enabled #f)
(define (g_action_get_enabled action)
  (unless
    ~g_action_get_enabled
    (set! ~g_action_get_enabled
      (fh-link-proc
        "g_action_get_enabled"
        ffi:int
        (list '*))))
  (let ((~action (unwrap-GAction* action)))
    (~g_action_get_enabled ~action)))
(export g_action_get_enabled)

;; extern GVariant *g_action_get_state(GAction *action);
(define ~g_action_get_state #f)
(define (g_action_get_state action)
  (unless
    ~g_action_get_state
    (set! ~g_action_get_state
      (fh-link-proc "g_action_get_state" '* (list '*))))
  (let ((~action (unwrap-GAction* action)))
    (~g_action_get_state ~action)))
(export g_action_get_state)

;; extern void g_action_change_state(GAction *action, GVariant *value);
(define ~g_action_change_state #f)
(define (g_action_change_state action value)
  (unless
    ~g_action_change_state
    (set! ~g_action_change_state
      (fh-link-proc
        "g_action_change_state"
        ffi:void
        (list '* '*))))
  (let ((~action (unwrap-GAction* action)))
    (~g_action_change_state ~action value)))
(export g_action_change_state)

;; extern void g_action_activate(GAction *action, GVariant *parameter);
(define ~g_action_activate #f)
(define (g_action_activate action parameter)
  (unless
    ~g_action_activate
    (set! ~g_action_activate
      (fh-link-proc
        "g_action_activate"
        ffi:void
        (list '* '*))))
  (let ((~action (unwrap-GAction* action)))
    (~g_action_activate ~action parameter)))
(export g_action_activate)

;; extern gboolean g_action_name_is_valid(const gchar *action_name);
(define ~g_action_name_is_valid #f)
(define (g_action_name_is_valid action_name)
  (unless
    ~g_action_name_is_valid
    (set! ~g_action_name_is_valid
      (fh-link-proc
        "g_action_name_is_valid"
        ffi:int
        (list '*))))
  (let ((~action_name (unwrap~pointer action_name)))
    (~g_action_name_is_valid ~action_name)))
(export g_action_name_is_valid)

;; extern gboolean g_action_parse_detailed_name(const gchar *detailed_name, 
;;     gchar **action_name, GVariant **target_value, GError **error);
(define ~g_action_parse_detailed_name #f)
(define (g_action_parse_detailed_name
         detailed_name
         action_name
         target_value
         error)
  (unless
    ~g_action_parse_detailed_name
    (set! ~g_action_parse_detailed_name
      (fh-link-proc
        "g_action_parse_detailed_name"
        ffi:int
        (list '* '* '* '*))))
  (let ((~detailed_name (unwrap~pointer detailed_name))
        (~action_name (unwrap~pointer action_name))
        (~target_value (unwrap~pointer target_value))
        (~error (unwrap~pointer error)))
    (~g_action_parse_detailed_name
      ~detailed_name
      ~action_name
      ~target_value
      ~error)))
(export g_action_parse_detailed_name)

;; extern gchar *g_action_print_detailed_name(const gchar *action_name, 
;;     GVariant *target_value);
(define ~g_action_print_detailed_name #f)
(define (g_action_print_detailed_name
         action_name
         target_value)
  (unless
    ~g_action_print_detailed_name
    (set! ~g_action_print_detailed_name
      (fh-link-proc
        "g_action_print_detailed_name"
        '*
        (list '* '*))))
  (let ((~action_name (unwrap~pointer action_name)))
    (~g_action_print_detailed_name
      ~action_name
      target_value)))
(export g_action_print_detailed_name)

;; typedef struct _GActionGroupInterface GActionGroupInterface;
(define GActionGroupInterface-desc void)
(export GActionGroupInterface-desc)
(define GActionGroupInterface*-desc (bs:pointer (delay GActionGroupInterface-desc)))
(export GActionGroupInterface*-desc)
(define-fh-pointer-type GActionGroupInterface* GActionGroupInterface*-desc)

;; struct _GActionGroupInterface {
;;   GTypeInterface g_iface;
;;   /* virtual functions */
;;   gboolean (*has_action)(GActionGroup *action_group, const gchar *
;;       action_name);
;;   gchar **(*list_actions)(GActionGroup *action_group);
;;   gboolean (*get_action_enabled)(GActionGroup *action_group, const gchar *
;;       action_name);
;;   const GVariantType *(*get_action_parameter_type)(GActionGroup *
;;       action_group, const gchar *action_name);
;;   const GVariantType *(*get_action_state_type)(GActionGroup *action_group, 
;;       const gchar *action_name);
;;   GVariant *(*get_action_state_hint)(GActionGroup *action_group, const gchar
;;        *action_name);
;;   GVariant *(*get_action_state)(GActionGroup *action_group, const gchar *
;;       action_name);
;;   void (*change_action_state)(GActionGroup *action_group, const gchar *
;;       action_name, GVariant *value);
;;   void (*activate_action)(GActionGroup *action_group, const gchar *
;;       action_name, GVariant *parameter);
;;   /* signals */
;;   void (*action_added)(GActionGroup *action_group, const gchar *action_name)
;;       ;
;;   void (*action_removed)(GActionGroup *action_group, const gchar *
;;       action_name);
;;   void (*action_enabled_changed)(GActionGroup *action_group, const gchar *
;;       action_name, gboolean enabled);
;;   void (*action_state_changed)(GActionGroup *action_group, const gchar *
;;       action_name, GVariant *state);
;;   /* more virtual functions */
;;   gboolean (*query_action)(GActionGroup *action_group, const gchar *
;;       action_name, gboolean *enabled, const GVariantType **parameter_type, 
;;       const GVariantType **state_type, GVariant **state_hint, GVariant **
;;       state);
;; };
(define struct-_GActionGroupInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(has_action ,(bs:pointer void))
          `(list_actions ,(bs:pointer void))
          `(get_action_enabled ,(bs:pointer void))
          `(get_action_parameter_type ,(bs:pointer void))
          `(get_action_state_type ,(bs:pointer void))
          `(get_action_state_hint ,(bs:pointer void))
          `(get_action_state ,(bs:pointer void))
          `(change_action_state ,(bs:pointer void))
          `(activate_action ,(bs:pointer void))
          `(action_added ,(bs:pointer void))
          `(action_removed ,(bs:pointer void))
          `(action_enabled_changed ,(bs:pointer void))
          `(action_state_changed ,(bs:pointer void))
          `(query_action ,(bs:pointer void)))))
(export struct-_GActionGroupInterface-desc)
(define-fh-compound-type/p struct-_GActionGroupInterface struct-_GActionGroupInterface-desc)
(set! GActionGroupInterface-desc struct-_GActionGroupInterface-desc)
(define-fh-compound-type GActionGroupInterface GActionGroupInterface-desc)

;; extern GType g_action_group_get_type(void);
(define ~g_action_group_get_type #f)
(define (g_action_group_get_type)
  (unless
    ~g_action_group_get_type
    (set! ~g_action_group_get_type
      (fh-link-proc
        "g_action_group_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_action_group_get_type)))
(export g_action_group_get_type)

;; extern gboolean g_action_group_has_action(GActionGroup *action_group, const 
;;     gchar *action_name);
(define ~g_action_group_has_action #f)
(define (g_action_group_has_action
         action_group
         action_name)
  (unless
    ~g_action_group_has_action
    (set! ~g_action_group_has_action
      (fh-link-proc
        "g_action_group_has_action"
        ffi:int
        (list '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_group_has_action
      ~action_group
      ~action_name)))
(export g_action_group_has_action)

;; extern gchar **g_action_group_list_actions(GActionGroup *action_group);
(define ~g_action_group_list_actions #f)
(define (g_action_group_list_actions action_group)
  (unless
    ~g_action_group_list_actions
    (set! ~g_action_group_list_actions
      (fh-link-proc
        "g_action_group_list_actions"
        '*
        (list '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group)))
    (~g_action_group_list_actions ~action_group)))
(export g_action_group_list_actions)

;; extern const GVariantType *g_action_group_get_action_parameter_type(
;;     GActionGroup *action_group, const gchar *action_name);
(define ~g_action_group_get_action_parameter_type #f)
(define (g_action_group_get_action_parameter_type
         action_group
         action_name)
  (unless
    ~g_action_group_get_action_parameter_type
    (set! ~g_action_group_get_action_parameter_type
      (fh-link-proc
        "g_action_group_get_action_parameter_type"
        '*
        (list '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_group_get_action_parameter_type
      ~action_group
      ~action_name)))
(export g_action_group_get_action_parameter_type)

;; extern const GVariantType *g_action_group_get_action_state_type(GActionGroup
;;      *action_group, const gchar *action_name);
(define ~g_action_group_get_action_state_type #f)
(define (g_action_group_get_action_state_type
         action_group
         action_name)
  (unless
    ~g_action_group_get_action_state_type
    (set! ~g_action_group_get_action_state_type
      (fh-link-proc
        "g_action_group_get_action_state_type"
        '*
        (list '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_group_get_action_state_type
      ~action_group
      ~action_name)))
(export g_action_group_get_action_state_type)

;; extern GVariant *g_action_group_get_action_state_hint(GActionGroup *
;;     action_group, const gchar *action_name);
(define ~g_action_group_get_action_state_hint #f)
(define (g_action_group_get_action_state_hint
         action_group
         action_name)
  (unless
    ~g_action_group_get_action_state_hint
    (set! ~g_action_group_get_action_state_hint
      (fh-link-proc
        "g_action_group_get_action_state_hint"
        '*
        (list '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_group_get_action_state_hint
      ~action_group
      ~action_name)))
(export g_action_group_get_action_state_hint)

;; extern gboolean g_action_group_get_action_enabled(GActionGroup *action_group
;;     , const gchar *action_name);
(define ~g_action_group_get_action_enabled #f)
(define (g_action_group_get_action_enabled
         action_group
         action_name)
  (unless
    ~g_action_group_get_action_enabled
    (set! ~g_action_group_get_action_enabled
      (fh-link-proc
        "g_action_group_get_action_enabled"
        ffi:int
        (list '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_group_get_action_enabled
      ~action_group
      ~action_name)))
(export g_action_group_get_action_enabled)

;; extern GVariant *g_action_group_get_action_state(GActionGroup *action_group
;;     , const gchar *action_name);
(define ~g_action_group_get_action_state #f)
(define (g_action_group_get_action_state
         action_group
         action_name)
  (unless
    ~g_action_group_get_action_state
    (set! ~g_action_group_get_action_state
      (fh-link-proc
        "g_action_group_get_action_state"
        '*
        (list '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_group_get_action_state
      ~action_group
      ~action_name)))
(export g_action_group_get_action_state)

;; extern void g_action_group_change_action_state(GActionGroup *action_group, 
;;     const gchar *action_name, GVariant *value);
(define ~g_action_group_change_action_state #f)
(define (g_action_group_change_action_state
         action_group
         action_name
         value)
  (unless
    ~g_action_group_change_action_state
    (set! ~g_action_group_change_action_state
      (fh-link-proc
        "g_action_group_change_action_state"
        ffi:void
        (list '* '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_group_change_action_state
      ~action_group
      ~action_name
      value)))
(export g_action_group_change_action_state)

;; extern void g_action_group_activate_action(GActionGroup *action_group, const
;;      gchar *action_name, GVariant *parameter);
(define ~g_action_group_activate_action #f)
(define (g_action_group_activate_action
         action_group
         action_name
         parameter)
  (unless
    ~g_action_group_activate_action
    (set! ~g_action_group_activate_action
      (fh-link-proc
        "g_action_group_activate_action"
        ffi:void
        (list '* '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_group_activate_action
      ~action_group
      ~action_name
      parameter)))
(export g_action_group_activate_action)

;; extern void g_action_group_action_added(GActionGroup *action_group, const 
;;     gchar *action_name);
(define ~g_action_group_action_added #f)
(define (g_action_group_action_added
         action_group
         action_name)
  (unless
    ~g_action_group_action_added
    (set! ~g_action_group_action_added
      (fh-link-proc
        "g_action_group_action_added"
        ffi:void
        (list '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_group_action_added
      ~action_group
      ~action_name)))
(export g_action_group_action_added)

;; extern void g_action_group_action_removed(GActionGroup *action_group, const 
;;     gchar *action_name);
(define ~g_action_group_action_removed #f)
(define (g_action_group_action_removed
         action_group
         action_name)
  (unless
    ~g_action_group_action_removed
    (set! ~g_action_group_action_removed
      (fh-link-proc
        "g_action_group_action_removed"
        ffi:void
        (list '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_group_action_removed
      ~action_group
      ~action_name)))
(export g_action_group_action_removed)

;; extern void g_action_group_action_enabled_changed(GActionGroup *action_group
;;     , const gchar *action_name, gboolean enabled);
(define ~g_action_group_action_enabled_changed #f)
(define (g_action_group_action_enabled_changed
         action_group
         action_name
         enabled)
  (unless
    ~g_action_group_action_enabled_changed
    (set! ~g_action_group_action_enabled_changed
      (fh-link-proc
        "g_action_group_action_enabled_changed"
        ffi:void
        (list '* '* ffi:int))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name))
        (~enabled (unwrap~fixed enabled)))
    (~g_action_group_action_enabled_changed
      ~action_group
      ~action_name
      ~enabled)))
(export g_action_group_action_enabled_changed)

;; extern void g_action_group_action_state_changed(GActionGroup *action_group, 
;;     const gchar *action_name, GVariant *state);
(define ~g_action_group_action_state_changed #f)
(define (g_action_group_action_state_changed
         action_group
         action_name
         state)
  (unless
    ~g_action_group_action_state_changed
    (set! ~g_action_group_action_state_changed
      (fh-link-proc
        "g_action_group_action_state_changed"
        ffi:void
        (list '* '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_group_action_state_changed
      ~action_group
      ~action_name
      state)))
(export g_action_group_action_state_changed)

;; extern gboolean g_action_group_query_action(GActionGroup *action_group, 
;;     const gchar *action_name, gboolean *enabled, const GVariantType **
;;     parameter_type, const GVariantType **state_type, GVariant **state_hint, 
;;     GVariant **state);
(define ~g_action_group_query_action #f)
(define (g_action_group_query_action
         action_group
         action_name
         enabled
         parameter_type
         state_type
         state_hint
         state)
  (unless
    ~g_action_group_query_action
    (set! ~g_action_group_query_action
      (fh-link-proc
        "g_action_group_query_action"
        ffi:int
        (list '* '* '* '* '* '* '*))))
  (let ((~action_group
          (unwrap-GActionGroup* action_group))
        (~action_name (unwrap~pointer action_name))
        (~enabled (unwrap~pointer enabled))
        (~parameter_type (unwrap~pointer parameter_type))
        (~state_type (unwrap~pointer state_type))
        (~state_hint (unwrap~pointer state_hint))
        (~state (unwrap~pointer state)))
    (~g_action_group_query_action
      ~action_group
      ~action_name
      ~enabled
      ~parameter_type
      ~state_type
      ~state_hint
      ~state)))
(export g_action_group_query_action)

;; extern guint g_dbus_connection_export_action_group(GDBusConnection *
;;     connection, const gchar *object_path, GActionGroup *action_group, GError
;;      **error);
(define ~g_dbus_connection_export_action_group #f)
(define (g_dbus_connection_export_action_group
         connection
         object_path
         action_group
         error)
  (unless
    ~g_dbus_connection_export_action_group
    (set! ~g_dbus_connection_export_action_group
      (fh-link-proc
        "g_dbus_connection_export_action_group"
        ffi:unsigned-int
        (list '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~object_path (unwrap~pointer object_path))
        (~action_group
          (unwrap-GActionGroup* action_group))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_export_action_group
      ~connection
      ~object_path
      ~action_group
      ~error)))
(export g_dbus_connection_export_action_group)

;; extern void g_dbus_connection_unexport_action_group(GDBusConnection *
;;     connection, guint export_id);
(define ~g_dbus_connection_unexport_action_group #f)
(define (g_dbus_connection_unexport_action_group
         connection
         export_id)
  (unless
    ~g_dbus_connection_unexport_action_group
    (set! ~g_dbus_connection_unexport_action_group
      (fh-link-proc
        "g_dbus_connection_unexport_action_group"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~export_id (unwrap~fixed export_id)))
    (~g_dbus_connection_unexport_action_group
      ~connection
      ~export_id)))
(export g_dbus_connection_unexport_action_group)

;; typedef struct _GActionMapInterface GActionMapInterface;
(define GActionMapInterface-desc void)
(export GActionMapInterface-desc)
(define GActionMapInterface*-desc (bs:pointer (delay GActionMapInterface-desc)))
(export GActionMapInterface*-desc)
(define-fh-pointer-type GActionMapInterface* GActionMapInterface*-desc)

;; typedef struct _GActionEntry GActionEntry;
(define GActionEntry-desc void)
(export GActionEntry-desc)
(define GActionEntry*-desc (bs:pointer (delay GActionEntry-desc)))
(export GActionEntry*-desc)
(define-fh-pointer-type GActionEntry* GActionEntry*-desc)

;; struct _GActionMapInterface {
;;   GTypeInterface g_iface;
;;   GAction *(*lookup_action)(GActionMap *action_map, const gchar *action_name
;;       );
;;   void (*add_action)(GActionMap *action_map, GAction *action);
;;   void (*remove_action)(GActionMap *action_map, const gchar *action_name);
;; };
(define struct-_GActionMapInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(lookup_action ,(bs:pointer void))
          `(add_action ,(bs:pointer void))
          `(remove_action ,(bs:pointer void)))))
(export struct-_GActionMapInterface-desc)
(define-fh-compound-type/p struct-_GActionMapInterface struct-_GActionMapInterface-desc)
(set! GActionMapInterface-desc struct-_GActionMapInterface-desc)
(define-fh-compound-type GActionMapInterface GActionMapInterface-desc)

;; struct _GActionEntry {
;;   const gchar *name;
;;   void (*activate)(GSimpleAction *action, GVariant *parameter, gpointer 
;;       user_data);
;;   const gchar *parameter_type;
;;   const gchar *state;
;;   void (*change_state)(GSimpleAction *action, GVariant *value, gpointer 
;;       user_data);
;;   /*< private >*/
;;   gsize padding[3];
;; };
(define struct-_GActionEntry-desc
  (bs:struct
    (list `(name ,(bs:pointer int))
          `(activate ,(bs:pointer void))
          `(parameter_type ,(bs:pointer int))
          `(state ,(bs:pointer int))
          `(change_state ,(bs:pointer void))
          `(padding ,(bs:vector 3 unsigned-long)))))
(export struct-_GActionEntry-desc)
(define-fh-compound-type/p struct-_GActionEntry struct-_GActionEntry-desc)
(set! GActionEntry-desc struct-_GActionEntry-desc)
(define-fh-compound-type GActionEntry GActionEntry-desc)

;; extern GType g_action_map_get_type(void);
(define ~g_action_map_get_type #f)
(define (g_action_map_get_type)
  (unless
    ~g_action_map_get_type
    (set! ~g_action_map_get_type
      (fh-link-proc
        "g_action_map_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_action_map_get_type)))
(export g_action_map_get_type)

;; extern GAction *g_action_map_lookup_action(GActionMap *action_map, const 
;;     gchar *action_name);
(define ~g_action_map_lookup_action #f)
(define (g_action_map_lookup_action
         action_map
         action_name)
  (unless
    ~g_action_map_lookup_action
    (set! ~g_action_map_lookup_action
      (fh-link-proc
        "g_action_map_lookup_action"
        '*
        (list '* '*))))
  (let ((~action_map (unwrap-GActionMap* action_map))
        (~action_name (unwrap~pointer action_name)))
    (wrap-GAction*
      (~g_action_map_lookup_action
        ~action_map
        ~action_name))))
(export g_action_map_lookup_action)

;; extern void g_action_map_add_action(GActionMap *action_map, GAction *action)
;;     ;
(define ~g_action_map_add_action #f)
(define (g_action_map_add_action action_map action)
  (unless
    ~g_action_map_add_action
    (set! ~g_action_map_add_action
      (fh-link-proc
        "g_action_map_add_action"
        ffi:void
        (list '* '*))))
  (let ((~action_map (unwrap-GActionMap* action_map))
        (~action (unwrap-GAction* action)))
    (~g_action_map_add_action ~action_map ~action)))
(export g_action_map_add_action)

;; extern void g_action_map_remove_action(GActionMap *action_map, const gchar *
;;     action_name);
(define ~g_action_map_remove_action #f)
(define (g_action_map_remove_action
         action_map
         action_name)
  (unless
    ~g_action_map_remove_action
    (set! ~g_action_map_remove_action
      (fh-link-proc
        "g_action_map_remove_action"
        ffi:void
        (list '* '*))))
  (let ((~action_map (unwrap-GActionMap* action_map))
        (~action_name (unwrap~pointer action_name)))
    (~g_action_map_remove_action
      ~action_map
      ~action_name)))
(export g_action_map_remove_action)

;; extern void g_action_map_add_action_entries(GActionMap *action_map, const 
;;     GActionEntry *entries, gint n_entries, gpointer user_data);
(define ~g_action_map_add_action_entries #f)
(define (g_action_map_add_action_entries
         action_map
         entries
         n_entries
         user_data)
  (unless
    ~g_action_map_add_action_entries
    (set! ~g_action_map_add_action_entries
      (fh-link-proc
        "g_action_map_add_action_entries"
        ffi:void
        (list '* '* ffi:int '*))))
  (let ((~action_map (unwrap-GActionMap* action_map))
        (~entries (unwrap-GActionEntry* entries))
        (~n_entries (unwrap~fixed n_entries))
        (~user_data (unwrap-gpointer user_data)))
    (~g_action_map_add_action_entries
      ~action_map
      ~entries
      ~n_entries
      ~user_data)))
(export g_action_map_add_action_entries)

;; typedef struct _GAppLaunchContextClass GAppLaunchContextClass;
(define GAppLaunchContextClass-desc void)
(export GAppLaunchContextClass-desc)
(define GAppLaunchContextClass*-desc (bs:pointer (delay GAppLaunchContextClass-desc)))
(export GAppLaunchContextClass*-desc)
(define-fh-pointer-type GAppLaunchContextClass* GAppLaunchContextClass*-desc)

;; typedef struct _GAppLaunchContextPrivate GAppLaunchContextPrivate;
(define GAppLaunchContextPrivate-desc void)
(export GAppLaunchContextPrivate-desc)
(define GAppLaunchContextPrivate*-desc (bs:pointer GAppLaunchContextPrivate-desc))
(export GAppLaunchContextPrivate*-desc)
(define-fh-pointer-type GAppLaunchContextPrivate* GAppLaunchContextPrivate*-desc)

;; typedef struct _GAppInfoIface GAppInfoIface;
(define GAppInfoIface-desc void)
(export GAppInfoIface-desc)
(define GAppInfoIface*-desc (bs:pointer (delay GAppInfoIface-desc)))
(export GAppInfoIface*-desc)
(define-fh-pointer-type GAppInfoIface* GAppInfoIface*-desc)

;; struct _GAppInfoIface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   GAppInfo *(*dup)(GAppInfo *appinfo);
;;   gboolean (*equal)(GAppInfo *appinfo1, GAppInfo *appinfo2);
;;   const char *(*get_id)(GAppInfo *appinfo);
;;   const char *(*get_name)(GAppInfo *appinfo);
;;   const char *(*get_description)(GAppInfo *appinfo);
;;   const char *(*get_executable)(GAppInfo *appinfo);
;;   GIcon *(*get_icon)(GAppInfo *appinfo);
;;   gboolean (*launch)(GAppInfo *appinfo, GList *files, GAppLaunchContext *
;;       launch_context, GError **error);
;;   gboolean (*supports_uris)(GAppInfo *appinfo);
;;   gboolean (*supports_files)(GAppInfo *appinfo);
;;   gboolean (*launch_uris)(GAppInfo *appinfo, GList *uris, GAppLaunchContext 
;;       *launch_context, GError **error);
;;   gboolean (*should_show)(GAppInfo *appinfo);
;;   /* For changing associations */
;;   gboolean (*set_as_default_for_type)(GAppInfo *appinfo, const char *
;;       content_type, GError **error);
;;   gboolean (*set_as_default_for_extension)(GAppInfo *appinfo, const char *
;;       extension, GError **error);
;;   gboolean (*add_supports_type)(GAppInfo *appinfo, const char *content_type
;;       , GError **error);
;;   gboolean (*can_remove_supports_type)(GAppInfo *appinfo);
;;   gboolean (*remove_supports_type)(GAppInfo *appinfo, const char *
;;       content_type, GError **error);
;;   gboolean (*can_delete)(GAppInfo *appinfo);
;;   gboolean (*do_delete)(GAppInfo *appinfo);
;;   const char *(*get_commandline)(GAppInfo *appinfo);
;;   const char *(*get_display_name)(GAppInfo *appinfo);
;;   gboolean (*set_as_last_used_for_type)(GAppInfo *appinfo, const char *
;;       content_type, GError **error);
;;   const char **(*get_supported_types)(GAppInfo *appinfo);
;; };
(define struct-_GAppInfoIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(dup ,(bs:pointer void))
          `(equal ,(bs:pointer void))
          `(get_id ,(bs:pointer void))
          `(get_name ,(bs:pointer void))
          `(get_description ,(bs:pointer void))
          `(get_executable ,(bs:pointer void))
          `(get_icon ,(bs:pointer void))
          `(launch ,(bs:pointer void))
          `(supports_uris ,(bs:pointer void))
          `(supports_files ,(bs:pointer void))
          `(launch_uris ,(bs:pointer void))
          `(should_show ,(bs:pointer void))
          `(set_as_default_for_type ,(bs:pointer void))
          `(set_as_default_for_extension ,(bs:pointer void))
          `(add_supports_type ,(bs:pointer void))
          `(can_remove_supports_type ,(bs:pointer void))
          `(remove_supports_type ,(bs:pointer void))
          `(can_delete ,(bs:pointer void))
          `(do_delete ,(bs:pointer void))
          `(get_commandline ,(bs:pointer void))
          `(get_display_name ,(bs:pointer void))
          `(set_as_last_used_for_type ,(bs:pointer void))
          `(get_supported_types ,(bs:pointer void)))))
(export struct-_GAppInfoIface-desc)
(define-fh-compound-type/p struct-_GAppInfoIface struct-_GAppInfoIface-desc)
(set! GAppInfoIface-desc struct-_GAppInfoIface-desc)
(define-fh-compound-type GAppInfoIface GAppInfoIface-desc)

;; extern GType g_app_info_get_type(void);
(define ~g_app_info_get_type #f)
(define (g_app_info_get_type)
  (unless
    ~g_app_info_get_type
    (set! ~g_app_info_get_type
      (fh-link-proc
        "g_app_info_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_app_info_get_type)))
(export g_app_info_get_type)

;; extern GAppInfo *g_app_info_create_from_commandline(const char *commandline
;;     , const char *application_name, GAppInfoCreateFlags flags, GError **
;;     error);
(define ~g_app_info_create_from_commandline #f)
(define (g_app_info_create_from_commandline
         commandline
         application_name
         flags
         error)
  (unless
    ~g_app_info_create_from_commandline
    (set! ~g_app_info_create_from_commandline
      (fh-link-proc
        "g_app_info_create_from_commandline"
        '*
        (list '* '* ffi:int '*))))
  (let ((~commandline (unwrap~pointer commandline))
        (~application_name
          (unwrap~pointer application_name))
        (~flags (unwrap~fixed flags))
        (~error (unwrap~pointer error)))
    (wrap-GAppInfo*
      (~g_app_info_create_from_commandline
        ~commandline
        ~application_name
        ~flags
        ~error))))
(export g_app_info_create_from_commandline)

;; extern GAppInfo *g_app_info_dup(GAppInfo *appinfo);
(define ~g_app_info_dup #f)
(define (g_app_info_dup appinfo)
  (unless
    ~g_app_info_dup
    (set! ~g_app_info_dup
      (fh-link-proc "g_app_info_dup" '* (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (wrap-GAppInfo* (~g_app_info_dup ~appinfo))))
(export g_app_info_dup)

;; extern gboolean g_app_info_equal(GAppInfo *appinfo1, GAppInfo *appinfo2);
(define ~g_app_info_equal #f)
(define (g_app_info_equal appinfo1 appinfo2)
  (unless
    ~g_app_info_equal
    (set! ~g_app_info_equal
      (fh-link-proc
        "g_app_info_equal"
        ffi:int
        (list '* '*))))
  (let ((~appinfo1 (unwrap-GAppInfo* appinfo1))
        (~appinfo2 (unwrap-GAppInfo* appinfo2)))
    (~g_app_info_equal ~appinfo1 ~appinfo2)))
(export g_app_info_equal)

;; extern const char *g_app_info_get_id(GAppInfo *appinfo);
(define ~g_app_info_get_id #f)
(define (g_app_info_get_id appinfo)
  (unless
    ~g_app_info_get_id
    (set! ~g_app_info_get_id
      (fh-link-proc "g_app_info_get_id" '* (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_get_id ~appinfo)))
(export g_app_info_get_id)

;; extern const char *g_app_info_get_name(GAppInfo *appinfo);
(define ~g_app_info_get_name #f)
(define (g_app_info_get_name appinfo)
  (unless
    ~g_app_info_get_name
    (set! ~g_app_info_get_name
      (fh-link-proc "g_app_info_get_name" '* (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_get_name ~appinfo)))
(export g_app_info_get_name)

;; extern const char *g_app_info_get_display_name(GAppInfo *appinfo);
(define ~g_app_info_get_display_name #f)
(define (g_app_info_get_display_name appinfo)
  (unless
    ~g_app_info_get_display_name
    (set! ~g_app_info_get_display_name
      (fh-link-proc
        "g_app_info_get_display_name"
        '*
        (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_get_display_name ~appinfo)))
(export g_app_info_get_display_name)

;; extern const char *g_app_info_get_description(GAppInfo *appinfo);
(define ~g_app_info_get_description #f)
(define (g_app_info_get_description appinfo)
  (unless
    ~g_app_info_get_description
    (set! ~g_app_info_get_description
      (fh-link-proc
        "g_app_info_get_description"
        '*
        (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_get_description ~appinfo)))
(export g_app_info_get_description)

;; extern const char *g_app_info_get_executable(GAppInfo *appinfo);
(define ~g_app_info_get_executable #f)
(define (g_app_info_get_executable appinfo)
  (unless
    ~g_app_info_get_executable
    (set! ~g_app_info_get_executable
      (fh-link-proc
        "g_app_info_get_executable"
        '*
        (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_get_executable ~appinfo)))
(export g_app_info_get_executable)

;; extern const char *g_app_info_get_commandline(GAppInfo *appinfo);
(define ~g_app_info_get_commandline #f)
(define (g_app_info_get_commandline appinfo)
  (unless
    ~g_app_info_get_commandline
    (set! ~g_app_info_get_commandline
      (fh-link-proc
        "g_app_info_get_commandline"
        '*
        (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_get_commandline ~appinfo)))
(export g_app_info_get_commandline)

;; extern GIcon *g_app_info_get_icon(GAppInfo *appinfo);
(define ~g_app_info_get_icon #f)
(define (g_app_info_get_icon appinfo)
  (unless
    ~g_app_info_get_icon
    (set! ~g_app_info_get_icon
      (fh-link-proc "g_app_info_get_icon" '* (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (wrap-GIcon* (~g_app_info_get_icon ~appinfo))))
(export g_app_info_get_icon)

;; extern gboolean g_app_info_launch(GAppInfo *appinfo, GList *files, 
;;     GAppLaunchContext *launch_context, GError **error);
(define ~g_app_info_launch #f)
(define (g_app_info_launch
         appinfo
         files
         launch_context
         error)
  (unless
    ~g_app_info_launch
    (set! ~g_app_info_launch
      (fh-link-proc
        "g_app_info_launch"
        ffi:int
        (list '* '* '* '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo))
        (~launch_context
          (unwrap-GAppLaunchContext* launch_context))
        (~error (unwrap~pointer error)))
    (~g_app_info_launch
      ~appinfo
      files
      ~launch_context
      ~error)))
(export g_app_info_launch)

;; extern gboolean g_app_info_supports_uris(GAppInfo *appinfo);
(define ~g_app_info_supports_uris #f)
(define (g_app_info_supports_uris appinfo)
  (unless
    ~g_app_info_supports_uris
    (set! ~g_app_info_supports_uris
      (fh-link-proc
        "g_app_info_supports_uris"
        ffi:int
        (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_supports_uris ~appinfo)))
(export g_app_info_supports_uris)

;; extern gboolean g_app_info_supports_files(GAppInfo *appinfo);
(define ~g_app_info_supports_files #f)
(define (g_app_info_supports_files appinfo)
  (unless
    ~g_app_info_supports_files
    (set! ~g_app_info_supports_files
      (fh-link-proc
        "g_app_info_supports_files"
        ffi:int
        (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_supports_files ~appinfo)))
(export g_app_info_supports_files)

;; extern gboolean g_app_info_launch_uris(GAppInfo *appinfo, GList *uris, 
;;     GAppLaunchContext *launch_context, GError **error);
(define ~g_app_info_launch_uris #f)
(define (g_app_info_launch_uris
         appinfo
         uris
         launch_context
         error)
  (unless
    ~g_app_info_launch_uris
    (set! ~g_app_info_launch_uris
      (fh-link-proc
        "g_app_info_launch_uris"
        ffi:int
        (list '* '* '* '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo))
        (~launch_context
          (unwrap-GAppLaunchContext* launch_context))
        (~error (unwrap~pointer error)))
    (~g_app_info_launch_uris
      ~appinfo
      uris
      ~launch_context
      ~error)))
(export g_app_info_launch_uris)

;; extern gboolean g_app_info_should_show(GAppInfo *appinfo);
(define ~g_app_info_should_show #f)
(define (g_app_info_should_show appinfo)
  (unless
    ~g_app_info_should_show
    (set! ~g_app_info_should_show
      (fh-link-proc
        "g_app_info_should_show"
        ffi:int
        (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_should_show ~appinfo)))
(export g_app_info_should_show)

;; extern gboolean g_app_info_set_as_default_for_type(GAppInfo *appinfo, const 
;;     char *content_type, GError **error);
(define ~g_app_info_set_as_default_for_type #f)
(define (g_app_info_set_as_default_for_type
         appinfo
         content_type
         error)
  (unless
    ~g_app_info_set_as_default_for_type
    (set! ~g_app_info_set_as_default_for_type
      (fh-link-proc
        "g_app_info_set_as_default_for_type"
        ffi:int
        (list '* '* '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo))
        (~content_type (unwrap~pointer content_type))
        (~error (unwrap~pointer error)))
    (~g_app_info_set_as_default_for_type
      ~appinfo
      ~content_type
      ~error)))
(export g_app_info_set_as_default_for_type)

;; extern gboolean g_app_info_set_as_default_for_extension(GAppInfo *appinfo, 
;;     const char *extension, GError **error);
(define ~g_app_info_set_as_default_for_extension #f)
(define (g_app_info_set_as_default_for_extension
         appinfo
         extension
         error)
  (unless
    ~g_app_info_set_as_default_for_extension
    (set! ~g_app_info_set_as_default_for_extension
      (fh-link-proc
        "g_app_info_set_as_default_for_extension"
        ffi:int
        (list '* '* '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo))
        (~extension (unwrap~pointer extension))
        (~error (unwrap~pointer error)))
    (~g_app_info_set_as_default_for_extension
      ~appinfo
      ~extension
      ~error)))
(export g_app_info_set_as_default_for_extension)

;; extern gboolean g_app_info_add_supports_type(GAppInfo *appinfo, const char *
;;     content_type, GError **error);
(define ~g_app_info_add_supports_type #f)
(define (g_app_info_add_supports_type
         appinfo
         content_type
         error)
  (unless
    ~g_app_info_add_supports_type
    (set! ~g_app_info_add_supports_type
      (fh-link-proc
        "g_app_info_add_supports_type"
        ffi:int
        (list '* '* '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo))
        (~content_type (unwrap~pointer content_type))
        (~error (unwrap~pointer error)))
    (~g_app_info_add_supports_type
      ~appinfo
      ~content_type
      ~error)))
(export g_app_info_add_supports_type)

;; extern gboolean g_app_info_can_remove_supports_type(GAppInfo *appinfo);
(define ~g_app_info_can_remove_supports_type #f)
(define (g_app_info_can_remove_supports_type appinfo)
  (unless
    ~g_app_info_can_remove_supports_type
    (set! ~g_app_info_can_remove_supports_type
      (fh-link-proc
        "g_app_info_can_remove_supports_type"
        ffi:int
        (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_can_remove_supports_type ~appinfo)))
(export g_app_info_can_remove_supports_type)

;; extern gboolean g_app_info_remove_supports_type(GAppInfo *appinfo, const 
;;     char *content_type, GError **error);
(define ~g_app_info_remove_supports_type #f)
(define (g_app_info_remove_supports_type
         appinfo
         content_type
         error)
  (unless
    ~g_app_info_remove_supports_type
    (set! ~g_app_info_remove_supports_type
      (fh-link-proc
        "g_app_info_remove_supports_type"
        ffi:int
        (list '* '* '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo))
        (~content_type (unwrap~pointer content_type))
        (~error (unwrap~pointer error)))
    (~g_app_info_remove_supports_type
      ~appinfo
      ~content_type
      ~error)))
(export g_app_info_remove_supports_type)

;; extern const char **g_app_info_get_supported_types(GAppInfo *appinfo);
(define ~g_app_info_get_supported_types #f)
(define (g_app_info_get_supported_types appinfo)
  (unless
    ~g_app_info_get_supported_types
    (set! ~g_app_info_get_supported_types
      (fh-link-proc
        "g_app_info_get_supported_types"
        '*
        (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_get_supported_types ~appinfo)))
(export g_app_info_get_supported_types)

;; extern gboolean g_app_info_can_delete(GAppInfo *appinfo);
(define ~g_app_info_can_delete #f)
(define (g_app_info_can_delete appinfo)
  (unless
    ~g_app_info_can_delete
    (set! ~g_app_info_can_delete
      (fh-link-proc
        "g_app_info_can_delete"
        ffi:int
        (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_can_delete ~appinfo)))
(export g_app_info_can_delete)

;; extern gboolean g_app_info_delete(GAppInfo *appinfo);
(define ~g_app_info_delete #f)
(define (g_app_info_delete appinfo)
  (unless
    ~g_app_info_delete
    (set! ~g_app_info_delete
      (fh-link-proc
        "g_app_info_delete"
        ffi:int
        (list '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo)))
    (~g_app_info_delete ~appinfo)))
(export g_app_info_delete)

;; extern gboolean g_app_info_set_as_last_used_for_type(GAppInfo *appinfo, 
;;     const char *content_type, GError **error);
(define ~g_app_info_set_as_last_used_for_type #f)
(define (g_app_info_set_as_last_used_for_type
         appinfo
         content_type
         error)
  (unless
    ~g_app_info_set_as_last_used_for_type
    (set! ~g_app_info_set_as_last_used_for_type
      (fh-link-proc
        "g_app_info_set_as_last_used_for_type"
        ffi:int
        (list '* '* '*))))
  (let ((~appinfo (unwrap-GAppInfo* appinfo))
        (~content_type (unwrap~pointer content_type))
        (~error (unwrap~pointer error)))
    (~g_app_info_set_as_last_used_for_type
      ~appinfo
      ~content_type
      ~error)))
(export g_app_info_set_as_last_used_for_type)

;; extern GList *g_app_info_get_all(void);
(define ~g_app_info_get_all #f)
(define (g_app_info_get_all)
  (unless
    ~g_app_info_get_all
    (set! ~g_app_info_get_all
      (fh-link-proc "g_app_info_get_all" '* (list))))
  (let () (~g_app_info_get_all)))
(export g_app_info_get_all)

;; extern GList *g_app_info_get_all_for_type(const char *content_type);
(define ~g_app_info_get_all_for_type #f)
(define (g_app_info_get_all_for_type content_type)
  (unless
    ~g_app_info_get_all_for_type
    (set! ~g_app_info_get_all_for_type
      (fh-link-proc
        "g_app_info_get_all_for_type"
        '*
        (list '*))))
  (let ((~content_type (unwrap~pointer content_type)))
    (~g_app_info_get_all_for_type ~content_type)))
(export g_app_info_get_all_for_type)

;; extern GList *g_app_info_get_recommended_for_type(const gchar *content_type)
;;     ;
(define ~g_app_info_get_recommended_for_type #f)
(define (g_app_info_get_recommended_for_type
         content_type)
  (unless
    ~g_app_info_get_recommended_for_type
    (set! ~g_app_info_get_recommended_for_type
      (fh-link-proc
        "g_app_info_get_recommended_for_type"
        '*
        (list '*))))
  (let ((~content_type (unwrap~pointer content_type)))
    (~g_app_info_get_recommended_for_type
      ~content_type)))
(export g_app_info_get_recommended_for_type)

;; extern GList *g_app_info_get_fallback_for_type(const gchar *content_type);
(define ~g_app_info_get_fallback_for_type #f)
(define (g_app_info_get_fallback_for_type content_type)
  (unless
    ~g_app_info_get_fallback_for_type
    (set! ~g_app_info_get_fallback_for_type
      (fh-link-proc
        "g_app_info_get_fallback_for_type"
        '*
        (list '*))))
  (let ((~content_type (unwrap~pointer content_type)))
    (~g_app_info_get_fallback_for_type ~content_type)))
(export g_app_info_get_fallback_for_type)

;; extern void g_app_info_reset_type_associations(const char *content_type);
(define ~g_app_info_reset_type_associations #f)
(define (g_app_info_reset_type_associations content_type)
  (unless
    ~g_app_info_reset_type_associations
    (set! ~g_app_info_reset_type_associations
      (fh-link-proc
        "g_app_info_reset_type_associations"
        ffi:void
        (list '*))))
  (let ((~content_type (unwrap~pointer content_type)))
    (~g_app_info_reset_type_associations
      ~content_type)))
(export g_app_info_reset_type_associations)

;; extern GAppInfo *g_app_info_get_default_for_type(const char *content_type, 
;;     gboolean must_support_uris);
(define ~g_app_info_get_default_for_type #f)
(define (g_app_info_get_default_for_type
         content_type
         must_support_uris)
  (unless
    ~g_app_info_get_default_for_type
    (set! ~g_app_info_get_default_for_type
      (fh-link-proc
        "g_app_info_get_default_for_type"
        '*
        (list '* ffi:int))))
  (let ((~content_type (unwrap~pointer content_type))
        (~must_support_uris
          (unwrap~fixed must_support_uris)))
    (wrap-GAppInfo*
      (~g_app_info_get_default_for_type
        ~content_type
        ~must_support_uris))))
(export g_app_info_get_default_for_type)

;; extern GAppInfo *g_app_info_get_default_for_uri_scheme(const char *
;;     uri_scheme);
(define ~g_app_info_get_default_for_uri_scheme #f)
(define (g_app_info_get_default_for_uri_scheme
         uri_scheme)
  (unless
    ~g_app_info_get_default_for_uri_scheme
    (set! ~g_app_info_get_default_for_uri_scheme
      (fh-link-proc
        "g_app_info_get_default_for_uri_scheme"
        '*
        (list '*))))
  (let ((~uri_scheme (unwrap~pointer uri_scheme)))
    (wrap-GAppInfo*
      (~g_app_info_get_default_for_uri_scheme
        ~uri_scheme))))
(export g_app_info_get_default_for_uri_scheme)

;; extern gboolean g_app_info_launch_default_for_uri(const char *uri, 
;;     GAppLaunchContext *launch_context, GError **error);
(define ~g_app_info_launch_default_for_uri #f)
(define (g_app_info_launch_default_for_uri
         uri
         launch_context
         error)
  (unless
    ~g_app_info_launch_default_for_uri
    (set! ~g_app_info_launch_default_for_uri
      (fh-link-proc
        "g_app_info_launch_default_for_uri"
        ffi:int
        (list '* '* '*))))
  (let ((~uri (unwrap~pointer uri))
        (~launch_context
          (unwrap-GAppLaunchContext* launch_context))
        (~error (unwrap~pointer error)))
    (~g_app_info_launch_default_for_uri
      ~uri
      ~launch_context
      ~error)))
(export g_app_info_launch_default_for_uri)

;; extern void g_app_info_launch_default_for_uri_async(const char *uri, 
;;     GAppLaunchContext *launch_context, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_app_info_launch_default_for_uri_async #f)
(define (g_app_info_launch_default_for_uri_async
         uri
         launch_context
         cancellable
         callback
         user_data)
  (unless
    ~g_app_info_launch_default_for_uri_async
    (set! ~g_app_info_launch_default_for_uri_async
      (fh-link-proc
        "g_app_info_launch_default_for_uri_async"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~uri (unwrap~pointer uri))
        (~launch_context
          (unwrap-GAppLaunchContext* launch_context))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_app_info_launch_default_for_uri_async
      ~uri
      ~launch_context
      ~cancellable
      ~callback
      ~user_data)))
(export g_app_info_launch_default_for_uri_async)

;; extern gboolean g_app_info_launch_default_for_uri_finish(GAsyncResult *
;;     result, GError **error);
(define ~g_app_info_launch_default_for_uri_finish #f)
(define (g_app_info_launch_default_for_uri_finish
         result
         error)
  (unless
    ~g_app_info_launch_default_for_uri_finish
    (set! ~g_app_info_launch_default_for_uri_finish
      (fh-link-proc
        "g_app_info_launch_default_for_uri_finish"
        ffi:int
        (list '* '*))))
  (let ((~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_app_info_launch_default_for_uri_finish
      ~result
      ~error)))
(export g_app_info_launch_default_for_uri_finish)

;; struct _GAppLaunchContext {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GAppLaunchContextPrivate *priv;
;; };
(define struct-_GAppLaunchContext-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GAppLaunchContextPrivate*-desc))))))
(export struct-_GAppLaunchContext-desc)
(define-fh-compound-type/p struct-_GAppLaunchContext struct-_GAppLaunchContext-desc)
(set! GAppLaunchContext-desc struct-_GAppLaunchContext-desc)
(define-fh-compound-type GAppLaunchContext GAppLaunchContext-desc)

;; struct _GAppLaunchContextClass {
;;   GObjectClass parent_class;
;;   char *(*get_display)(GAppLaunchContext *context, GAppInfo *info, GList *
;;       files);
;;   char *(*get_startup_notify_id)(GAppLaunchContext *context, GAppInfo *info
;;       , GList *files);
;;   void (*launch_failed)(GAppLaunchContext *context, const char *
;;       startup_notify_id);
;;   void (*launched)(GAppLaunchContext *context, GAppInfo *info, GVariant *
;;       platform_data);
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;; };
(define struct-_GAppLaunchContextClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(get_display ,(bs:pointer void))
          `(get_startup_notify_id ,(bs:pointer void))
          `(launch_failed ,(bs:pointer void))
          `(launched ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void)))))
(export struct-_GAppLaunchContextClass-desc)
(define-fh-compound-type/p struct-_GAppLaunchContextClass struct-_GAppLaunchContextClass-desc)
(set! GAppLaunchContextClass-desc struct-_GAppLaunchContextClass-desc)
(define-fh-compound-type GAppLaunchContextClass GAppLaunchContextClass-desc)

;; extern GType g_app_launch_context_get_type(void);
(define ~g_app_launch_context_get_type #f)
(define (g_app_launch_context_get_type)
  (unless
    ~g_app_launch_context_get_type
    (set! ~g_app_launch_context_get_type
      (fh-link-proc
        "g_app_launch_context_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_app_launch_context_get_type)))
(export g_app_launch_context_get_type)

;; extern GAppLaunchContext *g_app_launch_context_new(void);
(define ~g_app_launch_context_new #f)
(define (g_app_launch_context_new)
  (unless
    ~g_app_launch_context_new
    (set! ~g_app_launch_context_new
      (fh-link-proc
        "g_app_launch_context_new"
        '*
        (list))))
  (let ()
    (wrap-GAppLaunchContext*
      (~g_app_launch_context_new))))
(export g_app_launch_context_new)

;; extern void g_app_launch_context_setenv(GAppLaunchContext *context, const 
;;     char *variable, const char *value);
(define ~g_app_launch_context_setenv #f)
(define (g_app_launch_context_setenv
         context
         variable
         value)
  (unless
    ~g_app_launch_context_setenv
    (set! ~g_app_launch_context_setenv
      (fh-link-proc
        "g_app_launch_context_setenv"
        ffi:void
        (list '* '* '*))))
  (let ((~context (unwrap-GAppLaunchContext* context))
        (~variable (unwrap~pointer variable))
        (~value (unwrap~pointer value)))
    (~g_app_launch_context_setenv
      ~context
      ~variable
      ~value)))
(export g_app_launch_context_setenv)

;; extern void g_app_launch_context_unsetenv(GAppLaunchContext *context, const 
;;     char *variable);
(define ~g_app_launch_context_unsetenv #f)
(define (g_app_launch_context_unsetenv context variable)
  (unless
    ~g_app_launch_context_unsetenv
    (set! ~g_app_launch_context_unsetenv
      (fh-link-proc
        "g_app_launch_context_unsetenv"
        ffi:void
        (list '* '*))))
  (let ((~context (unwrap-GAppLaunchContext* context))
        (~variable (unwrap~pointer variable)))
    (~g_app_launch_context_unsetenv
      ~context
      ~variable)))
(export g_app_launch_context_unsetenv)

;; extern char **g_app_launch_context_get_environment(GAppLaunchContext *
;;     context);
(define ~g_app_launch_context_get_environment #f)
(define (g_app_launch_context_get_environment context)
  (unless
    ~g_app_launch_context_get_environment
    (set! ~g_app_launch_context_get_environment
      (fh-link-proc
        "g_app_launch_context_get_environment"
        '*
        (list '*))))
  (let ((~context (unwrap-GAppLaunchContext* context)))
    (~g_app_launch_context_get_environment ~context)))
(export g_app_launch_context_get_environment)

;; extern char *g_app_launch_context_get_display(GAppLaunchContext *context, 
;;     GAppInfo *info, GList *files);
(define ~g_app_launch_context_get_display #f)
(define (g_app_launch_context_get_display
         context
         info
         files)
  (unless
    ~g_app_launch_context_get_display
    (set! ~g_app_launch_context_get_display
      (fh-link-proc
        "g_app_launch_context_get_display"
        '*
        (list '* '* '*))))
  (let ((~context (unwrap-GAppLaunchContext* context))
        (~info (unwrap-GAppInfo* info)))
    (~g_app_launch_context_get_display
      ~context
      ~info
      files)))
(export g_app_launch_context_get_display)

;; extern char *g_app_launch_context_get_startup_notify_id(GAppLaunchContext *
;;     context, GAppInfo *info, GList *files);
(define ~g_app_launch_context_get_startup_notify_id #f)
(define (g_app_launch_context_get_startup_notify_id
         context
         info
         files)
  (unless
    ~g_app_launch_context_get_startup_notify_id
    (set! ~g_app_launch_context_get_startup_notify_id
      (fh-link-proc
        "g_app_launch_context_get_startup_notify_id"
        '*
        (list '* '* '*))))
  (let ((~context (unwrap-GAppLaunchContext* context))
        (~info (unwrap-GAppInfo* info)))
    (~g_app_launch_context_get_startup_notify_id
      ~context
      ~info
      files)))
(export g_app_launch_context_get_startup_notify_id)

;; extern void g_app_launch_context_launch_failed(GAppLaunchContext *context, 
;;     const char *startup_notify_id);
(define ~g_app_launch_context_launch_failed #f)
(define (g_app_launch_context_launch_failed
         context
         startup_notify_id)
  (unless
    ~g_app_launch_context_launch_failed
    (set! ~g_app_launch_context_launch_failed
      (fh-link-proc
        "g_app_launch_context_launch_failed"
        ffi:void
        (list '* '*))))
  (let ((~context (unwrap-GAppLaunchContext* context))
        (~startup_notify_id
          (unwrap~pointer startup_notify_id)))
    (~g_app_launch_context_launch_failed
      ~context
      ~startup_notify_id)))
(export g_app_launch_context_launch_failed)

;; typedef struct _GAppInfoMonitor GAppInfoMonitor;
(define GAppInfoMonitor-desc void)
(export GAppInfoMonitor-desc)
(define GAppInfoMonitor*-desc (bs:pointer GAppInfoMonitor-desc))
(export GAppInfoMonitor*-desc)
(define-fh-pointer-type GAppInfoMonitor* GAppInfoMonitor*-desc)

;; extern GType g_app_info_monitor_get_type(void);
(define ~g_app_info_monitor_get_type #f)
(define (g_app_info_monitor_get_type)
  (unless
    ~g_app_info_monitor_get_type
    (set! ~g_app_info_monitor_get_type
      (fh-link-proc
        "g_app_info_monitor_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_app_info_monitor_get_type)))
(export g_app_info_monitor_get_type)

;; extern GAppInfoMonitor *g_app_info_monitor_get(void);
(define ~g_app_info_monitor_get #f)
(define (g_app_info_monitor_get)
  (unless
    ~g_app_info_monitor_get
    (set! ~g_app_info_monitor_get
      (fh-link-proc "g_app_info_monitor_get" '* (list))))
  (let ()
    (wrap-GAppInfoMonitor* (~g_app_info_monitor_get))))
(export g_app_info_monitor_get)

;; typedef struct _GApplicationPrivate GApplicationPrivate;
(define GApplicationPrivate-desc void)
(export GApplicationPrivate-desc)
(define GApplicationPrivate*-desc (bs:pointer GApplicationPrivate-desc))
(export GApplicationPrivate*-desc)
(define-fh-pointer-type GApplicationPrivate* GApplicationPrivate*-desc)

;; typedef struct _GApplicationClass GApplicationClass;
(define GApplicationClass-desc void)
(export GApplicationClass-desc)
(define GApplicationClass*-desc (bs:pointer (delay GApplicationClass-desc)))
(export GApplicationClass*-desc)
(define-fh-pointer-type GApplicationClass* GApplicationClass*-desc)

;; struct _GApplication {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GApplicationPrivate *priv;
;; };
(define struct-_GApplication-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GApplicationPrivate*-desc))))))
(export struct-_GApplication-desc)
(define-fh-compound-type/p struct-_GApplication struct-_GApplication-desc)
(set! GApplication-desc struct-_GApplication-desc)
(define-fh-compound-type GApplication GApplication-desc)

;; struct _GApplicationClass {
;;   /*< private >*/
;;   GObjectClass parent_class;
;;   /*< public >*/
;;   /* signals */
;;   void (*startup)(GApplication *application);
;;   void (*activate)(GApplication *application);
;;   void (*open)(GApplication *application, GFile **files, gint n_files, const
;;        gchar *hint);
;;   int (*command_line)(GApplication *application, GApplicationCommandLine *
;;       command_line);
;;   /* vfuncs */
;;   /**
;;    * GApplicationClass::local_command_line:
;;    * @application: a #GApplication
;;    * @arguments: (inout) (array zero-terminated=1): array of command line arguments
;;       
;;    * @exit_status: (out): exit status to fill after processing the command line.
;;       
;;    *
;;    * This virtual function is always invoked in the local instance. It
;;    * gets passed a pointer to a %NULL-terminated copy of @argv and is
;;    * expected to remove arguments that it handled (shifting up remaining
;;    * arguments).
;;    *
;;    * The last argument to local_command_line() is a pointer to the @status
;;    * variable which can used to set the exit status that is returned from
;;    * g_application_run().
;;    *
;;    * See g_application_run() for more details on #GApplication startup.
;;    *
;;    * Returns: %TRUE if the commandline has been completely handled
;;    */
;;   gboolean (*local_command_line)(GApplication *application, gchar ***
;;       arguments, int *exit_status);
;;   void (*before_emit)(GApplication *application, GVariant *platform_data);
;;   void (*after_emit)(GApplication *application, GVariant *platform_data);
;;   void (*add_platform_data)(GApplication *application, GVariantBuilder *
;;       builder);
;;   void (*quit_mainloop)(GApplication *application);
;;   void (*run_mainloop)(GApplication *application);
;;   void (*shutdown)(GApplication *application);
;;   gboolean (*dbus_register)(GApplication *application, GDBusConnection *
;;       connection, const gchar *object_path, GError **error);
;;   void (*dbus_unregister)(GApplication *application, GDBusConnection *
;;       connection, const gchar *object_path);
;;   gint (*handle_local_options)(GApplication *application, GVariantDict *
;;       options);
;;   /*< private >*/
;;   gpointer padding[8];
;; };
(define struct-_GApplicationClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(startup ,(bs:pointer void))
          `(activate ,(bs:pointer void))
          `(open ,(bs:pointer void))
          `(command_line ,(bs:pointer void))
          `(local_command_line ,(bs:pointer void))
          `(before_emit ,(bs:pointer void))
          `(after_emit ,(bs:pointer void))
          `(add_platform_data ,(bs:pointer void))
          `(quit_mainloop ,(bs:pointer void))
          `(run_mainloop ,(bs:pointer void))
          `(shutdown ,(bs:pointer void))
          `(dbus_register ,(bs:pointer void))
          `(dbus_unregister ,(bs:pointer void))
          `(handle_local_options ,(bs:pointer void))
          `(padding ,(bs:vector 8 gpointer-desc)))))
(export struct-_GApplicationClass-desc)
(define-fh-compound-type/p struct-_GApplicationClass struct-_GApplicationClass-desc)
(set! GApplicationClass-desc struct-_GApplicationClass-desc)
(define-fh-compound-type GApplicationClass GApplicationClass-desc)

;; extern GType g_application_get_type(void);
(define ~g_application_get_type #f)
(define (g_application_get_type)
  (unless
    ~g_application_get_type
    (set! ~g_application_get_type
      (fh-link-proc
        "g_application_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_application_get_type)))
(export g_application_get_type)

;; extern gboolean g_application_id_is_valid(const gchar *application_id);
(define ~g_application_id_is_valid #f)
(define (g_application_id_is_valid application_id)
  (unless
    ~g_application_id_is_valid
    (set! ~g_application_id_is_valid
      (fh-link-proc
        "g_application_id_is_valid"
        ffi:int
        (list '*))))
  (let ((~application_id (unwrap~pointer application_id)))
    (~g_application_id_is_valid ~application_id)))
(export g_application_id_is_valid)

;; extern GApplication *g_application_new(const gchar *application_id, 
;;     GApplicationFlags flags);
(define ~g_application_new #f)
(define (g_application_new application_id flags)
  (unless
    ~g_application_new
    (set! ~g_application_new
      (fh-link-proc
        "g_application_new"
        '*
        (list '* ffi:int))))
  (let ((~application_id (unwrap~pointer application_id))
        (~flags (unwrap~fixed flags)))
    (wrap-GApplication*
      (~g_application_new ~application_id ~flags))))
(export g_application_new)

;; extern const gchar *g_application_get_application_id(GApplication *
;;     application);
(define ~g_application_get_application_id #f)
(define (g_application_get_application_id application)
  (unless
    ~g_application_get_application_id
    (set! ~g_application_get_application_id
      (fh-link-proc
        "g_application_get_application_id"
        '*
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_get_application_id ~application)))
(export g_application_get_application_id)

;; extern void g_application_set_application_id(GApplication *application, 
;;     const gchar *application_id);
(define ~g_application_set_application_id #f)
(define (g_application_set_application_id
         application
         application_id)
  (unless
    ~g_application_set_application_id
    (set! ~g_application_set_application_id
      (fh-link-proc
        "g_application_set_application_id"
        ffi:void
        (list '* '*))))
  (let ((~application (unwrap-GApplication* application))
        (~application_id (unwrap~pointer application_id)))
    (~g_application_set_application_id
      ~application
      ~application_id)))
(export g_application_set_application_id)

;; extern GDBusConnection *g_application_get_dbus_connection(GApplication *
;;     application);
(define ~g_application_get_dbus_connection #f)
(define (g_application_get_dbus_connection application)
  (unless
    ~g_application_get_dbus_connection
    (set! ~g_application_get_dbus_connection
      (fh-link-proc
        "g_application_get_dbus_connection"
        '*
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (wrap-GDBusConnection*
      (~g_application_get_dbus_connection ~application))))
(export g_application_get_dbus_connection)

;; extern const gchar *g_application_get_dbus_object_path(GApplication *
;;     application);
(define ~g_application_get_dbus_object_path #f)
(define (g_application_get_dbus_object_path application)
  (unless
    ~g_application_get_dbus_object_path
    (set! ~g_application_get_dbus_object_path
      (fh-link-proc
        "g_application_get_dbus_object_path"
        '*
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_get_dbus_object_path
      ~application)))
(export g_application_get_dbus_object_path)

;; extern guint g_application_get_inactivity_timeout(GApplication *application)
;;     ;
(define ~g_application_get_inactivity_timeout #f)
(define (g_application_get_inactivity_timeout
         application)
  (unless
    ~g_application_get_inactivity_timeout
    (set! ~g_application_get_inactivity_timeout
      (fh-link-proc
        "g_application_get_inactivity_timeout"
        ffi:unsigned-int
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_get_inactivity_timeout
      ~application)))
(export g_application_get_inactivity_timeout)

;; extern void g_application_set_inactivity_timeout(GApplication *application, 
;;     guint inactivity_timeout);
(define ~g_application_set_inactivity_timeout #f)
(define (g_application_set_inactivity_timeout
         application
         inactivity_timeout)
  (unless
    ~g_application_set_inactivity_timeout
    (set! ~g_application_set_inactivity_timeout
      (fh-link-proc
        "g_application_set_inactivity_timeout"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~application (unwrap-GApplication* application))
        (~inactivity_timeout
          (unwrap~fixed inactivity_timeout)))
    (~g_application_set_inactivity_timeout
      ~application
      ~inactivity_timeout)))
(export g_application_set_inactivity_timeout)

;; extern GApplicationFlags g_application_get_flags(GApplication *application)
;;     ;
(define ~g_application_get_flags #f)
(define (g_application_get_flags application)
  (unless
    ~g_application_get_flags
    (set! ~g_application_get_flags
      (fh-link-proc
        "g_application_get_flags"
        ffi:int
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_get_flags ~application)))
(export g_application_get_flags)

;; extern void g_application_set_flags(GApplication *application, 
;;     GApplicationFlags flags);
(define ~g_application_set_flags #f)
(define (g_application_set_flags application flags)
  (unless
    ~g_application_set_flags
    (set! ~g_application_set_flags
      (fh-link-proc
        "g_application_set_flags"
        ffi:void
        (list '* ffi:int))))
  (let ((~application (unwrap-GApplication* application))
        (~flags (unwrap~fixed flags)))
    (~g_application_set_flags ~application ~flags)))
(export g_application_set_flags)

;; extern const gchar *g_application_get_resource_base_path(GApplication *
;;     application);
(define ~g_application_get_resource_base_path #f)
(define (g_application_get_resource_base_path
         application)
  (unless
    ~g_application_get_resource_base_path
    (set! ~g_application_get_resource_base_path
      (fh-link-proc
        "g_application_get_resource_base_path"
        '*
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_get_resource_base_path
      ~application)))
(export g_application_get_resource_base_path)

;; extern void g_application_set_resource_base_path(GApplication *application, 
;;     const gchar *resource_path);
(define ~g_application_set_resource_base_path #f)
(define (g_application_set_resource_base_path
         application
         resource_path)
  (unless
    ~g_application_set_resource_base_path
    (set! ~g_application_set_resource_base_path
      (fh-link-proc
        "g_application_set_resource_base_path"
        ffi:void
        (list '* '*))))
  (let ((~application (unwrap-GApplication* application))
        (~resource_path (unwrap~pointer resource_path)))
    (~g_application_set_resource_base_path
      ~application
      ~resource_path)))
(export g_application_set_resource_base_path)

;; extern void g_application_set_action_group(GApplication *application, 
;;     GActionGroup *action_group);
(define ~g_application_set_action_group #f)
(define (g_application_set_action_group
         application
         action_group)
  (unless
    ~g_application_set_action_group
    (set! ~g_application_set_action_group
      (fh-link-proc
        "g_application_set_action_group"
        ffi:void
        (list '* '*))))
  (let ((~application (unwrap-GApplication* application))
        (~action_group
          (unwrap-GActionGroup* action_group)))
    (~g_application_set_action_group
      ~application
      ~action_group)))
(export g_application_set_action_group)

;; extern void g_application_add_main_option_entries(GApplication *application
;;     , const GOptionEntry *entries);
(define ~g_application_add_main_option_entries #f)
(define (g_application_add_main_option_entries
         application
         entries)
  (unless
    ~g_application_add_main_option_entries
    (set! ~g_application_add_main_option_entries
      (fh-link-proc
        "g_application_add_main_option_entries"
        ffi:void
        (list '* '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_add_main_option_entries
      ~application
      entries)))
(export g_application_add_main_option_entries)

;; extern void g_application_add_main_option(GApplication *application, const 
;;     char *long_name, char short_name, GOptionFlags flags, GOptionArg arg, 
;;     const char *description, const char *arg_description);
(define ~g_application_add_main_option #f)
(define (g_application_add_main_option
         application
         long_name
         short_name
         flags
         arg
         description
         arg_description)
  (unless
    ~g_application_add_main_option
    (set! ~g_application_add_main_option
      (fh-link-proc
        "g_application_add_main_option"
        ffi:void
        (list '* '* ffi:int ffi:int ffi:int '* '*))))
  (let ((~application (unwrap-GApplication* application))
        (~long_name (unwrap~pointer long_name))
        (~short_name (unwrap~fixed short_name))
        (~flags (unwrap~fixed flags))
        (~arg (unwrap~fixed arg))
        (~description (unwrap~pointer description))
        (~arg_description
          (unwrap~pointer arg_description)))
    (~g_application_add_main_option
      ~application
      ~long_name
      ~short_name
      ~flags
      ~arg
      ~description
      ~arg_description)))
(export g_application_add_main_option)

;; extern void g_application_add_option_group(GApplication *application, 
;;     GOptionGroup *group);
(define ~g_application_add_option_group #f)
(define (g_application_add_option_group
         application
         group)
  (unless
    ~g_application_add_option_group
    (set! ~g_application_add_option_group
      (fh-link-proc
        "g_application_add_option_group"
        ffi:void
        (list '* '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_add_option_group
      ~application
      group)))
(export g_application_add_option_group)

;; extern gboolean g_application_get_is_registered(GApplication *application);
(define ~g_application_get_is_registered #f)
(define (g_application_get_is_registered application)
  (unless
    ~g_application_get_is_registered
    (set! ~g_application_get_is_registered
      (fh-link-proc
        "g_application_get_is_registered"
        ffi:int
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_get_is_registered ~application)))
(export g_application_get_is_registered)

;; extern gboolean g_application_get_is_remote(GApplication *application);
(define ~g_application_get_is_remote #f)
(define (g_application_get_is_remote application)
  (unless
    ~g_application_get_is_remote
    (set! ~g_application_get_is_remote
      (fh-link-proc
        "g_application_get_is_remote"
        ffi:int
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_get_is_remote ~application)))
(export g_application_get_is_remote)

;; extern gboolean g_application_register(GApplication *application, 
;;     GCancellable *cancellable, GError **error);
(define ~g_application_register #f)
(define (g_application_register
         application
         cancellable
         error)
  (unless
    ~g_application_register
    (set! ~g_application_register
      (fh-link-proc
        "g_application_register"
        ffi:int
        (list '* '* '*))))
  (let ((~application (unwrap-GApplication* application))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_application_register
      ~application
      ~cancellable
      ~error)))
(export g_application_register)

;; extern void g_application_hold(GApplication *application);
(define ~g_application_hold #f)
(define (g_application_hold application)
  (unless
    ~g_application_hold
    (set! ~g_application_hold
      (fh-link-proc
        "g_application_hold"
        ffi:void
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_hold ~application)))
(export g_application_hold)

;; extern void g_application_release(GApplication *application);
(define ~g_application_release #f)
(define (g_application_release application)
  (unless
    ~g_application_release
    (set! ~g_application_release
      (fh-link-proc
        "g_application_release"
        ffi:void
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_release ~application)))
(export g_application_release)

;; extern void g_application_activate(GApplication *application);
(define ~g_application_activate #f)
(define (g_application_activate application)
  (unless
    ~g_application_activate
    (set! ~g_application_activate
      (fh-link-proc
        "g_application_activate"
        ffi:void
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_activate ~application)))
(export g_application_activate)

;; extern void g_application_open(GApplication *application, GFile **files, 
;;     gint n_files, const gchar *hint);
(define ~g_application_open #f)
(define (g_application_open
         application
         files
         n_files
         hint)
  (unless
    ~g_application_open
    (set! ~g_application_open
      (fh-link-proc
        "g_application_open"
        ffi:void
        (list '* '* ffi:int '*))))
  (let ((~application (unwrap-GApplication* application))
        (~files (unwrap~pointer files))
        (~n_files (unwrap~fixed n_files))
        (~hint (unwrap~pointer hint)))
    (~g_application_open
      ~application
      ~files
      ~n_files
      ~hint)))
(export g_application_open)

;; extern int g_application_run(GApplication *application, int argc, char **
;;     argv);
(define ~g_application_run #f)
(define (g_application_run application argc argv)
  (unless
    ~g_application_run
    (set! ~g_application_run
      (fh-link-proc
        "g_application_run"
        ffi:int
        (list '* ffi:int '*))))
  (let ((~application (unwrap-GApplication* application))
        (~argc (unwrap~fixed argc))
        (~argv (unwrap~pointer argv)))
    (~g_application_run ~application ~argc ~argv)))
(export g_application_run)

;; extern void g_application_quit(GApplication *application);
(define ~g_application_quit #f)
(define (g_application_quit application)
  (unless
    ~g_application_quit
    (set! ~g_application_quit
      (fh-link-proc
        "g_application_quit"
        ffi:void
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_quit ~application)))
(export g_application_quit)

;; extern GApplication *g_application_get_default(void);
(define ~g_application_get_default #f)
(define (g_application_get_default)
  (unless
    ~g_application_get_default
    (set! ~g_application_get_default
      (fh-link-proc
        "g_application_get_default"
        '*
        (list))))
  (let ()
    (wrap-GApplication* (~g_application_get_default))))
(export g_application_get_default)

;; extern void g_application_set_default(GApplication *application);
(define ~g_application_set_default #f)
(define (g_application_set_default application)
  (unless
    ~g_application_set_default
    (set! ~g_application_set_default
      (fh-link-proc
        "g_application_set_default"
        ffi:void
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_set_default ~application)))
(export g_application_set_default)

;; extern void g_application_mark_busy(GApplication *application);
(define ~g_application_mark_busy #f)
(define (g_application_mark_busy application)
  (unless
    ~g_application_mark_busy
    (set! ~g_application_mark_busy
      (fh-link-proc
        "g_application_mark_busy"
        ffi:void
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_mark_busy ~application)))
(export g_application_mark_busy)

;; extern void g_application_unmark_busy(GApplication *application);
(define ~g_application_unmark_busy #f)
(define (g_application_unmark_busy application)
  (unless
    ~g_application_unmark_busy
    (set! ~g_application_unmark_busy
      (fh-link-proc
        "g_application_unmark_busy"
        ffi:void
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_unmark_busy ~application)))
(export g_application_unmark_busy)

;; extern gboolean g_application_get_is_busy(GApplication *application);
(define ~g_application_get_is_busy #f)
(define (g_application_get_is_busy application)
  (unless
    ~g_application_get_is_busy
    (set! ~g_application_get_is_busy
      (fh-link-proc
        "g_application_get_is_busy"
        ffi:int
        (list '*))))
  (let ((~application (unwrap-GApplication* application)))
    (~g_application_get_is_busy ~application)))
(export g_application_get_is_busy)

;; extern void g_application_send_notification(GApplication *application, const
;;      gchar *id, GNotification *notification);
(define ~g_application_send_notification #f)
(define (g_application_send_notification
         application
         id
         notification)
  (unless
    ~g_application_send_notification
    (set! ~g_application_send_notification
      (fh-link-proc
        "g_application_send_notification"
        ffi:void
        (list '* '* '*))))
  (let ((~application (unwrap-GApplication* application))
        (~id (unwrap~pointer id))
        (~notification
          (unwrap-GNotification* notification)))
    (~g_application_send_notification
      ~application
      ~id
      ~notification)))
(export g_application_send_notification)

;; extern void g_application_withdraw_notification(GApplication *application, 
;;     const gchar *id);
(define ~g_application_withdraw_notification #f)
(define (g_application_withdraw_notification
         application
         id)
  (unless
    ~g_application_withdraw_notification
    (set! ~g_application_withdraw_notification
      (fh-link-proc
        "g_application_withdraw_notification"
        ffi:void
        (list '* '*))))
  (let ((~application (unwrap-GApplication* application))
        (~id (unwrap~pointer id)))
    (~g_application_withdraw_notification
      ~application
      ~id)))
(export g_application_withdraw_notification)

;; extern void g_application_bind_busy_property(GApplication *application, 
;;     gpointer object, const gchar *property);
(define ~g_application_bind_busy_property #f)
(define (g_application_bind_busy_property
         application
         object
         property)
  (unless
    ~g_application_bind_busy_property
    (set! ~g_application_bind_busy_property
      (fh-link-proc
        "g_application_bind_busy_property"
        ffi:void
        (list '* '* '*))))
  (let ((~application (unwrap-GApplication* application))
        (~object (unwrap-gpointer object))
        (~property (unwrap~pointer property)))
    (~g_application_bind_busy_property
      ~application
      ~object
      ~property)))
(export g_application_bind_busy_property)

;; extern void g_application_unbind_busy_property(GApplication *application, 
;;     gpointer object, const gchar *property);
(define ~g_application_unbind_busy_property #f)
(define (g_application_unbind_busy_property
         application
         object
         property)
  (unless
    ~g_application_unbind_busy_property
    (set! ~g_application_unbind_busy_property
      (fh-link-proc
        "g_application_unbind_busy_property"
        ffi:void
        (list '* '* '*))))
  (let ((~application (unwrap-GApplication* application))
        (~object (unwrap-gpointer object))
        (~property (unwrap~pointer property)))
    (~g_application_unbind_busy_property
      ~application
      ~object
      ~property)))
(export g_application_unbind_busy_property)

;; typedef struct _GApplicationCommandLinePrivate 
;;     GApplicationCommandLinePrivate;
(define GApplicationCommandLinePrivate-desc void)
(export GApplicationCommandLinePrivate-desc)
(define GApplicationCommandLinePrivate*-desc (bs:pointer GApplicationCommandLinePrivate-desc))
(export GApplicationCommandLinePrivate*-desc)
(define-fh-pointer-type GApplicationCommandLinePrivate* GApplicationCommandLinePrivate*-desc)

;; typedef struct _GApplicationCommandLineClass GApplicationCommandLineClass;
(define GApplicationCommandLineClass-desc void)
(export GApplicationCommandLineClass-desc)
(define GApplicationCommandLineClass*-desc (bs:pointer (delay GApplicationCommandLineClass-desc)))
(export GApplicationCommandLineClass*-desc)
(define-fh-pointer-type GApplicationCommandLineClass* GApplicationCommandLineClass*-desc)

;; struct _GApplicationCommandLine {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GApplicationCommandLinePrivate *priv;
;; };
(define struct-_GApplicationCommandLine-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GApplicationCommandLinePrivate*-desc))))))
(export struct-_GApplicationCommandLine-desc)
(define-fh-compound-type/p struct-_GApplicationCommandLine struct-_GApplicationCommandLine-desc)
(set! GApplicationCommandLine-desc struct-_GApplicationCommandLine-desc)
(define-fh-compound-type GApplicationCommandLine GApplicationCommandLine-desc)

;; struct _GApplicationCommandLineClass {
;;   /*< private >*/
;;   GObjectClass parent_class;
;;   void (*print_literal)(GApplicationCommandLine *cmdline, const gchar *
;;       message);
;;   void (*printerr_literal)(GApplicationCommandLine *cmdline, const gchar *
;;       message);
;;   GInputStream *(*get_stdin)(GApplicationCommandLine *cmdline);
;;   gpointer padding[11];
;; };
(define struct-_GApplicationCommandLineClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(print_literal ,(bs:pointer void))
          `(printerr_literal ,(bs:pointer void))
          `(get_stdin ,(bs:pointer void))
          `(padding ,(bs:vector 11 gpointer-desc)))))
(export struct-_GApplicationCommandLineClass-desc)
(define-fh-compound-type/p struct-_GApplicationCommandLineClass struct-_GApplicationCommandLineClass-desc)
(set! GApplicationCommandLineClass-desc struct-_GApplicationCommandLineClass-desc)
(define-fh-compound-type GApplicationCommandLineClass GApplicationCommandLineClass-desc)

;; extern GType g_application_command_line_get_type(void);
(define ~g_application_command_line_get_type #f)
(define (g_application_command_line_get_type)
  (unless
    ~g_application_command_line_get_type
    (set! ~g_application_command_line_get_type
      (fh-link-proc
        "g_application_command_line_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_application_command_line_get_type)))
(export g_application_command_line_get_type)

;; extern gchar **g_application_command_line_get_arguments(
;;     GApplicationCommandLine *cmdline, int *argc);
(define ~g_application_command_line_get_arguments #f)
(define (g_application_command_line_get_arguments
         cmdline
         argc)
  (unless
    ~g_application_command_line_get_arguments
    (set! ~g_application_command_line_get_arguments
      (fh-link-proc
        "g_application_command_line_get_arguments"
        '*
        (list '* '*))))
  (let ((~cmdline
          (unwrap-GApplicationCommandLine* cmdline))
        (~argc (unwrap~pointer argc)))
    (~g_application_command_line_get_arguments
      ~cmdline
      ~argc)))
(export g_application_command_line_get_arguments)

;; extern GVariantDict *g_application_command_line_get_options_dict(
;;     GApplicationCommandLine *cmdline);
(define ~g_application_command_line_get_options_dict #f)
(define (g_application_command_line_get_options_dict
         cmdline)
  (unless
    ~g_application_command_line_get_options_dict
    (set! ~g_application_command_line_get_options_dict
      (fh-link-proc
        "g_application_command_line_get_options_dict"
        '*
        (list '*))))
  (let ((~cmdline
          (unwrap-GApplicationCommandLine* cmdline)))
    (~g_application_command_line_get_options_dict
      ~cmdline)))
(export g_application_command_line_get_options_dict)

;; extern GInputStream *g_application_command_line_get_stdin(
;;     GApplicationCommandLine *cmdline);
(define ~g_application_command_line_get_stdin #f)
(define (g_application_command_line_get_stdin cmdline)
  (unless
    ~g_application_command_line_get_stdin
    (set! ~g_application_command_line_get_stdin
      (fh-link-proc
        "g_application_command_line_get_stdin"
        '*
        (list '*))))
  (let ((~cmdline
          (unwrap-GApplicationCommandLine* cmdline)))
    (wrap-GInputStream*
      (~g_application_command_line_get_stdin ~cmdline))))
(export g_application_command_line_get_stdin)

;; extern const gchar *const*g_application_command_line_get_environ(
;;     GApplicationCommandLine *cmdline);
(define ~g_application_command_line_get_environ #f)
(define (g_application_command_line_get_environ cmdline)
  (unless
    ~g_application_command_line_get_environ
    (set! ~g_application_command_line_get_environ
      (fh-link-proc
        "g_application_command_line_get_environ"
        '*
        (list '*))))
  (let ((~cmdline
          (unwrap-GApplicationCommandLine* cmdline)))
    (~g_application_command_line_get_environ
      ~cmdline)))
(export g_application_command_line_get_environ)

;; extern const gchar *g_application_command_line_getenv(
;;     GApplicationCommandLine *cmdline, const gchar *name);
(define ~g_application_command_line_getenv #f)
(define (g_application_command_line_getenv cmdline name)
  (unless
    ~g_application_command_line_getenv
    (set! ~g_application_command_line_getenv
      (fh-link-proc
        "g_application_command_line_getenv"
        '*
        (list '* '*))))
  (let ((~cmdline
          (unwrap-GApplicationCommandLine* cmdline))
        (~name (unwrap~pointer name)))
    (~g_application_command_line_getenv
      ~cmdline
      ~name)))
(export g_application_command_line_getenv)

;; extern const gchar *g_application_command_line_get_cwd(
;;     GApplicationCommandLine *cmdline);
(define ~g_application_command_line_get_cwd #f)
(define (g_application_command_line_get_cwd cmdline)
  (unless
    ~g_application_command_line_get_cwd
    (set! ~g_application_command_line_get_cwd
      (fh-link-proc
        "g_application_command_line_get_cwd"
        '*
        (list '*))))
  (let ((~cmdline
          (unwrap-GApplicationCommandLine* cmdline)))
    (~g_application_command_line_get_cwd ~cmdline)))
(export g_application_command_line_get_cwd)

;; extern gboolean g_application_command_line_get_is_remote(
;;     GApplicationCommandLine *cmdline);
(define ~g_application_command_line_get_is_remote #f)
(define (g_application_command_line_get_is_remote
         cmdline)
  (unless
    ~g_application_command_line_get_is_remote
    (set! ~g_application_command_line_get_is_remote
      (fh-link-proc
        "g_application_command_line_get_is_remote"
        ffi:int
        (list '*))))
  (let ((~cmdline
          (unwrap-GApplicationCommandLine* cmdline)))
    (~g_application_command_line_get_is_remote
      ~cmdline)))
(export g_application_command_line_get_is_remote)

;; extern void g_application_command_line_print(GApplicationCommandLine *
;;     cmdline, const gchar *format, ...);
;; ... failed.

;; extern void g_application_command_line_printerr(GApplicationCommandLine *
;;     cmdline, const gchar *format, ...);
;; ... failed.

;; extern int g_application_command_line_get_exit_status(
;;     GApplicationCommandLine *cmdline);
(define ~g_application_command_line_get_exit_status #f)
(define (g_application_command_line_get_exit_status
         cmdline)
  (unless
    ~g_application_command_line_get_exit_status
    (set! ~g_application_command_line_get_exit_status
      (fh-link-proc
        "g_application_command_line_get_exit_status"
        ffi:int
        (list '*))))
  (let ((~cmdline
          (unwrap-GApplicationCommandLine* cmdline)))
    (~g_application_command_line_get_exit_status
      ~cmdline)))
(export g_application_command_line_get_exit_status)

;; extern void g_application_command_line_set_exit_status(
;;     GApplicationCommandLine *cmdline, int exit_status);
(define ~g_application_command_line_set_exit_status #f)
(define (g_application_command_line_set_exit_status
         cmdline
         exit_status)
  (unless
    ~g_application_command_line_set_exit_status
    (set! ~g_application_command_line_set_exit_status
      (fh-link-proc
        "g_application_command_line_set_exit_status"
        ffi:void
        (list '* ffi:int))))
  (let ((~cmdline
          (unwrap-GApplicationCommandLine* cmdline))
        (~exit_status (unwrap~fixed exit_status)))
    (~g_application_command_line_set_exit_status
      ~cmdline
      ~exit_status)))
(export g_application_command_line_set_exit_status)

;; extern GVariant *g_application_command_line_get_platform_data(
;;     GApplicationCommandLine *cmdline);
(define ~g_application_command_line_get_platform_data #f)
(define (g_application_command_line_get_platform_data
         cmdline)
  (unless
    ~g_application_command_line_get_platform_data
    (set! ~g_application_command_line_get_platform_data
      (fh-link-proc
        "g_application_command_line_get_platform_data"
        '*
        (list '*))))
  (let ((~cmdline
          (unwrap-GApplicationCommandLine* cmdline)))
    (~g_application_command_line_get_platform_data
      ~cmdline)))
(export g_application_command_line_get_platform_data)

;; extern GFile *g_application_command_line_create_file_for_arg(
;;     GApplicationCommandLine *cmdline, const gchar *arg);
(define ~g_application_command_line_create_file_for_arg #f)
(define (g_application_command_line_create_file_for_arg
         cmdline
         arg)
  (unless
    ~g_application_command_line_create_file_for_arg
    (set! ~g_application_command_line_create_file_for_arg
      (fh-link-proc
        "g_application_command_line_create_file_for_arg"
        '*
        (list '* '*))))
  (let ((~cmdline
          (unwrap-GApplicationCommandLine* cmdline))
        (~arg (unwrap~pointer arg)))
    (wrap-GFile*
      (~g_application_command_line_create_file_for_arg
        ~cmdline
        ~arg))))
(export g_application_command_line_create_file_for_arg)

;; typedef struct _GInitableIface GInitableIface;
(define GInitableIface-desc void)
(export GInitableIface-desc)
(define GInitableIface*-desc (bs:pointer (delay GInitableIface-desc)))
(export GInitableIface*-desc)
(define-fh-pointer-type GInitableIface* GInitableIface*-desc)

;; struct _GInitableIface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   gboolean (*init)(GInitable *initable, GCancellable *cancellable, GError **
;;       error);
;; };
(define struct-_GInitableIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(init ,(bs:pointer void)))))
(export struct-_GInitableIface-desc)
(define-fh-compound-type/p struct-_GInitableIface struct-_GInitableIface-desc)
(set! GInitableIface-desc struct-_GInitableIface-desc)
(define-fh-compound-type GInitableIface GInitableIface-desc)

;; extern GType g_initable_get_type(void);
(define ~g_initable_get_type #f)
(define (g_initable_get_type)
  (unless
    ~g_initable_get_type
    (set! ~g_initable_get_type
      (fh-link-proc
        "g_initable_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_initable_get_type)))
(export g_initable_get_type)

;; extern gboolean g_initable_init(GInitable *initable, GCancellable *
;;     cancellable, GError **error);
(define ~g_initable_init #f)
(define (g_initable_init initable cancellable error)
  (unless
    ~g_initable_init
    (set! ~g_initable_init
      (fh-link-proc
        "g_initable_init"
        ffi:int
        (list '* '* '*))))
  (let ((~initable (unwrap-GInitable* initable))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_initable_init ~initable ~cancellable ~error)))
(export g_initable_init)

;; extern gpointer g_initable_new(GType object_type, GCancellable *cancellable
;;     , GError **error, const gchar *first_property_name, ...);
;; ... failed.

;; extern gpointer g_initable_newv(GType object_type, guint n_parameters, 
;;     GParameter *parameters, GCancellable *cancellable, GError **error);
(define ~g_initable_newv #f)
(define (g_initable_newv
         object_type
         n_parameters
         parameters
         cancellable
         error)
  (unless
    ~g_initable_newv
    (set! ~g_initable_newv
      (fh-link-proc
        "g_initable_newv"
        '*
        (list ffi:unsigned-long
              ffi:unsigned-int
              '*
              '*
              '*))))
  (let ((~object_type (unwrap~fixed object_type))
        (~n_parameters (unwrap~fixed n_parameters))
        (~parameters (unwrap~pointer parameters))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-gpointer
      (~g_initable_newv
        ~object_type
        ~n_parameters
        ~parameters
        ~cancellable
        ~error))))
(export g_initable_newv)

;; extern GObject *g_initable_new_valist(GType object_type, const gchar *
;;     first_property_name, va_list var_args, GCancellable *cancellable, GError
;;      **error);
(define ~g_initable_new_valist #f)
(define (g_initable_new_valist
         object_type
         first_property_name
         var_args
         cancellable
         error)
  (unless
    ~g_initable_new_valist
    (set! ~g_initable_new_valist
      (fh-link-proc
        "g_initable_new_valist"
        '*
        (list ffi:unsigned-long '* '* '* '*))))
  (let ((~object_type (unwrap~fixed object_type))
        (~first_property_name
          (unwrap~pointer first_property_name))
        (~var_args (unwrap~pointer var_args))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_initable_new_valist
      ~object_type
      ~first_property_name
      ~var_args
      ~cancellable
      ~error)))
(export g_initable_new_valist)

;; typedef struct _GAsyncInitableIface GAsyncInitableIface;
(define GAsyncInitableIface-desc void)
(export GAsyncInitableIface-desc)
(define GAsyncInitableIface*-desc (bs:pointer (delay GAsyncInitableIface-desc)))
(export GAsyncInitableIface*-desc)
(define-fh-pointer-type GAsyncInitableIface* GAsyncInitableIface*-desc)

;; struct _GAsyncInitableIface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   void (*init_async)(GAsyncInitable *initable, int io_priority, GCancellable
;;        *cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*init_finish)(GAsyncInitable *initable, GAsyncResult *res, 
;;       GError **error);
;; };
(define struct-_GAsyncInitableIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(init_async ,(bs:pointer void))
          `(init_finish ,(bs:pointer void)))))
(export struct-_GAsyncInitableIface-desc)
(define-fh-compound-type/p struct-_GAsyncInitableIface struct-_GAsyncInitableIface-desc)
(set! GAsyncInitableIface-desc struct-_GAsyncInitableIface-desc)
(define-fh-compound-type GAsyncInitableIface GAsyncInitableIface-desc)

;; extern GType g_async_initable_get_type(void);
(define ~g_async_initable_get_type #f)
(define (g_async_initable_get_type)
  (unless
    ~g_async_initable_get_type
    (set! ~g_async_initable_get_type
      (fh-link-proc
        "g_async_initable_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_async_initable_get_type)))
(export g_async_initable_get_type)

;; extern void g_async_initable_init_async(GAsyncInitable *initable, int 
;;     io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_async_initable_init_async #f)
(define (g_async_initable_init_async
         initable
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_async_initable_init_async
    (set! ~g_async_initable_init_async
      (fh-link-proc
        "g_async_initable_init_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~initable (unwrap-GAsyncInitable* initable))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_async_initable_init_async
      ~initable
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_async_initable_init_async)

;; extern gboolean g_async_initable_init_finish(GAsyncInitable *initable, 
;;     GAsyncResult *res, GError **error);
(define ~g_async_initable_init_finish #f)
(define (g_async_initable_init_finish initable res error)
  (unless
    ~g_async_initable_init_finish
    (set! ~g_async_initable_init_finish
      (fh-link-proc
        "g_async_initable_init_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~initable (unwrap-GAsyncInitable* initable))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (~g_async_initable_init_finish
      ~initable
      ~res
      ~error)))
(export g_async_initable_init_finish)

;; extern void g_async_initable_new_async(GType object_type, int io_priority, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data, const gchar *first_property_name, ...);
;; ... failed.

;; extern void g_async_initable_newv_async(GType object_type, guint 
;;     n_parameters, GParameter *parameters, int io_priority, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_async_initable_newv_async #f)
(define (g_async_initable_newv_async
         object_type
         n_parameters
         parameters
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_async_initable_newv_async
    (set! ~g_async_initable_newv_async
      (fh-link-proc
        "g_async_initable_newv_async"
        ffi:void
        (list ffi:unsigned-long
              ffi:unsigned-int
              '*
              ffi:int
              '*
              '*
              '*))))
  (let ((~object_type (unwrap~fixed object_type))
        (~n_parameters (unwrap~fixed n_parameters))
        (~parameters (unwrap~pointer parameters))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_async_initable_newv_async
      ~object_type
      ~n_parameters
      ~parameters
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_async_initable_newv_async)

;; extern void g_async_initable_new_valist_async(GType object_type, const gchar
;;      *first_property_name, va_list var_args, int io_priority, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_async_initable_new_valist_async #f)
(define (g_async_initable_new_valist_async
         object_type
         first_property_name
         var_args
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_async_initable_new_valist_async
    (set! ~g_async_initable_new_valist_async
      (fh-link-proc
        "g_async_initable_new_valist_async"
        ffi:void
        (list ffi:unsigned-long '* '* ffi:int '* '* '*))))
  (let ((~object_type (unwrap~fixed object_type))
        (~first_property_name
          (unwrap~pointer first_property_name))
        (~var_args (unwrap~pointer var_args))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_async_initable_new_valist_async
      ~object_type
      ~first_property_name
      ~var_args
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_async_initable_new_valist_async)

;; extern GObject *g_async_initable_new_finish(GAsyncInitable *initable, 
;;     GAsyncResult *res, GError **error);
(define ~g_async_initable_new_finish #f)
(define (g_async_initable_new_finish initable res error)
  (unless
    ~g_async_initable_new_finish
    (set! ~g_async_initable_new_finish
      (fh-link-proc
        "g_async_initable_new_finish"
        '*
        (list '* '* '*))))
  (let ((~initable (unwrap-GAsyncInitable* initable))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (~g_async_initable_new_finish
      ~initable
      ~res
      ~error)))
(export g_async_initable_new_finish)

;; typedef struct _GAsyncResultIface GAsyncResultIface;
(define GAsyncResultIface-desc void)
(export GAsyncResultIface-desc)
(define GAsyncResultIface*-desc (bs:pointer (delay GAsyncResultIface-desc)))
(export GAsyncResultIface*-desc)
(define-fh-pointer-type GAsyncResultIface* GAsyncResultIface*-desc)

;; struct _GAsyncResultIface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   gpointer (*get_user_data)(GAsyncResult *res);
;;   GObject *(*get_source_object)(GAsyncResult *res);
;;   gboolean (*is_tagged)(GAsyncResult *res, gpointer source_tag);
;; };
(define struct-_GAsyncResultIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(get_user_data ,(bs:pointer void))
          `(get_source_object ,(bs:pointer void))
          `(is_tagged ,(bs:pointer void)))))
(export struct-_GAsyncResultIface-desc)
(define-fh-compound-type/p struct-_GAsyncResultIface struct-_GAsyncResultIface-desc)
(set! GAsyncResultIface-desc struct-_GAsyncResultIface-desc)
(define-fh-compound-type GAsyncResultIface GAsyncResultIface-desc)

;; extern GType g_async_result_get_type(void);
(define ~g_async_result_get_type #f)
(define (g_async_result_get_type)
  (unless
    ~g_async_result_get_type
    (set! ~g_async_result_get_type
      (fh-link-proc
        "g_async_result_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_async_result_get_type)))
(export g_async_result_get_type)

;; extern gpointer g_async_result_get_user_data(GAsyncResult *res);
(define ~g_async_result_get_user_data #f)
(define (g_async_result_get_user_data res)
  (unless
    ~g_async_result_get_user_data
    (set! ~g_async_result_get_user_data
      (fh-link-proc
        "g_async_result_get_user_data"
        '*
        (list '*))))
  (let ((~res (unwrap-GAsyncResult* res)))
    (wrap-gpointer
      (~g_async_result_get_user_data ~res))))
(export g_async_result_get_user_data)

;; extern GObject *g_async_result_get_source_object(GAsyncResult *res);
(define ~g_async_result_get_source_object #f)
(define (g_async_result_get_source_object res)
  (unless
    ~g_async_result_get_source_object
    (set! ~g_async_result_get_source_object
      (fh-link-proc
        "g_async_result_get_source_object"
        '*
        (list '*))))
  (let ((~res (unwrap-GAsyncResult* res)))
    (~g_async_result_get_source_object ~res)))
(export g_async_result_get_source_object)

;; extern gboolean g_async_result_legacy_propagate_error(GAsyncResult *res, 
;;     GError **error);
(define ~g_async_result_legacy_propagate_error #f)
(define (g_async_result_legacy_propagate_error res error)
  (unless
    ~g_async_result_legacy_propagate_error
    (set! ~g_async_result_legacy_propagate_error
      (fh-link-proc
        "g_async_result_legacy_propagate_error"
        ffi:int
        (list '* '*))))
  (let ((~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (~g_async_result_legacy_propagate_error
      ~res
      ~error)))
(export g_async_result_legacy_propagate_error)

;; extern gboolean g_async_result_is_tagged(GAsyncResult *res, gpointer 
;;     source_tag);
(define ~g_async_result_is_tagged #f)
(define (g_async_result_is_tagged res source_tag)
  (unless
    ~g_async_result_is_tagged
    (set! ~g_async_result_is_tagged
      (fh-link-proc
        "g_async_result_is_tagged"
        ffi:int
        (list '* '*))))
  (let ((~res (unwrap-GAsyncResult* res))
        (~source_tag (unwrap-gpointer source_tag)))
    (~g_async_result_is_tagged ~res ~source_tag)))
(export g_async_result_is_tagged)

;; typedef struct _GInputStreamClass GInputStreamClass;
(define GInputStreamClass-desc void)
(export GInputStreamClass-desc)
(define GInputStreamClass*-desc (bs:pointer (delay GInputStreamClass-desc)))
(export GInputStreamClass*-desc)
(define-fh-pointer-type GInputStreamClass* GInputStreamClass*-desc)

;; typedef struct _GInputStreamPrivate GInputStreamPrivate;
(define GInputStreamPrivate-desc void)
(export GInputStreamPrivate-desc)
(define GInputStreamPrivate*-desc (bs:pointer GInputStreamPrivate-desc))
(export GInputStreamPrivate*-desc)
(define-fh-pointer-type GInputStreamPrivate* GInputStreamPrivate*-desc)

;; struct _GInputStream {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GInputStreamPrivate *priv;
;; };
(define struct-_GInputStream-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GInputStreamPrivate*-desc))))))
(export struct-_GInputStream-desc)
(define-fh-compound-type/p struct-_GInputStream struct-_GInputStream-desc)
(set! GInputStream-desc struct-_GInputStream-desc)
(define-fh-compound-type GInputStream GInputStream-desc)

;; struct _GInputStreamClass {
;;   GObjectClass parent_class;
;;   /* Sync ops: */
;;   gssize (*read_fn)(GInputStream *stream, void *buffer, gsize count, 
;;       GCancellable *cancellable, GError **error);
;;   gssize (*skip)(GInputStream *stream, gsize count, GCancellable *
;;       cancellable, GError **error);
;;   gboolean (*close_fn)(GInputStream *stream, GCancellable *cancellable, 
;;       GError **error);
;;   /* Async ops: (optional in derived classes) */
;;   void (*read_async)(GInputStream *stream, void *buffer, gsize count, int 
;;       io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;       gpointer user_data);
;;   gssize (*read_finish)(GInputStream *stream, GAsyncResult *result, GError *
;;       *error);
;;   void (*skip_async)(GInputStream *stream, gsize count, int io_priority, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   gssize (*skip_finish)(GInputStream *stream, GAsyncResult *result, GError *
;;       *error);
;;   void (*close_async)(GInputStream *stream, int io_priority, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*close_finish)(GInputStream *stream, GAsyncResult *result, 
;;       GError **error);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GInputStreamClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(read_fn ,(bs:pointer void))
          `(skip ,(bs:pointer void))
          `(close_fn ,(bs:pointer void))
          `(read_async ,(bs:pointer void))
          `(read_finish ,(bs:pointer void))
          `(skip_async ,(bs:pointer void))
          `(skip_finish ,(bs:pointer void))
          `(close_async ,(bs:pointer void))
          `(close_finish ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GInputStreamClass-desc)
(define-fh-compound-type/p struct-_GInputStreamClass struct-_GInputStreamClass-desc)
(set! GInputStreamClass-desc struct-_GInputStreamClass-desc)
(define-fh-compound-type GInputStreamClass GInputStreamClass-desc)

;; extern GType g_input_stream_get_type(void);
(define ~g_input_stream_get_type #f)
(define (g_input_stream_get_type)
  (unless
    ~g_input_stream_get_type
    (set! ~g_input_stream_get_type
      (fh-link-proc
        "g_input_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_input_stream_get_type)))
(export g_input_stream_get_type)

;; extern gssize g_input_stream_read(GInputStream *stream, void *buffer, gsize 
;;     count, GCancellable *cancellable, GError **error);
(define ~g_input_stream_read #f)
(define (g_input_stream_read
         stream
         buffer
         count
         cancellable
         error)
  (unless
    ~g_input_stream_read
    (set! ~g_input_stream_read
      (fh-link-proc
        "g_input_stream_read"
        ffi:long
        (list '* '* ffi:unsigned-long '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_input_stream_read
      ~stream
      ~buffer
      ~count
      ~cancellable
      ~error)))
(export g_input_stream_read)

;; extern gboolean g_input_stream_read_all(GInputStream *stream, void *buffer, 
;;     gsize count, gsize *bytes_read, GCancellable *cancellable, GError **
;;     error);
(define ~g_input_stream_read_all #f)
(define (g_input_stream_read_all
         stream
         buffer
         count
         bytes_read
         cancellable
         error)
  (unless
    ~g_input_stream_read_all
    (set! ~g_input_stream_read_all
      (fh-link-proc
        "g_input_stream_read_all"
        ffi:int
        (list '* '* ffi:unsigned-long '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~bytes_read (unwrap~pointer bytes_read))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_input_stream_read_all
      ~stream
      ~buffer
      ~count
      ~bytes_read
      ~cancellable
      ~error)))
(export g_input_stream_read_all)

;; extern GBytes *g_input_stream_read_bytes(GInputStream *stream, gsize count, 
;;     GCancellable *cancellable, GError **error);
(define ~g_input_stream_read_bytes #f)
(define (g_input_stream_read_bytes
         stream
         count
         cancellable
         error)
  (unless
    ~g_input_stream_read_bytes
    (set! ~g_input_stream_read_bytes
      (fh-link-proc
        "g_input_stream_read_bytes"
        '*
        (list '* ffi:unsigned-long '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~count (unwrap~fixed count))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_input_stream_read_bytes
      ~stream
      ~count
      ~cancellable
      ~error)))
(export g_input_stream_read_bytes)

;; extern gssize g_input_stream_skip(GInputStream *stream, gsize count, 
;;     GCancellable *cancellable, GError **error);
(define ~g_input_stream_skip #f)
(define (g_input_stream_skip
         stream
         count
         cancellable
         error)
  (unless
    ~g_input_stream_skip
    (set! ~g_input_stream_skip
      (fh-link-proc
        "g_input_stream_skip"
        ffi:long
        (list '* ffi:unsigned-long '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~count (unwrap~fixed count))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_input_stream_skip
      ~stream
      ~count
      ~cancellable
      ~error)))
(export g_input_stream_skip)

;; extern gboolean g_input_stream_close(GInputStream *stream, GCancellable *
;;     cancellable, GError **error);
(define ~g_input_stream_close #f)
(define (g_input_stream_close stream cancellable error)
  (unless
    ~g_input_stream_close
    (set! ~g_input_stream_close
      (fh-link-proc
        "g_input_stream_close"
        ffi:int
        (list '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_input_stream_close
      ~stream
      ~cancellable
      ~error)))
(export g_input_stream_close)

;; extern void g_input_stream_read_async(GInputStream *stream, void *buffer, 
;;     gsize count, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_input_stream_read_async #f)
(define (g_input_stream_read_async
         stream
         buffer
         count
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_input_stream_read_async
    (set! ~g_input_stream_read_async
      (fh-link-proc
        "g_input_stream_read_async"
        ffi:void
        (list '* '* ffi:unsigned-long ffi:int '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_input_stream_read_async
      ~stream
      ~buffer
      ~count
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_input_stream_read_async)

;; extern gssize g_input_stream_read_finish(GInputStream *stream, GAsyncResult 
;;     *result, GError **error);
(define ~g_input_stream_read_finish #f)
(define (g_input_stream_read_finish stream result error)
  (unless
    ~g_input_stream_read_finish
    (set! ~g_input_stream_read_finish
      (fh-link-proc
        "g_input_stream_read_finish"
        ffi:long
        (list '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_input_stream_read_finish
      ~stream
      ~result
      ~error)))
(export g_input_stream_read_finish)

;; extern void g_input_stream_read_all_async(GInputStream *stream, void *buffer
;;     , gsize count, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_input_stream_read_all_async #f)
(define (g_input_stream_read_all_async
         stream
         buffer
         count
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_input_stream_read_all_async
    (set! ~g_input_stream_read_all_async
      (fh-link-proc
        "g_input_stream_read_all_async"
        ffi:void
        (list '* '* ffi:unsigned-long ffi:int '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_input_stream_read_all_async
      ~stream
      ~buffer
      ~count
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_input_stream_read_all_async)

;; extern gboolean g_input_stream_read_all_finish(GInputStream *stream, 
;;     GAsyncResult *result, gsize *bytes_read, GError **error);
(define ~g_input_stream_read_all_finish #f)
(define (g_input_stream_read_all_finish
         stream
         result
         bytes_read
         error)
  (unless
    ~g_input_stream_read_all_finish
    (set! ~g_input_stream_read_all_finish
      (fh-link-proc
        "g_input_stream_read_all_finish"
        ffi:int
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~bytes_read (unwrap~pointer bytes_read))
        (~error (unwrap~pointer error)))
    (~g_input_stream_read_all_finish
      ~stream
      ~result
      ~bytes_read
      ~error)))
(export g_input_stream_read_all_finish)

;; extern void g_input_stream_read_bytes_async(GInputStream *stream, gsize 
;;     count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback 
;;     callback, gpointer user_data);
(define ~g_input_stream_read_bytes_async #f)
(define (g_input_stream_read_bytes_async
         stream
         count
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_input_stream_read_bytes_async
    (set! ~g_input_stream_read_bytes_async
      (fh-link-proc
        "g_input_stream_read_bytes_async"
        ffi:void
        (list '* ffi:unsigned-long ffi:int '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~count (unwrap~fixed count))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_input_stream_read_bytes_async
      ~stream
      ~count
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_input_stream_read_bytes_async)

;; extern GBytes *g_input_stream_read_bytes_finish(GInputStream *stream, 
;;     GAsyncResult *result, GError **error);
(define ~g_input_stream_read_bytes_finish #f)
(define (g_input_stream_read_bytes_finish
         stream
         result
         error)
  (unless
    ~g_input_stream_read_bytes_finish
    (set! ~g_input_stream_read_bytes_finish
      (fh-link-proc
        "g_input_stream_read_bytes_finish"
        '*
        (list '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_input_stream_read_bytes_finish
      ~stream
      ~result
      ~error)))
(export g_input_stream_read_bytes_finish)

;; extern void g_input_stream_skip_async(GInputStream *stream, gsize count, int
;;      io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_input_stream_skip_async #f)
(define (g_input_stream_skip_async
         stream
         count
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_input_stream_skip_async
    (set! ~g_input_stream_skip_async
      (fh-link-proc
        "g_input_stream_skip_async"
        ffi:void
        (list '* ffi:unsigned-long ffi:int '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~count (unwrap~fixed count))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_input_stream_skip_async
      ~stream
      ~count
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_input_stream_skip_async)

;; extern gssize g_input_stream_skip_finish(GInputStream *stream, GAsyncResult 
;;     *result, GError **error);
(define ~g_input_stream_skip_finish #f)
(define (g_input_stream_skip_finish stream result error)
  (unless
    ~g_input_stream_skip_finish
    (set! ~g_input_stream_skip_finish
      (fh-link-proc
        "g_input_stream_skip_finish"
        ffi:long
        (list '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_input_stream_skip_finish
      ~stream
      ~result
      ~error)))
(export g_input_stream_skip_finish)

;; extern void g_input_stream_close_async(GInputStream *stream, int io_priority
;;     , GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_input_stream_close_async #f)
(define (g_input_stream_close_async
         stream
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_input_stream_close_async
    (set! ~g_input_stream_close_async
      (fh-link-proc
        "g_input_stream_close_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_input_stream_close_async
      ~stream
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_input_stream_close_async)

;; extern gboolean g_input_stream_close_finish(GInputStream *stream, 
;;     GAsyncResult *result, GError **error);
(define ~g_input_stream_close_finish #f)
(define (g_input_stream_close_finish stream result error)
  (unless
    ~g_input_stream_close_finish
    (set! ~g_input_stream_close_finish
      (fh-link-proc
        "g_input_stream_close_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_input_stream_close_finish
      ~stream
      ~result
      ~error)))
(export g_input_stream_close_finish)

;; extern gboolean g_input_stream_is_closed(GInputStream *stream);
(define ~g_input_stream_is_closed #f)
(define (g_input_stream_is_closed stream)
  (unless
    ~g_input_stream_is_closed
    (set! ~g_input_stream_is_closed
      (fh-link-proc
        "g_input_stream_is_closed"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GInputStream* stream)))
    (~g_input_stream_is_closed ~stream)))
(export g_input_stream_is_closed)

;; extern gboolean g_input_stream_has_pending(GInputStream *stream);
(define ~g_input_stream_has_pending #f)
(define (g_input_stream_has_pending stream)
  (unless
    ~g_input_stream_has_pending
    (set! ~g_input_stream_has_pending
      (fh-link-proc
        "g_input_stream_has_pending"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GInputStream* stream)))
    (~g_input_stream_has_pending ~stream)))
(export g_input_stream_has_pending)

;; extern gboolean g_input_stream_set_pending(GInputStream *stream, GError **
;;     error);
(define ~g_input_stream_set_pending #f)
(define (g_input_stream_set_pending stream error)
  (unless
    ~g_input_stream_set_pending
    (set! ~g_input_stream_set_pending
      (fh-link-proc
        "g_input_stream_set_pending"
        ffi:int
        (list '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~error (unwrap~pointer error)))
    (~g_input_stream_set_pending ~stream ~error)))
(export g_input_stream_set_pending)

;; extern void g_input_stream_clear_pending(GInputStream *stream);
(define ~g_input_stream_clear_pending #f)
(define (g_input_stream_clear_pending stream)
  (unless
    ~g_input_stream_clear_pending
    (set! ~g_input_stream_clear_pending
      (fh-link-proc
        "g_input_stream_clear_pending"
        ffi:void
        (list '*))))
  (let ((~stream (unwrap-GInputStream* stream)))
    (~g_input_stream_clear_pending ~stream)))
(export g_input_stream_clear_pending)

;; typedef struct _GFilterInputStreamClass GFilterInputStreamClass;
(define GFilterInputStreamClass-desc void)
(export GFilterInputStreamClass-desc)
(define GFilterInputStreamClass*-desc (bs:pointer (delay GFilterInputStreamClass-desc)))
(export GFilterInputStreamClass*-desc)
(define-fh-pointer-type GFilterInputStreamClass* GFilterInputStreamClass*-desc)

;; struct _GFilterInputStream {
;;   GInputStream parent_instance;
;;   /*<protected >*/
;;   GInputStream *base_stream;
;; };
(define struct-_GFilterInputStream-desc
  (bs:struct
    (list `(parent_instance ,GInputStream-desc)
          `(base_stream
             ,(bs:pointer (delay GInputStream*-desc))))))
(export struct-_GFilterInputStream-desc)
(define-fh-compound-type/p struct-_GFilterInputStream struct-_GFilterInputStream-desc)
(set! GFilterInputStream-desc struct-_GFilterInputStream-desc)
(define-fh-compound-type GFilterInputStream GFilterInputStream-desc)

;; struct _GFilterInputStreamClass {
;;   GInputStreamClass parent_class;
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;; };
(define struct-_GFilterInputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GInputStreamClass-desc)
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void)))))
(export struct-_GFilterInputStreamClass-desc)
(define-fh-compound-type/p struct-_GFilterInputStreamClass struct-_GFilterInputStreamClass-desc)
(set! GFilterInputStreamClass-desc struct-_GFilterInputStreamClass-desc)
(define-fh-compound-type GFilterInputStreamClass GFilterInputStreamClass-desc)

;; extern GType g_filter_input_stream_get_type(void);
(define ~g_filter_input_stream_get_type #f)
(define (g_filter_input_stream_get_type)
  (unless
    ~g_filter_input_stream_get_type
    (set! ~g_filter_input_stream_get_type
      (fh-link-proc
        "g_filter_input_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_filter_input_stream_get_type)))
(export g_filter_input_stream_get_type)

;; extern GInputStream *g_filter_input_stream_get_base_stream(
;;     GFilterInputStream *stream);
(define ~g_filter_input_stream_get_base_stream #f)
(define (g_filter_input_stream_get_base_stream stream)
  (unless
    ~g_filter_input_stream_get_base_stream
    (set! ~g_filter_input_stream_get_base_stream
      (fh-link-proc
        "g_filter_input_stream_get_base_stream"
        '*
        (list '*))))
  (let ((~stream (unwrap-GFilterInputStream* stream)))
    (wrap-GInputStream*
      (~g_filter_input_stream_get_base_stream ~stream))))
(export g_filter_input_stream_get_base_stream)

;; extern gboolean g_filter_input_stream_get_close_base_stream(
;;     GFilterInputStream *stream);
(define ~g_filter_input_stream_get_close_base_stream #f)
(define (g_filter_input_stream_get_close_base_stream
         stream)
  (unless
    ~g_filter_input_stream_get_close_base_stream
    (set! ~g_filter_input_stream_get_close_base_stream
      (fh-link-proc
        "g_filter_input_stream_get_close_base_stream"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GFilterInputStream* stream)))
    (~g_filter_input_stream_get_close_base_stream
      ~stream)))
(export g_filter_input_stream_get_close_base_stream)

;; extern void g_filter_input_stream_set_close_base_stream(GFilterInputStream *
;;     stream, gboolean close_base);
(define ~g_filter_input_stream_set_close_base_stream #f)
(define (g_filter_input_stream_set_close_base_stream
         stream
         close_base)
  (unless
    ~g_filter_input_stream_set_close_base_stream
    (set! ~g_filter_input_stream_set_close_base_stream
      (fh-link-proc
        "g_filter_input_stream_set_close_base_stream"
        ffi:void
        (list '* ffi:int))))
  (let ((~stream (unwrap-GFilterInputStream* stream))
        (~close_base (unwrap~fixed close_base)))
    (~g_filter_input_stream_set_close_base_stream
      ~stream
      ~close_base)))
(export g_filter_input_stream_set_close_base_stream)

;; typedef struct _GBufferedInputStreamClass GBufferedInputStreamClass;
(define GBufferedInputStreamClass-desc void)
(export GBufferedInputStreamClass-desc)
(define GBufferedInputStreamClass*-desc (bs:pointer (delay GBufferedInputStreamClass-desc)))
(export GBufferedInputStreamClass*-desc)
(define-fh-pointer-type GBufferedInputStreamClass* GBufferedInputStreamClass*-desc)

;; typedef struct _GBufferedInputStreamPrivate GBufferedInputStreamPrivate;
(define GBufferedInputStreamPrivate-desc void)
(export GBufferedInputStreamPrivate-desc)
(define GBufferedInputStreamPrivate*-desc (bs:pointer GBufferedInputStreamPrivate-desc))
(export GBufferedInputStreamPrivate*-desc)
(define-fh-pointer-type GBufferedInputStreamPrivate* GBufferedInputStreamPrivate*-desc)

;; struct _GBufferedInputStream {
;;   GFilterInputStream parent_instance;
;;   /*< private >*/
;;   GBufferedInputStreamPrivate *priv;
;; };
(define struct-_GBufferedInputStream-desc
  (bs:struct
    (list `(parent_instance ,GFilterInputStream-desc)
          `(priv ,(bs:pointer
                    (delay GBufferedInputStreamPrivate*-desc))))))
(export struct-_GBufferedInputStream-desc)
(define-fh-compound-type/p struct-_GBufferedInputStream struct-_GBufferedInputStream-desc)
(set! GBufferedInputStream-desc struct-_GBufferedInputStream-desc)
(define-fh-compound-type GBufferedInputStream GBufferedInputStream-desc)

;; struct _GBufferedInputStreamClass {
;;   GFilterInputStreamClass parent_class;
;;   gssize (*fill)(GBufferedInputStream *stream, gssize count, GCancellable *
;;       cancellable, GError **error);
;;   /* Async ops: (optional in derived classes) */
;;   void (*fill_async)(GBufferedInputStream *stream, gssize count, int 
;;       io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;       gpointer user_data);
;;   gssize (*fill_finish)(GBufferedInputStream *stream, GAsyncResult *result, 
;;       GError **error);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GBufferedInputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GFilterInputStreamClass-desc)
          `(fill ,(bs:pointer void))
          `(fill_async ,(bs:pointer void))
          `(fill_finish ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GBufferedInputStreamClass-desc)
(define-fh-compound-type/p struct-_GBufferedInputStreamClass struct-_GBufferedInputStreamClass-desc)
(set! GBufferedInputStreamClass-desc struct-_GBufferedInputStreamClass-desc)
(define-fh-compound-type GBufferedInputStreamClass GBufferedInputStreamClass-desc)

;; extern GType g_buffered_input_stream_get_type(void);
(define ~g_buffered_input_stream_get_type #f)
(define (g_buffered_input_stream_get_type)
  (unless
    ~g_buffered_input_stream_get_type
    (set! ~g_buffered_input_stream_get_type
      (fh-link-proc
        "g_buffered_input_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_buffered_input_stream_get_type)))
(export g_buffered_input_stream_get_type)

;; extern GInputStream *g_buffered_input_stream_new(GInputStream *base_stream)
;;     ;
(define ~g_buffered_input_stream_new #f)
(define (g_buffered_input_stream_new base_stream)
  (unless
    ~g_buffered_input_stream_new
    (set! ~g_buffered_input_stream_new
      (fh-link-proc
        "g_buffered_input_stream_new"
        '*
        (list '*))))
  (let ((~base_stream (unwrap-GInputStream* base_stream)))
    (wrap-GInputStream*
      (~g_buffered_input_stream_new ~base_stream))))
(export g_buffered_input_stream_new)

;; extern GInputStream *g_buffered_input_stream_new_sized(GInputStream *
;;     base_stream, gsize size);
(define ~g_buffered_input_stream_new_sized #f)
(define (g_buffered_input_stream_new_sized
         base_stream
         size)
  (unless
    ~g_buffered_input_stream_new_sized
    (set! ~g_buffered_input_stream_new_sized
      (fh-link-proc
        "g_buffered_input_stream_new_sized"
        '*
        (list '* ffi:unsigned-long))))
  (let ((~base_stream (unwrap-GInputStream* base_stream))
        (~size (unwrap~fixed size)))
    (wrap-GInputStream*
      (~g_buffered_input_stream_new_sized
        ~base_stream
        ~size))))
(export g_buffered_input_stream_new_sized)

;; extern gsize g_buffered_input_stream_get_buffer_size(GBufferedInputStream *
;;     stream);
(define ~g_buffered_input_stream_get_buffer_size #f)
(define (g_buffered_input_stream_get_buffer_size stream)
  (unless
    ~g_buffered_input_stream_get_buffer_size
    (set! ~g_buffered_input_stream_get_buffer_size
      (fh-link-proc
        "g_buffered_input_stream_get_buffer_size"
        ffi:unsigned-long
        (list '*))))
  (let ((~stream (unwrap-GBufferedInputStream* stream)))
    (~g_buffered_input_stream_get_buffer_size
      ~stream)))
(export g_buffered_input_stream_get_buffer_size)

;; extern void g_buffered_input_stream_set_buffer_size(GBufferedInputStream *
;;     stream, gsize size);
(define ~g_buffered_input_stream_set_buffer_size #f)
(define (g_buffered_input_stream_set_buffer_size
         stream
         size)
  (unless
    ~g_buffered_input_stream_set_buffer_size
    (set! ~g_buffered_input_stream_set_buffer_size
      (fh-link-proc
        "g_buffered_input_stream_set_buffer_size"
        ffi:void
        (list '* ffi:unsigned-long))))
  (let ((~stream (unwrap-GBufferedInputStream* stream))
        (~size (unwrap~fixed size)))
    (~g_buffered_input_stream_set_buffer_size
      ~stream
      ~size)))
(export g_buffered_input_stream_set_buffer_size)

;; extern gsize g_buffered_input_stream_get_available(GBufferedInputStream *
;;     stream);
(define ~g_buffered_input_stream_get_available #f)
(define (g_buffered_input_stream_get_available stream)
  (unless
    ~g_buffered_input_stream_get_available
    (set! ~g_buffered_input_stream_get_available
      (fh-link-proc
        "g_buffered_input_stream_get_available"
        ffi:unsigned-long
        (list '*))))
  (let ((~stream (unwrap-GBufferedInputStream* stream)))
    (~g_buffered_input_stream_get_available ~stream)))
(export g_buffered_input_stream_get_available)

;; extern gsize g_buffered_input_stream_peek(GBufferedInputStream *stream, void
;;      *buffer, gsize offset, gsize count);
(define ~g_buffered_input_stream_peek #f)
(define (g_buffered_input_stream_peek
         stream
         buffer
         offset
         count)
  (unless
    ~g_buffered_input_stream_peek
    (set! ~g_buffered_input_stream_peek
      (fh-link-proc
        "g_buffered_input_stream_peek"
        ffi:unsigned-long
        (list '* '* ffi:unsigned-long ffi:unsigned-long))))
  (let ((~stream (unwrap-GBufferedInputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~offset (unwrap~fixed offset))
        (~count (unwrap~fixed count)))
    (~g_buffered_input_stream_peek
      ~stream
      ~buffer
      ~offset
      ~count)))
(export g_buffered_input_stream_peek)

;; extern const void *g_buffered_input_stream_peek_buffer(GBufferedInputStream 
;;     *stream, gsize *count);
(define ~g_buffered_input_stream_peek_buffer #f)
(define (g_buffered_input_stream_peek_buffer
         stream
         count)
  (unless
    ~g_buffered_input_stream_peek_buffer
    (set! ~g_buffered_input_stream_peek_buffer
      (fh-link-proc
        "g_buffered_input_stream_peek_buffer"
        '*
        (list '* '*))))
  (let ((~stream (unwrap-GBufferedInputStream* stream))
        (~count (unwrap~pointer count)))
    (~g_buffered_input_stream_peek_buffer
      ~stream
      ~count)))
(export g_buffered_input_stream_peek_buffer)

;; extern gssize g_buffered_input_stream_fill(GBufferedInputStream *stream, 
;;     gssize count, GCancellable *cancellable, GError **error);
(define ~g_buffered_input_stream_fill #f)
(define (g_buffered_input_stream_fill
         stream
         count
         cancellable
         error)
  (unless
    ~g_buffered_input_stream_fill
    (set! ~g_buffered_input_stream_fill
      (fh-link-proc
        "g_buffered_input_stream_fill"
        ffi:long
        (list '* ffi:long '* '*))))
  (let ((~stream (unwrap-GBufferedInputStream* stream))
        (~count (unwrap~fixed count))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_buffered_input_stream_fill
      ~stream
      ~count
      ~cancellable
      ~error)))
(export g_buffered_input_stream_fill)

;; extern void g_buffered_input_stream_fill_async(GBufferedInputStream *stream
;;     , gssize count, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_buffered_input_stream_fill_async #f)
(define (g_buffered_input_stream_fill_async
         stream
         count
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_buffered_input_stream_fill_async
    (set! ~g_buffered_input_stream_fill_async
      (fh-link-proc
        "g_buffered_input_stream_fill_async"
        ffi:void
        (list '* ffi:long ffi:int '* '* '*))))
  (let ((~stream (unwrap-GBufferedInputStream* stream))
        (~count (unwrap~fixed count))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_buffered_input_stream_fill_async
      ~stream
      ~count
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_buffered_input_stream_fill_async)

;; extern gssize g_buffered_input_stream_fill_finish(GBufferedInputStream *
;;     stream, GAsyncResult *result, GError **error);
(define ~g_buffered_input_stream_fill_finish #f)
(define (g_buffered_input_stream_fill_finish
         stream
         result
         error)
  (unless
    ~g_buffered_input_stream_fill_finish
    (set! ~g_buffered_input_stream_fill_finish
      (fh-link-proc
        "g_buffered_input_stream_fill_finish"
        ffi:long
        (list '* '* '*))))
  (let ((~stream (unwrap-GBufferedInputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_buffered_input_stream_fill_finish
      ~stream
      ~result
      ~error)))
(export g_buffered_input_stream_fill_finish)

;; extern int g_buffered_input_stream_read_byte(GBufferedInputStream *stream, 
;;     GCancellable *cancellable, GError **error);
(define ~g_buffered_input_stream_read_byte #f)
(define (g_buffered_input_stream_read_byte
         stream
         cancellable
         error)
  (unless
    ~g_buffered_input_stream_read_byte
    (set! ~g_buffered_input_stream_read_byte
      (fh-link-proc
        "g_buffered_input_stream_read_byte"
        ffi:int
        (list '* '* '*))))
  (let ((~stream (unwrap-GBufferedInputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_buffered_input_stream_read_byte
      ~stream
      ~cancellable
      ~error)))
(export g_buffered_input_stream_read_byte)

;; typedef struct _GOutputStreamClass GOutputStreamClass;
(define GOutputStreamClass-desc void)
(export GOutputStreamClass-desc)
(define GOutputStreamClass*-desc (bs:pointer (delay GOutputStreamClass-desc)))
(export GOutputStreamClass*-desc)
(define-fh-pointer-type GOutputStreamClass* GOutputStreamClass*-desc)

;; typedef struct _GOutputStreamPrivate GOutputStreamPrivate;
(define GOutputStreamPrivate-desc void)
(export GOutputStreamPrivate-desc)
(define GOutputStreamPrivate*-desc (bs:pointer GOutputStreamPrivate-desc))
(export GOutputStreamPrivate*-desc)
(define-fh-pointer-type GOutputStreamPrivate* GOutputStreamPrivate*-desc)

;; struct _GOutputStream {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GOutputStreamPrivate *priv;
;; };
(define struct-_GOutputStream-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GOutputStreamPrivate*-desc))))))
(export struct-_GOutputStream-desc)
(define-fh-compound-type/p struct-_GOutputStream struct-_GOutputStream-desc)
(set! GOutputStream-desc struct-_GOutputStream-desc)
(define-fh-compound-type GOutputStream GOutputStream-desc)

;; struct _GOutputStreamClass {
;;   GObjectClass parent_class;
;;   /* Sync ops: */
;;   gssize (*write_fn)(GOutputStream *stream, const void *buffer, gsize count
;;       , GCancellable *cancellable, GError **error);
;;   gssize (*splice)(GOutputStream *stream, GInputStream *source, 
;;       GOutputStreamSpliceFlags flags, GCancellable *cancellable, GError **
;;       error);
;;   gboolean (*flush)(GOutputStream *stream, GCancellable *cancellable, GError
;;        **error);
;;   gboolean (*close_fn)(GOutputStream *stream, GCancellable *cancellable, 
;;       GError **error);
;;   /* Async ops: (optional in derived classes) */
;;   void (*write_async)(GOutputStream *stream, const void *buffer, gsize count
;;       , int io_priority, GCancellable *cancellable, GAsyncReadyCallback 
;;       callback, gpointer user_data);
;;   gssize (*write_finish)(GOutputStream *stream, GAsyncResult *result, GError
;;        **error);
;;   void (*splice_async)(GOutputStream *stream, GInputStream *source, 
;;       GOutputStreamSpliceFlags flags, int io_priority, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gssize (*splice_finish)(GOutputStream *stream, GAsyncResult *result, 
;;       GError **error);
;;   void (*flush_async)(GOutputStream *stream, int io_priority, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*flush_finish)(GOutputStream *stream, GAsyncResult *result, 
;;       GError **error);
;;   void (*close_async)(GOutputStream *stream, int io_priority, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*close_finish)(GOutputStream *stream, GAsyncResult *result, 
;;       GError **error);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;;   void (*_g_reserved7)(void);
;;   void (*_g_reserved8)(void);
;; };
(define struct-_GOutputStreamClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(write_fn ,(bs:pointer void))
          `(splice ,(bs:pointer void))
          `(flush ,(bs:pointer void))
          `(close_fn ,(bs:pointer void))
          `(write_async ,(bs:pointer void))
          `(write_finish ,(bs:pointer void))
          `(splice_async ,(bs:pointer void))
          `(splice_finish ,(bs:pointer void))
          `(flush_async ,(bs:pointer void))
          `(flush_finish ,(bs:pointer void))
          `(close_async ,(bs:pointer void))
          `(close_finish ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void))
          `(_g_reserved7 ,(bs:pointer void))
          `(_g_reserved8 ,(bs:pointer void)))))
(export struct-_GOutputStreamClass-desc)
(define-fh-compound-type/p struct-_GOutputStreamClass struct-_GOutputStreamClass-desc)
(set! GOutputStreamClass-desc struct-_GOutputStreamClass-desc)
(define-fh-compound-type GOutputStreamClass GOutputStreamClass-desc)

;; extern GType g_output_stream_get_type(void);
(define ~g_output_stream_get_type #f)
(define (g_output_stream_get_type)
  (unless
    ~g_output_stream_get_type
    (set! ~g_output_stream_get_type
      (fh-link-proc
        "g_output_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_output_stream_get_type)))
(export g_output_stream_get_type)

;; extern gssize g_output_stream_write(GOutputStream *stream, const void *
;;     buffer, gsize count, GCancellable *cancellable, GError **error);
(define ~g_output_stream_write #f)
(define (g_output_stream_write
         stream
         buffer
         count
         cancellable
         error)
  (unless
    ~g_output_stream_write
    (set! ~g_output_stream_write
      (fh-link-proc
        "g_output_stream_write"
        ffi:long
        (list '* '* ffi:unsigned-long '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_output_stream_write
      ~stream
      ~buffer
      ~count
      ~cancellable
      ~error)))
(export g_output_stream_write)

;; extern gboolean g_output_stream_write_all(GOutputStream *stream, const void 
;;     *buffer, gsize count, gsize *bytes_written, GCancellable *cancellable, 
;;     GError **error);
(define ~g_output_stream_write_all #f)
(define (g_output_stream_write_all
         stream
         buffer
         count
         bytes_written
         cancellable
         error)
  (unless
    ~g_output_stream_write_all
    (set! ~g_output_stream_write_all
      (fh-link-proc
        "g_output_stream_write_all"
        ffi:int
        (list '* '* ffi:unsigned-long '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~bytes_written (unwrap~pointer bytes_written))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_output_stream_write_all
      ~stream
      ~buffer
      ~count
      ~bytes_written
      ~cancellable
      ~error)))
(export g_output_stream_write_all)

;; extern gboolean g_output_stream_printf(GOutputStream *stream, gsize *
;;     bytes_written, GCancellable *cancellable, GError **error, const gchar *
;;     format, ...);
;; ... failed.

;; extern gboolean g_output_stream_vprintf(GOutputStream *stream, gsize *
;;     bytes_written, GCancellable *cancellable, GError **error, const gchar *
;;     format, va_list args);
(define ~g_output_stream_vprintf #f)
(define (g_output_stream_vprintf
         stream
         bytes_written
         cancellable
         error
         format
         args)
  (unless
    ~g_output_stream_vprintf
    (set! ~g_output_stream_vprintf
      (fh-link-proc
        "g_output_stream_vprintf"
        ffi:int
        (list '* '* '* '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~bytes_written (unwrap~pointer bytes_written))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error))
        (~format (unwrap~pointer format))
        (~args (unwrap~pointer args)))
    (~g_output_stream_vprintf
      ~stream
      ~bytes_written
      ~cancellable
      ~error
      ~format
      ~args)))
(export g_output_stream_vprintf)

;; extern gssize g_output_stream_write_bytes(GOutputStream *stream, GBytes *
;;     bytes, GCancellable *cancellable, GError **error);
(define ~g_output_stream_write_bytes #f)
(define (g_output_stream_write_bytes
         stream
         bytes
         cancellable
         error)
  (unless
    ~g_output_stream_write_bytes
    (set! ~g_output_stream_write_bytes
      (fh-link-proc
        "g_output_stream_write_bytes"
        ffi:long
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_output_stream_write_bytes
      ~stream
      bytes
      ~cancellable
      ~error)))
(export g_output_stream_write_bytes)

;; extern gssize g_output_stream_splice(GOutputStream *stream, GInputStream *
;;     source, GOutputStreamSpliceFlags flags, GCancellable *cancellable, 
;;     GError **error);
(define ~g_output_stream_splice #f)
(define (g_output_stream_splice
         stream
         source
         flags
         cancellable
         error)
  (unless
    ~g_output_stream_splice
    (set! ~g_output_stream_splice
      (fh-link-proc
        "g_output_stream_splice"
        ffi:long
        (list '* '* ffi:int '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~source (unwrap-GInputStream* source))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_output_stream_splice
      ~stream
      ~source
      ~flags
      ~cancellable
      ~error)))
(export g_output_stream_splice)

;; extern gboolean g_output_stream_flush(GOutputStream *stream, GCancellable *
;;     cancellable, GError **error);
(define ~g_output_stream_flush #f)
(define (g_output_stream_flush stream cancellable error)
  (unless
    ~g_output_stream_flush
    (set! ~g_output_stream_flush
      (fh-link-proc
        "g_output_stream_flush"
        ffi:int
        (list '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_output_stream_flush
      ~stream
      ~cancellable
      ~error)))
(export g_output_stream_flush)

;; extern gboolean g_output_stream_close(GOutputStream *stream, GCancellable *
;;     cancellable, GError **error);
(define ~g_output_stream_close #f)
(define (g_output_stream_close stream cancellable error)
  (unless
    ~g_output_stream_close
    (set! ~g_output_stream_close
      (fh-link-proc
        "g_output_stream_close"
        ffi:int
        (list '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_output_stream_close
      ~stream
      ~cancellable
      ~error)))
(export g_output_stream_close)

;; extern void g_output_stream_write_async(GOutputStream *stream, const void *
;;     buffer, gsize count, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_output_stream_write_async #f)
(define (g_output_stream_write_async
         stream
         buffer
         count
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_output_stream_write_async
    (set! ~g_output_stream_write_async
      (fh-link-proc
        "g_output_stream_write_async"
        ffi:void
        (list '* '* ffi:unsigned-long ffi:int '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_output_stream_write_async
      ~stream
      ~buffer
      ~count
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_output_stream_write_async)

;; extern gssize g_output_stream_write_finish(GOutputStream *stream, 
;;     GAsyncResult *result, GError **error);
(define ~g_output_stream_write_finish #f)
(define (g_output_stream_write_finish
         stream
         result
         error)
  (unless
    ~g_output_stream_write_finish
    (set! ~g_output_stream_write_finish
      (fh-link-proc
        "g_output_stream_write_finish"
        ffi:long
        (list '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_output_stream_write_finish
      ~stream
      ~result
      ~error)))
(export g_output_stream_write_finish)

;; extern void g_output_stream_write_all_async(GOutputStream *stream, const 
;;     void *buffer, gsize count, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_output_stream_write_all_async #f)
(define (g_output_stream_write_all_async
         stream
         buffer
         count
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_output_stream_write_all_async
    (set! ~g_output_stream_write_all_async
      (fh-link-proc
        "g_output_stream_write_all_async"
        ffi:void
        (list '* '* ffi:unsigned-long ffi:int '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_output_stream_write_all_async
      ~stream
      ~buffer
      ~count
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_output_stream_write_all_async)

;; extern gboolean g_output_stream_write_all_finish(GOutputStream *stream, 
;;     GAsyncResult *result, gsize *bytes_written, GError **error);
(define ~g_output_stream_write_all_finish #f)
(define (g_output_stream_write_all_finish
         stream
         result
         bytes_written
         error)
  (unless
    ~g_output_stream_write_all_finish
    (set! ~g_output_stream_write_all_finish
      (fh-link-proc
        "g_output_stream_write_all_finish"
        ffi:int
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~bytes_written (unwrap~pointer bytes_written))
        (~error (unwrap~pointer error)))
    (~g_output_stream_write_all_finish
      ~stream
      ~result
      ~bytes_written
      ~error)))
(export g_output_stream_write_all_finish)

;; extern void g_output_stream_write_bytes_async(GOutputStream *stream, GBytes 
;;     *bytes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback 
;;     callback, gpointer user_data);
(define ~g_output_stream_write_bytes_async #f)
(define (g_output_stream_write_bytes_async
         stream
         bytes
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_output_stream_write_bytes_async
    (set! ~g_output_stream_write_bytes_async
      (fh-link-proc
        "g_output_stream_write_bytes_async"
        ffi:void
        (list '* '* ffi:int '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_output_stream_write_bytes_async
      ~stream
      bytes
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_output_stream_write_bytes_async)

;; extern gssize g_output_stream_write_bytes_finish(GOutputStream *stream, 
;;     GAsyncResult *result, GError **error);
(define ~g_output_stream_write_bytes_finish #f)
(define (g_output_stream_write_bytes_finish
         stream
         result
         error)
  (unless
    ~g_output_stream_write_bytes_finish
    (set! ~g_output_stream_write_bytes_finish
      (fh-link-proc
        "g_output_stream_write_bytes_finish"
        ffi:long
        (list '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_output_stream_write_bytes_finish
      ~stream
      ~result
      ~error)))
(export g_output_stream_write_bytes_finish)

;; extern void g_output_stream_splice_async(GOutputStream *stream, GInputStream
;;      *source, GOutputStreamSpliceFlags flags, int io_priority, GCancellable 
;;     *cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_output_stream_splice_async #f)
(define (g_output_stream_splice_async
         stream
         source
         flags
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_output_stream_splice_async
    (set! ~g_output_stream_splice_async
      (fh-link-proc
        "g_output_stream_splice_async"
        ffi:void
        (list '* '* ffi:int ffi:int '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~source (unwrap-GInputStream* source))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_output_stream_splice_async
      ~stream
      ~source
      ~flags
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_output_stream_splice_async)

;; extern gssize g_output_stream_splice_finish(GOutputStream *stream, 
;;     GAsyncResult *result, GError **error);
(define ~g_output_stream_splice_finish #f)
(define (g_output_stream_splice_finish
         stream
         result
         error)
  (unless
    ~g_output_stream_splice_finish
    (set! ~g_output_stream_splice_finish
      (fh-link-proc
        "g_output_stream_splice_finish"
        ffi:long
        (list '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_output_stream_splice_finish
      ~stream
      ~result
      ~error)))
(export g_output_stream_splice_finish)

;; extern void g_output_stream_flush_async(GOutputStream *stream, int 
;;     io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_output_stream_flush_async #f)
(define (g_output_stream_flush_async
         stream
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_output_stream_flush_async
    (set! ~g_output_stream_flush_async
      (fh-link-proc
        "g_output_stream_flush_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_output_stream_flush_async
      ~stream
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_output_stream_flush_async)

;; extern gboolean g_output_stream_flush_finish(GOutputStream *stream, 
;;     GAsyncResult *result, GError **error);
(define ~g_output_stream_flush_finish #f)
(define (g_output_stream_flush_finish
         stream
         result
         error)
  (unless
    ~g_output_stream_flush_finish
    (set! ~g_output_stream_flush_finish
      (fh-link-proc
        "g_output_stream_flush_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_output_stream_flush_finish
      ~stream
      ~result
      ~error)))
(export g_output_stream_flush_finish)

;; extern void g_output_stream_close_async(GOutputStream *stream, int 
;;     io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_output_stream_close_async #f)
(define (g_output_stream_close_async
         stream
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_output_stream_close_async
    (set! ~g_output_stream_close_async
      (fh-link-proc
        "g_output_stream_close_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_output_stream_close_async
      ~stream
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_output_stream_close_async)

;; extern gboolean g_output_stream_close_finish(GOutputStream *stream, 
;;     GAsyncResult *result, GError **error);
(define ~g_output_stream_close_finish #f)
(define (g_output_stream_close_finish
         stream
         result
         error)
  (unless
    ~g_output_stream_close_finish
    (set! ~g_output_stream_close_finish
      (fh-link-proc
        "g_output_stream_close_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_output_stream_close_finish
      ~stream
      ~result
      ~error)))
(export g_output_stream_close_finish)

;; extern gboolean g_output_stream_is_closed(GOutputStream *stream);
(define ~g_output_stream_is_closed #f)
(define (g_output_stream_is_closed stream)
  (unless
    ~g_output_stream_is_closed
    (set! ~g_output_stream_is_closed
      (fh-link-proc
        "g_output_stream_is_closed"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GOutputStream* stream)))
    (~g_output_stream_is_closed ~stream)))
(export g_output_stream_is_closed)

;; extern gboolean g_output_stream_is_closing(GOutputStream *stream);
(define ~g_output_stream_is_closing #f)
(define (g_output_stream_is_closing stream)
  (unless
    ~g_output_stream_is_closing
    (set! ~g_output_stream_is_closing
      (fh-link-proc
        "g_output_stream_is_closing"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GOutputStream* stream)))
    (~g_output_stream_is_closing ~stream)))
(export g_output_stream_is_closing)

;; extern gboolean g_output_stream_has_pending(GOutputStream *stream);
(define ~g_output_stream_has_pending #f)
(define (g_output_stream_has_pending stream)
  (unless
    ~g_output_stream_has_pending
    (set! ~g_output_stream_has_pending
      (fh-link-proc
        "g_output_stream_has_pending"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GOutputStream* stream)))
    (~g_output_stream_has_pending ~stream)))
(export g_output_stream_has_pending)

;; extern gboolean g_output_stream_set_pending(GOutputStream *stream, GError **
;;     error);
(define ~g_output_stream_set_pending #f)
(define (g_output_stream_set_pending stream error)
  (unless
    ~g_output_stream_set_pending
    (set! ~g_output_stream_set_pending
      (fh-link-proc
        "g_output_stream_set_pending"
        ffi:int
        (list '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~error (unwrap~pointer error)))
    (~g_output_stream_set_pending ~stream ~error)))
(export g_output_stream_set_pending)

;; extern void g_output_stream_clear_pending(GOutputStream *stream);
(define ~g_output_stream_clear_pending #f)
(define (g_output_stream_clear_pending stream)
  (unless
    ~g_output_stream_clear_pending
    (set! ~g_output_stream_clear_pending
      (fh-link-proc
        "g_output_stream_clear_pending"
        ffi:void
        (list '*))))
  (let ((~stream (unwrap-GOutputStream* stream)))
    (~g_output_stream_clear_pending ~stream)))
(export g_output_stream_clear_pending)

;; typedef struct _GFilterOutputStreamClass GFilterOutputStreamClass;
(define GFilterOutputStreamClass-desc void)
(export GFilterOutputStreamClass-desc)
(define GFilterOutputStreamClass*-desc (bs:pointer (delay GFilterOutputStreamClass-desc)))
(export GFilterOutputStreamClass*-desc)
(define-fh-pointer-type GFilterOutputStreamClass* GFilterOutputStreamClass*-desc)

;; struct _GFilterOutputStream {
;;   GOutputStream parent_instance;
;;   /*< protected >*/
;;   GOutputStream *base_stream;
;; };
(define struct-_GFilterOutputStream-desc
  (bs:struct
    (list `(parent_instance ,GOutputStream-desc)
          `(base_stream
             ,(bs:pointer (delay GOutputStream*-desc))))))
(export struct-_GFilterOutputStream-desc)
(define-fh-compound-type/p struct-_GFilterOutputStream struct-_GFilterOutputStream-desc)
(set! GFilterOutputStream-desc struct-_GFilterOutputStream-desc)
(define-fh-compound-type GFilterOutputStream GFilterOutputStream-desc)

;; struct _GFilterOutputStreamClass {
;;   GOutputStreamClass parent_class;
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;; };
(define struct-_GFilterOutputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GOutputStreamClass-desc)
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void)))))
(export struct-_GFilterOutputStreamClass-desc)
(define-fh-compound-type/p struct-_GFilterOutputStreamClass struct-_GFilterOutputStreamClass-desc)
(set! GFilterOutputStreamClass-desc struct-_GFilterOutputStreamClass-desc)
(define-fh-compound-type GFilterOutputStreamClass GFilterOutputStreamClass-desc)

;; extern GType g_filter_output_stream_get_type(void);
(define ~g_filter_output_stream_get_type #f)
(define (g_filter_output_stream_get_type)
  (unless
    ~g_filter_output_stream_get_type
    (set! ~g_filter_output_stream_get_type
      (fh-link-proc
        "g_filter_output_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_filter_output_stream_get_type)))
(export g_filter_output_stream_get_type)

;; extern GOutputStream *g_filter_output_stream_get_base_stream(
;;     GFilterOutputStream *stream);
(define ~g_filter_output_stream_get_base_stream #f)
(define (g_filter_output_stream_get_base_stream stream)
  (unless
    ~g_filter_output_stream_get_base_stream
    (set! ~g_filter_output_stream_get_base_stream
      (fh-link-proc
        "g_filter_output_stream_get_base_stream"
        '*
        (list '*))))
  (let ((~stream (unwrap-GFilterOutputStream* stream)))
    (wrap-GOutputStream*
      (~g_filter_output_stream_get_base_stream ~stream))))
(export g_filter_output_stream_get_base_stream)

;; extern gboolean g_filter_output_stream_get_close_base_stream(
;;     GFilterOutputStream *stream);
(define ~g_filter_output_stream_get_close_base_stream #f)
(define (g_filter_output_stream_get_close_base_stream
         stream)
  (unless
    ~g_filter_output_stream_get_close_base_stream
    (set! ~g_filter_output_stream_get_close_base_stream
      (fh-link-proc
        "g_filter_output_stream_get_close_base_stream"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GFilterOutputStream* stream)))
    (~g_filter_output_stream_get_close_base_stream
      ~stream)))
(export g_filter_output_stream_get_close_base_stream)

;; extern void g_filter_output_stream_set_close_base_stream(GFilterOutputStream
;;      *stream, gboolean close_base);
(define ~g_filter_output_stream_set_close_base_stream #f)
(define (g_filter_output_stream_set_close_base_stream
         stream
         close_base)
  (unless
    ~g_filter_output_stream_set_close_base_stream
    (set! ~g_filter_output_stream_set_close_base_stream
      (fh-link-proc
        "g_filter_output_stream_set_close_base_stream"
        ffi:void
        (list '* ffi:int))))
  (let ((~stream (unwrap-GFilterOutputStream* stream))
        (~close_base (unwrap~fixed close_base)))
    (~g_filter_output_stream_set_close_base_stream
      ~stream
      ~close_base)))
(export g_filter_output_stream_set_close_base_stream)

;; typedef struct _GBufferedOutputStreamClass GBufferedOutputStreamClass;
(define GBufferedOutputStreamClass-desc void)
(export GBufferedOutputStreamClass-desc)
(define GBufferedOutputStreamClass*-desc (bs:pointer (delay GBufferedOutputStreamClass-desc)))
(export GBufferedOutputStreamClass*-desc)
(define-fh-pointer-type GBufferedOutputStreamClass* GBufferedOutputStreamClass*-desc)

;; typedef struct _GBufferedOutputStreamPrivate GBufferedOutputStreamPrivate;
(define GBufferedOutputStreamPrivate-desc void)
(export GBufferedOutputStreamPrivate-desc)
(define GBufferedOutputStreamPrivate*-desc (bs:pointer GBufferedOutputStreamPrivate-desc))
(export GBufferedOutputStreamPrivate*-desc)
(define-fh-pointer-type GBufferedOutputStreamPrivate* GBufferedOutputStreamPrivate*-desc)

;; struct _GBufferedOutputStream {
;;   GFilterOutputStream parent_instance;
;;   /*< protected >*/
;;   GBufferedOutputStreamPrivate *priv;
;; };
(define struct-_GBufferedOutputStream-desc
  (bs:struct
    (list `(parent_instance ,GFilterOutputStream-desc)
          `(priv ,(bs:pointer
                    (delay GBufferedOutputStreamPrivate*-desc))))))
(export struct-_GBufferedOutputStream-desc)
(define-fh-compound-type/p struct-_GBufferedOutputStream struct-_GBufferedOutputStream-desc)
(set! GBufferedOutputStream-desc struct-_GBufferedOutputStream-desc)
(define-fh-compound-type GBufferedOutputStream GBufferedOutputStream-desc)

;; struct _GBufferedOutputStreamClass {
;;   GFilterOutputStreamClass parent_class;
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;; };
(define struct-_GBufferedOutputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GFilterOutputStreamClass-desc)
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void)))))
(export struct-_GBufferedOutputStreamClass-desc)
(define-fh-compound-type/p struct-_GBufferedOutputStreamClass struct-_GBufferedOutputStreamClass-desc)
(set! GBufferedOutputStreamClass-desc struct-_GBufferedOutputStreamClass-desc)
(define-fh-compound-type GBufferedOutputStreamClass GBufferedOutputStreamClass-desc)

;; extern GType g_buffered_output_stream_get_type(void);
(define ~g_buffered_output_stream_get_type #f)
(define (g_buffered_output_stream_get_type)
  (unless
    ~g_buffered_output_stream_get_type
    (set! ~g_buffered_output_stream_get_type
      (fh-link-proc
        "g_buffered_output_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_buffered_output_stream_get_type)))
(export g_buffered_output_stream_get_type)

;; extern GOutputStream *g_buffered_output_stream_new(GOutputStream *
;;     base_stream);
(define ~g_buffered_output_stream_new #f)
(define (g_buffered_output_stream_new base_stream)
  (unless
    ~g_buffered_output_stream_new
    (set! ~g_buffered_output_stream_new
      (fh-link-proc
        "g_buffered_output_stream_new"
        '*
        (list '*))))
  (let ((~base_stream
          (unwrap-GOutputStream* base_stream)))
    (wrap-GOutputStream*
      (~g_buffered_output_stream_new ~base_stream))))
(export g_buffered_output_stream_new)

;; extern GOutputStream *g_buffered_output_stream_new_sized(GOutputStream *
;;     base_stream, gsize size);
(define ~g_buffered_output_stream_new_sized #f)
(define (g_buffered_output_stream_new_sized
         base_stream
         size)
  (unless
    ~g_buffered_output_stream_new_sized
    (set! ~g_buffered_output_stream_new_sized
      (fh-link-proc
        "g_buffered_output_stream_new_sized"
        '*
        (list '* ffi:unsigned-long))))
  (let ((~base_stream
          (unwrap-GOutputStream* base_stream))
        (~size (unwrap~fixed size)))
    (wrap-GOutputStream*
      (~g_buffered_output_stream_new_sized
        ~base_stream
        ~size))))
(export g_buffered_output_stream_new_sized)

;; extern gsize g_buffered_output_stream_get_buffer_size(GBufferedOutputStream 
;;     *stream);
(define ~g_buffered_output_stream_get_buffer_size #f)
(define (g_buffered_output_stream_get_buffer_size stream)
  (unless
    ~g_buffered_output_stream_get_buffer_size
    (set! ~g_buffered_output_stream_get_buffer_size
      (fh-link-proc
        "g_buffered_output_stream_get_buffer_size"
        ffi:unsigned-long
        (list '*))))
  (let ((~stream (unwrap-GBufferedOutputStream* stream)))
    (~g_buffered_output_stream_get_buffer_size
      ~stream)))
(export g_buffered_output_stream_get_buffer_size)

;; extern void g_buffered_output_stream_set_buffer_size(GBufferedOutputStream *
;;     stream, gsize size);
(define ~g_buffered_output_stream_set_buffer_size #f)
(define (g_buffered_output_stream_set_buffer_size
         stream
         size)
  (unless
    ~g_buffered_output_stream_set_buffer_size
    (set! ~g_buffered_output_stream_set_buffer_size
      (fh-link-proc
        "g_buffered_output_stream_set_buffer_size"
        ffi:void
        (list '* ffi:unsigned-long))))
  (let ((~stream (unwrap-GBufferedOutputStream* stream))
        (~size (unwrap~fixed size)))
    (~g_buffered_output_stream_set_buffer_size
      ~stream
      ~size)))
(export g_buffered_output_stream_set_buffer_size)

;; extern gboolean g_buffered_output_stream_get_auto_grow(GBufferedOutputStream
;;      *stream);
(define ~g_buffered_output_stream_get_auto_grow #f)
(define (g_buffered_output_stream_get_auto_grow stream)
  (unless
    ~g_buffered_output_stream_get_auto_grow
    (set! ~g_buffered_output_stream_get_auto_grow
      (fh-link-proc
        "g_buffered_output_stream_get_auto_grow"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GBufferedOutputStream* stream)))
    (~g_buffered_output_stream_get_auto_grow ~stream)))
(export g_buffered_output_stream_get_auto_grow)

;; extern void g_buffered_output_stream_set_auto_grow(GBufferedOutputStream *
;;     stream, gboolean auto_grow);
(define ~g_buffered_output_stream_set_auto_grow #f)
(define (g_buffered_output_stream_set_auto_grow
         stream
         auto_grow)
  (unless
    ~g_buffered_output_stream_set_auto_grow
    (set! ~g_buffered_output_stream_set_auto_grow
      (fh-link-proc
        "g_buffered_output_stream_set_auto_grow"
        ffi:void
        (list '* ffi:int))))
  (let ((~stream (unwrap-GBufferedOutputStream* stream))
        (~auto_grow (unwrap~fixed auto_grow)))
    (~g_buffered_output_stream_set_auto_grow
      ~stream
      ~auto_grow)))
(export g_buffered_output_stream_set_auto_grow)

;; extern GType g_bytes_icon_get_type(void);
(define ~g_bytes_icon_get_type #f)
(define (g_bytes_icon_get_type)
  (unless
    ~g_bytes_icon_get_type
    (set! ~g_bytes_icon_get_type
      (fh-link-proc
        "g_bytes_icon_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_bytes_icon_get_type)))
(export g_bytes_icon_get_type)

;; extern GIcon *g_bytes_icon_new(GBytes *bytes);
(define ~g_bytes_icon_new #f)
(define (g_bytes_icon_new bytes)
  (unless
    ~g_bytes_icon_new
    (set! ~g_bytes_icon_new
      (fh-link-proc "g_bytes_icon_new" '* (list '*))))
  (let () (wrap-GIcon* (~g_bytes_icon_new bytes))))
(export g_bytes_icon_new)

;; extern GBytes *g_bytes_icon_get_bytes(GBytesIcon *icon);
(define ~g_bytes_icon_get_bytes #f)
(define (g_bytes_icon_get_bytes icon)
  (unless
    ~g_bytes_icon_get_bytes
    (set! ~g_bytes_icon_get_bytes
      (fh-link-proc
        "g_bytes_icon_get_bytes"
        '*
        (list '*))))
  (let ((~icon (unwrap-GBytesIcon* icon)))
    (~g_bytes_icon_get_bytes ~icon)))
(export g_bytes_icon_get_bytes)

;; typedef struct _GCancellableClass GCancellableClass;
(define GCancellableClass-desc void)
(export GCancellableClass-desc)
(define GCancellableClass*-desc (bs:pointer (delay GCancellableClass-desc)))
(export GCancellableClass*-desc)
(define-fh-pointer-type GCancellableClass* GCancellableClass*-desc)

;; typedef struct _GCancellablePrivate GCancellablePrivate;
(define GCancellablePrivate-desc void)
(export GCancellablePrivate-desc)
(define GCancellablePrivate*-desc (bs:pointer GCancellablePrivate-desc))
(export GCancellablePrivate*-desc)
(define-fh-pointer-type GCancellablePrivate* GCancellablePrivate*-desc)

;; struct _GCancellable {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GCancellablePrivate *priv;
;; };
(define struct-_GCancellable-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GCancellablePrivate*-desc))))))
(export struct-_GCancellable-desc)
(define-fh-compound-type/p struct-_GCancellable struct-_GCancellable-desc)
(set! GCancellable-desc struct-_GCancellable-desc)
(define-fh-compound-type GCancellable GCancellable-desc)

;; struct _GCancellableClass {
;;   GObjectClass parent_class;
;;   void (*cancelled)(GCancellable *cancellable);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GCancellableClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(cancelled ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GCancellableClass-desc)
(define-fh-compound-type/p struct-_GCancellableClass struct-_GCancellableClass-desc)
(set! GCancellableClass-desc struct-_GCancellableClass-desc)
(define-fh-compound-type GCancellableClass GCancellableClass-desc)

;; extern GType g_cancellable_get_type(void);
(define ~g_cancellable_get_type #f)
(define (g_cancellable_get_type)
  (unless
    ~g_cancellable_get_type
    (set! ~g_cancellable_get_type
      (fh-link-proc
        "g_cancellable_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_cancellable_get_type)))
(export g_cancellable_get_type)

;; extern GCancellable *g_cancellable_new(void);
(define ~g_cancellable_new #f)
(define (g_cancellable_new)
  (unless
    ~g_cancellable_new
    (set! ~g_cancellable_new
      (fh-link-proc "g_cancellable_new" '* (list))))
  (let ()
    (wrap-GCancellable* (~g_cancellable_new))))
(export g_cancellable_new)

;; extern gboolean g_cancellable_is_cancelled(GCancellable *cancellable);
(define ~g_cancellable_is_cancelled #f)
(define (g_cancellable_is_cancelled cancellable)
  (unless
    ~g_cancellable_is_cancelled
    (set! ~g_cancellable_is_cancelled
      (fh-link-proc
        "g_cancellable_is_cancelled"
        ffi:int
        (list '*))))
  (let ((~cancellable (unwrap-GCancellable* cancellable)))
    (~g_cancellable_is_cancelled ~cancellable)))
(export g_cancellable_is_cancelled)

;; extern gboolean g_cancellable_set_error_if_cancelled(GCancellable *
;;     cancellable, GError **error);
(define ~g_cancellable_set_error_if_cancelled #f)
(define (g_cancellable_set_error_if_cancelled
         cancellable
         error)
  (unless
    ~g_cancellable_set_error_if_cancelled
    (set! ~g_cancellable_set_error_if_cancelled
      (fh-link-proc
        "g_cancellable_set_error_if_cancelled"
        ffi:int
        (list '* '*))))
  (let ((~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_cancellable_set_error_if_cancelled
      ~cancellable
      ~error)))
(export g_cancellable_set_error_if_cancelled)

;; extern int g_cancellable_get_fd(GCancellable *cancellable);
(define ~g_cancellable_get_fd #f)
(define (g_cancellable_get_fd cancellable)
  (unless
    ~g_cancellable_get_fd
    (set! ~g_cancellable_get_fd
      (fh-link-proc
        "g_cancellable_get_fd"
        ffi:int
        (list '*))))
  (let ((~cancellable (unwrap-GCancellable* cancellable)))
    (~g_cancellable_get_fd ~cancellable)))
(export g_cancellable_get_fd)

;; extern gboolean g_cancellable_make_pollfd(GCancellable *cancellable, GPollFD
;;      *pollfd);
(define ~g_cancellable_make_pollfd #f)
(define (g_cancellable_make_pollfd cancellable pollfd)
  (unless
    ~g_cancellable_make_pollfd
    (set! ~g_cancellable_make_pollfd
      (fh-link-proc
        "g_cancellable_make_pollfd"
        ffi:int
        (list '* '*))))
  (let ((~cancellable (unwrap-GCancellable* cancellable)))
    (~g_cancellable_make_pollfd ~cancellable pollfd)))
(export g_cancellable_make_pollfd)

;; extern void g_cancellable_release_fd(GCancellable *cancellable);
(define ~g_cancellable_release_fd #f)
(define (g_cancellable_release_fd cancellable)
  (unless
    ~g_cancellable_release_fd
    (set! ~g_cancellable_release_fd
      (fh-link-proc
        "g_cancellable_release_fd"
        ffi:void
        (list '*))))
  (let ((~cancellable (unwrap-GCancellable* cancellable)))
    (~g_cancellable_release_fd ~cancellable)))
(export g_cancellable_release_fd)

;; extern GSource *g_cancellable_source_new(GCancellable *cancellable);
(define ~g_cancellable_source_new #f)
(define (g_cancellable_source_new cancellable)
  (unless
    ~g_cancellable_source_new
    (set! ~g_cancellable_source_new
      (fh-link-proc
        "g_cancellable_source_new"
        '*
        (list '*))))
  (let ((~cancellable (unwrap-GCancellable* cancellable)))
    (~g_cancellable_source_new ~cancellable)))
(export g_cancellable_source_new)

;; extern GCancellable *g_cancellable_get_current(void);
(define ~g_cancellable_get_current #f)
(define (g_cancellable_get_current)
  (unless
    ~g_cancellable_get_current
    (set! ~g_cancellable_get_current
      (fh-link-proc
        "g_cancellable_get_current"
        '*
        (list))))
  (let ()
    (wrap-GCancellable* (~g_cancellable_get_current))))
(export g_cancellable_get_current)

;; extern void g_cancellable_push_current(GCancellable *cancellable);
(define ~g_cancellable_push_current #f)
(define (g_cancellable_push_current cancellable)
  (unless
    ~g_cancellable_push_current
    (set! ~g_cancellable_push_current
      (fh-link-proc
        "g_cancellable_push_current"
        ffi:void
        (list '*))))
  (let ((~cancellable (unwrap-GCancellable* cancellable)))
    (~g_cancellable_push_current ~cancellable)))
(export g_cancellable_push_current)

;; extern void g_cancellable_pop_current(GCancellable *cancellable);
(define ~g_cancellable_pop_current #f)
(define (g_cancellable_pop_current cancellable)
  (unless
    ~g_cancellable_pop_current
    (set! ~g_cancellable_pop_current
      (fh-link-proc
        "g_cancellable_pop_current"
        ffi:void
        (list '*))))
  (let ((~cancellable (unwrap-GCancellable* cancellable)))
    (~g_cancellable_pop_current ~cancellable)))
(export g_cancellable_pop_current)

;; extern void g_cancellable_reset(GCancellable *cancellable);
(define ~g_cancellable_reset #f)
(define (g_cancellable_reset cancellable)
  (unless
    ~g_cancellable_reset
    (set! ~g_cancellable_reset
      (fh-link-proc
        "g_cancellable_reset"
        ffi:void
        (list '*))))
  (let ((~cancellable (unwrap-GCancellable* cancellable)))
    (~g_cancellable_reset ~cancellable)))
(export g_cancellable_reset)

;; extern gulong g_cancellable_connect(GCancellable *cancellable, GCallback 
;;     callback, gpointer data, GDestroyNotify data_destroy_func);
(define ~g_cancellable_connect #f)
(define (g_cancellable_connect
         cancellable
         callback
         data
         data_destroy_func)
  (unless
    ~g_cancellable_connect
    (set! ~g_cancellable_connect
      (fh-link-proc
        "g_cancellable_connect"
        ffi:unsigned-long
        (list '* '* '* '*))))
  (let ((~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
           callback))
        (~data (unwrap-gpointer data))
        (~data_destroy_func
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           data_destroy_func)))
    (~g_cancellable_connect
      ~cancellable
      ~callback
      ~data
      ~data_destroy_func)))
(export g_cancellable_connect)

;; extern void g_cancellable_disconnect(GCancellable *cancellable, gulong 
;;     handler_id);
(define ~g_cancellable_disconnect #f)
(define (g_cancellable_disconnect cancellable handler_id)
  (unless
    ~g_cancellable_disconnect
    (set! ~g_cancellable_disconnect
      (fh-link-proc
        "g_cancellable_disconnect"
        ffi:void
        (list '* ffi:unsigned-long))))
  (let ((~cancellable (unwrap-GCancellable* cancellable))
        (~handler_id (unwrap~fixed handler_id)))
    (~g_cancellable_disconnect
      ~cancellable
      ~handler_id)))
(export g_cancellable_disconnect)

;; extern void g_cancellable_cancel(GCancellable *cancellable);
(define ~g_cancellable_cancel #f)
(define (g_cancellable_cancel cancellable)
  (unless
    ~g_cancellable_cancel
    (set! ~g_cancellable_cancel
      (fh-link-proc
        "g_cancellable_cancel"
        ffi:void
        (list '*))))
  (let ((~cancellable (unwrap-GCancellable* cancellable)))
    (~g_cancellable_cancel ~cancellable)))
(export g_cancellable_cancel)

;; typedef struct _GConverterIface GConverterIface;
(define GConverterIface-desc void)
(export GConverterIface-desc)
(define GConverterIface*-desc (bs:pointer (delay GConverterIface-desc)))
(export GConverterIface*-desc)
(define-fh-pointer-type GConverterIface* GConverterIface*-desc)

;; struct _GConverterIface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   GConverterResult (*convert)(GConverter *converter, const void *inbuf, 
;;       gsize inbuf_size, void *outbuf, gsize outbuf_size, GConverterFlags 
;;       flags, gsize *bytes_read, gsize *bytes_written, GError **error);
;;   void (*reset)(GConverter *converter);
;; };
(define struct-_GConverterIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(convert ,(bs:pointer void))
          `(reset ,(bs:pointer void)))))
(export struct-_GConverterIface-desc)
(define-fh-compound-type/p struct-_GConverterIface struct-_GConverterIface-desc)
(set! GConverterIface-desc struct-_GConverterIface-desc)
(define-fh-compound-type GConverterIface GConverterIface-desc)

;; extern GType g_converter_get_type(void);
(define ~g_converter_get_type #f)
(define (g_converter_get_type)
  (unless
    ~g_converter_get_type
    (set! ~g_converter_get_type
      (fh-link-proc
        "g_converter_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_converter_get_type)))
(export g_converter_get_type)

;; extern GConverterResult g_converter_convert(GConverter *converter, const 
;;     void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, 
;;     GConverterFlags flags, gsize *bytes_read, gsize *bytes_written, GError *
;;     *error);
(define ~g_converter_convert #f)
(define (g_converter_convert
         converter
         inbuf
         inbuf_size
         outbuf
         outbuf_size
         flags
         bytes_read
         bytes_written
         error)
  (unless
    ~g_converter_convert
    (set! ~g_converter_convert
      (fh-link-proc
        "g_converter_convert"
        ffi:int
        (list '*
              '*
              ffi:unsigned-long
              '*
              ffi:unsigned-long
              ffi:int
              '*
              '*
              '*))))
  (let ((~converter (unwrap-GConverter* converter))
        (~inbuf (unwrap~pointer inbuf))
        (~inbuf_size (unwrap~fixed inbuf_size))
        (~outbuf (unwrap~pointer outbuf))
        (~outbuf_size (unwrap~fixed outbuf_size))
        (~flags (unwrap~fixed flags))
        (~bytes_read (unwrap~pointer bytes_read))
        (~bytes_written (unwrap~pointer bytes_written))
        (~error (unwrap~pointer error)))
    (~g_converter_convert
      ~converter
      ~inbuf
      ~inbuf_size
      ~outbuf
      ~outbuf_size
      ~flags
      ~bytes_read
      ~bytes_written
      ~error)))
(export g_converter_convert)

;; extern void g_converter_reset(GConverter *converter);
(define ~g_converter_reset #f)
(define (g_converter_reset converter)
  (unless
    ~g_converter_reset
    (set! ~g_converter_reset
      (fh-link-proc
        "g_converter_reset"
        ffi:void
        (list '*))))
  (let ((~converter (unwrap-GConverter* converter)))
    (~g_converter_reset ~converter)))
(export g_converter_reset)

;; typedef struct _GCharsetConverterClass GCharsetConverterClass;
(define GCharsetConverterClass-desc void)
(export GCharsetConverterClass-desc)
(define GCharsetConverterClass*-desc (bs:pointer (delay GCharsetConverterClass-desc)))
(export GCharsetConverterClass*-desc)
(define-fh-pointer-type GCharsetConverterClass* GCharsetConverterClass*-desc)

;; struct _GCharsetConverterClass {
;;   GObjectClass parent_class;
;; };
(define struct-_GCharsetConverterClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc))))))))
(export struct-_GCharsetConverterClass-desc)
(define-fh-compound-type/p struct-_GCharsetConverterClass struct-_GCharsetConverterClass-desc)
(set! GCharsetConverterClass-desc struct-_GCharsetConverterClass-desc)
(define-fh-compound-type GCharsetConverterClass GCharsetConverterClass-desc)

;; extern GType g_charset_converter_get_type(void);
(define ~g_charset_converter_get_type #f)
(define (g_charset_converter_get_type)
  (unless
    ~g_charset_converter_get_type
    (set! ~g_charset_converter_get_type
      (fh-link-proc
        "g_charset_converter_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_charset_converter_get_type)))
(export g_charset_converter_get_type)

;; extern GCharsetConverter *g_charset_converter_new(const gchar *to_charset, 
;;     const gchar *from_charset, GError **error);
(define ~g_charset_converter_new #f)
(define (g_charset_converter_new
         to_charset
         from_charset
         error)
  (unless
    ~g_charset_converter_new
    (set! ~g_charset_converter_new
      (fh-link-proc
        "g_charset_converter_new"
        '*
        (list '* '* '*))))
  (let ((~to_charset (unwrap~pointer to_charset))
        (~from_charset (unwrap~pointer from_charset))
        (~error (unwrap~pointer error)))
    (wrap-GCharsetConverter*
      (~g_charset_converter_new
        ~to_charset
        ~from_charset
        ~error))))
(export g_charset_converter_new)

;; extern void g_charset_converter_set_use_fallback(GCharsetConverter *
;;     converter, gboolean use_fallback);
(define ~g_charset_converter_set_use_fallback #f)
(define (g_charset_converter_set_use_fallback
         converter
         use_fallback)
  (unless
    ~g_charset_converter_set_use_fallback
    (set! ~g_charset_converter_set_use_fallback
      (fh-link-proc
        "g_charset_converter_set_use_fallback"
        ffi:void
        (list '* ffi:int))))
  (let ((~converter
          (unwrap-GCharsetConverter* converter))
        (~use_fallback (unwrap~fixed use_fallback)))
    (~g_charset_converter_set_use_fallback
      ~converter
      ~use_fallback)))
(export g_charset_converter_set_use_fallback)

;; extern gboolean g_charset_converter_get_use_fallback(GCharsetConverter *
;;     converter);
(define ~g_charset_converter_get_use_fallback #f)
(define (g_charset_converter_get_use_fallback converter)
  (unless
    ~g_charset_converter_get_use_fallback
    (set! ~g_charset_converter_get_use_fallback
      (fh-link-proc
        "g_charset_converter_get_use_fallback"
        ffi:int
        (list '*))))
  (let ((~converter
          (unwrap-GCharsetConverter* converter)))
    (~g_charset_converter_get_use_fallback
      ~converter)))
(export g_charset_converter_get_use_fallback)

;; extern guint g_charset_converter_get_num_fallbacks(GCharsetConverter *
;;     converter);
(define ~g_charset_converter_get_num_fallbacks #f)
(define (g_charset_converter_get_num_fallbacks converter)
  (unless
    ~g_charset_converter_get_num_fallbacks
    (set! ~g_charset_converter_get_num_fallbacks
      (fh-link-proc
        "g_charset_converter_get_num_fallbacks"
        ffi:unsigned-int
        (list '*))))
  (let ((~converter
          (unwrap-GCharsetConverter* converter)))
    (~g_charset_converter_get_num_fallbacks
      ~converter)))
(export g_charset_converter_get_num_fallbacks)

;; extern gboolean g_content_type_equals(const gchar *type1, const gchar *type2
;;     );
(define ~g_content_type_equals #f)
(define (g_content_type_equals type1 type2)
  (unless
    ~g_content_type_equals
    (set! ~g_content_type_equals
      (fh-link-proc
        "g_content_type_equals"
        ffi:int
        (list '* '*))))
  (let ((~type1 (unwrap~pointer type1))
        (~type2 (unwrap~pointer type2)))
    (~g_content_type_equals ~type1 ~type2)))
(export g_content_type_equals)

;; extern gboolean g_content_type_is_a(const gchar *type, const gchar *
;;     supertype);
(define ~g_content_type_is_a #f)
(define (g_content_type_is_a type supertype)
  (unless
    ~g_content_type_is_a
    (set! ~g_content_type_is_a
      (fh-link-proc
        "g_content_type_is_a"
        ffi:int
        (list '* '*))))
  (let ((~type (unwrap~pointer type))
        (~supertype (unwrap~pointer supertype)))
    (~g_content_type_is_a ~type ~supertype)))
(export g_content_type_is_a)

;; extern gboolean g_content_type_is_mime_type(const gchar *type, const gchar *
;;     mime_type);
(define ~g_content_type_is_mime_type #f)
(define (g_content_type_is_mime_type type mime_type)
  (unless
    ~g_content_type_is_mime_type
    (set! ~g_content_type_is_mime_type
      (fh-link-proc
        "g_content_type_is_mime_type"
        ffi:int
        (list '* '*))))
  (let ((~type (unwrap~pointer type))
        (~mime_type (unwrap~pointer mime_type)))
    (~g_content_type_is_mime_type ~type ~mime_type)))
(export g_content_type_is_mime_type)

;; extern gboolean g_content_type_is_unknown(const gchar *type);
(define ~g_content_type_is_unknown #f)
(define (g_content_type_is_unknown type)
  (unless
    ~g_content_type_is_unknown
    (set! ~g_content_type_is_unknown
      (fh-link-proc
        "g_content_type_is_unknown"
        ffi:int
        (list '*))))
  (let ((~type (unwrap~pointer type)))
    (~g_content_type_is_unknown ~type)))
(export g_content_type_is_unknown)

;; extern gchar *g_content_type_get_description(const gchar *type);
(define ~g_content_type_get_description #f)
(define (g_content_type_get_description type)
  (unless
    ~g_content_type_get_description
    (set! ~g_content_type_get_description
      (fh-link-proc
        "g_content_type_get_description"
        '*
        (list '*))))
  (let ((~type (unwrap~pointer type)))
    (~g_content_type_get_description ~type)))
(export g_content_type_get_description)

;; extern gchar *g_content_type_get_mime_type(const gchar *type);
(define ~g_content_type_get_mime_type #f)
(define (g_content_type_get_mime_type type)
  (unless
    ~g_content_type_get_mime_type
    (set! ~g_content_type_get_mime_type
      (fh-link-proc
        "g_content_type_get_mime_type"
        '*
        (list '*))))
  (let ((~type (unwrap~pointer type)))
    (~g_content_type_get_mime_type ~type)))
(export g_content_type_get_mime_type)

;; extern GIcon *g_content_type_get_icon(const gchar *type);
(define ~g_content_type_get_icon #f)
(define (g_content_type_get_icon type)
  (unless
    ~g_content_type_get_icon
    (set! ~g_content_type_get_icon
      (fh-link-proc
        "g_content_type_get_icon"
        '*
        (list '*))))
  (let ((~type (unwrap~pointer type)))
    (wrap-GIcon* (~g_content_type_get_icon ~type))))
(export g_content_type_get_icon)

;; extern GIcon *g_content_type_get_symbolic_icon(const gchar *type);
(define ~g_content_type_get_symbolic_icon #f)
(define (g_content_type_get_symbolic_icon type)
  (unless
    ~g_content_type_get_symbolic_icon
    (set! ~g_content_type_get_symbolic_icon
      (fh-link-proc
        "g_content_type_get_symbolic_icon"
        '*
        (list '*))))
  (let ((~type (unwrap~pointer type)))
    (wrap-GIcon*
      (~g_content_type_get_symbolic_icon ~type))))
(export g_content_type_get_symbolic_icon)

;; extern gchar *g_content_type_get_generic_icon_name(const gchar *type);
(define ~g_content_type_get_generic_icon_name #f)
(define (g_content_type_get_generic_icon_name type)
  (unless
    ~g_content_type_get_generic_icon_name
    (set! ~g_content_type_get_generic_icon_name
      (fh-link-proc
        "g_content_type_get_generic_icon_name"
        '*
        (list '*))))
  (let ((~type (unwrap~pointer type)))
    (~g_content_type_get_generic_icon_name ~type)))
(export g_content_type_get_generic_icon_name)

;; extern gboolean g_content_type_can_be_executable(const gchar *type);
(define ~g_content_type_can_be_executable #f)
(define (g_content_type_can_be_executable type)
  (unless
    ~g_content_type_can_be_executable
    (set! ~g_content_type_can_be_executable
      (fh-link-proc
        "g_content_type_can_be_executable"
        ffi:int
        (list '*))))
  (let ((~type (unwrap~pointer type)))
    (~g_content_type_can_be_executable ~type)))
(export g_content_type_can_be_executable)

;; extern gchar *g_content_type_from_mime_type(const gchar *mime_type);
(define ~g_content_type_from_mime_type #f)
(define (g_content_type_from_mime_type mime_type)
  (unless
    ~g_content_type_from_mime_type
    (set! ~g_content_type_from_mime_type
      (fh-link-proc
        "g_content_type_from_mime_type"
        '*
        (list '*))))
  (let ((~mime_type (unwrap~pointer mime_type)))
    (~g_content_type_from_mime_type ~mime_type)))
(export g_content_type_from_mime_type)

;; extern gchar *g_content_type_guess(const gchar *filename, const guchar *data
;;     , gsize data_size, gboolean *result_uncertain);
(define ~g_content_type_guess #f)
(define (g_content_type_guess
         filename
         data
         data_size
         result_uncertain)
  (unless
    ~g_content_type_guess
    (set! ~g_content_type_guess
      (fh-link-proc
        "g_content_type_guess"
        '*
        (list '* '* ffi:unsigned-long '*))))
  (let ((~filename (unwrap~pointer filename))
        (~data (unwrap~pointer data))
        (~data_size (unwrap~fixed data_size))
        (~result_uncertain
          (unwrap~pointer result_uncertain)))
    (~g_content_type_guess
      ~filename
      ~data
      ~data_size
      ~result_uncertain)))
(export g_content_type_guess)

;; extern gchar **g_content_type_guess_for_tree(GFile *root);
(define ~g_content_type_guess_for_tree #f)
(define (g_content_type_guess_for_tree root)
  (unless
    ~g_content_type_guess_for_tree
    (set! ~g_content_type_guess_for_tree
      (fh-link-proc
        "g_content_type_guess_for_tree"
        '*
        (list '*))))
  (let ((~root (unwrap-GFile* root)))
    (~g_content_type_guess_for_tree ~root)))
(export g_content_type_guess_for_tree)

;; extern GList *g_content_types_get_registered(void);
(define ~g_content_types_get_registered #f)
(define (g_content_types_get_registered)
  (unless
    ~g_content_types_get_registered
    (set! ~g_content_types_get_registered
      (fh-link-proc
        "g_content_types_get_registered"
        '*
        (list))))
  (let () (~g_content_types_get_registered)))
(export g_content_types_get_registered)

;; typedef struct _GConverterInputStreamClass GConverterInputStreamClass;
(define GConverterInputStreamClass-desc void)
(export GConverterInputStreamClass-desc)
(define GConverterInputStreamClass*-desc (bs:pointer (delay GConverterInputStreamClass-desc)))
(export GConverterInputStreamClass*-desc)
(define-fh-pointer-type GConverterInputStreamClass* GConverterInputStreamClass*-desc)

;; typedef struct _GConverterInputStreamPrivate GConverterInputStreamPrivate;
(define GConverterInputStreamPrivate-desc void)
(export GConverterInputStreamPrivate-desc)
(define GConverterInputStreamPrivate*-desc (bs:pointer GConverterInputStreamPrivate-desc))
(export GConverterInputStreamPrivate*-desc)
(define-fh-pointer-type GConverterInputStreamPrivate* GConverterInputStreamPrivate*-desc)

;; struct _GConverterInputStream {
;;   GFilterInputStream parent_instance;
;;   /*< private >*/
;;   GConverterInputStreamPrivate *priv;
;; };
(define struct-_GConverterInputStream-desc
  (bs:struct
    (list `(parent_instance ,GFilterInputStream-desc)
          `(priv ,(bs:pointer
                    (delay GConverterInputStreamPrivate*-desc))))))
(export struct-_GConverterInputStream-desc)
(define-fh-compound-type/p struct-_GConverterInputStream struct-_GConverterInputStream-desc)
(set! GConverterInputStream-desc struct-_GConverterInputStream-desc)
(define-fh-compound-type GConverterInputStream GConverterInputStream-desc)

;; struct _GConverterInputStreamClass {
;;   GFilterInputStreamClass parent_class;
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GConverterInputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GFilterInputStreamClass-desc)
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GConverterInputStreamClass-desc)
(define-fh-compound-type/p struct-_GConverterInputStreamClass struct-_GConverterInputStreamClass-desc)
(set! GConverterInputStreamClass-desc struct-_GConverterInputStreamClass-desc)
(define-fh-compound-type GConverterInputStreamClass GConverterInputStreamClass-desc)

;; extern GType g_converter_input_stream_get_type(void);
(define ~g_converter_input_stream_get_type #f)
(define (g_converter_input_stream_get_type)
  (unless
    ~g_converter_input_stream_get_type
    (set! ~g_converter_input_stream_get_type
      (fh-link-proc
        "g_converter_input_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_converter_input_stream_get_type)))
(export g_converter_input_stream_get_type)

;; extern GInputStream *g_converter_input_stream_new(GInputStream *base_stream
;;     , GConverter *converter);
(define ~g_converter_input_stream_new #f)
(define (g_converter_input_stream_new
         base_stream
         converter)
  (unless
    ~g_converter_input_stream_new
    (set! ~g_converter_input_stream_new
      (fh-link-proc
        "g_converter_input_stream_new"
        '*
        (list '* '*))))
  (let ((~base_stream (unwrap-GInputStream* base_stream))
        (~converter (unwrap-GConverter* converter)))
    (wrap-GInputStream*
      (~g_converter_input_stream_new
        ~base_stream
        ~converter))))
(export g_converter_input_stream_new)

;; extern GConverter *g_converter_input_stream_get_converter(
;;     GConverterInputStream *converter_stream);
(define ~g_converter_input_stream_get_converter #f)
(define (g_converter_input_stream_get_converter
         converter_stream)
  (unless
    ~g_converter_input_stream_get_converter
    (set! ~g_converter_input_stream_get_converter
      (fh-link-proc
        "g_converter_input_stream_get_converter"
        '*
        (list '*))))
  (let ((~converter_stream
          (unwrap-GConverterInputStream* converter_stream)))
    (wrap-GConverter*
      (~g_converter_input_stream_get_converter
        ~converter_stream))))
(export g_converter_input_stream_get_converter)

;; typedef struct _GConverterOutputStreamClass GConverterOutputStreamClass;
(define GConverterOutputStreamClass-desc void)
(export GConverterOutputStreamClass-desc)
(define GConverterOutputStreamClass*-desc (bs:pointer (delay GConverterOutputStreamClass-desc)))
(export GConverterOutputStreamClass*-desc)
(define-fh-pointer-type GConverterOutputStreamClass* GConverterOutputStreamClass*-desc)

;; typedef struct _GConverterOutputStreamPrivate GConverterOutputStreamPrivate
;;     ;
(define GConverterOutputStreamPrivate-desc void)
(export GConverterOutputStreamPrivate-desc)
(define GConverterOutputStreamPrivate*-desc (bs:pointer GConverterOutputStreamPrivate-desc))
(export GConverterOutputStreamPrivate*-desc)
(define-fh-pointer-type GConverterOutputStreamPrivate* GConverterOutputStreamPrivate*-desc)

;; struct _GConverterOutputStream {
;;   GFilterOutputStream parent_instance;
;;   /*< private >*/
;;   GConverterOutputStreamPrivate *priv;
;; };
(define struct-_GConverterOutputStream-desc
  (bs:struct
    (list `(parent_instance ,GFilterOutputStream-desc)
          `(priv ,(bs:pointer
                    (delay GConverterOutputStreamPrivate*-desc))))))
(export struct-_GConverterOutputStream-desc)
(define-fh-compound-type/p struct-_GConverterOutputStream struct-_GConverterOutputStream-desc)
(set! GConverterOutputStream-desc struct-_GConverterOutputStream-desc)
(define-fh-compound-type GConverterOutputStream GConverterOutputStream-desc)

;; struct _GConverterOutputStreamClass {
;;   GFilterOutputStreamClass parent_class;
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GConverterOutputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GFilterOutputStreamClass-desc)
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GConverterOutputStreamClass-desc)
(define-fh-compound-type/p struct-_GConverterOutputStreamClass struct-_GConverterOutputStreamClass-desc)
(set! GConverterOutputStreamClass-desc struct-_GConverterOutputStreamClass-desc)
(define-fh-compound-type GConverterOutputStreamClass GConverterOutputStreamClass-desc)

;; extern GType g_converter_output_stream_get_type(void);
(define ~g_converter_output_stream_get_type #f)
(define (g_converter_output_stream_get_type)
  (unless
    ~g_converter_output_stream_get_type
    (set! ~g_converter_output_stream_get_type
      (fh-link-proc
        "g_converter_output_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_converter_output_stream_get_type)))
(export g_converter_output_stream_get_type)

;; extern GOutputStream *g_converter_output_stream_new(GOutputStream *
;;     base_stream, GConverter *converter);
(define ~g_converter_output_stream_new #f)
(define (g_converter_output_stream_new
         base_stream
         converter)
  (unless
    ~g_converter_output_stream_new
    (set! ~g_converter_output_stream_new
      (fh-link-proc
        "g_converter_output_stream_new"
        '*
        (list '* '*))))
  (let ((~base_stream
          (unwrap-GOutputStream* base_stream))
        (~converter (unwrap-GConverter* converter)))
    (wrap-GOutputStream*
      (~g_converter_output_stream_new
        ~base_stream
        ~converter))))
(export g_converter_output_stream_new)

;; extern GConverter *g_converter_output_stream_get_converter(
;;     GConverterOutputStream *converter_stream);
(define ~g_converter_output_stream_get_converter #f)
(define (g_converter_output_stream_get_converter
         converter_stream)
  (unless
    ~g_converter_output_stream_get_converter
    (set! ~g_converter_output_stream_get_converter
      (fh-link-proc
        "g_converter_output_stream_get_converter"
        '*
        (list '*))))
  (let ((~converter_stream
          (unwrap-GConverterOutputStream* converter_stream)))
    (wrap-GConverter*
      (~g_converter_output_stream_get_converter
        ~converter_stream))))
(export g_converter_output_stream_get_converter)

;; typedef struct _GCredentialsClass GCredentialsClass;
(define GCredentialsClass-desc void)
(export GCredentialsClass-desc)
(define GCredentialsClass*-desc (bs:pointer GCredentialsClass-desc))
(export GCredentialsClass*-desc)
(define-fh-pointer-type GCredentialsClass* GCredentialsClass*-desc)

;; extern GType g_credentials_get_type(void);
(define ~g_credentials_get_type #f)
(define (g_credentials_get_type)
  (unless
    ~g_credentials_get_type
    (set! ~g_credentials_get_type
      (fh-link-proc
        "g_credentials_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_credentials_get_type)))
(export g_credentials_get_type)

;; extern GCredentials *g_credentials_new(void);
(define ~g_credentials_new #f)
(define (g_credentials_new)
  (unless
    ~g_credentials_new
    (set! ~g_credentials_new
      (fh-link-proc "g_credentials_new" '* (list))))
  (let ()
    (wrap-GCredentials* (~g_credentials_new))))
(export g_credentials_new)

;; extern gchar *g_credentials_to_string(GCredentials *credentials);
(define ~g_credentials_to_string #f)
(define (g_credentials_to_string credentials)
  (unless
    ~g_credentials_to_string
    (set! ~g_credentials_to_string
      (fh-link-proc
        "g_credentials_to_string"
        '*
        (list '*))))
  (let ((~credentials (unwrap-GCredentials* credentials)))
    (~g_credentials_to_string ~credentials)))
(export g_credentials_to_string)

;; extern gpointer g_credentials_get_native(GCredentials *credentials, 
;;     GCredentialsType native_type);
(define ~g_credentials_get_native #f)
(define (g_credentials_get_native
         credentials
         native_type)
  (unless
    ~g_credentials_get_native
    (set! ~g_credentials_get_native
      (fh-link-proc
        "g_credentials_get_native"
        '*
        (list '* ffi:int))))
  (let ((~credentials (unwrap-GCredentials* credentials))
        (~native_type (unwrap~fixed native_type)))
    (wrap-gpointer
      (~g_credentials_get_native
        ~credentials
        ~native_type))))
(export g_credentials_get_native)

;; extern void g_credentials_set_native(GCredentials *credentials, 
;;     GCredentialsType native_type, gpointer native);
(define ~g_credentials_set_native #f)
(define (g_credentials_set_native
         credentials
         native_type
         native)
  (unless
    ~g_credentials_set_native
    (set! ~g_credentials_set_native
      (fh-link-proc
        "g_credentials_set_native"
        ffi:void
        (list '* ffi:int '*))))
  (let ((~credentials (unwrap-GCredentials* credentials))
        (~native_type (unwrap~fixed native_type))
        (~native (unwrap-gpointer native)))
    (~g_credentials_set_native
      ~credentials
      ~native_type
      ~native)))
(export g_credentials_set_native)

;; extern gboolean g_credentials_is_same_user(GCredentials *credentials, 
;;     GCredentials *other_credentials, GError **error);
(define ~g_credentials_is_same_user #f)
(define (g_credentials_is_same_user
         credentials
         other_credentials
         error)
  (unless
    ~g_credentials_is_same_user
    (set! ~g_credentials_is_same_user
      (fh-link-proc
        "g_credentials_is_same_user"
        ffi:int
        (list '* '* '*))))
  (let ((~credentials (unwrap-GCredentials* credentials))
        (~other_credentials
          (unwrap-GCredentials* other_credentials))
        (~error (unwrap~pointer error)))
    (~g_credentials_is_same_user
      ~credentials
      ~other_credentials
      ~error)))
(export g_credentials_is_same_user)

;; extern pid_t g_credentials_get_unix_pid(GCredentials *credentials, GError **
;;     error);
(define ~g_credentials_get_unix_pid #f)
(define (g_credentials_get_unix_pid credentials error)
  (unless
    ~g_credentials_get_unix_pid
    (set! ~g_credentials_get_unix_pid
      (fh-link-proc
        "g_credentials_get_unix_pid"
        ffi:int
        (list '* '*))))
  (let ((~credentials (unwrap-GCredentials* credentials))
        (~error (unwrap~pointer error)))
    (~g_credentials_get_unix_pid ~credentials ~error)))
(export g_credentials_get_unix_pid)

;; extern uid_t g_credentials_get_unix_user(GCredentials *credentials, GError *
;;     *error);
(define ~g_credentials_get_unix_user #f)
(define (g_credentials_get_unix_user credentials error)
  (unless
    ~g_credentials_get_unix_user
    (set! ~g_credentials_get_unix_user
      (fh-link-proc
        "g_credentials_get_unix_user"
        ffi:unsigned-int
        (list '* '*))))
  (let ((~credentials (unwrap-GCredentials* credentials))
        (~error (unwrap~pointer error)))
    (~g_credentials_get_unix_user
      ~credentials
      ~error)))
(export g_credentials_get_unix_user)

;; extern gboolean g_credentials_set_unix_user(GCredentials *credentials, uid_t
;;      uid, GError **error);
(define ~g_credentials_set_unix_user #f)
(define (g_credentials_set_unix_user
         credentials
         uid
         error)
  (unless
    ~g_credentials_set_unix_user
    (set! ~g_credentials_set_unix_user
      (fh-link-proc
        "g_credentials_set_unix_user"
        ffi:int
        (list '* ffi:unsigned-int '*))))
  (let ((~credentials (unwrap-GCredentials* credentials))
        (~uid (unwrap~fixed uid))
        (~error (unwrap~pointer error)))
    (~g_credentials_set_unix_user
      ~credentials
      ~uid
      ~error)))
(export g_credentials_set_unix_user)

;; typedef struct _GDatagramBasedInterface GDatagramBasedInterface;
(define GDatagramBasedInterface-desc void)
(export GDatagramBasedInterface-desc)
(define GDatagramBasedInterface*-desc (bs:pointer (delay GDatagramBasedInterface-desc)))
(export GDatagramBasedInterface*-desc)
(define-fh-pointer-type GDatagramBasedInterface* GDatagramBasedInterface*-desc)

;; struct _GDatagramBasedInterface {
;;   GTypeInterface g_iface;
;;   /* Virtual table */
;;   gint (*receive_messages)(GDatagramBased *datagram_based, GInputMessage *
;;       messages, guint num_messages, gint flags, gint64 timeout, GCancellable
;;        *cancellable, GError **error);
;;   gint (*send_messages)(GDatagramBased *datagram_based, GOutputMessage *
;;       messages, guint num_messages, gint flags, gint64 timeout, GCancellable
;;        *cancellable, GError **error);
;;   GSource *(*create_source)(GDatagramBased *datagram_based, GIOCondition 
;;       condition, GCancellable *cancellable);
;;   GIOCondition (*condition_check)(GDatagramBased *datagram_based, 
;;       GIOCondition condition);
;;   gboolean (*condition_wait)(GDatagramBased *datagram_based, GIOCondition 
;;       condition, gint64 timeout, GCancellable *cancellable, GError **error)
;;       ;
;; };
(define struct-_GDatagramBasedInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(receive_messages ,(bs:pointer void))
          `(send_messages ,(bs:pointer void))
          `(create_source ,(bs:pointer void))
          `(condition_check ,(bs:pointer void))
          `(condition_wait ,(bs:pointer void)))))
(export struct-_GDatagramBasedInterface-desc)
(define-fh-compound-type/p struct-_GDatagramBasedInterface struct-_GDatagramBasedInterface-desc)
(set! GDatagramBasedInterface-desc struct-_GDatagramBasedInterface-desc)
(define-fh-compound-type GDatagramBasedInterface GDatagramBasedInterface-desc)

;; extern GType g_datagram_based_get_type(void);
(define ~g_datagram_based_get_type #f)
(define (g_datagram_based_get_type)
  (unless
    ~g_datagram_based_get_type
    (set! ~g_datagram_based_get_type
      (fh-link-proc
        "g_datagram_based_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_datagram_based_get_type)))
(export g_datagram_based_get_type)

;; extern gint g_datagram_based_receive_messages(GDatagramBased *datagram_based
;;     , GInputMessage *messages, guint num_messages, gint flags, gint64 
;;     timeout, GCancellable *cancellable, GError **error);
(define ~g_datagram_based_receive_messages #f)
(define (g_datagram_based_receive_messages
         datagram_based
         messages
         num_messages
         flags
         timeout
         cancellable
         error)
  (unless
    ~g_datagram_based_receive_messages
    (set! ~g_datagram_based_receive_messages
      (fh-link-proc
        "g_datagram_based_receive_messages"
        ffi:int
        (list '*
              '*
              ffi:unsigned-int
              ffi:int
              ffi:long
              '*
              '*))))
  (let ((~datagram_based
          (unwrap-GDatagramBased* datagram_based))
        (~messages (unwrap-GInputMessage* messages))
        (~num_messages (unwrap~fixed num_messages))
        (~flags (unwrap~fixed flags))
        (~timeout (unwrap~fixed timeout))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_datagram_based_receive_messages
      ~datagram_based
      ~messages
      ~num_messages
      ~flags
      ~timeout
      ~cancellable
      ~error)))
(export g_datagram_based_receive_messages)

;; extern gint g_datagram_based_send_messages(GDatagramBased *datagram_based, 
;;     GOutputMessage *messages, guint num_messages, gint flags, gint64 timeout
;;     , GCancellable *cancellable, GError **error);
(define ~g_datagram_based_send_messages #f)
(define (g_datagram_based_send_messages
         datagram_based
         messages
         num_messages
         flags
         timeout
         cancellable
         error)
  (unless
    ~g_datagram_based_send_messages
    (set! ~g_datagram_based_send_messages
      (fh-link-proc
        "g_datagram_based_send_messages"
        ffi:int
        (list '*
              '*
              ffi:unsigned-int
              ffi:int
              ffi:long
              '*
              '*))))
  (let ((~datagram_based
          (unwrap-GDatagramBased* datagram_based))
        (~messages (unwrap-GOutputMessage* messages))
        (~num_messages (unwrap~fixed num_messages))
        (~flags (unwrap~fixed flags))
        (~timeout (unwrap~fixed timeout))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_datagram_based_send_messages
      ~datagram_based
      ~messages
      ~num_messages
      ~flags
      ~timeout
      ~cancellable
      ~error)))
(export g_datagram_based_send_messages)

;; extern GSource *g_datagram_based_create_source(GDatagramBased *
;;     datagram_based, GIOCondition condition, GCancellable *cancellable);
(define ~g_datagram_based_create_source #f)
(define (g_datagram_based_create_source
         datagram_based
         condition
         cancellable)
  (unless
    ~g_datagram_based_create_source
    (set! ~g_datagram_based_create_source
      (fh-link-proc
        "g_datagram_based_create_source"
        '*
        (list '* ffi:int '*))))
  (let ((~datagram_based
          (unwrap-GDatagramBased* datagram_based))
        (~condition (unwrap~fixed condition))
        (~cancellable (unwrap-GCancellable* cancellable)))
    (~g_datagram_based_create_source
      ~datagram_based
      ~condition
      ~cancellable)))
(export g_datagram_based_create_source)

;; extern GIOCondition g_datagram_based_condition_check(GDatagramBased *
;;     datagram_based, GIOCondition condition);
(define ~g_datagram_based_condition_check #f)
(define (g_datagram_based_condition_check
         datagram_based
         condition)
  (unless
    ~g_datagram_based_condition_check
    (set! ~g_datagram_based_condition_check
      (fh-link-proc
        "g_datagram_based_condition_check"
        ffi:int
        (list '* ffi:int))))
  (let ((~datagram_based
          (unwrap-GDatagramBased* datagram_based))
        (~condition (unwrap~fixed condition)))
    (~g_datagram_based_condition_check
      ~datagram_based
      ~condition)))
(export g_datagram_based_condition_check)

;; extern gboolean g_datagram_based_condition_wait(GDatagramBased *
;;     datagram_based, GIOCondition condition, gint64 timeout, GCancellable *
;;     cancellable, GError **error);
(define ~g_datagram_based_condition_wait #f)
(define (g_datagram_based_condition_wait
         datagram_based
         condition
         timeout
         cancellable
         error)
  (unless
    ~g_datagram_based_condition_wait
    (set! ~g_datagram_based_condition_wait
      (fh-link-proc
        "g_datagram_based_condition_wait"
        ffi:int
        (list '* ffi:int ffi:long '* '*))))
  (let ((~datagram_based
          (unwrap-GDatagramBased* datagram_based))
        (~condition (unwrap~fixed condition))
        (~timeout (unwrap~fixed timeout))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_datagram_based_condition_wait
      ~datagram_based
      ~condition
      ~timeout
      ~cancellable
      ~error)))
(export g_datagram_based_condition_wait)

;; typedef struct _GDataInputStreamClass GDataInputStreamClass;
(define GDataInputStreamClass-desc void)
(export GDataInputStreamClass-desc)
(define GDataInputStreamClass*-desc (bs:pointer (delay GDataInputStreamClass-desc)))
(export GDataInputStreamClass*-desc)
(define-fh-pointer-type GDataInputStreamClass* GDataInputStreamClass*-desc)

;; typedef struct _GDataInputStreamPrivate GDataInputStreamPrivate;
(define GDataInputStreamPrivate-desc void)
(export GDataInputStreamPrivate-desc)
(define GDataInputStreamPrivate*-desc (bs:pointer GDataInputStreamPrivate-desc))
(export GDataInputStreamPrivate*-desc)
(define-fh-pointer-type GDataInputStreamPrivate* GDataInputStreamPrivate*-desc)

;; struct _GDataInputStream {
;;   GBufferedInputStream parent_instance;
;;   /*< private >*/
;;   GDataInputStreamPrivate *priv;
;; };
(define struct-_GDataInputStream-desc
  (bs:struct
    (list `(parent_instance ,GBufferedInputStream-desc)
          `(priv ,(bs:pointer
                    (delay GDataInputStreamPrivate*-desc))))))
(export struct-_GDataInputStream-desc)
(define-fh-compound-type/p struct-_GDataInputStream struct-_GDataInputStream-desc)
(set! GDataInputStream-desc struct-_GDataInputStream-desc)
(define-fh-compound-type GDataInputStream GDataInputStream-desc)

;; struct _GDataInputStreamClass {
;;   GBufferedInputStreamClass parent_class;
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GDataInputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GBufferedInputStreamClass-desc)
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GDataInputStreamClass-desc)
(define-fh-compound-type/p struct-_GDataInputStreamClass struct-_GDataInputStreamClass-desc)
(set! GDataInputStreamClass-desc struct-_GDataInputStreamClass-desc)
(define-fh-compound-type GDataInputStreamClass GDataInputStreamClass-desc)

;; extern GType g_data_input_stream_get_type(void);
(define ~g_data_input_stream_get_type #f)
(define (g_data_input_stream_get_type)
  (unless
    ~g_data_input_stream_get_type
    (set! ~g_data_input_stream_get_type
      (fh-link-proc
        "g_data_input_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_data_input_stream_get_type)))
(export g_data_input_stream_get_type)

;; extern GDataInputStream *g_data_input_stream_new(GInputStream *base_stream)
;;     ;
(define ~g_data_input_stream_new #f)
(define (g_data_input_stream_new base_stream)
  (unless
    ~g_data_input_stream_new
    (set! ~g_data_input_stream_new
      (fh-link-proc
        "g_data_input_stream_new"
        '*
        (list '*))))
  (let ((~base_stream (unwrap-GInputStream* base_stream)))
    (wrap-GDataInputStream*
      (~g_data_input_stream_new ~base_stream))))
(export g_data_input_stream_new)

;; extern void g_data_input_stream_set_byte_order(GDataInputStream *stream, 
;;     GDataStreamByteOrder order);
(define ~g_data_input_stream_set_byte_order #f)
(define (g_data_input_stream_set_byte_order stream order)
  (unless
    ~g_data_input_stream_set_byte_order
    (set! ~g_data_input_stream_set_byte_order
      (fh-link-proc
        "g_data_input_stream_set_byte_order"
        ffi:void
        (list '* ffi:int))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~order (unwrap~fixed order)))
    (~g_data_input_stream_set_byte_order
      ~stream
      ~order)))
(export g_data_input_stream_set_byte_order)

;; extern GDataStreamByteOrder g_data_input_stream_get_byte_order(
;;     GDataInputStream *stream);
(define ~g_data_input_stream_get_byte_order #f)
(define (g_data_input_stream_get_byte_order stream)
  (unless
    ~g_data_input_stream_get_byte_order
    (set! ~g_data_input_stream_get_byte_order
      (fh-link-proc
        "g_data_input_stream_get_byte_order"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GDataInputStream* stream)))
    (~g_data_input_stream_get_byte_order ~stream)))
(export g_data_input_stream_get_byte_order)

;; extern void g_data_input_stream_set_newline_type(GDataInputStream *stream, 
;;     GDataStreamNewlineType type);
(define ~g_data_input_stream_set_newline_type #f)
(define (g_data_input_stream_set_newline_type
         stream
         type)
  (unless
    ~g_data_input_stream_set_newline_type
    (set! ~g_data_input_stream_set_newline_type
      (fh-link-proc
        "g_data_input_stream_set_newline_type"
        ffi:void
        (list '* ffi:int))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~type (unwrap~fixed type)))
    (~g_data_input_stream_set_newline_type
      ~stream
      ~type)))
(export g_data_input_stream_set_newline_type)

;; extern GDataStreamNewlineType g_data_input_stream_get_newline_type(
;;     GDataInputStream *stream);
(define ~g_data_input_stream_get_newline_type #f)
(define (g_data_input_stream_get_newline_type stream)
  (unless
    ~g_data_input_stream_get_newline_type
    (set! ~g_data_input_stream_get_newline_type
      (fh-link-proc
        "g_data_input_stream_get_newline_type"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GDataInputStream* stream)))
    (~g_data_input_stream_get_newline_type ~stream)))
(export g_data_input_stream_get_newline_type)

;; extern guchar g_data_input_stream_read_byte(GDataInputStream *stream, 
;;     GCancellable *cancellable, GError **error);
(define ~g_data_input_stream_read_byte #f)
(define (g_data_input_stream_read_byte
         stream
         cancellable
         error)
  (unless
    ~g_data_input_stream_read_byte
    (set! ~g_data_input_stream_read_byte
      (fh-link-proc
        "g_data_input_stream_read_byte"
        ffi:unsigned-int
        (list '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_byte
      ~stream
      ~cancellable
      ~error)))
(export g_data_input_stream_read_byte)

;; extern gint16 g_data_input_stream_read_int16(GDataInputStream *stream, 
;;     GCancellable *cancellable, GError **error);
(define ~g_data_input_stream_read_int16 #f)
(define (g_data_input_stream_read_int16
         stream
         cancellable
         error)
  (unless
    ~g_data_input_stream_read_int16
    (set! ~g_data_input_stream_read_int16
      (fh-link-proc
        "g_data_input_stream_read_int16"
        ffi:short
        (list '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_int16
      ~stream
      ~cancellable
      ~error)))
(export g_data_input_stream_read_int16)

;; extern guint16 g_data_input_stream_read_uint16(GDataInputStream *stream, 
;;     GCancellable *cancellable, GError **error);
(define ~g_data_input_stream_read_uint16 #f)
(define (g_data_input_stream_read_uint16
         stream
         cancellable
         error)
  (unless
    ~g_data_input_stream_read_uint16
    (set! ~g_data_input_stream_read_uint16
      (fh-link-proc
        "g_data_input_stream_read_uint16"
        ffi:unsigned-short
        (list '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_uint16
      ~stream
      ~cancellable
      ~error)))
(export g_data_input_stream_read_uint16)

;; extern gint32 g_data_input_stream_read_int32(GDataInputStream *stream, 
;;     GCancellable *cancellable, GError **error);
(define ~g_data_input_stream_read_int32 #f)
(define (g_data_input_stream_read_int32
         stream
         cancellable
         error)
  (unless
    ~g_data_input_stream_read_int32
    (set! ~g_data_input_stream_read_int32
      (fh-link-proc
        "g_data_input_stream_read_int32"
        ffi:int
        (list '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_int32
      ~stream
      ~cancellable
      ~error)))
(export g_data_input_stream_read_int32)

;; extern guint32 g_data_input_stream_read_uint32(GDataInputStream *stream, 
;;     GCancellable *cancellable, GError **error);
(define ~g_data_input_stream_read_uint32 #f)
(define (g_data_input_stream_read_uint32
         stream
         cancellable
         error)
  (unless
    ~g_data_input_stream_read_uint32
    (set! ~g_data_input_stream_read_uint32
      (fh-link-proc
        "g_data_input_stream_read_uint32"
        ffi:unsigned-int
        (list '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_uint32
      ~stream
      ~cancellable
      ~error)))
(export g_data_input_stream_read_uint32)

;; extern gint64 g_data_input_stream_read_int64(GDataInputStream *stream, 
;;     GCancellable *cancellable, GError **error);
(define ~g_data_input_stream_read_int64 #f)
(define (g_data_input_stream_read_int64
         stream
         cancellable
         error)
  (unless
    ~g_data_input_stream_read_int64
    (set! ~g_data_input_stream_read_int64
      (fh-link-proc
        "g_data_input_stream_read_int64"
        ffi:long
        (list '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_int64
      ~stream
      ~cancellable
      ~error)))
(export g_data_input_stream_read_int64)

;; extern guint64 g_data_input_stream_read_uint64(GDataInputStream *stream, 
;;     GCancellable *cancellable, GError **error);
(define ~g_data_input_stream_read_uint64 #f)
(define (g_data_input_stream_read_uint64
         stream
         cancellable
         error)
  (unless
    ~g_data_input_stream_read_uint64
    (set! ~g_data_input_stream_read_uint64
      (fh-link-proc
        "g_data_input_stream_read_uint64"
        ffi:unsigned-long
        (list '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_uint64
      ~stream
      ~cancellable
      ~error)))
(export g_data_input_stream_read_uint64)

;; extern char *g_data_input_stream_read_line(GDataInputStream *stream, gsize *
;;     length, GCancellable *cancellable, GError **error);
(define ~g_data_input_stream_read_line #f)
(define (g_data_input_stream_read_line
         stream
         length
         cancellable
         error)
  (unless
    ~g_data_input_stream_read_line
    (set! ~g_data_input_stream_read_line
      (fh-link-proc
        "g_data_input_stream_read_line"
        '*
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~length (unwrap~pointer length))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_line
      ~stream
      ~length
      ~cancellable
      ~error)))
(export g_data_input_stream_read_line)

;; extern char *g_data_input_stream_read_line_utf8(GDataInputStream *stream, 
;;     gsize *length, GCancellable *cancellable, GError **error);
(define ~g_data_input_stream_read_line_utf8 #f)
(define (g_data_input_stream_read_line_utf8
         stream
         length
         cancellable
         error)
  (unless
    ~g_data_input_stream_read_line_utf8
    (set! ~g_data_input_stream_read_line_utf8
      (fh-link-proc
        "g_data_input_stream_read_line_utf8"
        '*
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~length (unwrap~pointer length))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_line_utf8
      ~stream
      ~length
      ~cancellable
      ~error)))
(export g_data_input_stream_read_line_utf8)

;; extern void g_data_input_stream_read_line_async(GDataInputStream *stream, 
;;     gint io_priority, GCancellable *cancellable, GAsyncReadyCallback 
;;     callback, gpointer user_data);
(define ~g_data_input_stream_read_line_async #f)
(define (g_data_input_stream_read_line_async
         stream
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_data_input_stream_read_line_async
    (set! ~g_data_input_stream_read_line_async
      (fh-link-proc
        "g_data_input_stream_read_line_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_data_input_stream_read_line_async
      ~stream
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_data_input_stream_read_line_async)

;; extern char *g_data_input_stream_read_line_finish(GDataInputStream *stream, 
;;     GAsyncResult *result, gsize *length, GError **error);
(define ~g_data_input_stream_read_line_finish #f)
(define (g_data_input_stream_read_line_finish
         stream
         result
         length
         error)
  (unless
    ~g_data_input_stream_read_line_finish
    (set! ~g_data_input_stream_read_line_finish
      (fh-link-proc
        "g_data_input_stream_read_line_finish"
        '*
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~length (unwrap~pointer length))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_line_finish
      ~stream
      ~result
      ~length
      ~error)))
(export g_data_input_stream_read_line_finish)

;; extern char *g_data_input_stream_read_line_finish_utf8(GDataInputStream *
;;     stream, GAsyncResult *result, gsize *length, GError **error);
(define ~g_data_input_stream_read_line_finish_utf8 #f)
(define (g_data_input_stream_read_line_finish_utf8
         stream
         result
         length
         error)
  (unless
    ~g_data_input_stream_read_line_finish_utf8
    (set! ~g_data_input_stream_read_line_finish_utf8
      (fh-link-proc
        "g_data_input_stream_read_line_finish_utf8"
        '*
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~length (unwrap~pointer length))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_line_finish_utf8
      ~stream
      ~result
      ~length
      ~error)))
(export g_data_input_stream_read_line_finish_utf8)

;; extern char *g_data_input_stream_read_until(GDataInputStream *stream, const 
;;     gchar *stop_chars, gsize *length, GCancellable *cancellable, GError **
;;     error);
(define ~g_data_input_stream_read_until #f)
(define (g_data_input_stream_read_until
         stream
         stop_chars
         length
         cancellable
         error)
  (unless
    ~g_data_input_stream_read_until
    (set! ~g_data_input_stream_read_until
      (fh-link-proc
        "g_data_input_stream_read_until"
        '*
        (list '* '* '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~stop_chars (unwrap~pointer stop_chars))
        (~length (unwrap~pointer length))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_until
      ~stream
      ~stop_chars
      ~length
      ~cancellable
      ~error)))
(export g_data_input_stream_read_until)

;; extern void g_data_input_stream_read_until_async(GDataInputStream *stream, 
;;     const gchar *stop_chars, gint io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_data_input_stream_read_until_async #f)
(define (g_data_input_stream_read_until_async
         stream
         stop_chars
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_data_input_stream_read_until_async
    (set! ~g_data_input_stream_read_until_async
      (fh-link-proc
        "g_data_input_stream_read_until_async"
        ffi:void
        (list '* '* ffi:int '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~stop_chars (unwrap~pointer stop_chars))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_data_input_stream_read_until_async
      ~stream
      ~stop_chars
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_data_input_stream_read_until_async)

;; extern char *g_data_input_stream_read_until_finish(GDataInputStream *stream
;;     , GAsyncResult *result, gsize *length, GError **error);
(define ~g_data_input_stream_read_until_finish #f)
(define (g_data_input_stream_read_until_finish
         stream
         result
         length
         error)
  (unless
    ~g_data_input_stream_read_until_finish
    (set! ~g_data_input_stream_read_until_finish
      (fh-link-proc
        "g_data_input_stream_read_until_finish"
        '*
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~length (unwrap~pointer length))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_until_finish
      ~stream
      ~result
      ~length
      ~error)))
(export g_data_input_stream_read_until_finish)

;; extern char *g_data_input_stream_read_upto(GDataInputStream *stream, const 
;;     gchar *stop_chars, gssize stop_chars_len, gsize *length, GCancellable *
;;     cancellable, GError **error);
(define ~g_data_input_stream_read_upto #f)
(define (g_data_input_stream_read_upto
         stream
         stop_chars
         stop_chars_len
         length
         cancellable
         error)
  (unless
    ~g_data_input_stream_read_upto
    (set! ~g_data_input_stream_read_upto
      (fh-link-proc
        "g_data_input_stream_read_upto"
        '*
        (list '* '* ffi:long '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~stop_chars (unwrap~pointer stop_chars))
        (~stop_chars_len (unwrap~fixed stop_chars_len))
        (~length (unwrap~pointer length))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_upto
      ~stream
      ~stop_chars
      ~stop_chars_len
      ~length
      ~cancellable
      ~error)))
(export g_data_input_stream_read_upto)

;; extern void g_data_input_stream_read_upto_async(GDataInputStream *stream, 
;;     const gchar *stop_chars, gssize stop_chars_len, gint io_priority, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_data_input_stream_read_upto_async #f)
(define (g_data_input_stream_read_upto_async
         stream
         stop_chars
         stop_chars_len
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_data_input_stream_read_upto_async
    (set! ~g_data_input_stream_read_upto_async
      (fh-link-proc
        "g_data_input_stream_read_upto_async"
        ffi:void
        (list '* '* ffi:long ffi:int '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~stop_chars (unwrap~pointer stop_chars))
        (~stop_chars_len (unwrap~fixed stop_chars_len))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_data_input_stream_read_upto_async
      ~stream
      ~stop_chars
      ~stop_chars_len
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_data_input_stream_read_upto_async)

;; extern char *g_data_input_stream_read_upto_finish(GDataInputStream *stream, 
;;     GAsyncResult *result, gsize *length, GError **error);
(define ~g_data_input_stream_read_upto_finish #f)
(define (g_data_input_stream_read_upto_finish
         stream
         result
         length
         error)
  (unless
    ~g_data_input_stream_read_upto_finish
    (set! ~g_data_input_stream_read_upto_finish
      (fh-link-proc
        "g_data_input_stream_read_upto_finish"
        '*
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GDataInputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~length (unwrap~pointer length))
        (~error (unwrap~pointer error)))
    (~g_data_input_stream_read_upto_finish
      ~stream
      ~result
      ~length
      ~error)))
(export g_data_input_stream_read_upto_finish)

;; typedef struct _GDataOutputStream GDataOutputStream;
(define GDataOutputStream-desc void)
(export GDataOutputStream-desc)
(define GDataOutputStream*-desc (bs:pointer (delay GDataOutputStream-desc)))
(export GDataOutputStream*-desc)
(define-fh-pointer-type GDataOutputStream* GDataOutputStream*-desc)

;; typedef struct _GDataOutputStreamClass GDataOutputStreamClass;
(define GDataOutputStreamClass-desc void)
(export GDataOutputStreamClass-desc)
(define GDataOutputStreamClass*-desc (bs:pointer (delay GDataOutputStreamClass-desc)))
(export GDataOutputStreamClass*-desc)
(define-fh-pointer-type GDataOutputStreamClass* GDataOutputStreamClass*-desc)

;; typedef struct _GDataOutputStreamPrivate GDataOutputStreamPrivate;
(define GDataOutputStreamPrivate-desc void)
(export GDataOutputStreamPrivate-desc)
(define GDataOutputStreamPrivate*-desc (bs:pointer GDataOutputStreamPrivate-desc))
(export GDataOutputStreamPrivate*-desc)
(define-fh-pointer-type GDataOutputStreamPrivate* GDataOutputStreamPrivate*-desc)

;; struct _GDataOutputStream {
;;   GFilterOutputStream parent_instance;
;;   /*< private >*/
;;   GDataOutputStreamPrivate *priv;
;; };
(define struct-_GDataOutputStream-desc
  (bs:struct
    (list `(parent_instance ,GFilterOutputStream-desc)
          `(priv ,(bs:pointer
                    (delay GDataOutputStreamPrivate*-desc))))))
(export struct-_GDataOutputStream-desc)
(define-fh-compound-type/p struct-_GDataOutputStream struct-_GDataOutputStream-desc)
(set! GDataOutputStream-desc struct-_GDataOutputStream-desc)
(define-fh-compound-type GDataOutputStream GDataOutputStream-desc)

;; struct _GDataOutputStreamClass {
;;   GFilterOutputStreamClass parent_class;
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GDataOutputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GFilterOutputStreamClass-desc)
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GDataOutputStreamClass-desc)
(define-fh-compound-type/p struct-_GDataOutputStreamClass struct-_GDataOutputStreamClass-desc)
(set! GDataOutputStreamClass-desc struct-_GDataOutputStreamClass-desc)
(define-fh-compound-type GDataOutputStreamClass GDataOutputStreamClass-desc)

;; extern GType g_data_output_stream_get_type(void);
(define ~g_data_output_stream_get_type #f)
(define (g_data_output_stream_get_type)
  (unless
    ~g_data_output_stream_get_type
    (set! ~g_data_output_stream_get_type
      (fh-link-proc
        "g_data_output_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_data_output_stream_get_type)))
(export g_data_output_stream_get_type)

;; extern GDataOutputStream *g_data_output_stream_new(GOutputStream *
;;     base_stream);
(define ~g_data_output_stream_new #f)
(define (g_data_output_stream_new base_stream)
  (unless
    ~g_data_output_stream_new
    (set! ~g_data_output_stream_new
      (fh-link-proc
        "g_data_output_stream_new"
        '*
        (list '*))))
  (let ((~base_stream
          (unwrap-GOutputStream* base_stream)))
    (wrap-GDataOutputStream*
      (~g_data_output_stream_new ~base_stream))))
(export g_data_output_stream_new)

;; extern void g_data_output_stream_set_byte_order(GDataOutputStream *stream, 
;;     GDataStreamByteOrder order);
(define ~g_data_output_stream_set_byte_order #f)
(define (g_data_output_stream_set_byte_order
         stream
         order)
  (unless
    ~g_data_output_stream_set_byte_order
    (set! ~g_data_output_stream_set_byte_order
      (fh-link-proc
        "g_data_output_stream_set_byte_order"
        ffi:void
        (list '* ffi:int))))
  (let ((~stream (unwrap-GDataOutputStream* stream))
        (~order (unwrap~fixed order)))
    (~g_data_output_stream_set_byte_order
      ~stream
      ~order)))
(export g_data_output_stream_set_byte_order)

;; extern GDataStreamByteOrder g_data_output_stream_get_byte_order(
;;     GDataOutputStream *stream);
(define ~g_data_output_stream_get_byte_order #f)
(define (g_data_output_stream_get_byte_order stream)
  (unless
    ~g_data_output_stream_get_byte_order
    (set! ~g_data_output_stream_get_byte_order
      (fh-link-proc
        "g_data_output_stream_get_byte_order"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GDataOutputStream* stream)))
    (~g_data_output_stream_get_byte_order ~stream)))
(export g_data_output_stream_get_byte_order)

;; extern gboolean g_data_output_stream_put_byte(GDataOutputStream *stream, 
;;     guchar data, GCancellable *cancellable, GError **error);
(define ~g_data_output_stream_put_byte #f)
(define (g_data_output_stream_put_byte
         stream
         data
         cancellable
         error)
  (unless
    ~g_data_output_stream_put_byte
    (set! ~g_data_output_stream_put_byte
      (fh-link-proc
        "g_data_output_stream_put_byte"
        ffi:int
        (list '* ffi:unsigned-int '* '*))))
  (let ((~stream (unwrap-GDataOutputStream* stream))
        (~data (unwrap~fixed data))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_output_stream_put_byte
      ~stream
      ~data
      ~cancellable
      ~error)))
(export g_data_output_stream_put_byte)

;; extern gboolean g_data_output_stream_put_int16(GDataOutputStream *stream, 
;;     gint16 data, GCancellable *cancellable, GError **error);
(define ~g_data_output_stream_put_int16 #f)
(define (g_data_output_stream_put_int16
         stream
         data
         cancellable
         error)
  (unless
    ~g_data_output_stream_put_int16
    (set! ~g_data_output_stream_put_int16
      (fh-link-proc
        "g_data_output_stream_put_int16"
        ffi:int
        (list '* ffi:short '* '*))))
  (let ((~stream (unwrap-GDataOutputStream* stream))
        (~data (unwrap~fixed data))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_output_stream_put_int16
      ~stream
      ~data
      ~cancellable
      ~error)))
(export g_data_output_stream_put_int16)

;; extern gboolean g_data_output_stream_put_uint16(GDataOutputStream *stream, 
;;     guint16 data, GCancellable *cancellable, GError **error);
(define ~g_data_output_stream_put_uint16 #f)
(define (g_data_output_stream_put_uint16
         stream
         data
         cancellable
         error)
  (unless
    ~g_data_output_stream_put_uint16
    (set! ~g_data_output_stream_put_uint16
      (fh-link-proc
        "g_data_output_stream_put_uint16"
        ffi:int
        (list '* ffi:unsigned-short '* '*))))
  (let ((~stream (unwrap-GDataOutputStream* stream))
        (~data (unwrap~fixed data))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_output_stream_put_uint16
      ~stream
      ~data
      ~cancellable
      ~error)))
(export g_data_output_stream_put_uint16)

;; extern gboolean g_data_output_stream_put_int32(GDataOutputStream *stream, 
;;     gint32 data, GCancellable *cancellable, GError **error);
(define ~g_data_output_stream_put_int32 #f)
(define (g_data_output_stream_put_int32
         stream
         data
         cancellable
         error)
  (unless
    ~g_data_output_stream_put_int32
    (set! ~g_data_output_stream_put_int32
      (fh-link-proc
        "g_data_output_stream_put_int32"
        ffi:int
        (list '* ffi:int '* '*))))
  (let ((~stream (unwrap-GDataOutputStream* stream))
        (~data (unwrap~fixed data))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_output_stream_put_int32
      ~stream
      ~data
      ~cancellable
      ~error)))
(export g_data_output_stream_put_int32)

;; extern gboolean g_data_output_stream_put_uint32(GDataOutputStream *stream, 
;;     guint32 data, GCancellable *cancellable, GError **error);
(define ~g_data_output_stream_put_uint32 #f)
(define (g_data_output_stream_put_uint32
         stream
         data
         cancellable
         error)
  (unless
    ~g_data_output_stream_put_uint32
    (set! ~g_data_output_stream_put_uint32
      (fh-link-proc
        "g_data_output_stream_put_uint32"
        ffi:int
        (list '* ffi:unsigned-int '* '*))))
  (let ((~stream (unwrap-GDataOutputStream* stream))
        (~data (unwrap~fixed data))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_output_stream_put_uint32
      ~stream
      ~data
      ~cancellable
      ~error)))
(export g_data_output_stream_put_uint32)

;; extern gboolean g_data_output_stream_put_int64(GDataOutputStream *stream, 
;;     gint64 data, GCancellable *cancellable, GError **error);
(define ~g_data_output_stream_put_int64 #f)
(define (g_data_output_stream_put_int64
         stream
         data
         cancellable
         error)
  (unless
    ~g_data_output_stream_put_int64
    (set! ~g_data_output_stream_put_int64
      (fh-link-proc
        "g_data_output_stream_put_int64"
        ffi:int
        (list '* ffi:long '* '*))))
  (let ((~stream (unwrap-GDataOutputStream* stream))
        (~data (unwrap~fixed data))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_output_stream_put_int64
      ~stream
      ~data
      ~cancellable
      ~error)))
(export g_data_output_stream_put_int64)

;; extern gboolean g_data_output_stream_put_uint64(GDataOutputStream *stream, 
;;     guint64 data, GCancellable *cancellable, GError **error);
(define ~g_data_output_stream_put_uint64 #f)
(define (g_data_output_stream_put_uint64
         stream
         data
         cancellable
         error)
  (unless
    ~g_data_output_stream_put_uint64
    (set! ~g_data_output_stream_put_uint64
      (fh-link-proc
        "g_data_output_stream_put_uint64"
        ffi:int
        (list '* ffi:unsigned-long '* '*))))
  (let ((~stream (unwrap-GDataOutputStream* stream))
        (~data (unwrap~fixed data))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_output_stream_put_uint64
      ~stream
      ~data
      ~cancellable
      ~error)))
(export g_data_output_stream_put_uint64)

;; extern gboolean g_data_output_stream_put_string(GDataOutputStream *stream, 
;;     const char *str, GCancellable *cancellable, GError **error);
(define ~g_data_output_stream_put_string #f)
(define (g_data_output_stream_put_string
         stream
         str
         cancellable
         error)
  (unless
    ~g_data_output_stream_put_string
    (set! ~g_data_output_stream_put_string
      (fh-link-proc
        "g_data_output_stream_put_string"
        ffi:int
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GDataOutputStream* stream))
        (~str (unwrap~pointer str))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_data_output_stream_put_string
      ~stream
      ~str
      ~cancellable
      ~error)))
(export g_data_output_stream_put_string)

;; extern gchar *g_dbus_address_escape_value(const gchar *string);
(define ~g_dbus_address_escape_value #f)
(define (g_dbus_address_escape_value string)
  (unless
    ~g_dbus_address_escape_value
    (set! ~g_dbus_address_escape_value
      (fh-link-proc
        "g_dbus_address_escape_value"
        '*
        (list '*))))
  (let ((~string (unwrap~pointer string)))
    (~g_dbus_address_escape_value ~string)))
(export g_dbus_address_escape_value)

;; extern gboolean g_dbus_is_address(const gchar *string);
(define ~g_dbus_is_address #f)
(define (g_dbus_is_address string)
  (unless
    ~g_dbus_is_address
    (set! ~g_dbus_is_address
      (fh-link-proc
        "g_dbus_is_address"
        ffi:int
        (list '*))))
  (let ((~string (unwrap~pointer string)))
    (~g_dbus_is_address ~string)))
(export g_dbus_is_address)

;; extern gboolean g_dbus_is_supported_address(const gchar *string, GError **
;;     error);
(define ~g_dbus_is_supported_address #f)
(define (g_dbus_is_supported_address string error)
  (unless
    ~g_dbus_is_supported_address
    (set! ~g_dbus_is_supported_address
      (fh-link-proc
        "g_dbus_is_supported_address"
        ffi:int
        (list '* '*))))
  (let ((~string (unwrap~pointer string))
        (~error (unwrap~pointer error)))
    (~g_dbus_is_supported_address ~string ~error)))
(export g_dbus_is_supported_address)

;; extern void g_dbus_address_get_stream(const gchar *address, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_dbus_address_get_stream #f)
(define (g_dbus_address_get_stream
         address
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_address_get_stream
    (set! ~g_dbus_address_get_stream
      (fh-link-proc
        "g_dbus_address_get_stream"
        ffi:void
        (list '* '* '* '*))))
  (let ((~address (unwrap~pointer address))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_address_get_stream
      ~address
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_address_get_stream)

;; extern GIOStream *g_dbus_address_get_stream_finish(GAsyncResult *res, gchar 
;;     **out_guid, GError **error);
(define ~g_dbus_address_get_stream_finish #f)
(define (g_dbus_address_get_stream_finish
         res
         out_guid
         error)
  (unless
    ~g_dbus_address_get_stream_finish
    (set! ~g_dbus_address_get_stream_finish
      (fh-link-proc
        "g_dbus_address_get_stream_finish"
        '*
        (list '* '* '*))))
  (let ((~res (unwrap-GAsyncResult* res))
        (~out_guid (unwrap~pointer out_guid))
        (~error (unwrap~pointer error)))
    (wrap-GIOStream*
      (~g_dbus_address_get_stream_finish
        ~res
        ~out_guid
        ~error))))
(export g_dbus_address_get_stream_finish)

;; extern GIOStream *g_dbus_address_get_stream_sync(const gchar *address, gchar
;;      **out_guid, GCancellable *cancellable, GError **error);
(define ~g_dbus_address_get_stream_sync #f)
(define (g_dbus_address_get_stream_sync
         address
         out_guid
         cancellable
         error)
  (unless
    ~g_dbus_address_get_stream_sync
    (set! ~g_dbus_address_get_stream_sync
      (fh-link-proc
        "g_dbus_address_get_stream_sync"
        '*
        (list '* '* '* '*))))
  (let ((~address (unwrap~pointer address))
        (~out_guid (unwrap~pointer out_guid))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GIOStream*
      (~g_dbus_address_get_stream_sync
        ~address
        ~out_guid
        ~cancellable
        ~error))))
(export g_dbus_address_get_stream_sync)

;; extern gchar *g_dbus_address_get_for_bus_sync(GBusType bus_type, 
;;     GCancellable *cancellable, GError **error);
(define ~g_dbus_address_get_for_bus_sync #f)
(define (g_dbus_address_get_for_bus_sync
         bus_type
         cancellable
         error)
  (unless
    ~g_dbus_address_get_for_bus_sync
    (set! ~g_dbus_address_get_for_bus_sync
      (fh-link-proc
        "g_dbus_address_get_for_bus_sync"
        '*
        (list ffi:int '* '*))))
  (let ((~bus_type (unwrap~fixed bus_type))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_dbus_address_get_for_bus_sync
      ~bus_type
      ~cancellable
      ~error)))
(export g_dbus_address_get_for_bus_sync)

;; extern GType g_dbus_auth_observer_get_type(void);
(define ~g_dbus_auth_observer_get_type #f)
(define (g_dbus_auth_observer_get_type)
  (unless
    ~g_dbus_auth_observer_get_type
    (set! ~g_dbus_auth_observer_get_type
      (fh-link-proc
        "g_dbus_auth_observer_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_auth_observer_get_type)))
(export g_dbus_auth_observer_get_type)

;; extern GDBusAuthObserver *g_dbus_auth_observer_new(void);
(define ~g_dbus_auth_observer_new #f)
(define (g_dbus_auth_observer_new)
  (unless
    ~g_dbus_auth_observer_new
    (set! ~g_dbus_auth_observer_new
      (fh-link-proc
        "g_dbus_auth_observer_new"
        '*
        (list))))
  (let ()
    (wrap-GDBusAuthObserver*
      (~g_dbus_auth_observer_new))))
(export g_dbus_auth_observer_new)

;; extern gboolean g_dbus_auth_observer_authorize_authenticated_peer(
;;     GDBusAuthObserver *observer, GIOStream *stream, GCredentials *
;;     credentials);
(define ~g_dbus_auth_observer_authorize_authenticated_peer #f)
(define (g_dbus_auth_observer_authorize_authenticated_peer
         observer
         stream
         credentials)
  (unless
    ~g_dbus_auth_observer_authorize_authenticated_peer
    (set! ~g_dbus_auth_observer_authorize_authenticated_peer
      (fh-link-proc
        "g_dbus_auth_observer_authorize_authenticated_peer"
        ffi:int
        (list '* '* '*))))
  (let ((~observer (unwrap-GDBusAuthObserver* observer))
        (~stream (unwrap-GIOStream* stream))
        (~credentials (unwrap-GCredentials* credentials)))
    (~g_dbus_auth_observer_authorize_authenticated_peer
      ~observer
      ~stream
      ~credentials)))
(export g_dbus_auth_observer_authorize_authenticated_peer)

;; extern gboolean g_dbus_auth_observer_allow_mechanism(GDBusAuthObserver *
;;     observer, const gchar *mechanism);
(define ~g_dbus_auth_observer_allow_mechanism #f)
(define (g_dbus_auth_observer_allow_mechanism
         observer
         mechanism)
  (unless
    ~g_dbus_auth_observer_allow_mechanism
    (set! ~g_dbus_auth_observer_allow_mechanism
      (fh-link-proc
        "g_dbus_auth_observer_allow_mechanism"
        ffi:int
        (list '* '*))))
  (let ((~observer (unwrap-GDBusAuthObserver* observer))
        (~mechanism (unwrap~pointer mechanism)))
    (~g_dbus_auth_observer_allow_mechanism
      ~observer
      ~mechanism)))
(export g_dbus_auth_observer_allow_mechanism)

;; extern GType g_dbus_connection_get_type(void);
(define ~g_dbus_connection_get_type #f)
(define (g_dbus_connection_get_type)
  (unless
    ~g_dbus_connection_get_type
    (set! ~g_dbus_connection_get_type
      (fh-link-proc
        "g_dbus_connection_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_connection_get_type)))
(export g_dbus_connection_get_type)

;; extern void g_bus_get(GBusType bus_type, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_bus_get #f)
(define (g_bus_get
         bus_type
         cancellable
         callback
         user_data)
  (unless
    ~g_bus_get
    (set! ~g_bus_get
      (fh-link-proc
        "g_bus_get"
        ffi:void
        (list ffi:int '* '* '*))))
  (let ((~bus_type (unwrap~fixed bus_type))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_bus_get
      ~bus_type
      ~cancellable
      ~callback
      ~user_data)))
(export g_bus_get)

;; extern GDBusConnection *g_bus_get_finish(GAsyncResult *res, GError **error)
;;     ;
(define ~g_bus_get_finish #f)
(define (g_bus_get_finish res error)
  (unless
    ~g_bus_get_finish
    (set! ~g_bus_get_finish
      (fh-link-proc "g_bus_get_finish" '* (list '* '*))))
  (let ((~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GDBusConnection*
      (~g_bus_get_finish ~res ~error))))
(export g_bus_get_finish)

;; extern GDBusConnection *g_bus_get_sync(GBusType bus_type, GCancellable *
;;     cancellable, GError **error);
(define ~g_bus_get_sync #f)
(define (g_bus_get_sync bus_type cancellable error)
  (unless
    ~g_bus_get_sync
    (set! ~g_bus_get_sync
      (fh-link-proc
        "g_bus_get_sync"
        '*
        (list ffi:int '* '*))))
  (let ((~bus_type (unwrap~fixed bus_type))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GDBusConnection*
      (~g_bus_get_sync ~bus_type ~cancellable ~error))))
(export g_bus_get_sync)

;; extern void g_dbus_connection_new(GIOStream *stream, const gchar *guid, 
;;     GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_dbus_connection_new #f)
(define (g_dbus_connection_new
         stream
         guid
         flags
         observer
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_connection_new
    (set! ~g_dbus_connection_new
      (fh-link-proc
        "g_dbus_connection_new"
        ffi:void
        (list '* '* ffi:int '* '* '* '*))))
  (let ((~stream (unwrap-GIOStream* stream))
        (~guid (unwrap~pointer guid))
        (~flags (unwrap~fixed flags))
        (~observer (unwrap-GDBusAuthObserver* observer))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_connection_new
      ~stream
      ~guid
      ~flags
      ~observer
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_connection_new)

;; extern GDBusConnection *g_dbus_connection_new_finish(GAsyncResult *res, 
;;     GError **error);
(define ~g_dbus_connection_new_finish #f)
(define (g_dbus_connection_new_finish res error)
  (unless
    ~g_dbus_connection_new_finish
    (set! ~g_dbus_connection_new_finish
      (fh-link-proc
        "g_dbus_connection_new_finish"
        '*
        (list '* '*))))
  (let ((~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GDBusConnection*
      (~g_dbus_connection_new_finish ~res ~error))))
(export g_dbus_connection_new_finish)

;; extern GDBusConnection *g_dbus_connection_new_sync(GIOStream *stream, const 
;;     gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, 
;;     GCancellable *cancellable, GError **error);
(define ~g_dbus_connection_new_sync #f)
(define (g_dbus_connection_new_sync
         stream
         guid
         flags
         observer
         cancellable
         error)
  (unless
    ~g_dbus_connection_new_sync
    (set! ~g_dbus_connection_new_sync
      (fh-link-proc
        "g_dbus_connection_new_sync"
        '*
        (list '* '* ffi:int '* '* '*))))
  (let ((~stream (unwrap-GIOStream* stream))
        (~guid (unwrap~pointer guid))
        (~flags (unwrap~fixed flags))
        (~observer (unwrap-GDBusAuthObserver* observer))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GDBusConnection*
      (~g_dbus_connection_new_sync
        ~stream
        ~guid
        ~flags
        ~observer
        ~cancellable
        ~error))))
(export g_dbus_connection_new_sync)

;; extern void g_dbus_connection_new_for_address(const gchar *address, 
;;     GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_dbus_connection_new_for_address #f)
(define (g_dbus_connection_new_for_address
         address
         flags
         observer
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_connection_new_for_address
    (set! ~g_dbus_connection_new_for_address
      (fh-link-proc
        "g_dbus_connection_new_for_address"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~address (unwrap~pointer address))
        (~flags (unwrap~fixed flags))
        (~observer (unwrap-GDBusAuthObserver* observer))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_connection_new_for_address
      ~address
      ~flags
      ~observer
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_connection_new_for_address)

;; extern GDBusConnection *g_dbus_connection_new_for_address_finish(
;;     GAsyncResult *res, GError **error);
(define ~g_dbus_connection_new_for_address_finish #f)
(define (g_dbus_connection_new_for_address_finish
         res
         error)
  (unless
    ~g_dbus_connection_new_for_address_finish
    (set! ~g_dbus_connection_new_for_address_finish
      (fh-link-proc
        "g_dbus_connection_new_for_address_finish"
        '*
        (list '* '*))))
  (let ((~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GDBusConnection*
      (~g_dbus_connection_new_for_address_finish
        ~res
        ~error))))
(export g_dbus_connection_new_for_address_finish)

;; extern GDBusConnection *g_dbus_connection_new_for_address_sync(const gchar *
;;     address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, 
;;     GCancellable *cancellable, GError **error);
(define ~g_dbus_connection_new_for_address_sync #f)
(define (g_dbus_connection_new_for_address_sync
         address
         flags
         observer
         cancellable
         error)
  (unless
    ~g_dbus_connection_new_for_address_sync
    (set! ~g_dbus_connection_new_for_address_sync
      (fh-link-proc
        "g_dbus_connection_new_for_address_sync"
        '*
        (list '* ffi:int '* '* '*))))
  (let ((~address (unwrap~pointer address))
        (~flags (unwrap~fixed flags))
        (~observer (unwrap-GDBusAuthObserver* observer))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GDBusConnection*
      (~g_dbus_connection_new_for_address_sync
        ~address
        ~flags
        ~observer
        ~cancellable
        ~error))))
(export g_dbus_connection_new_for_address_sync)

;; extern void g_dbus_connection_start_message_processing(GDBusConnection *
;;     connection);
(define ~g_dbus_connection_start_message_processing #f)
(define (g_dbus_connection_start_message_processing
         connection)
  (unless
    ~g_dbus_connection_start_message_processing
    (set! ~g_dbus_connection_start_message_processing
      (fh-link-proc
        "g_dbus_connection_start_message_processing"
        ffi:void
        (list '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection)))
    (~g_dbus_connection_start_message_processing
      ~connection)))
(export g_dbus_connection_start_message_processing)

;; extern gboolean g_dbus_connection_is_closed(GDBusConnection *connection);
(define ~g_dbus_connection_is_closed #f)
(define (g_dbus_connection_is_closed connection)
  (unless
    ~g_dbus_connection_is_closed
    (set! ~g_dbus_connection_is_closed
      (fh-link-proc
        "g_dbus_connection_is_closed"
        ffi:int
        (list '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection)))
    (~g_dbus_connection_is_closed ~connection)))
(export g_dbus_connection_is_closed)

;; extern GIOStream *g_dbus_connection_get_stream(GDBusConnection *connection)
;;     ;
(define ~g_dbus_connection_get_stream #f)
(define (g_dbus_connection_get_stream connection)
  (unless
    ~g_dbus_connection_get_stream
    (set! ~g_dbus_connection_get_stream
      (fh-link-proc
        "g_dbus_connection_get_stream"
        '*
        (list '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection)))
    (wrap-GIOStream*
      (~g_dbus_connection_get_stream ~connection))))
(export g_dbus_connection_get_stream)

;; extern const gchar *g_dbus_connection_get_guid(GDBusConnection *connection)
;;     ;
(define ~g_dbus_connection_get_guid #f)
(define (g_dbus_connection_get_guid connection)
  (unless
    ~g_dbus_connection_get_guid
    (set! ~g_dbus_connection_get_guid
      (fh-link-proc
        "g_dbus_connection_get_guid"
        '*
        (list '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection)))
    (~g_dbus_connection_get_guid ~connection)))
(export g_dbus_connection_get_guid)

;; extern const gchar *g_dbus_connection_get_unique_name(GDBusConnection *
;;     connection);
(define ~g_dbus_connection_get_unique_name #f)
(define (g_dbus_connection_get_unique_name connection)
  (unless
    ~g_dbus_connection_get_unique_name
    (set! ~g_dbus_connection_get_unique_name
      (fh-link-proc
        "g_dbus_connection_get_unique_name"
        '*
        (list '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection)))
    (~g_dbus_connection_get_unique_name ~connection)))
(export g_dbus_connection_get_unique_name)

;; extern GCredentials *g_dbus_connection_get_peer_credentials(GDBusConnection 
;;     *connection);
(define ~g_dbus_connection_get_peer_credentials #f)
(define (g_dbus_connection_get_peer_credentials
         connection)
  (unless
    ~g_dbus_connection_get_peer_credentials
    (set! ~g_dbus_connection_get_peer_credentials
      (fh-link-proc
        "g_dbus_connection_get_peer_credentials"
        '*
        (list '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection)))
    (wrap-GCredentials*
      (~g_dbus_connection_get_peer_credentials
        ~connection))))
(export g_dbus_connection_get_peer_credentials)

;; extern guint32 g_dbus_connection_get_last_serial(GDBusConnection *connection
;;     );
(define ~g_dbus_connection_get_last_serial #f)
(define (g_dbus_connection_get_last_serial connection)
  (unless
    ~g_dbus_connection_get_last_serial
    (set! ~g_dbus_connection_get_last_serial
      (fh-link-proc
        "g_dbus_connection_get_last_serial"
        ffi:unsigned-int
        (list '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection)))
    (~g_dbus_connection_get_last_serial ~connection)))
(export g_dbus_connection_get_last_serial)

;; extern gboolean g_dbus_connection_get_exit_on_close(GDBusConnection *
;;     connection);
(define ~g_dbus_connection_get_exit_on_close #f)
(define (g_dbus_connection_get_exit_on_close connection)
  (unless
    ~g_dbus_connection_get_exit_on_close
    (set! ~g_dbus_connection_get_exit_on_close
      (fh-link-proc
        "g_dbus_connection_get_exit_on_close"
        ffi:int
        (list '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection)))
    (~g_dbus_connection_get_exit_on_close
      ~connection)))
(export g_dbus_connection_get_exit_on_close)

;; extern void g_dbus_connection_set_exit_on_close(GDBusConnection *connection
;;     , gboolean exit_on_close);
(define ~g_dbus_connection_set_exit_on_close #f)
(define (g_dbus_connection_set_exit_on_close
         connection
         exit_on_close)
  (unless
    ~g_dbus_connection_set_exit_on_close
    (set! ~g_dbus_connection_set_exit_on_close
      (fh-link-proc
        "g_dbus_connection_set_exit_on_close"
        ffi:void
        (list '* ffi:int))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~exit_on_close (unwrap~fixed exit_on_close)))
    (~g_dbus_connection_set_exit_on_close
      ~connection
      ~exit_on_close)))
(export g_dbus_connection_set_exit_on_close)

;; extern GDBusCapabilityFlags g_dbus_connection_get_capabilities(
;;     GDBusConnection *connection);
(define ~g_dbus_connection_get_capabilities #f)
(define (g_dbus_connection_get_capabilities connection)
  (unless
    ~g_dbus_connection_get_capabilities
    (set! ~g_dbus_connection_get_capabilities
      (fh-link-proc
        "g_dbus_connection_get_capabilities"
        ffi:int
        (list '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection)))
    (~g_dbus_connection_get_capabilities ~connection)))
(export g_dbus_connection_get_capabilities)

;; extern void g_dbus_connection_close(GDBusConnection *connection, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_dbus_connection_close #f)
(define (g_dbus_connection_close
         connection
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_connection_close
    (set! ~g_dbus_connection_close
      (fh-link-proc
        "g_dbus_connection_close"
        ffi:void
        (list '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_connection_close
      ~connection
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_connection_close)

;; extern gboolean g_dbus_connection_close_finish(GDBusConnection *connection, 
;;     GAsyncResult *res, GError **error);
(define ~g_dbus_connection_close_finish #f)
(define (g_dbus_connection_close_finish
         connection
         res
         error)
  (unless
    ~g_dbus_connection_close_finish
    (set! ~g_dbus_connection_close_finish
      (fh-link-proc
        "g_dbus_connection_close_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_close_finish
      ~connection
      ~res
      ~error)))
(export g_dbus_connection_close_finish)

;; extern gboolean g_dbus_connection_close_sync(GDBusConnection *connection, 
;;     GCancellable *cancellable, GError **error);
(define ~g_dbus_connection_close_sync #f)
(define (g_dbus_connection_close_sync
         connection
         cancellable
         error)
  (unless
    ~g_dbus_connection_close_sync
    (set! ~g_dbus_connection_close_sync
      (fh-link-proc
        "g_dbus_connection_close_sync"
        ffi:int
        (list '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_close_sync
      ~connection
      ~cancellable
      ~error)))
(export g_dbus_connection_close_sync)

;; extern void g_dbus_connection_flush(GDBusConnection *connection, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_dbus_connection_flush #f)
(define (g_dbus_connection_flush
         connection
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_connection_flush
    (set! ~g_dbus_connection_flush
      (fh-link-proc
        "g_dbus_connection_flush"
        ffi:void
        (list '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_connection_flush
      ~connection
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_connection_flush)

;; extern gboolean g_dbus_connection_flush_finish(GDBusConnection *connection, 
;;     GAsyncResult *res, GError **error);
(define ~g_dbus_connection_flush_finish #f)
(define (g_dbus_connection_flush_finish
         connection
         res
         error)
  (unless
    ~g_dbus_connection_flush_finish
    (set! ~g_dbus_connection_flush_finish
      (fh-link-proc
        "g_dbus_connection_flush_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_flush_finish
      ~connection
      ~res
      ~error)))
(export g_dbus_connection_flush_finish)

;; extern gboolean g_dbus_connection_flush_sync(GDBusConnection *connection, 
;;     GCancellable *cancellable, GError **error);
(define ~g_dbus_connection_flush_sync #f)
(define (g_dbus_connection_flush_sync
         connection
         cancellable
         error)
  (unless
    ~g_dbus_connection_flush_sync
    (set! ~g_dbus_connection_flush_sync
      (fh-link-proc
        "g_dbus_connection_flush_sync"
        ffi:int
        (list '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_flush_sync
      ~connection
      ~cancellable
      ~error)))
(export g_dbus_connection_flush_sync)

;; extern gboolean g_dbus_connection_send_message(GDBusConnection *connection, 
;;     GDBusMessage *message, GDBusSendMessageFlags flags, volatile guint32 *
;;     out_serial, GError **error);
(define ~g_dbus_connection_send_message #f)
(define (g_dbus_connection_send_message
         connection
         message
         flags
         out_serial
         error)
  (unless
    ~g_dbus_connection_send_message
    (set! ~g_dbus_connection_send_message
      (fh-link-proc
        "g_dbus_connection_send_message"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~message (unwrap-GDBusMessage* message))
        (~flags (unwrap~fixed flags))
        (~out_serial (unwrap~pointer out_serial))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_send_message
      ~connection
      ~message
      ~flags
      ~out_serial
      ~error)))
(export g_dbus_connection_send_message)

;; extern void g_dbus_connection_send_message_with_reply(GDBusConnection *
;;     connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint 
;;     timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_dbus_connection_send_message_with_reply #f)
(define (g_dbus_connection_send_message_with_reply
         connection
         message
         flags
         timeout_msec
         out_serial
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_connection_send_message_with_reply
    (set! ~g_dbus_connection_send_message_with_reply
      (fh-link-proc
        "g_dbus_connection_send_message_with_reply"
        ffi:void
        (list '* '* ffi:int ffi:int '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~message (unwrap-GDBusMessage* message))
        (~flags (unwrap~fixed flags))
        (~timeout_msec (unwrap~fixed timeout_msec))
        (~out_serial (unwrap~pointer out_serial))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_connection_send_message_with_reply
      ~connection
      ~message
      ~flags
      ~timeout_msec
      ~out_serial
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_connection_send_message_with_reply)

;; extern GDBusMessage *g_dbus_connection_send_message_with_reply_finish(
;;     GDBusConnection *connection, GAsyncResult *res, GError **error);
(define ~g_dbus_connection_send_message_with_reply_finish #f)
(define (g_dbus_connection_send_message_with_reply_finish
         connection
         res
         error)
  (unless
    ~g_dbus_connection_send_message_with_reply_finish
    (set! ~g_dbus_connection_send_message_with_reply_finish
      (fh-link-proc
        "g_dbus_connection_send_message_with_reply_finish"
        '*
        (list '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GDBusMessage*
      (~g_dbus_connection_send_message_with_reply_finish
        ~connection
        ~res
        ~error))))
(export g_dbus_connection_send_message_with_reply_finish)

;; extern GDBusMessage *g_dbus_connection_send_message_with_reply_sync(
;;     GDBusConnection *connection, GDBusMessage *message, 
;;     GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *
;;     out_serial, GCancellable *cancellable, GError **error);
(define ~g_dbus_connection_send_message_with_reply_sync #f)
(define (g_dbus_connection_send_message_with_reply_sync
         connection
         message
         flags
         timeout_msec
         out_serial
         cancellable
         error)
  (unless
    ~g_dbus_connection_send_message_with_reply_sync
    (set! ~g_dbus_connection_send_message_with_reply_sync
      (fh-link-proc
        "g_dbus_connection_send_message_with_reply_sync"
        '*
        (list '* '* ffi:int ffi:int '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~message (unwrap-GDBusMessage* message))
        (~flags (unwrap~fixed flags))
        (~timeout_msec (unwrap~fixed timeout_msec))
        (~out_serial (unwrap~pointer out_serial))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GDBusMessage*
      (~g_dbus_connection_send_message_with_reply_sync
        ~connection
        ~message
        ~flags
        ~timeout_msec
        ~out_serial
        ~cancellable
        ~error))))
(export g_dbus_connection_send_message_with_reply_sync)

;; extern gboolean g_dbus_connection_emit_signal(GDBusConnection *connection, 
;;     const gchar *destination_bus_name, const gchar *object_path, const gchar
;;      *interface_name, const gchar *signal_name, GVariant *parameters, GError
;;      **error);
(define ~g_dbus_connection_emit_signal #f)
(define (g_dbus_connection_emit_signal
         connection
         destination_bus_name
         object_path
         interface_name
         signal_name
         parameters
         error)
  (unless
    ~g_dbus_connection_emit_signal
    (set! ~g_dbus_connection_emit_signal
      (fh-link-proc
        "g_dbus_connection_emit_signal"
        ffi:int
        (list '* '* '* '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~destination_bus_name
          (unwrap~pointer destination_bus_name))
        (~object_path (unwrap~pointer object_path))
        (~interface_name (unwrap~pointer interface_name))
        (~signal_name (unwrap~pointer signal_name))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_emit_signal
      ~connection
      ~destination_bus_name
      ~object_path
      ~interface_name
      ~signal_name
      parameters
      ~error)))
(export g_dbus_connection_emit_signal)

;; extern void g_dbus_connection_call(GDBusConnection *connection, const gchar 
;;     *bus_name, const gchar *object_path, const gchar *interface_name, const 
;;     gchar *method_name, GVariant *parameters, const GVariantType *reply_type
;;     , GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_dbus_connection_call #f)
(define (g_dbus_connection_call
         connection
         bus_name
         object_path
         interface_name
         method_name
         parameters
         reply_type
         flags
         timeout_msec
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_connection_call
    (set! ~g_dbus_connection_call
      (fh-link-proc
        "g_dbus_connection_call"
        ffi:void
        (list '*
              '*
              '*
              '*
              '*
              '*
              '*
              ffi:int
              ffi:int
              '*
              '*
              '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~bus_name (unwrap~pointer bus_name))
        (~object_path (unwrap~pointer object_path))
        (~interface_name (unwrap~pointer interface_name))
        (~method_name (unwrap~pointer method_name))
        (~flags (unwrap~fixed flags))
        (~timeout_msec (unwrap~fixed timeout_msec))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_connection_call
      ~connection
      ~bus_name
      ~object_path
      ~interface_name
      ~method_name
      parameters
      reply_type
      ~flags
      ~timeout_msec
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_connection_call)

;; extern GVariant *g_dbus_connection_call_finish(GDBusConnection *connection, 
;;     GAsyncResult *res, GError **error);
(define ~g_dbus_connection_call_finish #f)
(define (g_dbus_connection_call_finish
         connection
         res
         error)
  (unless
    ~g_dbus_connection_call_finish
    (set! ~g_dbus_connection_call_finish
      (fh-link-proc
        "g_dbus_connection_call_finish"
        '*
        (list '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_call_finish
      ~connection
      ~res
      ~error)))
(export g_dbus_connection_call_finish)

;; extern GVariant *g_dbus_connection_call_sync(GDBusConnection *connection, 
;;     const gchar *bus_name, const gchar *object_path, const gchar *
;;     interface_name, const gchar *method_name, GVariant *parameters, const 
;;     GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, 
;;     GCancellable *cancellable, GError **error);
(define ~g_dbus_connection_call_sync #f)
(define (g_dbus_connection_call_sync
         connection
         bus_name
         object_path
         interface_name
         method_name
         parameters
         reply_type
         flags
         timeout_msec
         cancellable
         error)
  (unless
    ~g_dbus_connection_call_sync
    (set! ~g_dbus_connection_call_sync
      (fh-link-proc
        "g_dbus_connection_call_sync"
        '*
        (list '* '* '* '* '* '* '* ffi:int ffi:int '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~bus_name (unwrap~pointer bus_name))
        (~object_path (unwrap~pointer object_path))
        (~interface_name (unwrap~pointer interface_name))
        (~method_name (unwrap~pointer method_name))
        (~flags (unwrap~fixed flags))
        (~timeout_msec (unwrap~fixed timeout_msec))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_call_sync
      ~connection
      ~bus_name
      ~object_path
      ~interface_name
      ~method_name
      parameters
      reply_type
      ~flags
      ~timeout_msec
      ~cancellable
      ~error)))
(export g_dbus_connection_call_sync)

;; extern void g_dbus_connection_call_with_unix_fd_list(GDBusConnection *
;;     connection, const gchar *bus_name, const gchar *object_path, const gchar
;;      *interface_name, const gchar *method_name, GVariant *parameters, const 
;;     GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, 
;;     GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback 
;;     callback, gpointer user_data);
(define ~g_dbus_connection_call_with_unix_fd_list #f)
(define (g_dbus_connection_call_with_unix_fd_list
         connection
         bus_name
         object_path
         interface_name
         method_name
         parameters
         reply_type
         flags
         timeout_msec
         fd_list
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_connection_call_with_unix_fd_list
    (set! ~g_dbus_connection_call_with_unix_fd_list
      (fh-link-proc
        "g_dbus_connection_call_with_unix_fd_list"
        ffi:void
        (list '*
              '*
              '*
              '*
              '*
              '*
              '*
              ffi:int
              ffi:int
              '*
              '*
              '*
              '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~bus_name (unwrap~pointer bus_name))
        (~object_path (unwrap~pointer object_path))
        (~interface_name (unwrap~pointer interface_name))
        (~method_name (unwrap~pointer method_name))
        (~flags (unwrap~fixed flags))
        (~timeout_msec (unwrap~fixed timeout_msec))
        (~fd_list (unwrap-GUnixFDList* fd_list))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_connection_call_with_unix_fd_list
      ~connection
      ~bus_name
      ~object_path
      ~interface_name
      ~method_name
      parameters
      reply_type
      ~flags
      ~timeout_msec
      ~fd_list
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_connection_call_with_unix_fd_list)

;; extern GVariant *g_dbus_connection_call_with_unix_fd_list_finish(
;;     GDBusConnection *connection, GUnixFDList **out_fd_list, GAsyncResult *
;;     res, GError **error);
(define ~g_dbus_connection_call_with_unix_fd_list_finish #f)
(define (g_dbus_connection_call_with_unix_fd_list_finish
         connection
         out_fd_list
         res
         error)
  (unless
    ~g_dbus_connection_call_with_unix_fd_list_finish
    (set! ~g_dbus_connection_call_with_unix_fd_list_finish
      (fh-link-proc
        "g_dbus_connection_call_with_unix_fd_list_finish"
        '*
        (list '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~out_fd_list (unwrap~pointer out_fd_list))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_call_with_unix_fd_list_finish
      ~connection
      ~out_fd_list
      ~res
      ~error)))
(export g_dbus_connection_call_with_unix_fd_list_finish)

;; extern GVariant *g_dbus_connection_call_with_unix_fd_list_sync(
;;     GDBusConnection *connection, const gchar *bus_name, const gchar *
;;     object_path, const gchar *interface_name, const gchar *method_name, 
;;     GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags 
;;     flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **
;;     out_fd_list, GCancellable *cancellable, GError **error);
(define ~g_dbus_connection_call_with_unix_fd_list_sync #f)
(define (g_dbus_connection_call_with_unix_fd_list_sync
         connection
         bus_name
         object_path
         interface_name
         method_name
         parameters
         reply_type
         flags
         timeout_msec
         fd_list
         out_fd_list
         cancellable
         error)
  (unless
    ~g_dbus_connection_call_with_unix_fd_list_sync
    (set! ~g_dbus_connection_call_with_unix_fd_list_sync
      (fh-link-proc
        "g_dbus_connection_call_with_unix_fd_list_sync"
        '*
        (list '*
              '*
              '*
              '*
              '*
              '*
              '*
              ffi:int
              ffi:int
              '*
              '*
              '*
              '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~bus_name (unwrap~pointer bus_name))
        (~object_path (unwrap~pointer object_path))
        (~interface_name (unwrap~pointer interface_name))
        (~method_name (unwrap~pointer method_name))
        (~flags (unwrap~fixed flags))
        (~timeout_msec (unwrap~fixed timeout_msec))
        (~fd_list (unwrap-GUnixFDList* fd_list))
        (~out_fd_list (unwrap~pointer out_fd_list))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_call_with_unix_fd_list_sync
      ~connection
      ~bus_name
      ~object_path
      ~interface_name
      ~method_name
      parameters
      reply_type
      ~flags
      ~timeout_msec
      ~fd_list
      ~out_fd_list
      ~cancellable
      ~error)))
(export g_dbus_connection_call_with_unix_fd_list_sync)

;; typedef void (*GDBusInterfaceMethodCallFunc)(GDBusConnection *connection, 
;;     const gchar *sender, const gchar *object_path, const gchar *
;;     interface_name, const gchar *method_name, GVariant *parameters, 
;;     GDBusMethodInvocation *invocation, gpointer user_data);
(define-fh-function/p GDBusInterfaceMethodCallFunc
  ffi:void (list (quote *) (quote *) (quote *) (quote *) (quote *) (quote *) (quote *) (quote *)))

;; typedef GVariant *(*GDBusInterfaceGetPropertyFunc)(GDBusConnection *
;;     connection, const gchar *sender, const gchar *object_path, const gchar *
;;     interface_name, const gchar *property_name, GError **error, gpointer 
;;     user_data);
(define-fh-function/p
  GDBusInterfaceGetPropertyFunc
  '*
  (list '* '* '* '* '* '* '*))

;; typedef gboolean (*GDBusInterfaceSetPropertyFunc)(GDBusConnection *
;;     connection, const gchar *sender, const gchar *object_path, const gchar *
;;     interface_name, const gchar *property_name, GVariant *value, GError **
;;     error, gpointer user_data);
(define-fh-function/p GDBusInterfaceSetPropertyFunc
  ffi:int (list (quote *) (quote *) (quote *) (quote *) (quote *) (quote *) (quote *) (quote *)))

;; struct _GDBusInterfaceVTable {
;;   GDBusInterfaceMethodCallFunc method_call;
;;   GDBusInterfaceGetPropertyFunc get_property;
;;   GDBusInterfaceSetPropertyFunc set_property;
;;   /*< private >*/
;;   /* Padding for future expansion - also remember to update
;;    * gdbusconnection.c:_g_dbus_interface_vtable_copy() when
;;    * changing this.
;;    */
;;   gpointer padding[8];
;; };
(define struct-_GDBusInterfaceVTable-desc
  (bs:struct
    (list `(method_call ,(bs:pointer void))
          `(get_property ,(bs:pointer void))
          `(set_property ,(bs:pointer void))
          `(padding ,(bs:vector 8 gpointer-desc)))))
(export struct-_GDBusInterfaceVTable-desc)
(define-fh-compound-type/p struct-_GDBusInterfaceVTable struct-_GDBusInterfaceVTable-desc)
(set! GDBusInterfaceVTable-desc struct-_GDBusInterfaceVTable-desc)
(define-fh-compound-type GDBusInterfaceVTable GDBusInterfaceVTable-desc)

;; extern guint g_dbus_connection_register_object(GDBusConnection *connection, 
;;     const gchar *object_path, GDBusInterfaceInfo *interface_info, const 
;;     GDBusInterfaceVTable *vtable, gpointer user_data, GDestroyNotify 
;;     user_data_free_func, GError **error);
(define ~g_dbus_connection_register_object #f)
(define (g_dbus_connection_register_object
         connection
         object_path
         interface_info
         vtable
         user_data
         user_data_free_func
         error)
  (unless
    ~g_dbus_connection_register_object
    (set! ~g_dbus_connection_register_object
      (fh-link-proc
        "g_dbus_connection_register_object"
        ffi:unsigned-int
        (list '* '* '* '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~object_path (unwrap~pointer object_path))
        (~interface_info
          (unwrap-GDBusInterfaceInfo* interface_info))
        (~vtable (unwrap-GDBusInterfaceVTable* vtable))
        (~user_data (unwrap-gpointer user_data))
        (~user_data_free_func
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           user_data_free_func))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_register_object
      ~connection
      ~object_path
      ~interface_info
      ~vtable
      ~user_data
      ~user_data_free_func
      ~error)))
(export g_dbus_connection_register_object)

;; extern guint g_dbus_connection_register_object_with_closures(GDBusConnection
;;      *connection, const gchar *object_path, GDBusInterfaceInfo *
;;     interface_info, GClosure *method_call_closure, GClosure *
;;     get_property_closure, GClosure *set_property_closure, GError **error);
(define ~g_dbus_connection_register_object_with_closures #f)
(define (g_dbus_connection_register_object_with_closures
         connection
         object_path
         interface_info
         method_call_closure
         get_property_closure
         set_property_closure
         error)
  (unless
    ~g_dbus_connection_register_object_with_closures
    (set! ~g_dbus_connection_register_object_with_closures
      (fh-link-proc
        "g_dbus_connection_register_object_with_closures"
        ffi:unsigned-int
        (list '* '* '* '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~object_path (unwrap~pointer object_path))
        (~interface_info
          (unwrap-GDBusInterfaceInfo* interface_info))
        (~method_call_closure
          (unwrap~pointer method_call_closure))
        (~get_property_closure
          (unwrap~pointer get_property_closure))
        (~set_property_closure
          (unwrap~pointer set_property_closure))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_register_object_with_closures
      ~connection
      ~object_path
      ~interface_info
      ~method_call_closure
      ~get_property_closure
      ~set_property_closure
      ~error)))
(export g_dbus_connection_register_object_with_closures)

;; extern gboolean g_dbus_connection_unregister_object(GDBusConnection *
;;     connection, guint registration_id);
(define ~g_dbus_connection_unregister_object #f)
(define (g_dbus_connection_unregister_object
         connection
         registration_id)
  (unless
    ~g_dbus_connection_unregister_object
    (set! ~g_dbus_connection_unregister_object
      (fh-link-proc
        "g_dbus_connection_unregister_object"
        ffi:int
        (list '* ffi:unsigned-int))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~registration_id (unwrap~fixed registration_id)))
    (~g_dbus_connection_unregister_object
      ~connection
      ~registration_id)))
(export g_dbus_connection_unregister_object)

;; typedef gchar **(*GDBusSubtreeEnumerateFunc)(GDBusConnection *connection, 
;;     const gchar *sender, const gchar *object_path, gpointer user_data);
(define GDBusSubtreeEnumerateFunc-desc (bs:pointer void))
(define-fh-pointer-type GDBusSubtreeEnumerateFunc GDBusSubtreeEnumerateFunc-desc)

;; typedef GDBusInterfaceInfo **(*GDBusSubtreeIntrospectFunc)(GDBusConnection *
;;     connection, const gchar *sender, const gchar *object_path, const gchar *
;;     node, gpointer user_data);
(define GDBusSubtreeIntrospectFunc-desc (bs:pointer void))
(define-fh-pointer-type GDBusSubtreeIntrospectFunc GDBusSubtreeIntrospectFunc-desc)

;; typedef const GDBusInterfaceVTable *(*GDBusSubtreeDispatchFunc)(
;;     GDBusConnection *connection, const gchar *sender, const gchar *
;;     object_path, const gchar *interface_name, const gchar *node, gpointer *
;;     out_user_data, gpointer user_data);
(define-fh-function/p
  GDBusSubtreeDispatchFunc
  '*
  (list '* '* '* '* '* '* '*))

;; struct _GDBusSubtreeVTable {
;;   GDBusSubtreeEnumerateFunc enumerate;
;;   GDBusSubtreeIntrospectFunc introspect;
;;   GDBusSubtreeDispatchFunc dispatch;
;;   /*< private >*/
;;   /* Padding for future expansion - also remember to update
;;    * gdbusconnection.c:_g_dbus_subtree_vtable_copy() when
;;    * changing this.
;;    */
;;   gpointer padding[8];
;; };
(define struct-_GDBusSubtreeVTable-desc
  (bs:struct
    (list `(enumerate ,GDBusSubtreeEnumerateFunc-desc)
          `(introspect ,GDBusSubtreeIntrospectFunc-desc)
          `(dispatch ,(bs:pointer void))
          `(padding ,(bs:vector 8 gpointer-desc)))))
(export struct-_GDBusSubtreeVTable-desc)
(define-fh-compound-type/p struct-_GDBusSubtreeVTable struct-_GDBusSubtreeVTable-desc)
(set! GDBusSubtreeVTable-desc struct-_GDBusSubtreeVTable-desc)
(define-fh-compound-type GDBusSubtreeVTable GDBusSubtreeVTable-desc)

;; extern guint g_dbus_connection_register_subtree(GDBusConnection *connection
;;     , const gchar *object_path, const GDBusSubtreeVTable *vtable, 
;;     GDBusSubtreeFlags flags, gpointer user_data, GDestroyNotify 
;;     user_data_free_func, GError **error);
(define ~g_dbus_connection_register_subtree #f)
(define (g_dbus_connection_register_subtree
         connection
         object_path
         vtable
         flags
         user_data
         user_data_free_func
         error)
  (unless
    ~g_dbus_connection_register_subtree
    (set! ~g_dbus_connection_register_subtree
      (fh-link-proc
        "g_dbus_connection_register_subtree"
        ffi:unsigned-int
        (list '* '* '* ffi:int '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~object_path (unwrap~pointer object_path))
        (~vtable (unwrap-GDBusSubtreeVTable* vtable))
        (~flags (unwrap~fixed flags))
        (~user_data (unwrap-gpointer user_data))
        (~user_data_free_func
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           user_data_free_func))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_register_subtree
      ~connection
      ~object_path
      ~vtable
      ~flags
      ~user_data
      ~user_data_free_func
      ~error)))
(export g_dbus_connection_register_subtree)

;; extern gboolean g_dbus_connection_unregister_subtree(GDBusConnection *
;;     connection, guint registration_id);
(define ~g_dbus_connection_unregister_subtree #f)
(define (g_dbus_connection_unregister_subtree
         connection
         registration_id)
  (unless
    ~g_dbus_connection_unregister_subtree
    (set! ~g_dbus_connection_unregister_subtree
      (fh-link-proc
        "g_dbus_connection_unregister_subtree"
        ffi:int
        (list '* ffi:unsigned-int))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~registration_id (unwrap~fixed registration_id)))
    (~g_dbus_connection_unregister_subtree
      ~connection
      ~registration_id)))
(export g_dbus_connection_unregister_subtree)

;; typedef void (*GDBusSignalCallback)(GDBusConnection *connection, const gchar
;;      *sender_name, const gchar *object_path, const gchar *interface_name, 
;;     const gchar *signal_name, GVariant *parameters, gpointer user_data);
(define-fh-function/p GDBusSignalCallback
  ffi:void (list (quote *) (quote *) (quote *) (quote *) (quote *) (quote *) (quote *)))

;; extern guint g_dbus_connection_signal_subscribe(GDBusConnection *connection
;;     , const gchar *sender, const gchar *interface_name, const gchar *member
;;     , const gchar *object_path, const gchar *arg0, GDBusSignalFlags flags, 
;;     GDBusSignalCallback callback, gpointer user_data, GDestroyNotify 
;;     user_data_free_func);
(define ~g_dbus_connection_signal_subscribe #f)
(define (g_dbus_connection_signal_subscribe
         connection
         sender
         interface_name
         member
         object_path
         arg0
         flags
         callback
         user_data
         user_data_free_func)
  (unless
    ~g_dbus_connection_signal_subscribe
    (set! ~g_dbus_connection_signal_subscribe
      (fh-link-proc
        "g_dbus_connection_signal_subscribe"
        ffi:unsigned-int
        (list '* '* '* '* '* '* ffi:int '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~sender (unwrap~pointer sender))
        (~interface_name (unwrap~pointer interface_name))
        (~member (unwrap~pointer member))
        (~object_path (unwrap~pointer object_path))
        (~arg0 (unwrap~pointer arg0))
        (~flags (unwrap~fixed flags))
        (~callback
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* '* '* '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data))
        (~user_data_free_func
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           user_data_free_func)))
    (~g_dbus_connection_signal_subscribe
      ~connection
      ~sender
      ~interface_name
      ~member
      ~object_path
      ~arg0
      ~flags
      ~callback
      ~user_data
      ~user_data_free_func)))
(export g_dbus_connection_signal_subscribe)

;; extern void g_dbus_connection_signal_unsubscribe(GDBusConnection *connection
;;     , guint subscription_id);
(define ~g_dbus_connection_signal_unsubscribe #f)
(define (g_dbus_connection_signal_unsubscribe
         connection
         subscription_id)
  (unless
    ~g_dbus_connection_signal_unsubscribe
    (set! ~g_dbus_connection_signal_unsubscribe
      (fh-link-proc
        "g_dbus_connection_signal_unsubscribe"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~subscription_id (unwrap~fixed subscription_id)))
    (~g_dbus_connection_signal_unsubscribe
      ~connection
      ~subscription_id)))
(export g_dbus_connection_signal_unsubscribe)

;; typedef GDBusMessage *(*GDBusMessageFilterFunction)(GDBusConnection *
;;     connection, GDBusMessage *message, gboolean incoming, gpointer user_data
;;     );
(define-fh-function/p
  GDBusMessageFilterFunction
  '*
  (list '* '* ffi:int '*))

;; extern guint g_dbus_connection_add_filter(GDBusConnection *connection, 
;;     GDBusMessageFilterFunction filter_function, gpointer user_data, 
;;     GDestroyNotify user_data_free_func);
(define ~g_dbus_connection_add_filter #f)
(define (g_dbus_connection_add_filter
         connection
         filter_function
         user_data
         user_data_free_func)
  (unless
    ~g_dbus_connection_add_filter
    (set! ~g_dbus_connection_add_filter
      (fh-link-proc
        "g_dbus_connection_add_filter"
        ffi:unsigned-int
        (list '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~filter_function
          ((make-ftn-arg-unwrapper
             '*
             (list '* '* ffi:int '*))
           filter_function))
        (~user_data (unwrap-gpointer user_data))
        (~user_data_free_func
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           user_data_free_func)))
    (~g_dbus_connection_add_filter
      ~connection
      ~filter_function
      ~user_data
      ~user_data_free_func)))
(export g_dbus_connection_add_filter)

;; extern void g_dbus_connection_remove_filter(GDBusConnection *connection, 
;;     guint filter_id);
(define ~g_dbus_connection_remove_filter #f)
(define (g_dbus_connection_remove_filter
         connection
         filter_id)
  (unless
    ~g_dbus_connection_remove_filter
    (set! ~g_dbus_connection_remove_filter
      (fh-link-proc
        "g_dbus_connection_remove_filter"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~filter_id (unwrap~fixed filter_id)))
    (~g_dbus_connection_remove_filter
      ~connection
      ~filter_id)))
(export g_dbus_connection_remove_filter)

;; extern GQuark g_dbus_error_quark(void);
(define ~g_dbus_error_quark #f)
(define (g_dbus_error_quark)
  (unless
    ~g_dbus_error_quark
    (set! ~g_dbus_error_quark
      (fh-link-proc
        "g_dbus_error_quark"
        ffi:unsigned-int
        (list))))
  (let () (~g_dbus_error_quark)))
(export g_dbus_error_quark)

;; extern gboolean g_dbus_error_is_remote_error(const GError *error);
(define ~g_dbus_error_is_remote_error #f)
(define (g_dbus_error_is_remote_error error)
  (unless
    ~g_dbus_error_is_remote_error
    (set! ~g_dbus_error_is_remote_error
      (fh-link-proc
        "g_dbus_error_is_remote_error"
        ffi:int
        (list '*))))
  (let () (~g_dbus_error_is_remote_error error)))
(export g_dbus_error_is_remote_error)

;; extern gchar *g_dbus_error_get_remote_error(const GError *error);
(define ~g_dbus_error_get_remote_error #f)
(define (g_dbus_error_get_remote_error error)
  (unless
    ~g_dbus_error_get_remote_error
    (set! ~g_dbus_error_get_remote_error
      (fh-link-proc
        "g_dbus_error_get_remote_error"
        '*
        (list '*))))
  (let () (~g_dbus_error_get_remote_error error)))
(export g_dbus_error_get_remote_error)

;; extern gboolean g_dbus_error_strip_remote_error(GError *error);
(define ~g_dbus_error_strip_remote_error #f)
(define (g_dbus_error_strip_remote_error error)
  (unless
    ~g_dbus_error_strip_remote_error
    (set! ~g_dbus_error_strip_remote_error
      (fh-link-proc
        "g_dbus_error_strip_remote_error"
        ffi:int
        (list '*))))
  (let () (~g_dbus_error_strip_remote_error error)))
(export g_dbus_error_strip_remote_error)

;; struct _GDBusErrorEntry {
;;   gint error_code;
;;   const gchar *dbus_error_name;
;; };
(define struct-_GDBusErrorEntry-desc
  (bs:struct
    (list `(error_code ,int)
          `(dbus_error_name ,(bs:pointer int)))))
(export struct-_GDBusErrorEntry-desc)
(define-fh-compound-type/p struct-_GDBusErrorEntry struct-_GDBusErrorEntry-desc)
(set! GDBusErrorEntry-desc struct-_GDBusErrorEntry-desc)
(define-fh-compound-type GDBusErrorEntry GDBusErrorEntry-desc)

;; extern gboolean g_dbus_error_register_error(GQuark error_domain, gint 
;;     error_code, const gchar *dbus_error_name);
(define ~g_dbus_error_register_error #f)
(define (g_dbus_error_register_error
         error_domain
         error_code
         dbus_error_name)
  (unless
    ~g_dbus_error_register_error
    (set! ~g_dbus_error_register_error
      (fh-link-proc
        "g_dbus_error_register_error"
        ffi:int
        (list ffi:unsigned-int ffi:int '*))))
  (let ((~error_domain (unwrap~fixed error_domain))
        (~error_code (unwrap~fixed error_code))
        (~dbus_error_name
          (unwrap~pointer dbus_error_name)))
    (~g_dbus_error_register_error
      ~error_domain
      ~error_code
      ~dbus_error_name)))
(export g_dbus_error_register_error)

;; extern gboolean g_dbus_error_unregister_error(GQuark error_domain, gint 
;;     error_code, const gchar *dbus_error_name);
(define ~g_dbus_error_unregister_error #f)
(define (g_dbus_error_unregister_error
         error_domain
         error_code
         dbus_error_name)
  (unless
    ~g_dbus_error_unregister_error
    (set! ~g_dbus_error_unregister_error
      (fh-link-proc
        "g_dbus_error_unregister_error"
        ffi:int
        (list ffi:unsigned-int ffi:int '*))))
  (let ((~error_domain (unwrap~fixed error_domain))
        (~error_code (unwrap~fixed error_code))
        (~dbus_error_name
          (unwrap~pointer dbus_error_name)))
    (~g_dbus_error_unregister_error
      ~error_domain
      ~error_code
      ~dbus_error_name)))
(export g_dbus_error_unregister_error)

;; extern void g_dbus_error_register_error_domain(const gchar *
;;     error_domain_quark_name, volatile gsize *quark_volatile, const 
;;     GDBusErrorEntry *entries, guint num_entries);
(define ~g_dbus_error_register_error_domain #f)
(define (g_dbus_error_register_error_domain
         error_domain_quark_name
         quark_volatile
         entries
         num_entries)
  (unless
    ~g_dbus_error_register_error_domain
    (set! ~g_dbus_error_register_error_domain
      (fh-link-proc
        "g_dbus_error_register_error_domain"
        ffi:void
        (list '* '* '* ffi:unsigned-int))))
  (let ((~error_domain_quark_name
          (unwrap~pointer error_domain_quark_name))
        (~quark_volatile (unwrap~pointer quark_volatile))
        (~entries (unwrap-GDBusErrorEntry* entries))
        (~num_entries (unwrap~fixed num_entries)))
    (~g_dbus_error_register_error_domain
      ~error_domain_quark_name
      ~quark_volatile
      ~entries
      ~num_entries)))
(export g_dbus_error_register_error_domain)

;; extern GError *g_dbus_error_new_for_dbus_error(const gchar *dbus_error_name
;;     , const gchar *dbus_error_message);
(define ~g_dbus_error_new_for_dbus_error #f)
(define (g_dbus_error_new_for_dbus_error
         dbus_error_name
         dbus_error_message)
  (unless
    ~g_dbus_error_new_for_dbus_error
    (set! ~g_dbus_error_new_for_dbus_error
      (fh-link-proc
        "g_dbus_error_new_for_dbus_error"
        '*
        (list '* '*))))
  (let ((~dbus_error_name
          (unwrap~pointer dbus_error_name))
        (~dbus_error_message
          (unwrap~pointer dbus_error_message)))
    (~g_dbus_error_new_for_dbus_error
      ~dbus_error_name
      ~dbus_error_message)))
(export g_dbus_error_new_for_dbus_error)

;; extern void g_dbus_error_set_dbus_error(GError **error, const gchar *
;;     dbus_error_name, const gchar *dbus_error_message, const gchar *format, 
;;     ...);
;; ... failed.

;; extern void g_dbus_error_set_dbus_error_valist(GError **error, const gchar *
;;     dbus_error_name, const gchar *dbus_error_message, const gchar *format, 
;;     va_list var_args);
(define ~g_dbus_error_set_dbus_error_valist #f)
(define (g_dbus_error_set_dbus_error_valist
         error
         dbus_error_name
         dbus_error_message
         format
         var_args)
  (unless
    ~g_dbus_error_set_dbus_error_valist
    (set! ~g_dbus_error_set_dbus_error_valist
      (fh-link-proc
        "g_dbus_error_set_dbus_error_valist"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~error (unwrap~pointer error))
        (~dbus_error_name
          (unwrap~pointer dbus_error_name))
        (~dbus_error_message
          (unwrap~pointer dbus_error_message))
        (~format (unwrap~pointer format))
        (~var_args (unwrap~pointer var_args)))
    (~g_dbus_error_set_dbus_error_valist
      ~error
      ~dbus_error_name
      ~dbus_error_message
      ~format
      ~var_args)))
(export g_dbus_error_set_dbus_error_valist)

;; extern gchar *g_dbus_error_encode_gerror(const GError *error);
(define ~g_dbus_error_encode_gerror #f)
(define (g_dbus_error_encode_gerror error)
  (unless
    ~g_dbus_error_encode_gerror
    (set! ~g_dbus_error_encode_gerror
      (fh-link-proc
        "g_dbus_error_encode_gerror"
        '*
        (list '*))))
  (let () (~g_dbus_error_encode_gerror error)))
(export g_dbus_error_encode_gerror)

;; struct _GDBusAnnotationInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *key;
;;   gchar *value;
;;   GDBusAnnotationInfo **annotations;
;; };
(define struct-_GDBusAnnotationInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(key ,(bs:pointer int))
          `(value ,(bs:pointer int))
          `(annotations
             ,(bs:pointer
                (bs:pointer (delay GDBusAnnotationInfo*-desc)))))))
(export struct-_GDBusAnnotationInfo-desc)
(define-fh-compound-type/p struct-_GDBusAnnotationInfo struct-_GDBusAnnotationInfo-desc)
(set! GDBusAnnotationInfo-desc struct-_GDBusAnnotationInfo-desc)
(define-fh-compound-type GDBusAnnotationInfo GDBusAnnotationInfo-desc)

;; struct _GDBusArgInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *name;
;;   gchar *signature;
;;   GDBusAnnotationInfo **annotations;
;; };
(define struct-_GDBusArgInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(name ,(bs:pointer int))
          `(signature ,(bs:pointer int))
          `(annotations
             ,(bs:pointer
                (bs:pointer (delay GDBusAnnotationInfo*-desc)))))))
(export struct-_GDBusArgInfo-desc)
(define-fh-compound-type/p struct-_GDBusArgInfo struct-_GDBusArgInfo-desc)
(set! GDBusArgInfo-desc struct-_GDBusArgInfo-desc)
(define-fh-compound-type GDBusArgInfo GDBusArgInfo-desc)

;; struct _GDBusMethodInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *name;
;;   GDBusArgInfo **in_args;
;;   GDBusArgInfo **out_args;
;;   GDBusAnnotationInfo **annotations;
;; };
(define struct-_GDBusMethodInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(name ,(bs:pointer int))
          `(in_args
             ,(bs:pointer
                (bs:pointer (delay GDBusArgInfo*-desc))))
          `(out_args
             ,(bs:pointer
                (bs:pointer (delay GDBusArgInfo*-desc))))
          `(annotations
             ,(bs:pointer
                (bs:pointer (delay GDBusAnnotationInfo*-desc)))))))
(export struct-_GDBusMethodInfo-desc)
(define-fh-compound-type/p struct-_GDBusMethodInfo struct-_GDBusMethodInfo-desc)
(set! GDBusMethodInfo-desc struct-_GDBusMethodInfo-desc)
(define-fh-compound-type GDBusMethodInfo GDBusMethodInfo-desc)

;; struct _GDBusSignalInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *name;
;;   GDBusArgInfo **args;
;;   GDBusAnnotationInfo **annotations;
;; };
(define struct-_GDBusSignalInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(name ,(bs:pointer int))
          `(args ,(bs:pointer
                    (bs:pointer (delay GDBusArgInfo*-desc))))
          `(annotations
             ,(bs:pointer
                (bs:pointer (delay GDBusAnnotationInfo*-desc)))))))
(export struct-_GDBusSignalInfo-desc)
(define-fh-compound-type/p struct-_GDBusSignalInfo struct-_GDBusSignalInfo-desc)
(set! GDBusSignalInfo-desc struct-_GDBusSignalInfo-desc)
(define-fh-compound-type GDBusSignalInfo GDBusSignalInfo-desc)

;; struct _GDBusPropertyInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *name;
;;   gchar *signature;
;;   GDBusPropertyInfoFlags flags;
;;   GDBusAnnotationInfo **annotations;
;; };
(define struct-_GDBusPropertyInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(name ,(bs:pointer int))
          `(signature ,(bs:pointer int))
          `(flags ,int)
          `(annotations
             ,(bs:pointer
                (bs:pointer (delay GDBusAnnotationInfo*-desc)))))))
(export struct-_GDBusPropertyInfo-desc)
(define-fh-compound-type/p struct-_GDBusPropertyInfo struct-_GDBusPropertyInfo-desc)
(set! GDBusPropertyInfo-desc struct-_GDBusPropertyInfo-desc)
(define-fh-compound-type GDBusPropertyInfo GDBusPropertyInfo-desc)

;; struct _GDBusInterfaceInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *name;
;;   GDBusMethodInfo **methods;
;;   GDBusSignalInfo **signals;
;;   GDBusPropertyInfo **properties;
;;   GDBusAnnotationInfo **annotations;
;; };
(define struct-_GDBusInterfaceInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(name ,(bs:pointer int))
          `(methods
             ,(bs:pointer
                (bs:pointer (delay GDBusMethodInfo*-desc))))
          `(signals
             ,(bs:pointer
                (bs:pointer (delay GDBusSignalInfo*-desc))))
          `(properties
             ,(bs:pointer
                (bs:pointer (delay GDBusPropertyInfo*-desc))))
          `(annotations
             ,(bs:pointer
                (bs:pointer (delay GDBusAnnotationInfo*-desc)))))))
(export struct-_GDBusInterfaceInfo-desc)
(define-fh-compound-type/p struct-_GDBusInterfaceInfo struct-_GDBusInterfaceInfo-desc)
(set! GDBusInterfaceInfo-desc struct-_GDBusInterfaceInfo-desc)
(define-fh-compound-type GDBusInterfaceInfo GDBusInterfaceInfo-desc)

;; struct _GDBusNodeInfo {
;;   /*< public >*/
;;   volatile gint ref_count;
;;   gchar *path;
;;   GDBusInterfaceInfo **interfaces;
;;   GDBusNodeInfo **nodes;
;;   GDBusAnnotationInfo **annotations;
;; };
(define struct-_GDBusNodeInfo-desc
  (bs:struct
    (list `(ref_count ,int)
          `(path ,(bs:pointer int))
          `(interfaces
             ,(bs:pointer
                (bs:pointer (delay GDBusInterfaceInfo*-desc))))
          `(nodes ,(bs:pointer
                     (bs:pointer (delay GDBusNodeInfo*-desc))))
          `(annotations
             ,(bs:pointer
                (bs:pointer (delay GDBusAnnotationInfo*-desc)))))))
(export struct-_GDBusNodeInfo-desc)
(define-fh-compound-type/p struct-_GDBusNodeInfo struct-_GDBusNodeInfo-desc)
(set! GDBusNodeInfo-desc struct-_GDBusNodeInfo-desc)
(define-fh-compound-type GDBusNodeInfo GDBusNodeInfo-desc)

;; extern const gchar *g_dbus_annotation_info_lookup(GDBusAnnotationInfo **
;;     annotations, const gchar *name);
(define ~g_dbus_annotation_info_lookup #f)
(define (g_dbus_annotation_info_lookup annotations name)
  (unless
    ~g_dbus_annotation_info_lookup
    (set! ~g_dbus_annotation_info_lookup
      (fh-link-proc
        "g_dbus_annotation_info_lookup"
        '*
        (list '* '*))))
  (let ((~annotations (unwrap~pointer annotations))
        (~name (unwrap~pointer name)))
    (~g_dbus_annotation_info_lookup
      ~annotations
      ~name)))
(export g_dbus_annotation_info_lookup)

;; extern GDBusMethodInfo *g_dbus_interface_info_lookup_method(
;;     GDBusInterfaceInfo *info, const gchar *name);
(define ~g_dbus_interface_info_lookup_method #f)
(define (g_dbus_interface_info_lookup_method info name)
  (unless
    ~g_dbus_interface_info_lookup_method
    (set! ~g_dbus_interface_info_lookup_method
      (fh-link-proc
        "g_dbus_interface_info_lookup_method"
        '*
        (list '* '*))))
  (let ((~info (unwrap-GDBusInterfaceInfo* info))
        (~name (unwrap~pointer name)))
    (wrap-GDBusMethodInfo*
      (~g_dbus_interface_info_lookup_method
        ~info
        ~name))))
(export g_dbus_interface_info_lookup_method)

;; extern GDBusSignalInfo *g_dbus_interface_info_lookup_signal(
;;     GDBusInterfaceInfo *info, const gchar *name);
(define ~g_dbus_interface_info_lookup_signal #f)
(define (g_dbus_interface_info_lookup_signal info name)
  (unless
    ~g_dbus_interface_info_lookup_signal
    (set! ~g_dbus_interface_info_lookup_signal
      (fh-link-proc
        "g_dbus_interface_info_lookup_signal"
        '*
        (list '* '*))))
  (let ((~info (unwrap-GDBusInterfaceInfo* info))
        (~name (unwrap~pointer name)))
    (wrap-GDBusSignalInfo*
      (~g_dbus_interface_info_lookup_signal
        ~info
        ~name))))
(export g_dbus_interface_info_lookup_signal)

;; extern GDBusPropertyInfo *g_dbus_interface_info_lookup_property(
;;     GDBusInterfaceInfo *info, const gchar *name);
(define ~g_dbus_interface_info_lookup_property #f)
(define (g_dbus_interface_info_lookup_property info name)
  (unless
    ~g_dbus_interface_info_lookup_property
    (set! ~g_dbus_interface_info_lookup_property
      (fh-link-proc
        "g_dbus_interface_info_lookup_property"
        '*
        (list '* '*))))
  (let ((~info (unwrap-GDBusInterfaceInfo* info))
        (~name (unwrap~pointer name)))
    (wrap-GDBusPropertyInfo*
      (~g_dbus_interface_info_lookup_property
        ~info
        ~name))))
(export g_dbus_interface_info_lookup_property)

;; extern void g_dbus_interface_info_cache_build(GDBusInterfaceInfo *info);
(define ~g_dbus_interface_info_cache_build #f)
(define (g_dbus_interface_info_cache_build info)
  (unless
    ~g_dbus_interface_info_cache_build
    (set! ~g_dbus_interface_info_cache_build
      (fh-link-proc
        "g_dbus_interface_info_cache_build"
        ffi:void
        (list '*))))
  (let ((~info (unwrap-GDBusInterfaceInfo* info)))
    (~g_dbus_interface_info_cache_build ~info)))
(export g_dbus_interface_info_cache_build)

;; extern void g_dbus_interface_info_cache_release(GDBusInterfaceInfo *info);
(define ~g_dbus_interface_info_cache_release #f)
(define (g_dbus_interface_info_cache_release info)
  (unless
    ~g_dbus_interface_info_cache_release
    (set! ~g_dbus_interface_info_cache_release
      (fh-link-proc
        "g_dbus_interface_info_cache_release"
        ffi:void
        (list '*))))
  (let ((~info (unwrap-GDBusInterfaceInfo* info)))
    (~g_dbus_interface_info_cache_release ~info)))
(export g_dbus_interface_info_cache_release)

;; extern void g_dbus_interface_info_generate_xml(GDBusInterfaceInfo *info, 
;;     guint indent, GString *string_builder);
(define ~g_dbus_interface_info_generate_xml #f)
(define (g_dbus_interface_info_generate_xml
         info
         indent
         string_builder)
  (unless
    ~g_dbus_interface_info_generate_xml
    (set! ~g_dbus_interface_info_generate_xml
      (fh-link-proc
        "g_dbus_interface_info_generate_xml"
        ffi:void
        (list '* ffi:unsigned-int '*))))
  (let ((~info (unwrap-GDBusInterfaceInfo* info))
        (~indent (unwrap~fixed indent)))
    (~g_dbus_interface_info_generate_xml
      ~info
      ~indent
      string_builder)))
(export g_dbus_interface_info_generate_xml)

;; extern GDBusNodeInfo *g_dbus_node_info_new_for_xml(const gchar *xml_data, 
;;     GError **error);
(define ~g_dbus_node_info_new_for_xml #f)
(define (g_dbus_node_info_new_for_xml xml_data error)
  (unless
    ~g_dbus_node_info_new_for_xml
    (set! ~g_dbus_node_info_new_for_xml
      (fh-link-proc
        "g_dbus_node_info_new_for_xml"
        '*
        (list '* '*))))
  (let ((~xml_data (unwrap~pointer xml_data))
        (~error (unwrap~pointer error)))
    (wrap-GDBusNodeInfo*
      (~g_dbus_node_info_new_for_xml ~xml_data ~error))))
(export g_dbus_node_info_new_for_xml)

;; extern GDBusInterfaceInfo *g_dbus_node_info_lookup_interface(GDBusNodeInfo *
;;     info, const gchar *name);
(define ~g_dbus_node_info_lookup_interface #f)
(define (g_dbus_node_info_lookup_interface info name)
  (unless
    ~g_dbus_node_info_lookup_interface
    (set! ~g_dbus_node_info_lookup_interface
      (fh-link-proc
        "g_dbus_node_info_lookup_interface"
        '*
        (list '* '*))))
  (let ((~info (unwrap-GDBusNodeInfo* info))
        (~name (unwrap~pointer name)))
    (wrap-GDBusInterfaceInfo*
      (~g_dbus_node_info_lookup_interface ~info ~name))))
(export g_dbus_node_info_lookup_interface)

;; extern void g_dbus_node_info_generate_xml(GDBusNodeInfo *info, guint indent
;;     , GString *string_builder);
(define ~g_dbus_node_info_generate_xml #f)
(define (g_dbus_node_info_generate_xml
         info
         indent
         string_builder)
  (unless
    ~g_dbus_node_info_generate_xml
    (set! ~g_dbus_node_info_generate_xml
      (fh-link-proc
        "g_dbus_node_info_generate_xml"
        ffi:void
        (list '* ffi:unsigned-int '*))))
  (let ((~info (unwrap-GDBusNodeInfo* info))
        (~indent (unwrap~fixed indent)))
    (~g_dbus_node_info_generate_xml
      ~info
      ~indent
      string_builder)))
(export g_dbus_node_info_generate_xml)

;; extern GDBusNodeInfo *g_dbus_node_info_ref(GDBusNodeInfo *info);
(define ~g_dbus_node_info_ref #f)
(define (g_dbus_node_info_ref info)
  (unless
    ~g_dbus_node_info_ref
    (set! ~g_dbus_node_info_ref
      (fh-link-proc
        "g_dbus_node_info_ref"
        '*
        (list '*))))
  (let ((~info (unwrap-GDBusNodeInfo* info)))
    (wrap-GDBusNodeInfo*
      (~g_dbus_node_info_ref ~info))))
(export g_dbus_node_info_ref)

;; extern GDBusInterfaceInfo *g_dbus_interface_info_ref(GDBusInterfaceInfo *
;;     info);
(define ~g_dbus_interface_info_ref #f)
(define (g_dbus_interface_info_ref info)
  (unless
    ~g_dbus_interface_info_ref
    (set! ~g_dbus_interface_info_ref
      (fh-link-proc
        "g_dbus_interface_info_ref"
        '*
        (list '*))))
  (let ((~info (unwrap-GDBusInterfaceInfo* info)))
    (wrap-GDBusInterfaceInfo*
      (~g_dbus_interface_info_ref ~info))))
(export g_dbus_interface_info_ref)

;; extern GDBusMethodInfo *g_dbus_method_info_ref(GDBusMethodInfo *info);
(define ~g_dbus_method_info_ref #f)
(define (g_dbus_method_info_ref info)
  (unless
    ~g_dbus_method_info_ref
    (set! ~g_dbus_method_info_ref
      (fh-link-proc
        "g_dbus_method_info_ref"
        '*
        (list '*))))
  (let ((~info (unwrap-GDBusMethodInfo* info)))
    (wrap-GDBusMethodInfo*
      (~g_dbus_method_info_ref ~info))))
(export g_dbus_method_info_ref)

;; extern GDBusSignalInfo *g_dbus_signal_info_ref(GDBusSignalInfo *info);
(define ~g_dbus_signal_info_ref #f)
(define (g_dbus_signal_info_ref info)
  (unless
    ~g_dbus_signal_info_ref
    (set! ~g_dbus_signal_info_ref
      (fh-link-proc
        "g_dbus_signal_info_ref"
        '*
        (list '*))))
  (let ((~info (unwrap-GDBusSignalInfo* info)))
    (wrap-GDBusSignalInfo*
      (~g_dbus_signal_info_ref ~info))))
(export g_dbus_signal_info_ref)

;; extern GDBusPropertyInfo *g_dbus_property_info_ref(GDBusPropertyInfo *info)
;;     ;
(define ~g_dbus_property_info_ref #f)
(define (g_dbus_property_info_ref info)
  (unless
    ~g_dbus_property_info_ref
    (set! ~g_dbus_property_info_ref
      (fh-link-proc
        "g_dbus_property_info_ref"
        '*
        (list '*))))
  (let ((~info (unwrap-GDBusPropertyInfo* info)))
    (wrap-GDBusPropertyInfo*
      (~g_dbus_property_info_ref ~info))))
(export g_dbus_property_info_ref)

;; extern GDBusArgInfo *g_dbus_arg_info_ref(GDBusArgInfo *info);
(define ~g_dbus_arg_info_ref #f)
(define (g_dbus_arg_info_ref info)
  (unless
    ~g_dbus_arg_info_ref
    (set! ~g_dbus_arg_info_ref
      (fh-link-proc "g_dbus_arg_info_ref" '* (list '*))))
  (let ((~info (unwrap-GDBusArgInfo* info)))
    (wrap-GDBusArgInfo* (~g_dbus_arg_info_ref ~info))))
(export g_dbus_arg_info_ref)

;; extern GDBusAnnotationInfo *g_dbus_annotation_info_ref(GDBusAnnotationInfo *
;;     info);
(define ~g_dbus_annotation_info_ref #f)
(define (g_dbus_annotation_info_ref info)
  (unless
    ~g_dbus_annotation_info_ref
    (set! ~g_dbus_annotation_info_ref
      (fh-link-proc
        "g_dbus_annotation_info_ref"
        '*
        (list '*))))
  (let ((~info (unwrap-GDBusAnnotationInfo* info)))
    (wrap-GDBusAnnotationInfo*
      (~g_dbus_annotation_info_ref ~info))))
(export g_dbus_annotation_info_ref)

;; extern void g_dbus_node_info_unref(GDBusNodeInfo *info);
(define ~g_dbus_node_info_unref #f)
(define (g_dbus_node_info_unref info)
  (unless
    ~g_dbus_node_info_unref
    (set! ~g_dbus_node_info_unref
      (fh-link-proc
        "g_dbus_node_info_unref"
        ffi:void
        (list '*))))
  (let ((~info (unwrap-GDBusNodeInfo* info)))
    (~g_dbus_node_info_unref ~info)))
(export g_dbus_node_info_unref)

;; extern void g_dbus_interface_info_unref(GDBusInterfaceInfo *info);
(define ~g_dbus_interface_info_unref #f)
(define (g_dbus_interface_info_unref info)
  (unless
    ~g_dbus_interface_info_unref
    (set! ~g_dbus_interface_info_unref
      (fh-link-proc
        "g_dbus_interface_info_unref"
        ffi:void
        (list '*))))
  (let ((~info (unwrap-GDBusInterfaceInfo* info)))
    (~g_dbus_interface_info_unref ~info)))
(export g_dbus_interface_info_unref)

;; extern void g_dbus_method_info_unref(GDBusMethodInfo *info);
(define ~g_dbus_method_info_unref #f)
(define (g_dbus_method_info_unref info)
  (unless
    ~g_dbus_method_info_unref
    (set! ~g_dbus_method_info_unref
      (fh-link-proc
        "g_dbus_method_info_unref"
        ffi:void
        (list '*))))
  (let ((~info (unwrap-GDBusMethodInfo* info)))
    (~g_dbus_method_info_unref ~info)))
(export g_dbus_method_info_unref)

;; extern void g_dbus_signal_info_unref(GDBusSignalInfo *info);
(define ~g_dbus_signal_info_unref #f)
(define (g_dbus_signal_info_unref info)
  (unless
    ~g_dbus_signal_info_unref
    (set! ~g_dbus_signal_info_unref
      (fh-link-proc
        "g_dbus_signal_info_unref"
        ffi:void
        (list '*))))
  (let ((~info (unwrap-GDBusSignalInfo* info)))
    (~g_dbus_signal_info_unref ~info)))
(export g_dbus_signal_info_unref)

;; extern void g_dbus_property_info_unref(GDBusPropertyInfo *info);
(define ~g_dbus_property_info_unref #f)
(define (g_dbus_property_info_unref info)
  (unless
    ~g_dbus_property_info_unref
    (set! ~g_dbus_property_info_unref
      (fh-link-proc
        "g_dbus_property_info_unref"
        ffi:void
        (list '*))))
  (let ((~info (unwrap-GDBusPropertyInfo* info)))
    (~g_dbus_property_info_unref ~info)))
(export g_dbus_property_info_unref)

;; extern void g_dbus_arg_info_unref(GDBusArgInfo *info);
(define ~g_dbus_arg_info_unref #f)
(define (g_dbus_arg_info_unref info)
  (unless
    ~g_dbus_arg_info_unref
    (set! ~g_dbus_arg_info_unref
      (fh-link-proc
        "g_dbus_arg_info_unref"
        ffi:void
        (list '*))))
  (let ((~info (unwrap-GDBusArgInfo* info)))
    (~g_dbus_arg_info_unref ~info)))
(export g_dbus_arg_info_unref)

;; extern void g_dbus_annotation_info_unref(GDBusAnnotationInfo *info);
(define ~g_dbus_annotation_info_unref #f)
(define (g_dbus_annotation_info_unref info)
  (unless
    ~g_dbus_annotation_info_unref
    (set! ~g_dbus_annotation_info_unref
      (fh-link-proc
        "g_dbus_annotation_info_unref"
        ffi:void
        (list '*))))
  (let ((~info (unwrap-GDBusAnnotationInfo* info)))
    (~g_dbus_annotation_info_unref ~info)))
(export g_dbus_annotation_info_unref)

;; extern GType g_dbus_node_info_get_type(void);
(define ~g_dbus_node_info_get_type #f)
(define (g_dbus_node_info_get_type)
  (unless
    ~g_dbus_node_info_get_type
    (set! ~g_dbus_node_info_get_type
      (fh-link-proc
        "g_dbus_node_info_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_node_info_get_type)))
(export g_dbus_node_info_get_type)

;; extern GType g_dbus_interface_info_get_type(void);
(define ~g_dbus_interface_info_get_type #f)
(define (g_dbus_interface_info_get_type)
  (unless
    ~g_dbus_interface_info_get_type
    (set! ~g_dbus_interface_info_get_type
      (fh-link-proc
        "g_dbus_interface_info_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_interface_info_get_type)))
(export g_dbus_interface_info_get_type)

;; extern GType g_dbus_method_info_get_type(void);
(define ~g_dbus_method_info_get_type #f)
(define (g_dbus_method_info_get_type)
  (unless
    ~g_dbus_method_info_get_type
    (set! ~g_dbus_method_info_get_type
      (fh-link-proc
        "g_dbus_method_info_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_method_info_get_type)))
(export g_dbus_method_info_get_type)

;; extern GType g_dbus_signal_info_get_type(void);
(define ~g_dbus_signal_info_get_type #f)
(define (g_dbus_signal_info_get_type)
  (unless
    ~g_dbus_signal_info_get_type
    (set! ~g_dbus_signal_info_get_type
      (fh-link-proc
        "g_dbus_signal_info_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_signal_info_get_type)))
(export g_dbus_signal_info_get_type)

;; extern GType g_dbus_property_info_get_type(void);
(define ~g_dbus_property_info_get_type #f)
(define (g_dbus_property_info_get_type)
  (unless
    ~g_dbus_property_info_get_type
    (set! ~g_dbus_property_info_get_type
      (fh-link-proc
        "g_dbus_property_info_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_property_info_get_type)))
(export g_dbus_property_info_get_type)

;; extern GType g_dbus_arg_info_get_type(void);
(define ~g_dbus_arg_info_get_type #f)
(define (g_dbus_arg_info_get_type)
  (unless
    ~g_dbus_arg_info_get_type
    (set! ~g_dbus_arg_info_get_type
      (fh-link-proc
        "g_dbus_arg_info_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_arg_info_get_type)))
(export g_dbus_arg_info_get_type)

;; extern GType g_dbus_annotation_info_get_type(void);
(define ~g_dbus_annotation_info_get_type #f)
(define (g_dbus_annotation_info_get_type)
  (unless
    ~g_dbus_annotation_info_get_type
    (set! ~g_dbus_annotation_info_get_type
      (fh-link-proc
        "g_dbus_annotation_info_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_annotation_info_get_type)))
(export g_dbus_annotation_info_get_type)

;; extern GType g_dbus_message_get_type(void);
(define ~g_dbus_message_get_type #f)
(define (g_dbus_message_get_type)
  (unless
    ~g_dbus_message_get_type
    (set! ~g_dbus_message_get_type
      (fh-link-proc
        "g_dbus_message_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_message_get_type)))
(export g_dbus_message_get_type)

;; extern GDBusMessage *g_dbus_message_new(void);
(define ~g_dbus_message_new #f)
(define (g_dbus_message_new)
  (unless
    ~g_dbus_message_new
    (set! ~g_dbus_message_new
      (fh-link-proc "g_dbus_message_new" '* (list))))
  (let ()
    (wrap-GDBusMessage* (~g_dbus_message_new))))
(export g_dbus_message_new)

;; extern GDBusMessage *g_dbus_message_new_signal(const gchar *path, const 
;;     gchar *interface_, const gchar *signal);
(define ~g_dbus_message_new_signal #f)
(define (g_dbus_message_new_signal
         path
         interface_
         signal)
  (unless
    ~g_dbus_message_new_signal
    (set! ~g_dbus_message_new_signal
      (fh-link-proc
        "g_dbus_message_new_signal"
        '*
        (list '* '* '*))))
  (let ((~path (unwrap~pointer path))
        (~interface_ (unwrap~pointer interface_))
        (~signal (unwrap~pointer signal)))
    (wrap-GDBusMessage*
      (~g_dbus_message_new_signal
        ~path
        ~interface_
        ~signal))))
(export g_dbus_message_new_signal)

;; extern GDBusMessage *g_dbus_message_new_method_call(const gchar *name, const
;;      gchar *path, const gchar *interface_, const gchar *method);
(define ~g_dbus_message_new_method_call #f)
(define (g_dbus_message_new_method_call
         name
         path
         interface_
         method)
  (unless
    ~g_dbus_message_new_method_call
    (set! ~g_dbus_message_new_method_call
      (fh-link-proc
        "g_dbus_message_new_method_call"
        '*
        (list '* '* '* '*))))
  (let ((~name (unwrap~pointer name))
        (~path (unwrap~pointer path))
        (~interface_ (unwrap~pointer interface_))
        (~method (unwrap~pointer method)))
    (wrap-GDBusMessage*
      (~g_dbus_message_new_method_call
        ~name
        ~path
        ~interface_
        ~method))))
(export g_dbus_message_new_method_call)

;; extern GDBusMessage *g_dbus_message_new_method_reply(GDBusMessage *
;;     method_call_message);
(define ~g_dbus_message_new_method_reply #f)
(define (g_dbus_message_new_method_reply
         method_call_message)
  (unless
    ~g_dbus_message_new_method_reply
    (set! ~g_dbus_message_new_method_reply
      (fh-link-proc
        "g_dbus_message_new_method_reply"
        '*
        (list '*))))
  (let ((~method_call_message
          (unwrap-GDBusMessage* method_call_message)))
    (wrap-GDBusMessage*
      (~g_dbus_message_new_method_reply
        ~method_call_message))))
(export g_dbus_message_new_method_reply)

;; extern GDBusMessage *g_dbus_message_new_method_error(GDBusMessage *
;;     method_call_message, const gchar *error_name, const gchar *
;;     error_message_format, ...);
;; ... failed.

;; extern GDBusMessage *g_dbus_message_new_method_error_valist(GDBusMessage *
;;     method_call_message, const gchar *error_name, const gchar *
;;     error_message_format, va_list var_args);
(define ~g_dbus_message_new_method_error_valist #f)
(define (g_dbus_message_new_method_error_valist
         method_call_message
         error_name
         error_message_format
         var_args)
  (unless
    ~g_dbus_message_new_method_error_valist
    (set! ~g_dbus_message_new_method_error_valist
      (fh-link-proc
        "g_dbus_message_new_method_error_valist"
        '*
        (list '* '* '* '*))))
  (let ((~method_call_message
          (unwrap-GDBusMessage* method_call_message))
        (~error_name (unwrap~pointer error_name))
        (~error_message_format
          (unwrap~pointer error_message_format))
        (~var_args (unwrap~pointer var_args)))
    (wrap-GDBusMessage*
      (~g_dbus_message_new_method_error_valist
        ~method_call_message
        ~error_name
        ~error_message_format
        ~var_args))))
(export g_dbus_message_new_method_error_valist)

;; extern GDBusMessage *g_dbus_message_new_method_error_literal(GDBusMessage *
;;     method_call_message, const gchar *error_name, const gchar *error_message
;;     );
(define ~g_dbus_message_new_method_error_literal #f)
(define (g_dbus_message_new_method_error_literal
         method_call_message
         error_name
         error_message)
  (unless
    ~g_dbus_message_new_method_error_literal
    (set! ~g_dbus_message_new_method_error_literal
      (fh-link-proc
        "g_dbus_message_new_method_error_literal"
        '*
        (list '* '* '*))))
  (let ((~method_call_message
          (unwrap-GDBusMessage* method_call_message))
        (~error_name (unwrap~pointer error_name))
        (~error_message (unwrap~pointer error_message)))
    (wrap-GDBusMessage*
      (~g_dbus_message_new_method_error_literal
        ~method_call_message
        ~error_name
        ~error_message))))
(export g_dbus_message_new_method_error_literal)

;; extern gchar *g_dbus_message_print(GDBusMessage *message, guint indent);
(define ~g_dbus_message_print #f)
(define (g_dbus_message_print message indent)
  (unless
    ~g_dbus_message_print
    (set! ~g_dbus_message_print
      (fh-link-proc
        "g_dbus_message_print"
        '*
        (list '* ffi:unsigned-int))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~indent (unwrap~fixed indent)))
    (~g_dbus_message_print ~message ~indent)))
(export g_dbus_message_print)

;; extern gboolean g_dbus_message_get_locked(GDBusMessage *message);
(define ~g_dbus_message_get_locked #f)
(define (g_dbus_message_get_locked message)
  (unless
    ~g_dbus_message_get_locked
    (set! ~g_dbus_message_get_locked
      (fh-link-proc
        "g_dbus_message_get_locked"
        ffi:int
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_locked ~message)))
(export g_dbus_message_get_locked)

;; extern void g_dbus_message_lock(GDBusMessage *message);
(define ~g_dbus_message_lock #f)
(define (g_dbus_message_lock message)
  (unless
    ~g_dbus_message_lock
    (set! ~g_dbus_message_lock
      (fh-link-proc
        "g_dbus_message_lock"
        ffi:void
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_lock ~message)))
(export g_dbus_message_lock)

;; extern GDBusMessage *g_dbus_message_copy(GDBusMessage *message, GError **
;;     error);
(define ~g_dbus_message_copy #f)
(define (g_dbus_message_copy message error)
  (unless
    ~g_dbus_message_copy
    (set! ~g_dbus_message_copy
      (fh-link-proc
        "g_dbus_message_copy"
        '*
        (list '* '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~error (unwrap~pointer error)))
    (wrap-GDBusMessage*
      (~g_dbus_message_copy ~message ~error))))
(export g_dbus_message_copy)

;; extern GDBusMessageByteOrder g_dbus_message_get_byte_order(GDBusMessage *
;;     message);
(define ~g_dbus_message_get_byte_order #f)
(define (g_dbus_message_get_byte_order message)
  (unless
    ~g_dbus_message_get_byte_order
    (set! ~g_dbus_message_get_byte_order
      (fh-link-proc
        "g_dbus_message_get_byte_order"
        ffi:int
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_byte_order ~message)))
(export g_dbus_message_get_byte_order)

;; extern void g_dbus_message_set_byte_order(GDBusMessage *message, 
;;     GDBusMessageByteOrder byte_order);
(define ~g_dbus_message_set_byte_order #f)
(define (g_dbus_message_set_byte_order
         message
         byte_order)
  (unless
    ~g_dbus_message_set_byte_order
    (set! ~g_dbus_message_set_byte_order
      (fh-link-proc
        "g_dbus_message_set_byte_order"
        ffi:void
        (list '* ffi:int))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~byte_order (unwrap~fixed byte_order)))
    (~g_dbus_message_set_byte_order
      ~message
      ~byte_order)))
(export g_dbus_message_set_byte_order)

;; extern GDBusMessageType g_dbus_message_get_message_type(GDBusMessage *
;;     message);
(define ~g_dbus_message_get_message_type #f)
(define (g_dbus_message_get_message_type message)
  (unless
    ~g_dbus_message_get_message_type
    (set! ~g_dbus_message_get_message_type
      (fh-link-proc
        "g_dbus_message_get_message_type"
        ffi:int
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_message_type ~message)))
(export g_dbus_message_get_message_type)

;; extern void g_dbus_message_set_message_type(GDBusMessage *message, 
;;     GDBusMessageType type);
(define ~g_dbus_message_set_message_type #f)
(define (g_dbus_message_set_message_type message type)
  (unless
    ~g_dbus_message_set_message_type
    (set! ~g_dbus_message_set_message_type
      (fh-link-proc
        "g_dbus_message_set_message_type"
        ffi:void
        (list '* ffi:int))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~type (unwrap~fixed type)))
    (~g_dbus_message_set_message_type ~message ~type)))
(export g_dbus_message_set_message_type)

;; extern GDBusMessageFlags g_dbus_message_get_flags(GDBusMessage *message);
(define ~g_dbus_message_get_flags #f)
(define (g_dbus_message_get_flags message)
  (unless
    ~g_dbus_message_get_flags
    (set! ~g_dbus_message_get_flags
      (fh-link-proc
        "g_dbus_message_get_flags"
        ffi:int
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_flags ~message)))
(export g_dbus_message_get_flags)

;; extern void g_dbus_message_set_flags(GDBusMessage *message, 
;;     GDBusMessageFlags flags);
(define ~g_dbus_message_set_flags #f)
(define (g_dbus_message_set_flags message flags)
  (unless
    ~g_dbus_message_set_flags
    (set! ~g_dbus_message_set_flags
      (fh-link-proc
        "g_dbus_message_set_flags"
        ffi:void
        (list '* ffi:int))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~flags (unwrap~fixed flags)))
    (~g_dbus_message_set_flags ~message ~flags)))
(export g_dbus_message_set_flags)

;; extern guint32 g_dbus_message_get_serial(GDBusMessage *message);
(define ~g_dbus_message_get_serial #f)
(define (g_dbus_message_get_serial message)
  (unless
    ~g_dbus_message_get_serial
    (set! ~g_dbus_message_get_serial
      (fh-link-proc
        "g_dbus_message_get_serial"
        ffi:unsigned-int
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_serial ~message)))
(export g_dbus_message_get_serial)

;; extern void g_dbus_message_set_serial(GDBusMessage *message, guint32 serial)
;;     ;
(define ~g_dbus_message_set_serial #f)
(define (g_dbus_message_set_serial message serial)
  (unless
    ~g_dbus_message_set_serial
    (set! ~g_dbus_message_set_serial
      (fh-link-proc
        "g_dbus_message_set_serial"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~serial (unwrap~fixed serial)))
    (~g_dbus_message_set_serial ~message ~serial)))
(export g_dbus_message_set_serial)

;; extern GVariant *g_dbus_message_get_header(GDBusMessage *message, 
;;     GDBusMessageHeaderField header_field);
(define ~g_dbus_message_get_header #f)
(define (g_dbus_message_get_header message header_field)
  (unless
    ~g_dbus_message_get_header
    (set! ~g_dbus_message_get_header
      (fh-link-proc
        "g_dbus_message_get_header"
        '*
        (list '* ffi:int))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~header_field (unwrap~fixed header_field)))
    (~g_dbus_message_get_header
      ~message
      ~header_field)))
(export g_dbus_message_get_header)

;; extern void g_dbus_message_set_header(GDBusMessage *message, 
;;     GDBusMessageHeaderField header_field, GVariant *value);
(define ~g_dbus_message_set_header #f)
(define (g_dbus_message_set_header
         message
         header_field
         value)
  (unless
    ~g_dbus_message_set_header
    (set! ~g_dbus_message_set_header
      (fh-link-proc
        "g_dbus_message_set_header"
        ffi:void
        (list '* ffi:int '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~header_field (unwrap~fixed header_field)))
    (~g_dbus_message_set_header
      ~message
      ~header_field
      value)))
(export g_dbus_message_set_header)

;; extern guchar *g_dbus_message_get_header_fields(GDBusMessage *message);
(define ~g_dbus_message_get_header_fields #f)
(define (g_dbus_message_get_header_fields message)
  (unless
    ~g_dbus_message_get_header_fields
    (set! ~g_dbus_message_get_header_fields
      (fh-link-proc
        "g_dbus_message_get_header_fields"
        '*
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_header_fields ~message)))
(export g_dbus_message_get_header_fields)

;; extern GVariant *g_dbus_message_get_body(GDBusMessage *message);
(define ~g_dbus_message_get_body #f)
(define (g_dbus_message_get_body message)
  (unless
    ~g_dbus_message_get_body
    (set! ~g_dbus_message_get_body
      (fh-link-proc
        "g_dbus_message_get_body"
        '*
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_body ~message)))
(export g_dbus_message_get_body)

;; extern void g_dbus_message_set_body(GDBusMessage *message, GVariant *body);
(define ~g_dbus_message_set_body #f)
(define (g_dbus_message_set_body message body)
  (unless
    ~g_dbus_message_set_body
    (set! ~g_dbus_message_set_body
      (fh-link-proc
        "g_dbus_message_set_body"
        ffi:void
        (list '* '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_set_body ~message body)))
(export g_dbus_message_set_body)

;; extern GUnixFDList *g_dbus_message_get_unix_fd_list(GDBusMessage *message);
(define ~g_dbus_message_get_unix_fd_list #f)
(define (g_dbus_message_get_unix_fd_list message)
  (unless
    ~g_dbus_message_get_unix_fd_list
    (set! ~g_dbus_message_get_unix_fd_list
      (fh-link-proc
        "g_dbus_message_get_unix_fd_list"
        '*
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (wrap-GUnixFDList*
      (~g_dbus_message_get_unix_fd_list ~message))))
(export g_dbus_message_get_unix_fd_list)

;; extern void g_dbus_message_set_unix_fd_list(GDBusMessage *message, 
;;     GUnixFDList *fd_list);
(define ~g_dbus_message_set_unix_fd_list #f)
(define (g_dbus_message_set_unix_fd_list message fd_list)
  (unless
    ~g_dbus_message_set_unix_fd_list
    (set! ~g_dbus_message_set_unix_fd_list
      (fh-link-proc
        "g_dbus_message_set_unix_fd_list"
        ffi:void
        (list '* '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~fd_list (unwrap-GUnixFDList* fd_list)))
    (~g_dbus_message_set_unix_fd_list
      ~message
      ~fd_list)))
(export g_dbus_message_set_unix_fd_list)

;; extern guint32 g_dbus_message_get_reply_serial(GDBusMessage *message);
(define ~g_dbus_message_get_reply_serial #f)
(define (g_dbus_message_get_reply_serial message)
  (unless
    ~g_dbus_message_get_reply_serial
    (set! ~g_dbus_message_get_reply_serial
      (fh-link-proc
        "g_dbus_message_get_reply_serial"
        ffi:unsigned-int
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_reply_serial ~message)))
(export g_dbus_message_get_reply_serial)

;; extern void g_dbus_message_set_reply_serial(GDBusMessage *message, guint32 
;;     value);
(define ~g_dbus_message_set_reply_serial #f)
(define (g_dbus_message_set_reply_serial message value)
  (unless
    ~g_dbus_message_set_reply_serial
    (set! ~g_dbus_message_set_reply_serial
      (fh-link-proc
        "g_dbus_message_set_reply_serial"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~value (unwrap~fixed value)))
    (~g_dbus_message_set_reply_serial
      ~message
      ~value)))
(export g_dbus_message_set_reply_serial)

;; extern const gchar *g_dbus_message_get_interface(GDBusMessage *message);
(define ~g_dbus_message_get_interface #f)
(define (g_dbus_message_get_interface message)
  (unless
    ~g_dbus_message_get_interface
    (set! ~g_dbus_message_get_interface
      (fh-link-proc
        "g_dbus_message_get_interface"
        '*
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_interface ~message)))
(export g_dbus_message_get_interface)

;; extern void g_dbus_message_set_interface(GDBusMessage *message, const gchar 
;;     *value);
(define ~g_dbus_message_set_interface #f)
(define (g_dbus_message_set_interface message value)
  (unless
    ~g_dbus_message_set_interface
    (set! ~g_dbus_message_set_interface
      (fh-link-proc
        "g_dbus_message_set_interface"
        ffi:void
        (list '* '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~value (unwrap~pointer value)))
    (~g_dbus_message_set_interface ~message ~value)))
(export g_dbus_message_set_interface)

;; extern const gchar *g_dbus_message_get_member(GDBusMessage *message);
(define ~g_dbus_message_get_member #f)
(define (g_dbus_message_get_member message)
  (unless
    ~g_dbus_message_get_member
    (set! ~g_dbus_message_get_member
      (fh-link-proc
        "g_dbus_message_get_member"
        '*
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_member ~message)))
(export g_dbus_message_get_member)

;; extern void g_dbus_message_set_member(GDBusMessage *message, const gchar *
;;     value);
(define ~g_dbus_message_set_member #f)
(define (g_dbus_message_set_member message value)
  (unless
    ~g_dbus_message_set_member
    (set! ~g_dbus_message_set_member
      (fh-link-proc
        "g_dbus_message_set_member"
        ffi:void
        (list '* '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~value (unwrap~pointer value)))
    (~g_dbus_message_set_member ~message ~value)))
(export g_dbus_message_set_member)

;; extern const gchar *g_dbus_message_get_path(GDBusMessage *message);
(define ~g_dbus_message_get_path #f)
(define (g_dbus_message_get_path message)
  (unless
    ~g_dbus_message_get_path
    (set! ~g_dbus_message_get_path
      (fh-link-proc
        "g_dbus_message_get_path"
        '*
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_path ~message)))
(export g_dbus_message_get_path)

;; extern void g_dbus_message_set_path(GDBusMessage *message, const gchar *
;;     value);
(define ~g_dbus_message_set_path #f)
(define (g_dbus_message_set_path message value)
  (unless
    ~g_dbus_message_set_path
    (set! ~g_dbus_message_set_path
      (fh-link-proc
        "g_dbus_message_set_path"
        ffi:void
        (list '* '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~value (unwrap~pointer value)))
    (~g_dbus_message_set_path ~message ~value)))
(export g_dbus_message_set_path)

;; extern const gchar *g_dbus_message_get_sender(GDBusMessage *message);
(define ~g_dbus_message_get_sender #f)
(define (g_dbus_message_get_sender message)
  (unless
    ~g_dbus_message_get_sender
    (set! ~g_dbus_message_get_sender
      (fh-link-proc
        "g_dbus_message_get_sender"
        '*
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_sender ~message)))
(export g_dbus_message_get_sender)

;; extern void g_dbus_message_set_sender(GDBusMessage *message, const gchar *
;;     value);
(define ~g_dbus_message_set_sender #f)
(define (g_dbus_message_set_sender message value)
  (unless
    ~g_dbus_message_set_sender
    (set! ~g_dbus_message_set_sender
      (fh-link-proc
        "g_dbus_message_set_sender"
        ffi:void
        (list '* '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~value (unwrap~pointer value)))
    (~g_dbus_message_set_sender ~message ~value)))
(export g_dbus_message_set_sender)

;; extern const gchar *g_dbus_message_get_destination(GDBusMessage *message);
(define ~g_dbus_message_get_destination #f)
(define (g_dbus_message_get_destination message)
  (unless
    ~g_dbus_message_get_destination
    (set! ~g_dbus_message_get_destination
      (fh-link-proc
        "g_dbus_message_get_destination"
        '*
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_destination ~message)))
(export g_dbus_message_get_destination)

;; extern void g_dbus_message_set_destination(GDBusMessage *message, const 
;;     gchar *value);
(define ~g_dbus_message_set_destination #f)
(define (g_dbus_message_set_destination message value)
  (unless
    ~g_dbus_message_set_destination
    (set! ~g_dbus_message_set_destination
      (fh-link-proc
        "g_dbus_message_set_destination"
        ffi:void
        (list '* '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~value (unwrap~pointer value)))
    (~g_dbus_message_set_destination ~message ~value)))
(export g_dbus_message_set_destination)

;; extern const gchar *g_dbus_message_get_error_name(GDBusMessage *message);
(define ~g_dbus_message_get_error_name #f)
(define (g_dbus_message_get_error_name message)
  (unless
    ~g_dbus_message_get_error_name
    (set! ~g_dbus_message_get_error_name
      (fh-link-proc
        "g_dbus_message_get_error_name"
        '*
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_error_name ~message)))
(export g_dbus_message_get_error_name)

;; extern void g_dbus_message_set_error_name(GDBusMessage *message, const gchar
;;      *value);
(define ~g_dbus_message_set_error_name #f)
(define (g_dbus_message_set_error_name message value)
  (unless
    ~g_dbus_message_set_error_name
    (set! ~g_dbus_message_set_error_name
      (fh-link-proc
        "g_dbus_message_set_error_name"
        ffi:void
        (list '* '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~value (unwrap~pointer value)))
    (~g_dbus_message_set_error_name ~message ~value)))
(export g_dbus_message_set_error_name)

;; extern const gchar *g_dbus_message_get_signature(GDBusMessage *message);
(define ~g_dbus_message_get_signature #f)
(define (g_dbus_message_get_signature message)
  (unless
    ~g_dbus_message_get_signature
    (set! ~g_dbus_message_get_signature
      (fh-link-proc
        "g_dbus_message_get_signature"
        '*
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_signature ~message)))
(export g_dbus_message_get_signature)

;; extern void g_dbus_message_set_signature(GDBusMessage *message, const gchar 
;;     *value);
(define ~g_dbus_message_set_signature #f)
(define (g_dbus_message_set_signature message value)
  (unless
    ~g_dbus_message_set_signature
    (set! ~g_dbus_message_set_signature
      (fh-link-proc
        "g_dbus_message_set_signature"
        ffi:void
        (list '* '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~value (unwrap~pointer value)))
    (~g_dbus_message_set_signature ~message ~value)))
(export g_dbus_message_set_signature)

;; extern guint32 g_dbus_message_get_num_unix_fds(GDBusMessage *message);
(define ~g_dbus_message_get_num_unix_fds #f)
(define (g_dbus_message_get_num_unix_fds message)
  (unless
    ~g_dbus_message_get_num_unix_fds
    (set! ~g_dbus_message_get_num_unix_fds
      (fh-link-proc
        "g_dbus_message_get_num_unix_fds"
        ffi:unsigned-int
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_num_unix_fds ~message)))
(export g_dbus_message_get_num_unix_fds)

;; extern void g_dbus_message_set_num_unix_fds(GDBusMessage *message, guint32 
;;     value);
(define ~g_dbus_message_set_num_unix_fds #f)
(define (g_dbus_message_set_num_unix_fds message value)
  (unless
    ~g_dbus_message_set_num_unix_fds
    (set! ~g_dbus_message_set_num_unix_fds
      (fh-link-proc
        "g_dbus_message_set_num_unix_fds"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~value (unwrap~fixed value)))
    (~g_dbus_message_set_num_unix_fds
      ~message
      ~value)))
(export g_dbus_message_set_num_unix_fds)

;; extern const gchar *g_dbus_message_get_arg0(GDBusMessage *message);
(define ~g_dbus_message_get_arg0 #f)
(define (g_dbus_message_get_arg0 message)
  (unless
    ~g_dbus_message_get_arg0
    (set! ~g_dbus_message_get_arg0
      (fh-link-proc
        "g_dbus_message_get_arg0"
        '*
        (list '*))))
  (let ((~message (unwrap-GDBusMessage* message)))
    (~g_dbus_message_get_arg0 ~message)))
(export g_dbus_message_get_arg0)

;; extern GDBusMessage *g_dbus_message_new_from_blob(guchar *blob, gsize 
;;     blob_len, GDBusCapabilityFlags capabilities, GError **error);
(define ~g_dbus_message_new_from_blob #f)
(define (g_dbus_message_new_from_blob
         blob
         blob_len
         capabilities
         error)
  (unless
    ~g_dbus_message_new_from_blob
    (set! ~g_dbus_message_new_from_blob
      (fh-link-proc
        "g_dbus_message_new_from_blob"
        '*
        (list '* ffi:unsigned-long ffi:int '*))))
  (let ((~blob (unwrap~pointer blob))
        (~blob_len (unwrap~fixed blob_len))
        (~capabilities (unwrap~fixed capabilities))
        (~error (unwrap~pointer error)))
    (wrap-GDBusMessage*
      (~g_dbus_message_new_from_blob
        ~blob
        ~blob_len
        ~capabilities
        ~error))))
(export g_dbus_message_new_from_blob)

;; extern gssize g_dbus_message_bytes_needed(guchar *blob, gsize blob_len, 
;;     GError **error);
(define ~g_dbus_message_bytes_needed #f)
(define (g_dbus_message_bytes_needed blob blob_len error)
  (unless
    ~g_dbus_message_bytes_needed
    (set! ~g_dbus_message_bytes_needed
      (fh-link-proc
        "g_dbus_message_bytes_needed"
        ffi:long
        (list '* ffi:unsigned-long '*))))
  (let ((~blob (unwrap~pointer blob))
        (~blob_len (unwrap~fixed blob_len))
        (~error (unwrap~pointer error)))
    (~g_dbus_message_bytes_needed
      ~blob
      ~blob_len
      ~error)))
(export g_dbus_message_bytes_needed)

;; extern guchar *g_dbus_message_to_blob(GDBusMessage *message, gsize *out_size
;;     , GDBusCapabilityFlags capabilities, GError **error);
(define ~g_dbus_message_to_blob #f)
(define (g_dbus_message_to_blob
         message
         out_size
         capabilities
         error)
  (unless
    ~g_dbus_message_to_blob
    (set! ~g_dbus_message_to_blob
      (fh-link-proc
        "g_dbus_message_to_blob"
        '*
        (list '* '* ffi:int '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~out_size (unwrap~pointer out_size))
        (~capabilities (unwrap~fixed capabilities))
        (~error (unwrap~pointer error)))
    (~g_dbus_message_to_blob
      ~message
      ~out_size
      ~capabilities
      ~error)))
(export g_dbus_message_to_blob)

;; extern gboolean g_dbus_message_to_gerror(GDBusMessage *message, GError **
;;     error);
(define ~g_dbus_message_to_gerror #f)
(define (g_dbus_message_to_gerror message error)
  (unless
    ~g_dbus_message_to_gerror
    (set! ~g_dbus_message_to_gerror
      (fh-link-proc
        "g_dbus_message_to_gerror"
        ffi:int
        (list '* '*))))
  (let ((~message (unwrap-GDBusMessage* message))
        (~error (unwrap~pointer error)))
    (~g_dbus_message_to_gerror ~message ~error)))
(export g_dbus_message_to_gerror)

;; extern GType g_dbus_method_invocation_get_type(void);
(define ~g_dbus_method_invocation_get_type #f)
(define (g_dbus_method_invocation_get_type)
  (unless
    ~g_dbus_method_invocation_get_type
    (set! ~g_dbus_method_invocation_get_type
      (fh-link-proc
        "g_dbus_method_invocation_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_method_invocation_get_type)))
(export g_dbus_method_invocation_get_type)

;; extern const gchar *g_dbus_method_invocation_get_sender(
;;     GDBusMethodInvocation *invocation);
(define ~g_dbus_method_invocation_get_sender #f)
(define (g_dbus_method_invocation_get_sender invocation)
  (unless
    ~g_dbus_method_invocation_get_sender
    (set! ~g_dbus_method_invocation_get_sender
      (fh-link-proc
        "g_dbus_method_invocation_get_sender"
        '*
        (list '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (~g_dbus_method_invocation_get_sender
      ~invocation)))
(export g_dbus_method_invocation_get_sender)

;; extern const gchar *g_dbus_method_invocation_get_object_path(
;;     GDBusMethodInvocation *invocation);
(define ~g_dbus_method_invocation_get_object_path #f)
(define (g_dbus_method_invocation_get_object_path
         invocation)
  (unless
    ~g_dbus_method_invocation_get_object_path
    (set! ~g_dbus_method_invocation_get_object_path
      (fh-link-proc
        "g_dbus_method_invocation_get_object_path"
        '*
        (list '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (~g_dbus_method_invocation_get_object_path
      ~invocation)))
(export g_dbus_method_invocation_get_object_path)

;; extern const gchar *g_dbus_method_invocation_get_interface_name(
;;     GDBusMethodInvocation *invocation);
(define ~g_dbus_method_invocation_get_interface_name #f)
(define (g_dbus_method_invocation_get_interface_name
         invocation)
  (unless
    ~g_dbus_method_invocation_get_interface_name
    (set! ~g_dbus_method_invocation_get_interface_name
      (fh-link-proc
        "g_dbus_method_invocation_get_interface_name"
        '*
        (list '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (~g_dbus_method_invocation_get_interface_name
      ~invocation)))
(export g_dbus_method_invocation_get_interface_name)

;; extern const gchar *g_dbus_method_invocation_get_method_name(
;;     GDBusMethodInvocation *invocation);
(define ~g_dbus_method_invocation_get_method_name #f)
(define (g_dbus_method_invocation_get_method_name
         invocation)
  (unless
    ~g_dbus_method_invocation_get_method_name
    (set! ~g_dbus_method_invocation_get_method_name
      (fh-link-proc
        "g_dbus_method_invocation_get_method_name"
        '*
        (list '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (~g_dbus_method_invocation_get_method_name
      ~invocation)))
(export g_dbus_method_invocation_get_method_name)

;; extern const GDBusMethodInfo *g_dbus_method_invocation_get_method_info(
;;     GDBusMethodInvocation *invocation);
(define ~g_dbus_method_invocation_get_method_info #f)
(define (g_dbus_method_invocation_get_method_info
         invocation)
  (unless
    ~g_dbus_method_invocation_get_method_info
    (set! ~g_dbus_method_invocation_get_method_info
      (fh-link-proc
        "g_dbus_method_invocation_get_method_info"
        '*
        (list '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (wrap-GDBusMethodInfo*
      (~g_dbus_method_invocation_get_method_info
        ~invocation))))
(export g_dbus_method_invocation_get_method_info)

;; extern const GDBusPropertyInfo *g_dbus_method_invocation_get_property_info(
;;     GDBusMethodInvocation *invocation);
(define ~g_dbus_method_invocation_get_property_info #f)
(define (g_dbus_method_invocation_get_property_info
         invocation)
  (unless
    ~g_dbus_method_invocation_get_property_info
    (set! ~g_dbus_method_invocation_get_property_info
      (fh-link-proc
        "g_dbus_method_invocation_get_property_info"
        '*
        (list '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (wrap-GDBusPropertyInfo*
      (~g_dbus_method_invocation_get_property_info
        ~invocation))))
(export g_dbus_method_invocation_get_property_info)

;; extern GDBusConnection *g_dbus_method_invocation_get_connection(
;;     GDBusMethodInvocation *invocation);
(define ~g_dbus_method_invocation_get_connection #f)
(define (g_dbus_method_invocation_get_connection
         invocation)
  (unless
    ~g_dbus_method_invocation_get_connection
    (set! ~g_dbus_method_invocation_get_connection
      (fh-link-proc
        "g_dbus_method_invocation_get_connection"
        '*
        (list '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (wrap-GDBusConnection*
      (~g_dbus_method_invocation_get_connection
        ~invocation))))
(export g_dbus_method_invocation_get_connection)

;; extern GDBusMessage *g_dbus_method_invocation_get_message(
;;     GDBusMethodInvocation *invocation);
(define ~g_dbus_method_invocation_get_message #f)
(define (g_dbus_method_invocation_get_message invocation)
  (unless
    ~g_dbus_method_invocation_get_message
    (set! ~g_dbus_method_invocation_get_message
      (fh-link-proc
        "g_dbus_method_invocation_get_message"
        '*
        (list '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (wrap-GDBusMessage*
      (~g_dbus_method_invocation_get_message
        ~invocation))))
(export g_dbus_method_invocation_get_message)

;; extern GVariant *g_dbus_method_invocation_get_parameters(
;;     GDBusMethodInvocation *invocation);
(define ~g_dbus_method_invocation_get_parameters #f)
(define (g_dbus_method_invocation_get_parameters
         invocation)
  (unless
    ~g_dbus_method_invocation_get_parameters
    (set! ~g_dbus_method_invocation_get_parameters
      (fh-link-proc
        "g_dbus_method_invocation_get_parameters"
        '*
        (list '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (~g_dbus_method_invocation_get_parameters
      ~invocation)))
(export g_dbus_method_invocation_get_parameters)

;; extern gpointer g_dbus_method_invocation_get_user_data(GDBusMethodInvocation
;;      *invocation);
(define ~g_dbus_method_invocation_get_user_data #f)
(define (g_dbus_method_invocation_get_user_data
         invocation)
  (unless
    ~g_dbus_method_invocation_get_user_data
    (set! ~g_dbus_method_invocation_get_user_data
      (fh-link-proc
        "g_dbus_method_invocation_get_user_data"
        '*
        (list '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (wrap-gpointer
      (~g_dbus_method_invocation_get_user_data
        ~invocation))))
(export g_dbus_method_invocation_get_user_data)

;; extern void g_dbus_method_invocation_return_value(GDBusMethodInvocation *
;;     invocation, GVariant *parameters);
(define ~g_dbus_method_invocation_return_value #f)
(define (g_dbus_method_invocation_return_value
         invocation
         parameters)
  (unless
    ~g_dbus_method_invocation_return_value
    (set! ~g_dbus_method_invocation_return_value
      (fh-link-proc
        "g_dbus_method_invocation_return_value"
        ffi:void
        (list '* '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (~g_dbus_method_invocation_return_value
      ~invocation
      parameters)))
(export g_dbus_method_invocation_return_value)

;; extern void g_dbus_method_invocation_return_value_with_unix_fd_list(
;;     GDBusMethodInvocation *invocation, GVariant *parameters, GUnixFDList *
;;     fd_list);
(define ~g_dbus_method_invocation_return_value_with_unix_fd_list #f)
(define (g_dbus_method_invocation_return_value_with_unix_fd_list
         invocation
         parameters
         fd_list)
  (unless
    ~g_dbus_method_invocation_return_value_with_unix_fd_list
    (set! ~g_dbus_method_invocation_return_value_with_unix_fd_list
      (fh-link-proc
        "g_dbus_method_invocation_return_value_with_unix_fd_list"
        ffi:void
        (list '* '* '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation))
        (~fd_list (unwrap-GUnixFDList* fd_list)))
    (~g_dbus_method_invocation_return_value_with_unix_fd_list
      ~invocation
      parameters
      ~fd_list)))
(export g_dbus_method_invocation_return_value_with_unix_fd_list)

;; extern void g_dbus_method_invocation_return_error(GDBusMethodInvocation *
;;     invocation, GQuark domain, gint code, const gchar *format, ...);
;; ... failed.

;; extern void g_dbus_method_invocation_return_error_valist(
;;     GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar
;;      *format, va_list var_args);
(define ~g_dbus_method_invocation_return_error_valist #f)
(define (g_dbus_method_invocation_return_error_valist
         invocation
         domain
         code
         format
         var_args)
  (unless
    ~g_dbus_method_invocation_return_error_valist
    (set! ~g_dbus_method_invocation_return_error_valist
      (fh-link-proc
        "g_dbus_method_invocation_return_error_valist"
        ffi:void
        (list '* ffi:unsigned-int ffi:int '* '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation))
        (~domain (unwrap~fixed domain))
        (~code (unwrap~fixed code))
        (~format (unwrap~pointer format))
        (~var_args (unwrap~pointer var_args)))
    (~g_dbus_method_invocation_return_error_valist
      ~invocation
      ~domain
      ~code
      ~format
      ~var_args)))
(export g_dbus_method_invocation_return_error_valist)

;; extern void g_dbus_method_invocation_return_error_literal(
;;     GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar
;;      *message);
(define ~g_dbus_method_invocation_return_error_literal #f)
(define (g_dbus_method_invocation_return_error_literal
         invocation
         domain
         code
         message)
  (unless
    ~g_dbus_method_invocation_return_error_literal
    (set! ~g_dbus_method_invocation_return_error_literal
      (fh-link-proc
        "g_dbus_method_invocation_return_error_literal"
        ffi:void
        (list '* ffi:unsigned-int ffi:int '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation))
        (~domain (unwrap~fixed domain))
        (~code (unwrap~fixed code))
        (~message (unwrap~pointer message)))
    (~g_dbus_method_invocation_return_error_literal
      ~invocation
      ~domain
      ~code
      ~message)))
(export g_dbus_method_invocation_return_error_literal)

;; extern void g_dbus_method_invocation_return_gerror(GDBusMethodInvocation *
;;     invocation, const GError *error);
(define ~g_dbus_method_invocation_return_gerror #f)
(define (g_dbus_method_invocation_return_gerror
         invocation
         error)
  (unless
    ~g_dbus_method_invocation_return_gerror
    (set! ~g_dbus_method_invocation_return_gerror
      (fh-link-proc
        "g_dbus_method_invocation_return_gerror"
        ffi:void
        (list '* '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (~g_dbus_method_invocation_return_gerror
      ~invocation
      error)))
(export g_dbus_method_invocation_return_gerror)

;; extern void g_dbus_method_invocation_take_error(GDBusMethodInvocation *
;;     invocation, GError *error);
(define ~g_dbus_method_invocation_take_error #f)
(define (g_dbus_method_invocation_take_error
         invocation
         error)
  (unless
    ~g_dbus_method_invocation_take_error
    (set! ~g_dbus_method_invocation_take_error
      (fh-link-proc
        "g_dbus_method_invocation_take_error"
        ffi:void
        (list '* '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation)))
    (~g_dbus_method_invocation_take_error
      ~invocation
      error)))
(export g_dbus_method_invocation_take_error)

;; extern void g_dbus_method_invocation_return_dbus_error(GDBusMethodInvocation
;;      *invocation, const gchar *error_name, const gchar *error_message);
(define ~g_dbus_method_invocation_return_dbus_error #f)
(define (g_dbus_method_invocation_return_dbus_error
         invocation
         error_name
         error_message)
  (unless
    ~g_dbus_method_invocation_return_dbus_error
    (set! ~g_dbus_method_invocation_return_dbus_error
      (fh-link-proc
        "g_dbus_method_invocation_return_dbus_error"
        ffi:void
        (list '* '* '*))))
  (let ((~invocation
          (unwrap-GDBusMethodInvocation* invocation))
        (~error_name (unwrap~pointer error_name))
        (~error_message (unwrap~pointer error_message)))
    (~g_dbus_method_invocation_return_dbus_error
      ~invocation
      ~error_name
      ~error_message)))
(export g_dbus_method_invocation_return_dbus_error)

;; typedef void (*GBusAcquiredCallback)(GDBusConnection *connection, const 
;;     gchar *name, gpointer user_data);
(define-fh-function/p GBusAcquiredCallback
  ffi:void (list (quote *) (quote *) (quote *)))

;; typedef void (*GBusNameAcquiredCallback)(GDBusConnection *connection, const 
;;     gchar *name, gpointer user_data);
(define-fh-function/p GBusNameAcquiredCallback
  ffi:void (list (quote *) (quote *) (quote *)))

;; typedef void (*GBusNameLostCallback)(GDBusConnection *connection, const 
;;     gchar *name, gpointer user_data);
(define-fh-function/p GBusNameLostCallback
  ffi:void (list (quote *) (quote *) (quote *)))

;; extern guint g_bus_own_name(GBusType bus_type, const gchar *name, 
;;     GBusNameOwnerFlags flags, GBusAcquiredCallback bus_acquired_handler, 
;;     GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback 
;;     name_lost_handler, gpointer user_data, GDestroyNotify 
;;     user_data_free_func);
(define ~g_bus_own_name #f)
(define (g_bus_own_name
         bus_type
         name
         flags
         bus_acquired_handler
         name_acquired_handler
         name_lost_handler
         user_data
         user_data_free_func)
  (unless
    ~g_bus_own_name
    (set! ~g_bus_own_name
      (fh-link-proc
        "g_bus_own_name"
        ffi:unsigned-int
        (list ffi:int '* ffi:int '* '* '* '* '*))))
  (let ((~bus_type (unwrap~fixed bus_type))
        (~name (unwrap~pointer name))
        (~flags (unwrap~fixed flags))
        (~bus_acquired_handler
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           bus_acquired_handler))
        (~name_acquired_handler
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           name_acquired_handler))
        (~name_lost_handler
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           name_lost_handler))
        (~user_data (unwrap-gpointer user_data))
        (~user_data_free_func
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           user_data_free_func)))
    (~g_bus_own_name
      ~bus_type
      ~name
      ~flags
      ~bus_acquired_handler
      ~name_acquired_handler
      ~name_lost_handler
      ~user_data
      ~user_data_free_func)))
(export g_bus_own_name)

;; extern guint g_bus_own_name_on_connection(GDBusConnection *connection, const
;;      gchar *name, GBusNameOwnerFlags flags, GBusNameAcquiredCallback 
;;     name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer 
;;     user_data, GDestroyNotify user_data_free_func);
(define ~g_bus_own_name_on_connection #f)
(define (g_bus_own_name_on_connection
         connection
         name
         flags
         name_acquired_handler
         name_lost_handler
         user_data
         user_data_free_func)
  (unless
    ~g_bus_own_name_on_connection
    (set! ~g_bus_own_name_on_connection
      (fh-link-proc
        "g_bus_own_name_on_connection"
        ffi:unsigned-int
        (list '* '* ffi:int '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~name (unwrap~pointer name))
        (~flags (unwrap~fixed flags))
        (~name_acquired_handler
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           name_acquired_handler))
        (~name_lost_handler
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           name_lost_handler))
        (~user_data (unwrap-gpointer user_data))
        (~user_data_free_func
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           user_data_free_func)))
    (~g_bus_own_name_on_connection
      ~connection
      ~name
      ~flags
      ~name_acquired_handler
      ~name_lost_handler
      ~user_data
      ~user_data_free_func)))
(export g_bus_own_name_on_connection)

;; extern guint g_bus_own_name_with_closures(GBusType bus_type, const gchar *
;;     name, GBusNameOwnerFlags flags, GClosure *bus_acquired_closure, GClosure
;;      *name_acquired_closure, GClosure *name_lost_closure);
(define ~g_bus_own_name_with_closures #f)
(define (g_bus_own_name_with_closures
         bus_type
         name
         flags
         bus_acquired_closure
         name_acquired_closure
         name_lost_closure)
  (unless
    ~g_bus_own_name_with_closures
    (set! ~g_bus_own_name_with_closures
      (fh-link-proc
        "g_bus_own_name_with_closures"
        ffi:unsigned-int
        (list ffi:int '* ffi:int '* '* '*))))
  (let ((~bus_type (unwrap~fixed bus_type))
        (~name (unwrap~pointer name))
        (~flags (unwrap~fixed flags))
        (~bus_acquired_closure
          (unwrap~pointer bus_acquired_closure))
        (~name_acquired_closure
          (unwrap~pointer name_acquired_closure))
        (~name_lost_closure
          (unwrap~pointer name_lost_closure)))
    (~g_bus_own_name_with_closures
      ~bus_type
      ~name
      ~flags
      ~bus_acquired_closure
      ~name_acquired_closure
      ~name_lost_closure)))
(export g_bus_own_name_with_closures)

;; extern guint g_bus_own_name_on_connection_with_closures(GDBusConnection *
;;     connection, const gchar *name, GBusNameOwnerFlags flags, GClosure *
;;     name_acquired_closure, GClosure *name_lost_closure);
(define ~g_bus_own_name_on_connection_with_closures #f)
(define (g_bus_own_name_on_connection_with_closures
         connection
         name
         flags
         name_acquired_closure
         name_lost_closure)
  (unless
    ~g_bus_own_name_on_connection_with_closures
    (set! ~g_bus_own_name_on_connection_with_closures
      (fh-link-proc
        "g_bus_own_name_on_connection_with_closures"
        ffi:unsigned-int
        (list '* '* ffi:int '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~name (unwrap~pointer name))
        (~flags (unwrap~fixed flags))
        (~name_acquired_closure
          (unwrap~pointer name_acquired_closure))
        (~name_lost_closure
          (unwrap~pointer name_lost_closure)))
    (~g_bus_own_name_on_connection_with_closures
      ~connection
      ~name
      ~flags
      ~name_acquired_closure
      ~name_lost_closure)))
(export g_bus_own_name_on_connection_with_closures)

;; extern void g_bus_unown_name(guint owner_id);
(define ~g_bus_unown_name #f)
(define (g_bus_unown_name owner_id)
  (unless
    ~g_bus_unown_name
    (set! ~g_bus_unown_name
      (fh-link-proc
        "g_bus_unown_name"
        ffi:void
        (list ffi:unsigned-int))))
  (let ((~owner_id (unwrap~fixed owner_id)))
    (~g_bus_unown_name ~owner_id)))
(export g_bus_unown_name)

;; typedef void (*GBusNameAppearedCallback)(GDBusConnection *connection, const 
;;     gchar *name, const gchar *name_owner, gpointer user_data);
(define-fh-function/p GBusNameAppearedCallback
  ffi:void (list (quote *) (quote *) (quote *) (quote *)))

;; typedef void (*GBusNameVanishedCallback)(GDBusConnection *connection, const 
;;     gchar *name, gpointer user_data);
(define-fh-function/p GBusNameVanishedCallback
  ffi:void (list (quote *) (quote *) (quote *)))

;; extern guint g_bus_watch_name(GBusType bus_type, const gchar *name, 
;;     GBusNameWatcherFlags flags, GBusNameAppearedCallback 
;;     name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, 
;;     gpointer user_data, GDestroyNotify user_data_free_func);
(define ~g_bus_watch_name #f)
(define (g_bus_watch_name
         bus_type
         name
         flags
         name_appeared_handler
         name_vanished_handler
         user_data
         user_data_free_func)
  (unless
    ~g_bus_watch_name
    (set! ~g_bus_watch_name
      (fh-link-proc
        "g_bus_watch_name"
        ffi:unsigned-int
        (list ffi:int '* ffi:int '* '* '* '*))))
  (let ((~bus_type (unwrap~fixed bus_type))
        (~name (unwrap~pointer name))
        (~flags (unwrap~fixed flags))
        (~name_appeared_handler
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* '* '*))
           name_appeared_handler))
        (~name_vanished_handler
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           name_vanished_handler))
        (~user_data (unwrap-gpointer user_data))
        (~user_data_free_func
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           user_data_free_func)))
    (~g_bus_watch_name
      ~bus_type
      ~name
      ~flags
      ~name_appeared_handler
      ~name_vanished_handler
      ~user_data
      ~user_data_free_func)))
(export g_bus_watch_name)

;; extern guint g_bus_watch_name_on_connection(GDBusConnection *connection, 
;;     const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback 
;;     name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, 
;;     gpointer user_data, GDestroyNotify user_data_free_func);
(define ~g_bus_watch_name_on_connection #f)
(define (g_bus_watch_name_on_connection
         connection
         name
         flags
         name_appeared_handler
         name_vanished_handler
         user_data
         user_data_free_func)
  (unless
    ~g_bus_watch_name_on_connection
    (set! ~g_bus_watch_name_on_connection
      (fh-link-proc
        "g_bus_watch_name_on_connection"
        ffi:unsigned-int
        (list '* '* ffi:int '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~name (unwrap~pointer name))
        (~flags (unwrap~fixed flags))
        (~name_appeared_handler
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* '* '*))
           name_appeared_handler))
        (~name_vanished_handler
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           name_vanished_handler))
        (~user_data (unwrap-gpointer user_data))
        (~user_data_free_func
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           user_data_free_func)))
    (~g_bus_watch_name_on_connection
      ~connection
      ~name
      ~flags
      ~name_appeared_handler
      ~name_vanished_handler
      ~user_data
      ~user_data_free_func)))
(export g_bus_watch_name_on_connection)

;; extern guint g_bus_watch_name_with_closures(GBusType bus_type, const gchar *
;;     name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, 
;;     GClosure *name_vanished_closure);
(define ~g_bus_watch_name_with_closures #f)
(define (g_bus_watch_name_with_closures
         bus_type
         name
         flags
         name_appeared_closure
         name_vanished_closure)
  (unless
    ~g_bus_watch_name_with_closures
    (set! ~g_bus_watch_name_with_closures
      (fh-link-proc
        "g_bus_watch_name_with_closures"
        ffi:unsigned-int
        (list ffi:int '* ffi:int '* '*))))
  (let ((~bus_type (unwrap~fixed bus_type))
        (~name (unwrap~pointer name))
        (~flags (unwrap~fixed flags))
        (~name_appeared_closure
          (unwrap~pointer name_appeared_closure))
        (~name_vanished_closure
          (unwrap~pointer name_vanished_closure)))
    (~g_bus_watch_name_with_closures
      ~bus_type
      ~name
      ~flags
      ~name_appeared_closure
      ~name_vanished_closure)))
(export g_bus_watch_name_with_closures)

;; extern guint g_bus_watch_name_on_connection_with_closures(GDBusConnection *
;;     connection, const gchar *name, GBusNameWatcherFlags flags, GClosure *
;;     name_appeared_closure, GClosure *name_vanished_closure);
(define ~g_bus_watch_name_on_connection_with_closures #f)
(define (g_bus_watch_name_on_connection_with_closures
         connection
         name
         flags
         name_appeared_closure
         name_vanished_closure)
  (unless
    ~g_bus_watch_name_on_connection_with_closures
    (set! ~g_bus_watch_name_on_connection_with_closures
      (fh-link-proc
        "g_bus_watch_name_on_connection_with_closures"
        ffi:unsigned-int
        (list '* '* ffi:int '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~name (unwrap~pointer name))
        (~flags (unwrap~fixed flags))
        (~name_appeared_closure
          (unwrap~pointer name_appeared_closure))
        (~name_vanished_closure
          (unwrap~pointer name_vanished_closure)))
    (~g_bus_watch_name_on_connection_with_closures
      ~connection
      ~name
      ~flags
      ~name_appeared_closure
      ~name_vanished_closure)))
(export g_bus_watch_name_on_connection_with_closures)

;; extern void g_bus_unwatch_name(guint watcher_id);
(define ~g_bus_unwatch_name #f)
(define (g_bus_unwatch_name watcher_id)
  (unless
    ~g_bus_unwatch_name
    (set! ~g_bus_unwatch_name
      (fh-link-proc
        "g_bus_unwatch_name"
        ffi:void
        (list ffi:unsigned-int))))
  (let ((~watcher_id (unwrap~fixed watcher_id)))
    (~g_bus_unwatch_name ~watcher_id)))
(export g_bus_unwatch_name)

;; typedef struct _GDBusProxyClass GDBusProxyClass;
(define GDBusProxyClass-desc void)
(export GDBusProxyClass-desc)
(define GDBusProxyClass*-desc (bs:pointer (delay GDBusProxyClass-desc)))
(export GDBusProxyClass*-desc)
(define-fh-pointer-type GDBusProxyClass* GDBusProxyClass*-desc)

;; typedef struct _GDBusProxyPrivate GDBusProxyPrivate;
(define GDBusProxyPrivate-desc void)
(export GDBusProxyPrivate-desc)
(define GDBusProxyPrivate*-desc (bs:pointer GDBusProxyPrivate-desc))
(export GDBusProxyPrivate*-desc)
(define-fh-pointer-type GDBusProxyPrivate* GDBusProxyPrivate*-desc)

;; struct _GDBusProxy {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusProxyPrivate *priv;
;; };
(define struct-_GDBusProxy-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GDBusProxyPrivate*-desc))))))
(export struct-_GDBusProxy-desc)
(define-fh-compound-type/p struct-_GDBusProxy struct-_GDBusProxy-desc)
(set! GDBusProxy-desc struct-_GDBusProxy-desc)
(define-fh-compound-type GDBusProxy GDBusProxy-desc)

;; struct _GDBusProxyClass {
;;   /*< private >*/
;;   GObjectClass parent_class;
;;   /*< public >*/
;;   /* Signals */
;;   void (*g_properties_changed)(GDBusProxy *proxy, GVariant *
;;       changed_properties, const gchar *const*invalidated_properties);
;;   void (*g_signal)(GDBusProxy *proxy, const gchar *sender_name, const gchar 
;;       *signal_name, GVariant *parameters);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   gpointer padding[32];
;; };
(define struct-_GDBusProxyClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(g_properties_changed ,(bs:pointer void))
          `(g_signal ,(bs:pointer void))
          `(padding ,(bs:vector 32 gpointer-desc)))))
(export struct-_GDBusProxyClass-desc)
(define-fh-compound-type/p struct-_GDBusProxyClass struct-_GDBusProxyClass-desc)
(set! GDBusProxyClass-desc struct-_GDBusProxyClass-desc)
(define-fh-compound-type GDBusProxyClass GDBusProxyClass-desc)

;; extern GType g_dbus_proxy_get_type(void);
(define ~g_dbus_proxy_get_type #f)
(define (g_dbus_proxy_get_type)
  (unless
    ~g_dbus_proxy_get_type
    (set! ~g_dbus_proxy_get_type
      (fh-link-proc
        "g_dbus_proxy_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_proxy_get_type)))
(export g_dbus_proxy_get_type)

;; extern void g_dbus_proxy_new(GDBusConnection *connection, GDBusProxyFlags 
;;     flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *
;;     object_path, const gchar *interface_name, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_dbus_proxy_new #f)
(define (g_dbus_proxy_new
         connection
         flags
         info
         name
         object_path
         interface_name
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_proxy_new
    (set! ~g_dbus_proxy_new
      (fh-link-proc
        "g_dbus_proxy_new"
        ffi:void
        (list '* ffi:int '* '* '* '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~flags (unwrap~fixed flags))
        (~info (unwrap-GDBusInterfaceInfo* info))
        (~name (unwrap~pointer name))
        (~object_path (unwrap~pointer object_path))
        (~interface_name (unwrap~pointer interface_name))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_proxy_new
      ~connection
      ~flags
      ~info
      ~name
      ~object_path
      ~interface_name
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_proxy_new)

;; extern GDBusProxy *g_dbus_proxy_new_finish(GAsyncResult *res, GError **error
;;     );
(define ~g_dbus_proxy_new_finish #f)
(define (g_dbus_proxy_new_finish res error)
  (unless
    ~g_dbus_proxy_new_finish
    (set! ~g_dbus_proxy_new_finish
      (fh-link-proc
        "g_dbus_proxy_new_finish"
        '*
        (list '* '*))))
  (let ((~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GDBusProxy*
      (~g_dbus_proxy_new_finish ~res ~error))))
(export g_dbus_proxy_new_finish)

;; extern GDBusProxy *g_dbus_proxy_new_sync(GDBusConnection *connection, 
;;     GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, 
;;     const gchar *object_path, const gchar *interface_name, GCancellable *
;;     cancellable, GError **error);
(define ~g_dbus_proxy_new_sync #f)
(define (g_dbus_proxy_new_sync
         connection
         flags
         info
         name
         object_path
         interface_name
         cancellable
         error)
  (unless
    ~g_dbus_proxy_new_sync
    (set! ~g_dbus_proxy_new_sync
      (fh-link-proc
        "g_dbus_proxy_new_sync"
        '*
        (list '* ffi:int '* '* '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~flags (unwrap~fixed flags))
        (~info (unwrap-GDBusInterfaceInfo* info))
        (~name (unwrap~pointer name))
        (~object_path (unwrap~pointer object_path))
        (~interface_name (unwrap~pointer interface_name))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GDBusProxy*
      (~g_dbus_proxy_new_sync
        ~connection
        ~flags
        ~info
        ~name
        ~object_path
        ~interface_name
        ~cancellable
        ~error))))
(export g_dbus_proxy_new_sync)

;; extern void g_dbus_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags 
;;     flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *
;;     object_path, const gchar *interface_name, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_dbus_proxy_new_for_bus #f)
(define (g_dbus_proxy_new_for_bus
         bus_type
         flags
         info
         name
         object_path
         interface_name
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_proxy_new_for_bus
    (set! ~g_dbus_proxy_new_for_bus
      (fh-link-proc
        "g_dbus_proxy_new_for_bus"
        ffi:void
        (list ffi:int ffi:int '* '* '* '* '* '* '*))))
  (let ((~bus_type (unwrap~fixed bus_type))
        (~flags (unwrap~fixed flags))
        (~info (unwrap-GDBusInterfaceInfo* info))
        (~name (unwrap~pointer name))
        (~object_path (unwrap~pointer object_path))
        (~interface_name (unwrap~pointer interface_name))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_proxy_new_for_bus
      ~bus_type
      ~flags
      ~info
      ~name
      ~object_path
      ~interface_name
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_proxy_new_for_bus)

;; extern GDBusProxy *g_dbus_proxy_new_for_bus_finish(GAsyncResult *res, GError
;;      **error);
(define ~g_dbus_proxy_new_for_bus_finish #f)
(define (g_dbus_proxy_new_for_bus_finish res error)
  (unless
    ~g_dbus_proxy_new_for_bus_finish
    (set! ~g_dbus_proxy_new_for_bus_finish
      (fh-link-proc
        "g_dbus_proxy_new_for_bus_finish"
        '*
        (list '* '*))))
  (let ((~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GDBusProxy*
      (~g_dbus_proxy_new_for_bus_finish ~res ~error))))
(export g_dbus_proxy_new_for_bus_finish)

;; extern GDBusProxy *g_dbus_proxy_new_for_bus_sync(GBusType bus_type, 
;;     GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, 
;;     const gchar *object_path, const gchar *interface_name, GCancellable *
;;     cancellable, GError **error);
(define ~g_dbus_proxy_new_for_bus_sync #f)
(define (g_dbus_proxy_new_for_bus_sync
         bus_type
         flags
         info
         name
         object_path
         interface_name
         cancellable
         error)
  (unless
    ~g_dbus_proxy_new_for_bus_sync
    (set! ~g_dbus_proxy_new_for_bus_sync
      (fh-link-proc
        "g_dbus_proxy_new_for_bus_sync"
        '*
        (list ffi:int ffi:int '* '* '* '* '* '*))))
  (let ((~bus_type (unwrap~fixed bus_type))
        (~flags (unwrap~fixed flags))
        (~info (unwrap-GDBusInterfaceInfo* info))
        (~name (unwrap~pointer name))
        (~object_path (unwrap~pointer object_path))
        (~interface_name (unwrap~pointer interface_name))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GDBusProxy*
      (~g_dbus_proxy_new_for_bus_sync
        ~bus_type
        ~flags
        ~info
        ~name
        ~object_path
        ~interface_name
        ~cancellable
        ~error))))
(export g_dbus_proxy_new_for_bus_sync)

;; extern GDBusConnection *g_dbus_proxy_get_connection(GDBusProxy *proxy);
(define ~g_dbus_proxy_get_connection #f)
(define (g_dbus_proxy_get_connection proxy)
  (unless
    ~g_dbus_proxy_get_connection
    (set! ~g_dbus_proxy_get_connection
      (fh-link-proc
        "g_dbus_proxy_get_connection"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy)))
    (wrap-GDBusConnection*
      (~g_dbus_proxy_get_connection ~proxy))))
(export g_dbus_proxy_get_connection)

;; extern GDBusProxyFlags g_dbus_proxy_get_flags(GDBusProxy *proxy);
(define ~g_dbus_proxy_get_flags #f)
(define (g_dbus_proxy_get_flags proxy)
  (unless
    ~g_dbus_proxy_get_flags
    (set! ~g_dbus_proxy_get_flags
      (fh-link-proc
        "g_dbus_proxy_get_flags"
        ffi:int
        (list '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy)))
    (~g_dbus_proxy_get_flags ~proxy)))
(export g_dbus_proxy_get_flags)

;; extern const gchar *g_dbus_proxy_get_name(GDBusProxy *proxy);
(define ~g_dbus_proxy_get_name #f)
(define (g_dbus_proxy_get_name proxy)
  (unless
    ~g_dbus_proxy_get_name
    (set! ~g_dbus_proxy_get_name
      (fh-link-proc
        "g_dbus_proxy_get_name"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy)))
    (~g_dbus_proxy_get_name ~proxy)))
(export g_dbus_proxy_get_name)

;; extern gchar *g_dbus_proxy_get_name_owner(GDBusProxy *proxy);
(define ~g_dbus_proxy_get_name_owner #f)
(define (g_dbus_proxy_get_name_owner proxy)
  (unless
    ~g_dbus_proxy_get_name_owner
    (set! ~g_dbus_proxy_get_name_owner
      (fh-link-proc
        "g_dbus_proxy_get_name_owner"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy)))
    (~g_dbus_proxy_get_name_owner ~proxy)))
(export g_dbus_proxy_get_name_owner)

;; extern const gchar *g_dbus_proxy_get_object_path(GDBusProxy *proxy);
(define ~g_dbus_proxy_get_object_path #f)
(define (g_dbus_proxy_get_object_path proxy)
  (unless
    ~g_dbus_proxy_get_object_path
    (set! ~g_dbus_proxy_get_object_path
      (fh-link-proc
        "g_dbus_proxy_get_object_path"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy)))
    (~g_dbus_proxy_get_object_path ~proxy)))
(export g_dbus_proxy_get_object_path)

;; extern const gchar *g_dbus_proxy_get_interface_name(GDBusProxy *proxy);
(define ~g_dbus_proxy_get_interface_name #f)
(define (g_dbus_proxy_get_interface_name proxy)
  (unless
    ~g_dbus_proxy_get_interface_name
    (set! ~g_dbus_proxy_get_interface_name
      (fh-link-proc
        "g_dbus_proxy_get_interface_name"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy)))
    (~g_dbus_proxy_get_interface_name ~proxy)))
(export g_dbus_proxy_get_interface_name)

;; extern gint g_dbus_proxy_get_default_timeout(GDBusProxy *proxy);
(define ~g_dbus_proxy_get_default_timeout #f)
(define (g_dbus_proxy_get_default_timeout proxy)
  (unless
    ~g_dbus_proxy_get_default_timeout
    (set! ~g_dbus_proxy_get_default_timeout
      (fh-link-proc
        "g_dbus_proxy_get_default_timeout"
        ffi:int
        (list '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy)))
    (~g_dbus_proxy_get_default_timeout ~proxy)))
(export g_dbus_proxy_get_default_timeout)

;; extern void g_dbus_proxy_set_default_timeout(GDBusProxy *proxy, gint 
;;     timeout_msec);
(define ~g_dbus_proxy_set_default_timeout #f)
(define (g_dbus_proxy_set_default_timeout
         proxy
         timeout_msec)
  (unless
    ~g_dbus_proxy_set_default_timeout
    (set! ~g_dbus_proxy_set_default_timeout
      (fh-link-proc
        "g_dbus_proxy_set_default_timeout"
        ffi:void
        (list '* ffi:int))))
  (let ((~proxy (unwrap-GDBusProxy* proxy))
        (~timeout_msec (unwrap~fixed timeout_msec)))
    (~g_dbus_proxy_set_default_timeout
      ~proxy
      ~timeout_msec)))
(export g_dbus_proxy_set_default_timeout)

;; extern GDBusInterfaceInfo *g_dbus_proxy_get_interface_info(GDBusProxy *proxy
;;     );
(define ~g_dbus_proxy_get_interface_info #f)
(define (g_dbus_proxy_get_interface_info proxy)
  (unless
    ~g_dbus_proxy_get_interface_info
    (set! ~g_dbus_proxy_get_interface_info
      (fh-link-proc
        "g_dbus_proxy_get_interface_info"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy)))
    (wrap-GDBusInterfaceInfo*
      (~g_dbus_proxy_get_interface_info ~proxy))))
(export g_dbus_proxy_get_interface_info)

;; extern void g_dbus_proxy_set_interface_info(GDBusProxy *proxy, 
;;     GDBusInterfaceInfo *info);
(define ~g_dbus_proxy_set_interface_info #f)
(define (g_dbus_proxy_set_interface_info proxy info)
  (unless
    ~g_dbus_proxy_set_interface_info
    (set! ~g_dbus_proxy_set_interface_info
      (fh-link-proc
        "g_dbus_proxy_set_interface_info"
        ffi:void
        (list '* '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy))
        (~info (unwrap-GDBusInterfaceInfo* info)))
    (~g_dbus_proxy_set_interface_info ~proxy ~info)))
(export g_dbus_proxy_set_interface_info)

;; extern GVariant *g_dbus_proxy_get_cached_property(GDBusProxy *proxy, const 
;;     gchar *property_name);
(define ~g_dbus_proxy_get_cached_property #f)
(define (g_dbus_proxy_get_cached_property
         proxy
         property_name)
  (unless
    ~g_dbus_proxy_get_cached_property
    (set! ~g_dbus_proxy_get_cached_property
      (fh-link-proc
        "g_dbus_proxy_get_cached_property"
        '*
        (list '* '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy))
        (~property_name (unwrap~pointer property_name)))
    (~g_dbus_proxy_get_cached_property
      ~proxy
      ~property_name)))
(export g_dbus_proxy_get_cached_property)

;; extern void g_dbus_proxy_set_cached_property(GDBusProxy *proxy, const gchar 
;;     *property_name, GVariant *value);
(define ~g_dbus_proxy_set_cached_property #f)
(define (g_dbus_proxy_set_cached_property
         proxy
         property_name
         value)
  (unless
    ~g_dbus_proxy_set_cached_property
    (set! ~g_dbus_proxy_set_cached_property
      (fh-link-proc
        "g_dbus_proxy_set_cached_property"
        ffi:void
        (list '* '* '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy))
        (~property_name (unwrap~pointer property_name)))
    (~g_dbus_proxy_set_cached_property
      ~proxy
      ~property_name
      value)))
(export g_dbus_proxy_set_cached_property)

;; extern gchar **g_dbus_proxy_get_cached_property_names(GDBusProxy *proxy);
(define ~g_dbus_proxy_get_cached_property_names #f)
(define (g_dbus_proxy_get_cached_property_names proxy)
  (unless
    ~g_dbus_proxy_get_cached_property_names
    (set! ~g_dbus_proxy_get_cached_property_names
      (fh-link-proc
        "g_dbus_proxy_get_cached_property_names"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy)))
    (~g_dbus_proxy_get_cached_property_names ~proxy)))
(export g_dbus_proxy_get_cached_property_names)

;; extern void g_dbus_proxy_call(GDBusProxy *proxy, const gchar *method_name, 
;;     GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_dbus_proxy_call #f)
(define (g_dbus_proxy_call
         proxy
         method_name
         parameters
         flags
         timeout_msec
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_proxy_call
    (set! ~g_dbus_proxy_call
      (fh-link-proc
        "g_dbus_proxy_call"
        ffi:void
        (list '* '* '* ffi:int ffi:int '* '* '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy))
        (~method_name (unwrap~pointer method_name))
        (~flags (unwrap~fixed flags))
        (~timeout_msec (unwrap~fixed timeout_msec))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_proxy_call
      ~proxy
      ~method_name
      parameters
      ~flags
      ~timeout_msec
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_proxy_call)

;; extern GVariant *g_dbus_proxy_call_finish(GDBusProxy *proxy, GAsyncResult *
;;     res, GError **error);
(define ~g_dbus_proxy_call_finish #f)
(define (g_dbus_proxy_call_finish proxy res error)
  (unless
    ~g_dbus_proxy_call_finish
    (set! ~g_dbus_proxy_call_finish
      (fh-link-proc
        "g_dbus_proxy_call_finish"
        '*
        (list '* '* '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (~g_dbus_proxy_call_finish ~proxy ~res ~error)))
(export g_dbus_proxy_call_finish)

;; extern GVariant *g_dbus_proxy_call_sync(GDBusProxy *proxy, const gchar *
;;     method_name, GVariant *parameters, GDBusCallFlags flags, gint 
;;     timeout_msec, GCancellable *cancellable, GError **error);
(define ~g_dbus_proxy_call_sync #f)
(define (g_dbus_proxy_call_sync
         proxy
         method_name
         parameters
         flags
         timeout_msec
         cancellable
         error)
  (unless
    ~g_dbus_proxy_call_sync
    (set! ~g_dbus_proxy_call_sync
      (fh-link-proc
        "g_dbus_proxy_call_sync"
        '*
        (list '* '* '* ffi:int ffi:int '* '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy))
        (~method_name (unwrap~pointer method_name))
        (~flags (unwrap~fixed flags))
        (~timeout_msec (unwrap~fixed timeout_msec))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_dbus_proxy_call_sync
      ~proxy
      ~method_name
      parameters
      ~flags
      ~timeout_msec
      ~cancellable
      ~error)))
(export g_dbus_proxy_call_sync)

;; extern void g_dbus_proxy_call_with_unix_fd_list(GDBusProxy *proxy, const 
;;     gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint 
;;     timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_dbus_proxy_call_with_unix_fd_list #f)
(define (g_dbus_proxy_call_with_unix_fd_list
         proxy
         method_name
         parameters
         flags
         timeout_msec
         fd_list
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_proxy_call_with_unix_fd_list
    (set! ~g_dbus_proxy_call_with_unix_fd_list
      (fh-link-proc
        "g_dbus_proxy_call_with_unix_fd_list"
        ffi:void
        (list '* '* '* ffi:int ffi:int '* '* '* '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy))
        (~method_name (unwrap~pointer method_name))
        (~flags (unwrap~fixed flags))
        (~timeout_msec (unwrap~fixed timeout_msec))
        (~fd_list (unwrap-GUnixFDList* fd_list))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_proxy_call_with_unix_fd_list
      ~proxy
      ~method_name
      parameters
      ~flags
      ~timeout_msec
      ~fd_list
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_proxy_call_with_unix_fd_list)

;; extern GVariant *g_dbus_proxy_call_with_unix_fd_list_finish(GDBusProxy *
;;     proxy, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error);
(define ~g_dbus_proxy_call_with_unix_fd_list_finish #f)
(define (g_dbus_proxy_call_with_unix_fd_list_finish
         proxy
         out_fd_list
         res
         error)
  (unless
    ~g_dbus_proxy_call_with_unix_fd_list_finish
    (set! ~g_dbus_proxy_call_with_unix_fd_list_finish
      (fh-link-proc
        "g_dbus_proxy_call_with_unix_fd_list_finish"
        '*
        (list '* '* '* '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy))
        (~out_fd_list (unwrap~pointer out_fd_list))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (~g_dbus_proxy_call_with_unix_fd_list_finish
      ~proxy
      ~out_fd_list
      ~res
      ~error)))
(export g_dbus_proxy_call_with_unix_fd_list_finish)

;; extern GVariant *g_dbus_proxy_call_with_unix_fd_list_sync(GDBusProxy *proxy
;;     , const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, 
;;     gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, 
;;     GCancellable *cancellable, GError **error);
(define ~g_dbus_proxy_call_with_unix_fd_list_sync #f)
(define (g_dbus_proxy_call_with_unix_fd_list_sync
         proxy
         method_name
         parameters
         flags
         timeout_msec
         fd_list
         out_fd_list
         cancellable
         error)
  (unless
    ~g_dbus_proxy_call_with_unix_fd_list_sync
    (set! ~g_dbus_proxy_call_with_unix_fd_list_sync
      (fh-link-proc
        "g_dbus_proxy_call_with_unix_fd_list_sync"
        '*
        (list '* '* '* ffi:int ffi:int '* '* '* '*))))
  (let ((~proxy (unwrap-GDBusProxy* proxy))
        (~method_name (unwrap~pointer method_name))
        (~flags (unwrap~fixed flags))
        (~timeout_msec (unwrap~fixed timeout_msec))
        (~fd_list (unwrap-GUnixFDList* fd_list))
        (~out_fd_list (unwrap~pointer out_fd_list))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_dbus_proxy_call_with_unix_fd_list_sync
      ~proxy
      ~method_name
      parameters
      ~flags
      ~timeout_msec
      ~fd_list
      ~out_fd_list
      ~cancellable
      ~error)))
(export g_dbus_proxy_call_with_unix_fd_list_sync)

;; extern GType g_dbus_server_get_type(void);
(define ~g_dbus_server_get_type #f)
(define (g_dbus_server_get_type)
  (unless
    ~g_dbus_server_get_type
    (set! ~g_dbus_server_get_type
      (fh-link-proc
        "g_dbus_server_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_server_get_type)))
(export g_dbus_server_get_type)

;; extern GDBusServer *g_dbus_server_new_sync(const gchar *address, 
;;     GDBusServerFlags flags, const gchar *guid, GDBusAuthObserver *observer, 
;;     GCancellable *cancellable, GError **error);
(define ~g_dbus_server_new_sync #f)
(define (g_dbus_server_new_sync
         address
         flags
         guid
         observer
         cancellable
         error)
  (unless
    ~g_dbus_server_new_sync
    (set! ~g_dbus_server_new_sync
      (fh-link-proc
        "g_dbus_server_new_sync"
        '*
        (list '* ffi:int '* '* '* '*))))
  (let ((~address (unwrap~pointer address))
        (~flags (unwrap~fixed flags))
        (~guid (unwrap~pointer guid))
        (~observer (unwrap-GDBusAuthObserver* observer))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GDBusServer*
      (~g_dbus_server_new_sync
        ~address
        ~flags
        ~guid
        ~observer
        ~cancellable
        ~error))))
(export g_dbus_server_new_sync)

;; extern const gchar *g_dbus_server_get_client_address(GDBusServer *server);
(define ~g_dbus_server_get_client_address #f)
(define (g_dbus_server_get_client_address server)
  (unless
    ~g_dbus_server_get_client_address
    (set! ~g_dbus_server_get_client_address
      (fh-link-proc
        "g_dbus_server_get_client_address"
        '*
        (list '*))))
  (let ((~server (unwrap-GDBusServer* server)))
    (~g_dbus_server_get_client_address ~server)))
(export g_dbus_server_get_client_address)

;; extern const gchar *g_dbus_server_get_guid(GDBusServer *server);
(define ~g_dbus_server_get_guid #f)
(define (g_dbus_server_get_guid server)
  (unless
    ~g_dbus_server_get_guid
    (set! ~g_dbus_server_get_guid
      (fh-link-proc
        "g_dbus_server_get_guid"
        '*
        (list '*))))
  (let ((~server (unwrap-GDBusServer* server)))
    (~g_dbus_server_get_guid ~server)))
(export g_dbus_server_get_guid)

;; extern GDBusServerFlags g_dbus_server_get_flags(GDBusServer *server);
(define ~g_dbus_server_get_flags #f)
(define (g_dbus_server_get_flags server)
  (unless
    ~g_dbus_server_get_flags
    (set! ~g_dbus_server_get_flags
      (fh-link-proc
        "g_dbus_server_get_flags"
        ffi:int
        (list '*))))
  (let ((~server (unwrap-GDBusServer* server)))
    (~g_dbus_server_get_flags ~server)))
(export g_dbus_server_get_flags)

;; extern void g_dbus_server_start(GDBusServer *server);
(define ~g_dbus_server_start #f)
(define (g_dbus_server_start server)
  (unless
    ~g_dbus_server_start
    (set! ~g_dbus_server_start
      (fh-link-proc
        "g_dbus_server_start"
        ffi:void
        (list '*))))
  (let ((~server (unwrap-GDBusServer* server)))
    (~g_dbus_server_start ~server)))
(export g_dbus_server_start)

;; extern void g_dbus_server_stop(GDBusServer *server);
(define ~g_dbus_server_stop #f)
(define (g_dbus_server_stop server)
  (unless
    ~g_dbus_server_stop
    (set! ~g_dbus_server_stop
      (fh-link-proc
        "g_dbus_server_stop"
        ffi:void
        (list '*))))
  (let ((~server (unwrap-GDBusServer* server)))
    (~g_dbus_server_stop ~server)))
(export g_dbus_server_stop)

;; extern gboolean g_dbus_server_is_active(GDBusServer *server);
(define ~g_dbus_server_is_active #f)
(define (g_dbus_server_is_active server)
  (unless
    ~g_dbus_server_is_active
    (set! ~g_dbus_server_is_active
      (fh-link-proc
        "g_dbus_server_is_active"
        ffi:int
        (list '*))))
  (let ((~server (unwrap-GDBusServer* server)))
    (~g_dbus_server_is_active ~server)))
(export g_dbus_server_is_active)

;; extern gboolean g_dbus_is_guid(const gchar *string);
(define ~g_dbus_is_guid #f)
(define (g_dbus_is_guid string)
  (unless
    ~g_dbus_is_guid
    (set! ~g_dbus_is_guid
      (fh-link-proc "g_dbus_is_guid" ffi:int (list '*))))
  (let ((~string (unwrap~pointer string)))
    (~g_dbus_is_guid ~string)))
(export g_dbus_is_guid)

;; extern gchar *g_dbus_generate_guid(void);
(define ~g_dbus_generate_guid #f)
(define (g_dbus_generate_guid)
  (unless
    ~g_dbus_generate_guid
    (set! ~g_dbus_generate_guid
      (fh-link-proc "g_dbus_generate_guid" '* (list))))
  (let () (~g_dbus_generate_guid)))
(export g_dbus_generate_guid)

;; extern gboolean g_dbus_is_name(const gchar *string);
(define ~g_dbus_is_name #f)
(define (g_dbus_is_name string)
  (unless
    ~g_dbus_is_name
    (set! ~g_dbus_is_name
      (fh-link-proc "g_dbus_is_name" ffi:int (list '*))))
  (let ((~string (unwrap~pointer string)))
    (~g_dbus_is_name ~string)))
(export g_dbus_is_name)

;; extern gboolean g_dbus_is_unique_name(const gchar *string);
(define ~g_dbus_is_unique_name #f)
(define (g_dbus_is_unique_name string)
  (unless
    ~g_dbus_is_unique_name
    (set! ~g_dbus_is_unique_name
      (fh-link-proc
        "g_dbus_is_unique_name"
        ffi:int
        (list '*))))
  (let ((~string (unwrap~pointer string)))
    (~g_dbus_is_unique_name ~string)))
(export g_dbus_is_unique_name)

;; extern gboolean g_dbus_is_member_name(const gchar *string);
(define ~g_dbus_is_member_name #f)
(define (g_dbus_is_member_name string)
  (unless
    ~g_dbus_is_member_name
    (set! ~g_dbus_is_member_name
      (fh-link-proc
        "g_dbus_is_member_name"
        ffi:int
        (list '*))))
  (let ((~string (unwrap~pointer string)))
    (~g_dbus_is_member_name ~string)))
(export g_dbus_is_member_name)

;; extern gboolean g_dbus_is_interface_name(const gchar *string);
(define ~g_dbus_is_interface_name #f)
(define (g_dbus_is_interface_name string)
  (unless
    ~g_dbus_is_interface_name
    (set! ~g_dbus_is_interface_name
      (fh-link-proc
        "g_dbus_is_interface_name"
        ffi:int
        (list '*))))
  (let ((~string (unwrap~pointer string)))
    (~g_dbus_is_interface_name ~string)))
(export g_dbus_is_interface_name)

;; extern void g_dbus_gvariant_to_gvalue(GVariant *value, GValue *out_gvalue);
(define ~g_dbus_gvariant_to_gvalue #f)
(define (g_dbus_gvariant_to_gvalue value out_gvalue)
  (unless
    ~g_dbus_gvariant_to_gvalue
    (set! ~g_dbus_gvariant_to_gvalue
      (fh-link-proc
        "g_dbus_gvariant_to_gvalue"
        ffi:void
        (list '* '*))))
  (let ((~out_gvalue (unwrap~pointer out_gvalue)))
    (~g_dbus_gvariant_to_gvalue value ~out_gvalue)))
(export g_dbus_gvariant_to_gvalue)

;; extern GVariant *g_dbus_gvalue_to_gvariant(const GValue *gvalue, const 
;;     GVariantType *type);
(define ~g_dbus_gvalue_to_gvariant #f)
(define (g_dbus_gvalue_to_gvariant gvalue type)
  (unless
    ~g_dbus_gvalue_to_gvariant
    (set! ~g_dbus_gvalue_to_gvariant
      (fh-link-proc
        "g_dbus_gvalue_to_gvariant"
        '*
        (list '* '*))))
  (let ((~gvalue (unwrap~pointer gvalue)))
    (~g_dbus_gvalue_to_gvariant ~gvalue type)))
(export g_dbus_gvalue_to_gvariant)

;; typedef struct _GDriveIface GDriveIface;
(define GDriveIface-desc void)
(export GDriveIface-desc)
(define GDriveIface*-desc (bs:pointer (delay GDriveIface-desc)))
(export GDriveIface*-desc)
(define-fh-pointer-type GDriveIface* GDriveIface*-desc)

;; struct _GDriveIface {
;;   GTypeInterface g_iface;
;;   /* signals */
;;   void (*changed)(GDrive *drive);
;;   void (*disconnected)(GDrive *drive);
;;   void (*eject_button)(GDrive *drive);
;;   /* Virtual Table */
;;   char *(*get_name)(GDrive *drive);
;;   GIcon *(*get_icon)(GDrive *drive);
;;   gboolean (*has_volumes)(GDrive *drive);
;;   GList *(*get_volumes)(GDrive *drive);
;;   gboolean (*is_media_removable)(GDrive *drive);
;;   gboolean (*has_media)(GDrive *drive);
;;   gboolean (*is_media_check_automatic)(GDrive *drive);
;;   gboolean (*can_eject)(GDrive *drive);
;;   gboolean (*can_poll_for_media)(GDrive *drive);
;;   void (*eject)(GDrive *drive, GMountUnmountFlags flags, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*eject_finish)(GDrive *drive, GAsyncResult *result, GError **
;;       error);
;;   void (*poll_for_media)(GDrive *drive, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*poll_for_media_finish)(GDrive *drive, GAsyncResult *result, 
;;       GError **error);
;;   char *(*get_identifier)(GDrive *drive, const char *kind);
;;   char **(*enumerate_identifiers)(GDrive *drive);
;;   GDriveStartStopType (*get_start_stop_type)(GDrive *drive);
;;   gboolean (*can_start)(GDrive *drive);
;;   gboolean (*can_start_degraded)(GDrive *drive);
;;   void (*start)(GDrive *drive, GDriveStartFlags flags, GMountOperation *
;;       mount_operation, GCancellable *cancellable, GAsyncReadyCallback 
;;       callback, gpointer user_data);
;;   gboolean (*start_finish)(GDrive *drive, GAsyncResult *result, GError **
;;       error);
;;   gboolean (*can_stop)(GDrive *drive);
;;   void (*stop)(GDrive *drive, GMountUnmountFlags flags, GMountOperation *
;;       mount_operation, GCancellable *cancellable, GAsyncReadyCallback 
;;       callback, gpointer user_data);
;;   gboolean (*stop_finish)(GDrive *drive, GAsyncResult *result, GError **
;;       error);
;;   /* signal, not VFunc */
;;   void (*stop_button)(GDrive *drive);
;;   void (*eject_with_operation)(GDrive *drive, GMountUnmountFlags flags, 
;;       GMountOperation *mount_operation, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*eject_with_operation_finish)(GDrive *drive, GAsyncResult *
;;       result, GError **error);
;;   const gchar *(*get_sort_key)(GDrive *drive);
;;   GIcon *(*get_symbolic_icon)(GDrive *drive);
;;   gboolean (*is_removable)(GDrive *drive);
;; };
(define struct-_GDriveIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(changed ,(bs:pointer void))
          `(disconnected ,(bs:pointer void))
          `(eject_button ,(bs:pointer void))
          `(get_name ,(bs:pointer void))
          `(get_icon ,(bs:pointer void))
          `(has_volumes ,(bs:pointer void))
          `(get_volumes ,(bs:pointer void))
          `(is_media_removable ,(bs:pointer void))
          `(has_media ,(bs:pointer void))
          `(is_media_check_automatic ,(bs:pointer void))
          `(can_eject ,(bs:pointer void))
          `(can_poll_for_media ,(bs:pointer void))
          `(eject ,(bs:pointer void))
          `(eject_finish ,(bs:pointer void))
          `(poll_for_media ,(bs:pointer void))
          `(poll_for_media_finish ,(bs:pointer void))
          `(get_identifier ,(bs:pointer void))
          `(enumerate_identifiers ,(bs:pointer void))
          `(get_start_stop_type ,(bs:pointer void))
          `(can_start ,(bs:pointer void))
          `(can_start_degraded ,(bs:pointer void))
          `(start ,(bs:pointer void))
          `(start_finish ,(bs:pointer void))
          `(can_stop ,(bs:pointer void))
          `(stop ,(bs:pointer void))
          `(stop_finish ,(bs:pointer void))
          `(stop_button ,(bs:pointer void))
          `(eject_with_operation ,(bs:pointer void))
          `(eject_with_operation_finish ,(bs:pointer void))
          `(get_sort_key ,(bs:pointer void))
          `(get_symbolic_icon ,(bs:pointer void))
          `(is_removable ,(bs:pointer void)))))
(export struct-_GDriveIface-desc)
(define-fh-compound-type/p struct-_GDriveIface struct-_GDriveIface-desc)
(set! GDriveIface-desc struct-_GDriveIface-desc)
(define-fh-compound-type GDriveIface GDriveIface-desc)

;; extern GType g_drive_get_type(void);
(define ~g_drive_get_type #f)
(define (g_drive_get_type)
  (unless
    ~g_drive_get_type
    (set! ~g_drive_get_type
      (fh-link-proc
        "g_drive_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_drive_get_type)))
(export g_drive_get_type)

;; extern char *g_drive_get_name(GDrive *drive);
(define ~g_drive_get_name #f)
(define (g_drive_get_name drive)
  (unless
    ~g_drive_get_name
    (set! ~g_drive_get_name
      (fh-link-proc "g_drive_get_name" '* (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_get_name ~drive)))
(export g_drive_get_name)

;; extern GIcon *g_drive_get_icon(GDrive *drive);
(define ~g_drive_get_icon #f)
(define (g_drive_get_icon drive)
  (unless
    ~g_drive_get_icon
    (set! ~g_drive_get_icon
      (fh-link-proc "g_drive_get_icon" '* (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (wrap-GIcon* (~g_drive_get_icon ~drive))))
(export g_drive_get_icon)

;; extern GIcon *g_drive_get_symbolic_icon(GDrive *drive);
(define ~g_drive_get_symbolic_icon #f)
(define (g_drive_get_symbolic_icon drive)
  (unless
    ~g_drive_get_symbolic_icon
    (set! ~g_drive_get_symbolic_icon
      (fh-link-proc
        "g_drive_get_symbolic_icon"
        '*
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (wrap-GIcon* (~g_drive_get_symbolic_icon ~drive))))
(export g_drive_get_symbolic_icon)

;; extern gboolean g_drive_has_volumes(GDrive *drive);
(define ~g_drive_has_volumes #f)
(define (g_drive_has_volumes drive)
  (unless
    ~g_drive_has_volumes
    (set! ~g_drive_has_volumes
      (fh-link-proc
        "g_drive_has_volumes"
        ffi:int
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_has_volumes ~drive)))
(export g_drive_has_volumes)

;; extern GList *g_drive_get_volumes(GDrive *drive);
(define ~g_drive_get_volumes #f)
(define (g_drive_get_volumes drive)
  (unless
    ~g_drive_get_volumes
    (set! ~g_drive_get_volumes
      (fh-link-proc "g_drive_get_volumes" '* (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_get_volumes ~drive)))
(export g_drive_get_volumes)

;; extern gboolean g_drive_is_removable(GDrive *drive);
(define ~g_drive_is_removable #f)
(define (g_drive_is_removable drive)
  (unless
    ~g_drive_is_removable
    (set! ~g_drive_is_removable
      (fh-link-proc
        "g_drive_is_removable"
        ffi:int
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_is_removable ~drive)))
(export g_drive_is_removable)

;; extern gboolean g_drive_is_media_removable(GDrive *drive);
(define ~g_drive_is_media_removable #f)
(define (g_drive_is_media_removable drive)
  (unless
    ~g_drive_is_media_removable
    (set! ~g_drive_is_media_removable
      (fh-link-proc
        "g_drive_is_media_removable"
        ffi:int
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_is_media_removable ~drive)))
(export g_drive_is_media_removable)

;; extern gboolean g_drive_has_media(GDrive *drive);
(define ~g_drive_has_media #f)
(define (g_drive_has_media drive)
  (unless
    ~g_drive_has_media
    (set! ~g_drive_has_media
      (fh-link-proc
        "g_drive_has_media"
        ffi:int
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_has_media ~drive)))
(export g_drive_has_media)

;; extern gboolean g_drive_is_media_check_automatic(GDrive *drive);
(define ~g_drive_is_media_check_automatic #f)
(define (g_drive_is_media_check_automatic drive)
  (unless
    ~g_drive_is_media_check_automatic
    (set! ~g_drive_is_media_check_automatic
      (fh-link-proc
        "g_drive_is_media_check_automatic"
        ffi:int
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_is_media_check_automatic ~drive)))
(export g_drive_is_media_check_automatic)

;; extern gboolean g_drive_can_poll_for_media(GDrive *drive);
(define ~g_drive_can_poll_for_media #f)
(define (g_drive_can_poll_for_media drive)
  (unless
    ~g_drive_can_poll_for_media
    (set! ~g_drive_can_poll_for_media
      (fh-link-proc
        "g_drive_can_poll_for_media"
        ffi:int
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_can_poll_for_media ~drive)))
(export g_drive_can_poll_for_media)

;; extern gboolean g_drive_can_eject(GDrive *drive);
(define ~g_drive_can_eject #f)
(define (g_drive_can_eject drive)
  (unless
    ~g_drive_can_eject
    (set! ~g_drive_can_eject
      (fh-link-proc
        "g_drive_can_eject"
        ffi:int
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_can_eject ~drive)))
(export g_drive_can_eject)

;; extern void g_drive_eject(GDrive *drive, GMountUnmountFlags flags, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_drive_eject #f)
(define (g_drive_eject
         drive
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_drive_eject
    (set! ~g_drive_eject
      (fh-link-proc
        "g_drive_eject"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~drive (unwrap-GDrive* drive))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_drive_eject
      ~drive
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_drive_eject)

;; extern gboolean g_drive_eject_finish(GDrive *drive, GAsyncResult *result, 
;;     GError **error);
(define ~g_drive_eject_finish #f)
(define (g_drive_eject_finish drive result error)
  (unless
    ~g_drive_eject_finish
    (set! ~g_drive_eject_finish
      (fh-link-proc
        "g_drive_eject_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~drive (unwrap-GDrive* drive))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_drive_eject_finish ~drive ~result ~error)))
(export g_drive_eject_finish)

;; extern void g_drive_poll_for_media(GDrive *drive, GCancellable *cancellable
;;     , GAsyncReadyCallback callback, gpointer user_data);
(define ~g_drive_poll_for_media #f)
(define (g_drive_poll_for_media
         drive
         cancellable
         callback
         user_data)
  (unless
    ~g_drive_poll_for_media
    (set! ~g_drive_poll_for_media
      (fh-link-proc
        "g_drive_poll_for_media"
        ffi:void
        (list '* '* '* '*))))
  (let ((~drive (unwrap-GDrive* drive))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_drive_poll_for_media
      ~drive
      ~cancellable
      ~callback
      ~user_data)))
(export g_drive_poll_for_media)

;; extern gboolean g_drive_poll_for_media_finish(GDrive *drive, GAsyncResult *
;;     result, GError **error);
(define ~g_drive_poll_for_media_finish #f)
(define (g_drive_poll_for_media_finish
         drive
         result
         error)
  (unless
    ~g_drive_poll_for_media_finish
    (set! ~g_drive_poll_for_media_finish
      (fh-link-proc
        "g_drive_poll_for_media_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~drive (unwrap-GDrive* drive))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_drive_poll_for_media_finish
      ~drive
      ~result
      ~error)))
(export g_drive_poll_for_media_finish)

;; extern char *g_drive_get_identifier(GDrive *drive, const char *kind);
(define ~g_drive_get_identifier #f)
(define (g_drive_get_identifier drive kind)
  (unless
    ~g_drive_get_identifier
    (set! ~g_drive_get_identifier
      (fh-link-proc
        "g_drive_get_identifier"
        '*
        (list '* '*))))
  (let ((~drive (unwrap-GDrive* drive))
        (~kind (unwrap~pointer kind)))
    (~g_drive_get_identifier ~drive ~kind)))
(export g_drive_get_identifier)

;; extern char **g_drive_enumerate_identifiers(GDrive *drive);
(define ~g_drive_enumerate_identifiers #f)
(define (g_drive_enumerate_identifiers drive)
  (unless
    ~g_drive_enumerate_identifiers
    (set! ~g_drive_enumerate_identifiers
      (fh-link-proc
        "g_drive_enumerate_identifiers"
        '*
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_enumerate_identifiers ~drive)))
(export g_drive_enumerate_identifiers)

;; extern GDriveStartStopType g_drive_get_start_stop_type(GDrive *drive);
(define ~g_drive_get_start_stop_type #f)
(define (g_drive_get_start_stop_type drive)
  (unless
    ~g_drive_get_start_stop_type
    (set! ~g_drive_get_start_stop_type
      (fh-link-proc
        "g_drive_get_start_stop_type"
        ffi:int
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_get_start_stop_type ~drive)))
(export g_drive_get_start_stop_type)

;; extern gboolean g_drive_can_start(GDrive *drive);
(define ~g_drive_can_start #f)
(define (g_drive_can_start drive)
  (unless
    ~g_drive_can_start
    (set! ~g_drive_can_start
      (fh-link-proc
        "g_drive_can_start"
        ffi:int
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_can_start ~drive)))
(export g_drive_can_start)

;; extern gboolean g_drive_can_start_degraded(GDrive *drive);
(define ~g_drive_can_start_degraded #f)
(define (g_drive_can_start_degraded drive)
  (unless
    ~g_drive_can_start_degraded
    (set! ~g_drive_can_start_degraded
      (fh-link-proc
        "g_drive_can_start_degraded"
        ffi:int
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_can_start_degraded ~drive)))
(export g_drive_can_start_degraded)

;; extern void g_drive_start(GDrive *drive, GDriveStartFlags flags, 
;;     GMountOperation *mount_operation, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_drive_start #f)
(define (g_drive_start
         drive
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_drive_start
    (set! ~g_drive_start
      (fh-link-proc
        "g_drive_start"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~drive (unwrap-GDrive* drive))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_drive_start
      ~drive
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_drive_start)

;; extern gboolean g_drive_start_finish(GDrive *drive, GAsyncResult *result, 
;;     GError **error);
(define ~g_drive_start_finish #f)
(define (g_drive_start_finish drive result error)
  (unless
    ~g_drive_start_finish
    (set! ~g_drive_start_finish
      (fh-link-proc
        "g_drive_start_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~drive (unwrap-GDrive* drive))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_drive_start_finish ~drive ~result ~error)))
(export g_drive_start_finish)

;; extern gboolean g_drive_can_stop(GDrive *drive);
(define ~g_drive_can_stop #f)
(define (g_drive_can_stop drive)
  (unless
    ~g_drive_can_stop
    (set! ~g_drive_can_stop
      (fh-link-proc
        "g_drive_can_stop"
        ffi:int
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_can_stop ~drive)))
(export g_drive_can_stop)

;; extern void g_drive_stop(GDrive *drive, GMountUnmountFlags flags, 
;;     GMountOperation *mount_operation, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_drive_stop #f)
(define (g_drive_stop
         drive
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_drive_stop
    (set! ~g_drive_stop
      (fh-link-proc
        "g_drive_stop"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~drive (unwrap-GDrive* drive))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_drive_stop
      ~drive
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_drive_stop)

;; extern gboolean g_drive_stop_finish(GDrive *drive, GAsyncResult *result, 
;;     GError **error);
(define ~g_drive_stop_finish #f)
(define (g_drive_stop_finish drive result error)
  (unless
    ~g_drive_stop_finish
    (set! ~g_drive_stop_finish
      (fh-link-proc
        "g_drive_stop_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~drive (unwrap-GDrive* drive))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_drive_stop_finish ~drive ~result ~error)))
(export g_drive_stop_finish)

;; extern void g_drive_eject_with_operation(GDrive *drive, GMountUnmountFlags 
;;     flags, GMountOperation *mount_operation, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_drive_eject_with_operation #f)
(define (g_drive_eject_with_operation
         drive
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_drive_eject_with_operation
    (set! ~g_drive_eject_with_operation
      (fh-link-proc
        "g_drive_eject_with_operation"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~drive (unwrap-GDrive* drive))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_drive_eject_with_operation
      ~drive
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_drive_eject_with_operation)

;; extern gboolean g_drive_eject_with_operation_finish(GDrive *drive, 
;;     GAsyncResult *result, GError **error);
(define ~g_drive_eject_with_operation_finish #f)
(define (g_drive_eject_with_operation_finish
         drive
         result
         error)
  (unless
    ~g_drive_eject_with_operation_finish
    (set! ~g_drive_eject_with_operation_finish
      (fh-link-proc
        "g_drive_eject_with_operation_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~drive (unwrap-GDrive* drive))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_drive_eject_with_operation_finish
      ~drive
      ~result
      ~error)))
(export g_drive_eject_with_operation_finish)

;; extern const gchar *g_drive_get_sort_key(GDrive *drive);
(define ~g_drive_get_sort_key #f)
(define (g_drive_get_sort_key drive)
  (unless
    ~g_drive_get_sort_key
    (set! ~g_drive_get_sort_key
      (fh-link-proc
        "g_drive_get_sort_key"
        '*
        (list '*))))
  (let ((~drive (unwrap-GDrive* drive)))
    (~g_drive_get_sort_key ~drive)))
(export g_drive_get_sort_key)

;; typedef struct _GDtlsConnectionInterface GDtlsConnectionInterface;
(define GDtlsConnectionInterface-desc void)
(export GDtlsConnectionInterface-desc)
(define GDtlsConnectionInterface*-desc (bs:pointer (delay GDtlsConnectionInterface-desc)))
(export GDtlsConnectionInterface*-desc)
(define-fh-pointer-type GDtlsConnectionInterface* GDtlsConnectionInterface*-desc)

;; struct _GDtlsConnectionInterface {
;;   GTypeInterface g_iface;
;;   /* signals */
;;   gboolean (*accept_certificate)(GDtlsConnection *connection, 
;;       GTlsCertificate *peer_cert, GTlsCertificateFlags errors);
;;   /* methods */
;;   gboolean (*handshake)(GDtlsConnection *conn, GCancellable *cancellable, 
;;       GError **error);
;;   void (*handshake_async)(GDtlsConnection *conn, int io_priority, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   gboolean (*handshake_finish)(GDtlsConnection *conn, GAsyncResult *result, 
;;       GError **error);
;;   gboolean (*shutdown)(GDtlsConnection *conn, gboolean shutdown_read, 
;;       gboolean shutdown_write, GCancellable *cancellable, GError **error);
;;   void (*shutdown_async)(GDtlsConnection *conn, gboolean shutdown_read, 
;;       gboolean shutdown_write, int io_priority, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*shutdown_finish)(GDtlsConnection *conn, GAsyncResult *result, 
;;       GError **error);
;; };
(define struct-_GDtlsConnectionInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(accept_certificate ,(bs:pointer void))
          `(handshake ,(bs:pointer void))
          `(handshake_async ,(bs:pointer void))
          `(handshake_finish ,(bs:pointer void))
          `(shutdown ,(bs:pointer void))
          `(shutdown_async ,(bs:pointer void))
          `(shutdown_finish ,(bs:pointer void)))))
(export struct-_GDtlsConnectionInterface-desc)
(define-fh-compound-type/p struct-_GDtlsConnectionInterface struct-_GDtlsConnectionInterface-desc)
(set! GDtlsConnectionInterface-desc struct-_GDtlsConnectionInterface-desc)
(define-fh-compound-type GDtlsConnectionInterface GDtlsConnectionInterface-desc)

;; extern GType g_dtls_connection_get_type(void);
(define ~g_dtls_connection_get_type #f)
(define (g_dtls_connection_get_type)
  (unless
    ~g_dtls_connection_get_type
    (set! ~g_dtls_connection_get_type
      (fh-link-proc
        "g_dtls_connection_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dtls_connection_get_type)))
(export g_dtls_connection_get_type)

;; extern void g_dtls_connection_set_database(GDtlsConnection *conn, 
;;     GTlsDatabase *database);
(define ~g_dtls_connection_set_database #f)
(define (g_dtls_connection_set_database conn database)
  (unless
    ~g_dtls_connection_set_database
    (set! ~g_dtls_connection_set_database
      (fh-link-proc
        "g_dtls_connection_set_database"
        ffi:void
        (list '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~database (unwrap-GTlsDatabase* database)))
    (~g_dtls_connection_set_database ~conn ~database)))
(export g_dtls_connection_set_database)

;; extern GTlsDatabase *g_dtls_connection_get_database(GDtlsConnection *conn);
(define ~g_dtls_connection_get_database #f)
(define (g_dtls_connection_get_database conn)
  (unless
    ~g_dtls_connection_get_database
    (set! ~g_dtls_connection_get_database
      (fh-link-proc
        "g_dtls_connection_get_database"
        '*
        (list '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn)))
    (wrap-GTlsDatabase*
      (~g_dtls_connection_get_database ~conn))))
(export g_dtls_connection_get_database)

;; extern void g_dtls_connection_set_certificate(GDtlsConnection *conn, 
;;     GTlsCertificate *certificate);
(define ~g_dtls_connection_set_certificate #f)
(define (g_dtls_connection_set_certificate
         conn
         certificate)
  (unless
    ~g_dtls_connection_set_certificate
    (set! ~g_dtls_connection_set_certificate
      (fh-link-proc
        "g_dtls_connection_set_certificate"
        ffi:void
        (list '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~certificate
          (unwrap-GTlsCertificate* certificate)))
    (~g_dtls_connection_set_certificate
      ~conn
      ~certificate)))
(export g_dtls_connection_set_certificate)

;; extern GTlsCertificate *g_dtls_connection_get_certificate(GDtlsConnection *
;;     conn);
(define ~g_dtls_connection_get_certificate #f)
(define (g_dtls_connection_get_certificate conn)
  (unless
    ~g_dtls_connection_get_certificate
    (set! ~g_dtls_connection_get_certificate
      (fh-link-proc
        "g_dtls_connection_get_certificate"
        '*
        (list '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn)))
    (wrap-GTlsCertificate*
      (~g_dtls_connection_get_certificate ~conn))))
(export g_dtls_connection_get_certificate)

;; extern void g_dtls_connection_set_interaction(GDtlsConnection *conn, 
;;     GTlsInteraction *interaction);
(define ~g_dtls_connection_set_interaction #f)
(define (g_dtls_connection_set_interaction
         conn
         interaction)
  (unless
    ~g_dtls_connection_set_interaction
    (set! ~g_dtls_connection_set_interaction
      (fh-link-proc
        "g_dtls_connection_set_interaction"
        ffi:void
        (list '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~interaction
          (unwrap-GTlsInteraction* interaction)))
    (~g_dtls_connection_set_interaction
      ~conn
      ~interaction)))
(export g_dtls_connection_set_interaction)

;; extern GTlsInteraction *g_dtls_connection_get_interaction(GDtlsConnection *
;;     conn);
(define ~g_dtls_connection_get_interaction #f)
(define (g_dtls_connection_get_interaction conn)
  (unless
    ~g_dtls_connection_get_interaction
    (set! ~g_dtls_connection_get_interaction
      (fh-link-proc
        "g_dtls_connection_get_interaction"
        '*
        (list '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn)))
    (wrap-GTlsInteraction*
      (~g_dtls_connection_get_interaction ~conn))))
(export g_dtls_connection_get_interaction)

;; extern GTlsCertificate *g_dtls_connection_get_peer_certificate(
;;     GDtlsConnection *conn);
(define ~g_dtls_connection_get_peer_certificate #f)
(define (g_dtls_connection_get_peer_certificate conn)
  (unless
    ~g_dtls_connection_get_peer_certificate
    (set! ~g_dtls_connection_get_peer_certificate
      (fh-link-proc
        "g_dtls_connection_get_peer_certificate"
        '*
        (list '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn)))
    (wrap-GTlsCertificate*
      (~g_dtls_connection_get_peer_certificate ~conn))))
(export g_dtls_connection_get_peer_certificate)

;; extern GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors(
;;     GDtlsConnection *conn);
(define ~g_dtls_connection_get_peer_certificate_errors #f)
(define (g_dtls_connection_get_peer_certificate_errors
         conn)
  (unless
    ~g_dtls_connection_get_peer_certificate_errors
    (set! ~g_dtls_connection_get_peer_certificate_errors
      (fh-link-proc
        "g_dtls_connection_get_peer_certificate_errors"
        ffi:int
        (list '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn)))
    (~g_dtls_connection_get_peer_certificate_errors
      ~conn)))
(export g_dtls_connection_get_peer_certificate_errors)

;; extern void g_dtls_connection_set_require_close_notify(GDtlsConnection *conn
;;     , gboolean require_close_notify);
(define ~g_dtls_connection_set_require_close_notify #f)
(define (g_dtls_connection_set_require_close_notify
         conn
         require_close_notify)
  (unless
    ~g_dtls_connection_set_require_close_notify
    (set! ~g_dtls_connection_set_require_close_notify
      (fh-link-proc
        "g_dtls_connection_set_require_close_notify"
        ffi:void
        (list '* ffi:int))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~require_close_notify
          (unwrap~fixed require_close_notify)))
    (~g_dtls_connection_set_require_close_notify
      ~conn
      ~require_close_notify)))
(export g_dtls_connection_set_require_close_notify)

;; extern gboolean g_dtls_connection_get_require_close_notify(GDtlsConnection *
;;     conn);
(define ~g_dtls_connection_get_require_close_notify #f)
(define (g_dtls_connection_get_require_close_notify conn)
  (unless
    ~g_dtls_connection_get_require_close_notify
    (set! ~g_dtls_connection_get_require_close_notify
      (fh-link-proc
        "g_dtls_connection_get_require_close_notify"
        ffi:int
        (list '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn)))
    (~g_dtls_connection_get_require_close_notify
      ~conn)))
(export g_dtls_connection_get_require_close_notify)

;; extern void g_dtls_connection_set_rehandshake_mode(GDtlsConnection *conn, 
;;     GTlsRehandshakeMode mode);
(define ~g_dtls_connection_set_rehandshake_mode #f)
(define (g_dtls_connection_set_rehandshake_mode
         conn
         mode)
  (unless
    ~g_dtls_connection_set_rehandshake_mode
    (set! ~g_dtls_connection_set_rehandshake_mode
      (fh-link-proc
        "g_dtls_connection_set_rehandshake_mode"
        ffi:void
        (list '* ffi:int))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~mode (unwrap~fixed mode)))
    (~g_dtls_connection_set_rehandshake_mode
      ~conn
      ~mode)))
(export g_dtls_connection_set_rehandshake_mode)

;; extern GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode(
;;     GDtlsConnection *conn);
(define ~g_dtls_connection_get_rehandshake_mode #f)
(define (g_dtls_connection_get_rehandshake_mode conn)
  (unless
    ~g_dtls_connection_get_rehandshake_mode
    (set! ~g_dtls_connection_get_rehandshake_mode
      (fh-link-proc
        "g_dtls_connection_get_rehandshake_mode"
        ffi:int
        (list '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn)))
    (~g_dtls_connection_get_rehandshake_mode ~conn)))
(export g_dtls_connection_get_rehandshake_mode)

;; extern gboolean g_dtls_connection_handshake(GDtlsConnection *conn, 
;;     GCancellable *cancellable, GError **error);
(define ~g_dtls_connection_handshake #f)
(define (g_dtls_connection_handshake
         conn
         cancellable
         error)
  (unless
    ~g_dtls_connection_handshake
    (set! ~g_dtls_connection_handshake
      (fh-link-proc
        "g_dtls_connection_handshake"
        ffi:int
        (list '* '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_dtls_connection_handshake
      ~conn
      ~cancellable
      ~error)))
(export g_dtls_connection_handshake)

;; extern void g_dtls_connection_handshake_async(GDtlsConnection *conn, int 
;;     io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_dtls_connection_handshake_async #f)
(define (g_dtls_connection_handshake_async
         conn
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_dtls_connection_handshake_async
    (set! ~g_dtls_connection_handshake_async
      (fh-link-proc
        "g_dtls_connection_handshake_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dtls_connection_handshake_async
      ~conn
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_dtls_connection_handshake_async)

;; extern gboolean g_dtls_connection_handshake_finish(GDtlsConnection *conn, 
;;     GAsyncResult *result, GError **error);
(define ~g_dtls_connection_handshake_finish #f)
(define (g_dtls_connection_handshake_finish
         conn
         result
         error)
  (unless
    ~g_dtls_connection_handshake_finish
    (set! ~g_dtls_connection_handshake_finish
      (fh-link-proc
        "g_dtls_connection_handshake_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_dtls_connection_handshake_finish
      ~conn
      ~result
      ~error)))
(export g_dtls_connection_handshake_finish)

;; extern gboolean g_dtls_connection_shutdown(GDtlsConnection *conn, gboolean 
;;     shutdown_read, gboolean shutdown_write, GCancellable *cancellable, 
;;     GError **error);
(define ~g_dtls_connection_shutdown #f)
(define (g_dtls_connection_shutdown
         conn
         shutdown_read
         shutdown_write
         cancellable
         error)
  (unless
    ~g_dtls_connection_shutdown
    (set! ~g_dtls_connection_shutdown
      (fh-link-proc
        "g_dtls_connection_shutdown"
        ffi:int
        (list '* ffi:int ffi:int '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~shutdown_read (unwrap~fixed shutdown_read))
        (~shutdown_write (unwrap~fixed shutdown_write))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_dtls_connection_shutdown
      ~conn
      ~shutdown_read
      ~shutdown_write
      ~cancellable
      ~error)))
(export g_dtls_connection_shutdown)

;; extern void g_dtls_connection_shutdown_async(GDtlsConnection *conn, gboolean
;;      shutdown_read, gboolean shutdown_write, int io_priority, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_dtls_connection_shutdown_async #f)
(define (g_dtls_connection_shutdown_async
         conn
         shutdown_read
         shutdown_write
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_dtls_connection_shutdown_async
    (set! ~g_dtls_connection_shutdown_async
      (fh-link-proc
        "g_dtls_connection_shutdown_async"
        ffi:void
        (list '* ffi:int ffi:int ffi:int '* '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~shutdown_read (unwrap~fixed shutdown_read))
        (~shutdown_write (unwrap~fixed shutdown_write))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dtls_connection_shutdown_async
      ~conn
      ~shutdown_read
      ~shutdown_write
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_dtls_connection_shutdown_async)

;; extern gboolean g_dtls_connection_shutdown_finish(GDtlsConnection *conn, 
;;     GAsyncResult *result, GError **error);
(define ~g_dtls_connection_shutdown_finish #f)
(define (g_dtls_connection_shutdown_finish
         conn
         result
         error)
  (unless
    ~g_dtls_connection_shutdown_finish
    (set! ~g_dtls_connection_shutdown_finish
      (fh-link-proc
        "g_dtls_connection_shutdown_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_dtls_connection_shutdown_finish
      ~conn
      ~result
      ~error)))
(export g_dtls_connection_shutdown_finish)

;; extern gboolean g_dtls_connection_close(GDtlsConnection *conn, GCancellable 
;;     *cancellable, GError **error);
(define ~g_dtls_connection_close #f)
(define (g_dtls_connection_close conn cancellable error)
  (unless
    ~g_dtls_connection_close
    (set! ~g_dtls_connection_close
      (fh-link-proc
        "g_dtls_connection_close"
        ffi:int
        (list '* '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_dtls_connection_close
      ~conn
      ~cancellable
      ~error)))
(export g_dtls_connection_close)

;; extern void g_dtls_connection_close_async(GDtlsConnection *conn, int 
;;     io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_dtls_connection_close_async #f)
(define (g_dtls_connection_close_async
         conn
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_dtls_connection_close_async
    (set! ~g_dtls_connection_close_async
      (fh-link-proc
        "g_dtls_connection_close_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dtls_connection_close_async
      ~conn
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_dtls_connection_close_async)

;; extern gboolean g_dtls_connection_close_finish(GDtlsConnection *conn, 
;;     GAsyncResult *result, GError **error);
(define ~g_dtls_connection_close_finish #f)
(define (g_dtls_connection_close_finish
         conn
         result
         error)
  (unless
    ~g_dtls_connection_close_finish
    (set! ~g_dtls_connection_close_finish
      (fh-link-proc
        "g_dtls_connection_close_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_dtls_connection_close_finish
      ~conn
      ~result
      ~error)))
(export g_dtls_connection_close_finish)

;; extern gboolean g_dtls_connection_emit_accept_certificate(GDtlsConnection *
;;     conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors);
(define ~g_dtls_connection_emit_accept_certificate #f)
(define (g_dtls_connection_emit_accept_certificate
         conn
         peer_cert
         errors)
  (unless
    ~g_dtls_connection_emit_accept_certificate
    (set! ~g_dtls_connection_emit_accept_certificate
      (fh-link-proc
        "g_dtls_connection_emit_accept_certificate"
        ffi:int
        (list '* '* ffi:int))))
  (let ((~conn (unwrap-GDtlsConnection* conn))
        (~peer_cert (unwrap-GTlsCertificate* peer_cert))
        (~errors (unwrap~fixed errors)))
    (~g_dtls_connection_emit_accept_certificate
      ~conn
      ~peer_cert
      ~errors)))
(export g_dtls_connection_emit_accept_certificate)

;; typedef struct _GDtlsClientConnectionInterface 
;;     GDtlsClientConnectionInterface;
(define GDtlsClientConnectionInterface-desc void)
(export GDtlsClientConnectionInterface-desc)
(define GDtlsClientConnectionInterface*-desc (bs:pointer (delay GDtlsClientConnectionInterface-desc)))
(export GDtlsClientConnectionInterface*-desc)
(define-fh-pointer-type GDtlsClientConnectionInterface* GDtlsClientConnectionInterface*-desc)

;; struct _GDtlsClientConnectionInterface {
;;   GTypeInterface g_iface;
;; };
(define struct-_GDtlsClientConnectionInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long)))))))
(export struct-_GDtlsClientConnectionInterface-desc)
(define-fh-compound-type/p struct-_GDtlsClientConnectionInterface struct-_GDtlsClientConnectionInterface-desc)
(set! GDtlsClientConnectionInterface-desc struct-_GDtlsClientConnectionInterface-desc)
(define-fh-compound-type GDtlsClientConnectionInterface GDtlsClientConnectionInterface-desc)

;; extern GType g_dtls_client_connection_get_type(void);
(define ~g_dtls_client_connection_get_type #f)
(define (g_dtls_client_connection_get_type)
  (unless
    ~g_dtls_client_connection_get_type
    (set! ~g_dtls_client_connection_get_type
      (fh-link-proc
        "g_dtls_client_connection_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dtls_client_connection_get_type)))
(export g_dtls_client_connection_get_type)

;; extern GDatagramBased *g_dtls_client_connection_new(GDatagramBased *
;;     base_socket, GSocketConnectable *server_identity, GError **error);
(define ~g_dtls_client_connection_new #f)
(define (g_dtls_client_connection_new
         base_socket
         server_identity
         error)
  (unless
    ~g_dtls_client_connection_new
    (set! ~g_dtls_client_connection_new
      (fh-link-proc
        "g_dtls_client_connection_new"
        '*
        (list '* '* '*))))
  (let ((~base_socket
          (unwrap-GDatagramBased* base_socket))
        (~server_identity
          (unwrap-GSocketConnectable* server_identity))
        (~error (unwrap~pointer error)))
    (wrap-GDatagramBased*
      (~g_dtls_client_connection_new
        ~base_socket
        ~server_identity
        ~error))))
(export g_dtls_client_connection_new)

;; extern GTlsCertificateFlags g_dtls_client_connection_get_validation_flags(
;;     GDtlsClientConnection *conn);
(define ~g_dtls_client_connection_get_validation_flags #f)
(define (g_dtls_client_connection_get_validation_flags
         conn)
  (unless
    ~g_dtls_client_connection_get_validation_flags
    (set! ~g_dtls_client_connection_get_validation_flags
      (fh-link-proc
        "g_dtls_client_connection_get_validation_flags"
        ffi:int
        (list '*))))
  (let ((~conn (unwrap-GDtlsClientConnection* conn)))
    (~g_dtls_client_connection_get_validation_flags
      ~conn)))
(export g_dtls_client_connection_get_validation_flags)

;; extern void g_dtls_client_connection_set_validation_flags(
;;     GDtlsClientConnection *conn, GTlsCertificateFlags flags);
(define ~g_dtls_client_connection_set_validation_flags #f)
(define (g_dtls_client_connection_set_validation_flags
         conn
         flags)
  (unless
    ~g_dtls_client_connection_set_validation_flags
    (set! ~g_dtls_client_connection_set_validation_flags
      (fh-link-proc
        "g_dtls_client_connection_set_validation_flags"
        ffi:void
        (list '* ffi:int))))
  (let ((~conn (unwrap-GDtlsClientConnection* conn))
        (~flags (unwrap~fixed flags)))
    (~g_dtls_client_connection_set_validation_flags
      ~conn
      ~flags)))
(export g_dtls_client_connection_set_validation_flags)

;; extern GSocketConnectable *g_dtls_client_connection_get_server_identity(
;;     GDtlsClientConnection *conn);
(define ~g_dtls_client_connection_get_server_identity #f)
(define (g_dtls_client_connection_get_server_identity
         conn)
  (unless
    ~g_dtls_client_connection_get_server_identity
    (set! ~g_dtls_client_connection_get_server_identity
      (fh-link-proc
        "g_dtls_client_connection_get_server_identity"
        '*
        (list '*))))
  (let ((~conn (unwrap-GDtlsClientConnection* conn)))
    (wrap-GSocketConnectable*
      (~g_dtls_client_connection_get_server_identity
        ~conn))))
(export g_dtls_client_connection_get_server_identity)

;; extern void g_dtls_client_connection_set_server_identity(
;;     GDtlsClientConnection *conn, GSocketConnectable *identity);
(define ~g_dtls_client_connection_set_server_identity #f)
(define (g_dtls_client_connection_set_server_identity
         conn
         identity)
  (unless
    ~g_dtls_client_connection_set_server_identity
    (set! ~g_dtls_client_connection_set_server_identity
      (fh-link-proc
        "g_dtls_client_connection_set_server_identity"
        ffi:void
        (list '* '*))))
  (let ((~conn (unwrap-GDtlsClientConnection* conn))
        (~identity (unwrap-GSocketConnectable* identity)))
    (~g_dtls_client_connection_set_server_identity
      ~conn
      ~identity)))
(export g_dtls_client_connection_set_server_identity)

;; extern GList *g_dtls_client_connection_get_accepted_cas(
;;     GDtlsClientConnection *conn);
(define ~g_dtls_client_connection_get_accepted_cas #f)
(define (g_dtls_client_connection_get_accepted_cas conn)
  (unless
    ~g_dtls_client_connection_get_accepted_cas
    (set! ~g_dtls_client_connection_get_accepted_cas
      (fh-link-proc
        "g_dtls_client_connection_get_accepted_cas"
        '*
        (list '*))))
  (let ((~conn (unwrap-GDtlsClientConnection* conn)))
    (~g_dtls_client_connection_get_accepted_cas
      ~conn)))
(export g_dtls_client_connection_get_accepted_cas)

;; typedef struct _GDtlsServerConnectionInterface 
;;     GDtlsServerConnectionInterface;
(define GDtlsServerConnectionInterface-desc void)
(export GDtlsServerConnectionInterface-desc)
(define GDtlsServerConnectionInterface*-desc (bs:pointer (delay GDtlsServerConnectionInterface-desc)))
(export GDtlsServerConnectionInterface*-desc)
(define-fh-pointer-type GDtlsServerConnectionInterface* GDtlsServerConnectionInterface*-desc)

;; struct _GDtlsServerConnectionInterface {
;;   GTypeInterface g_iface;
;; };
(define struct-_GDtlsServerConnectionInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long)))))))
(export struct-_GDtlsServerConnectionInterface-desc)
(define-fh-compound-type/p struct-_GDtlsServerConnectionInterface struct-_GDtlsServerConnectionInterface-desc)
(set! GDtlsServerConnectionInterface-desc struct-_GDtlsServerConnectionInterface-desc)
(define-fh-compound-type GDtlsServerConnectionInterface GDtlsServerConnectionInterface-desc)

;; extern GType g_dtls_server_connection_get_type(void);
(define ~g_dtls_server_connection_get_type #f)
(define (g_dtls_server_connection_get_type)
  (unless
    ~g_dtls_server_connection_get_type
    (set! ~g_dtls_server_connection_get_type
      (fh-link-proc
        "g_dtls_server_connection_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dtls_server_connection_get_type)))
(export g_dtls_server_connection_get_type)

;; extern GDatagramBased *g_dtls_server_connection_new(GDatagramBased *
;;     base_socket, GTlsCertificate *certificate, GError **error);
(define ~g_dtls_server_connection_new #f)
(define (g_dtls_server_connection_new
         base_socket
         certificate
         error)
  (unless
    ~g_dtls_server_connection_new
    (set! ~g_dtls_server_connection_new
      (fh-link-proc
        "g_dtls_server_connection_new"
        '*
        (list '* '* '*))))
  (let ((~base_socket
          (unwrap-GDatagramBased* base_socket))
        (~certificate
          (unwrap-GTlsCertificate* certificate))
        (~error (unwrap~pointer error)))
    (wrap-GDatagramBased*
      (~g_dtls_server_connection_new
        ~base_socket
        ~certificate
        ~error))))
(export g_dtls_server_connection_new)

;; typedef struct _GIconIface GIconIface;
(define GIconIface-desc void)
(export GIconIface-desc)
(define GIconIface*-desc (bs:pointer (delay GIconIface-desc)))
(export GIconIface*-desc)
(define-fh-pointer-type GIconIface* GIconIface*-desc)

;; struct _GIconIface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   guint (*hash)(GIcon *icon);
;;   gboolean (*equal)(GIcon *icon1, GIcon *icon2);
;;   gboolean (*to_tokens)(GIcon *icon, GPtrArray *tokens, gint *out_version);
;;   GIcon *(*from_tokens)(gchar **tokens, gint num_tokens, gint version, 
;;       GError **error);
;;   GVariant *(*serialize)(GIcon *icon);
;; };
(define struct-_GIconIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(hash ,(bs:pointer void))
          `(equal ,(bs:pointer void))
          `(to_tokens ,(bs:pointer void))
          `(from_tokens ,(bs:pointer void))
          `(serialize ,(bs:pointer void)))))
(export struct-_GIconIface-desc)
(define-fh-compound-type/p struct-_GIconIface struct-_GIconIface-desc)
(set! GIconIface-desc struct-_GIconIface-desc)
(define-fh-compound-type GIconIface GIconIface-desc)

;; extern GType g_icon_get_type(void);
(define ~g_icon_get_type #f)
(define (g_icon_get_type)
  (unless
    ~g_icon_get_type
    (set! ~g_icon_get_type
      (fh-link-proc
        "g_icon_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_icon_get_type)))
(export g_icon_get_type)

;; extern guint g_icon_hash(gconstpointer icon);
(define ~g_icon_hash #f)
(define (g_icon_hash icon)
  (unless
    ~g_icon_hash
    (set! ~g_icon_hash
      (fh-link-proc
        "g_icon_hash"
        ffi:unsigned-int
        (list '*))))
  (let ((~icon (unwrap-gconstpointer icon)))
    (~g_icon_hash ~icon)))
(export g_icon_hash)

;; extern gboolean g_icon_equal(GIcon *icon1, GIcon *icon2);
(define ~g_icon_equal #f)
(define (g_icon_equal icon1 icon2)
  (unless
    ~g_icon_equal
    (set! ~g_icon_equal
      (fh-link-proc
        "g_icon_equal"
        ffi:int
        (list '* '*))))
  (let ((~icon1 (unwrap-GIcon* icon1))
        (~icon2 (unwrap-GIcon* icon2)))
    (~g_icon_equal ~icon1 ~icon2)))
(export g_icon_equal)

;; extern gchar *g_icon_to_string(GIcon *icon);
(define ~g_icon_to_string #f)
(define (g_icon_to_string icon)
  (unless
    ~g_icon_to_string
    (set! ~g_icon_to_string
      (fh-link-proc "g_icon_to_string" '* (list '*))))
  (let ((~icon (unwrap-GIcon* icon)))
    (~g_icon_to_string ~icon)))
(export g_icon_to_string)

;; extern GIcon *g_icon_new_for_string(const gchar *str, GError **error);
(define ~g_icon_new_for_string #f)
(define (g_icon_new_for_string str error)
  (unless
    ~g_icon_new_for_string
    (set! ~g_icon_new_for_string
      (fh-link-proc
        "g_icon_new_for_string"
        '*
        (list '* '*))))
  (let ((~str (unwrap~pointer str))
        (~error (unwrap~pointer error)))
    (wrap-GIcon*
      (~g_icon_new_for_string ~str ~error))))
(export g_icon_new_for_string)

;; extern GVariant *g_icon_serialize(GIcon *icon);
(define ~g_icon_serialize #f)
(define (g_icon_serialize icon)
  (unless
    ~g_icon_serialize
    (set! ~g_icon_serialize
      (fh-link-proc "g_icon_serialize" '* (list '*))))
  (let ((~icon (unwrap-GIcon* icon)))
    (~g_icon_serialize ~icon)))
(export g_icon_serialize)

;; extern GIcon *g_icon_deserialize(GVariant *value);
(define ~g_icon_deserialize #f)
(define (g_icon_deserialize value)
  (unless
    ~g_icon_deserialize
    (set! ~g_icon_deserialize
      (fh-link-proc "g_icon_deserialize" '* (list '*))))
  (let ()
    (wrap-GIcon* (~g_icon_deserialize value))))
(export g_icon_deserialize)

;; typedef struct _GEmblem GEmblem;
(define GEmblem-desc void)
(export GEmblem-desc)
(define GEmblem*-desc (bs:pointer GEmblem-desc))
(export GEmblem*-desc)
(define-fh-pointer-type GEmblem* GEmblem*-desc)

;; typedef struct _GEmblemClass GEmblemClass;
(define GEmblemClass-desc void)
(export GEmblemClass-desc)
(define GEmblemClass*-desc (bs:pointer GEmblemClass-desc))
(export GEmblemClass*-desc)
(define-fh-pointer-type GEmblemClass* GEmblemClass*-desc)

;; extern GType g_emblem_get_type(void);
(define ~g_emblem_get_type #f)
(define (g_emblem_get_type)
  (unless
    ~g_emblem_get_type
    (set! ~g_emblem_get_type
      (fh-link-proc
        "g_emblem_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_emblem_get_type)))
(export g_emblem_get_type)

;; extern GEmblem *g_emblem_new(GIcon *icon);
(define ~g_emblem_new #f)
(define (g_emblem_new icon)
  (unless
    ~g_emblem_new
    (set! ~g_emblem_new
      (fh-link-proc "g_emblem_new" '* (list '*))))
  (let ((~icon (unwrap-GIcon* icon)))
    (wrap-GEmblem* (~g_emblem_new ~icon))))
(export g_emblem_new)

;; extern GEmblem *g_emblem_new_with_origin(GIcon *icon, GEmblemOrigin origin)
;;     ;
(define ~g_emblem_new_with_origin #f)
(define (g_emblem_new_with_origin icon origin)
  (unless
    ~g_emblem_new_with_origin
    (set! ~g_emblem_new_with_origin
      (fh-link-proc
        "g_emblem_new_with_origin"
        '*
        (list '* ffi:int))))
  (let ((~icon (unwrap-GIcon* icon))
        (~origin (unwrap~fixed origin)))
    (wrap-GEmblem*
      (~g_emblem_new_with_origin ~icon ~origin))))
(export g_emblem_new_with_origin)

;; extern GIcon *g_emblem_get_icon(GEmblem *emblem);
(define ~g_emblem_get_icon #f)
(define (g_emblem_get_icon emblem)
  (unless
    ~g_emblem_get_icon
    (set! ~g_emblem_get_icon
      (fh-link-proc "g_emblem_get_icon" '* (list '*))))
  (let ((~emblem (unwrap-GEmblem* emblem)))
    (wrap-GIcon* (~g_emblem_get_icon ~emblem))))
(export g_emblem_get_icon)

;; extern GEmblemOrigin g_emblem_get_origin(GEmblem *emblem);
(define ~g_emblem_get_origin #f)
(define (g_emblem_get_origin emblem)
  (unless
    ~g_emblem_get_origin
    (set! ~g_emblem_get_origin
      (fh-link-proc
        "g_emblem_get_origin"
        ffi:int
        (list '*))))
  (let ((~emblem (unwrap-GEmblem* emblem)))
    (~g_emblem_get_origin ~emblem)))
(export g_emblem_get_origin)

;; typedef struct _GEmblemedIcon GEmblemedIcon;
(define GEmblemedIcon-desc void)
(export GEmblemedIcon-desc)
(define GEmblemedIcon*-desc (bs:pointer (delay GEmblemedIcon-desc)))
(export GEmblemedIcon*-desc)
(define-fh-pointer-type GEmblemedIcon* GEmblemedIcon*-desc)

;; typedef struct _GEmblemedIconClass GEmblemedIconClass;
(define GEmblemedIconClass-desc void)
(export GEmblemedIconClass-desc)
(define GEmblemedIconClass*-desc (bs:pointer (delay GEmblemedIconClass-desc)))
(export GEmblemedIconClass*-desc)
(define-fh-pointer-type GEmblemedIconClass* GEmblemedIconClass*-desc)

;; typedef struct _GEmblemedIconPrivate GEmblemedIconPrivate;
(define GEmblemedIconPrivate-desc void)
(export GEmblemedIconPrivate-desc)
(define GEmblemedIconPrivate*-desc (bs:pointer GEmblemedIconPrivate-desc))
(export GEmblemedIconPrivate*-desc)
(define-fh-pointer-type GEmblemedIconPrivate* GEmblemedIconPrivate*-desc)

;; struct _GEmblemedIcon {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GEmblemedIconPrivate *priv;
;; };
(define struct-_GEmblemedIcon-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GEmblemedIconPrivate*-desc))))))
(export struct-_GEmblemedIcon-desc)
(define-fh-compound-type/p struct-_GEmblemedIcon struct-_GEmblemedIcon-desc)
(set! GEmblemedIcon-desc struct-_GEmblemedIcon-desc)
(define-fh-compound-type GEmblemedIcon GEmblemedIcon-desc)

;; struct _GEmblemedIconClass {
;;   GObjectClass parent_class;
;; };
(define struct-_GEmblemedIconClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc))))))))
(export struct-_GEmblemedIconClass-desc)
(define-fh-compound-type/p struct-_GEmblemedIconClass struct-_GEmblemedIconClass-desc)
(set! GEmblemedIconClass-desc struct-_GEmblemedIconClass-desc)
(define-fh-compound-type GEmblemedIconClass GEmblemedIconClass-desc)

;; extern GType g_emblemed_icon_get_type(void);
(define ~g_emblemed_icon_get_type #f)
(define (g_emblemed_icon_get_type)
  (unless
    ~g_emblemed_icon_get_type
    (set! ~g_emblemed_icon_get_type
      (fh-link-proc
        "g_emblemed_icon_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_emblemed_icon_get_type)))
(export g_emblemed_icon_get_type)

;; extern GIcon *g_emblemed_icon_new(GIcon *icon, GEmblem *emblem);
(define ~g_emblemed_icon_new #f)
(define (g_emblemed_icon_new icon emblem)
  (unless
    ~g_emblemed_icon_new
    (set! ~g_emblemed_icon_new
      (fh-link-proc
        "g_emblemed_icon_new"
        '*
        (list '* '*))))
  (let ((~icon (unwrap-GIcon* icon))
        (~emblem (unwrap-GEmblem* emblem)))
    (wrap-GIcon*
      (~g_emblemed_icon_new ~icon ~emblem))))
(export g_emblemed_icon_new)

;; extern GIcon *g_emblemed_icon_get_icon(GEmblemedIcon *emblemed);
(define ~g_emblemed_icon_get_icon #f)
(define (g_emblemed_icon_get_icon emblemed)
  (unless
    ~g_emblemed_icon_get_icon
    (set! ~g_emblemed_icon_get_icon
      (fh-link-proc
        "g_emblemed_icon_get_icon"
        '*
        (list '*))))
  (let ((~emblemed (unwrap-GEmblemedIcon* emblemed)))
    (wrap-GIcon*
      (~g_emblemed_icon_get_icon ~emblemed))))
(export g_emblemed_icon_get_icon)

;; extern GList *g_emblemed_icon_get_emblems(GEmblemedIcon *emblemed);
(define ~g_emblemed_icon_get_emblems #f)
(define (g_emblemed_icon_get_emblems emblemed)
  (unless
    ~g_emblemed_icon_get_emblems
    (set! ~g_emblemed_icon_get_emblems
      (fh-link-proc
        "g_emblemed_icon_get_emblems"
        '*
        (list '*))))
  (let ((~emblemed (unwrap-GEmblemedIcon* emblemed)))
    (~g_emblemed_icon_get_emblems ~emblemed)))
(export g_emblemed_icon_get_emblems)

;; extern void g_emblemed_icon_add_emblem(GEmblemedIcon *emblemed, GEmblem *
;;     emblem);
(define ~g_emblemed_icon_add_emblem #f)
(define (g_emblemed_icon_add_emblem emblemed emblem)
  (unless
    ~g_emblemed_icon_add_emblem
    (set! ~g_emblemed_icon_add_emblem
      (fh-link-proc
        "g_emblemed_icon_add_emblem"
        ffi:void
        (list '* '*))))
  (let ((~emblemed (unwrap-GEmblemedIcon* emblemed))
        (~emblem (unwrap-GEmblem* emblem)))
    (~g_emblemed_icon_add_emblem ~emblemed ~emblem)))
(export g_emblemed_icon_add_emblem)

;; extern void g_emblemed_icon_clear_emblems(GEmblemedIcon *emblemed);
(define ~g_emblemed_icon_clear_emblems #f)
(define (g_emblemed_icon_clear_emblems emblemed)
  (unless
    ~g_emblemed_icon_clear_emblems
    (set! ~g_emblemed_icon_clear_emblems
      (fh-link-proc
        "g_emblemed_icon_clear_emblems"
        ffi:void
        (list '*))))
  (let ((~emblemed (unwrap-GEmblemedIcon* emblemed)))
    (~g_emblemed_icon_clear_emblems ~emblemed)))
(export g_emblemed_icon_clear_emblems)

;; struct _GFileAttributeInfo {
;;   char *name;
;;   GFileAttributeType type;
;;   GFileAttributeInfoFlags flags;
;; };
(define struct-_GFileAttributeInfo-desc
  (bs:struct
    (list `(name ,(bs:pointer int))
          `(type ,int)
          `(flags ,int))))
(export struct-_GFileAttributeInfo-desc)
(define-fh-compound-type/p struct-_GFileAttributeInfo struct-_GFileAttributeInfo-desc)
(set! GFileAttributeInfo-desc struct-_GFileAttributeInfo-desc)
(define-fh-compound-type GFileAttributeInfo GFileAttributeInfo-desc)

;; struct _GFileAttributeInfoList {
;;   GFileAttributeInfo *infos;
;;   int n_infos;
;; };
(define struct-_GFileAttributeInfoList-desc
  (bs:struct
    (list `(infos ,(bs:pointer (delay GFileAttributeInfo*-desc)))
          `(n_infos ,int))))
(export struct-_GFileAttributeInfoList-desc)
(define-fh-compound-type/p struct-_GFileAttributeInfoList struct-_GFileAttributeInfoList-desc)
(set! GFileAttributeInfoList-desc struct-_GFileAttributeInfoList-desc)
(define-fh-compound-type GFileAttributeInfoList GFileAttributeInfoList-desc)

;; extern GType g_file_attribute_info_list_get_type(void);
(define ~g_file_attribute_info_list_get_type #f)
(define (g_file_attribute_info_list_get_type)
  (unless
    ~g_file_attribute_info_list_get_type
    (set! ~g_file_attribute_info_list_get_type
      (fh-link-proc
        "g_file_attribute_info_list_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_attribute_info_list_get_type)))
(export g_file_attribute_info_list_get_type)

;; extern GFileAttributeInfoList *g_file_attribute_info_list_new(void);
(define ~g_file_attribute_info_list_new #f)
(define (g_file_attribute_info_list_new)
  (unless
    ~g_file_attribute_info_list_new
    (set! ~g_file_attribute_info_list_new
      (fh-link-proc
        "g_file_attribute_info_list_new"
        '*
        (list))))
  (let ()
    (wrap-GFileAttributeInfoList*
      (~g_file_attribute_info_list_new))))
(export g_file_attribute_info_list_new)

;; extern GFileAttributeInfoList *g_file_attribute_info_list_ref(
;;     GFileAttributeInfoList *list);
(define ~g_file_attribute_info_list_ref #f)
(define (g_file_attribute_info_list_ref list)
  (unless
    ~g_file_attribute_info_list_ref
    (set! ~g_file_attribute_info_list_ref
      (fh-link-proc
        "g_file_attribute_info_list_ref"
        '*
        (list '*))))
  (let ((~list (unwrap-GFileAttributeInfoList* list)))
    (wrap-GFileAttributeInfoList*
      (~g_file_attribute_info_list_ref ~list))))
(export g_file_attribute_info_list_ref)

;; extern void g_file_attribute_info_list_unref(GFileAttributeInfoList *list);
(define ~g_file_attribute_info_list_unref #f)
(define (g_file_attribute_info_list_unref list)
  (unless
    ~g_file_attribute_info_list_unref
    (set! ~g_file_attribute_info_list_unref
      (fh-link-proc
        "g_file_attribute_info_list_unref"
        ffi:void
        (list '*))))
  (let ((~list (unwrap-GFileAttributeInfoList* list)))
    (~g_file_attribute_info_list_unref ~list)))
(export g_file_attribute_info_list_unref)

;; extern GFileAttributeInfoList *g_file_attribute_info_list_dup(
;;     GFileAttributeInfoList *list);
(define ~g_file_attribute_info_list_dup #f)
(define (g_file_attribute_info_list_dup list)
  (unless
    ~g_file_attribute_info_list_dup
    (set! ~g_file_attribute_info_list_dup
      (fh-link-proc
        "g_file_attribute_info_list_dup"
        '*
        (list '*))))
  (let ((~list (unwrap-GFileAttributeInfoList* list)))
    (wrap-GFileAttributeInfoList*
      (~g_file_attribute_info_list_dup ~list))))
(export g_file_attribute_info_list_dup)

;; extern const GFileAttributeInfo *g_file_attribute_info_list_lookup(
;;     GFileAttributeInfoList *list, const char *name);
(define ~g_file_attribute_info_list_lookup #f)
(define (g_file_attribute_info_list_lookup list name)
  (unless
    ~g_file_attribute_info_list_lookup
    (set! ~g_file_attribute_info_list_lookup
      (fh-link-proc
        "g_file_attribute_info_list_lookup"
        '*
        (list '* '*))))
  (let ((~list (unwrap-GFileAttributeInfoList* list))
        (~name (unwrap~pointer name)))
    (wrap-GFileAttributeInfo*
      (~g_file_attribute_info_list_lookup ~list ~name))))
(export g_file_attribute_info_list_lookup)

;; extern void g_file_attribute_info_list_add(GFileAttributeInfoList *list, 
;;     const char *name, GFileAttributeType type, GFileAttributeInfoFlags flags
;;     );
(define ~g_file_attribute_info_list_add #f)
(define (g_file_attribute_info_list_add
         list
         name
         type
         flags)
  (unless
    ~g_file_attribute_info_list_add
    (set! ~g_file_attribute_info_list_add
      (fh-link-proc
        "g_file_attribute_info_list_add"
        ffi:void
        (list '* '* ffi:int ffi:int))))
  (let ((~list (unwrap-GFileAttributeInfoList* list))
        (~name (unwrap~pointer name))
        (~type (unwrap~fixed type))
        (~flags (unwrap~fixed flags)))
    (~g_file_attribute_info_list_add
      ~list
      ~name
      ~type
      ~flags)))
(export g_file_attribute_info_list_add)

;; typedef struct _GFileEnumeratorClass GFileEnumeratorClass;
(define GFileEnumeratorClass-desc void)
(export GFileEnumeratorClass-desc)
(define GFileEnumeratorClass*-desc (bs:pointer (delay GFileEnumeratorClass-desc)))
(export GFileEnumeratorClass*-desc)
(define-fh-pointer-type GFileEnumeratorClass* GFileEnumeratorClass*-desc)

;; typedef struct _GFileEnumeratorPrivate GFileEnumeratorPrivate;
(define GFileEnumeratorPrivate-desc void)
(export GFileEnumeratorPrivate-desc)
(define GFileEnumeratorPrivate*-desc (bs:pointer GFileEnumeratorPrivate-desc))
(export GFileEnumeratorPrivate*-desc)
(define-fh-pointer-type GFileEnumeratorPrivate* GFileEnumeratorPrivate*-desc)

;; struct _GFileEnumerator {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GFileEnumeratorPrivate *priv;
;; };
(define struct-_GFileEnumerator-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GFileEnumeratorPrivate*-desc))))))
(export struct-_GFileEnumerator-desc)
(define-fh-compound-type/p struct-_GFileEnumerator struct-_GFileEnumerator-desc)
(set! GFileEnumerator-desc struct-_GFileEnumerator-desc)
(define-fh-compound-type GFileEnumerator GFileEnumerator-desc)

;; struct _GFileEnumeratorClass {
;;   GObjectClass parent_class;
;;   /* Virtual Table */
;;   GFileInfo *(*next_file)(GFileEnumerator *enumerator, GCancellable *
;;       cancellable, GError **error);
;;   gboolean (*close_fn)(GFileEnumerator *enumerator, GCancellable *
;;       cancellable, GError **error);
;;   void (*next_files_async)(GFileEnumerator *enumerator, int num_files, int 
;;       io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;       gpointer user_data);
;;   GList *(*next_files_finish)(GFileEnumerator *enumerator, GAsyncResult *
;;       result, GError **error);
;;   void (*close_async)(GFileEnumerator *enumerator, int io_priority, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   gboolean (*close_finish)(GFileEnumerator *enumerator, GAsyncResult *result
;;       , GError **error);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;;   void (*_g_reserved7)(void);
;; };
(define struct-_GFileEnumeratorClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(next_file ,(bs:pointer void))
          `(close_fn ,(bs:pointer void))
          `(next_files_async ,(bs:pointer void))
          `(next_files_finish ,(bs:pointer void))
          `(close_async ,(bs:pointer void))
          `(close_finish ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void))
          `(_g_reserved7 ,(bs:pointer void)))))
(export struct-_GFileEnumeratorClass-desc)
(define-fh-compound-type/p struct-_GFileEnumeratorClass struct-_GFileEnumeratorClass-desc)
(set! GFileEnumeratorClass-desc struct-_GFileEnumeratorClass-desc)
(define-fh-compound-type GFileEnumeratorClass GFileEnumeratorClass-desc)

;; extern GType g_file_enumerator_get_type(void);
(define ~g_file_enumerator_get_type #f)
(define (g_file_enumerator_get_type)
  (unless
    ~g_file_enumerator_get_type
    (set! ~g_file_enumerator_get_type
      (fh-link-proc
        "g_file_enumerator_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_enumerator_get_type)))
(export g_file_enumerator_get_type)

;; extern GFileInfo *g_file_enumerator_next_file(GFileEnumerator *enumerator, 
;;     GCancellable *cancellable, GError **error);
(define ~g_file_enumerator_next_file #f)
(define (g_file_enumerator_next_file
         enumerator
         cancellable
         error)
  (unless
    ~g_file_enumerator_next_file
    (set! ~g_file_enumerator_next_file
      (fh-link-proc
        "g_file_enumerator_next_file"
        '*
        (list '* '* '*))))
  (let ((~enumerator
          (unwrap-GFileEnumerator* enumerator))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileInfo*
      (~g_file_enumerator_next_file
        ~enumerator
        ~cancellable
        ~error))))
(export g_file_enumerator_next_file)

;; extern gboolean g_file_enumerator_close(GFileEnumerator *enumerator, 
;;     GCancellable *cancellable, GError **error);
(define ~g_file_enumerator_close #f)
(define (g_file_enumerator_close
         enumerator
         cancellable
         error)
  (unless
    ~g_file_enumerator_close
    (set! ~g_file_enumerator_close
      (fh-link-proc
        "g_file_enumerator_close"
        ffi:int
        (list '* '* '*))))
  (let ((~enumerator
          (unwrap-GFileEnumerator* enumerator))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_enumerator_close
      ~enumerator
      ~cancellable
      ~error)))
(export g_file_enumerator_close)

;; extern void g_file_enumerator_next_files_async(GFileEnumerator *enumerator, 
;;     int num_files, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_enumerator_next_files_async #f)
(define (g_file_enumerator_next_files_async
         enumerator
         num_files
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_enumerator_next_files_async
    (set! ~g_file_enumerator_next_files_async
      (fh-link-proc
        "g_file_enumerator_next_files_async"
        ffi:void
        (list '* ffi:int ffi:int '* '* '*))))
  (let ((~enumerator
          (unwrap-GFileEnumerator* enumerator))
        (~num_files (unwrap~fixed num_files))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_enumerator_next_files_async
      ~enumerator
      ~num_files
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_enumerator_next_files_async)

;; extern GList *g_file_enumerator_next_files_finish(GFileEnumerator *
;;     enumerator, GAsyncResult *result, GError **error);
(define ~g_file_enumerator_next_files_finish #f)
(define (g_file_enumerator_next_files_finish
         enumerator
         result
         error)
  (unless
    ~g_file_enumerator_next_files_finish
    (set! ~g_file_enumerator_next_files_finish
      (fh-link-proc
        "g_file_enumerator_next_files_finish"
        '*
        (list '* '* '*))))
  (let ((~enumerator
          (unwrap-GFileEnumerator* enumerator))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_enumerator_next_files_finish
      ~enumerator
      ~result
      ~error)))
(export g_file_enumerator_next_files_finish)

;; extern void g_file_enumerator_close_async(GFileEnumerator *enumerator, int 
;;     io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_file_enumerator_close_async #f)
(define (g_file_enumerator_close_async
         enumerator
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_enumerator_close_async
    (set! ~g_file_enumerator_close_async
      (fh-link-proc
        "g_file_enumerator_close_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~enumerator
          (unwrap-GFileEnumerator* enumerator))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_enumerator_close_async
      ~enumerator
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_enumerator_close_async)

;; extern gboolean g_file_enumerator_close_finish(GFileEnumerator *enumerator, 
;;     GAsyncResult *result, GError **error);
(define ~g_file_enumerator_close_finish #f)
(define (g_file_enumerator_close_finish
         enumerator
         result
         error)
  (unless
    ~g_file_enumerator_close_finish
    (set! ~g_file_enumerator_close_finish
      (fh-link-proc
        "g_file_enumerator_close_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~enumerator
          (unwrap-GFileEnumerator* enumerator))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_enumerator_close_finish
      ~enumerator
      ~result
      ~error)))
(export g_file_enumerator_close_finish)

;; extern gboolean g_file_enumerator_is_closed(GFileEnumerator *enumerator);
(define ~g_file_enumerator_is_closed #f)
(define (g_file_enumerator_is_closed enumerator)
  (unless
    ~g_file_enumerator_is_closed
    (set! ~g_file_enumerator_is_closed
      (fh-link-proc
        "g_file_enumerator_is_closed"
        ffi:int
        (list '*))))
  (let ((~enumerator
          (unwrap-GFileEnumerator* enumerator)))
    (~g_file_enumerator_is_closed ~enumerator)))
(export g_file_enumerator_is_closed)

;; extern gboolean g_file_enumerator_has_pending(GFileEnumerator *enumerator);
(define ~g_file_enumerator_has_pending #f)
(define (g_file_enumerator_has_pending enumerator)
  (unless
    ~g_file_enumerator_has_pending
    (set! ~g_file_enumerator_has_pending
      (fh-link-proc
        "g_file_enumerator_has_pending"
        ffi:int
        (list '*))))
  (let ((~enumerator
          (unwrap-GFileEnumerator* enumerator)))
    (~g_file_enumerator_has_pending ~enumerator)))
(export g_file_enumerator_has_pending)

;; extern void g_file_enumerator_set_pending(GFileEnumerator *enumerator, 
;;     gboolean pending);
(define ~g_file_enumerator_set_pending #f)
(define (g_file_enumerator_set_pending
         enumerator
         pending)
  (unless
    ~g_file_enumerator_set_pending
    (set! ~g_file_enumerator_set_pending
      (fh-link-proc
        "g_file_enumerator_set_pending"
        ffi:void
        (list '* ffi:int))))
  (let ((~enumerator
          (unwrap-GFileEnumerator* enumerator))
        (~pending (unwrap~fixed pending)))
    (~g_file_enumerator_set_pending
      ~enumerator
      ~pending)))
(export g_file_enumerator_set_pending)

;; extern GFile *g_file_enumerator_get_container(GFileEnumerator *enumerator);
(define ~g_file_enumerator_get_container #f)
(define (g_file_enumerator_get_container enumerator)
  (unless
    ~g_file_enumerator_get_container
    (set! ~g_file_enumerator_get_container
      (fh-link-proc
        "g_file_enumerator_get_container"
        '*
        (list '*))))
  (let ((~enumerator
          (unwrap-GFileEnumerator* enumerator)))
    (wrap-GFile*
      (~g_file_enumerator_get_container ~enumerator))))
(export g_file_enumerator_get_container)

;; extern GFile *g_file_enumerator_get_child(GFileEnumerator *enumerator, 
;;     GFileInfo *info);
(define ~g_file_enumerator_get_child #f)
(define (g_file_enumerator_get_child enumerator info)
  (unless
    ~g_file_enumerator_get_child
    (set! ~g_file_enumerator_get_child
      (fh-link-proc
        "g_file_enumerator_get_child"
        '*
        (list '* '*))))
  (let ((~enumerator
          (unwrap-GFileEnumerator* enumerator))
        (~info (unwrap-GFileInfo* info)))
    (wrap-GFile*
      (~g_file_enumerator_get_child ~enumerator ~info))))
(export g_file_enumerator_get_child)

;; extern gboolean g_file_enumerator_iterate(GFileEnumerator *direnum, 
;;     GFileInfo **out_info, GFile **out_child, GCancellable *cancellable, 
;;     GError **error);
(define ~g_file_enumerator_iterate #f)
(define (g_file_enumerator_iterate
         direnum
         out_info
         out_child
         cancellable
         error)
  (unless
    ~g_file_enumerator_iterate
    (set! ~g_file_enumerator_iterate
      (fh-link-proc
        "g_file_enumerator_iterate"
        ffi:int
        (list '* '* '* '* '*))))
  (let ((~direnum (unwrap-GFileEnumerator* direnum))
        (~out_info (unwrap~pointer out_info))
        (~out_child (unwrap~pointer out_child))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_enumerator_iterate
      ~direnum
      ~out_info
      ~out_child
      ~cancellable
      ~error)))
(export g_file_enumerator_iterate)

;; typedef struct _GFileIface GFileIface;
(define GFileIface-desc void)
(export GFileIface-desc)
(define GFileIface*-desc (bs:pointer (delay GFileIface-desc)))
(export GFileIface*-desc)
(define-fh-pointer-type GFileIface* GFileIface*-desc)

;; struct _GFileIface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   GFile *(*dup)(GFile *file);
;;   guint (*hash)(GFile *file);
;;   gboolean (*equal)(GFile *file1, GFile *file2);
;;   gboolean (*is_native)(GFile *file);
;;   gboolean (*has_uri_scheme)(GFile *file, const char *uri_scheme);
;;   char *(*get_uri_scheme)(GFile *file);
;;   char *(*get_basename)(GFile *file);
;;   char *(*get_path)(GFile *file);
;;   char *(*get_uri)(GFile *file);
;;   char *(*get_parse_name)(GFile *file);
;;   GFile *(*get_parent)(GFile *file);
;;   gboolean (*prefix_matches)(GFile *prefix, GFile *file);
;;   char *(*get_relative_path)(GFile *parent, GFile *descendant);
;;   GFile *(*resolve_relative_path)(GFile *file, const char *relative_path);
;;   GFile *(*get_child_for_display_name)(GFile *file, const char *display_name
;;       , GError **error);
;;   GFileEnumerator *(*enumerate_children)(GFile *file, const char *attributes
;;       , GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error
;;       );
;;   void (*enumerate_children_async)(GFile *file, const char *attributes, 
;;       GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable
;;       , GAsyncReadyCallback callback, gpointer user_data);
;;   GFileEnumerator *(*enumerate_children_finish)(GFile *file, GAsyncResult *
;;       res, GError **error);
;;   GFileInfo *(*query_info)(GFile *file, const char *attributes, 
;;       GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
;;       ;
;;   void (*query_info_async)(GFile *file, const char *attributes, 
;;       GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable
;;       , GAsyncReadyCallback callback, gpointer user_data);
;;   GFileInfo *(*query_info_finish)(GFile *file, GAsyncResult *res, GError **
;;       error);
;;   GFileInfo *(*query_filesystem_info)(GFile *file, const char *attributes, 
;;       GCancellable *cancellable, GError **error);
;;   void (*query_filesystem_info_async)(GFile *file, const char *attributes, 
;;       int io_priority, GCancellable *cancellable, GAsyncReadyCallback 
;;       callback, gpointer user_data);
;;   GFileInfo *(*query_filesystem_info_finish)(GFile *file, GAsyncResult *res
;;       , GError **error);
;;   GMount *(*find_enclosing_mount)(GFile *file, GCancellable *cancellable, 
;;       GError **error);
;;   void (*find_enclosing_mount_async)(GFile *file, int io_priority, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   GMount *(*find_enclosing_mount_finish)(GFile *file, GAsyncResult *res, 
;;       GError **error);
;;   GFile *(*set_display_name)(GFile *file, const char *display_name, 
;;       GCancellable *cancellable, GError **error);
;;   void (*set_display_name_async)(GFile *file, const char *display_name, int 
;;       io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;       gpointer user_data);
;;   GFile *(*set_display_name_finish)(GFile *file, GAsyncResult *res, GError *
;;       *error);
;;   GFileAttributeInfoList *(*query_settable_attributes)(GFile *file, 
;;       GCancellable *cancellable, GError **error);
;;   void (*_query_settable_attributes_async)(void);
;;   void (*_query_settable_attributes_finish)(void);
;;   GFileAttributeInfoList *(*query_writable_namespaces)(GFile *file, 
;;       GCancellable *cancellable, GError **error);
;;   void (*_query_writable_namespaces_async)(void);
;;   void (*_query_writable_namespaces_finish)(void);
;;   gboolean (*set_attribute)(GFile *file, const char *attribute, 
;;       GFileAttributeType type, gpointer value_p, GFileQueryInfoFlags flags, 
;;       GCancellable *cancellable, GError **error);
;;   gboolean (*set_attributes_from_info)(GFile *file, GFileInfo *info, 
;;       GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
;;       ;
;;   void (*set_attributes_async)(GFile *file, GFileInfo *info, 
;;       GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable
;;       , GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*set_attributes_finish)(GFile *file, GAsyncResult *result, 
;;       GFileInfo **info, GError **error);
;;   GFileInputStream *(*read_fn)(GFile *file, GCancellable *cancellable, 
;;       GError **error);
;;   void (*read_async)(GFile *file, int io_priority, GCancellable *cancellable
;;       , GAsyncReadyCallback callback, gpointer user_data);
;;   GFileInputStream *(*read_finish)(GFile *file, GAsyncResult *res, GError **
;;       error);
;;   GFileOutputStream *(*append_to)(GFile *file, GFileCreateFlags flags, 
;;       GCancellable *cancellable, GError **error);
;;   void (*append_to_async)(GFile *file, GFileCreateFlags flags, int 
;;       io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;       gpointer user_data);
;;   GFileOutputStream *(*append_to_finish)(GFile *file, GAsyncResult *res, 
;;       GError **error);
;;   GFileOutputStream *(*create)(GFile *file, GFileCreateFlags flags, 
;;       GCancellable *cancellable, GError **error);
;;   void (*create_async)(GFile *file, GFileCreateFlags flags, int io_priority
;;       , GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   GFileOutputStream *(*create_finish)(GFile *file, GAsyncResult *res, GError
;;        **error);
;;   GFileOutputStream *(*replace)(GFile *file, const char *etag, gboolean 
;;       make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError
;;        **error);
;;   void (*replace_async)(GFile *file, const char *etag, gboolean make_backup
;;       , GFileCreateFlags flags, int io_priority, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   GFileOutputStream *(*replace_finish)(GFile *file, GAsyncResult *res, 
;;       GError **error);
;;   gboolean (*delete_file)(GFile *file, GCancellable *cancellable, GError **
;;       error);
;;   void (*delete_file_async)(GFile *file, int io_priority, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*delete_file_finish)(GFile *file, GAsyncResult *result, GError *
;;       *error);
;;   gboolean (*trash)(GFile *file, GCancellable *cancellable, GError **error)
;;       ;
;;   void (*trash_async)(GFile *file, int io_priority, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*trash_finish)(GFile *file, GAsyncResult *result, GError **error
;;       );
;;   gboolean (*make_directory)(GFile *file, GCancellable *cancellable, GError 
;;       **error);
;;   void (*make_directory_async)(GFile *file, int io_priority, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*make_directory_finish)(GFile *file, GAsyncResult *result, 
;;       GError **error);
;;   gboolean (*make_symbolic_link)(GFile *file, const char *symlink_value, 
;;       GCancellable *cancellable, GError **error);
;;   void (*_make_symbolic_link_async)(void);
;;   void (*_make_symbolic_link_finish)(void);
;;   gboolean (*copy)(GFile *source, GFile *destination, GFileCopyFlags flags, 
;;       GCancellable *cancellable, GFileProgressCallback progress_callback, 
;;       gpointer progress_callback_data, GError **error);
;;   void (*copy_async)(GFile *source, GFile *destination, GFileCopyFlags flags
;;       , int io_priority, GCancellable *cancellable, GFileProgressCallback 
;;       progress_callback, gpointer progress_callback_data, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*copy_finish)(GFile *file, GAsyncResult *res, GError **error);
;;   gboolean (*move)(GFile *source, GFile *destination, GFileCopyFlags flags, 
;;       GCancellable *cancellable, GFileProgressCallback progress_callback, 
;;       gpointer progress_callback_data, GError **error);
;;   void (*_move_async)(void);
;;   void (*_move_finish)(void);
;;   void (*mount_mountable)(GFile *file, GMountMountFlags flags, 
;;       GMountOperation *mount_operation, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   GFile *(*mount_mountable_finish)(GFile *file, GAsyncResult *result, GError
;;        **error);
;;   void (*unmount_mountable)(GFile *file, GMountUnmountFlags flags, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   gboolean (*unmount_mountable_finish)(GFile *file, GAsyncResult *result, 
;;       GError **error);
;;   void (*eject_mountable)(GFile *file, GMountUnmountFlags flags, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   gboolean (*eject_mountable_finish)(GFile *file, GAsyncResult *result, 
;;       GError **error);
;;   void (*mount_enclosing_volume)(GFile *location, GMountMountFlags flags, 
;;       GMountOperation *mount_operation, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*mount_enclosing_volume_finish)(GFile *location, GAsyncResult *
;;       result, GError **error);
;;   GFileMonitor *(*monitor_dir)(GFile *file, GFileMonitorFlags flags, 
;;       GCancellable *cancellable, GError **error);
;;   GFileMonitor *(*monitor_file)(GFile *file, GFileMonitorFlags flags, 
;;       GCancellable *cancellable, GError **error);
;;   GFileIOStream *(*open_readwrite)(GFile *file, GCancellable *cancellable, 
;;       GError **error);
;;   void (*open_readwrite_async)(GFile *file, int io_priority, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   GFileIOStream *(*open_readwrite_finish)(GFile *file, GAsyncResult *res, 
;;       GError **error);
;;   GFileIOStream *(*create_readwrite)(GFile *file, GFileCreateFlags flags, 
;;       GCancellable *cancellable, GError **error);
;;   void (*create_readwrite_async)(GFile *file, GFileCreateFlags flags, int 
;;       io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;       gpointer user_data);
;;   GFileIOStream *(*create_readwrite_finish)(GFile *file, GAsyncResult *res, 
;;       GError **error);
;;   GFileIOStream *(*replace_readwrite)(GFile *file, const char *etag, 
;;       gboolean make_backup, GFileCreateFlags flags, GCancellable *
;;       cancellable, GError **error);
;;   void (*replace_readwrite_async)(GFile *file, const char *etag, gboolean 
;;       make_backup, GFileCreateFlags flags, int io_priority, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   GFileIOStream *(*replace_readwrite_finish)(GFile *file, GAsyncResult *res
;;       , GError **error);
;;   void (*start_mountable)(GFile *file, GDriveStartFlags flags, 
;;       GMountOperation *start_operation, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*start_mountable_finish)(GFile *file, GAsyncResult *result, 
;;       GError **error);
;;   void (*stop_mountable)(GFile *file, GMountUnmountFlags flags, 
;;       GMountOperation *mount_operation, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*stop_mountable_finish)(GFile *file, GAsyncResult *result, 
;;       GError **error);
;;   gboolean supports_thread_contexts;
;;   void (*unmount_mountable_with_operation)(GFile *file, GMountUnmountFlags 
;;       flags, GMountOperation *mount_operation, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*unmount_mountable_with_operation_finish)(GFile *file, 
;;       GAsyncResult *result, GError **error);
;;   void (*eject_mountable_with_operation)(GFile *file, GMountUnmountFlags 
;;       flags, GMountOperation *mount_operation, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*eject_mountable_with_operation_finish)(GFile *file, 
;;       GAsyncResult *result, GError **error);
;;   void (*poll_mountable)(GFile *file, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*poll_mountable_finish)(GFile *file, GAsyncResult *result, 
;;       GError **error);
;;   gboolean (*measure_disk_usage)(GFile *file, GFileMeasureFlags flags, 
;;       GCancellable *cancellable, GFileMeasureProgressCallback 
;;       progress_callback, gpointer progress_data, guint64 *disk_usage, 
;;       guint64 *num_dirs, guint64 *num_files, GError **error);
;;   void (*measure_disk_usage_async)(GFile *file, GFileMeasureFlags flags, 
;;       gint io_priority, GCancellable *cancellable, 
;;       GFileMeasureProgressCallback progress_callback, gpointer progress_data
;;       , GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*measure_disk_usage_finish)(GFile *file, GAsyncResult *result, 
;;       guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **
;;       error);
;; };
(define struct-_GFileIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(dup ,(bs:pointer void))
          `(hash ,(bs:pointer void))
          `(equal ,(bs:pointer void))
          `(is_native ,(bs:pointer void))
          `(has_uri_scheme ,(bs:pointer void))
          `(get_uri_scheme ,(bs:pointer void))
          `(get_basename ,(bs:pointer void))
          `(get_path ,(bs:pointer void))
          `(get_uri ,(bs:pointer void))
          `(get_parse_name ,(bs:pointer void))
          `(get_parent ,(bs:pointer void))
          `(prefix_matches ,(bs:pointer void))
          `(get_relative_path ,(bs:pointer void))
          `(resolve_relative_path ,(bs:pointer void))
          `(get_child_for_display_name ,(bs:pointer void))
          `(enumerate_children ,(bs:pointer void))
          `(enumerate_children_async ,(bs:pointer void))
          `(enumerate_children_finish ,(bs:pointer void))
          `(query_info ,(bs:pointer void))
          `(query_info_async ,(bs:pointer void))
          `(query_info_finish ,(bs:pointer void))
          `(query_filesystem_info ,(bs:pointer void))
          `(query_filesystem_info_async ,(bs:pointer void))
          `(query_filesystem_info_finish ,(bs:pointer void))
          `(find_enclosing_mount ,(bs:pointer void))
          `(find_enclosing_mount_async ,(bs:pointer void))
          `(find_enclosing_mount_finish ,(bs:pointer void))
          `(set_display_name ,(bs:pointer void))
          `(set_display_name_async ,(bs:pointer void))
          `(set_display_name_finish ,(bs:pointer void))
          `(query_settable_attributes ,(bs:pointer void))
          `(_query_settable_attributes_async
             ,(bs:pointer void))
          `(_query_settable_attributes_finish
             ,(bs:pointer void))
          `(query_writable_namespaces ,(bs:pointer void))
          `(_query_writable_namespaces_async
             ,(bs:pointer void))
          `(_query_writable_namespaces_finish
             ,(bs:pointer void))
          `(set_attribute ,(bs:pointer void))
          `(set_attributes_from_info ,(bs:pointer void))
          `(set_attributes_async ,(bs:pointer void))
          `(set_attributes_finish ,(bs:pointer void))
          `(read_fn ,(bs:pointer void))
          `(read_async ,(bs:pointer void))
          `(read_finish ,(bs:pointer void))
          `(append_to ,(bs:pointer void))
          `(append_to_async ,(bs:pointer void))
          `(append_to_finish ,(bs:pointer void))
          `(create ,(bs:pointer void))
          `(create_async ,(bs:pointer void))
          `(create_finish ,(bs:pointer void))
          `(replace ,(bs:pointer void))
          `(replace_async ,(bs:pointer void))
          `(replace_finish ,(bs:pointer void))
          `(delete_file ,(bs:pointer void))
          `(delete_file_async ,(bs:pointer void))
          `(delete_file_finish ,(bs:pointer void))
          `(trash ,(bs:pointer void))
          `(trash_async ,(bs:pointer void))
          `(trash_finish ,(bs:pointer void))
          `(make_directory ,(bs:pointer void))
          `(make_directory_async ,(bs:pointer void))
          `(make_directory_finish ,(bs:pointer void))
          `(make_symbolic_link ,(bs:pointer void))
          `(_make_symbolic_link_async ,(bs:pointer void))
          `(_make_symbolic_link_finish ,(bs:pointer void))
          `(copy ,(bs:pointer void))
          `(copy_async ,(bs:pointer void))
          `(copy_finish ,(bs:pointer void))
          `(move ,(bs:pointer void))
          `(_move_async ,(bs:pointer void))
          `(_move_finish ,(bs:pointer void))
          `(mount_mountable ,(bs:pointer void))
          `(mount_mountable_finish ,(bs:pointer void))
          `(unmount_mountable ,(bs:pointer void))
          `(unmount_mountable_finish ,(bs:pointer void))
          `(eject_mountable ,(bs:pointer void))
          `(eject_mountable_finish ,(bs:pointer void))
          `(mount_enclosing_volume ,(bs:pointer void))
          `(mount_enclosing_volume_finish
             ,(bs:pointer void))
          `(monitor_dir ,(bs:pointer void))
          `(monitor_file ,(bs:pointer void))
          `(open_readwrite ,(bs:pointer void))
          `(open_readwrite_async ,(bs:pointer void))
          `(open_readwrite_finish ,(bs:pointer void))
          `(create_readwrite ,(bs:pointer void))
          `(create_readwrite_async ,(bs:pointer void))
          `(create_readwrite_finish ,(bs:pointer void))
          `(replace_readwrite ,(bs:pointer void))
          `(replace_readwrite_async ,(bs:pointer void))
          `(replace_readwrite_finish ,(bs:pointer void))
          `(start_mountable ,(bs:pointer void))
          `(start_mountable_finish ,(bs:pointer void))
          `(stop_mountable ,(bs:pointer void))
          `(stop_mountable_finish ,(bs:pointer void))
          `(supports_thread_contexts ,int)
          `(unmount_mountable_with_operation
             ,(bs:pointer void))
          `(unmount_mountable_with_operation_finish
             ,(bs:pointer void))
          `(eject_mountable_with_operation
             ,(bs:pointer void))
          `(eject_mountable_with_operation_finish
             ,(bs:pointer void))
          `(poll_mountable ,(bs:pointer void))
          `(poll_mountable_finish ,(bs:pointer void))
          `(measure_disk_usage ,(bs:pointer void))
          `(measure_disk_usage_async ,(bs:pointer void))
          `(measure_disk_usage_finish ,(bs:pointer void)))))
(export struct-_GFileIface-desc)
(define-fh-compound-type/p struct-_GFileIface struct-_GFileIface-desc)
(set! GFileIface-desc struct-_GFileIface-desc)
(define-fh-compound-type GFileIface GFileIface-desc)

;; extern GType g_file_get_type(void);
(define ~g_file_get_type #f)
(define (g_file_get_type)
  (unless
    ~g_file_get_type
    (set! ~g_file_get_type
      (fh-link-proc
        "g_file_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_get_type)))
(export g_file_get_type)

;; extern GFile *g_file_new_for_path(const char *path);
(define ~g_file_new_for_path #f)
(define (g_file_new_for_path path)
  (unless
    ~g_file_new_for_path
    (set! ~g_file_new_for_path
      (fh-link-proc "g_file_new_for_path" '* (list '*))))
  (let ((~path (unwrap~pointer path)))
    (wrap-GFile* (~g_file_new_for_path ~path))))
(export g_file_new_for_path)

;; extern GFile *g_file_new_for_uri(const char *uri);
(define ~g_file_new_for_uri #f)
(define (g_file_new_for_uri uri)
  (unless
    ~g_file_new_for_uri
    (set! ~g_file_new_for_uri
      (fh-link-proc "g_file_new_for_uri" '* (list '*))))
  (let ((~uri (unwrap~pointer uri)))
    (wrap-GFile* (~g_file_new_for_uri ~uri))))
(export g_file_new_for_uri)

;; extern GFile *g_file_new_for_commandline_arg(const char *arg);
(define ~g_file_new_for_commandline_arg #f)
(define (g_file_new_for_commandline_arg arg)
  (unless
    ~g_file_new_for_commandline_arg
    (set! ~g_file_new_for_commandline_arg
      (fh-link-proc
        "g_file_new_for_commandline_arg"
        '*
        (list '*))))
  (let ((~arg (unwrap~pointer arg)))
    (wrap-GFile*
      (~g_file_new_for_commandline_arg ~arg))))
(export g_file_new_for_commandline_arg)

;; extern GFile *g_file_new_for_commandline_arg_and_cwd(const gchar *arg, const
;;      gchar *cwd);
(define ~g_file_new_for_commandline_arg_and_cwd #f)
(define (g_file_new_for_commandline_arg_and_cwd arg cwd)
  (unless
    ~g_file_new_for_commandline_arg_and_cwd
    (set! ~g_file_new_for_commandline_arg_and_cwd
      (fh-link-proc
        "g_file_new_for_commandline_arg_and_cwd"
        '*
        (list '* '*))))
  (let ((~arg (unwrap~pointer arg))
        (~cwd (unwrap~pointer cwd)))
    (wrap-GFile*
      (~g_file_new_for_commandline_arg_and_cwd
        ~arg
        ~cwd))))
(export g_file_new_for_commandline_arg_and_cwd)

;; extern GFile *g_file_new_tmp(const char *tmpl, GFileIOStream **iostream, 
;;     GError **error);
(define ~g_file_new_tmp #f)
(define (g_file_new_tmp tmpl iostream error)
  (unless
    ~g_file_new_tmp
    (set! ~g_file_new_tmp
      (fh-link-proc
        "g_file_new_tmp"
        '*
        (list '* '* '*))))
  (let ((~tmpl (unwrap~pointer tmpl))
        (~iostream (unwrap~pointer iostream))
        (~error (unwrap~pointer error)))
    (wrap-GFile*
      (~g_file_new_tmp ~tmpl ~iostream ~error))))
(export g_file_new_tmp)

;; extern GFile *g_file_parse_name(const char *parse_name);
(define ~g_file_parse_name #f)
(define (g_file_parse_name parse_name)
  (unless
    ~g_file_parse_name
    (set! ~g_file_parse_name
      (fh-link-proc "g_file_parse_name" '* (list '*))))
  (let ((~parse_name (unwrap~pointer parse_name)))
    (wrap-GFile* (~g_file_parse_name ~parse_name))))
(export g_file_parse_name)

;; extern GFile *g_file_dup(GFile *file);
(define ~g_file_dup #f)
(define (g_file_dup file)
  (unless
    ~g_file_dup
    (set! ~g_file_dup
      (fh-link-proc "g_file_dup" '* (list '*))))
  (let ((~file (unwrap-GFile* file)))
    (wrap-GFile* (~g_file_dup ~file))))
(export g_file_dup)

;; extern guint g_file_hash(gconstpointer file);
(define ~g_file_hash #f)
(define (g_file_hash file)
  (unless
    ~g_file_hash
    (set! ~g_file_hash
      (fh-link-proc
        "g_file_hash"
        ffi:unsigned-int
        (list '*))))
  (let ((~file (unwrap-gconstpointer file)))
    (~g_file_hash ~file)))
(export g_file_hash)

;; extern gboolean g_file_equal(GFile *file1, GFile *file2);
(define ~g_file_equal #f)
(define (g_file_equal file1 file2)
  (unless
    ~g_file_equal
    (set! ~g_file_equal
      (fh-link-proc
        "g_file_equal"
        ffi:int
        (list '* '*))))
  (let ((~file1 (unwrap-GFile* file1))
        (~file2 (unwrap-GFile* file2)))
    (~g_file_equal ~file1 ~file2)))
(export g_file_equal)

;; extern char *g_file_get_basename(GFile *file);
(define ~g_file_get_basename #f)
(define (g_file_get_basename file)
  (unless
    ~g_file_get_basename
    (set! ~g_file_get_basename
      (fh-link-proc "g_file_get_basename" '* (list '*))))
  (let ((~file (unwrap-GFile* file)))
    (~g_file_get_basename ~file)))
(export g_file_get_basename)

;; extern char *g_file_get_path(GFile *file);
(define ~g_file_get_path #f)
(define (g_file_get_path file)
  (unless
    ~g_file_get_path
    (set! ~g_file_get_path
      (fh-link-proc "g_file_get_path" '* (list '*))))
  (let ((~file (unwrap-GFile* file)))
    (~g_file_get_path ~file)))
(export g_file_get_path)

;; extern char *g_file_get_uri(GFile *file);
(define ~g_file_get_uri #f)
(define (g_file_get_uri file)
  (unless
    ~g_file_get_uri
    (set! ~g_file_get_uri
      (fh-link-proc "g_file_get_uri" '* (list '*))))
  (let ((~file (unwrap-GFile* file)))
    (~g_file_get_uri ~file)))
(export g_file_get_uri)

;; extern char *g_file_get_parse_name(GFile *file);
(define ~g_file_get_parse_name #f)
(define (g_file_get_parse_name file)
  (unless
    ~g_file_get_parse_name
    (set! ~g_file_get_parse_name
      (fh-link-proc
        "g_file_get_parse_name"
        '*
        (list '*))))
  (let ((~file (unwrap-GFile* file)))
    (~g_file_get_parse_name ~file)))
(export g_file_get_parse_name)

;; extern GFile *g_file_get_parent(GFile *file);
(define ~g_file_get_parent #f)
(define (g_file_get_parent file)
  (unless
    ~g_file_get_parent
    (set! ~g_file_get_parent
      (fh-link-proc "g_file_get_parent" '* (list '*))))
  (let ((~file (unwrap-GFile* file)))
    (wrap-GFile* (~g_file_get_parent ~file))))
(export g_file_get_parent)

;; extern gboolean g_file_has_parent(GFile *file, GFile *parent);
(define ~g_file_has_parent #f)
(define (g_file_has_parent file parent)
  (unless
    ~g_file_has_parent
    (set! ~g_file_has_parent
      (fh-link-proc
        "g_file_has_parent"
        ffi:int
        (list '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~parent (unwrap-GFile* parent)))
    (~g_file_has_parent ~file ~parent)))
(export g_file_has_parent)

;; extern GFile *g_file_get_child(GFile *file, const char *name);
(define ~g_file_get_child #f)
(define (g_file_get_child file name)
  (unless
    ~g_file_get_child
    (set! ~g_file_get_child
      (fh-link-proc "g_file_get_child" '* (list '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~name (unwrap~pointer name)))
    (wrap-GFile* (~g_file_get_child ~file ~name))))
(export g_file_get_child)

;; extern GFile *g_file_get_child_for_display_name(GFile *file, const char *
;;     display_name, GError **error);
(define ~g_file_get_child_for_display_name #f)
(define (g_file_get_child_for_display_name
         file
         display_name
         error)
  (unless
    ~g_file_get_child_for_display_name
    (set! ~g_file_get_child_for_display_name
      (fh-link-proc
        "g_file_get_child_for_display_name"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~display_name (unwrap~pointer display_name))
        (~error (unwrap~pointer error)))
    (wrap-GFile*
      (~g_file_get_child_for_display_name
        ~file
        ~display_name
        ~error))))
(export g_file_get_child_for_display_name)

;; extern gboolean g_file_has_prefix(GFile *file, GFile *prefix);
(define ~g_file_has_prefix #f)
(define (g_file_has_prefix file prefix)
  (unless
    ~g_file_has_prefix
    (set! ~g_file_has_prefix
      (fh-link-proc
        "g_file_has_prefix"
        ffi:int
        (list '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~prefix (unwrap-GFile* prefix)))
    (~g_file_has_prefix ~file ~prefix)))
(export g_file_has_prefix)

;; extern char *g_file_get_relative_path(GFile *parent, GFile *descendant);
(define ~g_file_get_relative_path #f)
(define (g_file_get_relative_path parent descendant)
  (unless
    ~g_file_get_relative_path
    (set! ~g_file_get_relative_path
      (fh-link-proc
        "g_file_get_relative_path"
        '*
        (list '* '*))))
  (let ((~parent (unwrap-GFile* parent))
        (~descendant (unwrap-GFile* descendant)))
    (~g_file_get_relative_path ~parent ~descendant)))
(export g_file_get_relative_path)

;; extern GFile *g_file_resolve_relative_path(GFile *file, const char *
;;     relative_path);
(define ~g_file_resolve_relative_path #f)
(define (g_file_resolve_relative_path file relative_path)
  (unless
    ~g_file_resolve_relative_path
    (set! ~g_file_resolve_relative_path
      (fh-link-proc
        "g_file_resolve_relative_path"
        '*
        (list '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~relative_path (unwrap~pointer relative_path)))
    (wrap-GFile*
      (~g_file_resolve_relative_path
        ~file
        ~relative_path))))
(export g_file_resolve_relative_path)

;; extern gboolean g_file_is_native(GFile *file);
(define ~g_file_is_native #f)
(define (g_file_is_native file)
  (unless
    ~g_file_is_native
    (set! ~g_file_is_native
      (fh-link-proc
        "g_file_is_native"
        ffi:int
        (list '*))))
  (let ((~file (unwrap-GFile* file)))
    (~g_file_is_native ~file)))
(export g_file_is_native)

;; extern gboolean g_file_has_uri_scheme(GFile *file, const char *uri_scheme);
(define ~g_file_has_uri_scheme #f)
(define (g_file_has_uri_scheme file uri_scheme)
  (unless
    ~g_file_has_uri_scheme
    (set! ~g_file_has_uri_scheme
      (fh-link-proc
        "g_file_has_uri_scheme"
        ffi:int
        (list '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~uri_scheme (unwrap~pointer uri_scheme)))
    (~g_file_has_uri_scheme ~file ~uri_scheme)))
(export g_file_has_uri_scheme)

;; extern char *g_file_get_uri_scheme(GFile *file);
(define ~g_file_get_uri_scheme #f)
(define (g_file_get_uri_scheme file)
  (unless
    ~g_file_get_uri_scheme
    (set! ~g_file_get_uri_scheme
      (fh-link-proc
        "g_file_get_uri_scheme"
        '*
        (list '*))))
  (let ((~file (unwrap-GFile* file)))
    (~g_file_get_uri_scheme ~file)))
(export g_file_get_uri_scheme)

;; extern GFileInputStream *g_file_read(GFile *file, GCancellable *cancellable
;;     , GError **error);
(define ~g_file_read #f)
(define (g_file_read file cancellable error)
  (unless
    ~g_file_read
    (set! ~g_file_read
      (fh-link-proc "g_file_read" '* (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileInputStream*
      (~g_file_read ~file ~cancellable ~error))))
(export g_file_read)

;; extern void g_file_read_async(GFile *file, int io_priority, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_read_async #f)
(define (g_file_read_async
         file
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_read_async
    (set! ~g_file_read_async
      (fh-link-proc
        "g_file_read_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_read_async
      ~file
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_read_async)

;; extern GFileInputStream *g_file_read_finish(GFile *file, GAsyncResult *res, 
;;     GError **error);
(define ~g_file_read_finish #f)
(define (g_file_read_finish file res error)
  (unless
    ~g_file_read_finish
    (set! ~g_file_read_finish
      (fh-link-proc
        "g_file_read_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GFileInputStream*
      (~g_file_read_finish ~file ~res ~error))))
(export g_file_read_finish)

;; extern GFileOutputStream *g_file_append_to(GFile *file, GFileCreateFlags 
;;     flags, GCancellable *cancellable, GError **error);
(define ~g_file_append_to #f)
(define (g_file_append_to file flags cancellable error)
  (unless
    ~g_file_append_to
    (set! ~g_file_append_to
      (fh-link-proc
        "g_file_append_to"
        '*
        (list '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileOutputStream*
      (~g_file_append_to
        ~file
        ~flags
        ~cancellable
        ~error))))
(export g_file_append_to)

;; extern GFileOutputStream *g_file_create(GFile *file, GFileCreateFlags flags
;;     , GCancellable *cancellable, GError **error);
(define ~g_file_create #f)
(define (g_file_create file flags cancellable error)
  (unless
    ~g_file_create
    (set! ~g_file_create
      (fh-link-proc
        "g_file_create"
        '*
        (list '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileOutputStream*
      (~g_file_create ~file ~flags ~cancellable ~error))))
(export g_file_create)

;; extern GFileOutputStream *g_file_replace(GFile *file, const char *etag, 
;;     gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable
;;     , GError **error);
(define ~g_file_replace #f)
(define (g_file_replace
         file
         etag
         make_backup
         flags
         cancellable
         error)
  (unless
    ~g_file_replace
    (set! ~g_file_replace
      (fh-link-proc
        "g_file_replace"
        '*
        (list '* '* ffi:int ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~etag (unwrap~pointer etag))
        (~make_backup (unwrap~fixed make_backup))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileOutputStream*
      (~g_file_replace
        ~file
        ~etag
        ~make_backup
        ~flags
        ~cancellable
        ~error))))
(export g_file_replace)

;; extern void g_file_append_to_async(GFile *file, GFileCreateFlags flags, int 
;;     io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_file_append_to_async #f)
(define (g_file_append_to_async
         file
         flags
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_append_to_async
    (set! ~g_file_append_to_async
      (fh-link-proc
        "g_file_append_to_async"
        ffi:void
        (list '* ffi:int ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_append_to_async
      ~file
      ~flags
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_append_to_async)

;; extern GFileOutputStream *g_file_append_to_finish(GFile *file, GAsyncResult 
;;     *res, GError **error);
(define ~g_file_append_to_finish #f)
(define (g_file_append_to_finish file res error)
  (unless
    ~g_file_append_to_finish
    (set! ~g_file_append_to_finish
      (fh-link-proc
        "g_file_append_to_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GFileOutputStream*
      (~g_file_append_to_finish ~file ~res ~error))))
(export g_file_append_to_finish)

;; extern void g_file_create_async(GFile *file, GFileCreateFlags flags, int 
;;     io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_file_create_async #f)
(define (g_file_create_async
         file
         flags
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_create_async
    (set! ~g_file_create_async
      (fh-link-proc
        "g_file_create_async"
        ffi:void
        (list '* ffi:int ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_create_async
      ~file
      ~flags
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_create_async)

;; extern GFileOutputStream *g_file_create_finish(GFile *file, GAsyncResult *
;;     res, GError **error);
(define ~g_file_create_finish #f)
(define (g_file_create_finish file res error)
  (unless
    ~g_file_create_finish
    (set! ~g_file_create_finish
      (fh-link-proc
        "g_file_create_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GFileOutputStream*
      (~g_file_create_finish ~file ~res ~error))))
(export g_file_create_finish)

;; extern void g_file_replace_async(GFile *file, const char *etag, gboolean 
;;     make_backup, GFileCreateFlags flags, int io_priority, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_replace_async #f)
(define (g_file_replace_async
         file
         etag
         make_backup
         flags
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_replace_async
    (set! ~g_file_replace_async
      (fh-link-proc
        "g_file_replace_async"
        ffi:void
        (list '* '* ffi:int ffi:int ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~etag (unwrap~pointer etag))
        (~make_backup (unwrap~fixed make_backup))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_replace_async
      ~file
      ~etag
      ~make_backup
      ~flags
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_replace_async)

;; extern GFileOutputStream *g_file_replace_finish(GFile *file, GAsyncResult *
;;     res, GError **error);
(define ~g_file_replace_finish #f)
(define (g_file_replace_finish file res error)
  (unless
    ~g_file_replace_finish
    (set! ~g_file_replace_finish
      (fh-link-proc
        "g_file_replace_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GFileOutputStream*
      (~g_file_replace_finish ~file ~res ~error))))
(export g_file_replace_finish)

;; extern GFileIOStream *g_file_open_readwrite(GFile *file, GCancellable *
;;     cancellable, GError **error);
(define ~g_file_open_readwrite #f)
(define (g_file_open_readwrite file cancellable error)
  (unless
    ~g_file_open_readwrite
    (set! ~g_file_open_readwrite
      (fh-link-proc
        "g_file_open_readwrite"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileIOStream*
      (~g_file_open_readwrite
        ~file
        ~cancellable
        ~error))))
(export g_file_open_readwrite)

;; extern void g_file_open_readwrite_async(GFile *file, int io_priority, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_file_open_readwrite_async #f)
(define (g_file_open_readwrite_async
         file
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_open_readwrite_async
    (set! ~g_file_open_readwrite_async
      (fh-link-proc
        "g_file_open_readwrite_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_open_readwrite_async
      ~file
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_open_readwrite_async)

;; extern GFileIOStream *g_file_open_readwrite_finish(GFile *file, GAsyncResult
;;      *res, GError **error);
(define ~g_file_open_readwrite_finish #f)
(define (g_file_open_readwrite_finish file res error)
  (unless
    ~g_file_open_readwrite_finish
    (set! ~g_file_open_readwrite_finish
      (fh-link-proc
        "g_file_open_readwrite_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GFileIOStream*
      (~g_file_open_readwrite_finish ~file ~res ~error))))
(export g_file_open_readwrite_finish)

;; extern GFileIOStream *g_file_create_readwrite(GFile *file, GFileCreateFlags 
;;     flags, GCancellable *cancellable, GError **error);
(define ~g_file_create_readwrite #f)
(define (g_file_create_readwrite
         file
         flags
         cancellable
         error)
  (unless
    ~g_file_create_readwrite
    (set! ~g_file_create_readwrite
      (fh-link-proc
        "g_file_create_readwrite"
        '*
        (list '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileIOStream*
      (~g_file_create_readwrite
        ~file
        ~flags
        ~cancellable
        ~error))))
(export g_file_create_readwrite)

;; extern void g_file_create_readwrite_async(GFile *file, GFileCreateFlags 
;;     flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback 
;;     callback, gpointer user_data);
(define ~g_file_create_readwrite_async #f)
(define (g_file_create_readwrite_async
         file
         flags
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_create_readwrite_async
    (set! ~g_file_create_readwrite_async
      (fh-link-proc
        "g_file_create_readwrite_async"
        ffi:void
        (list '* ffi:int ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_create_readwrite_async
      ~file
      ~flags
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_create_readwrite_async)

;; extern GFileIOStream *g_file_create_readwrite_finish(GFile *file, 
;;     GAsyncResult *res, GError **error);
(define ~g_file_create_readwrite_finish #f)
(define (g_file_create_readwrite_finish file res error)
  (unless
    ~g_file_create_readwrite_finish
    (set! ~g_file_create_readwrite_finish
      (fh-link-proc
        "g_file_create_readwrite_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GFileIOStream*
      (~g_file_create_readwrite_finish
        ~file
        ~res
        ~error))))
(export g_file_create_readwrite_finish)

;; extern GFileIOStream *g_file_replace_readwrite(GFile *file, const char *etag
;;     , gboolean make_backup, GFileCreateFlags flags, GCancellable *
;;     cancellable, GError **error);
(define ~g_file_replace_readwrite #f)
(define (g_file_replace_readwrite
         file
         etag
         make_backup
         flags
         cancellable
         error)
  (unless
    ~g_file_replace_readwrite
    (set! ~g_file_replace_readwrite
      (fh-link-proc
        "g_file_replace_readwrite"
        '*
        (list '* '* ffi:int ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~etag (unwrap~pointer etag))
        (~make_backup (unwrap~fixed make_backup))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileIOStream*
      (~g_file_replace_readwrite
        ~file
        ~etag
        ~make_backup
        ~flags
        ~cancellable
        ~error))))
(export g_file_replace_readwrite)

;; extern void g_file_replace_readwrite_async(GFile *file, const char *etag, 
;;     gboolean make_backup, GFileCreateFlags flags, int io_priority, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_file_replace_readwrite_async #f)
(define (g_file_replace_readwrite_async
         file
         etag
         make_backup
         flags
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_replace_readwrite_async
    (set! ~g_file_replace_readwrite_async
      (fh-link-proc
        "g_file_replace_readwrite_async"
        ffi:void
        (list '* '* ffi:int ffi:int ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~etag (unwrap~pointer etag))
        (~make_backup (unwrap~fixed make_backup))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_replace_readwrite_async
      ~file
      ~etag
      ~make_backup
      ~flags
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_replace_readwrite_async)

;; extern GFileIOStream *g_file_replace_readwrite_finish(GFile *file, 
;;     GAsyncResult *res, GError **error);
(define ~g_file_replace_readwrite_finish #f)
(define (g_file_replace_readwrite_finish file res error)
  (unless
    ~g_file_replace_readwrite_finish
    (set! ~g_file_replace_readwrite_finish
      (fh-link-proc
        "g_file_replace_readwrite_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GFileIOStream*
      (~g_file_replace_readwrite_finish
        ~file
        ~res
        ~error))))
(export g_file_replace_readwrite_finish)

;; extern gboolean g_file_query_exists(GFile *file, GCancellable *cancellable)
;;     ;
(define ~g_file_query_exists #f)
(define (g_file_query_exists file cancellable)
  (unless
    ~g_file_query_exists
    (set! ~g_file_query_exists
      (fh-link-proc
        "g_file_query_exists"
        ffi:int
        (list '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable)))
    (~g_file_query_exists ~file ~cancellable)))
(export g_file_query_exists)

;; extern GFileType g_file_query_file_type(GFile *file, GFileQueryInfoFlags 
;;     flags, GCancellable *cancellable);
(define ~g_file_query_file_type #f)
(define (g_file_query_file_type file flags cancellable)
  (unless
    ~g_file_query_file_type
    (set! ~g_file_query_file_type
      (fh-link-proc
        "g_file_query_file_type"
        ffi:int
        (list '* ffi:int '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable)))
    (~g_file_query_file_type
      ~file
      ~flags
      ~cancellable)))
(export g_file_query_file_type)

;; extern GFileInfo *g_file_query_info(GFile *file, const char *attributes, 
;;     GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
(define ~g_file_query_info #f)
(define (g_file_query_info
         file
         attributes
         flags
         cancellable
         error)
  (unless
    ~g_file_query_info
    (set! ~g_file_query_info
      (fh-link-proc
        "g_file_query_info"
        '*
        (list '* '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attributes (unwrap~pointer attributes))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileInfo*
      (~g_file_query_info
        ~file
        ~attributes
        ~flags
        ~cancellable
        ~error))))
(export g_file_query_info)

;; extern void g_file_query_info_async(GFile *file, const char *attributes, 
;;     GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_query_info_async #f)
(define (g_file_query_info_async
         file
         attributes
         flags
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_query_info_async
    (set! ~g_file_query_info_async
      (fh-link-proc
        "g_file_query_info_async"
        ffi:void
        (list '* '* ffi:int ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attributes (unwrap~pointer attributes))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_query_info_async
      ~file
      ~attributes
      ~flags
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_query_info_async)

;; extern GFileInfo *g_file_query_info_finish(GFile *file, GAsyncResult *res, 
;;     GError **error);
(define ~g_file_query_info_finish #f)
(define (g_file_query_info_finish file res error)
  (unless
    ~g_file_query_info_finish
    (set! ~g_file_query_info_finish
      (fh-link-proc
        "g_file_query_info_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GFileInfo*
      (~g_file_query_info_finish ~file ~res ~error))))
(export g_file_query_info_finish)

;; extern GFileInfo *g_file_query_filesystem_info(GFile *file, const char *
;;     attributes, GCancellable *cancellable, GError **error);
(define ~g_file_query_filesystem_info #f)
(define (g_file_query_filesystem_info
         file
         attributes
         cancellable
         error)
  (unless
    ~g_file_query_filesystem_info
    (set! ~g_file_query_filesystem_info
      (fh-link-proc
        "g_file_query_filesystem_info"
        '*
        (list '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attributes (unwrap~pointer attributes))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileInfo*
      (~g_file_query_filesystem_info
        ~file
        ~attributes
        ~cancellable
        ~error))))
(export g_file_query_filesystem_info)

;; extern void g_file_query_filesystem_info_async(GFile *file, const char *
;;     attributes, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_query_filesystem_info_async #f)
(define (g_file_query_filesystem_info_async
         file
         attributes
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_query_filesystem_info_async
    (set! ~g_file_query_filesystem_info_async
      (fh-link-proc
        "g_file_query_filesystem_info_async"
        ffi:void
        (list '* '* ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attributes (unwrap~pointer attributes))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_query_filesystem_info_async
      ~file
      ~attributes
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_query_filesystem_info_async)

;; extern GFileInfo *g_file_query_filesystem_info_finish(GFile *file, 
;;     GAsyncResult *res, GError **error);
(define ~g_file_query_filesystem_info_finish #f)
(define (g_file_query_filesystem_info_finish
         file
         res
         error)
  (unless
    ~g_file_query_filesystem_info_finish
    (set! ~g_file_query_filesystem_info_finish
      (fh-link-proc
        "g_file_query_filesystem_info_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GFileInfo*
      (~g_file_query_filesystem_info_finish
        ~file
        ~res
        ~error))))
(export g_file_query_filesystem_info_finish)

;; extern GMount *g_file_find_enclosing_mount(GFile *file, GCancellable *
;;     cancellable, GError **error);
(define ~g_file_find_enclosing_mount #f)
(define (g_file_find_enclosing_mount
         file
         cancellable
         error)
  (unless
    ~g_file_find_enclosing_mount
    (set! ~g_file_find_enclosing_mount
      (fh-link-proc
        "g_file_find_enclosing_mount"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GMount*
      (~g_file_find_enclosing_mount
        ~file
        ~cancellable
        ~error))))
(export g_file_find_enclosing_mount)

;; extern void g_file_find_enclosing_mount_async(GFile *file, int io_priority, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_file_find_enclosing_mount_async #f)
(define (g_file_find_enclosing_mount_async
         file
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_find_enclosing_mount_async
    (set! ~g_file_find_enclosing_mount_async
      (fh-link-proc
        "g_file_find_enclosing_mount_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_find_enclosing_mount_async
      ~file
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_find_enclosing_mount_async)

;; extern GMount *g_file_find_enclosing_mount_finish(GFile *file, GAsyncResult 
;;     *res, GError **error);
(define ~g_file_find_enclosing_mount_finish #f)
(define (g_file_find_enclosing_mount_finish
         file
         res
         error)
  (unless
    ~g_file_find_enclosing_mount_finish
    (set! ~g_file_find_enclosing_mount_finish
      (fh-link-proc
        "g_file_find_enclosing_mount_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GMount*
      (~g_file_find_enclosing_mount_finish
        ~file
        ~res
        ~error))))
(export g_file_find_enclosing_mount_finish)

;; extern GFileEnumerator *g_file_enumerate_children(GFile *file, const char *
;;     attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError
;;      **error);
(define ~g_file_enumerate_children #f)
(define (g_file_enumerate_children
         file
         attributes
         flags
         cancellable
         error)
  (unless
    ~g_file_enumerate_children
    (set! ~g_file_enumerate_children
      (fh-link-proc
        "g_file_enumerate_children"
        '*
        (list '* '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attributes (unwrap~pointer attributes))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileEnumerator*
      (~g_file_enumerate_children
        ~file
        ~attributes
        ~flags
        ~cancellable
        ~error))))
(export g_file_enumerate_children)

;; extern void g_file_enumerate_children_async(GFile *file, const char *
;;     attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_enumerate_children_async #f)
(define (g_file_enumerate_children_async
         file
         attributes
         flags
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_enumerate_children_async
    (set! ~g_file_enumerate_children_async
      (fh-link-proc
        "g_file_enumerate_children_async"
        ffi:void
        (list '* '* ffi:int ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attributes (unwrap~pointer attributes))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_enumerate_children_async
      ~file
      ~attributes
      ~flags
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_enumerate_children_async)

;; extern GFileEnumerator *g_file_enumerate_children_finish(GFile *file, 
;;     GAsyncResult *res, GError **error);
(define ~g_file_enumerate_children_finish #f)
(define (g_file_enumerate_children_finish file res error)
  (unless
    ~g_file_enumerate_children_finish
    (set! ~g_file_enumerate_children_finish
      (fh-link-proc
        "g_file_enumerate_children_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GFileEnumerator*
      (~g_file_enumerate_children_finish
        ~file
        ~res
        ~error))))
(export g_file_enumerate_children_finish)

;; extern GFile *g_file_set_display_name(GFile *file, const char *display_name
;;     , GCancellable *cancellable, GError **error);
(define ~g_file_set_display_name #f)
(define (g_file_set_display_name
         file
         display_name
         cancellable
         error)
  (unless
    ~g_file_set_display_name
    (set! ~g_file_set_display_name
      (fh-link-proc
        "g_file_set_display_name"
        '*
        (list '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~display_name (unwrap~pointer display_name))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFile*
      (~g_file_set_display_name
        ~file
        ~display_name
        ~cancellable
        ~error))))
(export g_file_set_display_name)

;; extern void g_file_set_display_name_async(GFile *file, const char *
;;     display_name, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_set_display_name_async #f)
(define (g_file_set_display_name_async
         file
         display_name
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_set_display_name_async
    (set! ~g_file_set_display_name_async
      (fh-link-proc
        "g_file_set_display_name_async"
        ffi:void
        (list '* '* ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~display_name (unwrap~pointer display_name))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_set_display_name_async
      ~file
      ~display_name
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_set_display_name_async)

;; extern GFile *g_file_set_display_name_finish(GFile *file, GAsyncResult *res
;;     , GError **error);
(define ~g_file_set_display_name_finish #f)
(define (g_file_set_display_name_finish file res error)
  (unless
    ~g_file_set_display_name_finish
    (set! ~g_file_set_display_name_finish
      (fh-link-proc
        "g_file_set_display_name_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GFile*
      (~g_file_set_display_name_finish
        ~file
        ~res
        ~error))))
(export g_file_set_display_name_finish)

;; extern gboolean g_file_delete(GFile *file, GCancellable *cancellable, GError
;;      **error);
(define ~g_file_delete #f)
(define (g_file_delete file cancellable error)
  (unless
    ~g_file_delete
    (set! ~g_file_delete
      (fh-link-proc
        "g_file_delete"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_delete ~file ~cancellable ~error)))
(export g_file_delete)

;; extern void g_file_delete_async(GFile *file, int io_priority, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_delete_async #f)
(define (g_file_delete_async
         file
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_delete_async
    (set! ~g_file_delete_async
      (fh-link-proc
        "g_file_delete_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_delete_async
      ~file
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_delete_async)

;; extern gboolean g_file_delete_finish(GFile *file, GAsyncResult *result, 
;;     GError **error);
(define ~g_file_delete_finish #f)
(define (g_file_delete_finish file result error)
  (unless
    ~g_file_delete_finish
    (set! ~g_file_delete_finish
      (fh-link-proc
        "g_file_delete_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_delete_finish ~file ~result ~error)))
(export g_file_delete_finish)

;; extern gboolean g_file_trash(GFile *file, GCancellable *cancellable, GError 
;;     **error);
(define ~g_file_trash #f)
(define (g_file_trash file cancellable error)
  (unless
    ~g_file_trash
    (set! ~g_file_trash
      (fh-link-proc
        "g_file_trash"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_trash ~file ~cancellable ~error)))
(export g_file_trash)

;; extern void g_file_trash_async(GFile *file, int io_priority, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_trash_async #f)
(define (g_file_trash_async
         file
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_trash_async
    (set! ~g_file_trash_async
      (fh-link-proc
        "g_file_trash_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_trash_async
      ~file
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_trash_async)

;; extern gboolean g_file_trash_finish(GFile *file, GAsyncResult *result, 
;;     GError **error);
(define ~g_file_trash_finish #f)
(define (g_file_trash_finish file result error)
  (unless
    ~g_file_trash_finish
    (set! ~g_file_trash_finish
      (fh-link-proc
        "g_file_trash_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_trash_finish ~file ~result ~error)))
(export g_file_trash_finish)

;; extern gboolean g_file_copy(GFile *source, GFile *destination, 
;;     GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback 
;;     progress_callback, gpointer progress_callback_data, GError **error);
(define ~g_file_copy #f)
(define (g_file_copy
         source
         destination
         flags
         cancellable
         progress_callback
         progress_callback_data
         error)
  (unless
    ~g_file_copy
    (set! ~g_file_copy
      (fh-link-proc
        "g_file_copy"
        ffi:int
        (list '* '* ffi:int '* '* '* '*))))
  (let ((~source (unwrap-GFile* source))
        (~destination (unwrap-GFile* destination))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~progress_callback
          ((make-ftn-arg-unwrapper
             ffi:void
             (list ffi:long ffi:long '*))
           progress_callback))
        (~progress_callback_data
          (unwrap-gpointer progress_callback_data))
        (~error (unwrap~pointer error)))
    (~g_file_copy
      ~source
      ~destination
      ~flags
      ~cancellable
      ~progress_callback
      ~progress_callback_data
      ~error)))
(export g_file_copy)

;; extern void g_file_copy_async(GFile *source, GFile *destination, 
;;     GFileCopyFlags flags, int io_priority, GCancellable *cancellable, 
;;     GFileProgressCallback progress_callback, gpointer progress_callback_data
;;     , GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_copy_async #f)
(define (g_file_copy_async
         source
         destination
         flags
         io_priority
         cancellable
         progress_callback
         progress_callback_data
         callback
         user_data)
  (unless
    ~g_file_copy_async
    (set! ~g_file_copy_async
      (fh-link-proc
        "g_file_copy_async"
        ffi:void
        (list '* '* ffi:int ffi:int '* '* '* '* '*))))
  (let ((~source (unwrap-GFile* source))
        (~destination (unwrap-GFile* destination))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~progress_callback
          ((make-ftn-arg-unwrapper
             ffi:void
             (list ffi:long ffi:long '*))
           progress_callback))
        (~progress_callback_data
          (unwrap-gpointer progress_callback_data))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_copy_async
      ~source
      ~destination
      ~flags
      ~io_priority
      ~cancellable
      ~progress_callback
      ~progress_callback_data
      ~callback
      ~user_data)))
(export g_file_copy_async)

;; extern gboolean g_file_copy_finish(GFile *file, GAsyncResult *res, GError **
;;     error);
(define ~g_file_copy_finish #f)
(define (g_file_copy_finish file res error)
  (unless
    ~g_file_copy_finish
    (set! ~g_file_copy_finish
      (fh-link-proc
        "g_file_copy_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (~g_file_copy_finish ~file ~res ~error)))
(export g_file_copy_finish)

;; extern gboolean g_file_move(GFile *source, GFile *destination, 
;;     GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback 
;;     progress_callback, gpointer progress_callback_data, GError **error);
(define ~g_file_move #f)
(define (g_file_move
         source
         destination
         flags
         cancellable
         progress_callback
         progress_callback_data
         error)
  (unless
    ~g_file_move
    (set! ~g_file_move
      (fh-link-proc
        "g_file_move"
        ffi:int
        (list '* '* ffi:int '* '* '* '*))))
  (let ((~source (unwrap-GFile* source))
        (~destination (unwrap-GFile* destination))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~progress_callback
          ((make-ftn-arg-unwrapper
             ffi:void
             (list ffi:long ffi:long '*))
           progress_callback))
        (~progress_callback_data
          (unwrap-gpointer progress_callback_data))
        (~error (unwrap~pointer error)))
    (~g_file_move
      ~source
      ~destination
      ~flags
      ~cancellable
      ~progress_callback
      ~progress_callback_data
      ~error)))
(export g_file_move)

;; extern gboolean g_file_make_directory(GFile *file, GCancellable *cancellable
;;     , GError **error);
(define ~g_file_make_directory #f)
(define (g_file_make_directory file cancellable error)
  (unless
    ~g_file_make_directory
    (set! ~g_file_make_directory
      (fh-link-proc
        "g_file_make_directory"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_make_directory
      ~file
      ~cancellable
      ~error)))
(export g_file_make_directory)

;; extern void g_file_make_directory_async(GFile *file, int io_priority, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_file_make_directory_async #f)
(define (g_file_make_directory_async
         file
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_make_directory_async
    (set! ~g_file_make_directory_async
      (fh-link-proc
        "g_file_make_directory_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_make_directory_async
      ~file
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_make_directory_async)

;; extern gboolean g_file_make_directory_finish(GFile *file, GAsyncResult *
;;     result, GError **error);
(define ~g_file_make_directory_finish #f)
(define (g_file_make_directory_finish file result error)
  (unless
    ~g_file_make_directory_finish
    (set! ~g_file_make_directory_finish
      (fh-link-proc
        "g_file_make_directory_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_make_directory_finish
      ~file
      ~result
      ~error)))
(export g_file_make_directory_finish)

;; extern gboolean g_file_make_directory_with_parents(GFile *file, GCancellable
;;      *cancellable, GError **error);
(define ~g_file_make_directory_with_parents #f)
(define (g_file_make_directory_with_parents
         file
         cancellable
         error)
  (unless
    ~g_file_make_directory_with_parents
    (set! ~g_file_make_directory_with_parents
      (fh-link-proc
        "g_file_make_directory_with_parents"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_make_directory_with_parents
      ~file
      ~cancellable
      ~error)))
(export g_file_make_directory_with_parents)

;; extern gboolean g_file_make_symbolic_link(GFile *file, const char *
;;     symlink_value, GCancellable *cancellable, GError **error);
(define ~g_file_make_symbolic_link #f)
(define (g_file_make_symbolic_link
         file
         symlink_value
         cancellable
         error)
  (unless
    ~g_file_make_symbolic_link
    (set! ~g_file_make_symbolic_link
      (fh-link-proc
        "g_file_make_symbolic_link"
        ffi:int
        (list '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~symlink_value (unwrap~pointer symlink_value))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_make_symbolic_link
      ~file
      ~symlink_value
      ~cancellable
      ~error)))
(export g_file_make_symbolic_link)

;; extern GFileAttributeInfoList *g_file_query_settable_attributes(GFile *file
;;     , GCancellable *cancellable, GError **error);
(define ~g_file_query_settable_attributes #f)
(define (g_file_query_settable_attributes
         file
         cancellable
         error)
  (unless
    ~g_file_query_settable_attributes
    (set! ~g_file_query_settable_attributes
      (fh-link-proc
        "g_file_query_settable_attributes"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileAttributeInfoList*
      (~g_file_query_settable_attributes
        ~file
        ~cancellable
        ~error))))
(export g_file_query_settable_attributes)

;; extern GFileAttributeInfoList *g_file_query_writable_namespaces(GFile *file
;;     , GCancellable *cancellable, GError **error);
(define ~g_file_query_writable_namespaces #f)
(define (g_file_query_writable_namespaces
         file
         cancellable
         error)
  (unless
    ~g_file_query_writable_namespaces
    (set! ~g_file_query_writable_namespaces
      (fh-link-proc
        "g_file_query_writable_namespaces"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileAttributeInfoList*
      (~g_file_query_writable_namespaces
        ~file
        ~cancellable
        ~error))))
(export g_file_query_writable_namespaces)

;; extern gboolean g_file_set_attribute(GFile *file, const char *attribute, 
;;     GFileAttributeType type, gpointer value_p, GFileQueryInfoFlags flags, 
;;     GCancellable *cancellable, GError **error);
(define ~g_file_set_attribute #f)
(define (g_file_set_attribute
         file
         attribute
         type
         value_p
         flags
         cancellable
         error)
  (unless
    ~g_file_set_attribute
    (set! ~g_file_set_attribute
      (fh-link-proc
        "g_file_set_attribute"
        ffi:int
        (list '* '* ffi:int '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attribute (unwrap~pointer attribute))
        (~type (unwrap~fixed type))
        (~value_p (unwrap-gpointer value_p))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_set_attribute
      ~file
      ~attribute
      ~type
      ~value_p
      ~flags
      ~cancellable
      ~error)))
(export g_file_set_attribute)

;; extern gboolean g_file_set_attributes_from_info(GFile *file, GFileInfo *info
;;     , GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error)
;;     ;
(define ~g_file_set_attributes_from_info #f)
(define (g_file_set_attributes_from_info
         file
         info
         flags
         cancellable
         error)
  (unless
    ~g_file_set_attributes_from_info
    (set! ~g_file_set_attributes_from_info
      (fh-link-proc
        "g_file_set_attributes_from_info"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~info (unwrap-GFileInfo* info))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_set_attributes_from_info
      ~file
      ~info
      ~flags
      ~cancellable
      ~error)))
(export g_file_set_attributes_from_info)

;; extern void g_file_set_attributes_async(GFile *file, GFileInfo *info, 
;;     GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_set_attributes_async #f)
(define (g_file_set_attributes_async
         file
         info
         flags
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_set_attributes_async
    (set! ~g_file_set_attributes_async
      (fh-link-proc
        "g_file_set_attributes_async"
        ffi:void
        (list '* '* ffi:int ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~info (unwrap-GFileInfo* info))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_set_attributes_async
      ~file
      ~info
      ~flags
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_set_attributes_async)

;; extern gboolean g_file_set_attributes_finish(GFile *file, GAsyncResult *
;;     result, GFileInfo **info, GError **error);
(define ~g_file_set_attributes_finish #f)
(define (g_file_set_attributes_finish
         file
         result
         info
         error)
  (unless
    ~g_file_set_attributes_finish
    (set! ~g_file_set_attributes_finish
      (fh-link-proc
        "g_file_set_attributes_finish"
        ffi:int
        (list '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~info (unwrap~pointer info))
        (~error (unwrap~pointer error)))
    (~g_file_set_attributes_finish
      ~file
      ~result
      ~info
      ~error)))
(export g_file_set_attributes_finish)

;; extern gboolean g_file_set_attribute_string(GFile *file, const char *
;;     attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *
;;     cancellable, GError **error);
(define ~g_file_set_attribute_string #f)
(define (g_file_set_attribute_string
         file
         attribute
         value
         flags
         cancellable
         error)
  (unless
    ~g_file_set_attribute_string
    (set! ~g_file_set_attribute_string
      (fh-link-proc
        "g_file_set_attribute_string"
        ffi:int
        (list '* '* '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attribute (unwrap~pointer attribute))
        (~value (unwrap~pointer value))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_set_attribute_string
      ~file
      ~attribute
      ~value
      ~flags
      ~cancellable
      ~error)))
(export g_file_set_attribute_string)

;; extern gboolean g_file_set_attribute_byte_string(GFile *file, const char *
;;     attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *
;;     cancellable, GError **error);
(define ~g_file_set_attribute_byte_string #f)
(define (g_file_set_attribute_byte_string
         file
         attribute
         value
         flags
         cancellable
         error)
  (unless
    ~g_file_set_attribute_byte_string
    (set! ~g_file_set_attribute_byte_string
      (fh-link-proc
        "g_file_set_attribute_byte_string"
        ffi:int
        (list '* '* '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attribute (unwrap~pointer attribute))
        (~value (unwrap~pointer value))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_set_attribute_byte_string
      ~file
      ~attribute
      ~value
      ~flags
      ~cancellable
      ~error)))
(export g_file_set_attribute_byte_string)

;; extern gboolean g_file_set_attribute_uint32(GFile *file, const char *
;;     attribute, guint32 value, GFileQueryInfoFlags flags, GCancellable *
;;     cancellable, GError **error);
(define ~g_file_set_attribute_uint32 #f)
(define (g_file_set_attribute_uint32
         file
         attribute
         value
         flags
         cancellable
         error)
  (unless
    ~g_file_set_attribute_uint32
    (set! ~g_file_set_attribute_uint32
      (fh-link-proc
        "g_file_set_attribute_uint32"
        ffi:int
        (list '* '* ffi:unsigned-int ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attribute (unwrap~pointer attribute))
        (~value (unwrap~fixed value))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_set_attribute_uint32
      ~file
      ~attribute
      ~value
      ~flags
      ~cancellable
      ~error)))
(export g_file_set_attribute_uint32)

;; extern gboolean g_file_set_attribute_int32(GFile *file, const char *
;;     attribute, gint32 value, GFileQueryInfoFlags flags, GCancellable *
;;     cancellable, GError **error);
(define ~g_file_set_attribute_int32 #f)
(define (g_file_set_attribute_int32
         file
         attribute
         value
         flags
         cancellable
         error)
  (unless
    ~g_file_set_attribute_int32
    (set! ~g_file_set_attribute_int32
      (fh-link-proc
        "g_file_set_attribute_int32"
        ffi:int
        (list '* '* ffi:int ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attribute (unwrap~pointer attribute))
        (~value (unwrap~fixed value))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_set_attribute_int32
      ~file
      ~attribute
      ~value
      ~flags
      ~cancellable
      ~error)))
(export g_file_set_attribute_int32)

;; extern gboolean g_file_set_attribute_uint64(GFile *file, const char *
;;     attribute, guint64 value, GFileQueryInfoFlags flags, GCancellable *
;;     cancellable, GError **error);
(define ~g_file_set_attribute_uint64 #f)
(define (g_file_set_attribute_uint64
         file
         attribute
         value
         flags
         cancellable
         error)
  (unless
    ~g_file_set_attribute_uint64
    (set! ~g_file_set_attribute_uint64
      (fh-link-proc
        "g_file_set_attribute_uint64"
        ffi:int
        (list '* '* ffi:unsigned-long ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attribute (unwrap~pointer attribute))
        (~value (unwrap~fixed value))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_set_attribute_uint64
      ~file
      ~attribute
      ~value
      ~flags
      ~cancellable
      ~error)))
(export g_file_set_attribute_uint64)

;; extern gboolean g_file_set_attribute_int64(GFile *file, const char *
;;     attribute, gint64 value, GFileQueryInfoFlags flags, GCancellable *
;;     cancellable, GError **error);
(define ~g_file_set_attribute_int64 #f)
(define (g_file_set_attribute_int64
         file
         attribute
         value
         flags
         cancellable
         error)
  (unless
    ~g_file_set_attribute_int64
    (set! ~g_file_set_attribute_int64
      (fh-link-proc
        "g_file_set_attribute_int64"
        ffi:int
        (list '* '* ffi:long ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~attribute (unwrap~pointer attribute))
        (~value (unwrap~fixed value))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_set_attribute_int64
      ~file
      ~attribute
      ~value
      ~flags
      ~cancellable
      ~error)))
(export g_file_set_attribute_int64)

;; extern void g_file_mount_enclosing_volume(GFile *location, GMountMountFlags 
;;     flags, GMountOperation *mount_operation, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_mount_enclosing_volume #f)
(define (g_file_mount_enclosing_volume
         location
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_file_mount_enclosing_volume
    (set! ~g_file_mount_enclosing_volume
      (fh-link-proc
        "g_file_mount_enclosing_volume"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~location (unwrap-GFile* location))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_mount_enclosing_volume
      ~location
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_mount_enclosing_volume)

;; extern gboolean g_file_mount_enclosing_volume_finish(GFile *location, 
;;     GAsyncResult *result, GError **error);
(define ~g_file_mount_enclosing_volume_finish #f)
(define (g_file_mount_enclosing_volume_finish
         location
         result
         error)
  (unless
    ~g_file_mount_enclosing_volume_finish
    (set! ~g_file_mount_enclosing_volume_finish
      (fh-link-proc
        "g_file_mount_enclosing_volume_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~location (unwrap-GFile* location))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_mount_enclosing_volume_finish
      ~location
      ~result
      ~error)))
(export g_file_mount_enclosing_volume_finish)

;; extern void g_file_mount_mountable(GFile *file, GMountMountFlags flags, 
;;     GMountOperation *mount_operation, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_mount_mountable #f)
(define (g_file_mount_mountable
         file
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_file_mount_mountable
    (set! ~g_file_mount_mountable
      (fh-link-proc
        "g_file_mount_mountable"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_mount_mountable
      ~file
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_mount_mountable)

;; extern GFile *g_file_mount_mountable_finish(GFile *file, GAsyncResult *
;;     result, GError **error);
(define ~g_file_mount_mountable_finish #f)
(define (g_file_mount_mountable_finish file result error)
  (unless
    ~g_file_mount_mountable_finish
    (set! ~g_file_mount_mountable_finish
      (fh-link-proc
        "g_file_mount_mountable_finish"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GFile*
      (~g_file_mount_mountable_finish
        ~file
        ~result
        ~error))))
(export g_file_mount_mountable_finish)

;; extern void g_file_unmount_mountable(GFile *file, GMountUnmountFlags flags, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_file_unmount_mountable #f)
(define (g_file_unmount_mountable
         file
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_file_unmount_mountable
    (set! ~g_file_unmount_mountable
      (fh-link-proc
        "g_file_unmount_mountable"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_unmount_mountable
      ~file
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_unmount_mountable)

;; extern gboolean g_file_unmount_mountable_finish(GFile *file, GAsyncResult *
;;     result, GError **error);
(define ~g_file_unmount_mountable_finish #f)
(define (g_file_unmount_mountable_finish
         file
         result
         error)
  (unless
    ~g_file_unmount_mountable_finish
    (set! ~g_file_unmount_mountable_finish
      (fh-link-proc
        "g_file_unmount_mountable_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_unmount_mountable_finish
      ~file
      ~result
      ~error)))
(export g_file_unmount_mountable_finish)

;; extern void g_file_unmount_mountable_with_operation(GFile *file, 
;;     GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable
;;      *cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_unmount_mountable_with_operation #f)
(define (g_file_unmount_mountable_with_operation
         file
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_file_unmount_mountable_with_operation
    (set! ~g_file_unmount_mountable_with_operation
      (fh-link-proc
        "g_file_unmount_mountable_with_operation"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_unmount_mountable_with_operation
      ~file
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_unmount_mountable_with_operation)

;; extern gboolean g_file_unmount_mountable_with_operation_finish(GFile *file, 
;;     GAsyncResult *result, GError **error);
(define ~g_file_unmount_mountable_with_operation_finish #f)
(define (g_file_unmount_mountable_with_operation_finish
         file
         result
         error)
  (unless
    ~g_file_unmount_mountable_with_operation_finish
    (set! ~g_file_unmount_mountable_with_operation_finish
      (fh-link-proc
        "g_file_unmount_mountable_with_operation_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_unmount_mountable_with_operation_finish
      ~file
      ~result
      ~error)))
(export g_file_unmount_mountable_with_operation_finish)

;; extern void g_file_eject_mountable(GFile *file, GMountUnmountFlags flags, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_file_eject_mountable #f)
(define (g_file_eject_mountable
         file
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_file_eject_mountable
    (set! ~g_file_eject_mountable
      (fh-link-proc
        "g_file_eject_mountable"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_eject_mountable
      ~file
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_eject_mountable)

;; extern gboolean g_file_eject_mountable_finish(GFile *file, GAsyncResult *
;;     result, GError **error);
(define ~g_file_eject_mountable_finish #f)
(define (g_file_eject_mountable_finish file result error)
  (unless
    ~g_file_eject_mountable_finish
    (set! ~g_file_eject_mountable_finish
      (fh-link-proc
        "g_file_eject_mountable_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_eject_mountable_finish
      ~file
      ~result
      ~error)))
(export g_file_eject_mountable_finish)

;; extern void g_file_eject_mountable_with_operation(GFile *file, 
;;     GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable
;;      *cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_eject_mountable_with_operation #f)
(define (g_file_eject_mountable_with_operation
         file
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_file_eject_mountable_with_operation
    (set! ~g_file_eject_mountable_with_operation
      (fh-link-proc
        "g_file_eject_mountable_with_operation"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_eject_mountable_with_operation
      ~file
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_eject_mountable_with_operation)

;; extern gboolean g_file_eject_mountable_with_operation_finish(GFile *file, 
;;     GAsyncResult *result, GError **error);
(define ~g_file_eject_mountable_with_operation_finish #f)
(define (g_file_eject_mountable_with_operation_finish
         file
         result
         error)
  (unless
    ~g_file_eject_mountable_with_operation_finish
    (set! ~g_file_eject_mountable_with_operation_finish
      (fh-link-proc
        "g_file_eject_mountable_with_operation_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_eject_mountable_with_operation_finish
      ~file
      ~result
      ~error)))
(export g_file_eject_mountable_with_operation_finish)

;; extern gboolean g_file_copy_attributes(GFile *source, GFile *destination, 
;;     GFileCopyFlags flags, GCancellable *cancellable, GError **error);
(define ~g_file_copy_attributes #f)
(define (g_file_copy_attributes
         source
         destination
         flags
         cancellable
         error)
  (unless
    ~g_file_copy_attributes
    (set! ~g_file_copy_attributes
      (fh-link-proc
        "g_file_copy_attributes"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~source (unwrap-GFile* source))
        (~destination (unwrap-GFile* destination))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_copy_attributes
      ~source
      ~destination
      ~flags
      ~cancellable
      ~error)))
(export g_file_copy_attributes)

;; extern GFileMonitor *g_file_monitor_directory(GFile *file, GFileMonitorFlags
;;      flags, GCancellable *cancellable, GError **error);
(define ~g_file_monitor_directory #f)
(define (g_file_monitor_directory
         file
         flags
         cancellable
         error)
  (unless
    ~g_file_monitor_directory
    (set! ~g_file_monitor_directory
      (fh-link-proc
        "g_file_monitor_directory"
        '*
        (list '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileMonitor*
      (~g_file_monitor_directory
        ~file
        ~flags
        ~cancellable
        ~error))))
(export g_file_monitor_directory)

;; extern GFileMonitor *g_file_monitor_file(GFile *file, GFileMonitorFlags 
;;     flags, GCancellable *cancellable, GError **error);
(define ~g_file_monitor_file #f)
(define (g_file_monitor_file
         file
         flags
         cancellable
         error)
  (unless
    ~g_file_monitor_file
    (set! ~g_file_monitor_file
      (fh-link-proc
        "g_file_monitor_file"
        '*
        (list '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileMonitor*
      (~g_file_monitor_file
        ~file
        ~flags
        ~cancellable
        ~error))))
(export g_file_monitor_file)

;; extern GFileMonitor *g_file_monitor(GFile *file, GFileMonitorFlags flags, 
;;     GCancellable *cancellable, GError **error);
(define ~g_file_monitor #f)
(define (g_file_monitor file flags cancellable error)
  (unless
    ~g_file_monitor
    (set! ~g_file_monitor
      (fh-link-proc
        "g_file_monitor"
        '*
        (list '* ffi:int '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileMonitor*
      (~g_file_monitor
        ~file
        ~flags
        ~cancellable
        ~error))))
(export g_file_monitor)

;; extern gboolean g_file_measure_disk_usage(GFile *file, GFileMeasureFlags 
;;     flags, GCancellable *cancellable, GFileMeasureProgressCallback 
;;     progress_callback, gpointer progress_data, guint64 *disk_usage, guint64 
;;     *num_dirs, guint64 *num_files, GError **error);
(define ~g_file_measure_disk_usage #f)
(define (g_file_measure_disk_usage
         file
         flags
         cancellable
         progress_callback
         progress_data
         disk_usage
         num_dirs
         num_files
         error)
  (unless
    ~g_file_measure_disk_usage
    (set! ~g_file_measure_disk_usage
      (fh-link-proc
        "g_file_measure_disk_usage"
        ffi:int
        (list '* ffi:int '* '* '* '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~progress_callback
          ((make-ftn-arg-unwrapper
             ffi:void
             (list ffi:int
                   ffi:unsigned-long
                   ffi:unsigned-long
                   ffi:unsigned-long
                   '*))
           progress_callback))
        (~progress_data (unwrap-gpointer progress_data))
        (~disk_usage (unwrap~pointer disk_usage))
        (~num_dirs (unwrap~pointer num_dirs))
        (~num_files (unwrap~pointer num_files))
        (~error (unwrap~pointer error)))
    (~g_file_measure_disk_usage
      ~file
      ~flags
      ~cancellable
      ~progress_callback
      ~progress_data
      ~disk_usage
      ~num_dirs
      ~num_files
      ~error)))
(export g_file_measure_disk_usage)

;; extern void g_file_measure_disk_usage_async(GFile *file, GFileMeasureFlags 
;;     flags, gint io_priority, GCancellable *cancellable, 
;;     GFileMeasureProgressCallback progress_callback, gpointer progress_data, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_measure_disk_usage_async #f)
(define (g_file_measure_disk_usage_async
         file
         flags
         io_priority
         cancellable
         progress_callback
         progress_data
         callback
         user_data)
  (unless
    ~g_file_measure_disk_usage_async
    (set! ~g_file_measure_disk_usage_async
      (fh-link-proc
        "g_file_measure_disk_usage_async"
        ffi:void
        (list '* ffi:int ffi:int '* '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~progress_callback
          ((make-ftn-arg-unwrapper
             ffi:void
             (list ffi:int
                   ffi:unsigned-long
                   ffi:unsigned-long
                   ffi:unsigned-long
                   '*))
           progress_callback))
        (~progress_data (unwrap-gpointer progress_data))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_measure_disk_usage_async
      ~file
      ~flags
      ~io_priority
      ~cancellable
      ~progress_callback
      ~progress_data
      ~callback
      ~user_data)))
(export g_file_measure_disk_usage_async)

;; extern gboolean g_file_measure_disk_usage_finish(GFile *file, GAsyncResult *
;;     result, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, 
;;     GError **error);
(define ~g_file_measure_disk_usage_finish #f)
(define (g_file_measure_disk_usage_finish
         file
         result
         disk_usage
         num_dirs
         num_files
         error)
  (unless
    ~g_file_measure_disk_usage_finish
    (set! ~g_file_measure_disk_usage_finish
      (fh-link-proc
        "g_file_measure_disk_usage_finish"
        ffi:int
        (list '* '* '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~disk_usage (unwrap~pointer disk_usage))
        (~num_dirs (unwrap~pointer num_dirs))
        (~num_files (unwrap~pointer num_files))
        (~error (unwrap~pointer error)))
    (~g_file_measure_disk_usage_finish
      ~file
      ~result
      ~disk_usage
      ~num_dirs
      ~num_files
      ~error)))
(export g_file_measure_disk_usage_finish)

;; extern void g_file_start_mountable(GFile *file, GDriveStartFlags flags, 
;;     GMountOperation *start_operation, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_start_mountable #f)
(define (g_file_start_mountable
         file
         flags
         start_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_file_start_mountable
    (set! ~g_file_start_mountable
      (fh-link-proc
        "g_file_start_mountable"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~start_operation
          (unwrap-GMountOperation* start_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_start_mountable
      ~file
      ~flags
      ~start_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_start_mountable)

;; extern gboolean g_file_start_mountable_finish(GFile *file, GAsyncResult *
;;     result, GError **error);
(define ~g_file_start_mountable_finish #f)
(define (g_file_start_mountable_finish file result error)
  (unless
    ~g_file_start_mountable_finish
    (set! ~g_file_start_mountable_finish
      (fh-link-proc
        "g_file_start_mountable_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_start_mountable_finish
      ~file
      ~result
      ~error)))
(export g_file_start_mountable_finish)

;; extern void g_file_stop_mountable(GFile *file, GMountUnmountFlags flags, 
;;     GMountOperation *mount_operation, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_stop_mountable #f)
(define (g_file_stop_mountable
         file
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_file_stop_mountable
    (set! ~g_file_stop_mountable
      (fh-link-proc
        "g_file_stop_mountable"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_stop_mountable
      ~file
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_stop_mountable)

;; extern gboolean g_file_stop_mountable_finish(GFile *file, GAsyncResult *
;;     result, GError **error);
(define ~g_file_stop_mountable_finish #f)
(define (g_file_stop_mountable_finish file result error)
  (unless
    ~g_file_stop_mountable_finish
    (set! ~g_file_stop_mountable_finish
      (fh-link-proc
        "g_file_stop_mountable_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_stop_mountable_finish
      ~file
      ~result
      ~error)))
(export g_file_stop_mountable_finish)

;; extern void g_file_poll_mountable(GFile *file, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_poll_mountable #f)
(define (g_file_poll_mountable
         file
         cancellable
         callback
         user_data)
  (unless
    ~g_file_poll_mountable
    (set! ~g_file_poll_mountable
      (fh-link-proc
        "g_file_poll_mountable"
        ffi:void
        (list '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_poll_mountable
      ~file
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_poll_mountable)

;; extern gboolean g_file_poll_mountable_finish(GFile *file, GAsyncResult *
;;     result, GError **error);
(define ~g_file_poll_mountable_finish #f)
(define (g_file_poll_mountable_finish file result error)
  (unless
    ~g_file_poll_mountable_finish
    (set! ~g_file_poll_mountable_finish
      (fh-link-proc
        "g_file_poll_mountable_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_file_poll_mountable_finish
      ~file
      ~result
      ~error)))
(export g_file_poll_mountable_finish)

;; extern GAppInfo *g_file_query_default_handler(GFile *file, GCancellable *
;;     cancellable, GError **error);
(define ~g_file_query_default_handler #f)
(define (g_file_query_default_handler
         file
         cancellable
         error)
  (unless
    ~g_file_query_default_handler
    (set! ~g_file_query_default_handler
      (fh-link-proc
        "g_file_query_default_handler"
        '*
        (list '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GAppInfo*
      (~g_file_query_default_handler
        ~file
        ~cancellable
        ~error))))
(export g_file_query_default_handler)

;; extern gboolean g_file_load_contents(GFile *file, GCancellable *cancellable
;;     , char **contents, gsize *length, char **etag_out, GError **error);
(define ~g_file_load_contents #f)
(define (g_file_load_contents
         file
         cancellable
         contents
         length
         etag_out
         error)
  (unless
    ~g_file_load_contents
    (set! ~g_file_load_contents
      (fh-link-proc
        "g_file_load_contents"
        ffi:int
        (list '* '* '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~contents (unwrap~pointer contents))
        (~length (unwrap~pointer length))
        (~etag_out (unwrap~pointer etag_out))
        (~error (unwrap~pointer error)))
    (~g_file_load_contents
      ~file
      ~cancellable
      ~contents
      ~length
      ~etag_out
      ~error)))
(export g_file_load_contents)

;; extern void g_file_load_contents_async(GFile *file, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_load_contents_async #f)
(define (g_file_load_contents_async
         file
         cancellable
         callback
         user_data)
  (unless
    ~g_file_load_contents_async
    (set! ~g_file_load_contents_async
      (fh-link-proc
        "g_file_load_contents_async"
        ffi:void
        (list '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_load_contents_async
      ~file
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_load_contents_async)

;; extern gboolean g_file_load_contents_finish(GFile *file, GAsyncResult *res, 
;;     char **contents, gsize *length, char **etag_out, GError **error);
(define ~g_file_load_contents_finish #f)
(define (g_file_load_contents_finish
         file
         res
         contents
         length
         etag_out
         error)
  (unless
    ~g_file_load_contents_finish
    (set! ~g_file_load_contents_finish
      (fh-link-proc
        "g_file_load_contents_finish"
        ffi:int
        (list '* '* '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~contents (unwrap~pointer contents))
        (~length (unwrap~pointer length))
        (~etag_out (unwrap~pointer etag_out))
        (~error (unwrap~pointer error)))
    (~g_file_load_contents_finish
      ~file
      ~res
      ~contents
      ~length
      ~etag_out
      ~error)))
(export g_file_load_contents_finish)

;; extern void g_file_load_partial_contents_async(GFile *file, GCancellable *
;;     cancellable, GFileReadMoreCallback read_more_callback, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_load_partial_contents_async #f)
(define (g_file_load_partial_contents_async
         file
         cancellable
         read_more_callback
         callback
         user_data)
  (unless
    ~g_file_load_partial_contents_async
    (set! ~g_file_load_partial_contents_async
      (fh-link-proc
        "g_file_load_partial_contents_async"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~read_more_callback
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* ffi:long '*))
           read_more_callback))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_load_partial_contents_async
      ~file
      ~cancellable
      ~read_more_callback
      ~callback
      ~user_data)))
(export g_file_load_partial_contents_async)

;; extern gboolean g_file_load_partial_contents_finish(GFile *file, 
;;     GAsyncResult *res, char **contents, gsize *length, char **etag_out, 
;;     GError **error);
(define ~g_file_load_partial_contents_finish #f)
(define (g_file_load_partial_contents_finish
         file
         res
         contents
         length
         etag_out
         error)
  (unless
    ~g_file_load_partial_contents_finish
    (set! ~g_file_load_partial_contents_finish
      (fh-link-proc
        "g_file_load_partial_contents_finish"
        ffi:int
        (list '* '* '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~contents (unwrap~pointer contents))
        (~length (unwrap~pointer length))
        (~etag_out (unwrap~pointer etag_out))
        (~error (unwrap~pointer error)))
    (~g_file_load_partial_contents_finish
      ~file
      ~res
      ~contents
      ~length
      ~etag_out
      ~error)))
(export g_file_load_partial_contents_finish)

;; extern gboolean g_file_replace_contents(GFile *file, const char *contents, 
;;     gsize length, const char *etag, gboolean make_backup, GFileCreateFlags 
;;     flags, char **new_etag, GCancellable *cancellable, GError **error);
(define ~g_file_replace_contents #f)
(define (g_file_replace_contents
         file
         contents
         length
         etag
         make_backup
         flags
         new_etag
         cancellable
         error)
  (unless
    ~g_file_replace_contents
    (set! ~g_file_replace_contents
      (fh-link-proc
        "g_file_replace_contents"
        ffi:int
        (list '*
              '*
              ffi:unsigned-long
              '*
              ffi:int
              ffi:int
              '*
              '*
              '*))))
  (let ((~file (unwrap-GFile* file))
        (~contents (unwrap~pointer contents))
        (~length (unwrap~fixed length))
        (~etag (unwrap~pointer etag))
        (~make_backup (unwrap~fixed make_backup))
        (~flags (unwrap~fixed flags))
        (~new_etag (unwrap~pointer new_etag))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_file_replace_contents
      ~file
      ~contents
      ~length
      ~etag
      ~make_backup
      ~flags
      ~new_etag
      ~cancellable
      ~error)))
(export g_file_replace_contents)

;; extern void g_file_replace_contents_async(GFile *file, const char *contents
;;     , gsize length, const char *etag, gboolean make_backup, GFileCreateFlags
;;      flags, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_file_replace_contents_async #f)
(define (g_file_replace_contents_async
         file
         contents
         length
         etag
         make_backup
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_file_replace_contents_async
    (set! ~g_file_replace_contents_async
      (fh-link-proc
        "g_file_replace_contents_async"
        ffi:void
        (list '*
              '*
              ffi:unsigned-long
              '*
              ffi:int
              ffi:int
              '*
              '*
              '*))))
  (let ((~file (unwrap-GFile* file))
        (~contents (unwrap~pointer contents))
        (~length (unwrap~fixed length))
        (~etag (unwrap~pointer etag))
        (~make_backup (unwrap~fixed make_backup))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_replace_contents_async
      ~file
      ~contents
      ~length
      ~etag
      ~make_backup
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_replace_contents_async)

;; extern void g_file_replace_contents_bytes_async(GFile *file, GBytes *
;;     contents, const char *etag, gboolean make_backup, GFileCreateFlags flags
;;     , GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_file_replace_contents_bytes_async #f)
(define (g_file_replace_contents_bytes_async
         file
         contents
         etag
         make_backup
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_file_replace_contents_bytes_async
    (set! ~g_file_replace_contents_bytes_async
      (fh-link-proc
        "g_file_replace_contents_bytes_async"
        ffi:void
        (list '* '* '* ffi:int ffi:int '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~etag (unwrap~pointer etag))
        (~make_backup (unwrap~fixed make_backup))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_replace_contents_bytes_async
      ~file
      contents
      ~etag
      ~make_backup
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_replace_contents_bytes_async)

;; extern gboolean g_file_replace_contents_finish(GFile *file, GAsyncResult *
;;     res, char **new_etag, GError **error);
(define ~g_file_replace_contents_finish #f)
(define (g_file_replace_contents_finish
         file
         res
         new_etag
         error)
  (unless
    ~g_file_replace_contents_finish
    (set! ~g_file_replace_contents_finish
      (fh-link-proc
        "g_file_replace_contents_finish"
        ffi:int
        (list '* '* '* '*))))
  (let ((~file (unwrap-GFile* file))
        (~res (unwrap-GAsyncResult* res))
        (~new_etag (unwrap~pointer new_etag))
        (~error (unwrap~pointer error)))
    (~g_file_replace_contents_finish
      ~file
      ~res
      ~new_etag
      ~error)))
(export g_file_replace_contents_finish)

;; extern gboolean g_file_supports_thread_contexts(GFile *file);
(define ~g_file_supports_thread_contexts #f)
(define (g_file_supports_thread_contexts file)
  (unless
    ~g_file_supports_thread_contexts
    (set! ~g_file_supports_thread_contexts
      (fh-link-proc
        "g_file_supports_thread_contexts"
        ffi:int
        (list '*))))
  (let ((~file (unwrap-GFile* file)))
    (~g_file_supports_thread_contexts ~file)))
(export g_file_supports_thread_contexts)

;; typedef struct _GFileIconClass GFileIconClass;
(define GFileIconClass-desc void)
(export GFileIconClass-desc)
(define GFileIconClass*-desc (bs:pointer GFileIconClass-desc))
(export GFileIconClass*-desc)
(define-fh-pointer-type GFileIconClass* GFileIconClass*-desc)

;; extern GType g_file_icon_get_type(void);
(define ~g_file_icon_get_type #f)
(define (g_file_icon_get_type)
  (unless
    ~g_file_icon_get_type
    (set! ~g_file_icon_get_type
      (fh-link-proc
        "g_file_icon_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_icon_get_type)))
(export g_file_icon_get_type)

;; extern GIcon *g_file_icon_new(GFile *file);
(define ~g_file_icon_new #f)
(define (g_file_icon_new file)
  (unless
    ~g_file_icon_new
    (set! ~g_file_icon_new
      (fh-link-proc "g_file_icon_new" '* (list '*))))
  (let ((~file (unwrap-GFile* file)))
    (wrap-GIcon* (~g_file_icon_new ~file))))
(export g_file_icon_new)

;; extern GFile *g_file_icon_get_file(GFileIcon *icon);
(define ~g_file_icon_get_file #f)
(define (g_file_icon_get_file icon)
  (unless
    ~g_file_icon_get_file
    (set! ~g_file_icon_get_file
      (fh-link-proc
        "g_file_icon_get_file"
        '*
        (list '*))))
  (let ((~icon (unwrap-GFileIcon* icon)))
    (wrap-GFile* (~g_file_icon_get_file ~icon))))
(export g_file_icon_get_file)

;; typedef struct _GFileInfoClass GFileInfoClass;
(define GFileInfoClass-desc void)
(export GFileInfoClass-desc)
(define GFileInfoClass*-desc (bs:pointer GFileInfoClass-desc))
(export GFileInfoClass*-desc)
(define-fh-pointer-type GFileInfoClass* GFileInfoClass*-desc)

;; extern GType g_file_info_get_type(void);
(define ~g_file_info_get_type #f)
(define (g_file_info_get_type)
  (unless
    ~g_file_info_get_type
    (set! ~g_file_info_get_type
      (fh-link-proc
        "g_file_info_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_info_get_type)))
(export g_file_info_get_type)

;; extern GFileInfo *g_file_info_new(void);
(define ~g_file_info_new #f)
(define (g_file_info_new)
  (unless
    ~g_file_info_new
    (set! ~g_file_info_new
      (fh-link-proc "g_file_info_new" '* (list))))
  (let () (wrap-GFileInfo* (~g_file_info_new))))
(export g_file_info_new)

;; extern GFileInfo *g_file_info_dup(GFileInfo *other);
(define ~g_file_info_dup #f)
(define (g_file_info_dup other)
  (unless
    ~g_file_info_dup
    (set! ~g_file_info_dup
      (fh-link-proc "g_file_info_dup" '* (list '*))))
  (let ((~other (unwrap-GFileInfo* other)))
    (wrap-GFileInfo* (~g_file_info_dup ~other))))
(export g_file_info_dup)

;; extern void g_file_info_copy_into(GFileInfo *src_info, GFileInfo *dest_info)
;;     ;
(define ~g_file_info_copy_into #f)
(define (g_file_info_copy_into src_info dest_info)
  (unless
    ~g_file_info_copy_into
    (set! ~g_file_info_copy_into
      (fh-link-proc
        "g_file_info_copy_into"
        ffi:void
        (list '* '*))))
  (let ((~src_info (unwrap-GFileInfo* src_info))
        (~dest_info (unwrap-GFileInfo* dest_info)))
    (~g_file_info_copy_into ~src_info ~dest_info)))
(export g_file_info_copy_into)

;; extern gboolean g_file_info_has_attribute(GFileInfo *info, const char *
;;     attribute);
(define ~g_file_info_has_attribute #f)
(define (g_file_info_has_attribute info attribute)
  (unless
    ~g_file_info_has_attribute
    (set! ~g_file_info_has_attribute
      (fh-link-proc
        "g_file_info_has_attribute"
        ffi:int
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_has_attribute ~info ~attribute)))
(export g_file_info_has_attribute)

;; extern gboolean g_file_info_has_namespace(GFileInfo *info, const char *
;;     name_space);
(define ~g_file_info_has_namespace #f)
(define (g_file_info_has_namespace info name_space)
  (unless
    ~g_file_info_has_namespace
    (set! ~g_file_info_has_namespace
      (fh-link-proc
        "g_file_info_has_namespace"
        ffi:int
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~name_space (unwrap~pointer name_space)))
    (~g_file_info_has_namespace ~info ~name_space)))
(export g_file_info_has_namespace)

;; extern char **g_file_info_list_attributes(GFileInfo *info, const char *
;;     name_space);
(define ~g_file_info_list_attributes #f)
(define (g_file_info_list_attributes info name_space)
  (unless
    ~g_file_info_list_attributes
    (set! ~g_file_info_list_attributes
      (fh-link-proc
        "g_file_info_list_attributes"
        '*
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~name_space (unwrap~pointer name_space)))
    (~g_file_info_list_attributes ~info ~name_space)))
(export g_file_info_list_attributes)

;; extern gboolean g_file_info_get_attribute_data(GFileInfo *info, const char *
;;     attribute, GFileAttributeType *type, gpointer *value_pp, 
;;     GFileAttributeStatus *status);
(define ~g_file_info_get_attribute_data #f)
(define (g_file_info_get_attribute_data
         info
         attribute
         type
         value_pp
         status)
  (unless
    ~g_file_info_get_attribute_data
    (set! ~g_file_info_get_attribute_data
      (fh-link-proc
        "g_file_info_get_attribute_data"
        ffi:int
        (list '* '* '* '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~type (unwrap~pointer type))
        (~status (unwrap~pointer status)))
    (~g_file_info_get_attribute_data
      ~info
      ~attribute
      ~type
      value_pp
      ~status)))
(export g_file_info_get_attribute_data)

;; extern GFileAttributeType g_file_info_get_attribute_type(GFileInfo *info, 
;;     const char *attribute);
(define ~g_file_info_get_attribute_type #f)
(define (g_file_info_get_attribute_type info attribute)
  (unless
    ~g_file_info_get_attribute_type
    (set! ~g_file_info_get_attribute_type
      (fh-link-proc
        "g_file_info_get_attribute_type"
        ffi:int
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_type
      ~info
      ~attribute)))
(export g_file_info_get_attribute_type)

;; extern void g_file_info_remove_attribute(GFileInfo *info, const char *
;;     attribute);
(define ~g_file_info_remove_attribute #f)
(define (g_file_info_remove_attribute info attribute)
  (unless
    ~g_file_info_remove_attribute
    (set! ~g_file_info_remove_attribute
      (fh-link-proc
        "g_file_info_remove_attribute"
        ffi:void
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_remove_attribute ~info ~attribute)))
(export g_file_info_remove_attribute)

;; extern GFileAttributeStatus g_file_info_get_attribute_status(GFileInfo *info
;;     , const char *attribute);
(define ~g_file_info_get_attribute_status #f)
(define (g_file_info_get_attribute_status info attribute)
  (unless
    ~g_file_info_get_attribute_status
    (set! ~g_file_info_get_attribute_status
      (fh-link-proc
        "g_file_info_get_attribute_status"
        ffi:int
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_status
      ~info
      ~attribute)))
(export g_file_info_get_attribute_status)

;; extern gboolean g_file_info_set_attribute_status(GFileInfo *info, const char
;;      *attribute, GFileAttributeStatus status);
(define ~g_file_info_set_attribute_status #f)
(define (g_file_info_set_attribute_status
         info
         attribute
         status)
  (unless
    ~g_file_info_set_attribute_status
    (set! ~g_file_info_set_attribute_status
      (fh-link-proc
        "g_file_info_set_attribute_status"
        ffi:int
        (list '* '* ffi:int))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~status (unwrap~fixed status)))
    (~g_file_info_set_attribute_status
      ~info
      ~attribute
      ~status)))
(export g_file_info_set_attribute_status)

;; extern char *g_file_info_get_attribute_as_string(GFileInfo *info, const char
;;      *attribute);
(define ~g_file_info_get_attribute_as_string #f)
(define (g_file_info_get_attribute_as_string
         info
         attribute)
  (unless
    ~g_file_info_get_attribute_as_string
    (set! ~g_file_info_get_attribute_as_string
      (fh-link-proc
        "g_file_info_get_attribute_as_string"
        '*
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_as_string
      ~info
      ~attribute)))
(export g_file_info_get_attribute_as_string)

;; extern const char *g_file_info_get_attribute_string(GFileInfo *info, const 
;;     char *attribute);
(define ~g_file_info_get_attribute_string #f)
(define (g_file_info_get_attribute_string info attribute)
  (unless
    ~g_file_info_get_attribute_string
    (set! ~g_file_info_get_attribute_string
      (fh-link-proc
        "g_file_info_get_attribute_string"
        '*
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_string
      ~info
      ~attribute)))
(export g_file_info_get_attribute_string)

;; extern const char *g_file_info_get_attribute_byte_string(GFileInfo *info, 
;;     const char *attribute);
(define ~g_file_info_get_attribute_byte_string #f)
(define (g_file_info_get_attribute_byte_string
         info
         attribute)
  (unless
    ~g_file_info_get_attribute_byte_string
    (set! ~g_file_info_get_attribute_byte_string
      (fh-link-proc
        "g_file_info_get_attribute_byte_string"
        '*
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_byte_string
      ~info
      ~attribute)))
(export g_file_info_get_attribute_byte_string)

;; extern gboolean g_file_info_get_attribute_boolean(GFileInfo *info, const 
;;     char *attribute);
(define ~g_file_info_get_attribute_boolean #f)
(define (g_file_info_get_attribute_boolean
         info
         attribute)
  (unless
    ~g_file_info_get_attribute_boolean
    (set! ~g_file_info_get_attribute_boolean
      (fh-link-proc
        "g_file_info_get_attribute_boolean"
        ffi:int
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_boolean
      ~info
      ~attribute)))
(export g_file_info_get_attribute_boolean)

;; extern guint32 g_file_info_get_attribute_uint32(GFileInfo *info, const char 
;;     *attribute);
(define ~g_file_info_get_attribute_uint32 #f)
(define (g_file_info_get_attribute_uint32 info attribute)
  (unless
    ~g_file_info_get_attribute_uint32
    (set! ~g_file_info_get_attribute_uint32
      (fh-link-proc
        "g_file_info_get_attribute_uint32"
        ffi:unsigned-int
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_uint32
      ~info
      ~attribute)))
(export g_file_info_get_attribute_uint32)

;; extern gint32 g_file_info_get_attribute_int32(GFileInfo *info, const char *
;;     attribute);
(define ~g_file_info_get_attribute_int32 #f)
(define (g_file_info_get_attribute_int32 info attribute)
  (unless
    ~g_file_info_get_attribute_int32
    (set! ~g_file_info_get_attribute_int32
      (fh-link-proc
        "g_file_info_get_attribute_int32"
        ffi:int
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_int32
      ~info
      ~attribute)))
(export g_file_info_get_attribute_int32)

;; extern guint64 g_file_info_get_attribute_uint64(GFileInfo *info, const char 
;;     *attribute);
(define ~g_file_info_get_attribute_uint64 #f)
(define (g_file_info_get_attribute_uint64 info attribute)
  (unless
    ~g_file_info_get_attribute_uint64
    (set! ~g_file_info_get_attribute_uint64
      (fh-link-proc
        "g_file_info_get_attribute_uint64"
        ffi:unsigned-long
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_uint64
      ~info
      ~attribute)))
(export g_file_info_get_attribute_uint64)

;; extern gint64 g_file_info_get_attribute_int64(GFileInfo *info, const char *
;;     attribute);
(define ~g_file_info_get_attribute_int64 #f)
(define (g_file_info_get_attribute_int64 info attribute)
  (unless
    ~g_file_info_get_attribute_int64
    (set! ~g_file_info_get_attribute_int64
      (fh-link-proc
        "g_file_info_get_attribute_int64"
        ffi:long
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_int64
      ~info
      ~attribute)))
(export g_file_info_get_attribute_int64)

;; extern GObject *g_file_info_get_attribute_object(GFileInfo *info, const char
;;      *attribute);
(define ~g_file_info_get_attribute_object #f)
(define (g_file_info_get_attribute_object info attribute)
  (unless
    ~g_file_info_get_attribute_object
    (set! ~g_file_info_get_attribute_object
      (fh-link-proc
        "g_file_info_get_attribute_object"
        '*
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_object
      ~info
      ~attribute)))
(export g_file_info_get_attribute_object)

;; extern char **g_file_info_get_attribute_stringv(GFileInfo *info, const char 
;;     *attribute);
(define ~g_file_info_get_attribute_stringv #f)
(define (g_file_info_get_attribute_stringv
         info
         attribute)
  (unless
    ~g_file_info_get_attribute_stringv
    (set! ~g_file_info_get_attribute_stringv
      (fh-link-proc
        "g_file_info_get_attribute_stringv"
        '*
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_info_get_attribute_stringv
      ~info
      ~attribute)))
(export g_file_info_get_attribute_stringv)

;; extern void g_file_info_set_attribute(GFileInfo *info, const char *attribute
;;     , GFileAttributeType type, gpointer value_p);
(define ~g_file_info_set_attribute #f)
(define (g_file_info_set_attribute
         info
         attribute
         type
         value_p)
  (unless
    ~g_file_info_set_attribute
    (set! ~g_file_info_set_attribute
      (fh-link-proc
        "g_file_info_set_attribute"
        ffi:void
        (list '* '* ffi:int '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~type (unwrap~fixed type))
        (~value_p (unwrap-gpointer value_p)))
    (~g_file_info_set_attribute
      ~info
      ~attribute
      ~type
      ~value_p)))
(export g_file_info_set_attribute)

;; extern void g_file_info_set_attribute_string(GFileInfo *info, const char *
;;     attribute, const char *attr_value);
(define ~g_file_info_set_attribute_string #f)
(define (g_file_info_set_attribute_string
         info
         attribute
         attr_value)
  (unless
    ~g_file_info_set_attribute_string
    (set! ~g_file_info_set_attribute_string
      (fh-link-proc
        "g_file_info_set_attribute_string"
        ffi:void
        (list '* '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~attr_value (unwrap~pointer attr_value)))
    (~g_file_info_set_attribute_string
      ~info
      ~attribute
      ~attr_value)))
(export g_file_info_set_attribute_string)

;; extern void g_file_info_set_attribute_byte_string(GFileInfo *info, const 
;;     char *attribute, const char *attr_value);
(define ~g_file_info_set_attribute_byte_string #f)
(define (g_file_info_set_attribute_byte_string
         info
         attribute
         attr_value)
  (unless
    ~g_file_info_set_attribute_byte_string
    (set! ~g_file_info_set_attribute_byte_string
      (fh-link-proc
        "g_file_info_set_attribute_byte_string"
        ffi:void
        (list '* '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~attr_value (unwrap~pointer attr_value)))
    (~g_file_info_set_attribute_byte_string
      ~info
      ~attribute
      ~attr_value)))
(export g_file_info_set_attribute_byte_string)

;; extern void g_file_info_set_attribute_boolean(GFileInfo *info, const char *
;;     attribute, gboolean attr_value);
(define ~g_file_info_set_attribute_boolean #f)
(define (g_file_info_set_attribute_boolean
         info
         attribute
         attr_value)
  (unless
    ~g_file_info_set_attribute_boolean
    (set! ~g_file_info_set_attribute_boolean
      (fh-link-proc
        "g_file_info_set_attribute_boolean"
        ffi:void
        (list '* '* ffi:int))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~attr_value (unwrap~fixed attr_value)))
    (~g_file_info_set_attribute_boolean
      ~info
      ~attribute
      ~attr_value)))
(export g_file_info_set_attribute_boolean)

;; extern void g_file_info_set_attribute_uint32(GFileInfo *info, const char *
;;     attribute, guint32 attr_value);
(define ~g_file_info_set_attribute_uint32 #f)
(define (g_file_info_set_attribute_uint32
         info
         attribute
         attr_value)
  (unless
    ~g_file_info_set_attribute_uint32
    (set! ~g_file_info_set_attribute_uint32
      (fh-link-proc
        "g_file_info_set_attribute_uint32"
        ffi:void
        (list '* '* ffi:unsigned-int))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~attr_value (unwrap~fixed attr_value)))
    (~g_file_info_set_attribute_uint32
      ~info
      ~attribute
      ~attr_value)))
(export g_file_info_set_attribute_uint32)

;; extern void g_file_info_set_attribute_int32(GFileInfo *info, const char *
;;     attribute, gint32 attr_value);
(define ~g_file_info_set_attribute_int32 #f)
(define (g_file_info_set_attribute_int32
         info
         attribute
         attr_value)
  (unless
    ~g_file_info_set_attribute_int32
    (set! ~g_file_info_set_attribute_int32
      (fh-link-proc
        "g_file_info_set_attribute_int32"
        ffi:void
        (list '* '* ffi:int))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~attr_value (unwrap~fixed attr_value)))
    (~g_file_info_set_attribute_int32
      ~info
      ~attribute
      ~attr_value)))
(export g_file_info_set_attribute_int32)

;; extern void g_file_info_set_attribute_uint64(GFileInfo *info, const char *
;;     attribute, guint64 attr_value);
(define ~g_file_info_set_attribute_uint64 #f)
(define (g_file_info_set_attribute_uint64
         info
         attribute
         attr_value)
  (unless
    ~g_file_info_set_attribute_uint64
    (set! ~g_file_info_set_attribute_uint64
      (fh-link-proc
        "g_file_info_set_attribute_uint64"
        ffi:void
        (list '* '* ffi:unsigned-long))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~attr_value (unwrap~fixed attr_value)))
    (~g_file_info_set_attribute_uint64
      ~info
      ~attribute
      ~attr_value)))
(export g_file_info_set_attribute_uint64)

;; extern void g_file_info_set_attribute_int64(GFileInfo *info, const char *
;;     attribute, gint64 attr_value);
(define ~g_file_info_set_attribute_int64 #f)
(define (g_file_info_set_attribute_int64
         info
         attribute
         attr_value)
  (unless
    ~g_file_info_set_attribute_int64
    (set! ~g_file_info_set_attribute_int64
      (fh-link-proc
        "g_file_info_set_attribute_int64"
        ffi:void
        (list '* '* ffi:long))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~attr_value (unwrap~fixed attr_value)))
    (~g_file_info_set_attribute_int64
      ~info
      ~attribute
      ~attr_value)))
(export g_file_info_set_attribute_int64)

;; extern void g_file_info_set_attribute_object(GFileInfo *info, const char *
;;     attribute, GObject *attr_value);
(define ~g_file_info_set_attribute_object #f)
(define (g_file_info_set_attribute_object
         info
         attribute
         attr_value)
  (unless
    ~g_file_info_set_attribute_object
    (set! ~g_file_info_set_attribute_object
      (fh-link-proc
        "g_file_info_set_attribute_object"
        ffi:void
        (list '* '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~attr_value (unwrap~pointer attr_value)))
    (~g_file_info_set_attribute_object
      ~info
      ~attribute
      ~attr_value)))
(export g_file_info_set_attribute_object)

;; extern void g_file_info_set_attribute_stringv(GFileInfo *info, const char *
;;     attribute, char **attr_value);
(define ~g_file_info_set_attribute_stringv #f)
(define (g_file_info_set_attribute_stringv
         info
         attribute
         attr_value)
  (unless
    ~g_file_info_set_attribute_stringv
    (set! ~g_file_info_set_attribute_stringv
      (fh-link-proc
        "g_file_info_set_attribute_stringv"
        ffi:void
        (list '* '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~attribute (unwrap~pointer attribute))
        (~attr_value (unwrap~pointer attr_value)))
    (~g_file_info_set_attribute_stringv
      ~info
      ~attribute
      ~attr_value)))
(export g_file_info_set_attribute_stringv)

;; extern void g_file_info_clear_status(GFileInfo *info);
(define ~g_file_info_clear_status #f)
(define (g_file_info_clear_status info)
  (unless
    ~g_file_info_clear_status
    (set! ~g_file_info_clear_status
      (fh-link-proc
        "g_file_info_clear_status"
        ffi:void
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_clear_status ~info)))
(export g_file_info_clear_status)

;; extern GDateTime *g_file_info_get_deletion_date(GFileInfo *info);
(define ~g_file_info_get_deletion_date #f)
(define (g_file_info_get_deletion_date info)
  (unless
    ~g_file_info_get_deletion_date
    (set! ~g_file_info_get_deletion_date
      (fh-link-proc
        "g_file_info_get_deletion_date"
        '*
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_deletion_date ~info)))
(export g_file_info_get_deletion_date)

;; extern GFileType g_file_info_get_file_type(GFileInfo *info);
(define ~g_file_info_get_file_type #f)
(define (g_file_info_get_file_type info)
  (unless
    ~g_file_info_get_file_type
    (set! ~g_file_info_get_file_type
      (fh-link-proc
        "g_file_info_get_file_type"
        ffi:int
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_file_type ~info)))
(export g_file_info_get_file_type)

;; extern gboolean g_file_info_get_is_hidden(GFileInfo *info);
(define ~g_file_info_get_is_hidden #f)
(define (g_file_info_get_is_hidden info)
  (unless
    ~g_file_info_get_is_hidden
    (set! ~g_file_info_get_is_hidden
      (fh-link-proc
        "g_file_info_get_is_hidden"
        ffi:int
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_is_hidden ~info)))
(export g_file_info_get_is_hidden)

;; extern gboolean g_file_info_get_is_backup(GFileInfo *info);
(define ~g_file_info_get_is_backup #f)
(define (g_file_info_get_is_backup info)
  (unless
    ~g_file_info_get_is_backup
    (set! ~g_file_info_get_is_backup
      (fh-link-proc
        "g_file_info_get_is_backup"
        ffi:int
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_is_backup ~info)))
(export g_file_info_get_is_backup)

;; extern gboolean g_file_info_get_is_symlink(GFileInfo *info);
(define ~g_file_info_get_is_symlink #f)
(define (g_file_info_get_is_symlink info)
  (unless
    ~g_file_info_get_is_symlink
    (set! ~g_file_info_get_is_symlink
      (fh-link-proc
        "g_file_info_get_is_symlink"
        ffi:int
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_is_symlink ~info)))
(export g_file_info_get_is_symlink)

;; extern const char *g_file_info_get_name(GFileInfo *info);
(define ~g_file_info_get_name #f)
(define (g_file_info_get_name info)
  (unless
    ~g_file_info_get_name
    (set! ~g_file_info_get_name
      (fh-link-proc
        "g_file_info_get_name"
        '*
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_name ~info)))
(export g_file_info_get_name)

;; extern const char *g_file_info_get_display_name(GFileInfo *info);
(define ~g_file_info_get_display_name #f)
(define (g_file_info_get_display_name info)
  (unless
    ~g_file_info_get_display_name
    (set! ~g_file_info_get_display_name
      (fh-link-proc
        "g_file_info_get_display_name"
        '*
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_display_name ~info)))
(export g_file_info_get_display_name)

;; extern const char *g_file_info_get_edit_name(GFileInfo *info);
(define ~g_file_info_get_edit_name #f)
(define (g_file_info_get_edit_name info)
  (unless
    ~g_file_info_get_edit_name
    (set! ~g_file_info_get_edit_name
      (fh-link-proc
        "g_file_info_get_edit_name"
        '*
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_edit_name ~info)))
(export g_file_info_get_edit_name)

;; extern GIcon *g_file_info_get_icon(GFileInfo *info);
(define ~g_file_info_get_icon #f)
(define (g_file_info_get_icon info)
  (unless
    ~g_file_info_get_icon
    (set! ~g_file_info_get_icon
      (fh-link-proc
        "g_file_info_get_icon"
        '*
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (wrap-GIcon* (~g_file_info_get_icon ~info))))
(export g_file_info_get_icon)

;; extern GIcon *g_file_info_get_symbolic_icon(GFileInfo *info);
(define ~g_file_info_get_symbolic_icon #f)
(define (g_file_info_get_symbolic_icon info)
  (unless
    ~g_file_info_get_symbolic_icon
    (set! ~g_file_info_get_symbolic_icon
      (fh-link-proc
        "g_file_info_get_symbolic_icon"
        '*
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (wrap-GIcon*
      (~g_file_info_get_symbolic_icon ~info))))
(export g_file_info_get_symbolic_icon)

;; extern const char *g_file_info_get_content_type(GFileInfo *info);
(define ~g_file_info_get_content_type #f)
(define (g_file_info_get_content_type info)
  (unless
    ~g_file_info_get_content_type
    (set! ~g_file_info_get_content_type
      (fh-link-proc
        "g_file_info_get_content_type"
        '*
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_content_type ~info)))
(export g_file_info_get_content_type)

;; extern goffset g_file_info_get_size(GFileInfo *info);
(define ~g_file_info_get_size #f)
(define (g_file_info_get_size info)
  (unless
    ~g_file_info_get_size
    (set! ~g_file_info_get_size
      (fh-link-proc
        "g_file_info_get_size"
        ffi:long
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_size ~info)))
(export g_file_info_get_size)

;; extern void g_file_info_get_modification_time(GFileInfo *info, GTimeVal *
;;     result);
(define ~g_file_info_get_modification_time #f)
(define (g_file_info_get_modification_time info result)
  (unless
    ~g_file_info_get_modification_time
    (set! ~g_file_info_get_modification_time
      (fh-link-proc
        "g_file_info_get_modification_time"
        ffi:void
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_modification_time ~info result)))
(export g_file_info_get_modification_time)

;; extern const char *g_file_info_get_symlink_target(GFileInfo *info);
(define ~g_file_info_get_symlink_target #f)
(define (g_file_info_get_symlink_target info)
  (unless
    ~g_file_info_get_symlink_target
    (set! ~g_file_info_get_symlink_target
      (fh-link-proc
        "g_file_info_get_symlink_target"
        '*
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_symlink_target ~info)))
(export g_file_info_get_symlink_target)

;; extern const char *g_file_info_get_etag(GFileInfo *info);
(define ~g_file_info_get_etag #f)
(define (g_file_info_get_etag info)
  (unless
    ~g_file_info_get_etag
    (set! ~g_file_info_get_etag
      (fh-link-proc
        "g_file_info_get_etag"
        '*
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_etag ~info)))
(export g_file_info_get_etag)

;; extern gint32 g_file_info_get_sort_order(GFileInfo *info);
(define ~g_file_info_get_sort_order #f)
(define (g_file_info_get_sort_order info)
  (unless
    ~g_file_info_get_sort_order
    (set! ~g_file_info_get_sort_order
      (fh-link-proc
        "g_file_info_get_sort_order"
        ffi:int
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_get_sort_order ~info)))
(export g_file_info_get_sort_order)

;; extern void g_file_info_set_attribute_mask(GFileInfo *info, 
;;     GFileAttributeMatcher *mask);
(define ~g_file_info_set_attribute_mask #f)
(define (g_file_info_set_attribute_mask info mask)
  (unless
    ~g_file_info_set_attribute_mask
    (set! ~g_file_info_set_attribute_mask
      (fh-link-proc
        "g_file_info_set_attribute_mask"
        ffi:void
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~mask (unwrap-GFileAttributeMatcher* mask)))
    (~g_file_info_set_attribute_mask ~info ~mask)))
(export g_file_info_set_attribute_mask)

;; extern void g_file_info_unset_attribute_mask(GFileInfo *info);
(define ~g_file_info_unset_attribute_mask #f)
(define (g_file_info_unset_attribute_mask info)
  (unless
    ~g_file_info_unset_attribute_mask
    (set! ~g_file_info_unset_attribute_mask
      (fh-link-proc
        "g_file_info_unset_attribute_mask"
        ffi:void
        (list '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_unset_attribute_mask ~info)))
(export g_file_info_unset_attribute_mask)

;; extern void g_file_info_set_file_type(GFileInfo *info, GFileType type);
(define ~g_file_info_set_file_type #f)
(define (g_file_info_set_file_type info type)
  (unless
    ~g_file_info_set_file_type
    (set! ~g_file_info_set_file_type
      (fh-link-proc
        "g_file_info_set_file_type"
        ffi:void
        (list '* ffi:int))))
  (let ((~info (unwrap-GFileInfo* info))
        (~type (unwrap~fixed type)))
    (~g_file_info_set_file_type ~info ~type)))
(export g_file_info_set_file_type)

;; extern void g_file_info_set_is_hidden(GFileInfo *info, gboolean is_hidden);
(define ~g_file_info_set_is_hidden #f)
(define (g_file_info_set_is_hidden info is_hidden)
  (unless
    ~g_file_info_set_is_hidden
    (set! ~g_file_info_set_is_hidden
      (fh-link-proc
        "g_file_info_set_is_hidden"
        ffi:void
        (list '* ffi:int))))
  (let ((~info (unwrap-GFileInfo* info))
        (~is_hidden (unwrap~fixed is_hidden)))
    (~g_file_info_set_is_hidden ~info ~is_hidden)))
(export g_file_info_set_is_hidden)

;; extern void g_file_info_set_is_symlink(GFileInfo *info, gboolean is_symlink)
;;     ;
(define ~g_file_info_set_is_symlink #f)
(define (g_file_info_set_is_symlink info is_symlink)
  (unless
    ~g_file_info_set_is_symlink
    (set! ~g_file_info_set_is_symlink
      (fh-link-proc
        "g_file_info_set_is_symlink"
        ffi:void
        (list '* ffi:int))))
  (let ((~info (unwrap-GFileInfo* info))
        (~is_symlink (unwrap~fixed is_symlink)))
    (~g_file_info_set_is_symlink ~info ~is_symlink)))
(export g_file_info_set_is_symlink)

;; extern void g_file_info_set_name(GFileInfo *info, const char *name);
(define ~g_file_info_set_name #f)
(define (g_file_info_set_name info name)
  (unless
    ~g_file_info_set_name
    (set! ~g_file_info_set_name
      (fh-link-proc
        "g_file_info_set_name"
        ffi:void
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~name (unwrap~pointer name)))
    (~g_file_info_set_name ~info ~name)))
(export g_file_info_set_name)

;; extern void g_file_info_set_display_name(GFileInfo *info, const char *
;;     display_name);
(define ~g_file_info_set_display_name #f)
(define (g_file_info_set_display_name info display_name)
  (unless
    ~g_file_info_set_display_name
    (set! ~g_file_info_set_display_name
      (fh-link-proc
        "g_file_info_set_display_name"
        ffi:void
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~display_name (unwrap~pointer display_name)))
    (~g_file_info_set_display_name
      ~info
      ~display_name)))
(export g_file_info_set_display_name)

;; extern void g_file_info_set_edit_name(GFileInfo *info, const char *edit_name
;;     );
(define ~g_file_info_set_edit_name #f)
(define (g_file_info_set_edit_name info edit_name)
  (unless
    ~g_file_info_set_edit_name
    (set! ~g_file_info_set_edit_name
      (fh-link-proc
        "g_file_info_set_edit_name"
        ffi:void
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~edit_name (unwrap~pointer edit_name)))
    (~g_file_info_set_edit_name ~info ~edit_name)))
(export g_file_info_set_edit_name)

;; extern void g_file_info_set_icon(GFileInfo *info, GIcon *icon);
(define ~g_file_info_set_icon #f)
(define (g_file_info_set_icon info icon)
  (unless
    ~g_file_info_set_icon
    (set! ~g_file_info_set_icon
      (fh-link-proc
        "g_file_info_set_icon"
        ffi:void
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~icon (unwrap-GIcon* icon)))
    (~g_file_info_set_icon ~info ~icon)))
(export g_file_info_set_icon)

;; extern void g_file_info_set_symbolic_icon(GFileInfo *info, GIcon *icon);
(define ~g_file_info_set_symbolic_icon #f)
(define (g_file_info_set_symbolic_icon info icon)
  (unless
    ~g_file_info_set_symbolic_icon
    (set! ~g_file_info_set_symbolic_icon
      (fh-link-proc
        "g_file_info_set_symbolic_icon"
        ffi:void
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~icon (unwrap-GIcon* icon)))
    (~g_file_info_set_symbolic_icon ~info ~icon)))
(export g_file_info_set_symbolic_icon)

;; extern void g_file_info_set_content_type(GFileInfo *info, const char *
;;     content_type);
(define ~g_file_info_set_content_type #f)
(define (g_file_info_set_content_type info content_type)
  (unless
    ~g_file_info_set_content_type
    (set! ~g_file_info_set_content_type
      (fh-link-proc
        "g_file_info_set_content_type"
        ffi:void
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~content_type (unwrap~pointer content_type)))
    (~g_file_info_set_content_type
      ~info
      ~content_type)))
(export g_file_info_set_content_type)

;; extern void g_file_info_set_size(GFileInfo *info, goffset size);
(define ~g_file_info_set_size #f)
(define (g_file_info_set_size info size)
  (unless
    ~g_file_info_set_size
    (set! ~g_file_info_set_size
      (fh-link-proc
        "g_file_info_set_size"
        ffi:void
        (list '* ffi:long))))
  (let ((~info (unwrap-GFileInfo* info))
        (~size (unwrap~fixed size)))
    (~g_file_info_set_size ~info ~size)))
(export g_file_info_set_size)

;; extern void g_file_info_set_modification_time(GFileInfo *info, GTimeVal *
;;     mtime);
(define ~g_file_info_set_modification_time #f)
(define (g_file_info_set_modification_time info mtime)
  (unless
    ~g_file_info_set_modification_time
    (set! ~g_file_info_set_modification_time
      (fh-link-proc
        "g_file_info_set_modification_time"
        ffi:void
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info)))
    (~g_file_info_set_modification_time ~info mtime)))
(export g_file_info_set_modification_time)

;; extern void g_file_info_set_symlink_target(GFileInfo *info, const char *
;;     symlink_target);
(define ~g_file_info_set_symlink_target #f)
(define (g_file_info_set_symlink_target
         info
         symlink_target)
  (unless
    ~g_file_info_set_symlink_target
    (set! ~g_file_info_set_symlink_target
      (fh-link-proc
        "g_file_info_set_symlink_target"
        ffi:void
        (list '* '*))))
  (let ((~info (unwrap-GFileInfo* info))
        (~symlink_target (unwrap~pointer symlink_target)))
    (~g_file_info_set_symlink_target
      ~info
      ~symlink_target)))
(export g_file_info_set_symlink_target)

;; extern void g_file_info_set_sort_order(GFileInfo *info, gint32 sort_order);
(define ~g_file_info_set_sort_order #f)
(define (g_file_info_set_sort_order info sort_order)
  (unless
    ~g_file_info_set_sort_order
    (set! ~g_file_info_set_sort_order
      (fh-link-proc
        "g_file_info_set_sort_order"
        ffi:void
        (list '* ffi:int))))
  (let ((~info (unwrap-GFileInfo* info))
        (~sort_order (unwrap~fixed sort_order)))
    (~g_file_info_set_sort_order ~info ~sort_order)))
(export g_file_info_set_sort_order)

;; extern GType g_file_attribute_matcher_get_type(void);
(define ~g_file_attribute_matcher_get_type #f)
(define (g_file_attribute_matcher_get_type)
  (unless
    ~g_file_attribute_matcher_get_type
    (set! ~g_file_attribute_matcher_get_type
      (fh-link-proc
        "g_file_attribute_matcher_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_attribute_matcher_get_type)))
(export g_file_attribute_matcher_get_type)

;; extern GFileAttributeMatcher *g_file_attribute_matcher_new(const char *
;;     attributes);
(define ~g_file_attribute_matcher_new #f)
(define (g_file_attribute_matcher_new attributes)
  (unless
    ~g_file_attribute_matcher_new
    (set! ~g_file_attribute_matcher_new
      (fh-link-proc
        "g_file_attribute_matcher_new"
        '*
        (list '*))))
  (let ((~attributes (unwrap~pointer attributes)))
    (wrap-GFileAttributeMatcher*
      (~g_file_attribute_matcher_new ~attributes))))
(export g_file_attribute_matcher_new)

;; extern GFileAttributeMatcher *g_file_attribute_matcher_ref(
;;     GFileAttributeMatcher *matcher);
(define ~g_file_attribute_matcher_ref #f)
(define (g_file_attribute_matcher_ref matcher)
  (unless
    ~g_file_attribute_matcher_ref
    (set! ~g_file_attribute_matcher_ref
      (fh-link-proc
        "g_file_attribute_matcher_ref"
        '*
        (list '*))))
  (let ((~matcher
          (unwrap-GFileAttributeMatcher* matcher)))
    (wrap-GFileAttributeMatcher*
      (~g_file_attribute_matcher_ref ~matcher))))
(export g_file_attribute_matcher_ref)

;; extern void g_file_attribute_matcher_unref(GFileAttributeMatcher *matcher);
(define ~g_file_attribute_matcher_unref #f)
(define (g_file_attribute_matcher_unref matcher)
  (unless
    ~g_file_attribute_matcher_unref
    (set! ~g_file_attribute_matcher_unref
      (fh-link-proc
        "g_file_attribute_matcher_unref"
        ffi:void
        (list '*))))
  (let ((~matcher
          (unwrap-GFileAttributeMatcher* matcher)))
    (~g_file_attribute_matcher_unref ~matcher)))
(export g_file_attribute_matcher_unref)

;; extern GFileAttributeMatcher *g_file_attribute_matcher_subtract(
;;     GFileAttributeMatcher *matcher, GFileAttributeMatcher *subtract);
(define ~g_file_attribute_matcher_subtract #f)
(define (g_file_attribute_matcher_subtract
         matcher
         subtract)
  (unless
    ~g_file_attribute_matcher_subtract
    (set! ~g_file_attribute_matcher_subtract
      (fh-link-proc
        "g_file_attribute_matcher_subtract"
        '*
        (list '* '*))))
  (let ((~matcher
          (unwrap-GFileAttributeMatcher* matcher))
        (~subtract
          (unwrap-GFileAttributeMatcher* subtract)))
    (wrap-GFileAttributeMatcher*
      (~g_file_attribute_matcher_subtract
        ~matcher
        ~subtract))))
(export g_file_attribute_matcher_subtract)

;; extern gboolean g_file_attribute_matcher_matches(GFileAttributeMatcher *
;;     matcher, const char *attribute);
(define ~g_file_attribute_matcher_matches #f)
(define (g_file_attribute_matcher_matches
         matcher
         attribute)
  (unless
    ~g_file_attribute_matcher_matches
    (set! ~g_file_attribute_matcher_matches
      (fh-link-proc
        "g_file_attribute_matcher_matches"
        ffi:int
        (list '* '*))))
  (let ((~matcher
          (unwrap-GFileAttributeMatcher* matcher))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_attribute_matcher_matches
      ~matcher
      ~attribute)))
(export g_file_attribute_matcher_matches)

;; extern gboolean g_file_attribute_matcher_matches_only(GFileAttributeMatcher 
;;     *matcher, const char *attribute);
(define ~g_file_attribute_matcher_matches_only #f)
(define (g_file_attribute_matcher_matches_only
         matcher
         attribute)
  (unless
    ~g_file_attribute_matcher_matches_only
    (set! ~g_file_attribute_matcher_matches_only
      (fh-link-proc
        "g_file_attribute_matcher_matches_only"
        ffi:int
        (list '* '*))))
  (let ((~matcher
          (unwrap-GFileAttributeMatcher* matcher))
        (~attribute (unwrap~pointer attribute)))
    (~g_file_attribute_matcher_matches_only
      ~matcher
      ~attribute)))
(export g_file_attribute_matcher_matches_only)

;; extern gboolean g_file_attribute_matcher_enumerate_namespace(
;;     GFileAttributeMatcher *matcher, const char *ns);
(define ~g_file_attribute_matcher_enumerate_namespace #f)
(define (g_file_attribute_matcher_enumerate_namespace
         matcher
         ns)
  (unless
    ~g_file_attribute_matcher_enumerate_namespace
    (set! ~g_file_attribute_matcher_enumerate_namespace
      (fh-link-proc
        "g_file_attribute_matcher_enumerate_namespace"
        ffi:int
        (list '* '*))))
  (let ((~matcher
          (unwrap-GFileAttributeMatcher* matcher))
        (~ns (unwrap~pointer ns)))
    (~g_file_attribute_matcher_enumerate_namespace
      ~matcher
      ~ns)))
(export g_file_attribute_matcher_enumerate_namespace)

;; extern const char *g_file_attribute_matcher_enumerate_next(
;;     GFileAttributeMatcher *matcher);
(define ~g_file_attribute_matcher_enumerate_next #f)
(define (g_file_attribute_matcher_enumerate_next matcher)
  (unless
    ~g_file_attribute_matcher_enumerate_next
    (set! ~g_file_attribute_matcher_enumerate_next
      (fh-link-proc
        "g_file_attribute_matcher_enumerate_next"
        '*
        (list '*))))
  (let ((~matcher
          (unwrap-GFileAttributeMatcher* matcher)))
    (~g_file_attribute_matcher_enumerate_next
      ~matcher)))
(export g_file_attribute_matcher_enumerate_next)

;; extern char *g_file_attribute_matcher_to_string(GFileAttributeMatcher *
;;     matcher);
(define ~g_file_attribute_matcher_to_string #f)
(define (g_file_attribute_matcher_to_string matcher)
  (unless
    ~g_file_attribute_matcher_to_string
    (set! ~g_file_attribute_matcher_to_string
      (fh-link-proc
        "g_file_attribute_matcher_to_string"
        '*
        (list '*))))
  (let ((~matcher
          (unwrap-GFileAttributeMatcher* matcher)))
    (~g_file_attribute_matcher_to_string ~matcher)))
(export g_file_attribute_matcher_to_string)

;; typedef struct _GFileInputStreamClass GFileInputStreamClass;
(define GFileInputStreamClass-desc void)
(export GFileInputStreamClass-desc)
(define GFileInputStreamClass*-desc (bs:pointer (delay GFileInputStreamClass-desc)))
(export GFileInputStreamClass*-desc)
(define-fh-pointer-type GFileInputStreamClass* GFileInputStreamClass*-desc)

;; typedef struct _GFileInputStreamPrivate GFileInputStreamPrivate;
(define GFileInputStreamPrivate-desc void)
(export GFileInputStreamPrivate-desc)
(define GFileInputStreamPrivate*-desc (bs:pointer GFileInputStreamPrivate-desc))
(export GFileInputStreamPrivate*-desc)
(define-fh-pointer-type GFileInputStreamPrivate* GFileInputStreamPrivate*-desc)

;; struct _GFileInputStream {
;;   GInputStream parent_instance;
;;   /*< private >*/
;;   GFileInputStreamPrivate *priv;
;; };
(define struct-_GFileInputStream-desc
  (bs:struct
    (list `(parent_instance ,GInputStream-desc)
          `(priv ,(bs:pointer
                    (delay GFileInputStreamPrivate*-desc))))))
(export struct-_GFileInputStream-desc)
(define-fh-compound-type/p struct-_GFileInputStream struct-_GFileInputStream-desc)
(set! GFileInputStream-desc struct-_GFileInputStream-desc)
(define-fh-compound-type GFileInputStream GFileInputStream-desc)

;; struct _GFileInputStreamClass {
;;   GInputStreamClass parent_class;
;;   goffset (*tell)(GFileInputStream *stream);
;;   gboolean (*can_seek)(GFileInputStream *stream);
;;   gboolean (*seek)(GFileInputStream *stream, goffset offset, GSeekType type
;;       , GCancellable *cancellable, GError **error);
;;   GFileInfo *(*query_info)(GFileInputStream *stream, const char *attributes
;;       , GCancellable *cancellable, GError **error);
;;   void (*query_info_async)(GFileInputStream *stream, const char *attributes
;;       , int io_priority, GCancellable *cancellable, GAsyncReadyCallback 
;;       callback, gpointer user_data);
;;   GFileInfo *(*query_info_finish)(GFileInputStream *stream, GAsyncResult *
;;       result, GError **error);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GFileInputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GInputStreamClass-desc)
          `(tell ,(bs:pointer void))
          `(can_seek ,(bs:pointer void))
          `(seek ,(bs:pointer void))
          `(query_info ,(bs:pointer void))
          `(query_info_async ,(bs:pointer void))
          `(query_info_finish ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GFileInputStreamClass-desc)
(define-fh-compound-type/p struct-_GFileInputStreamClass struct-_GFileInputStreamClass-desc)
(set! GFileInputStreamClass-desc struct-_GFileInputStreamClass-desc)
(define-fh-compound-type GFileInputStreamClass GFileInputStreamClass-desc)

;; extern GType g_file_input_stream_get_type(void);
(define ~g_file_input_stream_get_type #f)
(define (g_file_input_stream_get_type)
  (unless
    ~g_file_input_stream_get_type
    (set! ~g_file_input_stream_get_type
      (fh-link-proc
        "g_file_input_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_input_stream_get_type)))
(export g_file_input_stream_get_type)

;; extern GFileInfo *g_file_input_stream_query_info(GFileInputStream *stream, 
;;     const char *attributes, GCancellable *cancellable, GError **error);
(define ~g_file_input_stream_query_info #f)
(define (g_file_input_stream_query_info
         stream
         attributes
         cancellable
         error)
  (unless
    ~g_file_input_stream_query_info
    (set! ~g_file_input_stream_query_info
      (fh-link-proc
        "g_file_input_stream_query_info"
        '*
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GFileInputStream* stream))
        (~attributes (unwrap~pointer attributes))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileInfo*
      (~g_file_input_stream_query_info
        ~stream
        ~attributes
        ~cancellable
        ~error))))
(export g_file_input_stream_query_info)

;; extern void g_file_input_stream_query_info_async(GFileInputStream *stream, 
;;     const char *attributes, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_input_stream_query_info_async #f)
(define (g_file_input_stream_query_info_async
         stream
         attributes
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_input_stream_query_info_async
    (set! ~g_file_input_stream_query_info_async
      (fh-link-proc
        "g_file_input_stream_query_info_async"
        ffi:void
        (list '* '* ffi:int '* '* '*))))
  (let ((~stream (unwrap-GFileInputStream* stream))
        (~attributes (unwrap~pointer attributes))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_input_stream_query_info_async
      ~stream
      ~attributes
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_input_stream_query_info_async)

;; extern GFileInfo *g_file_input_stream_query_info_finish(GFileInputStream *
;;     stream, GAsyncResult *result, GError **error);
(define ~g_file_input_stream_query_info_finish #f)
(define (g_file_input_stream_query_info_finish
         stream
         result
         error)
  (unless
    ~g_file_input_stream_query_info_finish
    (set! ~g_file_input_stream_query_info_finish
      (fh-link-proc
        "g_file_input_stream_query_info_finish"
        '*
        (list '* '* '*))))
  (let ((~stream (unwrap-GFileInputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GFileInfo*
      (~g_file_input_stream_query_info_finish
        ~stream
        ~result
        ~error))))
(export g_file_input_stream_query_info_finish)

;; extern GQuark g_io_error_quark(void);
(define ~g_io_error_quark #f)
(define (g_io_error_quark)
  (unless
    ~g_io_error_quark
    (set! ~g_io_error_quark
      (fh-link-proc
        "g_io_error_quark"
        ffi:unsigned-int
        (list))))
  (let () (~g_io_error_quark)))
(export g_io_error_quark)

;; extern GIOErrorEnum g_io_error_from_errno(gint err_no);
(define ~g_io_error_from_errno #f)
(define (g_io_error_from_errno err_no)
  (unless
    ~g_io_error_from_errno
    (set! ~g_io_error_from_errno
      (fh-link-proc
        "g_io_error_from_errno"
        ffi:int
        (list ffi:int))))
  (let ((~err_no (unwrap~fixed err_no)))
    (~g_io_error_from_errno ~err_no)))
(export g_io_error_from_errno)

;; typedef struct _GIOStreamPrivate GIOStreamPrivate;
(define GIOStreamPrivate-desc void)
(export GIOStreamPrivate-desc)
(define GIOStreamPrivate*-desc (bs:pointer GIOStreamPrivate-desc))
(export GIOStreamPrivate*-desc)
(define-fh-pointer-type GIOStreamPrivate* GIOStreamPrivate*-desc)

;; typedef struct _GIOStreamClass GIOStreamClass;
(define GIOStreamClass-desc void)
(export GIOStreamClass-desc)
(define GIOStreamClass*-desc (bs:pointer (delay GIOStreamClass-desc)))
(export GIOStreamClass*-desc)
(define-fh-pointer-type GIOStreamClass* GIOStreamClass*-desc)

;; struct _GIOStream {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GIOStreamPrivate *priv;
;; };
(define struct-_GIOStream-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GIOStreamPrivate*-desc))))))
(export struct-_GIOStream-desc)
(define-fh-compound-type/p struct-_GIOStream struct-_GIOStream-desc)
(set! GIOStream-desc struct-_GIOStream-desc)
(define-fh-compound-type GIOStream GIOStream-desc)

;; struct _GIOStreamClass {
;;   GObjectClass parent_class;
;;   GInputStream *(*get_input_stream)(GIOStream *stream);
;;   GOutputStream *(*get_output_stream)(GIOStream *stream);
;;   gboolean (*close_fn)(GIOStream *stream, GCancellable *cancellable, GError 
;;       **error);
;;   void (*close_async)(GIOStream *stream, int io_priority, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*close_finish)(GIOStream *stream, GAsyncResult *result, GError *
;;       *error);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;;   void (*_g_reserved7)(void);
;;   void (*_g_reserved8)(void);
;;   void (*_g_reserved9)(void);
;;   void (*_g_reserved10)(void);
;; };
(define struct-_GIOStreamClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(get_input_stream ,(bs:pointer void))
          `(get_output_stream ,(bs:pointer void))
          `(close_fn ,(bs:pointer void))
          `(close_async ,(bs:pointer void))
          `(close_finish ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void))
          `(_g_reserved7 ,(bs:pointer void))
          `(_g_reserved8 ,(bs:pointer void))
          `(_g_reserved9 ,(bs:pointer void))
          `(_g_reserved10 ,(bs:pointer void)))))
(export struct-_GIOStreamClass-desc)
(define-fh-compound-type/p struct-_GIOStreamClass struct-_GIOStreamClass-desc)
(set! GIOStreamClass-desc struct-_GIOStreamClass-desc)
(define-fh-compound-type GIOStreamClass GIOStreamClass-desc)

;; extern GType g_io_stream_get_type(void);
(define ~g_io_stream_get_type #f)
(define (g_io_stream_get_type)
  (unless
    ~g_io_stream_get_type
    (set! ~g_io_stream_get_type
      (fh-link-proc
        "g_io_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_io_stream_get_type)))
(export g_io_stream_get_type)

;; extern GInputStream *g_io_stream_get_input_stream(GIOStream *stream);
(define ~g_io_stream_get_input_stream #f)
(define (g_io_stream_get_input_stream stream)
  (unless
    ~g_io_stream_get_input_stream
    (set! ~g_io_stream_get_input_stream
      (fh-link-proc
        "g_io_stream_get_input_stream"
        '*
        (list '*))))
  (let ((~stream (unwrap-GIOStream* stream)))
    (wrap-GInputStream*
      (~g_io_stream_get_input_stream ~stream))))
(export g_io_stream_get_input_stream)

;; extern GOutputStream *g_io_stream_get_output_stream(GIOStream *stream);
(define ~g_io_stream_get_output_stream #f)
(define (g_io_stream_get_output_stream stream)
  (unless
    ~g_io_stream_get_output_stream
    (set! ~g_io_stream_get_output_stream
      (fh-link-proc
        "g_io_stream_get_output_stream"
        '*
        (list '*))))
  (let ((~stream (unwrap-GIOStream* stream)))
    (wrap-GOutputStream*
      (~g_io_stream_get_output_stream ~stream))))
(export g_io_stream_get_output_stream)

;; extern void g_io_stream_splice_async(GIOStream *stream1, GIOStream *stream2
;;     , GIOStreamSpliceFlags flags, int io_priority, GCancellable *cancellable
;;     , GAsyncReadyCallback callback, gpointer user_data);
(define ~g_io_stream_splice_async #f)
(define (g_io_stream_splice_async
         stream1
         stream2
         flags
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_io_stream_splice_async
    (set! ~g_io_stream_splice_async
      (fh-link-proc
        "g_io_stream_splice_async"
        ffi:void
        (list '* '* ffi:int ffi:int '* '* '*))))
  (let ((~stream1 (unwrap-GIOStream* stream1))
        (~stream2 (unwrap-GIOStream* stream2))
        (~flags (unwrap~fixed flags))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_io_stream_splice_async
      ~stream1
      ~stream2
      ~flags
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_io_stream_splice_async)

;; extern gboolean g_io_stream_splice_finish(GAsyncResult *result, GError **
;;     error);
(define ~g_io_stream_splice_finish #f)
(define (g_io_stream_splice_finish result error)
  (unless
    ~g_io_stream_splice_finish
    (set! ~g_io_stream_splice_finish
      (fh-link-proc
        "g_io_stream_splice_finish"
        ffi:int
        (list '* '*))))
  (let ((~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_io_stream_splice_finish ~result ~error)))
(export g_io_stream_splice_finish)

;; extern gboolean g_io_stream_close(GIOStream *stream, GCancellable *
;;     cancellable, GError **error);
(define ~g_io_stream_close #f)
(define (g_io_stream_close stream cancellable error)
  (unless
    ~g_io_stream_close
    (set! ~g_io_stream_close
      (fh-link-proc
        "g_io_stream_close"
        ffi:int
        (list '* '* '*))))
  (let ((~stream (unwrap-GIOStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_io_stream_close ~stream ~cancellable ~error)))
(export g_io_stream_close)

;; extern void g_io_stream_close_async(GIOStream *stream, int io_priority, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_io_stream_close_async #f)
(define (g_io_stream_close_async
         stream
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_io_stream_close_async
    (set! ~g_io_stream_close_async
      (fh-link-proc
        "g_io_stream_close_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~stream (unwrap-GIOStream* stream))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_io_stream_close_async
      ~stream
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_io_stream_close_async)

;; extern gboolean g_io_stream_close_finish(GIOStream *stream, GAsyncResult *
;;     result, GError **error);
(define ~g_io_stream_close_finish #f)
(define (g_io_stream_close_finish stream result error)
  (unless
    ~g_io_stream_close_finish
    (set! ~g_io_stream_close_finish
      (fh-link-proc
        "g_io_stream_close_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~stream (unwrap-GIOStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_io_stream_close_finish
      ~stream
      ~result
      ~error)))
(export g_io_stream_close_finish)

;; extern gboolean g_io_stream_is_closed(GIOStream *stream);
(define ~g_io_stream_is_closed #f)
(define (g_io_stream_is_closed stream)
  (unless
    ~g_io_stream_is_closed
    (set! ~g_io_stream_is_closed
      (fh-link-proc
        "g_io_stream_is_closed"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GIOStream* stream)))
    (~g_io_stream_is_closed ~stream)))
(export g_io_stream_is_closed)

;; extern gboolean g_io_stream_has_pending(GIOStream *stream);
(define ~g_io_stream_has_pending #f)
(define (g_io_stream_has_pending stream)
  (unless
    ~g_io_stream_has_pending
    (set! ~g_io_stream_has_pending
      (fh-link-proc
        "g_io_stream_has_pending"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GIOStream* stream)))
    (~g_io_stream_has_pending ~stream)))
(export g_io_stream_has_pending)

;; extern gboolean g_io_stream_set_pending(GIOStream *stream, GError **error);
(define ~g_io_stream_set_pending #f)
(define (g_io_stream_set_pending stream error)
  (unless
    ~g_io_stream_set_pending
    (set! ~g_io_stream_set_pending
      (fh-link-proc
        "g_io_stream_set_pending"
        ffi:int
        (list '* '*))))
  (let ((~stream (unwrap-GIOStream* stream))
        (~error (unwrap~pointer error)))
    (~g_io_stream_set_pending ~stream ~error)))
(export g_io_stream_set_pending)

;; extern void g_io_stream_clear_pending(GIOStream *stream);
(define ~g_io_stream_clear_pending #f)
(define (g_io_stream_clear_pending stream)
  (unless
    ~g_io_stream_clear_pending
    (set! ~g_io_stream_clear_pending
      (fh-link-proc
        "g_io_stream_clear_pending"
        ffi:void
        (list '*))))
  (let ((~stream (unwrap-GIOStream* stream)))
    (~g_io_stream_clear_pending ~stream)))
(export g_io_stream_clear_pending)

;; typedef struct _GFileIOStreamClass GFileIOStreamClass;
(define GFileIOStreamClass-desc void)
(export GFileIOStreamClass-desc)
(define GFileIOStreamClass*-desc (bs:pointer (delay GFileIOStreamClass-desc)))
(export GFileIOStreamClass*-desc)
(define-fh-pointer-type GFileIOStreamClass* GFileIOStreamClass*-desc)

;; typedef struct _GFileIOStreamPrivate GFileIOStreamPrivate;
(define GFileIOStreamPrivate-desc void)
(export GFileIOStreamPrivate-desc)
(define GFileIOStreamPrivate*-desc (bs:pointer GFileIOStreamPrivate-desc))
(export GFileIOStreamPrivate*-desc)
(define-fh-pointer-type GFileIOStreamPrivate* GFileIOStreamPrivate*-desc)

;; struct _GFileIOStream {
;;   GIOStream parent_instance;
;;   /*< private >*/
;;   GFileIOStreamPrivate *priv;
;; };
(define struct-_GFileIOStream-desc
  (bs:struct
    (list `(parent_instance ,GIOStream-desc)
          `(priv ,(bs:pointer (delay GFileIOStreamPrivate*-desc))))))
(export struct-_GFileIOStream-desc)
(define-fh-compound-type/p struct-_GFileIOStream struct-_GFileIOStream-desc)
(set! GFileIOStream-desc struct-_GFileIOStream-desc)
(define-fh-compound-type GFileIOStream GFileIOStream-desc)

;; struct _GFileIOStreamClass {
;;   GIOStreamClass parent_class;
;;   goffset (*tell)(GFileIOStream *stream);
;;   gboolean (*can_seek)(GFileIOStream *stream);
;;   gboolean (*seek)(GFileIOStream *stream, goffset offset, GSeekType type, 
;;       GCancellable *cancellable, GError **error);
;;   gboolean (*can_truncate)(GFileIOStream *stream);
;;   gboolean (*truncate_fn)(GFileIOStream *stream, goffset size, GCancellable 
;;       *cancellable, GError **error);
;;   GFileInfo *(*query_info)(GFileIOStream *stream, const char *attributes, 
;;       GCancellable *cancellable, GError **error);
;;   void (*query_info_async)(GFileIOStream *stream, const char *attributes, 
;;       int io_priority, GCancellable *cancellable, GAsyncReadyCallback 
;;       callback, gpointer user_data);
;;   GFileInfo *(*query_info_finish)(GFileIOStream *stream, GAsyncResult *
;;       result, GError **error);
;;   char *(*get_etag)(GFileIOStream *stream);
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GFileIOStreamClass-desc
  (bs:struct
    (list `(parent_class ,GIOStreamClass-desc)
          `(tell ,(bs:pointer void))
          `(can_seek ,(bs:pointer void))
          `(seek ,(bs:pointer void))
          `(can_truncate ,(bs:pointer void))
          `(truncate_fn ,(bs:pointer void))
          `(query_info ,(bs:pointer void))
          `(query_info_async ,(bs:pointer void))
          `(query_info_finish ,(bs:pointer void))
          `(get_etag ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GFileIOStreamClass-desc)
(define-fh-compound-type/p struct-_GFileIOStreamClass struct-_GFileIOStreamClass-desc)
(set! GFileIOStreamClass-desc struct-_GFileIOStreamClass-desc)
(define-fh-compound-type GFileIOStreamClass GFileIOStreamClass-desc)

;; extern GType g_file_io_stream_get_type(void);
(define ~g_file_io_stream_get_type #f)
(define (g_file_io_stream_get_type)
  (unless
    ~g_file_io_stream_get_type
    (set! ~g_file_io_stream_get_type
      (fh-link-proc
        "g_file_io_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_io_stream_get_type)))
(export g_file_io_stream_get_type)

;; extern GFileInfo *g_file_io_stream_query_info(GFileIOStream *stream, const 
;;     char *attributes, GCancellable *cancellable, GError **error);
(define ~g_file_io_stream_query_info #f)
(define (g_file_io_stream_query_info
         stream
         attributes
         cancellable
         error)
  (unless
    ~g_file_io_stream_query_info
    (set! ~g_file_io_stream_query_info
      (fh-link-proc
        "g_file_io_stream_query_info"
        '*
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GFileIOStream* stream))
        (~attributes (unwrap~pointer attributes))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileInfo*
      (~g_file_io_stream_query_info
        ~stream
        ~attributes
        ~cancellable
        ~error))))
(export g_file_io_stream_query_info)

;; extern void g_file_io_stream_query_info_async(GFileIOStream *stream, const 
;;     char *attributes, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_io_stream_query_info_async #f)
(define (g_file_io_stream_query_info_async
         stream
         attributes
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_io_stream_query_info_async
    (set! ~g_file_io_stream_query_info_async
      (fh-link-proc
        "g_file_io_stream_query_info_async"
        ffi:void
        (list '* '* ffi:int '* '* '*))))
  (let ((~stream (unwrap-GFileIOStream* stream))
        (~attributes (unwrap~pointer attributes))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_io_stream_query_info_async
      ~stream
      ~attributes
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_io_stream_query_info_async)

;; extern GFileInfo *g_file_io_stream_query_info_finish(GFileIOStream *stream, 
;;     GAsyncResult *result, GError **error);
(define ~g_file_io_stream_query_info_finish #f)
(define (g_file_io_stream_query_info_finish
         stream
         result
         error)
  (unless
    ~g_file_io_stream_query_info_finish
    (set! ~g_file_io_stream_query_info_finish
      (fh-link-proc
        "g_file_io_stream_query_info_finish"
        '*
        (list '* '* '*))))
  (let ((~stream (unwrap-GFileIOStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GFileInfo*
      (~g_file_io_stream_query_info_finish
        ~stream
        ~result
        ~error))))
(export g_file_io_stream_query_info_finish)

;; extern char *g_file_io_stream_get_etag(GFileIOStream *stream);
(define ~g_file_io_stream_get_etag #f)
(define (g_file_io_stream_get_etag stream)
  (unless
    ~g_file_io_stream_get_etag
    (set! ~g_file_io_stream_get_etag
      (fh-link-proc
        "g_file_io_stream_get_etag"
        '*
        (list '*))))
  (let ((~stream (unwrap-GFileIOStream* stream)))
    (~g_file_io_stream_get_etag ~stream)))
(export g_file_io_stream_get_etag)

;; typedef struct _GFileMonitorClass GFileMonitorClass;
(define GFileMonitorClass-desc void)
(export GFileMonitorClass-desc)
(define GFileMonitorClass*-desc (bs:pointer (delay GFileMonitorClass-desc)))
(export GFileMonitorClass*-desc)
(define-fh-pointer-type GFileMonitorClass* GFileMonitorClass*-desc)

;; typedef struct _GFileMonitorPrivate GFileMonitorPrivate;
(define GFileMonitorPrivate-desc void)
(export GFileMonitorPrivate-desc)
(define GFileMonitorPrivate*-desc (bs:pointer GFileMonitorPrivate-desc))
(export GFileMonitorPrivate*-desc)
(define-fh-pointer-type GFileMonitorPrivate* GFileMonitorPrivate*-desc)

;; struct _GFileMonitor {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GFileMonitorPrivate *priv;
;; };
(define struct-_GFileMonitor-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GFileMonitorPrivate*-desc))))))
(export struct-_GFileMonitor-desc)
(define-fh-compound-type/p struct-_GFileMonitor struct-_GFileMonitor-desc)
(set! GFileMonitor-desc struct-_GFileMonitor-desc)
(define-fh-compound-type GFileMonitor GFileMonitor-desc)

;; struct _GFileMonitorClass {
;;   GObjectClass parent_class;
;;   /* Signals */
;;   void (*changed)(GFileMonitor *monitor, GFile *file, GFile *other_file, 
;;       GFileMonitorEvent event_type);
;;   /* Virtual Table */
;;   gboolean (*cancel)(GFileMonitor *monitor);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GFileMonitorClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(changed ,(bs:pointer void))
          `(cancel ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GFileMonitorClass-desc)
(define-fh-compound-type/p struct-_GFileMonitorClass struct-_GFileMonitorClass-desc)
(set! GFileMonitorClass-desc struct-_GFileMonitorClass-desc)
(define-fh-compound-type GFileMonitorClass GFileMonitorClass-desc)

;; extern GType g_file_monitor_get_type(void);
(define ~g_file_monitor_get_type #f)
(define (g_file_monitor_get_type)
  (unless
    ~g_file_monitor_get_type
    (set! ~g_file_monitor_get_type
      (fh-link-proc
        "g_file_monitor_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_monitor_get_type)))
(export g_file_monitor_get_type)

;; extern gboolean g_file_monitor_cancel(GFileMonitor *monitor);
(define ~g_file_monitor_cancel #f)
(define (g_file_monitor_cancel monitor)
  (unless
    ~g_file_monitor_cancel
    (set! ~g_file_monitor_cancel
      (fh-link-proc
        "g_file_monitor_cancel"
        ffi:int
        (list '*))))
  (let ((~monitor (unwrap-GFileMonitor* monitor)))
    (~g_file_monitor_cancel ~monitor)))
(export g_file_monitor_cancel)

;; extern gboolean g_file_monitor_is_cancelled(GFileMonitor *monitor);
(define ~g_file_monitor_is_cancelled #f)
(define (g_file_monitor_is_cancelled monitor)
  (unless
    ~g_file_monitor_is_cancelled
    (set! ~g_file_monitor_is_cancelled
      (fh-link-proc
        "g_file_monitor_is_cancelled"
        ffi:int
        (list '*))))
  (let ((~monitor (unwrap-GFileMonitor* monitor)))
    (~g_file_monitor_is_cancelled ~monitor)))
(export g_file_monitor_is_cancelled)

;; extern void g_file_monitor_set_rate_limit(GFileMonitor *monitor, gint 
;;     limit_msecs);
(define ~g_file_monitor_set_rate_limit #f)
(define (g_file_monitor_set_rate_limit
         monitor
         limit_msecs)
  (unless
    ~g_file_monitor_set_rate_limit
    (set! ~g_file_monitor_set_rate_limit
      (fh-link-proc
        "g_file_monitor_set_rate_limit"
        ffi:void
        (list '* ffi:int))))
  (let ((~monitor (unwrap-GFileMonitor* monitor))
        (~limit_msecs (unwrap~fixed limit_msecs)))
    (~g_file_monitor_set_rate_limit
      ~monitor
      ~limit_msecs)))
(export g_file_monitor_set_rate_limit)

;; extern void g_file_monitor_emit_event(GFileMonitor *monitor, GFile *child, 
;;     GFile *other_file, GFileMonitorEvent event_type);
(define ~g_file_monitor_emit_event #f)
(define (g_file_monitor_emit_event
         monitor
         child
         other_file
         event_type)
  (unless
    ~g_file_monitor_emit_event
    (set! ~g_file_monitor_emit_event
      (fh-link-proc
        "g_file_monitor_emit_event"
        ffi:void
        (list '* '* '* ffi:int))))
  (let ((~monitor (unwrap-GFileMonitor* monitor))
        (~child (unwrap-GFile* child))
        (~other_file (unwrap-GFile* other_file))
        (~event_type (unwrap~fixed event_type)))
    (~g_file_monitor_emit_event
      ~monitor
      ~child
      ~other_file
      ~event_type)))
(export g_file_monitor_emit_event)

;; typedef struct _GFilenameCompleterClass GFilenameCompleterClass;
(define GFilenameCompleterClass-desc void)
(export GFilenameCompleterClass-desc)
(define GFilenameCompleterClass*-desc (bs:pointer (delay GFilenameCompleterClass-desc)))
(export GFilenameCompleterClass*-desc)
(define-fh-pointer-type GFilenameCompleterClass* GFilenameCompleterClass*-desc)

;; struct _GFilenameCompleterClass {
;;   GObjectClass parent_class;
;;   /*< public >*/
;;   /* signals */
;;   void (*got_completion_data)(GFilenameCompleter *filename_completer);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;; };
(define struct-_GFilenameCompleterClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(got_completion_data ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void)))))
(export struct-_GFilenameCompleterClass-desc)
(define-fh-compound-type/p struct-_GFilenameCompleterClass struct-_GFilenameCompleterClass-desc)
(set! GFilenameCompleterClass-desc struct-_GFilenameCompleterClass-desc)
(define-fh-compound-type GFilenameCompleterClass GFilenameCompleterClass-desc)

;; extern GType g_filename_completer_get_type(void);
(define ~g_filename_completer_get_type #f)
(define (g_filename_completer_get_type)
  (unless
    ~g_filename_completer_get_type
    (set! ~g_filename_completer_get_type
      (fh-link-proc
        "g_filename_completer_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_filename_completer_get_type)))
(export g_filename_completer_get_type)

;; extern GFilenameCompleter *g_filename_completer_new(void);
(define ~g_filename_completer_new #f)
(define (g_filename_completer_new)
  (unless
    ~g_filename_completer_new
    (set! ~g_filename_completer_new
      (fh-link-proc
        "g_filename_completer_new"
        '*
        (list))))
  (let ()
    (wrap-GFilenameCompleter*
      (~g_filename_completer_new))))
(export g_filename_completer_new)

;; extern char *g_filename_completer_get_completion_suffix(GFilenameCompleter *
;;     completer, const char *initial_text);
(define ~g_filename_completer_get_completion_suffix #f)
(define (g_filename_completer_get_completion_suffix
         completer
         initial_text)
  (unless
    ~g_filename_completer_get_completion_suffix
    (set! ~g_filename_completer_get_completion_suffix
      (fh-link-proc
        "g_filename_completer_get_completion_suffix"
        '*
        (list '* '*))))
  (let ((~completer
          (unwrap-GFilenameCompleter* completer))
        (~initial_text (unwrap~pointer initial_text)))
    (~g_filename_completer_get_completion_suffix
      ~completer
      ~initial_text)))
(export g_filename_completer_get_completion_suffix)

;; extern char **g_filename_completer_get_completions(GFilenameCompleter *
;;     completer, const char *initial_text);
(define ~g_filename_completer_get_completions #f)
(define (g_filename_completer_get_completions
         completer
         initial_text)
  (unless
    ~g_filename_completer_get_completions
    (set! ~g_filename_completer_get_completions
      (fh-link-proc
        "g_filename_completer_get_completions"
        '*
        (list '* '*))))
  (let ((~completer
          (unwrap-GFilenameCompleter* completer))
        (~initial_text (unwrap~pointer initial_text)))
    (~g_filename_completer_get_completions
      ~completer
      ~initial_text)))
(export g_filename_completer_get_completions)

;; extern void g_filename_completer_set_dirs_only(GFilenameCompleter *completer
;;     , gboolean dirs_only);
(define ~g_filename_completer_set_dirs_only #f)
(define (g_filename_completer_set_dirs_only
         completer
         dirs_only)
  (unless
    ~g_filename_completer_set_dirs_only
    (set! ~g_filename_completer_set_dirs_only
      (fh-link-proc
        "g_filename_completer_set_dirs_only"
        ffi:void
        (list '* ffi:int))))
  (let ((~completer
          (unwrap-GFilenameCompleter* completer))
        (~dirs_only (unwrap~fixed dirs_only)))
    (~g_filename_completer_set_dirs_only
      ~completer
      ~dirs_only)))
(export g_filename_completer_set_dirs_only)

;; typedef struct _GFileOutputStreamClass GFileOutputStreamClass;
(define GFileOutputStreamClass-desc void)
(export GFileOutputStreamClass-desc)
(define GFileOutputStreamClass*-desc (bs:pointer (delay GFileOutputStreamClass-desc)))
(export GFileOutputStreamClass*-desc)
(define-fh-pointer-type GFileOutputStreamClass* GFileOutputStreamClass*-desc)

;; typedef struct _GFileOutputStreamPrivate GFileOutputStreamPrivate;
(define GFileOutputStreamPrivate-desc void)
(export GFileOutputStreamPrivate-desc)
(define GFileOutputStreamPrivate*-desc (bs:pointer GFileOutputStreamPrivate-desc))
(export GFileOutputStreamPrivate*-desc)
(define-fh-pointer-type GFileOutputStreamPrivate* GFileOutputStreamPrivate*-desc)

;; struct _GFileOutputStream {
;;   GOutputStream parent_instance;
;;   /*< private >*/
;;   GFileOutputStreamPrivate *priv;
;; };
(define struct-_GFileOutputStream-desc
  (bs:struct
    (list `(parent_instance ,GOutputStream-desc)
          `(priv ,(bs:pointer
                    (delay GFileOutputStreamPrivate*-desc))))))
(export struct-_GFileOutputStream-desc)
(define-fh-compound-type/p struct-_GFileOutputStream struct-_GFileOutputStream-desc)
(set! GFileOutputStream-desc struct-_GFileOutputStream-desc)
(define-fh-compound-type GFileOutputStream GFileOutputStream-desc)

;; struct _GFileOutputStreamClass {
;;   GOutputStreamClass parent_class;
;;   goffset (*tell)(GFileOutputStream *stream);
;;   gboolean (*can_seek)(GFileOutputStream *stream);
;;   gboolean (*seek)(GFileOutputStream *stream, goffset offset, GSeekType type
;;       , GCancellable *cancellable, GError **error);
;;   gboolean (*can_truncate)(GFileOutputStream *stream);
;;   gboolean (*truncate_fn)(GFileOutputStream *stream, goffset size, 
;;       GCancellable *cancellable, GError **error);
;;   GFileInfo *(*query_info)(GFileOutputStream *stream, const char *attributes
;;       , GCancellable *cancellable, GError **error);
;;   void (*query_info_async)(GFileOutputStream *stream, const char *attributes
;;       , int io_priority, GCancellable *cancellable, GAsyncReadyCallback 
;;       callback, gpointer user_data);
;;   GFileInfo *(*query_info_finish)(GFileOutputStream *stream, GAsyncResult *
;;       result, GError **error);
;;   char *(*get_etag)(GFileOutputStream *stream);
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GFileOutputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GOutputStreamClass-desc)
          `(tell ,(bs:pointer void))
          `(can_seek ,(bs:pointer void))
          `(seek ,(bs:pointer void))
          `(can_truncate ,(bs:pointer void))
          `(truncate_fn ,(bs:pointer void))
          `(query_info ,(bs:pointer void))
          `(query_info_async ,(bs:pointer void))
          `(query_info_finish ,(bs:pointer void))
          `(get_etag ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GFileOutputStreamClass-desc)
(define-fh-compound-type/p struct-_GFileOutputStreamClass struct-_GFileOutputStreamClass-desc)
(set! GFileOutputStreamClass-desc struct-_GFileOutputStreamClass-desc)
(define-fh-compound-type GFileOutputStreamClass GFileOutputStreamClass-desc)

;; extern GType g_file_output_stream_get_type(void);
(define ~g_file_output_stream_get_type #f)
(define (g_file_output_stream_get_type)
  (unless
    ~g_file_output_stream_get_type
    (set! ~g_file_output_stream_get_type
      (fh-link-proc
        "g_file_output_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_output_stream_get_type)))
(export g_file_output_stream_get_type)

;; extern GFileInfo *g_file_output_stream_query_info(GFileOutputStream *stream
;;     , const char *attributes, GCancellable *cancellable, GError **error);
(define ~g_file_output_stream_query_info #f)
(define (g_file_output_stream_query_info
         stream
         attributes
         cancellable
         error)
  (unless
    ~g_file_output_stream_query_info
    (set! ~g_file_output_stream_query_info
      (fh-link-proc
        "g_file_output_stream_query_info"
        '*
        (list '* '* '* '*))))
  (let ((~stream (unwrap-GFileOutputStream* stream))
        (~attributes (unwrap~pointer attributes))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GFileInfo*
      (~g_file_output_stream_query_info
        ~stream
        ~attributes
        ~cancellable
        ~error))))
(export g_file_output_stream_query_info)

;; extern void g_file_output_stream_query_info_async(GFileOutputStream *stream
;;     , const char *attributes, int io_priority, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_file_output_stream_query_info_async #f)
(define (g_file_output_stream_query_info_async
         stream
         attributes
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_file_output_stream_query_info_async
    (set! ~g_file_output_stream_query_info_async
      (fh-link-proc
        "g_file_output_stream_query_info_async"
        ffi:void
        (list '* '* ffi:int '* '* '*))))
  (let ((~stream (unwrap-GFileOutputStream* stream))
        (~attributes (unwrap~pointer attributes))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_file_output_stream_query_info_async
      ~stream
      ~attributes
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_file_output_stream_query_info_async)

;; extern GFileInfo *g_file_output_stream_query_info_finish(GFileOutputStream *
;;     stream, GAsyncResult *result, GError **error);
(define ~g_file_output_stream_query_info_finish #f)
(define (g_file_output_stream_query_info_finish
         stream
         result
         error)
  (unless
    ~g_file_output_stream_query_info_finish
    (set! ~g_file_output_stream_query_info_finish
      (fh-link-proc
        "g_file_output_stream_query_info_finish"
        '*
        (list '* '* '*))))
  (let ((~stream (unwrap-GFileOutputStream* stream))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GFileInfo*
      (~g_file_output_stream_query_info_finish
        ~stream
        ~result
        ~error))))
(export g_file_output_stream_query_info_finish)

;; extern char *g_file_output_stream_get_etag(GFileOutputStream *stream);
(define ~g_file_output_stream_get_etag #f)
(define (g_file_output_stream_get_etag stream)
  (unless
    ~g_file_output_stream_get_etag
    (set! ~g_file_output_stream_get_etag
      (fh-link-proc
        "g_file_output_stream_get_etag"
        '*
        (list '*))))
  (let ((~stream (unwrap-GFileOutputStream* stream)))
    (~g_file_output_stream_get_etag ~stream)))
(export g_file_output_stream_get_etag)

;; typedef struct _GInetAddressClass GInetAddressClass;
(define GInetAddressClass-desc void)
(export GInetAddressClass-desc)
(define GInetAddressClass*-desc (bs:pointer (delay GInetAddressClass-desc)))
(export GInetAddressClass*-desc)
(define-fh-pointer-type GInetAddressClass* GInetAddressClass*-desc)

;; typedef struct _GInetAddressPrivate GInetAddressPrivate;
(define GInetAddressPrivate-desc void)
(export GInetAddressPrivate-desc)
(define GInetAddressPrivate*-desc (bs:pointer GInetAddressPrivate-desc))
(export GInetAddressPrivate*-desc)
(define-fh-pointer-type GInetAddressPrivate* GInetAddressPrivate*-desc)

;; struct _GInetAddress {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GInetAddressPrivate *priv;
;; };
(define struct-_GInetAddress-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GInetAddressPrivate*-desc))))))
(export struct-_GInetAddress-desc)
(define-fh-compound-type/p struct-_GInetAddress struct-_GInetAddress-desc)
(set! GInetAddress-desc struct-_GInetAddress-desc)
(define-fh-compound-type GInetAddress GInetAddress-desc)

;; struct _GInetAddressClass {
;;   GObjectClass parent_class;
;;   gchar *(*to_string)(GInetAddress *address);
;;   const guint8 *(*to_bytes)(GInetAddress *address);
;; };
(define struct-_GInetAddressClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(to_string ,(bs:pointer void))
          `(to_bytes ,(bs:pointer void)))))
(export struct-_GInetAddressClass-desc)
(define-fh-compound-type/p struct-_GInetAddressClass struct-_GInetAddressClass-desc)
(set! GInetAddressClass-desc struct-_GInetAddressClass-desc)
(define-fh-compound-type GInetAddressClass GInetAddressClass-desc)

;; extern GType g_inet_address_get_type(void);
(define ~g_inet_address_get_type #f)
(define (g_inet_address_get_type)
  (unless
    ~g_inet_address_get_type
    (set! ~g_inet_address_get_type
      (fh-link-proc
        "g_inet_address_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_inet_address_get_type)))
(export g_inet_address_get_type)

;; extern GInetAddress *g_inet_address_new_from_string(const gchar *string);
(define ~g_inet_address_new_from_string #f)
(define (g_inet_address_new_from_string string)
  (unless
    ~g_inet_address_new_from_string
    (set! ~g_inet_address_new_from_string
      (fh-link-proc
        "g_inet_address_new_from_string"
        '*
        (list '*))))
  (let ((~string (unwrap~pointer string)))
    (wrap-GInetAddress*
      (~g_inet_address_new_from_string ~string))))
(export g_inet_address_new_from_string)

;; extern GInetAddress *g_inet_address_new_from_bytes(const guint8 *bytes, 
;;     GSocketFamily family);
(define ~g_inet_address_new_from_bytes #f)
(define (g_inet_address_new_from_bytes bytes family)
  (unless
    ~g_inet_address_new_from_bytes
    (set! ~g_inet_address_new_from_bytes
      (fh-link-proc
        "g_inet_address_new_from_bytes"
        '*
        (list '* ffi:int))))
  (let ((~bytes (unwrap~pointer bytes))
        (~family (unwrap~fixed family)))
    (wrap-GInetAddress*
      (~g_inet_address_new_from_bytes ~bytes ~family))))
(export g_inet_address_new_from_bytes)

;; extern GInetAddress *g_inet_address_new_loopback(GSocketFamily family);
(define ~g_inet_address_new_loopback #f)
(define (g_inet_address_new_loopback family)
  (unless
    ~g_inet_address_new_loopback
    (set! ~g_inet_address_new_loopback
      (fh-link-proc
        "g_inet_address_new_loopback"
        '*
        (list ffi:int))))
  (let ((~family (unwrap~fixed family)))
    (wrap-GInetAddress*
      (~g_inet_address_new_loopback ~family))))
(export g_inet_address_new_loopback)

;; extern GInetAddress *g_inet_address_new_any(GSocketFamily family);
(define ~g_inet_address_new_any #f)
(define (g_inet_address_new_any family)
  (unless
    ~g_inet_address_new_any
    (set! ~g_inet_address_new_any
      (fh-link-proc
        "g_inet_address_new_any"
        '*
        (list ffi:int))))
  (let ((~family (unwrap~fixed family)))
    (wrap-GInetAddress*
      (~g_inet_address_new_any ~family))))
(export g_inet_address_new_any)

;; extern gboolean g_inet_address_equal(GInetAddress *address, GInetAddress *
;;     other_address);
(define ~g_inet_address_equal #f)
(define (g_inet_address_equal address other_address)
  (unless
    ~g_inet_address_equal
    (set! ~g_inet_address_equal
      (fh-link-proc
        "g_inet_address_equal"
        ffi:int
        (list '* '*))))
  (let ((~address (unwrap-GInetAddress* address))
        (~other_address
          (unwrap-GInetAddress* other_address)))
    (~g_inet_address_equal ~address ~other_address)))
(export g_inet_address_equal)

;; extern gchar *g_inet_address_to_string(GInetAddress *address);
(define ~g_inet_address_to_string #f)
(define (g_inet_address_to_string address)
  (unless
    ~g_inet_address_to_string
    (set! ~g_inet_address_to_string
      (fh-link-proc
        "g_inet_address_to_string"
        '*
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_to_string ~address)))
(export g_inet_address_to_string)

;; extern const guint8 *g_inet_address_to_bytes(GInetAddress *address);
(define ~g_inet_address_to_bytes #f)
(define (g_inet_address_to_bytes address)
  (unless
    ~g_inet_address_to_bytes
    (set! ~g_inet_address_to_bytes
      (fh-link-proc
        "g_inet_address_to_bytes"
        '*
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_to_bytes ~address)))
(export g_inet_address_to_bytes)

;; extern gsize g_inet_address_get_native_size(GInetAddress *address);
(define ~g_inet_address_get_native_size #f)
(define (g_inet_address_get_native_size address)
  (unless
    ~g_inet_address_get_native_size
    (set! ~g_inet_address_get_native_size
      (fh-link-proc
        "g_inet_address_get_native_size"
        ffi:unsigned-long
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_native_size ~address)))
(export g_inet_address_get_native_size)

;; extern GSocketFamily g_inet_address_get_family(GInetAddress *address);
(define ~g_inet_address_get_family #f)
(define (g_inet_address_get_family address)
  (unless
    ~g_inet_address_get_family
    (set! ~g_inet_address_get_family
      (fh-link-proc
        "g_inet_address_get_family"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_family ~address)))
(export g_inet_address_get_family)

;; extern gboolean g_inet_address_get_is_any(GInetAddress *address);
(define ~g_inet_address_get_is_any #f)
(define (g_inet_address_get_is_any address)
  (unless
    ~g_inet_address_get_is_any
    (set! ~g_inet_address_get_is_any
      (fh-link-proc
        "g_inet_address_get_is_any"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_is_any ~address)))
(export g_inet_address_get_is_any)

;; extern gboolean g_inet_address_get_is_loopback(GInetAddress *address);
(define ~g_inet_address_get_is_loopback #f)
(define (g_inet_address_get_is_loopback address)
  (unless
    ~g_inet_address_get_is_loopback
    (set! ~g_inet_address_get_is_loopback
      (fh-link-proc
        "g_inet_address_get_is_loopback"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_is_loopback ~address)))
(export g_inet_address_get_is_loopback)

;; extern gboolean g_inet_address_get_is_link_local(GInetAddress *address);
(define ~g_inet_address_get_is_link_local #f)
(define (g_inet_address_get_is_link_local address)
  (unless
    ~g_inet_address_get_is_link_local
    (set! ~g_inet_address_get_is_link_local
      (fh-link-proc
        "g_inet_address_get_is_link_local"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_is_link_local ~address)))
(export g_inet_address_get_is_link_local)

;; extern gboolean g_inet_address_get_is_site_local(GInetAddress *address);
(define ~g_inet_address_get_is_site_local #f)
(define (g_inet_address_get_is_site_local address)
  (unless
    ~g_inet_address_get_is_site_local
    (set! ~g_inet_address_get_is_site_local
      (fh-link-proc
        "g_inet_address_get_is_site_local"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_is_site_local ~address)))
(export g_inet_address_get_is_site_local)

;; extern gboolean g_inet_address_get_is_multicast(GInetAddress *address);
(define ~g_inet_address_get_is_multicast #f)
(define (g_inet_address_get_is_multicast address)
  (unless
    ~g_inet_address_get_is_multicast
    (set! ~g_inet_address_get_is_multicast
      (fh-link-proc
        "g_inet_address_get_is_multicast"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_is_multicast ~address)))
(export g_inet_address_get_is_multicast)

;; extern gboolean g_inet_address_get_is_mc_global(GInetAddress *address);
(define ~g_inet_address_get_is_mc_global #f)
(define (g_inet_address_get_is_mc_global address)
  (unless
    ~g_inet_address_get_is_mc_global
    (set! ~g_inet_address_get_is_mc_global
      (fh-link-proc
        "g_inet_address_get_is_mc_global"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_is_mc_global ~address)))
(export g_inet_address_get_is_mc_global)

;; extern gboolean g_inet_address_get_is_mc_link_local(GInetAddress *address);
(define ~g_inet_address_get_is_mc_link_local #f)
(define (g_inet_address_get_is_mc_link_local address)
  (unless
    ~g_inet_address_get_is_mc_link_local
    (set! ~g_inet_address_get_is_mc_link_local
      (fh-link-proc
        "g_inet_address_get_is_mc_link_local"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_is_mc_link_local ~address)))
(export g_inet_address_get_is_mc_link_local)

;; extern gboolean g_inet_address_get_is_mc_node_local(GInetAddress *address);
(define ~g_inet_address_get_is_mc_node_local #f)
(define (g_inet_address_get_is_mc_node_local address)
  (unless
    ~g_inet_address_get_is_mc_node_local
    (set! ~g_inet_address_get_is_mc_node_local
      (fh-link-proc
        "g_inet_address_get_is_mc_node_local"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_is_mc_node_local ~address)))
(export g_inet_address_get_is_mc_node_local)

;; extern gboolean g_inet_address_get_is_mc_org_local(GInetAddress *address);
(define ~g_inet_address_get_is_mc_org_local #f)
(define (g_inet_address_get_is_mc_org_local address)
  (unless
    ~g_inet_address_get_is_mc_org_local
    (set! ~g_inet_address_get_is_mc_org_local
      (fh-link-proc
        "g_inet_address_get_is_mc_org_local"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_is_mc_org_local ~address)))
(export g_inet_address_get_is_mc_org_local)

;; extern gboolean g_inet_address_get_is_mc_site_local(GInetAddress *address);
(define ~g_inet_address_get_is_mc_site_local #f)
(define (g_inet_address_get_is_mc_site_local address)
  (unless
    ~g_inet_address_get_is_mc_site_local
    (set! ~g_inet_address_get_is_mc_site_local
      (fh-link-proc
        "g_inet_address_get_is_mc_site_local"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GInetAddress* address)))
    (~g_inet_address_get_is_mc_site_local ~address)))
(export g_inet_address_get_is_mc_site_local)

;; typedef struct _GInetAddressMaskClass GInetAddressMaskClass;
(define GInetAddressMaskClass-desc void)
(export GInetAddressMaskClass-desc)
(define GInetAddressMaskClass*-desc (bs:pointer (delay GInetAddressMaskClass-desc)))
(export GInetAddressMaskClass*-desc)
(define-fh-pointer-type GInetAddressMaskClass* GInetAddressMaskClass*-desc)

;; typedef struct _GInetAddressMaskPrivate GInetAddressMaskPrivate;
(define GInetAddressMaskPrivate-desc void)
(export GInetAddressMaskPrivate-desc)
(define GInetAddressMaskPrivate*-desc (bs:pointer GInetAddressMaskPrivate-desc))
(export GInetAddressMaskPrivate*-desc)
(define-fh-pointer-type GInetAddressMaskPrivate* GInetAddressMaskPrivate*-desc)

;; struct _GInetAddressMask {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GInetAddressMaskPrivate *priv;
;; };
(define struct-_GInetAddressMask-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GInetAddressMaskPrivate*-desc))))))
(export struct-_GInetAddressMask-desc)
(define-fh-compound-type/p struct-_GInetAddressMask struct-_GInetAddressMask-desc)
(set! GInetAddressMask-desc struct-_GInetAddressMask-desc)
(define-fh-compound-type GInetAddressMask GInetAddressMask-desc)

;; struct _GInetAddressMaskClass {
;;   GObjectClass parent_class;
;; };
(define struct-_GInetAddressMaskClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc))))))))
(export struct-_GInetAddressMaskClass-desc)
(define-fh-compound-type/p struct-_GInetAddressMaskClass struct-_GInetAddressMaskClass-desc)
(set! GInetAddressMaskClass-desc struct-_GInetAddressMaskClass-desc)
(define-fh-compound-type GInetAddressMaskClass GInetAddressMaskClass-desc)

;; extern GType g_inet_address_mask_get_type(void);
(define ~g_inet_address_mask_get_type #f)
(define (g_inet_address_mask_get_type)
  (unless
    ~g_inet_address_mask_get_type
    (set! ~g_inet_address_mask_get_type
      (fh-link-proc
        "g_inet_address_mask_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_inet_address_mask_get_type)))
(export g_inet_address_mask_get_type)

;; extern GInetAddressMask *g_inet_address_mask_new(GInetAddress *addr, guint 
;;     length, GError **error);
(define ~g_inet_address_mask_new #f)
(define (g_inet_address_mask_new addr length error)
  (unless
    ~g_inet_address_mask_new
    (set! ~g_inet_address_mask_new
      (fh-link-proc
        "g_inet_address_mask_new"
        '*
        (list '* ffi:unsigned-int '*))))
  (let ((~addr (unwrap-GInetAddress* addr))
        (~length (unwrap~fixed length))
        (~error (unwrap~pointer error)))
    (wrap-GInetAddressMask*
      (~g_inet_address_mask_new ~addr ~length ~error))))
(export g_inet_address_mask_new)

;; extern GInetAddressMask *g_inet_address_mask_new_from_string(const gchar *
;;     mask_string, GError **error);
(define ~g_inet_address_mask_new_from_string #f)
(define (g_inet_address_mask_new_from_string
         mask_string
         error)
  (unless
    ~g_inet_address_mask_new_from_string
    (set! ~g_inet_address_mask_new_from_string
      (fh-link-proc
        "g_inet_address_mask_new_from_string"
        '*
        (list '* '*))))
  (let ((~mask_string (unwrap~pointer mask_string))
        (~error (unwrap~pointer error)))
    (wrap-GInetAddressMask*
      (~g_inet_address_mask_new_from_string
        ~mask_string
        ~error))))
(export g_inet_address_mask_new_from_string)

;; extern gchar *g_inet_address_mask_to_string(GInetAddressMask *mask);
(define ~g_inet_address_mask_to_string #f)
(define (g_inet_address_mask_to_string mask)
  (unless
    ~g_inet_address_mask_to_string
    (set! ~g_inet_address_mask_to_string
      (fh-link-proc
        "g_inet_address_mask_to_string"
        '*
        (list '*))))
  (let ((~mask (unwrap-GInetAddressMask* mask)))
    (~g_inet_address_mask_to_string ~mask)))
(export g_inet_address_mask_to_string)

;; extern GSocketFamily g_inet_address_mask_get_family(GInetAddressMask *mask)
;;     ;
(define ~g_inet_address_mask_get_family #f)
(define (g_inet_address_mask_get_family mask)
  (unless
    ~g_inet_address_mask_get_family
    (set! ~g_inet_address_mask_get_family
      (fh-link-proc
        "g_inet_address_mask_get_family"
        ffi:int
        (list '*))))
  (let ((~mask (unwrap-GInetAddressMask* mask)))
    (~g_inet_address_mask_get_family ~mask)))
(export g_inet_address_mask_get_family)

;; extern GInetAddress *g_inet_address_mask_get_address(GInetAddressMask *mask)
;;     ;
(define ~g_inet_address_mask_get_address #f)
(define (g_inet_address_mask_get_address mask)
  (unless
    ~g_inet_address_mask_get_address
    (set! ~g_inet_address_mask_get_address
      (fh-link-proc
        "g_inet_address_mask_get_address"
        '*
        (list '*))))
  (let ((~mask (unwrap-GInetAddressMask* mask)))
    (wrap-GInetAddress*
      (~g_inet_address_mask_get_address ~mask))))
(export g_inet_address_mask_get_address)

;; extern guint g_inet_address_mask_get_length(GInetAddressMask *mask);
(define ~g_inet_address_mask_get_length #f)
(define (g_inet_address_mask_get_length mask)
  (unless
    ~g_inet_address_mask_get_length
    (set! ~g_inet_address_mask_get_length
      (fh-link-proc
        "g_inet_address_mask_get_length"
        ffi:unsigned-int
        (list '*))))
  (let ((~mask (unwrap-GInetAddressMask* mask)))
    (~g_inet_address_mask_get_length ~mask)))
(export g_inet_address_mask_get_length)

;; extern gboolean g_inet_address_mask_matches(GInetAddressMask *mask, 
;;     GInetAddress *address);
(define ~g_inet_address_mask_matches #f)
(define (g_inet_address_mask_matches mask address)
  (unless
    ~g_inet_address_mask_matches
    (set! ~g_inet_address_mask_matches
      (fh-link-proc
        "g_inet_address_mask_matches"
        ffi:int
        (list '* '*))))
  (let ((~mask (unwrap-GInetAddressMask* mask))
        (~address (unwrap-GInetAddress* address)))
    (~g_inet_address_mask_matches ~mask ~address)))
(export g_inet_address_mask_matches)

;; extern gboolean g_inet_address_mask_equal(GInetAddressMask *mask, 
;;     GInetAddressMask *mask2);
(define ~g_inet_address_mask_equal #f)
(define (g_inet_address_mask_equal mask mask2)
  (unless
    ~g_inet_address_mask_equal
    (set! ~g_inet_address_mask_equal
      (fh-link-proc
        "g_inet_address_mask_equal"
        ffi:int
        (list '* '*))))
  (let ((~mask (unwrap-GInetAddressMask* mask))
        (~mask2 (unwrap-GInetAddressMask* mask2)))
    (~g_inet_address_mask_equal ~mask ~mask2)))
(export g_inet_address_mask_equal)

;; typedef struct _GSocketAddressClass GSocketAddressClass;
(define GSocketAddressClass-desc void)
(export GSocketAddressClass-desc)
(define GSocketAddressClass*-desc (bs:pointer (delay GSocketAddressClass-desc)))
(export GSocketAddressClass*-desc)
(define-fh-pointer-type GSocketAddressClass* GSocketAddressClass*-desc)

;; struct _GSocketAddress {
;;   GObject parent_instance;
;; };
(define struct-_GSocketAddress-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc)))))))))
(export struct-_GSocketAddress-desc)
(define-fh-compound-type/p struct-_GSocketAddress struct-_GSocketAddress-desc)
(set! GSocketAddress-desc struct-_GSocketAddress-desc)
(define-fh-compound-type GSocketAddress GSocketAddress-desc)

;; struct _GSocketAddressClass {
;;   GObjectClass parent_class;
;;   GSocketFamily (*get_family)(GSocketAddress *address);
;;   gssize (*get_native_size)(GSocketAddress *address);
;;   gboolean (*to_native)(GSocketAddress *address, gpointer dest, gsize 
;;       destlen, GError **error);
;; };
(define struct-_GSocketAddressClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(get_family ,(bs:pointer void))
          `(get_native_size ,(bs:pointer void))
          `(to_native ,(bs:pointer void)))))
(export struct-_GSocketAddressClass-desc)
(define-fh-compound-type/p struct-_GSocketAddressClass struct-_GSocketAddressClass-desc)
(set! GSocketAddressClass-desc struct-_GSocketAddressClass-desc)
(define-fh-compound-type GSocketAddressClass GSocketAddressClass-desc)

;; extern GType g_socket_address_get_type(void);
(define ~g_socket_address_get_type #f)
(define (g_socket_address_get_type)
  (unless
    ~g_socket_address_get_type
    (set! ~g_socket_address_get_type
      (fh-link-proc
        "g_socket_address_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_address_get_type)))
(export g_socket_address_get_type)

;; extern GSocketFamily g_socket_address_get_family(GSocketAddress *address);
(define ~g_socket_address_get_family #f)
(define (g_socket_address_get_family address)
  (unless
    ~g_socket_address_get_family
    (set! ~g_socket_address_get_family
      (fh-link-proc
        "g_socket_address_get_family"
        ffi:int
        (list '*))))
  (let ((~address (unwrap-GSocketAddress* address)))
    (~g_socket_address_get_family ~address)))
(export g_socket_address_get_family)

;; extern GSocketAddress *g_socket_address_new_from_native(gpointer native, 
;;     gsize len);
(define ~g_socket_address_new_from_native #f)
(define (g_socket_address_new_from_native native len)
  (unless
    ~g_socket_address_new_from_native
    (set! ~g_socket_address_new_from_native
      (fh-link-proc
        "g_socket_address_new_from_native"
        '*
        (list '* ffi:unsigned-long))))
  (let ((~native (unwrap-gpointer native))
        (~len (unwrap~fixed len)))
    (wrap-GSocketAddress*
      (~g_socket_address_new_from_native ~native ~len))))
(export g_socket_address_new_from_native)

;; extern gboolean g_socket_address_to_native(GSocketAddress *address, gpointer
;;      dest, gsize destlen, GError **error);
(define ~g_socket_address_to_native #f)
(define (g_socket_address_to_native
         address
         dest
         destlen
         error)
  (unless
    ~g_socket_address_to_native
    (set! ~g_socket_address_to_native
      (fh-link-proc
        "g_socket_address_to_native"
        ffi:int
        (list '* '* ffi:unsigned-long '*))))
  (let ((~address (unwrap-GSocketAddress* address))
        (~dest (unwrap-gpointer dest))
        (~destlen (unwrap~fixed destlen))
        (~error (unwrap~pointer error)))
    (~g_socket_address_to_native
      ~address
      ~dest
      ~destlen
      ~error)))
(export g_socket_address_to_native)

;; extern gssize g_socket_address_get_native_size(GSocketAddress *address);
(define ~g_socket_address_get_native_size #f)
(define (g_socket_address_get_native_size address)
  (unless
    ~g_socket_address_get_native_size
    (set! ~g_socket_address_get_native_size
      (fh-link-proc
        "g_socket_address_get_native_size"
        ffi:long
        (list '*))))
  (let ((~address (unwrap-GSocketAddress* address)))
    (~g_socket_address_get_native_size ~address)))
(export g_socket_address_get_native_size)

;; typedef struct _GInetSocketAddressClass GInetSocketAddressClass;
(define GInetSocketAddressClass-desc void)
(export GInetSocketAddressClass-desc)
(define GInetSocketAddressClass*-desc (bs:pointer (delay GInetSocketAddressClass-desc)))
(export GInetSocketAddressClass*-desc)
(define-fh-pointer-type GInetSocketAddressClass* GInetSocketAddressClass*-desc)

;; typedef struct _GInetSocketAddressPrivate GInetSocketAddressPrivate;
(define GInetSocketAddressPrivate-desc void)
(export GInetSocketAddressPrivate-desc)
(define GInetSocketAddressPrivate*-desc (bs:pointer GInetSocketAddressPrivate-desc))
(export GInetSocketAddressPrivate*-desc)
(define-fh-pointer-type GInetSocketAddressPrivate* GInetSocketAddressPrivate*-desc)

;; struct _GInetSocketAddress {
;;   GSocketAddress parent_instance;
;;   /*< private >*/
;;   GInetSocketAddressPrivate *priv;
;; };
(define struct-_GInetSocketAddress-desc
  (bs:struct
    (list `(parent_instance ,GSocketAddress-desc)
          `(priv ,(bs:pointer
                    (delay GInetSocketAddressPrivate*-desc))))))
(export struct-_GInetSocketAddress-desc)
(define-fh-compound-type/p struct-_GInetSocketAddress struct-_GInetSocketAddress-desc)
(set! GInetSocketAddress-desc struct-_GInetSocketAddress-desc)
(define-fh-compound-type GInetSocketAddress GInetSocketAddress-desc)

;; struct _GInetSocketAddressClass {
;;   GSocketAddressClass parent_class;
;; };
(define struct-_GInetSocketAddressClass-desc
  (bs:struct
    (list `(parent_class ,GSocketAddressClass-desc))))
(export struct-_GInetSocketAddressClass-desc)
(define-fh-compound-type/p struct-_GInetSocketAddressClass struct-_GInetSocketAddressClass-desc)
(set! GInetSocketAddressClass-desc struct-_GInetSocketAddressClass-desc)
(define-fh-compound-type GInetSocketAddressClass GInetSocketAddressClass-desc)

;; extern GType g_inet_socket_address_get_type(void);
(define ~g_inet_socket_address_get_type #f)
(define (g_inet_socket_address_get_type)
  (unless
    ~g_inet_socket_address_get_type
    (set! ~g_inet_socket_address_get_type
      (fh-link-proc
        "g_inet_socket_address_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_inet_socket_address_get_type)))
(export g_inet_socket_address_get_type)

;; extern GSocketAddress *g_inet_socket_address_new(GInetAddress *address, 
;;     guint16 port);
(define ~g_inet_socket_address_new #f)
(define (g_inet_socket_address_new address port)
  (unless
    ~g_inet_socket_address_new
    (set! ~g_inet_socket_address_new
      (fh-link-proc
        "g_inet_socket_address_new"
        '*
        (list '* ffi:unsigned-short))))
  (let ((~address (unwrap-GInetAddress* address))
        (~port (unwrap~fixed port)))
    (wrap-GSocketAddress*
      (~g_inet_socket_address_new ~address ~port))))
(export g_inet_socket_address_new)

;; extern GSocketAddress *g_inet_socket_address_new_from_string(const char *
;;     address, guint port);
(define ~g_inet_socket_address_new_from_string #f)
(define (g_inet_socket_address_new_from_string
         address
         port)
  (unless
    ~g_inet_socket_address_new_from_string
    (set! ~g_inet_socket_address_new_from_string
      (fh-link-proc
        "g_inet_socket_address_new_from_string"
        '*
        (list '* ffi:unsigned-int))))
  (let ((~address (unwrap~pointer address))
        (~port (unwrap~fixed port)))
    (wrap-GSocketAddress*
      (~g_inet_socket_address_new_from_string
        ~address
        ~port))))
(export g_inet_socket_address_new_from_string)

;; extern GInetAddress *g_inet_socket_address_get_address(GInetSocketAddress *
;;     address);
(define ~g_inet_socket_address_get_address #f)
(define (g_inet_socket_address_get_address address)
  (unless
    ~g_inet_socket_address_get_address
    (set! ~g_inet_socket_address_get_address
      (fh-link-proc
        "g_inet_socket_address_get_address"
        '*
        (list '*))))
  (let ((~address (unwrap-GInetSocketAddress* address)))
    (wrap-GInetAddress*
      (~g_inet_socket_address_get_address ~address))))
(export g_inet_socket_address_get_address)

;; extern guint16 g_inet_socket_address_get_port(GInetSocketAddress *address);
(define ~g_inet_socket_address_get_port #f)
(define (g_inet_socket_address_get_port address)
  (unless
    ~g_inet_socket_address_get_port
    (set! ~g_inet_socket_address_get_port
      (fh-link-proc
        "g_inet_socket_address_get_port"
        ffi:unsigned-short
        (list '*))))
  (let ((~address (unwrap-GInetSocketAddress* address)))
    (~g_inet_socket_address_get_port ~address)))
(export g_inet_socket_address_get_port)

;; extern guint32 g_inet_socket_address_get_flowinfo(GInetSocketAddress *
;;     address);
(define ~g_inet_socket_address_get_flowinfo #f)
(define (g_inet_socket_address_get_flowinfo address)
  (unless
    ~g_inet_socket_address_get_flowinfo
    (set! ~g_inet_socket_address_get_flowinfo
      (fh-link-proc
        "g_inet_socket_address_get_flowinfo"
        ffi:unsigned-int
        (list '*))))
  (let ((~address (unwrap-GInetSocketAddress* address)))
    (~g_inet_socket_address_get_flowinfo ~address)))
(export g_inet_socket_address_get_flowinfo)

;; extern guint32 g_inet_socket_address_get_scope_id(GInetSocketAddress *
;;     address);
(define ~g_inet_socket_address_get_scope_id #f)
(define (g_inet_socket_address_get_scope_id address)
  (unless
    ~g_inet_socket_address_get_scope_id
    (set! ~g_inet_socket_address_get_scope_id
      (fh-link-proc
        "g_inet_socket_address_get_scope_id"
        ffi:unsigned-int
        (list '*))))
  (let ((~address (unwrap-GInetSocketAddress* address)))
    (~g_inet_socket_address_get_scope_id ~address)))
(export g_inet_socket_address_get_scope_id)

;; extern GType g_app_info_create_flags_get_type(void);
(define ~g_app_info_create_flags_get_type #f)
(define (g_app_info_create_flags_get_type)
  (unless
    ~g_app_info_create_flags_get_type
    (set! ~g_app_info_create_flags_get_type
      (fh-link-proc
        "g_app_info_create_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_app_info_create_flags_get_type)))
(export g_app_info_create_flags_get_type)

;; extern GType g_converter_flags_get_type(void);
(define ~g_converter_flags_get_type #f)
(define (g_converter_flags_get_type)
  (unless
    ~g_converter_flags_get_type
    (set! ~g_converter_flags_get_type
      (fh-link-proc
        "g_converter_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_converter_flags_get_type)))
(export g_converter_flags_get_type)

;; extern GType g_converter_result_get_type(void);
(define ~g_converter_result_get_type #f)
(define (g_converter_result_get_type)
  (unless
    ~g_converter_result_get_type
    (set! ~g_converter_result_get_type
      (fh-link-proc
        "g_converter_result_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_converter_result_get_type)))
(export g_converter_result_get_type)

;; extern GType g_data_stream_byte_order_get_type(void);
(define ~g_data_stream_byte_order_get_type #f)
(define (g_data_stream_byte_order_get_type)
  (unless
    ~g_data_stream_byte_order_get_type
    (set! ~g_data_stream_byte_order_get_type
      (fh-link-proc
        "g_data_stream_byte_order_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_data_stream_byte_order_get_type)))
(export g_data_stream_byte_order_get_type)

;; extern GType g_data_stream_newline_type_get_type(void);
(define ~g_data_stream_newline_type_get_type #f)
(define (g_data_stream_newline_type_get_type)
  (unless
    ~g_data_stream_newline_type_get_type
    (set! ~g_data_stream_newline_type_get_type
      (fh-link-proc
        "g_data_stream_newline_type_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_data_stream_newline_type_get_type)))
(export g_data_stream_newline_type_get_type)

;; extern GType g_file_attribute_type_get_type(void);
(define ~g_file_attribute_type_get_type #f)
(define (g_file_attribute_type_get_type)
  (unless
    ~g_file_attribute_type_get_type
    (set! ~g_file_attribute_type_get_type
      (fh-link-proc
        "g_file_attribute_type_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_attribute_type_get_type)))
(export g_file_attribute_type_get_type)

;; extern GType g_file_attribute_info_flags_get_type(void);
(define ~g_file_attribute_info_flags_get_type #f)
(define (g_file_attribute_info_flags_get_type)
  (unless
    ~g_file_attribute_info_flags_get_type
    (set! ~g_file_attribute_info_flags_get_type
      (fh-link-proc
        "g_file_attribute_info_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_attribute_info_flags_get_type)))
(export g_file_attribute_info_flags_get_type)

;; extern GType g_file_attribute_status_get_type(void);
(define ~g_file_attribute_status_get_type #f)
(define (g_file_attribute_status_get_type)
  (unless
    ~g_file_attribute_status_get_type
    (set! ~g_file_attribute_status_get_type
      (fh-link-proc
        "g_file_attribute_status_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_attribute_status_get_type)))
(export g_file_attribute_status_get_type)

;; extern GType g_file_query_info_flags_get_type(void);
(define ~g_file_query_info_flags_get_type #f)
(define (g_file_query_info_flags_get_type)
  (unless
    ~g_file_query_info_flags_get_type
    (set! ~g_file_query_info_flags_get_type
      (fh-link-proc
        "g_file_query_info_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_query_info_flags_get_type)))
(export g_file_query_info_flags_get_type)

;; extern GType g_file_create_flags_get_type(void);
(define ~g_file_create_flags_get_type #f)
(define (g_file_create_flags_get_type)
  (unless
    ~g_file_create_flags_get_type
    (set! ~g_file_create_flags_get_type
      (fh-link-proc
        "g_file_create_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_create_flags_get_type)))
(export g_file_create_flags_get_type)

;; extern GType g_file_measure_flags_get_type(void);
(define ~g_file_measure_flags_get_type #f)
(define (g_file_measure_flags_get_type)
  (unless
    ~g_file_measure_flags_get_type
    (set! ~g_file_measure_flags_get_type
      (fh-link-proc
        "g_file_measure_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_measure_flags_get_type)))
(export g_file_measure_flags_get_type)

;; extern GType g_mount_mount_flags_get_type(void);
(define ~g_mount_mount_flags_get_type #f)
(define (g_mount_mount_flags_get_type)
  (unless
    ~g_mount_mount_flags_get_type
    (set! ~g_mount_mount_flags_get_type
      (fh-link-proc
        "g_mount_mount_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_mount_mount_flags_get_type)))
(export g_mount_mount_flags_get_type)

;; extern GType g_mount_unmount_flags_get_type(void);
(define ~g_mount_unmount_flags_get_type #f)
(define (g_mount_unmount_flags_get_type)
  (unless
    ~g_mount_unmount_flags_get_type
    (set! ~g_mount_unmount_flags_get_type
      (fh-link-proc
        "g_mount_unmount_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_mount_unmount_flags_get_type)))
(export g_mount_unmount_flags_get_type)

;; extern GType g_drive_start_flags_get_type(void);
(define ~g_drive_start_flags_get_type #f)
(define (g_drive_start_flags_get_type)
  (unless
    ~g_drive_start_flags_get_type
    (set! ~g_drive_start_flags_get_type
      (fh-link-proc
        "g_drive_start_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_drive_start_flags_get_type)))
(export g_drive_start_flags_get_type)

;; extern GType g_drive_start_stop_type_get_type(void);
(define ~g_drive_start_stop_type_get_type #f)
(define (g_drive_start_stop_type_get_type)
  (unless
    ~g_drive_start_stop_type_get_type
    (set! ~g_drive_start_stop_type_get_type
      (fh-link-proc
        "g_drive_start_stop_type_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_drive_start_stop_type_get_type)))
(export g_drive_start_stop_type_get_type)

;; extern GType g_file_copy_flags_get_type(void);
(define ~g_file_copy_flags_get_type #f)
(define (g_file_copy_flags_get_type)
  (unless
    ~g_file_copy_flags_get_type
    (set! ~g_file_copy_flags_get_type
      (fh-link-proc
        "g_file_copy_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_copy_flags_get_type)))
(export g_file_copy_flags_get_type)

;; extern GType g_file_monitor_flags_get_type(void);
(define ~g_file_monitor_flags_get_type #f)
(define (g_file_monitor_flags_get_type)
  (unless
    ~g_file_monitor_flags_get_type
    (set! ~g_file_monitor_flags_get_type
      (fh-link-proc
        "g_file_monitor_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_monitor_flags_get_type)))
(export g_file_monitor_flags_get_type)

;; extern GType g_file_type_get_type(void);
(define ~g_file_type_get_type #f)
(define (g_file_type_get_type)
  (unless
    ~g_file_type_get_type
    (set! ~g_file_type_get_type
      (fh-link-proc
        "g_file_type_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_type_get_type)))
(export g_file_type_get_type)

;; extern GType g_filesystem_preview_type_get_type(void);
(define ~g_filesystem_preview_type_get_type #f)
(define (g_filesystem_preview_type_get_type)
  (unless
    ~g_filesystem_preview_type_get_type
    (set! ~g_filesystem_preview_type_get_type
      (fh-link-proc
        "g_filesystem_preview_type_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_filesystem_preview_type_get_type)))
(export g_filesystem_preview_type_get_type)

;; extern GType g_file_monitor_event_get_type(void);
(define ~g_file_monitor_event_get_type #f)
(define (g_file_monitor_event_get_type)
  (unless
    ~g_file_monitor_event_get_type
    (set! ~g_file_monitor_event_get_type
      (fh-link-proc
        "g_file_monitor_event_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_file_monitor_event_get_type)))
(export g_file_monitor_event_get_type)

;; extern GType g_io_error_enum_get_type(void);
(define ~g_io_error_enum_get_type #f)
(define (g_io_error_enum_get_type)
  (unless
    ~g_io_error_enum_get_type
    (set! ~g_io_error_enum_get_type
      (fh-link-proc
        "g_io_error_enum_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_io_error_enum_get_type)))
(export g_io_error_enum_get_type)

;; extern GType g_ask_password_flags_get_type(void);
(define ~g_ask_password_flags_get_type #f)
(define (g_ask_password_flags_get_type)
  (unless
    ~g_ask_password_flags_get_type
    (set! ~g_ask_password_flags_get_type
      (fh-link-proc
        "g_ask_password_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_ask_password_flags_get_type)))
(export g_ask_password_flags_get_type)

;; extern GType g_password_save_get_type(void);
(define ~g_password_save_get_type #f)
(define (g_password_save_get_type)
  (unless
    ~g_password_save_get_type
    (set! ~g_password_save_get_type
      (fh-link-proc
        "g_password_save_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_password_save_get_type)))
(export g_password_save_get_type)

;; extern GType g_mount_operation_result_get_type(void);
(define ~g_mount_operation_result_get_type #f)
(define (g_mount_operation_result_get_type)
  (unless
    ~g_mount_operation_result_get_type
    (set! ~g_mount_operation_result_get_type
      (fh-link-proc
        "g_mount_operation_result_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_mount_operation_result_get_type)))
(export g_mount_operation_result_get_type)

;; extern GType g_output_stream_splice_flags_get_type(void);
(define ~g_output_stream_splice_flags_get_type #f)
(define (g_output_stream_splice_flags_get_type)
  (unless
    ~g_output_stream_splice_flags_get_type
    (set! ~g_output_stream_splice_flags_get_type
      (fh-link-proc
        "g_output_stream_splice_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_output_stream_splice_flags_get_type)))
(export g_output_stream_splice_flags_get_type)

;; extern GType g_io_stream_splice_flags_get_type(void);
(define ~g_io_stream_splice_flags_get_type #f)
(define (g_io_stream_splice_flags_get_type)
  (unless
    ~g_io_stream_splice_flags_get_type
    (set! ~g_io_stream_splice_flags_get_type
      (fh-link-proc
        "g_io_stream_splice_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_io_stream_splice_flags_get_type)))
(export g_io_stream_splice_flags_get_type)

;; extern GType g_emblem_origin_get_type(void);
(define ~g_emblem_origin_get_type #f)
(define (g_emblem_origin_get_type)
  (unless
    ~g_emblem_origin_get_type
    (set! ~g_emblem_origin_get_type
      (fh-link-proc
        "g_emblem_origin_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_emblem_origin_get_type)))
(export g_emblem_origin_get_type)

;; extern GType g_resolver_error_get_type(void);
(define ~g_resolver_error_get_type #f)
(define (g_resolver_error_get_type)
  (unless
    ~g_resolver_error_get_type
    (set! ~g_resolver_error_get_type
      (fh-link-proc
        "g_resolver_error_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_resolver_error_get_type)))
(export g_resolver_error_get_type)

;; extern GType g_resolver_record_type_get_type(void);
(define ~g_resolver_record_type_get_type #f)
(define (g_resolver_record_type_get_type)
  (unless
    ~g_resolver_record_type_get_type
    (set! ~g_resolver_record_type_get_type
      (fh-link-proc
        "g_resolver_record_type_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_resolver_record_type_get_type)))
(export g_resolver_record_type_get_type)

;; extern GType g_resource_error_get_type(void);
(define ~g_resource_error_get_type #f)
(define (g_resource_error_get_type)
  (unless
    ~g_resource_error_get_type
    (set! ~g_resource_error_get_type
      (fh-link-proc
        "g_resource_error_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_resource_error_get_type)))
(export g_resource_error_get_type)

;; extern GType g_resource_flags_get_type(void);
(define ~g_resource_flags_get_type #f)
(define (g_resource_flags_get_type)
  (unless
    ~g_resource_flags_get_type
    (set! ~g_resource_flags_get_type
      (fh-link-proc
        "g_resource_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_resource_flags_get_type)))
(export g_resource_flags_get_type)

;; extern GType g_resource_lookup_flags_get_type(void);
(define ~g_resource_lookup_flags_get_type #f)
(define (g_resource_lookup_flags_get_type)
  (unless
    ~g_resource_lookup_flags_get_type
    (set! ~g_resource_lookup_flags_get_type
      (fh-link-proc
        "g_resource_lookup_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_resource_lookup_flags_get_type)))
(export g_resource_lookup_flags_get_type)

;; extern GType g_socket_family_get_type(void);
(define ~g_socket_family_get_type #f)
(define (g_socket_family_get_type)
  (unless
    ~g_socket_family_get_type
    (set! ~g_socket_family_get_type
      (fh-link-proc
        "g_socket_family_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_family_get_type)))
(export g_socket_family_get_type)

;; extern GType g_socket_type_get_type(void);
(define ~g_socket_type_get_type #f)
(define (g_socket_type_get_type)
  (unless
    ~g_socket_type_get_type
    (set! ~g_socket_type_get_type
      (fh-link-proc
        "g_socket_type_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_type_get_type)))
(export g_socket_type_get_type)

;; extern GType g_socket_msg_flags_get_type(void);
(define ~g_socket_msg_flags_get_type #f)
(define (g_socket_msg_flags_get_type)
  (unless
    ~g_socket_msg_flags_get_type
    (set! ~g_socket_msg_flags_get_type
      (fh-link-proc
        "g_socket_msg_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_msg_flags_get_type)))
(export g_socket_msg_flags_get_type)

;; extern GType g_socket_protocol_get_type(void);
(define ~g_socket_protocol_get_type #f)
(define (g_socket_protocol_get_type)
  (unless
    ~g_socket_protocol_get_type
    (set! ~g_socket_protocol_get_type
      (fh-link-proc
        "g_socket_protocol_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_protocol_get_type)))
(export g_socket_protocol_get_type)

;; extern GType g_zlib_compressor_format_get_type(void);
(define ~g_zlib_compressor_format_get_type #f)
(define (g_zlib_compressor_format_get_type)
  (unless
    ~g_zlib_compressor_format_get_type
    (set! ~g_zlib_compressor_format_get_type
      (fh-link-proc
        "g_zlib_compressor_format_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_zlib_compressor_format_get_type)))
(export g_zlib_compressor_format_get_type)

;; extern GType g_unix_socket_address_type_get_type(void);
(define ~g_unix_socket_address_type_get_type #f)
(define (g_unix_socket_address_type_get_type)
  (unless
    ~g_unix_socket_address_type_get_type
    (set! ~g_unix_socket_address_type_get_type
      (fh-link-proc
        "g_unix_socket_address_type_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_unix_socket_address_type_get_type)))
(export g_unix_socket_address_type_get_type)

;; extern GType g_bus_type_get_type(void);
(define ~g_bus_type_get_type #f)
(define (g_bus_type_get_type)
  (unless
    ~g_bus_type_get_type
    (set! ~g_bus_type_get_type
      (fh-link-proc
        "g_bus_type_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_bus_type_get_type)))
(export g_bus_type_get_type)

;; extern GType g_bus_name_owner_flags_get_type(void);
(define ~g_bus_name_owner_flags_get_type #f)
(define (g_bus_name_owner_flags_get_type)
  (unless
    ~g_bus_name_owner_flags_get_type
    (set! ~g_bus_name_owner_flags_get_type
      (fh-link-proc
        "g_bus_name_owner_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_bus_name_owner_flags_get_type)))
(export g_bus_name_owner_flags_get_type)

;; extern GType g_bus_name_watcher_flags_get_type(void);
(define ~g_bus_name_watcher_flags_get_type #f)
(define (g_bus_name_watcher_flags_get_type)
  (unless
    ~g_bus_name_watcher_flags_get_type
    (set! ~g_bus_name_watcher_flags_get_type
      (fh-link-proc
        "g_bus_name_watcher_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_bus_name_watcher_flags_get_type)))
(export g_bus_name_watcher_flags_get_type)

;; extern GType g_dbus_proxy_flags_get_type(void);
(define ~g_dbus_proxy_flags_get_type #f)
(define (g_dbus_proxy_flags_get_type)
  (unless
    ~g_dbus_proxy_flags_get_type
    (set! ~g_dbus_proxy_flags_get_type
      (fh-link-proc
        "g_dbus_proxy_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_proxy_flags_get_type)))
(export g_dbus_proxy_flags_get_type)

;; extern GType g_dbus_error_get_type(void);
(define ~g_dbus_error_get_type #f)
(define (g_dbus_error_get_type)
  (unless
    ~g_dbus_error_get_type
    (set! ~g_dbus_error_get_type
      (fh-link-proc
        "g_dbus_error_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_error_get_type)))
(export g_dbus_error_get_type)

;; extern GType g_dbus_connection_flags_get_type(void);
(define ~g_dbus_connection_flags_get_type #f)
(define (g_dbus_connection_flags_get_type)
  (unless
    ~g_dbus_connection_flags_get_type
    (set! ~g_dbus_connection_flags_get_type
      (fh-link-proc
        "g_dbus_connection_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_connection_flags_get_type)))
(export g_dbus_connection_flags_get_type)

;; extern GType g_dbus_capability_flags_get_type(void);
(define ~g_dbus_capability_flags_get_type #f)
(define (g_dbus_capability_flags_get_type)
  (unless
    ~g_dbus_capability_flags_get_type
    (set! ~g_dbus_capability_flags_get_type
      (fh-link-proc
        "g_dbus_capability_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_capability_flags_get_type)))
(export g_dbus_capability_flags_get_type)

;; extern GType g_dbus_call_flags_get_type(void);
(define ~g_dbus_call_flags_get_type #f)
(define (g_dbus_call_flags_get_type)
  (unless
    ~g_dbus_call_flags_get_type
    (set! ~g_dbus_call_flags_get_type
      (fh-link-proc
        "g_dbus_call_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_call_flags_get_type)))
(export g_dbus_call_flags_get_type)

;; extern GType g_dbus_message_type_get_type(void);
(define ~g_dbus_message_type_get_type #f)
(define (g_dbus_message_type_get_type)
  (unless
    ~g_dbus_message_type_get_type
    (set! ~g_dbus_message_type_get_type
      (fh-link-proc
        "g_dbus_message_type_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_message_type_get_type)))
(export g_dbus_message_type_get_type)

;; extern GType g_dbus_message_flags_get_type(void);
(define ~g_dbus_message_flags_get_type #f)
(define (g_dbus_message_flags_get_type)
  (unless
    ~g_dbus_message_flags_get_type
    (set! ~g_dbus_message_flags_get_type
      (fh-link-proc
        "g_dbus_message_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_message_flags_get_type)))
(export g_dbus_message_flags_get_type)

;; extern GType g_dbus_message_header_field_get_type(void);
(define ~g_dbus_message_header_field_get_type #f)
(define (g_dbus_message_header_field_get_type)
  (unless
    ~g_dbus_message_header_field_get_type
    (set! ~g_dbus_message_header_field_get_type
      (fh-link-proc
        "g_dbus_message_header_field_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_message_header_field_get_type)))
(export g_dbus_message_header_field_get_type)

;; extern GType g_dbus_property_info_flags_get_type(void);
(define ~g_dbus_property_info_flags_get_type #f)
(define (g_dbus_property_info_flags_get_type)
  (unless
    ~g_dbus_property_info_flags_get_type
    (set! ~g_dbus_property_info_flags_get_type
      (fh-link-proc
        "g_dbus_property_info_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_property_info_flags_get_type)))
(export g_dbus_property_info_flags_get_type)

;; extern GType g_dbus_subtree_flags_get_type(void);
(define ~g_dbus_subtree_flags_get_type #f)
(define (g_dbus_subtree_flags_get_type)
  (unless
    ~g_dbus_subtree_flags_get_type
    (set! ~g_dbus_subtree_flags_get_type
      (fh-link-proc
        "g_dbus_subtree_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_subtree_flags_get_type)))
(export g_dbus_subtree_flags_get_type)

;; extern GType g_dbus_server_flags_get_type(void);
(define ~g_dbus_server_flags_get_type #f)
(define (g_dbus_server_flags_get_type)
  (unless
    ~g_dbus_server_flags_get_type
    (set! ~g_dbus_server_flags_get_type
      (fh-link-proc
        "g_dbus_server_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_server_flags_get_type)))
(export g_dbus_server_flags_get_type)

;; extern GType g_dbus_signal_flags_get_type(void);
(define ~g_dbus_signal_flags_get_type #f)
(define (g_dbus_signal_flags_get_type)
  (unless
    ~g_dbus_signal_flags_get_type
    (set! ~g_dbus_signal_flags_get_type
      (fh-link-proc
        "g_dbus_signal_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_signal_flags_get_type)))
(export g_dbus_signal_flags_get_type)

;; extern GType g_dbus_send_message_flags_get_type(void);
(define ~g_dbus_send_message_flags_get_type #f)
(define (g_dbus_send_message_flags_get_type)
  (unless
    ~g_dbus_send_message_flags_get_type
    (set! ~g_dbus_send_message_flags_get_type
      (fh-link-proc
        "g_dbus_send_message_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_send_message_flags_get_type)))
(export g_dbus_send_message_flags_get_type)

;; extern GType g_credentials_type_get_type(void);
(define ~g_credentials_type_get_type #f)
(define (g_credentials_type_get_type)
  (unless
    ~g_credentials_type_get_type
    (set! ~g_credentials_type_get_type
      (fh-link-proc
        "g_credentials_type_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_credentials_type_get_type)))
(export g_credentials_type_get_type)

;; extern GType g_dbus_message_byte_order_get_type(void);
(define ~g_dbus_message_byte_order_get_type #f)
(define (g_dbus_message_byte_order_get_type)
  (unless
    ~g_dbus_message_byte_order_get_type
    (set! ~g_dbus_message_byte_order_get_type
      (fh-link-proc
        "g_dbus_message_byte_order_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_message_byte_order_get_type)))
(export g_dbus_message_byte_order_get_type)

;; extern GType g_application_flags_get_type(void);
(define ~g_application_flags_get_type #f)
(define (g_application_flags_get_type)
  (unless
    ~g_application_flags_get_type
    (set! ~g_application_flags_get_type
      (fh-link-proc
        "g_application_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_application_flags_get_type)))
(export g_application_flags_get_type)

;; extern GType g_tls_error_get_type(void);
(define ~g_tls_error_get_type #f)
(define (g_tls_error_get_type)
  (unless
    ~g_tls_error_get_type
    (set! ~g_tls_error_get_type
      (fh-link-proc
        "g_tls_error_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_error_get_type)))
(export g_tls_error_get_type)

;; extern GType g_tls_certificate_flags_get_type(void);
(define ~g_tls_certificate_flags_get_type #f)
(define (g_tls_certificate_flags_get_type)
  (unless
    ~g_tls_certificate_flags_get_type
    (set! ~g_tls_certificate_flags_get_type
      (fh-link-proc
        "g_tls_certificate_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_certificate_flags_get_type)))
(export g_tls_certificate_flags_get_type)

;; extern GType g_tls_authentication_mode_get_type(void);
(define ~g_tls_authentication_mode_get_type #f)
(define (g_tls_authentication_mode_get_type)
  (unless
    ~g_tls_authentication_mode_get_type
    (set! ~g_tls_authentication_mode_get_type
      (fh-link-proc
        "g_tls_authentication_mode_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_authentication_mode_get_type)))
(export g_tls_authentication_mode_get_type)

;; extern GType g_tls_rehandshake_mode_get_type(void);
(define ~g_tls_rehandshake_mode_get_type #f)
(define (g_tls_rehandshake_mode_get_type)
  (unless
    ~g_tls_rehandshake_mode_get_type
    (set! ~g_tls_rehandshake_mode_get_type
      (fh-link-proc
        "g_tls_rehandshake_mode_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_rehandshake_mode_get_type)))
(export g_tls_rehandshake_mode_get_type)

;; extern GType g_tls_password_flags_get_type(void);
(define ~g_tls_password_flags_get_type #f)
(define (g_tls_password_flags_get_type)
  (unless
    ~g_tls_password_flags_get_type
    (set! ~g_tls_password_flags_get_type
      (fh-link-proc
        "g_tls_password_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_password_flags_get_type)))
(export g_tls_password_flags_get_type)

;; extern GType g_tls_interaction_result_get_type(void);
(define ~g_tls_interaction_result_get_type #f)
(define (g_tls_interaction_result_get_type)
  (unless
    ~g_tls_interaction_result_get_type
    (set! ~g_tls_interaction_result_get_type
      (fh-link-proc
        "g_tls_interaction_result_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_interaction_result_get_type)))
(export g_tls_interaction_result_get_type)

;; extern GType g_dbus_interface_skeleton_flags_get_type(void);
(define ~g_dbus_interface_skeleton_flags_get_type #f)
(define (g_dbus_interface_skeleton_flags_get_type)
  (unless
    ~g_dbus_interface_skeleton_flags_get_type
    (set! ~g_dbus_interface_skeleton_flags_get_type
      (fh-link-proc
        "g_dbus_interface_skeleton_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let ()
    (~g_dbus_interface_skeleton_flags_get_type)))
(export g_dbus_interface_skeleton_flags_get_type)

;; extern GType g_dbus_object_manager_client_flags_get_type(void);
(define ~g_dbus_object_manager_client_flags_get_type #f)
(define (g_dbus_object_manager_client_flags_get_type)
  (unless
    ~g_dbus_object_manager_client_flags_get_type
    (set! ~g_dbus_object_manager_client_flags_get_type
      (fh-link-proc
        "g_dbus_object_manager_client_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let ()
    (~g_dbus_object_manager_client_flags_get_type)))
(export g_dbus_object_manager_client_flags_get_type)

;; extern GType g_tls_database_verify_flags_get_type(void);
(define ~g_tls_database_verify_flags_get_type #f)
(define (g_tls_database_verify_flags_get_type)
  (unless
    ~g_tls_database_verify_flags_get_type
    (set! ~g_tls_database_verify_flags_get_type
      (fh-link-proc
        "g_tls_database_verify_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_database_verify_flags_get_type)))
(export g_tls_database_verify_flags_get_type)

;; extern GType g_tls_database_lookup_flags_get_type(void);
(define ~g_tls_database_lookup_flags_get_type #f)
(define (g_tls_database_lookup_flags_get_type)
  (unless
    ~g_tls_database_lookup_flags_get_type
    (set! ~g_tls_database_lookup_flags_get_type
      (fh-link-proc
        "g_tls_database_lookup_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_database_lookup_flags_get_type)))
(export g_tls_database_lookup_flags_get_type)

;; extern GType g_tls_certificate_request_flags_get_type(void);
(define ~g_tls_certificate_request_flags_get_type #f)
(define (g_tls_certificate_request_flags_get_type)
  (unless
    ~g_tls_certificate_request_flags_get_type
    (set! ~g_tls_certificate_request_flags_get_type
      (fh-link-proc
        "g_tls_certificate_request_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let ()
    (~g_tls_certificate_request_flags_get_type)))
(export g_tls_certificate_request_flags_get_type)

;; extern GType g_io_module_scope_flags_get_type(void);
(define ~g_io_module_scope_flags_get_type #f)
(define (g_io_module_scope_flags_get_type)
  (unless
    ~g_io_module_scope_flags_get_type
    (set! ~g_io_module_scope_flags_get_type
      (fh-link-proc
        "g_io_module_scope_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_io_module_scope_flags_get_type)))
(export g_io_module_scope_flags_get_type)

;; extern GType g_socket_client_event_get_type(void);
(define ~g_socket_client_event_get_type #f)
(define (g_socket_client_event_get_type)
  (unless
    ~g_socket_client_event_get_type
    (set! ~g_socket_client_event_get_type
      (fh-link-proc
        "g_socket_client_event_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_client_event_get_type)))
(export g_socket_client_event_get_type)

;; extern GType g_socket_listener_event_get_type(void);
(define ~g_socket_listener_event_get_type #f)
(define (g_socket_listener_event_get_type)
  (unless
    ~g_socket_listener_event_get_type
    (set! ~g_socket_listener_event_get_type
      (fh-link-proc
        "g_socket_listener_event_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_listener_event_get_type)))
(export g_socket_listener_event_get_type)

;; extern GType g_test_dbus_flags_get_type(void);
(define ~g_test_dbus_flags_get_type #f)
(define (g_test_dbus_flags_get_type)
  (unless
    ~g_test_dbus_flags_get_type
    (set! ~g_test_dbus_flags_get_type
      (fh-link-proc
        "g_test_dbus_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_test_dbus_flags_get_type)))
(export g_test_dbus_flags_get_type)

;; extern GType g_subprocess_flags_get_type(void);
(define ~g_subprocess_flags_get_type #f)
(define (g_subprocess_flags_get_type)
  (unless
    ~g_subprocess_flags_get_type
    (set! ~g_subprocess_flags_get_type
      (fh-link-proc
        "g_subprocess_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_subprocess_flags_get_type)))
(export g_subprocess_flags_get_type)

;; extern GType g_notification_priority_get_type(void);
(define ~g_notification_priority_get_type #f)
(define (g_notification_priority_get_type)
  (unless
    ~g_notification_priority_get_type
    (set! ~g_notification_priority_get_type
      (fh-link-proc
        "g_notification_priority_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_notification_priority_get_type)))
(export g_notification_priority_get_type)

;; extern GType g_network_connectivity_get_type(void);
(define ~g_network_connectivity_get_type #f)
(define (g_network_connectivity_get_type)
  (unless
    ~g_network_connectivity_get_type
    (set! ~g_network_connectivity_get_type
      (fh-link-proc
        "g_network_connectivity_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_network_connectivity_get_type)))
(export g_network_connectivity_get_type)

;; extern GType g_settings_bind_flags_get_type(void);
(define ~g_settings_bind_flags_get_type #f)
(define (g_settings_bind_flags_get_type)
  (unless
    ~g_settings_bind_flags_get_type
    (set! ~g_settings_bind_flags_get_type
      (fh-link-proc
        "g_settings_bind_flags_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_settings_bind_flags_get_type)))
(export g_settings_bind_flags_get_type)

;; typedef struct _GIOModuleScope GIOModuleScope;
(define GIOModuleScope-desc void)
(export GIOModuleScope-desc)
(define GIOModuleScope*-desc (bs:pointer GIOModuleScope-desc))
(export GIOModuleScope*-desc)
(define-fh-pointer-type GIOModuleScope* GIOModuleScope*-desc)

;; extern GIOModuleScope *g_io_module_scope_new(GIOModuleScopeFlags flags);
(define ~g_io_module_scope_new #f)
(define (g_io_module_scope_new flags)
  (unless
    ~g_io_module_scope_new
    (set! ~g_io_module_scope_new
      (fh-link-proc
        "g_io_module_scope_new"
        '*
        (list ffi:int))))
  (let ((~flags (unwrap~fixed flags)))
    (wrap-GIOModuleScope*
      (~g_io_module_scope_new ~flags))))
(export g_io_module_scope_new)

;; extern void g_io_module_scope_free(GIOModuleScope *scope);
(define ~g_io_module_scope_free #f)
(define (g_io_module_scope_free scope)
  (unless
    ~g_io_module_scope_free
    (set! ~g_io_module_scope_free
      (fh-link-proc
        "g_io_module_scope_free"
        ffi:void
        (list '*))))
  (let ((~scope (unwrap-GIOModuleScope* scope)))
    (~g_io_module_scope_free ~scope)))
(export g_io_module_scope_free)

;; extern void g_io_module_scope_block(GIOModuleScope *scope, const gchar *
;;     basename);
(define ~g_io_module_scope_block #f)
(define (g_io_module_scope_block scope basename)
  (unless
    ~g_io_module_scope_block
    (set! ~g_io_module_scope_block
      (fh-link-proc
        "g_io_module_scope_block"
        ffi:void
        (list '* '*))))
  (let ((~scope (unwrap-GIOModuleScope* scope))
        (~basename (unwrap~pointer basename)))
    (~g_io_module_scope_block ~scope ~basename)))
(export g_io_module_scope_block)

;; typedef struct _GIOModuleClass GIOModuleClass;
(define GIOModuleClass-desc void)
(export GIOModuleClass-desc)
(define GIOModuleClass*-desc (bs:pointer GIOModuleClass-desc))
(export GIOModuleClass*-desc)
(define-fh-pointer-type GIOModuleClass* GIOModuleClass*-desc)

;; extern GType g_io_module_get_type(void);
(define ~g_io_module_get_type #f)
(define (g_io_module_get_type)
  (unless
    ~g_io_module_get_type
    (set! ~g_io_module_get_type
      (fh-link-proc
        "g_io_module_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_io_module_get_type)))
(export g_io_module_get_type)

;; extern GIOModule *g_io_module_new(const gchar *filename);
(define ~g_io_module_new #f)
(define (g_io_module_new filename)
  (unless
    ~g_io_module_new
    (set! ~g_io_module_new
      (fh-link-proc "g_io_module_new" '* (list '*))))
  (let ((~filename (unwrap~pointer filename)))
    (wrap-GIOModule* (~g_io_module_new ~filename))))
(export g_io_module_new)

;; extern void g_io_modules_scan_all_in_directory(const char *dirname);
(define ~g_io_modules_scan_all_in_directory #f)
(define (g_io_modules_scan_all_in_directory dirname)
  (unless
    ~g_io_modules_scan_all_in_directory
    (set! ~g_io_modules_scan_all_in_directory
      (fh-link-proc
        "g_io_modules_scan_all_in_directory"
        ffi:void
        (list '*))))
  (let ((~dirname (unwrap~pointer dirname)))
    (~g_io_modules_scan_all_in_directory ~dirname)))
(export g_io_modules_scan_all_in_directory)

;; extern GList *g_io_modules_load_all_in_directory(const gchar *dirname);
(define ~g_io_modules_load_all_in_directory #f)
(define (g_io_modules_load_all_in_directory dirname)
  (unless
    ~g_io_modules_load_all_in_directory
    (set! ~g_io_modules_load_all_in_directory
      (fh-link-proc
        "g_io_modules_load_all_in_directory"
        '*
        (list '*))))
  (let ((~dirname (unwrap~pointer dirname)))
    (~g_io_modules_load_all_in_directory ~dirname)))
(export g_io_modules_load_all_in_directory)

;; extern void g_io_modules_scan_all_in_directory_with_scope(const gchar *
;;     dirname, GIOModuleScope *scope);
(define ~g_io_modules_scan_all_in_directory_with_scope #f)
(define (g_io_modules_scan_all_in_directory_with_scope
         dirname
         scope)
  (unless
    ~g_io_modules_scan_all_in_directory_with_scope
    (set! ~g_io_modules_scan_all_in_directory_with_scope
      (fh-link-proc
        "g_io_modules_scan_all_in_directory_with_scope"
        ffi:void
        (list '* '*))))
  (let ((~dirname (unwrap~pointer dirname))
        (~scope (unwrap-GIOModuleScope* scope)))
    (~g_io_modules_scan_all_in_directory_with_scope
      ~dirname
      ~scope)))
(export g_io_modules_scan_all_in_directory_with_scope)

;; extern GList *g_io_modules_load_all_in_directory_with_scope(const gchar *
;;     dirname, GIOModuleScope *scope);
(define ~g_io_modules_load_all_in_directory_with_scope #f)
(define (g_io_modules_load_all_in_directory_with_scope
         dirname
         scope)
  (unless
    ~g_io_modules_load_all_in_directory_with_scope
    (set! ~g_io_modules_load_all_in_directory_with_scope
      (fh-link-proc
        "g_io_modules_load_all_in_directory_with_scope"
        '*
        (list '* '*))))
  (let ((~dirname (unwrap~pointer dirname))
        (~scope (unwrap-GIOModuleScope* scope)))
    (~g_io_modules_load_all_in_directory_with_scope
      ~dirname
      ~scope)))
(export g_io_modules_load_all_in_directory_with_scope)

;; extern GIOExtensionPoint *g_io_extension_point_register(const char *name);
(define ~g_io_extension_point_register #f)
(define (g_io_extension_point_register name)
  (unless
    ~g_io_extension_point_register
    (set! ~g_io_extension_point_register
      (fh-link-proc
        "g_io_extension_point_register"
        '*
        (list '*))))
  (let ((~name (unwrap~pointer name)))
    (wrap-GIOExtensionPoint*
      (~g_io_extension_point_register ~name))))
(export g_io_extension_point_register)

;; extern GIOExtensionPoint *g_io_extension_point_lookup(const char *name);
(define ~g_io_extension_point_lookup #f)
(define (g_io_extension_point_lookup name)
  (unless
    ~g_io_extension_point_lookup
    (set! ~g_io_extension_point_lookup
      (fh-link-proc
        "g_io_extension_point_lookup"
        '*
        (list '*))))
  (let ((~name (unwrap~pointer name)))
    (wrap-GIOExtensionPoint*
      (~g_io_extension_point_lookup ~name))))
(export g_io_extension_point_lookup)

;; extern void g_io_extension_point_set_required_type(GIOExtensionPoint *
;;     extension_point, GType type);
(define ~g_io_extension_point_set_required_type #f)
(define (g_io_extension_point_set_required_type
         extension_point
         type)
  (unless
    ~g_io_extension_point_set_required_type
    (set! ~g_io_extension_point_set_required_type
      (fh-link-proc
        "g_io_extension_point_set_required_type"
        ffi:void
        (list '* ffi:unsigned-long))))
  (let ((~extension_point
          (unwrap-GIOExtensionPoint* extension_point))
        (~type (unwrap~fixed type)))
    (~g_io_extension_point_set_required_type
      ~extension_point
      ~type)))
(export g_io_extension_point_set_required_type)

;; extern GType g_io_extension_point_get_required_type(GIOExtensionPoint *
;;     extension_point);
(define ~g_io_extension_point_get_required_type #f)
(define (g_io_extension_point_get_required_type
         extension_point)
  (unless
    ~g_io_extension_point_get_required_type
    (set! ~g_io_extension_point_get_required_type
      (fh-link-proc
        "g_io_extension_point_get_required_type"
        ffi:unsigned-long
        (list '*))))
  (let ((~extension_point
          (unwrap-GIOExtensionPoint* extension_point)))
    (~g_io_extension_point_get_required_type
      ~extension_point)))
(export g_io_extension_point_get_required_type)

;; extern GList *g_io_extension_point_get_extensions(GIOExtensionPoint *
;;     extension_point);
(define ~g_io_extension_point_get_extensions #f)
(define (g_io_extension_point_get_extensions
         extension_point)
  (unless
    ~g_io_extension_point_get_extensions
    (set! ~g_io_extension_point_get_extensions
      (fh-link-proc
        "g_io_extension_point_get_extensions"
        '*
        (list '*))))
  (let ((~extension_point
          (unwrap-GIOExtensionPoint* extension_point)))
    (~g_io_extension_point_get_extensions
      ~extension_point)))
(export g_io_extension_point_get_extensions)

;; extern GIOExtension *g_io_extension_point_get_extension_by_name(
;;     GIOExtensionPoint *extension_point, const char *name);
(define ~g_io_extension_point_get_extension_by_name #f)
(define (g_io_extension_point_get_extension_by_name
         extension_point
         name)
  (unless
    ~g_io_extension_point_get_extension_by_name
    (set! ~g_io_extension_point_get_extension_by_name
      (fh-link-proc
        "g_io_extension_point_get_extension_by_name"
        '*
        (list '* '*))))
  (let ((~extension_point
          (unwrap-GIOExtensionPoint* extension_point))
        (~name (unwrap~pointer name)))
    (wrap-GIOExtension*
      (~g_io_extension_point_get_extension_by_name
        ~extension_point
        ~name))))
(export g_io_extension_point_get_extension_by_name)

;; extern GIOExtension *g_io_extension_point_implement(const char *
;;     extension_point_name, GType type, const char *extension_name, gint 
;;     priority);
(define ~g_io_extension_point_implement #f)
(define (g_io_extension_point_implement
         extension_point_name
         type
         extension_name
         priority)
  (unless
    ~g_io_extension_point_implement
    (set! ~g_io_extension_point_implement
      (fh-link-proc
        "g_io_extension_point_implement"
        '*
        (list '* ffi:unsigned-long '* ffi:int))))
  (let ((~extension_point_name
          (unwrap~pointer extension_point_name))
        (~type (unwrap~fixed type))
        (~extension_name (unwrap~pointer extension_name))
        (~priority (unwrap~fixed priority)))
    (wrap-GIOExtension*
      (~g_io_extension_point_implement
        ~extension_point_name
        ~type
        ~extension_name
        ~priority))))
(export g_io_extension_point_implement)

;; extern GType g_io_extension_get_type(GIOExtension *extension);
(define ~g_io_extension_get_type #f)
(define (g_io_extension_get_type extension)
  (unless
    ~g_io_extension_get_type
    (set! ~g_io_extension_get_type
      (fh-link-proc
        "g_io_extension_get_type"
        ffi:unsigned-long
        (list '*))))
  (let ((~extension (unwrap-GIOExtension* extension)))
    (~g_io_extension_get_type ~extension)))
(export g_io_extension_get_type)

;; extern const char *g_io_extension_get_name(GIOExtension *extension);
(define ~g_io_extension_get_name #f)
(define (g_io_extension_get_name extension)
  (unless
    ~g_io_extension_get_name
    (set! ~g_io_extension_get_name
      (fh-link-proc
        "g_io_extension_get_name"
        '*
        (list '*))))
  (let ((~extension (unwrap-GIOExtension* extension)))
    (~g_io_extension_get_name ~extension)))
(export g_io_extension_get_name)

;; extern gint g_io_extension_get_priority(GIOExtension *extension);
(define ~g_io_extension_get_priority #f)
(define (g_io_extension_get_priority extension)
  (unless
    ~g_io_extension_get_priority
    (set! ~g_io_extension_get_priority
      (fh-link-proc
        "g_io_extension_get_priority"
        ffi:int
        (list '*))))
  (let ((~extension (unwrap-GIOExtension* extension)))
    (~g_io_extension_get_priority ~extension)))
(export g_io_extension_get_priority)

;; extern GTypeClass *g_io_extension_ref_class(GIOExtension *extension);
(define ~g_io_extension_ref_class #f)
(define (g_io_extension_ref_class extension)
  (unless
    ~g_io_extension_ref_class
    (set! ~g_io_extension_ref_class
      (fh-link-proc
        "g_io_extension_ref_class"
        '*
        (list '*))))
  (let ((~extension (unwrap-GIOExtension* extension)))
    (~g_io_extension_ref_class ~extension)))
(export g_io_extension_ref_class)

;; extern void g_io_module_load(GIOModule *module);
(define ~g_io_module_load #f)
(define (g_io_module_load module)
  (unless
    ~g_io_module_load
    (set! ~g_io_module_load
      (fh-link-proc
        "g_io_module_load"
        ffi:void
        (list '*))))
  (let ((~module (unwrap-GIOModule* module)))
    (~g_io_module_load ~module)))
(export g_io_module_load)

;; extern void g_io_module_unload(GIOModule *module);
(define ~g_io_module_unload #f)
(define (g_io_module_unload module)
  (unless
    ~g_io_module_unload
    (set! ~g_io_module_unload
      (fh-link-proc
        "g_io_module_unload"
        ffi:void
        (list '*))))
  (let ((~module (unwrap-GIOModule* module)))
    (~g_io_module_unload ~module)))
(export g_io_module_unload)

;; extern char **g_io_module_query(void);
(define ~g_io_module_query #f)
(define (g_io_module_query)
  (unless
    ~g_io_module_query
    (set! ~g_io_module_query
      (fh-link-proc "g_io_module_query" '* (list))))
  (let () (~g_io_module_query)))
(export g_io_module_query)

;; extern void g_io_scheduler_push_job(GIOSchedulerJobFunc job_func, gpointer 
;;     user_data, GDestroyNotify notify, gint io_priority, GCancellable *
;;     cancellable);
(define ~g_io_scheduler_push_job #f)
(define (g_io_scheduler_push_job
         job_func
         user_data
         notify
         io_priority
         cancellable)
  (unless
    ~g_io_scheduler_push_job
    (set! ~g_io_scheduler_push_job
      (fh-link-proc
        "g_io_scheduler_push_job"
        ffi:void
        (list '* '* '* ffi:int '*))))
  (let ((~job_func
          ((make-ftn-arg-unwrapper ffi:int (list '* '* '*))
           job_func))
        (~user_data (unwrap-gpointer user_data))
        (~notify
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           notify))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable)))
    (~g_io_scheduler_push_job
      ~job_func
      ~user_data
      ~notify
      ~io_priority
      ~cancellable)))
(export g_io_scheduler_push_job)

;; extern void g_io_scheduler_cancel_all_jobs(void);
(define ~g_io_scheduler_cancel_all_jobs #f)
(define (g_io_scheduler_cancel_all_jobs)
  (unless
    ~g_io_scheduler_cancel_all_jobs
    (set! ~g_io_scheduler_cancel_all_jobs
      (fh-link-proc
        "g_io_scheduler_cancel_all_jobs"
        ffi:void
        (list))))
  (let () (~g_io_scheduler_cancel_all_jobs)))
(export g_io_scheduler_cancel_all_jobs)

;; extern gboolean g_io_scheduler_job_send_to_mainloop(GIOSchedulerJob *job, 
;;     GSourceFunc func, gpointer user_data, GDestroyNotify notify);
(define ~g_io_scheduler_job_send_to_mainloop #f)
(define (g_io_scheduler_job_send_to_mainloop
         job
         func
         user_data
         notify)
  (unless
    ~g_io_scheduler_job_send_to_mainloop
    (set! ~g_io_scheduler_job_send_to_mainloop
      (fh-link-proc
        "g_io_scheduler_job_send_to_mainloop"
        ffi:int
        (list '* '* '* '*))))
  (let ((~job (unwrap-GIOSchedulerJob* job))
        (~func ((make-ftn-arg-unwrapper ffi:int (list '*)) func))
        (~user_data (unwrap-gpointer user_data))
        (~notify
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           notify)))
    (~g_io_scheduler_job_send_to_mainloop
      ~job
      ~func
      ~user_data
      ~notify)))
(export g_io_scheduler_job_send_to_mainloop)

;; extern void g_io_scheduler_job_send_to_mainloop_async(GIOSchedulerJob *job, 
;;     GSourceFunc func, gpointer user_data, GDestroyNotify notify);
(define ~g_io_scheduler_job_send_to_mainloop_async #f)
(define (g_io_scheduler_job_send_to_mainloop_async
         job
         func
         user_data
         notify)
  (unless
    ~g_io_scheduler_job_send_to_mainloop_async
    (set! ~g_io_scheduler_job_send_to_mainloop_async
      (fh-link-proc
        "g_io_scheduler_job_send_to_mainloop_async"
        ffi:void
        (list '* '* '* '*))))
  (let ((~job (unwrap-GIOSchedulerJob* job))
        (~func ((make-ftn-arg-unwrapper ffi:int (list '*)) func))
        (~user_data (unwrap-gpointer user_data))
        (~notify
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           notify)))
    (~g_io_scheduler_job_send_to_mainloop_async
      ~job
      ~func
      ~user_data
      ~notify)))
(export g_io_scheduler_job_send_to_mainloop_async)

;; typedef struct _GLoadableIconIface GLoadableIconIface;
(define GLoadableIconIface-desc void)
(export GLoadableIconIface-desc)
(define GLoadableIconIface*-desc (bs:pointer (delay GLoadableIconIface-desc)))
(export GLoadableIconIface*-desc)
(define-fh-pointer-type GLoadableIconIface* GLoadableIconIface*-desc)

;; struct _GLoadableIconIface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   GInputStream *(*load)(GLoadableIcon *icon, int size, char **type, 
;;       GCancellable *cancellable, GError **error);
;;   void (*load_async)(GLoadableIcon *icon, int size, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   GInputStream *(*load_finish)(GLoadableIcon *icon, GAsyncResult *res, char 
;;       **type, GError **error);
;; };
(define struct-_GLoadableIconIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(load ,(bs:pointer void))
          `(load_async ,(bs:pointer void))
          `(load_finish ,(bs:pointer void)))))
(export struct-_GLoadableIconIface-desc)
(define-fh-compound-type/p struct-_GLoadableIconIface struct-_GLoadableIconIface-desc)
(set! GLoadableIconIface-desc struct-_GLoadableIconIface-desc)
(define-fh-compound-type GLoadableIconIface GLoadableIconIface-desc)

;; extern GType g_loadable_icon_get_type(void);
(define ~g_loadable_icon_get_type #f)
(define (g_loadable_icon_get_type)
  (unless
    ~g_loadable_icon_get_type
    (set! ~g_loadable_icon_get_type
      (fh-link-proc
        "g_loadable_icon_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_loadable_icon_get_type)))
(export g_loadable_icon_get_type)

;; extern GInputStream *g_loadable_icon_load(GLoadableIcon *icon, int size, 
;;     char **type, GCancellable *cancellable, GError **error);
(define ~g_loadable_icon_load #f)
(define (g_loadable_icon_load
         icon
         size
         type
         cancellable
         error)
  (unless
    ~g_loadable_icon_load
    (set! ~g_loadable_icon_load
      (fh-link-proc
        "g_loadable_icon_load"
        '*
        (list '* ffi:int '* '* '*))))
  (let ((~icon (unwrap-GLoadableIcon* icon))
        (~size (unwrap~fixed size))
        (~type (unwrap~pointer type))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GInputStream*
      (~g_loadable_icon_load
        ~icon
        ~size
        ~type
        ~cancellable
        ~error))))
(export g_loadable_icon_load)

;; extern void g_loadable_icon_load_async(GLoadableIcon *icon, int size, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_loadable_icon_load_async #f)
(define (g_loadable_icon_load_async
         icon
         size
         cancellable
         callback
         user_data)
  (unless
    ~g_loadable_icon_load_async
    (set! ~g_loadable_icon_load_async
      (fh-link-proc
        "g_loadable_icon_load_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~icon (unwrap-GLoadableIcon* icon))
        (~size (unwrap~fixed size))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_loadable_icon_load_async
      ~icon
      ~size
      ~cancellable
      ~callback
      ~user_data)))
(export g_loadable_icon_load_async)

;; extern GInputStream *g_loadable_icon_load_finish(GLoadableIcon *icon, 
;;     GAsyncResult *res, char **type, GError **error);
(define ~g_loadable_icon_load_finish #f)
(define (g_loadable_icon_load_finish icon res type error)
  (unless
    ~g_loadable_icon_load_finish
    (set! ~g_loadable_icon_load_finish
      (fh-link-proc
        "g_loadable_icon_load_finish"
        '*
        (list '* '* '* '*))))
  (let ((~icon (unwrap-GLoadableIcon* icon))
        (~res (unwrap-GAsyncResult* res))
        (~type (unwrap~pointer type))
        (~error (unwrap~pointer error)))
    (wrap-GInputStream*
      (~g_loadable_icon_load_finish
        ~icon
        ~res
        ~type
        ~error))))
(export g_loadable_icon_load_finish)

;; typedef struct _GMemoryInputStreamClass GMemoryInputStreamClass;
(define GMemoryInputStreamClass-desc void)
(export GMemoryInputStreamClass-desc)
(define GMemoryInputStreamClass*-desc (bs:pointer (delay GMemoryInputStreamClass-desc)))
(export GMemoryInputStreamClass*-desc)
(define-fh-pointer-type GMemoryInputStreamClass* GMemoryInputStreamClass*-desc)

;; typedef struct _GMemoryInputStreamPrivate GMemoryInputStreamPrivate;
(define GMemoryInputStreamPrivate-desc void)
(export GMemoryInputStreamPrivate-desc)
(define GMemoryInputStreamPrivate*-desc (bs:pointer GMemoryInputStreamPrivate-desc))
(export GMemoryInputStreamPrivate*-desc)
(define-fh-pointer-type GMemoryInputStreamPrivate* GMemoryInputStreamPrivate*-desc)

;; struct _GMemoryInputStream {
;;   GInputStream parent_instance;
;;   /*< private >*/
;;   GMemoryInputStreamPrivate *priv;
;; };
(define struct-_GMemoryInputStream-desc
  (bs:struct
    (list `(parent_instance ,GInputStream-desc)
          `(priv ,(bs:pointer
                    (delay GMemoryInputStreamPrivate*-desc))))))
(export struct-_GMemoryInputStream-desc)
(define-fh-compound-type/p struct-_GMemoryInputStream struct-_GMemoryInputStream-desc)
(set! GMemoryInputStream-desc struct-_GMemoryInputStream-desc)
(define-fh-compound-type GMemoryInputStream GMemoryInputStream-desc)

;; struct _GMemoryInputStreamClass {
;;   GInputStreamClass parent_class;
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GMemoryInputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GInputStreamClass-desc)
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GMemoryInputStreamClass-desc)
(define-fh-compound-type/p struct-_GMemoryInputStreamClass struct-_GMemoryInputStreamClass-desc)
(set! GMemoryInputStreamClass-desc struct-_GMemoryInputStreamClass-desc)
(define-fh-compound-type GMemoryInputStreamClass GMemoryInputStreamClass-desc)

;; extern GType g_memory_input_stream_get_type(void);
(define ~g_memory_input_stream_get_type #f)
(define (g_memory_input_stream_get_type)
  (unless
    ~g_memory_input_stream_get_type
    (set! ~g_memory_input_stream_get_type
      (fh-link-proc
        "g_memory_input_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_memory_input_stream_get_type)))
(export g_memory_input_stream_get_type)

;; extern GInputStream *g_memory_input_stream_new(void);
(define ~g_memory_input_stream_new #f)
(define (g_memory_input_stream_new)
  (unless
    ~g_memory_input_stream_new
    (set! ~g_memory_input_stream_new
      (fh-link-proc
        "g_memory_input_stream_new"
        '*
        (list))))
  (let ()
    (wrap-GInputStream* (~g_memory_input_stream_new))))
(export g_memory_input_stream_new)

;; extern GInputStream *g_memory_input_stream_new_from_data(const void *data, 
;;     gssize len, GDestroyNotify destroy);
(define ~g_memory_input_stream_new_from_data #f)
(define (g_memory_input_stream_new_from_data
         data
         len
         destroy)
  (unless
    ~g_memory_input_stream_new_from_data
    (set! ~g_memory_input_stream_new_from_data
      (fh-link-proc
        "g_memory_input_stream_new_from_data"
        '*
        (list '* ffi:long '*))))
  (let ((~data (unwrap~pointer data))
        (~len (unwrap~fixed len))
        (~destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy)))
    (wrap-GInputStream*
      (~g_memory_input_stream_new_from_data
        ~data
        ~len
        ~destroy))))
(export g_memory_input_stream_new_from_data)

;; extern GInputStream *g_memory_input_stream_new_from_bytes(GBytes *bytes);
(define ~g_memory_input_stream_new_from_bytes #f)
(define (g_memory_input_stream_new_from_bytes bytes)
  (unless
    ~g_memory_input_stream_new_from_bytes
    (set! ~g_memory_input_stream_new_from_bytes
      (fh-link-proc
        "g_memory_input_stream_new_from_bytes"
        '*
        (list '*))))
  (let ()
    (wrap-GInputStream*
      (~g_memory_input_stream_new_from_bytes bytes))))
(export g_memory_input_stream_new_from_bytes)

;; extern void g_memory_input_stream_add_data(GMemoryInputStream *stream, const
;;      void *data, gssize len, GDestroyNotify destroy);
(define ~g_memory_input_stream_add_data #f)
(define (g_memory_input_stream_add_data
         stream
         data
         len
         destroy)
  (unless
    ~g_memory_input_stream_add_data
    (set! ~g_memory_input_stream_add_data
      (fh-link-proc
        "g_memory_input_stream_add_data"
        ffi:void
        (list '* '* ffi:long '*))))
  (let ((~stream (unwrap-GMemoryInputStream* stream))
        (~data (unwrap~pointer data))
        (~len (unwrap~fixed len))
        (~destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy)))
    (~g_memory_input_stream_add_data
      ~stream
      ~data
      ~len
      ~destroy)))
(export g_memory_input_stream_add_data)

;; extern void g_memory_input_stream_add_bytes(GMemoryInputStream *stream, 
;;     GBytes *bytes);
(define ~g_memory_input_stream_add_bytes #f)
(define (g_memory_input_stream_add_bytes stream bytes)
  (unless
    ~g_memory_input_stream_add_bytes
    (set! ~g_memory_input_stream_add_bytes
      (fh-link-proc
        "g_memory_input_stream_add_bytes"
        ffi:void
        (list '* '*))))
  (let ((~stream (unwrap-GMemoryInputStream* stream)))
    (~g_memory_input_stream_add_bytes ~stream bytes)))
(export g_memory_input_stream_add_bytes)

;; typedef struct _GMemoryOutputStreamClass GMemoryOutputStreamClass;
(define GMemoryOutputStreamClass-desc void)
(export GMemoryOutputStreamClass-desc)
(define GMemoryOutputStreamClass*-desc (bs:pointer (delay GMemoryOutputStreamClass-desc)))
(export GMemoryOutputStreamClass*-desc)
(define-fh-pointer-type GMemoryOutputStreamClass* GMemoryOutputStreamClass*-desc)

;; typedef struct _GMemoryOutputStreamPrivate GMemoryOutputStreamPrivate;
(define GMemoryOutputStreamPrivate-desc void)
(export GMemoryOutputStreamPrivate-desc)
(define GMemoryOutputStreamPrivate*-desc (bs:pointer GMemoryOutputStreamPrivate-desc))
(export GMemoryOutputStreamPrivate*-desc)
(define-fh-pointer-type GMemoryOutputStreamPrivate* GMemoryOutputStreamPrivate*-desc)

;; struct _GMemoryOutputStream {
;;   GOutputStream parent_instance;
;;   /*< private >*/
;;   GMemoryOutputStreamPrivate *priv;
;; };
(define struct-_GMemoryOutputStream-desc
  (bs:struct
    (list `(parent_instance ,GOutputStream-desc)
          `(priv ,(bs:pointer
                    (delay GMemoryOutputStreamPrivate*-desc))))))
(export struct-_GMemoryOutputStream-desc)
(define-fh-compound-type/p struct-_GMemoryOutputStream struct-_GMemoryOutputStream-desc)
(set! GMemoryOutputStream-desc struct-_GMemoryOutputStream-desc)
(define-fh-compound-type GMemoryOutputStream GMemoryOutputStream-desc)

;; struct _GMemoryOutputStreamClass {
;;   GOutputStreamClass parent_class;
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GMemoryOutputStreamClass-desc
  (bs:struct
    (list `(parent_class ,GOutputStreamClass-desc)
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GMemoryOutputStreamClass-desc)
(define-fh-compound-type/p struct-_GMemoryOutputStreamClass struct-_GMemoryOutputStreamClass-desc)
(set! GMemoryOutputStreamClass-desc struct-_GMemoryOutputStreamClass-desc)
(define-fh-compound-type GMemoryOutputStreamClass GMemoryOutputStreamClass-desc)

;; typedef gpointer (*GReallocFunc)(gpointer data, gsize size);
(define-fh-function/p GReallocFunc
  (quote *) (list (quote *) ffi:unsigned-long))

;; extern GType g_memory_output_stream_get_type(void);
(define ~g_memory_output_stream_get_type #f)
(define (g_memory_output_stream_get_type)
  (unless
    ~g_memory_output_stream_get_type
    (set! ~g_memory_output_stream_get_type
      (fh-link-proc
        "g_memory_output_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_memory_output_stream_get_type)))
(export g_memory_output_stream_get_type)

;; extern GOutputStream *g_memory_output_stream_new(gpointer data, gsize size, 
;;     GReallocFunc realloc_function, GDestroyNotify destroy_function);
(define ~g_memory_output_stream_new #f)
(define (g_memory_output_stream_new
         data
         size
         realloc_function
         destroy_function)
  (unless
    ~g_memory_output_stream_new
    (set! ~g_memory_output_stream_new
      (fh-link-proc
        "g_memory_output_stream_new"
        '*
        (list '* ffi:unsigned-long '* '*))))
  (let ((~data (unwrap-gpointer data))
        (~size (unwrap~fixed size))
        (~realloc_function
          ((make-ftn-arg-unwrapper
             '*
             (list '* ffi:unsigned-long))
           realloc_function))
        (~destroy_function
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy_function)))
    (wrap-GOutputStream*
      (~g_memory_output_stream_new
        ~data
        ~size
        ~realloc_function
        ~destroy_function))))
(export g_memory_output_stream_new)

;; extern GOutputStream *g_memory_output_stream_new_resizable(void);
(define ~g_memory_output_stream_new_resizable #f)
(define (g_memory_output_stream_new_resizable)
  (unless
    ~g_memory_output_stream_new_resizable
    (set! ~g_memory_output_stream_new_resizable
      (fh-link-proc
        "g_memory_output_stream_new_resizable"
        '*
        (list))))
  (let ()
    (wrap-GOutputStream*
      (~g_memory_output_stream_new_resizable))))
(export g_memory_output_stream_new_resizable)

;; extern gpointer g_memory_output_stream_get_data(GMemoryOutputStream *ostream
;;     );
(define ~g_memory_output_stream_get_data #f)
(define (g_memory_output_stream_get_data ostream)
  (unless
    ~g_memory_output_stream_get_data
    (set! ~g_memory_output_stream_get_data
      (fh-link-proc
        "g_memory_output_stream_get_data"
        '*
        (list '*))))
  (let ((~ostream (unwrap-GMemoryOutputStream* ostream)))
    (wrap-gpointer
      (~g_memory_output_stream_get_data ~ostream))))
(export g_memory_output_stream_get_data)

;; extern gsize g_memory_output_stream_get_size(GMemoryOutputStream *ostream);
(define ~g_memory_output_stream_get_size #f)
(define (g_memory_output_stream_get_size ostream)
  (unless
    ~g_memory_output_stream_get_size
    (set! ~g_memory_output_stream_get_size
      (fh-link-proc
        "g_memory_output_stream_get_size"
        ffi:unsigned-long
        (list '*))))
  (let ((~ostream (unwrap-GMemoryOutputStream* ostream)))
    (~g_memory_output_stream_get_size ~ostream)))
(export g_memory_output_stream_get_size)

;; extern gsize g_memory_output_stream_get_data_size(GMemoryOutputStream *
;;     ostream);
(define ~g_memory_output_stream_get_data_size #f)
(define (g_memory_output_stream_get_data_size ostream)
  (unless
    ~g_memory_output_stream_get_data_size
    (set! ~g_memory_output_stream_get_data_size
      (fh-link-proc
        "g_memory_output_stream_get_data_size"
        ffi:unsigned-long
        (list '*))))
  (let ((~ostream (unwrap-GMemoryOutputStream* ostream)))
    (~g_memory_output_stream_get_data_size ~ostream)))
(export g_memory_output_stream_get_data_size)

;; extern gpointer g_memory_output_stream_steal_data(GMemoryOutputStream *
;;     ostream);
(define ~g_memory_output_stream_steal_data #f)
(define (g_memory_output_stream_steal_data ostream)
  (unless
    ~g_memory_output_stream_steal_data
    (set! ~g_memory_output_stream_steal_data
      (fh-link-proc
        "g_memory_output_stream_steal_data"
        '*
        (list '*))))
  (let ((~ostream (unwrap-GMemoryOutputStream* ostream)))
    (wrap-gpointer
      (~g_memory_output_stream_steal_data ~ostream))))
(export g_memory_output_stream_steal_data)

;; extern GBytes *g_memory_output_stream_steal_as_bytes(GMemoryOutputStream *
;;     ostream);
(define ~g_memory_output_stream_steal_as_bytes #f)
(define (g_memory_output_stream_steal_as_bytes ostream)
  (unless
    ~g_memory_output_stream_steal_as_bytes
    (set! ~g_memory_output_stream_steal_as_bytes
      (fh-link-proc
        "g_memory_output_stream_steal_as_bytes"
        '*
        (list '*))))
  (let ((~ostream (unwrap-GMemoryOutputStream* ostream)))
    (~g_memory_output_stream_steal_as_bytes ~ostream)))
(export g_memory_output_stream_steal_as_bytes)

;; typedef struct _GMountIface GMountIface;
(define GMountIface-desc void)
(export GMountIface-desc)
(define GMountIface*-desc (bs:pointer (delay GMountIface-desc)))
(export GMountIface*-desc)
(define-fh-pointer-type GMountIface* GMountIface*-desc)

;; struct _GMountIface {
;;   GTypeInterface g_iface;
;;   /* signals */
;;   void (*changed)(GMount *mount);
;;   void (*unmounted)(GMount *mount);
;;   /* Virtual Table */
;;   GFile *(*get_root)(GMount *mount);
;;   char *(*get_name)(GMount *mount);
;;   GIcon *(*get_icon)(GMount *mount);
;;   char *(*get_uuid)(GMount *mount);
;;   GVolume *(*get_volume)(GMount *mount);
;;   GDrive *(*get_drive)(GMount *mount);
;;   gboolean (*can_unmount)(GMount *mount);
;;   gboolean (*can_eject)(GMount *mount);
;;   void (*unmount)(GMount *mount, GMountUnmountFlags flags, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*unmount_finish)(GMount *mount, GAsyncResult *result, GError **
;;       error);
;;   void (*eject)(GMount *mount, GMountUnmountFlags flags, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*eject_finish)(GMount *mount, GAsyncResult *result, GError **
;;       error);
;;   void (*remount)(GMount *mount, GMountMountFlags flags, GMountOperation *
;;       mount_operation, GCancellable *cancellable, GAsyncReadyCallback 
;;       callback, gpointer user_data);
;;   gboolean (*remount_finish)(GMount *mount, GAsyncResult *result, GError **
;;       error);
;;   void (*guess_content_type)(GMount *mount, gboolean force_rescan, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   gchar **(*guess_content_type_finish)(GMount *mount, GAsyncResult *result, 
;;       GError **error);
;;   gchar **(*guess_content_type_sync)(GMount *mount, gboolean force_rescan, 
;;       GCancellable *cancellable, GError **error);
;;   /* Signal, not VFunc */
;;   void (*pre_unmount)(GMount *mount);
;;   void (*unmount_with_operation)(GMount *mount, GMountUnmountFlags flags, 
;;       GMountOperation *mount_operation, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*unmount_with_operation_finish)(GMount *mount, GAsyncResult *
;;       result, GError **error);
;;   void (*eject_with_operation)(GMount *mount, GMountUnmountFlags flags, 
;;       GMountOperation *mount_operation, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*eject_with_operation_finish)(GMount *mount, GAsyncResult *
;;       result, GError **error);
;;   GFile *(*get_default_location)(GMount *mount);
;;   const gchar *(*get_sort_key)(GMount *mount);
;;   GIcon *(*get_symbolic_icon)(GMount *mount);
;; };
(define struct-_GMountIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(changed ,(bs:pointer void))
          `(unmounted ,(bs:pointer void))
          `(get_root ,(bs:pointer void))
          `(get_name ,(bs:pointer void))
          `(get_icon ,(bs:pointer void))
          `(get_uuid ,(bs:pointer void))
          `(get_volume ,(bs:pointer void))
          `(get_drive ,(bs:pointer void))
          `(can_unmount ,(bs:pointer void))
          `(can_eject ,(bs:pointer void))
          `(unmount ,(bs:pointer void))
          `(unmount_finish ,(bs:pointer void))
          `(eject ,(bs:pointer void))
          `(eject_finish ,(bs:pointer void))
          `(remount ,(bs:pointer void))
          `(remount_finish ,(bs:pointer void))
          `(guess_content_type ,(bs:pointer void))
          `(guess_content_type_finish ,(bs:pointer void))
          `(guess_content_type_sync ,(bs:pointer void))
          `(pre_unmount ,(bs:pointer void))
          `(unmount_with_operation ,(bs:pointer void))
          `(unmount_with_operation_finish
             ,(bs:pointer void))
          `(eject_with_operation ,(bs:pointer void))
          `(eject_with_operation_finish ,(bs:pointer void))
          `(get_default_location ,(bs:pointer void))
          `(get_sort_key ,(bs:pointer void))
          `(get_symbolic_icon ,(bs:pointer void)))))
(export struct-_GMountIface-desc)
(define-fh-compound-type/p struct-_GMountIface struct-_GMountIface-desc)
(set! GMountIface-desc struct-_GMountIface-desc)
(define-fh-compound-type GMountIface GMountIface-desc)

;; extern GType g_mount_get_type(void);
(define ~g_mount_get_type #f)
(define (g_mount_get_type)
  (unless
    ~g_mount_get_type
    (set! ~g_mount_get_type
      (fh-link-proc
        "g_mount_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_mount_get_type)))
(export g_mount_get_type)

;; extern GFile *g_mount_get_root(GMount *mount);
(define ~g_mount_get_root #f)
(define (g_mount_get_root mount)
  (unless
    ~g_mount_get_root
    (set! ~g_mount_get_root
      (fh-link-proc "g_mount_get_root" '* (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (wrap-GFile* (~g_mount_get_root ~mount))))
(export g_mount_get_root)

;; extern GFile *g_mount_get_default_location(GMount *mount);
(define ~g_mount_get_default_location #f)
(define (g_mount_get_default_location mount)
  (unless
    ~g_mount_get_default_location
    (set! ~g_mount_get_default_location
      (fh-link-proc
        "g_mount_get_default_location"
        '*
        (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (wrap-GFile*
      (~g_mount_get_default_location ~mount))))
(export g_mount_get_default_location)

;; extern char *g_mount_get_name(GMount *mount);
(define ~g_mount_get_name #f)
(define (g_mount_get_name mount)
  (unless
    ~g_mount_get_name
    (set! ~g_mount_get_name
      (fh-link-proc "g_mount_get_name" '* (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (~g_mount_get_name ~mount)))
(export g_mount_get_name)

;; extern GIcon *g_mount_get_icon(GMount *mount);
(define ~g_mount_get_icon #f)
(define (g_mount_get_icon mount)
  (unless
    ~g_mount_get_icon
    (set! ~g_mount_get_icon
      (fh-link-proc "g_mount_get_icon" '* (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (wrap-GIcon* (~g_mount_get_icon ~mount))))
(export g_mount_get_icon)

;; extern GIcon *g_mount_get_symbolic_icon(GMount *mount);
(define ~g_mount_get_symbolic_icon #f)
(define (g_mount_get_symbolic_icon mount)
  (unless
    ~g_mount_get_symbolic_icon
    (set! ~g_mount_get_symbolic_icon
      (fh-link-proc
        "g_mount_get_symbolic_icon"
        '*
        (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (wrap-GIcon* (~g_mount_get_symbolic_icon ~mount))))
(export g_mount_get_symbolic_icon)

;; extern char *g_mount_get_uuid(GMount *mount);
(define ~g_mount_get_uuid #f)
(define (g_mount_get_uuid mount)
  (unless
    ~g_mount_get_uuid
    (set! ~g_mount_get_uuid
      (fh-link-proc "g_mount_get_uuid" '* (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (~g_mount_get_uuid ~mount)))
(export g_mount_get_uuid)

;; extern GVolume *g_mount_get_volume(GMount *mount);
(define ~g_mount_get_volume #f)
(define (g_mount_get_volume mount)
  (unless
    ~g_mount_get_volume
    (set! ~g_mount_get_volume
      (fh-link-proc "g_mount_get_volume" '* (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (wrap-GVolume* (~g_mount_get_volume ~mount))))
(export g_mount_get_volume)

;; extern GDrive *g_mount_get_drive(GMount *mount);
(define ~g_mount_get_drive #f)
(define (g_mount_get_drive mount)
  (unless
    ~g_mount_get_drive
    (set! ~g_mount_get_drive
      (fh-link-proc "g_mount_get_drive" '* (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (wrap-GDrive* (~g_mount_get_drive ~mount))))
(export g_mount_get_drive)

;; extern gboolean g_mount_can_unmount(GMount *mount);
(define ~g_mount_can_unmount #f)
(define (g_mount_can_unmount mount)
  (unless
    ~g_mount_can_unmount
    (set! ~g_mount_can_unmount
      (fh-link-proc
        "g_mount_can_unmount"
        ffi:int
        (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (~g_mount_can_unmount ~mount)))
(export g_mount_can_unmount)

;; extern gboolean g_mount_can_eject(GMount *mount);
(define ~g_mount_can_eject #f)
(define (g_mount_can_eject mount)
  (unless
    ~g_mount_can_eject
    (set! ~g_mount_can_eject
      (fh-link-proc
        "g_mount_can_eject"
        ffi:int
        (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (~g_mount_can_eject ~mount)))
(export g_mount_can_eject)

;; extern void g_mount_unmount(GMount *mount, GMountUnmountFlags flags, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_mount_unmount #f)
(define (g_mount_unmount
         mount
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_mount_unmount
    (set! ~g_mount_unmount
      (fh-link-proc
        "g_mount_unmount"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_mount_unmount
      ~mount
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_mount_unmount)

;; extern gboolean g_mount_unmount_finish(GMount *mount, GAsyncResult *result, 
;;     GError **error);
(define ~g_mount_unmount_finish #f)
(define (g_mount_unmount_finish mount result error)
  (unless
    ~g_mount_unmount_finish
    (set! ~g_mount_unmount_finish
      (fh-link-proc
        "g_mount_unmount_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_mount_unmount_finish ~mount ~result ~error)))
(export g_mount_unmount_finish)

;; extern void g_mount_eject(GMount *mount, GMountUnmountFlags flags, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_mount_eject #f)
(define (g_mount_eject
         mount
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_mount_eject
    (set! ~g_mount_eject
      (fh-link-proc
        "g_mount_eject"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_mount_eject
      ~mount
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_mount_eject)

;; extern gboolean g_mount_eject_finish(GMount *mount, GAsyncResult *result, 
;;     GError **error);
(define ~g_mount_eject_finish #f)
(define (g_mount_eject_finish mount result error)
  (unless
    ~g_mount_eject_finish
    (set! ~g_mount_eject_finish
      (fh-link-proc
        "g_mount_eject_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_mount_eject_finish ~mount ~result ~error)))
(export g_mount_eject_finish)

;; extern void g_mount_remount(GMount *mount, GMountMountFlags flags, 
;;     GMountOperation *mount_operation, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_mount_remount #f)
(define (g_mount_remount
         mount
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_mount_remount
    (set! ~g_mount_remount
      (fh-link-proc
        "g_mount_remount"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_mount_remount
      ~mount
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_mount_remount)

;; extern gboolean g_mount_remount_finish(GMount *mount, GAsyncResult *result, 
;;     GError **error);
(define ~g_mount_remount_finish #f)
(define (g_mount_remount_finish mount result error)
  (unless
    ~g_mount_remount_finish
    (set! ~g_mount_remount_finish
      (fh-link-proc
        "g_mount_remount_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_mount_remount_finish ~mount ~result ~error)))
(export g_mount_remount_finish)

;; extern void g_mount_guess_content_type(GMount *mount, gboolean force_rescan
;;     , GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_mount_guess_content_type #f)
(define (g_mount_guess_content_type
         mount
         force_rescan
         cancellable
         callback
         user_data)
  (unless
    ~g_mount_guess_content_type
    (set! ~g_mount_guess_content_type
      (fh-link-proc
        "g_mount_guess_content_type"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~force_rescan (unwrap~fixed force_rescan))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_mount_guess_content_type
      ~mount
      ~force_rescan
      ~cancellable
      ~callback
      ~user_data)))
(export g_mount_guess_content_type)

;; extern gchar **g_mount_guess_content_type_finish(GMount *mount, GAsyncResult
;;      *result, GError **error);
(define ~g_mount_guess_content_type_finish #f)
(define (g_mount_guess_content_type_finish
         mount
         result
         error)
  (unless
    ~g_mount_guess_content_type_finish
    (set! ~g_mount_guess_content_type_finish
      (fh-link-proc
        "g_mount_guess_content_type_finish"
        '*
        (list '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_mount_guess_content_type_finish
      ~mount
      ~result
      ~error)))
(export g_mount_guess_content_type_finish)

;; extern gchar **g_mount_guess_content_type_sync(GMount *mount, gboolean 
;;     force_rescan, GCancellable *cancellable, GError **error);
(define ~g_mount_guess_content_type_sync #f)
(define (g_mount_guess_content_type_sync
         mount
         force_rescan
         cancellable
         error)
  (unless
    ~g_mount_guess_content_type_sync
    (set! ~g_mount_guess_content_type_sync
      (fh-link-proc
        "g_mount_guess_content_type_sync"
        '*
        (list '* ffi:int '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~force_rescan (unwrap~fixed force_rescan))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_mount_guess_content_type_sync
      ~mount
      ~force_rescan
      ~cancellable
      ~error)))
(export g_mount_guess_content_type_sync)

;; extern gboolean g_mount_is_shadowed(GMount *mount);
(define ~g_mount_is_shadowed #f)
(define (g_mount_is_shadowed mount)
  (unless
    ~g_mount_is_shadowed
    (set! ~g_mount_is_shadowed
      (fh-link-proc
        "g_mount_is_shadowed"
        ffi:int
        (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (~g_mount_is_shadowed ~mount)))
(export g_mount_is_shadowed)

;; extern void g_mount_shadow(GMount *mount);
(define ~g_mount_shadow #f)
(define (g_mount_shadow mount)
  (unless
    ~g_mount_shadow
    (set! ~g_mount_shadow
      (fh-link-proc
        "g_mount_shadow"
        ffi:void
        (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (~g_mount_shadow ~mount)))
(export g_mount_shadow)

;; extern void g_mount_unshadow(GMount *mount);
(define ~g_mount_unshadow #f)
(define (g_mount_unshadow mount)
  (unless
    ~g_mount_unshadow
    (set! ~g_mount_unshadow
      (fh-link-proc
        "g_mount_unshadow"
        ffi:void
        (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (~g_mount_unshadow ~mount)))
(export g_mount_unshadow)

;; extern void g_mount_unmount_with_operation(GMount *mount, GMountUnmountFlags
;;      flags, GMountOperation *mount_operation, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_mount_unmount_with_operation #f)
(define (g_mount_unmount_with_operation
         mount
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_mount_unmount_with_operation
    (set! ~g_mount_unmount_with_operation
      (fh-link-proc
        "g_mount_unmount_with_operation"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_mount_unmount_with_operation
      ~mount
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_mount_unmount_with_operation)

;; extern gboolean g_mount_unmount_with_operation_finish(GMount *mount, 
;;     GAsyncResult *result, GError **error);
(define ~g_mount_unmount_with_operation_finish #f)
(define (g_mount_unmount_with_operation_finish
         mount
         result
         error)
  (unless
    ~g_mount_unmount_with_operation_finish
    (set! ~g_mount_unmount_with_operation_finish
      (fh-link-proc
        "g_mount_unmount_with_operation_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_mount_unmount_with_operation_finish
      ~mount
      ~result
      ~error)))
(export g_mount_unmount_with_operation_finish)

;; extern void g_mount_eject_with_operation(GMount *mount, GMountUnmountFlags 
;;     flags, GMountOperation *mount_operation, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_mount_eject_with_operation #f)
(define (g_mount_eject_with_operation
         mount
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_mount_eject_with_operation
    (set! ~g_mount_eject_with_operation
      (fh-link-proc
        "g_mount_eject_with_operation"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_mount_eject_with_operation
      ~mount
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_mount_eject_with_operation)

;; extern gboolean g_mount_eject_with_operation_finish(GMount *mount, 
;;     GAsyncResult *result, GError **error);
(define ~g_mount_eject_with_operation_finish #f)
(define (g_mount_eject_with_operation_finish
         mount
         result
         error)
  (unless
    ~g_mount_eject_with_operation_finish
    (set! ~g_mount_eject_with_operation_finish
      (fh-link-proc
        "g_mount_eject_with_operation_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~mount (unwrap-GMount* mount))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_mount_eject_with_operation_finish
      ~mount
      ~result
      ~error)))
(export g_mount_eject_with_operation_finish)

;; extern const gchar *g_mount_get_sort_key(GMount *mount);
(define ~g_mount_get_sort_key #f)
(define (g_mount_get_sort_key mount)
  (unless
    ~g_mount_get_sort_key
    (set! ~g_mount_get_sort_key
      (fh-link-proc
        "g_mount_get_sort_key"
        '*
        (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (~g_mount_get_sort_key ~mount)))
(export g_mount_get_sort_key)

;; typedef struct _GMountOperationClass GMountOperationClass;
(define GMountOperationClass-desc void)
(export GMountOperationClass-desc)
(define GMountOperationClass*-desc (bs:pointer (delay GMountOperationClass-desc)))
(export GMountOperationClass*-desc)
(define-fh-pointer-type GMountOperationClass* GMountOperationClass*-desc)

;; typedef struct _GMountOperationPrivate GMountOperationPrivate;
(define GMountOperationPrivate-desc void)
(export GMountOperationPrivate-desc)
(define GMountOperationPrivate*-desc (bs:pointer GMountOperationPrivate-desc))
(export GMountOperationPrivate*-desc)
(define-fh-pointer-type GMountOperationPrivate* GMountOperationPrivate*-desc)

;; struct _GMountOperation {
;;   GObject parent_instance;
;;   GMountOperationPrivate *priv;
;; };
(define struct-_GMountOperation-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GMountOperationPrivate*-desc))))))
(export struct-_GMountOperation-desc)
(define-fh-compound-type/p struct-_GMountOperation struct-_GMountOperation-desc)
(set! GMountOperation-desc struct-_GMountOperation-desc)
(define-fh-compound-type GMountOperation GMountOperation-desc)

;; struct _GMountOperationClass {
;;   GObjectClass parent_class;
;;   /* signals: */
;;   void (*ask_password)(GMountOperation *op, const char *message, const char 
;;       *default_user, const char *default_domain, GAskPasswordFlags flags);
;;   void (*ask_question)(GMountOperation *op, const char *message, const char 
;;       *choices[]);
;;   void (*reply)(GMountOperation *op, GMountOperationResult result);
;;   void (*aborted)(GMountOperation *op);
;;   void (*show_processes)(GMountOperation *op, const gchar *message, GArray *
;;       processes, const gchar *choices[]);
;;   void (*show_unmount_progress)(GMountOperation *op, const gchar *message, 
;;       gint64 time_left, gint64 bytes_left);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;;   void (*_g_reserved7)(void);
;;   void (*_g_reserved8)(void);
;;   void (*_g_reserved9)(void);
;; };
(define struct-_GMountOperationClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(ask_password ,(bs:pointer void))
          `(ask_question ,(bs:pointer void))
          `(reply ,(bs:pointer void))
          `(aborted ,(bs:pointer void))
          `(show_processes ,(bs:pointer void))
          `(show_unmount_progress ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void))
          `(_g_reserved7 ,(bs:pointer void))
          `(_g_reserved8 ,(bs:pointer void))
          `(_g_reserved9 ,(bs:pointer void)))))
(export struct-_GMountOperationClass-desc)
(define-fh-compound-type/p struct-_GMountOperationClass struct-_GMountOperationClass-desc)
(set! GMountOperationClass-desc struct-_GMountOperationClass-desc)
(define-fh-compound-type GMountOperationClass GMountOperationClass-desc)

;; extern GType g_mount_operation_get_type(void);
(define ~g_mount_operation_get_type #f)
(define (g_mount_operation_get_type)
  (unless
    ~g_mount_operation_get_type
    (set! ~g_mount_operation_get_type
      (fh-link-proc
        "g_mount_operation_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_mount_operation_get_type)))
(export g_mount_operation_get_type)

;; extern GMountOperation *g_mount_operation_new(void);
(define ~g_mount_operation_new #f)
(define (g_mount_operation_new)
  (unless
    ~g_mount_operation_new
    (set! ~g_mount_operation_new
      (fh-link-proc "g_mount_operation_new" '* (list))))
  (let ()
    (wrap-GMountOperation* (~g_mount_operation_new))))
(export g_mount_operation_new)

;; extern const char *g_mount_operation_get_username(GMountOperation *op);
(define ~g_mount_operation_get_username #f)
(define (g_mount_operation_get_username op)
  (unless
    ~g_mount_operation_get_username
    (set! ~g_mount_operation_get_username
      (fh-link-proc
        "g_mount_operation_get_username"
        '*
        (list '*))))
  (let ((~op (unwrap-GMountOperation* op)))
    (~g_mount_operation_get_username ~op)))
(export g_mount_operation_get_username)

;; extern void g_mount_operation_set_username(GMountOperation *op, const char *
;;     username);
(define ~g_mount_operation_set_username #f)
(define (g_mount_operation_set_username op username)
  (unless
    ~g_mount_operation_set_username
    (set! ~g_mount_operation_set_username
      (fh-link-proc
        "g_mount_operation_set_username"
        ffi:void
        (list '* '*))))
  (let ((~op (unwrap-GMountOperation* op))
        (~username (unwrap~pointer username)))
    (~g_mount_operation_set_username ~op ~username)))
(export g_mount_operation_set_username)

;; extern const char *g_mount_operation_get_password(GMountOperation *op);
(define ~g_mount_operation_get_password #f)
(define (g_mount_operation_get_password op)
  (unless
    ~g_mount_operation_get_password
    (set! ~g_mount_operation_get_password
      (fh-link-proc
        "g_mount_operation_get_password"
        '*
        (list '*))))
  (let ((~op (unwrap-GMountOperation* op)))
    (~g_mount_operation_get_password ~op)))
(export g_mount_operation_get_password)

;; extern void g_mount_operation_set_password(GMountOperation *op, const char *
;;     password);
(define ~g_mount_operation_set_password #f)
(define (g_mount_operation_set_password op password)
  (unless
    ~g_mount_operation_set_password
    (set! ~g_mount_operation_set_password
      (fh-link-proc
        "g_mount_operation_set_password"
        ffi:void
        (list '* '*))))
  (let ((~op (unwrap-GMountOperation* op))
        (~password (unwrap~pointer password)))
    (~g_mount_operation_set_password ~op ~password)))
(export g_mount_operation_set_password)

;; extern gboolean g_mount_operation_get_anonymous(GMountOperation *op);
(define ~g_mount_operation_get_anonymous #f)
(define (g_mount_operation_get_anonymous op)
  (unless
    ~g_mount_operation_get_anonymous
    (set! ~g_mount_operation_get_anonymous
      (fh-link-proc
        "g_mount_operation_get_anonymous"
        ffi:int
        (list '*))))
  (let ((~op (unwrap-GMountOperation* op)))
    (~g_mount_operation_get_anonymous ~op)))
(export g_mount_operation_get_anonymous)

;; extern void g_mount_operation_set_anonymous(GMountOperation *op, gboolean 
;;     anonymous);
(define ~g_mount_operation_set_anonymous #f)
(define (g_mount_operation_set_anonymous op anonymous)
  (unless
    ~g_mount_operation_set_anonymous
    (set! ~g_mount_operation_set_anonymous
      (fh-link-proc
        "g_mount_operation_set_anonymous"
        ffi:void
        (list '* ffi:int))))
  (let ((~op (unwrap-GMountOperation* op))
        (~anonymous (unwrap~fixed anonymous)))
    (~g_mount_operation_set_anonymous ~op ~anonymous)))
(export g_mount_operation_set_anonymous)

;; extern const char *g_mount_operation_get_domain(GMountOperation *op);
(define ~g_mount_operation_get_domain #f)
(define (g_mount_operation_get_domain op)
  (unless
    ~g_mount_operation_get_domain
    (set! ~g_mount_operation_get_domain
      (fh-link-proc
        "g_mount_operation_get_domain"
        '*
        (list '*))))
  (let ((~op (unwrap-GMountOperation* op)))
    (~g_mount_operation_get_domain ~op)))
(export g_mount_operation_get_domain)

;; extern void g_mount_operation_set_domain(GMountOperation *op, const char *
;;     domain);
(define ~g_mount_operation_set_domain #f)
(define (g_mount_operation_set_domain op domain)
  (unless
    ~g_mount_operation_set_domain
    (set! ~g_mount_operation_set_domain
      (fh-link-proc
        "g_mount_operation_set_domain"
        ffi:void
        (list '* '*))))
  (let ((~op (unwrap-GMountOperation* op))
        (~domain (unwrap~pointer domain)))
    (~g_mount_operation_set_domain ~op ~domain)))
(export g_mount_operation_set_domain)

;; extern GPasswordSave g_mount_operation_get_password_save(GMountOperation *op
;;     );
(define ~g_mount_operation_get_password_save #f)
(define (g_mount_operation_get_password_save op)
  (unless
    ~g_mount_operation_get_password_save
    (set! ~g_mount_operation_get_password_save
      (fh-link-proc
        "g_mount_operation_get_password_save"
        ffi:int
        (list '*))))
  (let ((~op (unwrap-GMountOperation* op)))
    (~g_mount_operation_get_password_save ~op)))
(export g_mount_operation_get_password_save)

;; extern void g_mount_operation_set_password_save(GMountOperation *op, 
;;     GPasswordSave save);
(define ~g_mount_operation_set_password_save #f)
(define (g_mount_operation_set_password_save op save)
  (unless
    ~g_mount_operation_set_password_save
    (set! ~g_mount_operation_set_password_save
      (fh-link-proc
        "g_mount_operation_set_password_save"
        ffi:void
        (list '* ffi:int))))
  (let ((~op (unwrap-GMountOperation* op))
        (~save (unwrap~fixed save)))
    (~g_mount_operation_set_password_save ~op ~save)))
(export g_mount_operation_set_password_save)

;; extern int g_mount_operation_get_choice(GMountOperation *op);
(define ~g_mount_operation_get_choice #f)
(define (g_mount_operation_get_choice op)
  (unless
    ~g_mount_operation_get_choice
    (set! ~g_mount_operation_get_choice
      (fh-link-proc
        "g_mount_operation_get_choice"
        ffi:int
        (list '*))))
  (let ((~op (unwrap-GMountOperation* op)))
    (~g_mount_operation_get_choice ~op)))
(export g_mount_operation_get_choice)

;; extern void g_mount_operation_set_choice(GMountOperation *op, int choice);
(define ~g_mount_operation_set_choice #f)
(define (g_mount_operation_set_choice op choice)
  (unless
    ~g_mount_operation_set_choice
    (set! ~g_mount_operation_set_choice
      (fh-link-proc
        "g_mount_operation_set_choice"
        ffi:void
        (list '* ffi:int))))
  (let ((~op (unwrap-GMountOperation* op))
        (~choice (unwrap~fixed choice)))
    (~g_mount_operation_set_choice ~op ~choice)))
(export g_mount_operation_set_choice)

;; extern void g_mount_operation_reply(GMountOperation *op, 
;;     GMountOperationResult result);
(define ~g_mount_operation_reply #f)
(define (g_mount_operation_reply op result)
  (unless
    ~g_mount_operation_reply
    (set! ~g_mount_operation_reply
      (fh-link-proc
        "g_mount_operation_reply"
        ffi:void
        (list '* ffi:int))))
  (let ((~op (unwrap-GMountOperation* op))
        (~result (unwrap~fixed result)))
    (~g_mount_operation_reply ~op ~result)))
(export g_mount_operation_reply)

;; typedef struct _GVolumeMonitorClass GVolumeMonitorClass;
(define GVolumeMonitorClass-desc void)
(export GVolumeMonitorClass-desc)
(define GVolumeMonitorClass*-desc (bs:pointer (delay GVolumeMonitorClass-desc)))
(export GVolumeMonitorClass*-desc)
(define-fh-pointer-type GVolumeMonitorClass* GVolumeMonitorClass*-desc)

;; struct _GVolumeMonitor {
;;   GObject parent_instance;
;;   /*< private >*/
;;   gpointer priv;
;; };
(define struct-_GVolumeMonitor-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,gpointer-desc))))
(export struct-_GVolumeMonitor-desc)
(define-fh-compound-type/p struct-_GVolumeMonitor struct-_GVolumeMonitor-desc)
(set! GVolumeMonitor-desc struct-_GVolumeMonitor-desc)
(define-fh-compound-type GVolumeMonitor GVolumeMonitor-desc)

;; struct _GVolumeMonitorClass {
;;   GObjectClass parent_class;
;;   /*< public >*/
;;   /* signals */
;;   void (*volume_added)(GVolumeMonitor *volume_monitor, GVolume *volume);
;;   void (*volume_removed)(GVolumeMonitor *volume_monitor, GVolume *volume);
;;   void (*volume_changed)(GVolumeMonitor *volume_monitor, GVolume *volume);
;;   void (*mount_added)(GVolumeMonitor *volume_monitor, GMount *mount);
;;   void (*mount_removed)(GVolumeMonitor *volume_monitor, GMount *mount);
;;   void (*mount_pre_unmount)(GVolumeMonitor *volume_monitor, GMount *mount);
;;   void (*mount_changed)(GVolumeMonitor *volume_monitor, GMount *mount);
;;   void (*drive_connected)(GVolumeMonitor *volume_monitor, GDrive *drive);
;;   void (*drive_disconnected)(GVolumeMonitor *volume_monitor, GDrive *drive)
;;       ;
;;   void (*drive_changed)(GVolumeMonitor *volume_monitor, GDrive *drive);
;;   /* Vtable */
;;   gboolean (*is_supported)(void);
;;   GList *(*get_connected_drives)(GVolumeMonitor *volume_monitor);
;;   GList *(*get_volumes)(GVolumeMonitor *volume_monitor);
;;   GList *(*get_mounts)(GVolumeMonitor *volume_monitor);
;;   GVolume *(*get_volume_for_uuid)(GVolumeMonitor *volume_monitor, const char
;;        *uuid);
;;   GMount *(*get_mount_for_uuid)(GVolumeMonitor *volume_monitor, const char *
;;       uuid);
;;   /* These arguments are unfortunately backwards by mistake (bug #520169). Deprecated in 2.20. */
;;       
;;   GVolume *(*adopt_orphan_mount)(GMount *mount, GVolumeMonitor *
;;       volume_monitor);
;;   /* signal added in 2.17 */
;;   void (*drive_eject_button)(GVolumeMonitor *volume_monitor, GDrive *drive)
;;       ;
;;   /* signal added in 2.21 */
;;   void (*drive_stop_button)(GVolumeMonitor *volume_monitor, GDrive *drive);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;; };
(define struct-_GVolumeMonitorClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(volume_added ,(bs:pointer void))
          `(volume_removed ,(bs:pointer void))
          `(volume_changed ,(bs:pointer void))
          `(mount_added ,(bs:pointer void))
          `(mount_removed ,(bs:pointer void))
          `(mount_pre_unmount ,(bs:pointer void))
          `(mount_changed ,(bs:pointer void))
          `(drive_connected ,(bs:pointer void))
          `(drive_disconnected ,(bs:pointer void))
          `(drive_changed ,(bs:pointer void))
          `(is_supported ,(bs:pointer void))
          `(get_connected_drives ,(bs:pointer void))
          `(get_volumes ,(bs:pointer void))
          `(get_mounts ,(bs:pointer void))
          `(get_volume_for_uuid ,(bs:pointer void))
          `(get_mount_for_uuid ,(bs:pointer void))
          `(adopt_orphan_mount ,(bs:pointer void))
          `(drive_eject_button ,(bs:pointer void))
          `(drive_stop_button ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void)))))
(export struct-_GVolumeMonitorClass-desc)
(define-fh-compound-type/p struct-_GVolumeMonitorClass struct-_GVolumeMonitorClass-desc)
(set! GVolumeMonitorClass-desc struct-_GVolumeMonitorClass-desc)
(define-fh-compound-type GVolumeMonitorClass GVolumeMonitorClass-desc)

;; extern GType g_volume_monitor_get_type(void);
(define ~g_volume_monitor_get_type #f)
(define (g_volume_monitor_get_type)
  (unless
    ~g_volume_monitor_get_type
    (set! ~g_volume_monitor_get_type
      (fh-link-proc
        "g_volume_monitor_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_volume_monitor_get_type)))
(export g_volume_monitor_get_type)

;; extern GVolumeMonitor *g_volume_monitor_get(void);
(define ~g_volume_monitor_get #f)
(define (g_volume_monitor_get)
  (unless
    ~g_volume_monitor_get
    (set! ~g_volume_monitor_get
      (fh-link-proc "g_volume_monitor_get" '* (list))))
  (let ()
    (wrap-GVolumeMonitor* (~g_volume_monitor_get))))
(export g_volume_monitor_get)

;; extern GList *g_volume_monitor_get_connected_drives(GVolumeMonitor *
;;     volume_monitor);
(define ~g_volume_monitor_get_connected_drives #f)
(define (g_volume_monitor_get_connected_drives
         volume_monitor)
  (unless
    ~g_volume_monitor_get_connected_drives
    (set! ~g_volume_monitor_get_connected_drives
      (fh-link-proc
        "g_volume_monitor_get_connected_drives"
        '*
        (list '*))))
  (let ((~volume_monitor
          (unwrap-GVolumeMonitor* volume_monitor)))
    (~g_volume_monitor_get_connected_drives
      ~volume_monitor)))
(export g_volume_monitor_get_connected_drives)

;; extern GList *g_volume_monitor_get_volumes(GVolumeMonitor *volume_monitor);
(define ~g_volume_monitor_get_volumes #f)
(define (g_volume_monitor_get_volumes volume_monitor)
  (unless
    ~g_volume_monitor_get_volumes
    (set! ~g_volume_monitor_get_volumes
      (fh-link-proc
        "g_volume_monitor_get_volumes"
        '*
        (list '*))))
  (let ((~volume_monitor
          (unwrap-GVolumeMonitor* volume_monitor)))
    (~g_volume_monitor_get_volumes ~volume_monitor)))
(export g_volume_monitor_get_volumes)

;; extern GList *g_volume_monitor_get_mounts(GVolumeMonitor *volume_monitor);
(define ~g_volume_monitor_get_mounts #f)
(define (g_volume_monitor_get_mounts volume_monitor)
  (unless
    ~g_volume_monitor_get_mounts
    (set! ~g_volume_monitor_get_mounts
      (fh-link-proc
        "g_volume_monitor_get_mounts"
        '*
        (list '*))))
  (let ((~volume_monitor
          (unwrap-GVolumeMonitor* volume_monitor)))
    (~g_volume_monitor_get_mounts ~volume_monitor)))
(export g_volume_monitor_get_mounts)

;; extern GVolume *g_volume_monitor_get_volume_for_uuid(GVolumeMonitor *
;;     volume_monitor, const char *uuid);
(define ~g_volume_monitor_get_volume_for_uuid #f)
(define (g_volume_monitor_get_volume_for_uuid
         volume_monitor
         uuid)
  (unless
    ~g_volume_monitor_get_volume_for_uuid
    (set! ~g_volume_monitor_get_volume_for_uuid
      (fh-link-proc
        "g_volume_monitor_get_volume_for_uuid"
        '*
        (list '* '*))))
  (let ((~volume_monitor
          (unwrap-GVolumeMonitor* volume_monitor))
        (~uuid (unwrap~pointer uuid)))
    (wrap-GVolume*
      (~g_volume_monitor_get_volume_for_uuid
        ~volume_monitor
        ~uuid))))
(export g_volume_monitor_get_volume_for_uuid)

;; extern GMount *g_volume_monitor_get_mount_for_uuid(GVolumeMonitor *
;;     volume_monitor, const char *uuid);
(define ~g_volume_monitor_get_mount_for_uuid #f)
(define (g_volume_monitor_get_mount_for_uuid
         volume_monitor
         uuid)
  (unless
    ~g_volume_monitor_get_mount_for_uuid
    (set! ~g_volume_monitor_get_mount_for_uuid
      (fh-link-proc
        "g_volume_monitor_get_mount_for_uuid"
        '*
        (list '* '*))))
  (let ((~volume_monitor
          (unwrap-GVolumeMonitor* volume_monitor))
        (~uuid (unwrap~pointer uuid)))
    (wrap-GMount*
      (~g_volume_monitor_get_mount_for_uuid
        ~volume_monitor
        ~uuid))))
(export g_volume_monitor_get_mount_for_uuid)

;; extern GVolume *g_volume_monitor_adopt_orphan_mount(GMount *mount);
(define ~g_volume_monitor_adopt_orphan_mount #f)
(define (g_volume_monitor_adopt_orphan_mount mount)
  (unless
    ~g_volume_monitor_adopt_orphan_mount
    (set! ~g_volume_monitor_adopt_orphan_mount
      (fh-link-proc
        "g_volume_monitor_adopt_orphan_mount"
        '*
        (list '*))))
  (let ((~mount (unwrap-GMount* mount)))
    (wrap-GVolume*
      (~g_volume_monitor_adopt_orphan_mount ~mount))))
(export g_volume_monitor_adopt_orphan_mount)

;; typedef struct _GNativeVolumeMonitor GNativeVolumeMonitor;
(define GNativeVolumeMonitor-desc void)
(export GNativeVolumeMonitor-desc)
(define GNativeVolumeMonitor*-desc (bs:pointer (delay GNativeVolumeMonitor-desc)))
(export GNativeVolumeMonitor*-desc)
(define-fh-pointer-type GNativeVolumeMonitor* GNativeVolumeMonitor*-desc)

;; typedef struct _GNativeVolumeMonitorClass GNativeVolumeMonitorClass;
(define GNativeVolumeMonitorClass-desc void)
(export GNativeVolumeMonitorClass-desc)
(define GNativeVolumeMonitorClass*-desc (bs:pointer (delay GNativeVolumeMonitorClass-desc)))
(export GNativeVolumeMonitorClass*-desc)
(define-fh-pointer-type GNativeVolumeMonitorClass* GNativeVolumeMonitorClass*-desc)

;; struct _GNativeVolumeMonitor {
;;   GVolumeMonitor parent_instance;
;; };
(define struct-_GNativeVolumeMonitor-desc
  (bs:struct
    (list `(parent_instance ,GVolumeMonitor-desc))))
(export struct-_GNativeVolumeMonitor-desc)
(define-fh-compound-type/p struct-_GNativeVolumeMonitor struct-_GNativeVolumeMonitor-desc)
(set! GNativeVolumeMonitor-desc struct-_GNativeVolumeMonitor-desc)
(define-fh-compound-type GNativeVolumeMonitor GNativeVolumeMonitor-desc)

;; struct _GNativeVolumeMonitorClass {
;;   GVolumeMonitorClass parent_class;
;;   GMount *(*get_mount_for_mount_path)(const char *mount_path, GCancellable *
;;       cancellable);
;; };
(define struct-_GNativeVolumeMonitorClass-desc
  (bs:struct
    (list `(parent_class ,GVolumeMonitorClass-desc)
          `(get_mount_for_mount_path ,(bs:pointer void)))))
(export struct-_GNativeVolumeMonitorClass-desc)
(define-fh-compound-type/p struct-_GNativeVolumeMonitorClass struct-_GNativeVolumeMonitorClass-desc)
(set! GNativeVolumeMonitorClass-desc struct-_GNativeVolumeMonitorClass-desc)
(define-fh-compound-type GNativeVolumeMonitorClass GNativeVolumeMonitorClass-desc)

;; extern GType g_native_volume_monitor_get_type(void);
(define ~g_native_volume_monitor_get_type #f)
(define (g_native_volume_monitor_get_type)
  (unless
    ~g_native_volume_monitor_get_type
    (set! ~g_native_volume_monitor_get_type
      (fh-link-proc
        "g_native_volume_monitor_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_native_volume_monitor_get_type)))
(export g_native_volume_monitor_get_type)

;; typedef struct _GNetworkAddressClass GNetworkAddressClass;
(define GNetworkAddressClass-desc void)
(export GNetworkAddressClass-desc)
(define GNetworkAddressClass*-desc (bs:pointer (delay GNetworkAddressClass-desc)))
(export GNetworkAddressClass*-desc)
(define-fh-pointer-type GNetworkAddressClass* GNetworkAddressClass*-desc)

;; typedef struct _GNetworkAddressPrivate GNetworkAddressPrivate;
(define GNetworkAddressPrivate-desc void)
(export GNetworkAddressPrivate-desc)
(define GNetworkAddressPrivate*-desc (bs:pointer GNetworkAddressPrivate-desc))
(export GNetworkAddressPrivate*-desc)
(define-fh-pointer-type GNetworkAddressPrivate* GNetworkAddressPrivate*-desc)

;; struct _GNetworkAddress {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GNetworkAddressPrivate *priv;
;; };
(define struct-_GNetworkAddress-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GNetworkAddressPrivate*-desc))))))
(export struct-_GNetworkAddress-desc)
(define-fh-compound-type/p struct-_GNetworkAddress struct-_GNetworkAddress-desc)
(set! GNetworkAddress-desc struct-_GNetworkAddress-desc)
(define-fh-compound-type GNetworkAddress GNetworkAddress-desc)

;; struct _GNetworkAddressClass {
;;   GObjectClass parent_class;
;; };
(define struct-_GNetworkAddressClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc))))))))
(export struct-_GNetworkAddressClass-desc)
(define-fh-compound-type/p struct-_GNetworkAddressClass struct-_GNetworkAddressClass-desc)
(set! GNetworkAddressClass-desc struct-_GNetworkAddressClass-desc)
(define-fh-compound-type GNetworkAddressClass GNetworkAddressClass-desc)

;; extern GType g_network_address_get_type(void);
(define ~g_network_address_get_type #f)
(define (g_network_address_get_type)
  (unless
    ~g_network_address_get_type
    (set! ~g_network_address_get_type
      (fh-link-proc
        "g_network_address_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_network_address_get_type)))
(export g_network_address_get_type)

;; extern GSocketConnectable *g_network_address_new(const gchar *hostname, 
;;     guint16 port);
(define ~g_network_address_new #f)
(define (g_network_address_new hostname port)
  (unless
    ~g_network_address_new
    (set! ~g_network_address_new
      (fh-link-proc
        "g_network_address_new"
        '*
        (list '* ffi:unsigned-short))))
  (let ((~hostname (unwrap~pointer hostname))
        (~port (unwrap~fixed port)))
    (wrap-GSocketConnectable*
      (~g_network_address_new ~hostname ~port))))
(export g_network_address_new)

;; extern GSocketConnectable *g_network_address_new_loopback(guint16 port);
(define ~g_network_address_new_loopback #f)
(define (g_network_address_new_loopback port)
  (unless
    ~g_network_address_new_loopback
    (set! ~g_network_address_new_loopback
      (fh-link-proc
        "g_network_address_new_loopback"
        '*
        (list ffi:unsigned-short))))
  (let ((~port (unwrap~fixed port)))
    (wrap-GSocketConnectable*
      (~g_network_address_new_loopback ~port))))
(export g_network_address_new_loopback)

;; extern GSocketConnectable *g_network_address_parse(const gchar *
;;     host_and_port, guint16 default_port, GError **error);
(define ~g_network_address_parse #f)
(define (g_network_address_parse
         host_and_port
         default_port
         error)
  (unless
    ~g_network_address_parse
    (set! ~g_network_address_parse
      (fh-link-proc
        "g_network_address_parse"
        '*
        (list '* ffi:unsigned-short '*))))
  (let ((~host_and_port (unwrap~pointer host_and_port))
        (~default_port (unwrap~fixed default_port))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnectable*
      (~g_network_address_parse
        ~host_and_port
        ~default_port
        ~error))))
(export g_network_address_parse)

;; extern GSocketConnectable *g_network_address_parse_uri(const gchar *uri, 
;;     guint16 default_port, GError **error);
(define ~g_network_address_parse_uri #f)
(define (g_network_address_parse_uri
         uri
         default_port
         error)
  (unless
    ~g_network_address_parse_uri
    (set! ~g_network_address_parse_uri
      (fh-link-proc
        "g_network_address_parse_uri"
        '*
        (list '* ffi:unsigned-short '*))))
  (let ((~uri (unwrap~pointer uri))
        (~default_port (unwrap~fixed default_port))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnectable*
      (~g_network_address_parse_uri
        ~uri
        ~default_port
        ~error))))
(export g_network_address_parse_uri)

;; extern const gchar *g_network_address_get_hostname(GNetworkAddress *addr);
(define ~g_network_address_get_hostname #f)
(define (g_network_address_get_hostname addr)
  (unless
    ~g_network_address_get_hostname
    (set! ~g_network_address_get_hostname
      (fh-link-proc
        "g_network_address_get_hostname"
        '*
        (list '*))))
  (let ((~addr (unwrap-GNetworkAddress* addr)))
    (~g_network_address_get_hostname ~addr)))
(export g_network_address_get_hostname)

;; extern guint16 g_network_address_get_port(GNetworkAddress *addr);
(define ~g_network_address_get_port #f)
(define (g_network_address_get_port addr)
  (unless
    ~g_network_address_get_port
    (set! ~g_network_address_get_port
      (fh-link-proc
        "g_network_address_get_port"
        ffi:unsigned-short
        (list '*))))
  (let ((~addr (unwrap-GNetworkAddress* addr)))
    (~g_network_address_get_port ~addr)))
(export g_network_address_get_port)

;; extern const gchar *g_network_address_get_scheme(GNetworkAddress *addr);
(define ~g_network_address_get_scheme #f)
(define (g_network_address_get_scheme addr)
  (unless
    ~g_network_address_get_scheme
    (set! ~g_network_address_get_scheme
      (fh-link-proc
        "g_network_address_get_scheme"
        '*
        (list '*))))
  (let ((~addr (unwrap-GNetworkAddress* addr)))
    (~g_network_address_get_scheme ~addr)))
(export g_network_address_get_scheme)

;; typedef struct _GNetworkMonitorInterface GNetworkMonitorInterface;
(define GNetworkMonitorInterface-desc void)
(export GNetworkMonitorInterface-desc)
(define GNetworkMonitorInterface*-desc (bs:pointer (delay GNetworkMonitorInterface-desc)))
(export GNetworkMonitorInterface*-desc)
(define-fh-pointer-type GNetworkMonitorInterface* GNetworkMonitorInterface*-desc)

;; struct _GNetworkMonitorInterface {
;;   GTypeInterface g_iface;
;;   void (*network_changed)(GNetworkMonitor *monitor, gboolean available);
;;   gboolean (*can_reach)(GNetworkMonitor *monitor, GSocketConnectable *
;;       connectable, GCancellable *cancellable, GError **error);
;;   void (*can_reach_async)(GNetworkMonitor *monitor, GSocketConnectable *
;;       connectable, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;       gpointer user_data);
;;   gboolean (*can_reach_finish)(GNetworkMonitor *monitor, GAsyncResult *
;;       result, GError **error);
;; };
(define struct-_GNetworkMonitorInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(network_changed ,(bs:pointer void))
          `(can_reach ,(bs:pointer void))
          `(can_reach_async ,(bs:pointer void))
          `(can_reach_finish ,(bs:pointer void)))))
(export struct-_GNetworkMonitorInterface-desc)
(define-fh-compound-type/p struct-_GNetworkMonitorInterface struct-_GNetworkMonitorInterface-desc)
(set! GNetworkMonitorInterface-desc struct-_GNetworkMonitorInterface-desc)
(define-fh-compound-type GNetworkMonitorInterface GNetworkMonitorInterface-desc)

;; extern GType g_network_monitor_get_type(void);
(define ~g_network_monitor_get_type #f)
(define (g_network_monitor_get_type)
  (unless
    ~g_network_monitor_get_type
    (set! ~g_network_monitor_get_type
      (fh-link-proc
        "g_network_monitor_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_network_monitor_get_type)))
(export g_network_monitor_get_type)

;; extern GNetworkMonitor *g_network_monitor_get_default(void);
(define ~g_network_monitor_get_default #f)
(define (g_network_monitor_get_default)
  (unless
    ~g_network_monitor_get_default
    (set! ~g_network_monitor_get_default
      (fh-link-proc
        "g_network_monitor_get_default"
        '*
        (list))))
  (let ()
    (wrap-GNetworkMonitor*
      (~g_network_monitor_get_default))))
(export g_network_monitor_get_default)

;; extern gboolean g_network_monitor_get_network_available(GNetworkMonitor *
;;     monitor);
(define ~g_network_monitor_get_network_available #f)
(define (g_network_monitor_get_network_available monitor)
  (unless
    ~g_network_monitor_get_network_available
    (set! ~g_network_monitor_get_network_available
      (fh-link-proc
        "g_network_monitor_get_network_available"
        ffi:int
        (list '*))))
  (let ((~monitor (unwrap-GNetworkMonitor* monitor)))
    (~g_network_monitor_get_network_available
      ~monitor)))
(export g_network_monitor_get_network_available)

;; extern gboolean g_network_monitor_get_network_metered(GNetworkMonitor *
;;     monitor);
(define ~g_network_monitor_get_network_metered #f)
(define (g_network_monitor_get_network_metered monitor)
  (unless
    ~g_network_monitor_get_network_metered
    (set! ~g_network_monitor_get_network_metered
      (fh-link-proc
        "g_network_monitor_get_network_metered"
        ffi:int
        (list '*))))
  (let ((~monitor (unwrap-GNetworkMonitor* monitor)))
    (~g_network_monitor_get_network_metered ~monitor)))
(export g_network_monitor_get_network_metered)

;; extern GNetworkConnectivity g_network_monitor_get_connectivity(
;;     GNetworkMonitor *monitor);
(define ~g_network_monitor_get_connectivity #f)
(define (g_network_monitor_get_connectivity monitor)
  (unless
    ~g_network_monitor_get_connectivity
    (set! ~g_network_monitor_get_connectivity
      (fh-link-proc
        "g_network_monitor_get_connectivity"
        ffi:int
        (list '*))))
  (let ((~monitor (unwrap-GNetworkMonitor* monitor)))
    (~g_network_monitor_get_connectivity ~monitor)))
(export g_network_monitor_get_connectivity)

;; extern gboolean g_network_monitor_can_reach(GNetworkMonitor *monitor, 
;;     GSocketConnectable *connectable, GCancellable *cancellable, GError **
;;     error);
(define ~g_network_monitor_can_reach #f)
(define (g_network_monitor_can_reach
         monitor
         connectable
         cancellable
         error)
  (unless
    ~g_network_monitor_can_reach
    (set! ~g_network_monitor_can_reach
      (fh-link-proc
        "g_network_monitor_can_reach"
        ffi:int
        (list '* '* '* '*))))
  (let ((~monitor (unwrap-GNetworkMonitor* monitor))
        (~connectable
          (unwrap-GSocketConnectable* connectable))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_network_monitor_can_reach
      ~monitor
      ~connectable
      ~cancellable
      ~error)))
(export g_network_monitor_can_reach)

;; extern void g_network_monitor_can_reach_async(GNetworkMonitor *monitor, 
;;     GSocketConnectable *connectable, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_network_monitor_can_reach_async #f)
(define (g_network_monitor_can_reach_async
         monitor
         connectable
         cancellable
         callback
         user_data)
  (unless
    ~g_network_monitor_can_reach_async
    (set! ~g_network_monitor_can_reach_async
      (fh-link-proc
        "g_network_monitor_can_reach_async"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~monitor (unwrap-GNetworkMonitor* monitor))
        (~connectable
          (unwrap-GSocketConnectable* connectable))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_network_monitor_can_reach_async
      ~monitor
      ~connectable
      ~cancellable
      ~callback
      ~user_data)))
(export g_network_monitor_can_reach_async)

;; extern gboolean g_network_monitor_can_reach_finish(GNetworkMonitor *monitor
;;     , GAsyncResult *result, GError **error);
(define ~g_network_monitor_can_reach_finish #f)
(define (g_network_monitor_can_reach_finish
         monitor
         result
         error)
  (unless
    ~g_network_monitor_can_reach_finish
    (set! ~g_network_monitor_can_reach_finish
      (fh-link-proc
        "g_network_monitor_can_reach_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~monitor (unwrap-GNetworkMonitor* monitor))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_network_monitor_can_reach_finish
      ~monitor
      ~result
      ~error)))
(export g_network_monitor_can_reach_finish)

;; typedef struct _GNetworkServiceClass GNetworkServiceClass;
(define GNetworkServiceClass-desc void)
(export GNetworkServiceClass-desc)
(define GNetworkServiceClass*-desc (bs:pointer (delay GNetworkServiceClass-desc)))
(export GNetworkServiceClass*-desc)
(define-fh-pointer-type GNetworkServiceClass* GNetworkServiceClass*-desc)

;; typedef struct _GNetworkServicePrivate GNetworkServicePrivate;
(define GNetworkServicePrivate-desc void)
(export GNetworkServicePrivate-desc)
(define GNetworkServicePrivate*-desc (bs:pointer GNetworkServicePrivate-desc))
(export GNetworkServicePrivate*-desc)
(define-fh-pointer-type GNetworkServicePrivate* GNetworkServicePrivate*-desc)

;; struct _GNetworkService {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GNetworkServicePrivate *priv;
;; };
(define struct-_GNetworkService-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GNetworkServicePrivate*-desc))))))
(export struct-_GNetworkService-desc)
(define-fh-compound-type/p struct-_GNetworkService struct-_GNetworkService-desc)
(set! GNetworkService-desc struct-_GNetworkService-desc)
(define-fh-compound-type GNetworkService GNetworkService-desc)

;; struct _GNetworkServiceClass {
;;   GObjectClass parent_class;
;; };
(define struct-_GNetworkServiceClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc))))))))
(export struct-_GNetworkServiceClass-desc)
(define-fh-compound-type/p struct-_GNetworkServiceClass struct-_GNetworkServiceClass-desc)
(set! GNetworkServiceClass-desc struct-_GNetworkServiceClass-desc)
(define-fh-compound-type GNetworkServiceClass GNetworkServiceClass-desc)

;; extern GType g_network_service_get_type(void);
(define ~g_network_service_get_type #f)
(define (g_network_service_get_type)
  (unless
    ~g_network_service_get_type
    (set! ~g_network_service_get_type
      (fh-link-proc
        "g_network_service_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_network_service_get_type)))
(export g_network_service_get_type)

;; extern GSocketConnectable *g_network_service_new(const gchar *service, const
;;      gchar *protocol, const gchar *domain);
(define ~g_network_service_new #f)
(define (g_network_service_new service protocol domain)
  (unless
    ~g_network_service_new
    (set! ~g_network_service_new
      (fh-link-proc
        "g_network_service_new"
        '*
        (list '* '* '*))))
  (let ((~service (unwrap~pointer service))
        (~protocol (unwrap~pointer protocol))
        (~domain (unwrap~pointer domain)))
    (wrap-GSocketConnectable*
      (~g_network_service_new
        ~service
        ~protocol
        ~domain))))
(export g_network_service_new)

;; extern const gchar *g_network_service_get_service(GNetworkService *srv);
(define ~g_network_service_get_service #f)
(define (g_network_service_get_service srv)
  (unless
    ~g_network_service_get_service
    (set! ~g_network_service_get_service
      (fh-link-proc
        "g_network_service_get_service"
        '*
        (list '*))))
  (let ((~srv (unwrap-GNetworkService* srv)))
    (~g_network_service_get_service ~srv)))
(export g_network_service_get_service)

;; extern const gchar *g_network_service_get_protocol(GNetworkService *srv);
(define ~g_network_service_get_protocol #f)
(define (g_network_service_get_protocol srv)
  (unless
    ~g_network_service_get_protocol
    (set! ~g_network_service_get_protocol
      (fh-link-proc
        "g_network_service_get_protocol"
        '*
        (list '*))))
  (let ((~srv (unwrap-GNetworkService* srv)))
    (~g_network_service_get_protocol ~srv)))
(export g_network_service_get_protocol)

;; extern const gchar *g_network_service_get_domain(GNetworkService *srv);
(define ~g_network_service_get_domain #f)
(define (g_network_service_get_domain srv)
  (unless
    ~g_network_service_get_domain
    (set! ~g_network_service_get_domain
      (fh-link-proc
        "g_network_service_get_domain"
        '*
        (list '*))))
  (let ((~srv (unwrap-GNetworkService* srv)))
    (~g_network_service_get_domain ~srv)))
(export g_network_service_get_domain)

;; extern const gchar *g_network_service_get_scheme(GNetworkService *srv);
(define ~g_network_service_get_scheme #f)
(define (g_network_service_get_scheme srv)
  (unless
    ~g_network_service_get_scheme
    (set! ~g_network_service_get_scheme
      (fh-link-proc
        "g_network_service_get_scheme"
        '*
        (list '*))))
  (let ((~srv (unwrap-GNetworkService* srv)))
    (~g_network_service_get_scheme ~srv)))
(export g_network_service_get_scheme)

;; extern void g_network_service_set_scheme(GNetworkService *srv, const gchar *
;;     scheme);
(define ~g_network_service_set_scheme #f)
(define (g_network_service_set_scheme srv scheme)
  (unless
    ~g_network_service_set_scheme
    (set! ~g_network_service_set_scheme
      (fh-link-proc
        "g_network_service_set_scheme"
        ffi:void
        (list '* '*))))
  (let ((~srv (unwrap-GNetworkService* srv))
        (~scheme (unwrap~pointer scheme)))
    (~g_network_service_set_scheme ~srv ~scheme)))
(export g_network_service_set_scheme)

;; typedef struct _GPermissionPrivate GPermissionPrivate;
(define GPermissionPrivate-desc void)
(export GPermissionPrivate-desc)
(define GPermissionPrivate*-desc (bs:pointer GPermissionPrivate-desc))
(export GPermissionPrivate*-desc)
(define-fh-pointer-type GPermissionPrivate* GPermissionPrivate*-desc)

;; typedef struct _GPermissionClass GPermissionClass;
(define GPermissionClass-desc void)
(export GPermissionClass-desc)
(define GPermissionClass*-desc (bs:pointer (delay GPermissionClass-desc)))
(export GPermissionClass*-desc)
(define-fh-pointer-type GPermissionClass* GPermissionClass*-desc)

;; struct _GPermission {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GPermissionPrivate *priv;
;; };
(define struct-_GPermission-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GPermissionPrivate*-desc))))))
(export struct-_GPermission-desc)
(define-fh-compound-type/p struct-_GPermission struct-_GPermission-desc)
(set! GPermission-desc struct-_GPermission-desc)
(define-fh-compound-type GPermission GPermission-desc)

;; struct _GPermissionClass {
;;   GObjectClass parent_class;
;;   gboolean (*acquire)(GPermission *permission, GCancellable *cancellable, 
;;       GError **error);
;;   void (*acquire_async)(GPermission *permission, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*acquire_finish)(GPermission *permission, GAsyncResult *result, 
;;       GError **error);
;;   gboolean (*release)(GPermission *permission, GCancellable *cancellable, 
;;       GError **error);
;;   void (*release_async)(GPermission *permission, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*release_finish)(GPermission *permission, GAsyncResult *result, 
;;       GError **error);
;;   gpointer reserved[16];
;; };
(define struct-_GPermissionClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(acquire ,(bs:pointer void))
          `(acquire_async ,(bs:pointer void))
          `(acquire_finish ,(bs:pointer void))
          `(release ,(bs:pointer void))
          `(release_async ,(bs:pointer void))
          `(release_finish ,(bs:pointer void))
          `(reserved ,(bs:vector 16 gpointer-desc)))))
(export struct-_GPermissionClass-desc)
(define-fh-compound-type/p struct-_GPermissionClass struct-_GPermissionClass-desc)
(set! GPermissionClass-desc struct-_GPermissionClass-desc)
(define-fh-compound-type GPermissionClass GPermissionClass-desc)

;; extern GType g_permission_get_type(void);
(define ~g_permission_get_type #f)
(define (g_permission_get_type)
  (unless
    ~g_permission_get_type
    (set! ~g_permission_get_type
      (fh-link-proc
        "g_permission_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_permission_get_type)))
(export g_permission_get_type)

;; extern gboolean g_permission_acquire(GPermission *permission, GCancellable *
;;     cancellable, GError **error);
(define ~g_permission_acquire #f)
(define (g_permission_acquire
         permission
         cancellable
         error)
  (unless
    ~g_permission_acquire
    (set! ~g_permission_acquire
      (fh-link-proc
        "g_permission_acquire"
        ffi:int
        (list '* '* '*))))
  (let ((~permission (unwrap-GPermission* permission))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_permission_acquire
      ~permission
      ~cancellable
      ~error)))
(export g_permission_acquire)

;; extern void g_permission_acquire_async(GPermission *permission, GCancellable
;;      *cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_permission_acquire_async #f)
(define (g_permission_acquire_async
         permission
         cancellable
         callback
         user_data)
  (unless
    ~g_permission_acquire_async
    (set! ~g_permission_acquire_async
      (fh-link-proc
        "g_permission_acquire_async"
        ffi:void
        (list '* '* '* '*))))
  (let ((~permission (unwrap-GPermission* permission))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_permission_acquire_async
      ~permission
      ~cancellable
      ~callback
      ~user_data)))
(export g_permission_acquire_async)

;; extern gboolean g_permission_acquire_finish(GPermission *permission, 
;;     GAsyncResult *result, GError **error);
(define ~g_permission_acquire_finish #f)
(define (g_permission_acquire_finish
         permission
         result
         error)
  (unless
    ~g_permission_acquire_finish
    (set! ~g_permission_acquire_finish
      (fh-link-proc
        "g_permission_acquire_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~permission (unwrap-GPermission* permission))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_permission_acquire_finish
      ~permission
      ~result
      ~error)))
(export g_permission_acquire_finish)

;; extern gboolean g_permission_release(GPermission *permission, GCancellable *
;;     cancellable, GError **error);
(define ~g_permission_release #f)
(define (g_permission_release
         permission
         cancellable
         error)
  (unless
    ~g_permission_release
    (set! ~g_permission_release
      (fh-link-proc
        "g_permission_release"
        ffi:int
        (list '* '* '*))))
  (let ((~permission (unwrap-GPermission* permission))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_permission_release
      ~permission
      ~cancellable
      ~error)))
(export g_permission_release)

;; extern void g_permission_release_async(GPermission *permission, GCancellable
;;      *cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_permission_release_async #f)
(define (g_permission_release_async
         permission
         cancellable
         callback
         user_data)
  (unless
    ~g_permission_release_async
    (set! ~g_permission_release_async
      (fh-link-proc
        "g_permission_release_async"
        ffi:void
        (list '* '* '* '*))))
  (let ((~permission (unwrap-GPermission* permission))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_permission_release_async
      ~permission
      ~cancellable
      ~callback
      ~user_data)))
(export g_permission_release_async)

;; extern gboolean g_permission_release_finish(GPermission *permission, 
;;     GAsyncResult *result, GError **error);
(define ~g_permission_release_finish #f)
(define (g_permission_release_finish
         permission
         result
         error)
  (unless
    ~g_permission_release_finish
    (set! ~g_permission_release_finish
      (fh-link-proc
        "g_permission_release_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~permission (unwrap-GPermission* permission))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_permission_release_finish
      ~permission
      ~result
      ~error)))
(export g_permission_release_finish)

;; extern gboolean g_permission_get_allowed(GPermission *permission);
(define ~g_permission_get_allowed #f)
(define (g_permission_get_allowed permission)
  (unless
    ~g_permission_get_allowed
    (set! ~g_permission_get_allowed
      (fh-link-proc
        "g_permission_get_allowed"
        ffi:int
        (list '*))))
  (let ((~permission (unwrap-GPermission* permission)))
    (~g_permission_get_allowed ~permission)))
(export g_permission_get_allowed)

;; extern gboolean g_permission_get_can_acquire(GPermission *permission);
(define ~g_permission_get_can_acquire #f)
(define (g_permission_get_can_acquire permission)
  (unless
    ~g_permission_get_can_acquire
    (set! ~g_permission_get_can_acquire
      (fh-link-proc
        "g_permission_get_can_acquire"
        ffi:int
        (list '*))))
  (let ((~permission (unwrap-GPermission* permission)))
    (~g_permission_get_can_acquire ~permission)))
(export g_permission_get_can_acquire)

;; extern gboolean g_permission_get_can_release(GPermission *permission);
(define ~g_permission_get_can_release #f)
(define (g_permission_get_can_release permission)
  (unless
    ~g_permission_get_can_release
    (set! ~g_permission_get_can_release
      (fh-link-proc
        "g_permission_get_can_release"
        ffi:int
        (list '*))))
  (let ((~permission (unwrap-GPermission* permission)))
    (~g_permission_get_can_release ~permission)))
(export g_permission_get_can_release)

;; extern void g_permission_impl_update(GPermission *permission, gboolean 
;;     allowed, gboolean can_acquire, gboolean can_release);
(define ~g_permission_impl_update #f)
(define (g_permission_impl_update
         permission
         allowed
         can_acquire
         can_release)
  (unless
    ~g_permission_impl_update
    (set! ~g_permission_impl_update
      (fh-link-proc
        "g_permission_impl_update"
        ffi:void
        (list '* ffi:int ffi:int ffi:int))))
  (let ((~permission (unwrap-GPermission* permission))
        (~allowed (unwrap~fixed allowed))
        (~can_acquire (unwrap~fixed can_acquire))
        (~can_release (unwrap~fixed can_release)))
    (~g_permission_impl_update
      ~permission
      ~allowed
      ~can_acquire
      ~can_release)))
(export g_permission_impl_update)

;; typedef struct _GPollableInputStreamInterface GPollableInputStreamInterface
;;     ;
(define GPollableInputStreamInterface-desc void)
(export GPollableInputStreamInterface-desc)
(define GPollableInputStreamInterface*-desc (bs:pointer (delay GPollableInputStreamInterface-desc)))
(export GPollableInputStreamInterface*-desc)
(define-fh-pointer-type GPollableInputStreamInterface* GPollableInputStreamInterface*-desc)

;; struct _GPollableInputStreamInterface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   gboolean (*can_poll)(GPollableInputStream *stream);
;;   gboolean (*is_readable)(GPollableInputStream *stream);
;;   GSource *(*create_source)(GPollableInputStream *stream, GCancellable *
;;       cancellable);
;;   gssize (*read_nonblocking)(GPollableInputStream *stream, void *buffer, 
;;       gsize count, GError **error);
;; };
(define struct-_GPollableInputStreamInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(can_poll ,(bs:pointer void))
          `(is_readable ,(bs:pointer void))
          `(create_source ,(bs:pointer void))
          `(read_nonblocking ,(bs:pointer void)))))
(export struct-_GPollableInputStreamInterface-desc)
(define-fh-compound-type/p struct-_GPollableInputStreamInterface struct-_GPollableInputStreamInterface-desc)
(set! GPollableInputStreamInterface-desc struct-_GPollableInputStreamInterface-desc)
(define-fh-compound-type GPollableInputStreamInterface GPollableInputStreamInterface-desc)

;; extern GType g_pollable_input_stream_get_type(void);
(define ~g_pollable_input_stream_get_type #f)
(define (g_pollable_input_stream_get_type)
  (unless
    ~g_pollable_input_stream_get_type
    (set! ~g_pollable_input_stream_get_type
      (fh-link-proc
        "g_pollable_input_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_pollable_input_stream_get_type)))
(export g_pollable_input_stream_get_type)

;; extern gboolean g_pollable_input_stream_can_poll(GPollableInputStream *
;;     stream);
(define ~g_pollable_input_stream_can_poll #f)
(define (g_pollable_input_stream_can_poll stream)
  (unless
    ~g_pollable_input_stream_can_poll
    (set! ~g_pollable_input_stream_can_poll
      (fh-link-proc
        "g_pollable_input_stream_can_poll"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GPollableInputStream* stream)))
    (~g_pollable_input_stream_can_poll ~stream)))
(export g_pollable_input_stream_can_poll)

;; extern gboolean g_pollable_input_stream_is_readable(GPollableInputStream *
;;     stream);
(define ~g_pollable_input_stream_is_readable #f)
(define (g_pollable_input_stream_is_readable stream)
  (unless
    ~g_pollable_input_stream_is_readable
    (set! ~g_pollable_input_stream_is_readable
      (fh-link-proc
        "g_pollable_input_stream_is_readable"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GPollableInputStream* stream)))
    (~g_pollable_input_stream_is_readable ~stream)))
(export g_pollable_input_stream_is_readable)

;; extern GSource *g_pollable_input_stream_create_source(GPollableInputStream *
;;     stream, GCancellable *cancellable);
(define ~g_pollable_input_stream_create_source #f)
(define (g_pollable_input_stream_create_source
         stream
         cancellable)
  (unless
    ~g_pollable_input_stream_create_source
    (set! ~g_pollable_input_stream_create_source
      (fh-link-proc
        "g_pollable_input_stream_create_source"
        '*
        (list '* '*))))
  (let ((~stream (unwrap-GPollableInputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable)))
    (~g_pollable_input_stream_create_source
      ~stream
      ~cancellable)))
(export g_pollable_input_stream_create_source)

;; extern gssize g_pollable_input_stream_read_nonblocking(GPollableInputStream 
;;     *stream, void *buffer, gsize count, GCancellable *cancellable, GError **
;;     error);
(define ~g_pollable_input_stream_read_nonblocking #f)
(define (g_pollable_input_stream_read_nonblocking
         stream
         buffer
         count
         cancellable
         error)
  (unless
    ~g_pollable_input_stream_read_nonblocking
    (set! ~g_pollable_input_stream_read_nonblocking
      (fh-link-proc
        "g_pollable_input_stream_read_nonblocking"
        ffi:long
        (list '* '* ffi:unsigned-long '* '*))))
  (let ((~stream (unwrap-GPollableInputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_pollable_input_stream_read_nonblocking
      ~stream
      ~buffer
      ~count
      ~cancellable
      ~error)))
(export g_pollable_input_stream_read_nonblocking)

;; typedef struct _GPollableOutputStreamInterface 
;;     GPollableOutputStreamInterface;
(define GPollableOutputStreamInterface-desc void)
(export GPollableOutputStreamInterface-desc)
(define GPollableOutputStreamInterface*-desc (bs:pointer (delay GPollableOutputStreamInterface-desc)))
(export GPollableOutputStreamInterface*-desc)
(define-fh-pointer-type GPollableOutputStreamInterface* GPollableOutputStreamInterface*-desc)

;; struct _GPollableOutputStreamInterface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   gboolean (*can_poll)(GPollableOutputStream *stream);
;;   gboolean (*is_writable)(GPollableOutputStream *stream);
;;   GSource *(*create_source)(GPollableOutputStream *stream, GCancellable *
;;       cancellable);
;;   gssize (*write_nonblocking)(GPollableOutputStream *stream, const void *
;;       buffer, gsize count, GError **error);
;; };
(define struct-_GPollableOutputStreamInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(can_poll ,(bs:pointer void))
          `(is_writable ,(bs:pointer void))
          `(create_source ,(bs:pointer void))
          `(write_nonblocking ,(bs:pointer void)))))
(export struct-_GPollableOutputStreamInterface-desc)
(define-fh-compound-type/p struct-_GPollableOutputStreamInterface struct-_GPollableOutputStreamInterface-desc)
(set! GPollableOutputStreamInterface-desc struct-_GPollableOutputStreamInterface-desc)
(define-fh-compound-type GPollableOutputStreamInterface GPollableOutputStreamInterface-desc)

;; extern GType g_pollable_output_stream_get_type(void);
(define ~g_pollable_output_stream_get_type #f)
(define (g_pollable_output_stream_get_type)
  (unless
    ~g_pollable_output_stream_get_type
    (set! ~g_pollable_output_stream_get_type
      (fh-link-proc
        "g_pollable_output_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_pollable_output_stream_get_type)))
(export g_pollable_output_stream_get_type)

;; extern gboolean g_pollable_output_stream_can_poll(GPollableOutputStream *
;;     stream);
(define ~g_pollable_output_stream_can_poll #f)
(define (g_pollable_output_stream_can_poll stream)
  (unless
    ~g_pollable_output_stream_can_poll
    (set! ~g_pollable_output_stream_can_poll
      (fh-link-proc
        "g_pollable_output_stream_can_poll"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GPollableOutputStream* stream)))
    (~g_pollable_output_stream_can_poll ~stream)))
(export g_pollable_output_stream_can_poll)

;; extern gboolean g_pollable_output_stream_is_writable(GPollableOutputStream *
;;     stream);
(define ~g_pollable_output_stream_is_writable #f)
(define (g_pollable_output_stream_is_writable stream)
  (unless
    ~g_pollable_output_stream_is_writable
    (set! ~g_pollable_output_stream_is_writable
      (fh-link-proc
        "g_pollable_output_stream_is_writable"
        ffi:int
        (list '*))))
  (let ((~stream (unwrap-GPollableOutputStream* stream)))
    (~g_pollable_output_stream_is_writable ~stream)))
(export g_pollable_output_stream_is_writable)

;; extern GSource *g_pollable_output_stream_create_source(GPollableOutputStream
;;      *stream, GCancellable *cancellable);
(define ~g_pollable_output_stream_create_source #f)
(define (g_pollable_output_stream_create_source
         stream
         cancellable)
  (unless
    ~g_pollable_output_stream_create_source
    (set! ~g_pollable_output_stream_create_source
      (fh-link-proc
        "g_pollable_output_stream_create_source"
        '*
        (list '* '*))))
  (let ((~stream (unwrap-GPollableOutputStream* stream))
        (~cancellable (unwrap-GCancellable* cancellable)))
    (~g_pollable_output_stream_create_source
      ~stream
      ~cancellable)))
(export g_pollable_output_stream_create_source)

;; extern gssize g_pollable_output_stream_write_nonblocking(
;;     GPollableOutputStream *stream, const void *buffer, gsize count, 
;;     GCancellable *cancellable, GError **error);
(define ~g_pollable_output_stream_write_nonblocking #f)
(define (g_pollable_output_stream_write_nonblocking
         stream
         buffer
         count
         cancellable
         error)
  (unless
    ~g_pollable_output_stream_write_nonblocking
    (set! ~g_pollable_output_stream_write_nonblocking
      (fh-link-proc
        "g_pollable_output_stream_write_nonblocking"
        ffi:long
        (list '* '* ffi:unsigned-long '* '*))))
  (let ((~stream (unwrap-GPollableOutputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_pollable_output_stream_write_nonblocking
      ~stream
      ~buffer
      ~count
      ~cancellable
      ~error)))
(export g_pollable_output_stream_write_nonblocking)

;; extern GSource *g_pollable_source_new(GObject *pollable_stream);
(define ~g_pollable_source_new #f)
(define (g_pollable_source_new pollable_stream)
  (unless
    ~g_pollable_source_new
    (set! ~g_pollable_source_new
      (fh-link-proc
        "g_pollable_source_new"
        '*
        (list '*))))
  (let ((~pollable_stream
          (unwrap~pointer pollable_stream)))
    (~g_pollable_source_new ~pollable_stream)))
(export g_pollable_source_new)

;; extern GSource *g_pollable_source_new_full(gpointer pollable_stream, GSource
;;      *child_source, GCancellable *cancellable);
(define ~g_pollable_source_new_full #f)
(define (g_pollable_source_new_full
         pollable_stream
         child_source
         cancellable)
  (unless
    ~g_pollable_source_new_full
    (set! ~g_pollable_source_new_full
      (fh-link-proc
        "g_pollable_source_new_full"
        '*
        (list '* '* '*))))
  (let ((~pollable_stream
          (unwrap-gpointer pollable_stream))
        (~cancellable (unwrap-GCancellable* cancellable)))
    (~g_pollable_source_new_full
      ~pollable_stream
      child_source
      ~cancellable)))
(export g_pollable_source_new_full)

;; extern gssize g_pollable_stream_read(GInputStream *stream, void *buffer, 
;;     gsize count, gboolean blocking, GCancellable *cancellable, GError **
;;     error);
(define ~g_pollable_stream_read #f)
(define (g_pollable_stream_read
         stream
         buffer
         count
         blocking
         cancellable
         error)
  (unless
    ~g_pollable_stream_read
    (set! ~g_pollable_stream_read
      (fh-link-proc
        "g_pollable_stream_read"
        ffi:long
        (list '* '* ffi:unsigned-long ffi:int '* '*))))
  (let ((~stream (unwrap-GInputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~blocking (unwrap~fixed blocking))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_pollable_stream_read
      ~stream
      ~buffer
      ~count
      ~blocking
      ~cancellable
      ~error)))
(export g_pollable_stream_read)

;; extern gssize g_pollable_stream_write(GOutputStream *stream, const void *
;;     buffer, gsize count, gboolean blocking, GCancellable *cancellable, 
;;     GError **error);
(define ~g_pollable_stream_write #f)
(define (g_pollable_stream_write
         stream
         buffer
         count
         blocking
         cancellable
         error)
  (unless
    ~g_pollable_stream_write
    (set! ~g_pollable_stream_write
      (fh-link-proc
        "g_pollable_stream_write"
        ffi:long
        (list '* '* ffi:unsigned-long ffi:int '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~blocking (unwrap~fixed blocking))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_pollable_stream_write
      ~stream
      ~buffer
      ~count
      ~blocking
      ~cancellable
      ~error)))
(export g_pollable_stream_write)

;; extern gboolean g_pollable_stream_write_all(GOutputStream *stream, const 
;;     void *buffer, gsize count, gboolean blocking, gsize *bytes_written, 
;;     GCancellable *cancellable, GError **error);
(define ~g_pollable_stream_write_all #f)
(define (g_pollable_stream_write_all
         stream
         buffer
         count
         blocking
         bytes_written
         cancellable
         error)
  (unless
    ~g_pollable_stream_write_all
    (set! ~g_pollable_stream_write_all
      (fh-link-proc
        "g_pollable_stream_write_all"
        ffi:int
        (list '* '* ffi:unsigned-long ffi:int '* '* '*))))
  (let ((~stream (unwrap-GOutputStream* stream))
        (~buffer (unwrap~pointer buffer))
        (~count (unwrap~fixed count))
        (~blocking (unwrap~fixed blocking))
        (~bytes_written (unwrap~pointer bytes_written))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_pollable_stream_write_all
      ~stream
      ~buffer
      ~count
      ~blocking
      ~bytes_written
      ~cancellable
      ~error)))
(export g_pollable_stream_write_all)

;; extern GType g_property_action_get_type(void);
(define ~g_property_action_get_type #f)
(define (g_property_action_get_type)
  (unless
    ~g_property_action_get_type
    (set! ~g_property_action_get_type
      (fh-link-proc
        "g_property_action_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_property_action_get_type)))
(export g_property_action_get_type)

;; extern GPropertyAction *g_property_action_new(const gchar *name, gpointer 
;;     object, const gchar *property_name);
(define ~g_property_action_new #f)
(define (g_property_action_new name object property_name)
  (unless
    ~g_property_action_new
    (set! ~g_property_action_new
      (fh-link-proc
        "g_property_action_new"
        '*
        (list '* '* '*))))
  (let ((~name (unwrap~pointer name))
        (~object (unwrap-gpointer object))
        (~property_name (unwrap~pointer property_name)))
    (wrap-GPropertyAction*
      (~g_property_action_new
        ~name
        ~object
        ~property_name))))
(export g_property_action_new)

;; typedef struct _GProxyInterface GProxyInterface;
(define GProxyInterface-desc void)
(export GProxyInterface-desc)
(define GProxyInterface*-desc (bs:pointer (delay GProxyInterface-desc)))
(export GProxyInterface*-desc)
(define-fh-pointer-type GProxyInterface* GProxyInterface*-desc)

;; struct _GProxyInterface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   GIOStream *(*connect)(GProxy *proxy, GIOStream *connection, GProxyAddress 
;;       *proxy_address, GCancellable *cancellable, GError **error);
;;   void (*connect_async)(GProxy *proxy, GIOStream *connection, GProxyAddress 
;;       *proxy_address, GCancellable *cancellable, GAsyncReadyCallback 
;;       callback, gpointer user_data);
;;   GIOStream *(*connect_finish)(GProxy *proxy, GAsyncResult *result, GError *
;;       *error);
;;   gboolean (*supports_hostname)(GProxy *proxy);
;; };
(define struct-_GProxyInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(connect ,(bs:pointer void))
          `(connect_async ,(bs:pointer void))
          `(connect_finish ,(bs:pointer void))
          `(supports_hostname ,(bs:pointer void)))))
(export struct-_GProxyInterface-desc)
(define-fh-compound-type/p struct-_GProxyInterface struct-_GProxyInterface-desc)
(set! GProxyInterface-desc struct-_GProxyInterface-desc)
(define-fh-compound-type GProxyInterface GProxyInterface-desc)

;; extern GType g_proxy_get_type(void);
(define ~g_proxy_get_type #f)
(define (g_proxy_get_type)
  (unless
    ~g_proxy_get_type
    (set! ~g_proxy_get_type
      (fh-link-proc
        "g_proxy_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_proxy_get_type)))
(export g_proxy_get_type)

;; extern GProxy *g_proxy_get_default_for_protocol(const gchar *protocol);
(define ~g_proxy_get_default_for_protocol #f)
(define (g_proxy_get_default_for_protocol protocol)
  (unless
    ~g_proxy_get_default_for_protocol
    (set! ~g_proxy_get_default_for_protocol
      (fh-link-proc
        "g_proxy_get_default_for_protocol"
        '*
        (list '*))))
  (let ((~protocol (unwrap~pointer protocol)))
    (wrap-GProxy*
      (~g_proxy_get_default_for_protocol ~protocol))))
(export g_proxy_get_default_for_protocol)

;; extern GIOStream *g_proxy_connect(GProxy *proxy, GIOStream *connection, 
;;     GProxyAddress *proxy_address, GCancellable *cancellable, GError **error)
;;     ;
(define ~g_proxy_connect #f)
(define (g_proxy_connect
         proxy
         connection
         proxy_address
         cancellable
         error)
  (unless
    ~g_proxy_connect
    (set! ~g_proxy_connect
      (fh-link-proc
        "g_proxy_connect"
        '*
        (list '* '* '* '* '*))))
  (let ((~proxy (unwrap-GProxy* proxy))
        (~connection (unwrap-GIOStream* connection))
        (~proxy_address
          (unwrap-GProxyAddress* proxy_address))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GIOStream*
      (~g_proxy_connect
        ~proxy
        ~connection
        ~proxy_address
        ~cancellable
        ~error))))
(export g_proxy_connect)

;; extern void g_proxy_connect_async(GProxy *proxy, GIOStream *connection, 
;;     GProxyAddress *proxy_address, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_proxy_connect_async #f)
(define (g_proxy_connect_async
         proxy
         connection
         proxy_address
         cancellable
         callback
         user_data)
  (unless
    ~g_proxy_connect_async
    (set! ~g_proxy_connect_async
      (fh-link-proc
        "g_proxy_connect_async"
        ffi:void
        (list '* '* '* '* '* '*))))
  (let ((~proxy (unwrap-GProxy* proxy))
        (~connection (unwrap-GIOStream* connection))
        (~proxy_address
          (unwrap-GProxyAddress* proxy_address))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_proxy_connect_async
      ~proxy
      ~connection
      ~proxy_address
      ~cancellable
      ~callback
      ~user_data)))
(export g_proxy_connect_async)

;; extern GIOStream *g_proxy_connect_finish(GProxy *proxy, GAsyncResult *result
;;     , GError **error);
(define ~g_proxy_connect_finish #f)
(define (g_proxy_connect_finish proxy result error)
  (unless
    ~g_proxy_connect_finish
    (set! ~g_proxy_connect_finish
      (fh-link-proc
        "g_proxy_connect_finish"
        '*
        (list '* '* '*))))
  (let ((~proxy (unwrap-GProxy* proxy))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GIOStream*
      (~g_proxy_connect_finish ~proxy ~result ~error))))
(export g_proxy_connect_finish)

;; extern gboolean g_proxy_supports_hostname(GProxy *proxy);
(define ~g_proxy_supports_hostname #f)
(define (g_proxy_supports_hostname proxy)
  (unless
    ~g_proxy_supports_hostname
    (set! ~g_proxy_supports_hostname
      (fh-link-proc
        "g_proxy_supports_hostname"
        ffi:int
        (list '*))))
  (let ((~proxy (unwrap-GProxy* proxy)))
    (~g_proxy_supports_hostname ~proxy)))
(export g_proxy_supports_hostname)

;; typedef struct _GProxyAddressClass GProxyAddressClass;
(define GProxyAddressClass-desc void)
(export GProxyAddressClass-desc)
(define GProxyAddressClass*-desc (bs:pointer (delay GProxyAddressClass-desc)))
(export GProxyAddressClass*-desc)
(define-fh-pointer-type GProxyAddressClass* GProxyAddressClass*-desc)

;; typedef struct _GProxyAddressPrivate GProxyAddressPrivate;
(define GProxyAddressPrivate-desc void)
(export GProxyAddressPrivate-desc)
(define GProxyAddressPrivate*-desc (bs:pointer GProxyAddressPrivate-desc))
(export GProxyAddressPrivate*-desc)
(define-fh-pointer-type GProxyAddressPrivate* GProxyAddressPrivate*-desc)

;; struct _GProxyAddress {
;;   GInetSocketAddress parent_instance;
;;   /*< private >*/
;;   GProxyAddressPrivate *priv;
;; };
(define struct-_GProxyAddress-desc
  (bs:struct
    (list `(parent_instance ,GInetSocketAddress-desc)
          `(priv ,(bs:pointer (delay GProxyAddressPrivate*-desc))))))
(export struct-_GProxyAddress-desc)
(define-fh-compound-type/p struct-_GProxyAddress struct-_GProxyAddress-desc)
(set! GProxyAddress-desc struct-_GProxyAddress-desc)
(define-fh-compound-type GProxyAddress GProxyAddress-desc)

;; struct _GProxyAddressClass {
;;   GInetSocketAddressClass parent_class;
;; };
(define struct-_GProxyAddressClass-desc
  (bs:struct
    (list `(parent_class ,GInetSocketAddressClass-desc))))
(export struct-_GProxyAddressClass-desc)
(define-fh-compound-type/p struct-_GProxyAddressClass struct-_GProxyAddressClass-desc)
(set! GProxyAddressClass-desc struct-_GProxyAddressClass-desc)
(define-fh-compound-type GProxyAddressClass GProxyAddressClass-desc)

;; extern GType g_proxy_address_get_type(void);
(define ~g_proxy_address_get_type #f)
(define (g_proxy_address_get_type)
  (unless
    ~g_proxy_address_get_type
    (set! ~g_proxy_address_get_type
      (fh-link-proc
        "g_proxy_address_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_proxy_address_get_type)))
(export g_proxy_address_get_type)

;; extern GSocketAddress *g_proxy_address_new(GInetAddress *inetaddr, guint16 
;;     port, const gchar *protocol, const gchar *dest_hostname, guint16 
;;     dest_port, const gchar *username, const gchar *password);
(define ~g_proxy_address_new #f)
(define (g_proxy_address_new
         inetaddr
         port
         protocol
         dest_hostname
         dest_port
         username
         password)
  (unless
    ~g_proxy_address_new
    (set! ~g_proxy_address_new
      (fh-link-proc
        "g_proxy_address_new"
        '*
        (list '*
              ffi:unsigned-short
              '*
              '*
              ffi:unsigned-short
              '*
              '*))))
  (let ((~inetaddr (unwrap-GInetAddress* inetaddr))
        (~port (unwrap~fixed port))
        (~protocol (unwrap~pointer protocol))
        (~dest_hostname (unwrap~pointer dest_hostname))
        (~dest_port (unwrap~fixed dest_port))
        (~username (unwrap~pointer username))
        (~password (unwrap~pointer password)))
    (wrap-GSocketAddress*
      (~g_proxy_address_new
        ~inetaddr
        ~port
        ~protocol
        ~dest_hostname
        ~dest_port
        ~username
        ~password))))
(export g_proxy_address_new)

;; extern const gchar *g_proxy_address_get_protocol(GProxyAddress *proxy);
(define ~g_proxy_address_get_protocol #f)
(define (g_proxy_address_get_protocol proxy)
  (unless
    ~g_proxy_address_get_protocol
    (set! ~g_proxy_address_get_protocol
      (fh-link-proc
        "g_proxy_address_get_protocol"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GProxyAddress* proxy)))
    (~g_proxy_address_get_protocol ~proxy)))
(export g_proxy_address_get_protocol)

;; extern const gchar *g_proxy_address_get_destination_protocol(GProxyAddress *
;;     proxy);
(define ~g_proxy_address_get_destination_protocol #f)
(define (g_proxy_address_get_destination_protocol proxy)
  (unless
    ~g_proxy_address_get_destination_protocol
    (set! ~g_proxy_address_get_destination_protocol
      (fh-link-proc
        "g_proxy_address_get_destination_protocol"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GProxyAddress* proxy)))
    (~g_proxy_address_get_destination_protocol
      ~proxy)))
(export g_proxy_address_get_destination_protocol)

;; extern const gchar *g_proxy_address_get_destination_hostname(GProxyAddress *
;;     proxy);
(define ~g_proxy_address_get_destination_hostname #f)
(define (g_proxy_address_get_destination_hostname proxy)
  (unless
    ~g_proxy_address_get_destination_hostname
    (set! ~g_proxy_address_get_destination_hostname
      (fh-link-proc
        "g_proxy_address_get_destination_hostname"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GProxyAddress* proxy)))
    (~g_proxy_address_get_destination_hostname
      ~proxy)))
(export g_proxy_address_get_destination_hostname)

;; extern guint16 g_proxy_address_get_destination_port(GProxyAddress *proxy);
(define ~g_proxy_address_get_destination_port #f)
(define (g_proxy_address_get_destination_port proxy)
  (unless
    ~g_proxy_address_get_destination_port
    (set! ~g_proxy_address_get_destination_port
      (fh-link-proc
        "g_proxy_address_get_destination_port"
        ffi:unsigned-short
        (list '*))))
  (let ((~proxy (unwrap-GProxyAddress* proxy)))
    (~g_proxy_address_get_destination_port ~proxy)))
(export g_proxy_address_get_destination_port)

;; extern const gchar *g_proxy_address_get_username(GProxyAddress *proxy);
(define ~g_proxy_address_get_username #f)
(define (g_proxy_address_get_username proxy)
  (unless
    ~g_proxy_address_get_username
    (set! ~g_proxy_address_get_username
      (fh-link-proc
        "g_proxy_address_get_username"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GProxyAddress* proxy)))
    (~g_proxy_address_get_username ~proxy)))
(export g_proxy_address_get_username)

;; extern const gchar *g_proxy_address_get_password(GProxyAddress *proxy);
(define ~g_proxy_address_get_password #f)
(define (g_proxy_address_get_password proxy)
  (unless
    ~g_proxy_address_get_password
    (set! ~g_proxy_address_get_password
      (fh-link-proc
        "g_proxy_address_get_password"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GProxyAddress* proxy)))
    (~g_proxy_address_get_password ~proxy)))
(export g_proxy_address_get_password)

;; extern const gchar *g_proxy_address_get_uri(GProxyAddress *proxy);
(define ~g_proxy_address_get_uri #f)
(define (g_proxy_address_get_uri proxy)
  (unless
    ~g_proxy_address_get_uri
    (set! ~g_proxy_address_get_uri
      (fh-link-proc
        "g_proxy_address_get_uri"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GProxyAddress* proxy)))
    (~g_proxy_address_get_uri ~proxy)))
(export g_proxy_address_get_uri)

;; typedef struct _GSocketAddressEnumeratorClass GSocketAddressEnumeratorClass
;;     ;
(define GSocketAddressEnumeratorClass-desc void)
(export GSocketAddressEnumeratorClass-desc)
(define GSocketAddressEnumeratorClass*-desc (bs:pointer (delay GSocketAddressEnumeratorClass-desc)))
(export GSocketAddressEnumeratorClass*-desc)
(define-fh-pointer-type GSocketAddressEnumeratorClass* GSocketAddressEnumeratorClass*-desc)

;; struct _GSocketAddressEnumerator {
;;   GObject parent_instance;
;; };
(define struct-_GSocketAddressEnumerator-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc)))))))))
(export struct-_GSocketAddressEnumerator-desc)
(define-fh-compound-type/p struct-_GSocketAddressEnumerator struct-_GSocketAddressEnumerator-desc)
(set! GSocketAddressEnumerator-desc struct-_GSocketAddressEnumerator-desc)
(define-fh-compound-type GSocketAddressEnumerator GSocketAddressEnumerator-desc)

;; struct _GSocketAddressEnumeratorClass {
;;   GObjectClass parent_class;
;;   /* Virtual Table */
;;   GSocketAddress *(*next)(GSocketAddressEnumerator *enumerator, GCancellable
;;        *cancellable, GError **error);
;;   void (*next_async)(GSocketAddressEnumerator *enumerator, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   GSocketAddress *(*next_finish)(GSocketAddressEnumerator *enumerator, 
;;       GAsyncResult *result, GError **error);
;; };
(define struct-_GSocketAddressEnumeratorClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(next ,(bs:pointer void))
          `(next_async ,(bs:pointer void))
          `(next_finish ,(bs:pointer void)))))
(export struct-_GSocketAddressEnumeratorClass-desc)
(define-fh-compound-type/p struct-_GSocketAddressEnumeratorClass struct-_GSocketAddressEnumeratorClass-desc)
(set! GSocketAddressEnumeratorClass-desc struct-_GSocketAddressEnumeratorClass-desc)
(define-fh-compound-type GSocketAddressEnumeratorClass GSocketAddressEnumeratorClass-desc)

;; extern GType g_socket_address_enumerator_get_type(void);
(define ~g_socket_address_enumerator_get_type #f)
(define (g_socket_address_enumerator_get_type)
  (unless
    ~g_socket_address_enumerator_get_type
    (set! ~g_socket_address_enumerator_get_type
      (fh-link-proc
        "g_socket_address_enumerator_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_address_enumerator_get_type)))
(export g_socket_address_enumerator_get_type)

;; extern GSocketAddress *g_socket_address_enumerator_next(
;;     GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GError 
;;     **error);
(define ~g_socket_address_enumerator_next #f)
(define (g_socket_address_enumerator_next
         enumerator
         cancellable
         error)
  (unless
    ~g_socket_address_enumerator_next
    (set! ~g_socket_address_enumerator_next
      (fh-link-proc
        "g_socket_address_enumerator_next"
        '*
        (list '* '* '*))))
  (let ((~enumerator
          (unwrap-GSocketAddressEnumerator* enumerator))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GSocketAddress*
      (~g_socket_address_enumerator_next
        ~enumerator
        ~cancellable
        ~error))))
(export g_socket_address_enumerator_next)

;; extern void g_socket_address_enumerator_next_async(GSocketAddressEnumerator 
;;     *enumerator, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_socket_address_enumerator_next_async #f)
(define (g_socket_address_enumerator_next_async
         enumerator
         cancellable
         callback
         user_data)
  (unless
    ~g_socket_address_enumerator_next_async
    (set! ~g_socket_address_enumerator_next_async
      (fh-link-proc
        "g_socket_address_enumerator_next_async"
        ffi:void
        (list '* '* '* '*))))
  (let ((~enumerator
          (unwrap-GSocketAddressEnumerator* enumerator))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_socket_address_enumerator_next_async
      ~enumerator
      ~cancellable
      ~callback
      ~user_data)))
(export g_socket_address_enumerator_next_async)

;; extern GSocketAddress *g_socket_address_enumerator_next_finish(
;;     GSocketAddressEnumerator *enumerator, GAsyncResult *result, GError **
;;     error);
(define ~g_socket_address_enumerator_next_finish #f)
(define (g_socket_address_enumerator_next_finish
         enumerator
         result
         error)
  (unless
    ~g_socket_address_enumerator_next_finish
    (set! ~g_socket_address_enumerator_next_finish
      (fh-link-proc
        "g_socket_address_enumerator_next_finish"
        '*
        (list '* '* '*))))
  (let ((~enumerator
          (unwrap-GSocketAddressEnumerator* enumerator))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GSocketAddress*
      (~g_socket_address_enumerator_next_finish
        ~enumerator
        ~result
        ~error))))
(export g_socket_address_enumerator_next_finish)

;; typedef struct _GProxyAddressEnumeratorClass GProxyAddressEnumeratorClass;
(define GProxyAddressEnumeratorClass-desc void)
(export GProxyAddressEnumeratorClass-desc)
(define GProxyAddressEnumeratorClass*-desc (bs:pointer (delay GProxyAddressEnumeratorClass-desc)))
(export GProxyAddressEnumeratorClass*-desc)
(define-fh-pointer-type GProxyAddressEnumeratorClass* GProxyAddressEnumeratorClass*-desc)

;; typedef struct _GProxyAddressEnumeratorPrivate 
;;     GProxyAddressEnumeratorPrivate;
(define GProxyAddressEnumeratorPrivate-desc void)
(export GProxyAddressEnumeratorPrivate-desc)
(define GProxyAddressEnumeratorPrivate*-desc (bs:pointer GProxyAddressEnumeratorPrivate-desc))
(export GProxyAddressEnumeratorPrivate*-desc)
(define-fh-pointer-type GProxyAddressEnumeratorPrivate* GProxyAddressEnumeratorPrivate*-desc)

;; struct _GProxyAddressEnumerator {
;;   GSocketAddressEnumerator parent_instance;
;;   GProxyAddressEnumeratorPrivate *priv;
;; };
(define struct-_GProxyAddressEnumerator-desc
  (bs:struct
    (list `(parent_instance ,GSocketAddressEnumerator-desc)
          `(priv ,(bs:pointer
                    (delay GProxyAddressEnumeratorPrivate*-desc))))))
(export struct-_GProxyAddressEnumerator-desc)
(define-fh-compound-type/p struct-_GProxyAddressEnumerator struct-_GProxyAddressEnumerator-desc)
(set! GProxyAddressEnumerator-desc struct-_GProxyAddressEnumerator-desc)
(define-fh-compound-type GProxyAddressEnumerator GProxyAddressEnumerator-desc)

;; struct _GProxyAddressEnumeratorClass {
;;   GSocketAddressEnumeratorClass parent_class;
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;;   void (*_g_reserved7)(void);
;; };
(define struct-_GProxyAddressEnumeratorClass-desc
  (bs:struct
    (list `(parent_class
             ,GSocketAddressEnumeratorClass-desc)
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void))
          `(_g_reserved7 ,(bs:pointer void)))))
(export struct-_GProxyAddressEnumeratorClass-desc)
(define-fh-compound-type/p struct-_GProxyAddressEnumeratorClass struct-_GProxyAddressEnumeratorClass-desc)
(set! GProxyAddressEnumeratorClass-desc struct-_GProxyAddressEnumeratorClass-desc)
(define-fh-compound-type GProxyAddressEnumeratorClass GProxyAddressEnumeratorClass-desc)

;; extern GType g_proxy_address_enumerator_get_type(void);
(define ~g_proxy_address_enumerator_get_type #f)
(define (g_proxy_address_enumerator_get_type)
  (unless
    ~g_proxy_address_enumerator_get_type
    (set! ~g_proxy_address_enumerator_get_type
      (fh-link-proc
        "g_proxy_address_enumerator_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_proxy_address_enumerator_get_type)))
(export g_proxy_address_enumerator_get_type)

;; typedef struct _GProxyResolverInterface GProxyResolverInterface;
(define GProxyResolverInterface-desc void)
(export GProxyResolverInterface-desc)
(define GProxyResolverInterface*-desc (bs:pointer (delay GProxyResolverInterface-desc)))
(export GProxyResolverInterface*-desc)
(define-fh-pointer-type GProxyResolverInterface* GProxyResolverInterface*-desc)

;; struct _GProxyResolverInterface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   gboolean (*is_supported)(GProxyResolver *resolver);
;;   gchar **(*lookup)(GProxyResolver *resolver, const gchar *uri, GCancellable
;;        *cancellable, GError **error);
;;   void (*lookup_async)(GProxyResolver *resolver, const gchar *uri, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   gchar **(*lookup_finish)(GProxyResolver *resolver, GAsyncResult *result, 
;;       GError **error);
;; };
(define struct-_GProxyResolverInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(is_supported ,(bs:pointer void))
          `(lookup ,(bs:pointer void))
          `(lookup_async ,(bs:pointer void))
          `(lookup_finish ,(bs:pointer void)))))
(export struct-_GProxyResolverInterface-desc)
(define-fh-compound-type/p struct-_GProxyResolverInterface struct-_GProxyResolverInterface-desc)
(set! GProxyResolverInterface-desc struct-_GProxyResolverInterface-desc)
(define-fh-compound-type GProxyResolverInterface GProxyResolverInterface-desc)

;; extern GType g_proxy_resolver_get_type(void);
(define ~g_proxy_resolver_get_type #f)
(define (g_proxy_resolver_get_type)
  (unless
    ~g_proxy_resolver_get_type
    (set! ~g_proxy_resolver_get_type
      (fh-link-proc
        "g_proxy_resolver_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_proxy_resolver_get_type)))
(export g_proxy_resolver_get_type)

;; extern GProxyResolver *g_proxy_resolver_get_default(void);
(define ~g_proxy_resolver_get_default #f)
(define (g_proxy_resolver_get_default)
  (unless
    ~g_proxy_resolver_get_default
    (set! ~g_proxy_resolver_get_default
      (fh-link-proc
        "g_proxy_resolver_get_default"
        '*
        (list))))
  (let ()
    (wrap-GProxyResolver*
      (~g_proxy_resolver_get_default))))
(export g_proxy_resolver_get_default)

;; extern gboolean g_proxy_resolver_is_supported(GProxyResolver *resolver);
(define ~g_proxy_resolver_is_supported #f)
(define (g_proxy_resolver_is_supported resolver)
  (unless
    ~g_proxy_resolver_is_supported
    (set! ~g_proxy_resolver_is_supported
      (fh-link-proc
        "g_proxy_resolver_is_supported"
        ffi:int
        (list '*))))
  (let ((~resolver (unwrap-GProxyResolver* resolver)))
    (~g_proxy_resolver_is_supported ~resolver)))
(export g_proxy_resolver_is_supported)

;; extern gchar **g_proxy_resolver_lookup(GProxyResolver *resolver, const gchar
;;      *uri, GCancellable *cancellable, GError **error);
(define ~g_proxy_resolver_lookup #f)
(define (g_proxy_resolver_lookup
         resolver
         uri
         cancellable
         error)
  (unless
    ~g_proxy_resolver_lookup
    (set! ~g_proxy_resolver_lookup
      (fh-link-proc
        "g_proxy_resolver_lookup"
        '*
        (list '* '* '* '*))))
  (let ((~resolver (unwrap-GProxyResolver* resolver))
        (~uri (unwrap~pointer uri))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_proxy_resolver_lookup
      ~resolver
      ~uri
      ~cancellable
      ~error)))
(export g_proxy_resolver_lookup)

;; extern void g_proxy_resolver_lookup_async(GProxyResolver *resolver, const 
;;     gchar *uri, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_proxy_resolver_lookup_async #f)
(define (g_proxy_resolver_lookup_async
         resolver
         uri
         cancellable
         callback
         user_data)
  (unless
    ~g_proxy_resolver_lookup_async
    (set! ~g_proxy_resolver_lookup_async
      (fh-link-proc
        "g_proxy_resolver_lookup_async"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~resolver (unwrap-GProxyResolver* resolver))
        (~uri (unwrap~pointer uri))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_proxy_resolver_lookup_async
      ~resolver
      ~uri
      ~cancellable
      ~callback
      ~user_data)))
(export g_proxy_resolver_lookup_async)

;; extern gchar **g_proxy_resolver_lookup_finish(GProxyResolver *resolver, 
;;     GAsyncResult *result, GError **error);
(define ~g_proxy_resolver_lookup_finish #f)
(define (g_proxy_resolver_lookup_finish
         resolver
         result
         error)
  (unless
    ~g_proxy_resolver_lookup_finish
    (set! ~g_proxy_resolver_lookup_finish
      (fh-link-proc
        "g_proxy_resolver_lookup_finish"
        '*
        (list '* '* '*))))
  (let ((~resolver (unwrap-GProxyResolver* resolver))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_proxy_resolver_lookup_finish
      ~resolver
      ~result
      ~error)))
(export g_proxy_resolver_lookup_finish)

;; typedef struct _GResolverPrivate GResolverPrivate;
(define GResolverPrivate-desc void)
(export GResolverPrivate-desc)
(define GResolverPrivate*-desc (bs:pointer GResolverPrivate-desc))
(export GResolverPrivate*-desc)
(define-fh-pointer-type GResolverPrivate* GResolverPrivate*-desc)

;; typedef struct _GResolverClass GResolverClass;
(define GResolverClass-desc void)
(export GResolverClass-desc)
(define GResolverClass*-desc (bs:pointer (delay GResolverClass-desc)))
(export GResolverClass*-desc)
(define-fh-pointer-type GResolverClass* GResolverClass*-desc)

;; struct _GResolver {
;;   GObject parent_instance;
;;   GResolverPrivate *priv;
;; };
(define struct-_GResolver-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GResolverPrivate*-desc))))))
(export struct-_GResolver-desc)
(define-fh-compound-type/p struct-_GResolver struct-_GResolver-desc)
(set! GResolver-desc struct-_GResolver-desc)
(define-fh-compound-type GResolver GResolver-desc)

;; struct _GResolverClass {
;;   GObjectClass parent_class;
;;   /* Signals */
;;   void (*reload)(GResolver *resolver);
;;   /* Virtual methods */
;;   GList *(*lookup_by_name)(GResolver *resolver, const gchar *hostname, 
;;       GCancellable *cancellable, GError **error);
;;   void (*lookup_by_name_async)(GResolver *resolver, const gchar *hostname, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   GList *(*lookup_by_name_finish)(GResolver *resolver, GAsyncResult *result
;;       , GError **error);
;;   gchar *(*lookup_by_address)(GResolver *resolver, GInetAddress *address, 
;;       GCancellable *cancellable, GError **error);
;;   void (*lookup_by_address_async)(GResolver *resolver, GInetAddress *address
;;       , GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   gchar *(*lookup_by_address_finish)(GResolver *resolver, GAsyncResult *
;;       result, GError **error);
;;   GList *(*lookup_service)(GResolver *resolver, const gchar *rrname, 
;;       GCancellable *cancellable, GError **error);
;;   void (*lookup_service_async)(GResolver *resolver, const gchar *rrname, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   GList *(*lookup_service_finish)(GResolver *resolver, GAsyncResult *result
;;       , GError **error);
;;   GList *(*lookup_records)(GResolver *resolver, const gchar *rrname, 
;;       GResolverRecordType record_type, GCancellable *cancellable, GError **
;;       error);
;;   void (*lookup_records_async)(GResolver *resolver, const gchar *rrname, 
;;       GResolverRecordType record_type, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   GList *(*lookup_records_finish)(GResolver *resolver, GAsyncResult *result
;;       , GError **error);
;;   /* Padding for future expansion */
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;; };
(define struct-_GResolverClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(reload ,(bs:pointer void))
          `(lookup_by_name ,(bs:pointer void))
          `(lookup_by_name_async ,(bs:pointer void))
          `(lookup_by_name_finish ,(bs:pointer void))
          `(lookup_by_address ,(bs:pointer void))
          `(lookup_by_address_async ,(bs:pointer void))
          `(lookup_by_address_finish ,(bs:pointer void))
          `(lookup_service ,(bs:pointer void))
          `(lookup_service_async ,(bs:pointer void))
          `(lookup_service_finish ,(bs:pointer void))
          `(lookup_records ,(bs:pointer void))
          `(lookup_records_async ,(bs:pointer void))
          `(lookup_records_finish ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void)))))
(export struct-_GResolverClass-desc)
(define-fh-compound-type/p struct-_GResolverClass struct-_GResolverClass-desc)
(set! GResolverClass-desc struct-_GResolverClass-desc)
(define-fh-compound-type GResolverClass GResolverClass-desc)

;; extern GType g_resolver_get_type(void);
(define ~g_resolver_get_type #f)
(define (g_resolver_get_type)
  (unless
    ~g_resolver_get_type
    (set! ~g_resolver_get_type
      (fh-link-proc
        "g_resolver_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_resolver_get_type)))
(export g_resolver_get_type)

;; extern GResolver *g_resolver_get_default(void);
(define ~g_resolver_get_default #f)
(define (g_resolver_get_default)
  (unless
    ~g_resolver_get_default
    (set! ~g_resolver_get_default
      (fh-link-proc "g_resolver_get_default" '* (list))))
  (let ()
    (wrap-GResolver* (~g_resolver_get_default))))
(export g_resolver_get_default)

;; extern void g_resolver_set_default(GResolver *resolver);
(define ~g_resolver_set_default #f)
(define (g_resolver_set_default resolver)
  (unless
    ~g_resolver_set_default
    (set! ~g_resolver_set_default
      (fh-link-proc
        "g_resolver_set_default"
        ffi:void
        (list '*))))
  (let ((~resolver (unwrap-GResolver* resolver)))
    (~g_resolver_set_default ~resolver)))
(export g_resolver_set_default)

;; extern GList *g_resolver_lookup_by_name(GResolver *resolver, const gchar *
;;     hostname, GCancellable *cancellable, GError **error);
(define ~g_resolver_lookup_by_name #f)
(define (g_resolver_lookup_by_name
         resolver
         hostname
         cancellable
         error)
  (unless
    ~g_resolver_lookup_by_name
    (set! ~g_resolver_lookup_by_name
      (fh-link-proc
        "g_resolver_lookup_by_name"
        '*
        (list '* '* '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~hostname (unwrap~pointer hostname))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_resolver_lookup_by_name
      ~resolver
      ~hostname
      ~cancellable
      ~error)))
(export g_resolver_lookup_by_name)

;; extern void g_resolver_lookup_by_name_async(GResolver *resolver, const gchar
;;      *hostname, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_resolver_lookup_by_name_async #f)
(define (g_resolver_lookup_by_name_async
         resolver
         hostname
         cancellable
         callback
         user_data)
  (unless
    ~g_resolver_lookup_by_name_async
    (set! ~g_resolver_lookup_by_name_async
      (fh-link-proc
        "g_resolver_lookup_by_name_async"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~hostname (unwrap~pointer hostname))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_resolver_lookup_by_name_async
      ~resolver
      ~hostname
      ~cancellable
      ~callback
      ~user_data)))
(export g_resolver_lookup_by_name_async)

;; extern GList *g_resolver_lookup_by_name_finish(GResolver *resolver, 
;;     GAsyncResult *result, GError **error);
(define ~g_resolver_lookup_by_name_finish #f)
(define (g_resolver_lookup_by_name_finish
         resolver
         result
         error)
  (unless
    ~g_resolver_lookup_by_name_finish
    (set! ~g_resolver_lookup_by_name_finish
      (fh-link-proc
        "g_resolver_lookup_by_name_finish"
        '*
        (list '* '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_resolver_lookup_by_name_finish
      ~resolver
      ~result
      ~error)))
(export g_resolver_lookup_by_name_finish)

;; extern void g_resolver_free_addresses(GList *addresses);
(define ~g_resolver_free_addresses #f)
(define (g_resolver_free_addresses addresses)
  (unless
    ~g_resolver_free_addresses
    (set! ~g_resolver_free_addresses
      (fh-link-proc
        "g_resolver_free_addresses"
        ffi:void
        (list '*))))
  (let () (~g_resolver_free_addresses addresses)))
(export g_resolver_free_addresses)

;; extern gchar *g_resolver_lookup_by_address(GResolver *resolver, GInetAddress
;;      *address, GCancellable *cancellable, GError **error);
(define ~g_resolver_lookup_by_address #f)
(define (g_resolver_lookup_by_address
         resolver
         address
         cancellable
         error)
  (unless
    ~g_resolver_lookup_by_address
    (set! ~g_resolver_lookup_by_address
      (fh-link-proc
        "g_resolver_lookup_by_address"
        '*
        (list '* '* '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~address (unwrap-GInetAddress* address))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_resolver_lookup_by_address
      ~resolver
      ~address
      ~cancellable
      ~error)))
(export g_resolver_lookup_by_address)

;; extern void g_resolver_lookup_by_address_async(GResolver *resolver, 
;;     GInetAddress *address, GCancellable *cancellable, GAsyncReadyCallback 
;;     callback, gpointer user_data);
(define ~g_resolver_lookup_by_address_async #f)
(define (g_resolver_lookup_by_address_async
         resolver
         address
         cancellable
         callback
         user_data)
  (unless
    ~g_resolver_lookup_by_address_async
    (set! ~g_resolver_lookup_by_address_async
      (fh-link-proc
        "g_resolver_lookup_by_address_async"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~address (unwrap-GInetAddress* address))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_resolver_lookup_by_address_async
      ~resolver
      ~address
      ~cancellable
      ~callback
      ~user_data)))
(export g_resolver_lookup_by_address_async)

;; extern gchar *g_resolver_lookup_by_address_finish(GResolver *resolver, 
;;     GAsyncResult *result, GError **error);
(define ~g_resolver_lookup_by_address_finish #f)
(define (g_resolver_lookup_by_address_finish
         resolver
         result
         error)
  (unless
    ~g_resolver_lookup_by_address_finish
    (set! ~g_resolver_lookup_by_address_finish
      (fh-link-proc
        "g_resolver_lookup_by_address_finish"
        '*
        (list '* '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_resolver_lookup_by_address_finish
      ~resolver
      ~result
      ~error)))
(export g_resolver_lookup_by_address_finish)

;; extern GList *g_resolver_lookup_service(GResolver *resolver, const gchar *
;;     service, const gchar *protocol, const gchar *domain, GCancellable *
;;     cancellable, GError **error);
(define ~g_resolver_lookup_service #f)
(define (g_resolver_lookup_service
         resolver
         service
         protocol
         domain
         cancellable
         error)
  (unless
    ~g_resolver_lookup_service
    (set! ~g_resolver_lookup_service
      (fh-link-proc
        "g_resolver_lookup_service"
        '*
        (list '* '* '* '* '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~service (unwrap~pointer service))
        (~protocol (unwrap~pointer protocol))
        (~domain (unwrap~pointer domain))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_resolver_lookup_service
      ~resolver
      ~service
      ~protocol
      ~domain
      ~cancellable
      ~error)))
(export g_resolver_lookup_service)

;; extern void g_resolver_lookup_service_async(GResolver *resolver, const gchar
;;      *service, const gchar *protocol, const gchar *domain, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_resolver_lookup_service_async #f)
(define (g_resolver_lookup_service_async
         resolver
         service
         protocol
         domain
         cancellable
         callback
         user_data)
  (unless
    ~g_resolver_lookup_service_async
    (set! ~g_resolver_lookup_service_async
      (fh-link-proc
        "g_resolver_lookup_service_async"
        ffi:void
        (list '* '* '* '* '* '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~service (unwrap~pointer service))
        (~protocol (unwrap~pointer protocol))
        (~domain (unwrap~pointer domain))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_resolver_lookup_service_async
      ~resolver
      ~service
      ~protocol
      ~domain
      ~cancellable
      ~callback
      ~user_data)))
(export g_resolver_lookup_service_async)

;; extern GList *g_resolver_lookup_service_finish(GResolver *resolver, 
;;     GAsyncResult *result, GError **error);
(define ~g_resolver_lookup_service_finish #f)
(define (g_resolver_lookup_service_finish
         resolver
         result
         error)
  (unless
    ~g_resolver_lookup_service_finish
    (set! ~g_resolver_lookup_service_finish
      (fh-link-proc
        "g_resolver_lookup_service_finish"
        '*
        (list '* '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_resolver_lookup_service_finish
      ~resolver
      ~result
      ~error)))
(export g_resolver_lookup_service_finish)

;; extern GList *g_resolver_lookup_records(GResolver *resolver, const gchar *
;;     rrname, GResolverRecordType record_type, GCancellable *cancellable, 
;;     GError **error);
(define ~g_resolver_lookup_records #f)
(define (g_resolver_lookup_records
         resolver
         rrname
         record_type
         cancellable
         error)
  (unless
    ~g_resolver_lookup_records
    (set! ~g_resolver_lookup_records
      (fh-link-proc
        "g_resolver_lookup_records"
        '*
        (list '* '* ffi:int '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~rrname (unwrap~pointer rrname))
        (~record_type (unwrap~fixed record_type))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_resolver_lookup_records
      ~resolver
      ~rrname
      ~record_type
      ~cancellable
      ~error)))
(export g_resolver_lookup_records)

;; extern void g_resolver_lookup_records_async(GResolver *resolver, const gchar
;;      *rrname, GResolverRecordType record_type, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_resolver_lookup_records_async #f)
(define (g_resolver_lookup_records_async
         resolver
         rrname
         record_type
         cancellable
         callback
         user_data)
  (unless
    ~g_resolver_lookup_records_async
    (set! ~g_resolver_lookup_records_async
      (fh-link-proc
        "g_resolver_lookup_records_async"
        ffi:void
        (list '* '* ffi:int '* '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~rrname (unwrap~pointer rrname))
        (~record_type (unwrap~fixed record_type))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_resolver_lookup_records_async
      ~resolver
      ~rrname
      ~record_type
      ~cancellable
      ~callback
      ~user_data)))
(export g_resolver_lookup_records_async)

;; extern GList *g_resolver_lookup_records_finish(GResolver *resolver, 
;;     GAsyncResult *result, GError **error);
(define ~g_resolver_lookup_records_finish #f)
(define (g_resolver_lookup_records_finish
         resolver
         result
         error)
  (unless
    ~g_resolver_lookup_records_finish
    (set! ~g_resolver_lookup_records_finish
      (fh-link-proc
        "g_resolver_lookup_records_finish"
        '*
        (list '* '* '*))))
  (let ((~resolver (unwrap-GResolver* resolver))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_resolver_lookup_records_finish
      ~resolver
      ~result
      ~error)))
(export g_resolver_lookup_records_finish)

;; extern void g_resolver_free_targets(GList *targets);
(define ~g_resolver_free_targets #f)
(define (g_resolver_free_targets targets)
  (unless
    ~g_resolver_free_targets
    (set! ~g_resolver_free_targets
      (fh-link-proc
        "g_resolver_free_targets"
        ffi:void
        (list '*))))
  (let () (~g_resolver_free_targets targets)))
(export g_resolver_free_targets)

;; extern GQuark g_resolver_error_quark(void);
(define ~g_resolver_error_quark #f)
(define (g_resolver_error_quark)
  (unless
    ~g_resolver_error_quark
    (set! ~g_resolver_error_quark
      (fh-link-proc
        "g_resolver_error_quark"
        ffi:unsigned-int
        (list))))
  (let () (~g_resolver_error_quark)))
(export g_resolver_error_quark)

;; extern GQuark g_resource_error_quark(void);
(define ~g_resource_error_quark #f)
(define (g_resource_error_quark)
  (unless
    ~g_resource_error_quark
    (set! ~g_resource_error_quark
      (fh-link-proc
        "g_resource_error_quark"
        ffi:unsigned-int
        (list))))
  (let () (~g_resource_error_quark)))
(export g_resource_error_quark)

;; typedef struct _GStaticResource GStaticResource;
(define GStaticResource-desc void)
(export GStaticResource-desc)
(define GStaticResource*-desc (bs:pointer (delay GStaticResource-desc)))
(export GStaticResource*-desc)
(define-fh-pointer-type GStaticResource* GStaticResource*-desc)

;; struct _GStaticResource {
;;   /*< private >*/
;;   const guint8 *data;
;;   gsize data_len;
;;   GResource *resource;
;;   GStaticResource *next;
;;   gpointer padding;
;; };
(define struct-_GStaticResource-desc
  (bs:struct
    (list `(data ,(bs:pointer unsigned-int))
          `(data_len ,unsigned-long)
          `(resource ,(bs:pointer (delay GResource*-desc)))
          `(next ,(bs:pointer (delay GStaticResource*-desc)))
          `(padding ,gpointer-desc))))
(export struct-_GStaticResource-desc)
(define-fh-compound-type/p struct-_GStaticResource struct-_GStaticResource-desc)
(set! GStaticResource-desc struct-_GStaticResource-desc)
(define-fh-compound-type GStaticResource GStaticResource-desc)

;; extern GType g_resource_get_type(void);
(define ~g_resource_get_type #f)
(define (g_resource_get_type)
  (unless
    ~g_resource_get_type
    (set! ~g_resource_get_type
      (fh-link-proc
        "g_resource_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_resource_get_type)))
(export g_resource_get_type)

;; extern GResource *g_resource_new_from_data(GBytes *data, GError **error);
(define ~g_resource_new_from_data #f)
(define (g_resource_new_from_data data error)
  (unless
    ~g_resource_new_from_data
    (set! ~g_resource_new_from_data
      (fh-link-proc
        "g_resource_new_from_data"
        '*
        (list '* '*))))
  (let ((~error (unwrap~pointer error)))
    (wrap-GResource*
      (~g_resource_new_from_data data ~error))))
(export g_resource_new_from_data)

;; extern GResource *g_resource_ref(GResource *resource);
(define ~g_resource_ref #f)
(define (g_resource_ref resource)
  (unless
    ~g_resource_ref
    (set! ~g_resource_ref
      (fh-link-proc "g_resource_ref" '* (list '*))))
  (let ((~resource (unwrap-GResource* resource)))
    (wrap-GResource* (~g_resource_ref ~resource))))
(export g_resource_ref)

;; extern void g_resource_unref(GResource *resource);
(define ~g_resource_unref #f)
(define (g_resource_unref resource)
  (unless
    ~g_resource_unref
    (set! ~g_resource_unref
      (fh-link-proc
        "g_resource_unref"
        ffi:void
        (list '*))))
  (let ((~resource (unwrap-GResource* resource)))
    (~g_resource_unref ~resource)))
(export g_resource_unref)

;; extern GResource *g_resource_load(const gchar *filename, GError **error);
(define ~g_resource_load #f)
(define (g_resource_load filename error)
  (unless
    ~g_resource_load
    (set! ~g_resource_load
      (fh-link-proc "g_resource_load" '* (list '* '*))))
  (let ((~filename (unwrap~pointer filename))
        (~error (unwrap~pointer error)))
    (wrap-GResource*
      (~g_resource_load ~filename ~error))))
(export g_resource_load)

;; extern GInputStream *g_resource_open_stream(GResource *resource, const char 
;;     *path, GResourceLookupFlags lookup_flags, GError **error);
(define ~g_resource_open_stream #f)
(define (g_resource_open_stream
         resource
         path
         lookup_flags
         error)
  (unless
    ~g_resource_open_stream
    (set! ~g_resource_open_stream
      (fh-link-proc
        "g_resource_open_stream"
        '*
        (list '* '* ffi:int '*))))
  (let ((~resource (unwrap-GResource* resource))
        (~path (unwrap~pointer path))
        (~lookup_flags (unwrap~fixed lookup_flags))
        (~error (unwrap~pointer error)))
    (wrap-GInputStream*
      (~g_resource_open_stream
        ~resource
        ~path
        ~lookup_flags
        ~error))))
(export g_resource_open_stream)

;; extern GBytes *g_resource_lookup_data(GResource *resource, const char *path
;;     , GResourceLookupFlags lookup_flags, GError **error);
(define ~g_resource_lookup_data #f)
(define (g_resource_lookup_data
         resource
         path
         lookup_flags
         error)
  (unless
    ~g_resource_lookup_data
    (set! ~g_resource_lookup_data
      (fh-link-proc
        "g_resource_lookup_data"
        '*
        (list '* '* ffi:int '*))))
  (let ((~resource (unwrap-GResource* resource))
        (~path (unwrap~pointer path))
        (~lookup_flags (unwrap~fixed lookup_flags))
        (~error (unwrap~pointer error)))
    (~g_resource_lookup_data
      ~resource
      ~path
      ~lookup_flags
      ~error)))
(export g_resource_lookup_data)

;; extern char **g_resource_enumerate_children(GResource *resource, const char 
;;     *path, GResourceLookupFlags lookup_flags, GError **error);
(define ~g_resource_enumerate_children #f)
(define (g_resource_enumerate_children
         resource
         path
         lookup_flags
         error)
  (unless
    ~g_resource_enumerate_children
    (set! ~g_resource_enumerate_children
      (fh-link-proc
        "g_resource_enumerate_children"
        '*
        (list '* '* ffi:int '*))))
  (let ((~resource (unwrap-GResource* resource))
        (~path (unwrap~pointer path))
        (~lookup_flags (unwrap~fixed lookup_flags))
        (~error (unwrap~pointer error)))
    (~g_resource_enumerate_children
      ~resource
      ~path
      ~lookup_flags
      ~error)))
(export g_resource_enumerate_children)

;; extern gboolean g_resource_get_info(GResource *resource, const char *path, 
;;     GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError *
;;     *error);
(define ~g_resource_get_info #f)
(define (g_resource_get_info
         resource
         path
         lookup_flags
         size
         flags
         error)
  (unless
    ~g_resource_get_info
    (set! ~g_resource_get_info
      (fh-link-proc
        "g_resource_get_info"
        ffi:int
        (list '* '* ffi:int '* '* '*))))
  (let ((~resource (unwrap-GResource* resource))
        (~path (unwrap~pointer path))
        (~lookup_flags (unwrap~fixed lookup_flags))
        (~size (unwrap~pointer size))
        (~flags (unwrap~pointer flags))
        (~error (unwrap~pointer error)))
    (~g_resource_get_info
      ~resource
      ~path
      ~lookup_flags
      ~size
      ~flags
      ~error)))
(export g_resource_get_info)

;; extern void g_resources_register(GResource *resource);
(define ~g_resources_register #f)
(define (g_resources_register resource)
  (unless
    ~g_resources_register
    (set! ~g_resources_register
      (fh-link-proc
        "g_resources_register"
        ffi:void
        (list '*))))
  (let ((~resource (unwrap-GResource* resource)))
    (~g_resources_register ~resource)))
(export g_resources_register)

;; extern void g_resources_unregister(GResource *resource);
(define ~g_resources_unregister #f)
(define (g_resources_unregister resource)
  (unless
    ~g_resources_unregister
    (set! ~g_resources_unregister
      (fh-link-proc
        "g_resources_unregister"
        ffi:void
        (list '*))))
  (let ((~resource (unwrap-GResource* resource)))
    (~g_resources_unregister ~resource)))
(export g_resources_unregister)

;; extern GInputStream *g_resources_open_stream(const char *path, 
;;     GResourceLookupFlags lookup_flags, GError **error);
(define ~g_resources_open_stream #f)
(define (g_resources_open_stream path lookup_flags error)
  (unless
    ~g_resources_open_stream
    (set! ~g_resources_open_stream
      (fh-link-proc
        "g_resources_open_stream"
        '*
        (list '* ffi:int '*))))
  (let ((~path (unwrap~pointer path))
        (~lookup_flags (unwrap~fixed lookup_flags))
        (~error (unwrap~pointer error)))
    (wrap-GInputStream*
      (~g_resources_open_stream
        ~path
        ~lookup_flags
        ~error))))
(export g_resources_open_stream)

;; extern GBytes *g_resources_lookup_data(const char *path, 
;;     GResourceLookupFlags lookup_flags, GError **error);
(define ~g_resources_lookup_data #f)
(define (g_resources_lookup_data path lookup_flags error)
  (unless
    ~g_resources_lookup_data
    (set! ~g_resources_lookup_data
      (fh-link-proc
        "g_resources_lookup_data"
        '*
        (list '* ffi:int '*))))
  (let ((~path (unwrap~pointer path))
        (~lookup_flags (unwrap~fixed lookup_flags))
        (~error (unwrap~pointer error)))
    (~g_resources_lookup_data
      ~path
      ~lookup_flags
      ~error)))
(export g_resources_lookup_data)

;; extern char **g_resources_enumerate_children(const char *path, 
;;     GResourceLookupFlags lookup_flags, GError **error);
(define ~g_resources_enumerate_children #f)
(define (g_resources_enumerate_children
         path
         lookup_flags
         error)
  (unless
    ~g_resources_enumerate_children
    (set! ~g_resources_enumerate_children
      (fh-link-proc
        "g_resources_enumerate_children"
        '*
        (list '* ffi:int '*))))
  (let ((~path (unwrap~pointer path))
        (~lookup_flags (unwrap~fixed lookup_flags))
        (~error (unwrap~pointer error)))
    (~g_resources_enumerate_children
      ~path
      ~lookup_flags
      ~error)))
(export g_resources_enumerate_children)

;; extern gboolean g_resources_get_info(const char *path, GResourceLookupFlags 
;;     lookup_flags, gsize *size, guint32 *flags, GError **error);
(define ~g_resources_get_info #f)
(define (g_resources_get_info
         path
         lookup_flags
         size
         flags
         error)
  (unless
    ~g_resources_get_info
    (set! ~g_resources_get_info
      (fh-link-proc
        "g_resources_get_info"
        ffi:int
        (list '* ffi:int '* '* '*))))
  (let ((~path (unwrap~pointer path))
        (~lookup_flags (unwrap~fixed lookup_flags))
        (~size (unwrap~pointer size))
        (~flags (unwrap~pointer flags))
        (~error (unwrap~pointer error)))
    (~g_resources_get_info
      ~path
      ~lookup_flags
      ~size
      ~flags
      ~error)))
(export g_resources_get_info)

;; extern void g_static_resource_init(GStaticResource *static_resource);
(define ~g_static_resource_init #f)
(define (g_static_resource_init static_resource)
  (unless
    ~g_static_resource_init
    (set! ~g_static_resource_init
      (fh-link-proc
        "g_static_resource_init"
        ffi:void
        (list '*))))
  (let ((~static_resource
          (unwrap-GStaticResource* static_resource)))
    (~g_static_resource_init ~static_resource)))
(export g_static_resource_init)

;; extern void g_static_resource_fini(GStaticResource *static_resource);
(define ~g_static_resource_fini #f)
(define (g_static_resource_fini static_resource)
  (unless
    ~g_static_resource_fini
    (set! ~g_static_resource_fini
      (fh-link-proc
        "g_static_resource_fini"
        ffi:void
        (list '*))))
  (let ((~static_resource
          (unwrap-GStaticResource* static_resource)))
    (~g_static_resource_fini ~static_resource)))
(export g_static_resource_fini)

;; extern GResource *g_static_resource_get_resource(GStaticResource *
;;     static_resource);
(define ~g_static_resource_get_resource #f)
(define (g_static_resource_get_resource static_resource)
  (unless
    ~g_static_resource_get_resource
    (set! ~g_static_resource_get_resource
      (fh-link-proc
        "g_static_resource_get_resource"
        '*
        (list '*))))
  (let ((~static_resource
          (unwrap-GStaticResource* static_resource)))
    (wrap-GResource*
      (~g_static_resource_get_resource
        ~static_resource))))
(export g_static_resource_get_resource)

;; typedef struct _GSeekableIface GSeekableIface;
(define GSeekableIface-desc void)
(export GSeekableIface-desc)
(define GSeekableIface*-desc (bs:pointer (delay GSeekableIface-desc)))
(export GSeekableIface*-desc)
(define-fh-pointer-type GSeekableIface* GSeekableIface*-desc)

;; struct _GSeekableIface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   goffset (*tell)(GSeekable *seekable);
;;   gboolean (*can_seek)(GSeekable *seekable);
;;   gboolean (*seek)(GSeekable *seekable, goffset offset, GSeekType type, 
;;       GCancellable *cancellable, GError **error);
;;   gboolean (*can_truncate)(GSeekable *seekable);
;;   gboolean (*truncate_fn)(GSeekable *seekable, goffset offset, GCancellable 
;;       *cancellable, GError **error);
;;   /* TODO: Async seek/truncate */
;; };
(define struct-_GSeekableIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(tell ,(bs:pointer void))
          `(can_seek ,(bs:pointer void))
          `(seek ,(bs:pointer void))
          `(can_truncate ,(bs:pointer void))
          `(truncate_fn ,(bs:pointer void)))))
(export struct-_GSeekableIface-desc)
(define-fh-compound-type/p struct-_GSeekableIface struct-_GSeekableIface-desc)
(set! GSeekableIface-desc struct-_GSeekableIface-desc)
(define-fh-compound-type GSeekableIface GSeekableIface-desc)

;; extern GType g_seekable_get_type(void);
(define ~g_seekable_get_type #f)
(define (g_seekable_get_type)
  (unless
    ~g_seekable_get_type
    (set! ~g_seekable_get_type
      (fh-link-proc
        "g_seekable_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_seekable_get_type)))
(export g_seekable_get_type)

;; extern goffset g_seekable_tell(GSeekable *seekable);
(define ~g_seekable_tell #f)
(define (g_seekable_tell seekable)
  (unless
    ~g_seekable_tell
    (set! ~g_seekable_tell
      (fh-link-proc
        "g_seekable_tell"
        ffi:long
        (list '*))))
  (let ((~seekable (unwrap-GSeekable* seekable)))
    (~g_seekable_tell ~seekable)))
(export g_seekable_tell)

;; extern gboolean g_seekable_can_seek(GSeekable *seekable);
(define ~g_seekable_can_seek #f)
(define (g_seekable_can_seek seekable)
  (unless
    ~g_seekable_can_seek
    (set! ~g_seekable_can_seek
      (fh-link-proc
        "g_seekable_can_seek"
        ffi:int
        (list '*))))
  (let ((~seekable (unwrap-GSeekable* seekable)))
    (~g_seekable_can_seek ~seekable)))
(export g_seekable_can_seek)

;; extern gboolean g_seekable_seek(GSeekable *seekable, goffset offset, 
;;     GSeekType type, GCancellable *cancellable, GError **error);
(define ~g_seekable_seek #f)
(define (g_seekable_seek
         seekable
         offset
         type
         cancellable
         error)
  (unless
    ~g_seekable_seek
    (set! ~g_seekable_seek
      (fh-link-proc
        "g_seekable_seek"
        ffi:int
        (list '* ffi:long ffi:int '* '*))))
  (let ((~seekable (unwrap-GSeekable* seekable))
        (~offset (unwrap~fixed offset))
        (~type (unwrap~fixed type))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_seekable_seek
      ~seekable
      ~offset
      ~type
      ~cancellable
      ~error)))
(export g_seekable_seek)

;; extern gboolean g_seekable_can_truncate(GSeekable *seekable);
(define ~g_seekable_can_truncate #f)
(define (g_seekable_can_truncate seekable)
  (unless
    ~g_seekable_can_truncate
    (set! ~g_seekable_can_truncate
      (fh-link-proc
        "g_seekable_can_truncate"
        ffi:int
        (list '*))))
  (let ((~seekable (unwrap-GSeekable* seekable)))
    (~g_seekable_can_truncate ~seekable)))
(export g_seekable_can_truncate)

;; extern gboolean g_seekable_truncate(GSeekable *seekable, goffset offset, 
;;     GCancellable *cancellable, GError **error);
(define ~g_seekable_truncate #f)
(define (g_seekable_truncate
         seekable
         offset
         cancellable
         error)
  (unless
    ~g_seekable_truncate
    (set! ~g_seekable_truncate
      (fh-link-proc
        "g_seekable_truncate"
        ffi:int
        (list '* ffi:long '* '*))))
  (let ((~seekable (unwrap-GSeekable* seekable))
        (~offset (unwrap~fixed offset))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_seekable_truncate
      ~seekable
      ~offset
      ~cancellable
      ~error)))
(export g_seekable_truncate)

;; typedef struct _GSettingsSchemaSource GSettingsSchemaSource;
(define GSettingsSchemaSource-desc void)
(export GSettingsSchemaSource-desc)
(define GSettingsSchemaSource*-desc (bs:pointer GSettingsSchemaSource-desc))
(export GSettingsSchemaSource*-desc)
(define-fh-pointer-type GSettingsSchemaSource* GSettingsSchemaSource*-desc)

;; typedef struct _GSettingsSchema GSettingsSchema;
(define GSettingsSchema-desc void)
(export GSettingsSchema-desc)
(define GSettingsSchema*-desc (bs:pointer GSettingsSchema-desc))
(export GSettingsSchema*-desc)
(define-fh-pointer-type GSettingsSchema* GSettingsSchema*-desc)

;; typedef struct _GSettingsSchemaKey GSettingsSchemaKey;
(define GSettingsSchemaKey-desc void)
(export GSettingsSchemaKey-desc)
(define GSettingsSchemaKey*-desc (bs:pointer GSettingsSchemaKey-desc))
(export GSettingsSchemaKey*-desc)
(define-fh-pointer-type GSettingsSchemaKey* GSettingsSchemaKey*-desc)

;; extern GType g_settings_schema_source_get_type(void);
(define ~g_settings_schema_source_get_type #f)
(define (g_settings_schema_source_get_type)
  (unless
    ~g_settings_schema_source_get_type
    (set! ~g_settings_schema_source_get_type
      (fh-link-proc
        "g_settings_schema_source_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_settings_schema_source_get_type)))
(export g_settings_schema_source_get_type)

;; extern GSettingsSchemaSource *g_settings_schema_source_get_default(void);
(define ~g_settings_schema_source_get_default #f)
(define (g_settings_schema_source_get_default)
  (unless
    ~g_settings_schema_source_get_default
    (set! ~g_settings_schema_source_get_default
      (fh-link-proc
        "g_settings_schema_source_get_default"
        '*
        (list))))
  (let ()
    (wrap-GSettingsSchemaSource*
      (~g_settings_schema_source_get_default))))
(export g_settings_schema_source_get_default)

;; extern GSettingsSchemaSource *g_settings_schema_source_ref(
;;     GSettingsSchemaSource *source);
(define ~g_settings_schema_source_ref #f)
(define (g_settings_schema_source_ref source)
  (unless
    ~g_settings_schema_source_ref
    (set! ~g_settings_schema_source_ref
      (fh-link-proc
        "g_settings_schema_source_ref"
        '*
        (list '*))))
  (let ((~source (unwrap-GSettingsSchemaSource* source)))
    (wrap-GSettingsSchemaSource*
      (~g_settings_schema_source_ref ~source))))
(export g_settings_schema_source_ref)

;; extern void g_settings_schema_source_unref(GSettingsSchemaSource *source);
(define ~g_settings_schema_source_unref #f)
(define (g_settings_schema_source_unref source)
  (unless
    ~g_settings_schema_source_unref
    (set! ~g_settings_schema_source_unref
      (fh-link-proc
        "g_settings_schema_source_unref"
        ffi:void
        (list '*))))
  (let ((~source (unwrap-GSettingsSchemaSource* source)))
    (~g_settings_schema_source_unref ~source)))
(export g_settings_schema_source_unref)

;; extern GSettingsSchemaSource *g_settings_schema_source_new_from_directory(
;;     const gchar *directory, GSettingsSchemaSource *parent, gboolean trusted
;;     , GError **error);
(define ~g_settings_schema_source_new_from_directory #f)
(define (g_settings_schema_source_new_from_directory
         directory
         parent
         trusted
         error)
  (unless
    ~g_settings_schema_source_new_from_directory
    (set! ~g_settings_schema_source_new_from_directory
      (fh-link-proc
        "g_settings_schema_source_new_from_directory"
        '*
        (list '* '* ffi:int '*))))
  (let ((~directory (unwrap~pointer directory))
        (~parent (unwrap-GSettingsSchemaSource* parent))
        (~trusted (unwrap~fixed trusted))
        (~error (unwrap~pointer error)))
    (wrap-GSettingsSchemaSource*
      (~g_settings_schema_source_new_from_directory
        ~directory
        ~parent
        ~trusted
        ~error))))
(export g_settings_schema_source_new_from_directory)

;; extern GSettingsSchema *g_settings_schema_source_lookup(
;;     GSettingsSchemaSource *source, const gchar *schema_id, gboolean 
;;     recursive);
(define ~g_settings_schema_source_lookup #f)
(define (g_settings_schema_source_lookup
         source
         schema_id
         recursive)
  (unless
    ~g_settings_schema_source_lookup
    (set! ~g_settings_schema_source_lookup
      (fh-link-proc
        "g_settings_schema_source_lookup"
        '*
        (list '* '* ffi:int))))
  (let ((~source (unwrap-GSettingsSchemaSource* source))
        (~schema_id (unwrap~pointer schema_id))
        (~recursive (unwrap~fixed recursive)))
    (wrap-GSettingsSchema*
      (~g_settings_schema_source_lookup
        ~source
        ~schema_id
        ~recursive))))
(export g_settings_schema_source_lookup)

;; extern void g_settings_schema_source_list_schemas(GSettingsSchemaSource *
;;     source, gboolean recursive, gchar ***non_relocatable, gchar ***
;;     relocatable);
(define ~g_settings_schema_source_list_schemas #f)
(define (g_settings_schema_source_list_schemas
         source
         recursive
         non_relocatable
         relocatable)
  (unless
    ~g_settings_schema_source_list_schemas
    (set! ~g_settings_schema_source_list_schemas
      (fh-link-proc
        "g_settings_schema_source_list_schemas"
        ffi:void
        (list '* ffi:int '* '*))))
  (let ((~source (unwrap-GSettingsSchemaSource* source))
        (~recursive (unwrap~fixed recursive))
        (~non_relocatable
          (unwrap~pointer non_relocatable))
        (~relocatable (unwrap~pointer relocatable)))
    (~g_settings_schema_source_list_schemas
      ~source
      ~recursive
      ~non_relocatable
      ~relocatable)))
(export g_settings_schema_source_list_schemas)

;; extern GType g_settings_schema_get_type(void);
(define ~g_settings_schema_get_type #f)
(define (g_settings_schema_get_type)
  (unless
    ~g_settings_schema_get_type
    (set! ~g_settings_schema_get_type
      (fh-link-proc
        "g_settings_schema_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_settings_schema_get_type)))
(export g_settings_schema_get_type)

;; extern GSettingsSchema *g_settings_schema_ref(GSettingsSchema *schema);
(define ~g_settings_schema_ref #f)
(define (g_settings_schema_ref schema)
  (unless
    ~g_settings_schema_ref
    (set! ~g_settings_schema_ref
      (fh-link-proc
        "g_settings_schema_ref"
        '*
        (list '*))))
  (let ((~schema (unwrap-GSettingsSchema* schema)))
    (wrap-GSettingsSchema*
      (~g_settings_schema_ref ~schema))))
(export g_settings_schema_ref)

;; extern void g_settings_schema_unref(GSettingsSchema *schema);
(define ~g_settings_schema_unref #f)
(define (g_settings_schema_unref schema)
  (unless
    ~g_settings_schema_unref
    (set! ~g_settings_schema_unref
      (fh-link-proc
        "g_settings_schema_unref"
        ffi:void
        (list '*))))
  (let ((~schema (unwrap-GSettingsSchema* schema)))
    (~g_settings_schema_unref ~schema)))
(export g_settings_schema_unref)

;; extern const gchar *g_settings_schema_get_id(GSettingsSchema *schema);
(define ~g_settings_schema_get_id #f)
(define (g_settings_schema_get_id schema)
  (unless
    ~g_settings_schema_get_id
    (set! ~g_settings_schema_get_id
      (fh-link-proc
        "g_settings_schema_get_id"
        '*
        (list '*))))
  (let ((~schema (unwrap-GSettingsSchema* schema)))
    (~g_settings_schema_get_id ~schema)))
(export g_settings_schema_get_id)

;; extern const gchar *g_settings_schema_get_path(GSettingsSchema *schema);
(define ~g_settings_schema_get_path #f)
(define (g_settings_schema_get_path schema)
  (unless
    ~g_settings_schema_get_path
    (set! ~g_settings_schema_get_path
      (fh-link-proc
        "g_settings_schema_get_path"
        '*
        (list '*))))
  (let ((~schema (unwrap-GSettingsSchema* schema)))
    (~g_settings_schema_get_path ~schema)))
(export g_settings_schema_get_path)

;; extern GSettingsSchemaKey *g_settings_schema_get_key(GSettingsSchema *schema
;;     , const gchar *name);
(define ~g_settings_schema_get_key #f)
(define (g_settings_schema_get_key schema name)
  (unless
    ~g_settings_schema_get_key
    (set! ~g_settings_schema_get_key
      (fh-link-proc
        "g_settings_schema_get_key"
        '*
        (list '* '*))))
  (let ((~schema (unwrap-GSettingsSchema* schema))
        (~name (unwrap~pointer name)))
    (wrap-GSettingsSchemaKey*
      (~g_settings_schema_get_key ~schema ~name))))
(export g_settings_schema_get_key)

;; extern gboolean g_settings_schema_has_key(GSettingsSchema *schema, const 
;;     gchar *name);
(define ~g_settings_schema_has_key #f)
(define (g_settings_schema_has_key schema name)
  (unless
    ~g_settings_schema_has_key
    (set! ~g_settings_schema_has_key
      (fh-link-proc
        "g_settings_schema_has_key"
        ffi:int
        (list '* '*))))
  (let ((~schema (unwrap-GSettingsSchema* schema))
        (~name (unwrap~pointer name)))
    (~g_settings_schema_has_key ~schema ~name)))
(export g_settings_schema_has_key)

;; extern gchar **g_settings_schema_list_keys(GSettingsSchema *schema);
(define ~g_settings_schema_list_keys #f)
(define (g_settings_schema_list_keys schema)
  (unless
    ~g_settings_schema_list_keys
    (set! ~g_settings_schema_list_keys
      (fh-link-proc
        "g_settings_schema_list_keys"
        '*
        (list '*))))
  (let ((~schema (unwrap-GSettingsSchema* schema)))
    (~g_settings_schema_list_keys ~schema)))
(export g_settings_schema_list_keys)

;; extern gchar **g_settings_schema_list_children(GSettingsSchema *schema);
(define ~g_settings_schema_list_children #f)
(define (g_settings_schema_list_children schema)
  (unless
    ~g_settings_schema_list_children
    (set! ~g_settings_schema_list_children
      (fh-link-proc
        "g_settings_schema_list_children"
        '*
        (list '*))))
  (let ((~schema (unwrap-GSettingsSchema* schema)))
    (~g_settings_schema_list_children ~schema)))
(export g_settings_schema_list_children)

;; extern GType g_settings_schema_key_get_type(void);
(define ~g_settings_schema_key_get_type #f)
(define (g_settings_schema_key_get_type)
  (unless
    ~g_settings_schema_key_get_type
    (set! ~g_settings_schema_key_get_type
      (fh-link-proc
        "g_settings_schema_key_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_settings_schema_key_get_type)))
(export g_settings_schema_key_get_type)

;; extern GSettingsSchemaKey *g_settings_schema_key_ref(GSettingsSchemaKey *key
;;     );
(define ~g_settings_schema_key_ref #f)
(define (g_settings_schema_key_ref key)
  (unless
    ~g_settings_schema_key_ref
    (set! ~g_settings_schema_key_ref
      (fh-link-proc
        "g_settings_schema_key_ref"
        '*
        (list '*))))
  (let ((~key (unwrap-GSettingsSchemaKey* key)))
    (wrap-GSettingsSchemaKey*
      (~g_settings_schema_key_ref ~key))))
(export g_settings_schema_key_ref)

;; extern void g_settings_schema_key_unref(GSettingsSchemaKey *key);
(define ~g_settings_schema_key_unref #f)
(define (g_settings_schema_key_unref key)
  (unless
    ~g_settings_schema_key_unref
    (set! ~g_settings_schema_key_unref
      (fh-link-proc
        "g_settings_schema_key_unref"
        ffi:void
        (list '*))))
  (let ((~key (unwrap-GSettingsSchemaKey* key)))
    (~g_settings_schema_key_unref ~key)))
(export g_settings_schema_key_unref)

;; extern const GVariantType *g_settings_schema_key_get_value_type(
;;     GSettingsSchemaKey *key);
(define ~g_settings_schema_key_get_value_type #f)
(define (g_settings_schema_key_get_value_type key)
  (unless
    ~g_settings_schema_key_get_value_type
    (set! ~g_settings_schema_key_get_value_type
      (fh-link-proc
        "g_settings_schema_key_get_value_type"
        '*
        (list '*))))
  (let ((~key (unwrap-GSettingsSchemaKey* key)))
    (~g_settings_schema_key_get_value_type ~key)))
(export g_settings_schema_key_get_value_type)

;; extern GVariant *g_settings_schema_key_get_default_value(GSettingsSchemaKey 
;;     *key);
(define ~g_settings_schema_key_get_default_value #f)
(define (g_settings_schema_key_get_default_value key)
  (unless
    ~g_settings_schema_key_get_default_value
    (set! ~g_settings_schema_key_get_default_value
      (fh-link-proc
        "g_settings_schema_key_get_default_value"
        '*
        (list '*))))
  (let ((~key (unwrap-GSettingsSchemaKey* key)))
    (~g_settings_schema_key_get_default_value ~key)))
(export g_settings_schema_key_get_default_value)

;; extern GVariant *g_settings_schema_key_get_range(GSettingsSchemaKey *key);
(define ~g_settings_schema_key_get_range #f)
(define (g_settings_schema_key_get_range key)
  (unless
    ~g_settings_schema_key_get_range
    (set! ~g_settings_schema_key_get_range
      (fh-link-proc
        "g_settings_schema_key_get_range"
        '*
        (list '*))))
  (let ((~key (unwrap-GSettingsSchemaKey* key)))
    (~g_settings_schema_key_get_range ~key)))
(export g_settings_schema_key_get_range)

;; extern gboolean g_settings_schema_key_range_check(GSettingsSchemaKey *key, 
;;     GVariant *value);
(define ~g_settings_schema_key_range_check #f)
(define (g_settings_schema_key_range_check key value)
  (unless
    ~g_settings_schema_key_range_check
    (set! ~g_settings_schema_key_range_check
      (fh-link-proc
        "g_settings_schema_key_range_check"
        ffi:int
        (list '* '*))))
  (let ((~key (unwrap-GSettingsSchemaKey* key)))
    (~g_settings_schema_key_range_check ~key value)))
(export g_settings_schema_key_range_check)

;; extern const gchar *g_settings_schema_key_get_name(GSettingsSchemaKey *key)
;;     ;
(define ~g_settings_schema_key_get_name #f)
(define (g_settings_schema_key_get_name key)
  (unless
    ~g_settings_schema_key_get_name
    (set! ~g_settings_schema_key_get_name
      (fh-link-proc
        "g_settings_schema_key_get_name"
        '*
        (list '*))))
  (let ((~key (unwrap-GSettingsSchemaKey* key)))
    (~g_settings_schema_key_get_name ~key)))
(export g_settings_schema_key_get_name)

;; extern const gchar *g_settings_schema_key_get_summary(GSettingsSchemaKey *
;;     key);
(define ~g_settings_schema_key_get_summary #f)
(define (g_settings_schema_key_get_summary key)
  (unless
    ~g_settings_schema_key_get_summary
    (set! ~g_settings_schema_key_get_summary
      (fh-link-proc
        "g_settings_schema_key_get_summary"
        '*
        (list '*))))
  (let ((~key (unwrap-GSettingsSchemaKey* key)))
    (~g_settings_schema_key_get_summary ~key)))
(export g_settings_schema_key_get_summary)

;; extern const gchar *g_settings_schema_key_get_description(GSettingsSchemaKey
;;      *key);
(define ~g_settings_schema_key_get_description #f)
(define (g_settings_schema_key_get_description key)
  (unless
    ~g_settings_schema_key_get_description
    (set! ~g_settings_schema_key_get_description
      (fh-link-proc
        "g_settings_schema_key_get_description"
        '*
        (list '*))))
  (let ((~key (unwrap-GSettingsSchemaKey* key)))
    (~g_settings_schema_key_get_description ~key)))
(export g_settings_schema_key_get_description)

;; typedef struct _GSettingsPrivate GSettingsPrivate;
(define GSettingsPrivate-desc void)
(export GSettingsPrivate-desc)
(define GSettingsPrivate*-desc (bs:pointer GSettingsPrivate-desc))
(export GSettingsPrivate*-desc)
(define-fh-pointer-type GSettingsPrivate* GSettingsPrivate*-desc)

;; typedef struct _GSettingsClass GSettingsClass;
(define GSettingsClass-desc void)
(export GSettingsClass-desc)
(define GSettingsClass*-desc (bs:pointer (delay GSettingsClass-desc)))
(export GSettingsClass*-desc)
(define-fh-pointer-type GSettingsClass* GSettingsClass*-desc)

;; struct _GSettingsClass {
;;   GObjectClass parent_class;
;;   /* Signals */
;;   void (*writable_changed)(GSettings *settings, const gchar *key);
;;   void (*changed)(GSettings *settings, const gchar *key);
;;   gboolean (*writable_change_event)(GSettings *settings, GQuark key);
;;   gboolean (*change_event)(GSettings *settings, const GQuark *keys, gint 
;;       n_keys);
;;   gpointer padding[20];
;; };
(define struct-_GSettingsClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(writable_changed ,(bs:pointer void))
          `(changed ,(bs:pointer void))
          `(writable_change_event ,(bs:pointer void))
          `(change_event ,(bs:pointer void))
          `(padding ,(bs:vector 20 gpointer-desc)))))
(export struct-_GSettingsClass-desc)
(define-fh-compound-type/p struct-_GSettingsClass struct-_GSettingsClass-desc)
(set! GSettingsClass-desc struct-_GSettingsClass-desc)
(define-fh-compound-type GSettingsClass GSettingsClass-desc)

;; struct _GSettings {
;;   GObject parent_instance;
;;   GSettingsPrivate *priv;
;; };
(define struct-_GSettings-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GSettingsPrivate*-desc))))))
(export struct-_GSettings-desc)
(define-fh-compound-type/p struct-_GSettings struct-_GSettings-desc)
(set! GSettings-desc struct-_GSettings-desc)
(define-fh-compound-type GSettings GSettings-desc)

;; extern GType g_settings_get_type(void);
(define ~g_settings_get_type #f)
(define (g_settings_get_type)
  (unless
    ~g_settings_get_type
    (set! ~g_settings_get_type
      (fh-link-proc
        "g_settings_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_settings_get_type)))
(export g_settings_get_type)

;; extern const gchar *const*g_settings_list_schemas(void);
(define ~g_settings_list_schemas #f)
(define (g_settings_list_schemas)
  (unless
    ~g_settings_list_schemas
    (set! ~g_settings_list_schemas
      (fh-link-proc
        "g_settings_list_schemas"
        '*
        (list))))
  (let () (~g_settings_list_schemas)))
(export g_settings_list_schemas)

;; extern const gchar *const*g_settings_list_relocatable_schemas(void);
(define ~g_settings_list_relocatable_schemas #f)
(define (g_settings_list_relocatable_schemas)
  (unless
    ~g_settings_list_relocatable_schemas
    (set! ~g_settings_list_relocatable_schemas
      (fh-link-proc
        "g_settings_list_relocatable_schemas"
        '*
        (list))))
  (let () (~g_settings_list_relocatable_schemas)))
(export g_settings_list_relocatable_schemas)

;; extern GSettings *g_settings_new(const gchar *schema_id);
(define ~g_settings_new #f)
(define (g_settings_new schema_id)
  (unless
    ~g_settings_new
    (set! ~g_settings_new
      (fh-link-proc "g_settings_new" '* (list '*))))
  (let ((~schema_id (unwrap~pointer schema_id)))
    (wrap-GSettings* (~g_settings_new ~schema_id))))
(export g_settings_new)

;; extern GSettings *g_settings_new_with_path(const gchar *schema_id, const 
;;     gchar *path);
(define ~g_settings_new_with_path #f)
(define (g_settings_new_with_path schema_id path)
  (unless
    ~g_settings_new_with_path
    (set! ~g_settings_new_with_path
      (fh-link-proc
        "g_settings_new_with_path"
        '*
        (list '* '*))))
  (let ((~schema_id (unwrap~pointer schema_id))
        (~path (unwrap~pointer path)))
    (wrap-GSettings*
      (~g_settings_new_with_path ~schema_id ~path))))
(export g_settings_new_with_path)

;; extern GSettings *g_settings_new_with_backend(const gchar *schema_id, 
;;     GSettingsBackend *backend);
(define ~g_settings_new_with_backend #f)
(define (g_settings_new_with_backend schema_id backend)
  (unless
    ~g_settings_new_with_backend
    (set! ~g_settings_new_with_backend
      (fh-link-proc
        "g_settings_new_with_backend"
        '*
        (list '* '*))))
  (let ((~schema_id (unwrap~pointer schema_id))
        (~backend (unwrap-GSettingsBackend* backend)))
    (wrap-GSettings*
      (~g_settings_new_with_backend
        ~schema_id
        ~backend))))
(export g_settings_new_with_backend)

;; extern GSettings *g_settings_new_with_backend_and_path(const gchar *
;;     schema_id, GSettingsBackend *backend, const gchar *path);
(define ~g_settings_new_with_backend_and_path #f)
(define (g_settings_new_with_backend_and_path
         schema_id
         backend
         path)
  (unless
    ~g_settings_new_with_backend_and_path
    (set! ~g_settings_new_with_backend_and_path
      (fh-link-proc
        "g_settings_new_with_backend_and_path"
        '*
        (list '* '* '*))))
  (let ((~schema_id (unwrap~pointer schema_id))
        (~backend (unwrap-GSettingsBackend* backend))
        (~path (unwrap~pointer path)))
    (wrap-GSettings*
      (~g_settings_new_with_backend_and_path
        ~schema_id
        ~backend
        ~path))))
(export g_settings_new_with_backend_and_path)

;; extern GSettings *g_settings_new_full(GSettingsSchema *schema, 
;;     GSettingsBackend *backend, const gchar *path);
(define ~g_settings_new_full #f)
(define (g_settings_new_full schema backend path)
  (unless
    ~g_settings_new_full
    (set! ~g_settings_new_full
      (fh-link-proc
        "g_settings_new_full"
        '*
        (list '* '* '*))))
  (let ((~schema (unwrap-GSettingsSchema* schema))
        (~backend (unwrap-GSettingsBackend* backend))
        (~path (unwrap~pointer path)))
    (wrap-GSettings*
      (~g_settings_new_full ~schema ~backend ~path))))
(export g_settings_new_full)

;; extern gchar **g_settings_list_children(GSettings *settings);
(define ~g_settings_list_children #f)
(define (g_settings_list_children settings)
  (unless
    ~g_settings_list_children
    (set! ~g_settings_list_children
      (fh-link-proc
        "g_settings_list_children"
        '*
        (list '*))))
  (let ((~settings (unwrap-GSettings* settings)))
    (~g_settings_list_children ~settings)))
(export g_settings_list_children)

;; extern gchar **g_settings_list_keys(GSettings *settings);
(define ~g_settings_list_keys #f)
(define (g_settings_list_keys settings)
  (unless
    ~g_settings_list_keys
    (set! ~g_settings_list_keys
      (fh-link-proc
        "g_settings_list_keys"
        '*
        (list '*))))
  (let ((~settings (unwrap-GSettings* settings)))
    (~g_settings_list_keys ~settings)))
(export g_settings_list_keys)

;; extern GVariant *g_settings_get_range(GSettings *settings, const gchar *key)
;;     ;
(define ~g_settings_get_range #f)
(define (g_settings_get_range settings key)
  (unless
    ~g_settings_get_range
    (set! ~g_settings_get_range
      (fh-link-proc
        "g_settings_get_range"
        '*
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_range ~settings ~key)))
(export g_settings_get_range)

;; extern gboolean g_settings_range_check(GSettings *settings, const gchar *key
;;     , GVariant *value);
(define ~g_settings_range_check #f)
(define (g_settings_range_check settings key value)
  (unless
    ~g_settings_range_check
    (set! ~g_settings_range_check
      (fh-link-proc
        "g_settings_range_check"
        ffi:int
        (list '* '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_range_check ~settings ~key value)))
(export g_settings_range_check)

;; extern gboolean g_settings_set_value(GSettings *settings, const gchar *key, 
;;     GVariant *value);
(define ~g_settings_set_value #f)
(define (g_settings_set_value settings key value)
  (unless
    ~g_settings_set_value
    (set! ~g_settings_set_value
      (fh-link-proc
        "g_settings_set_value"
        ffi:int
        (list '* '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_set_value ~settings ~key value)))
(export g_settings_set_value)

;; extern GVariant *g_settings_get_value(GSettings *settings, const gchar *key)
;;     ;
(define ~g_settings_get_value #f)
(define (g_settings_get_value settings key)
  (unless
    ~g_settings_get_value
    (set! ~g_settings_get_value
      (fh-link-proc
        "g_settings_get_value"
        '*
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_value ~settings ~key)))
(export g_settings_get_value)

;; extern GVariant *g_settings_get_user_value(GSettings *settings, const gchar 
;;     *key);
(define ~g_settings_get_user_value #f)
(define (g_settings_get_user_value settings key)
  (unless
    ~g_settings_get_user_value
    (set! ~g_settings_get_user_value
      (fh-link-proc
        "g_settings_get_user_value"
        '*
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_user_value ~settings ~key)))
(export g_settings_get_user_value)

;; extern GVariant *g_settings_get_default_value(GSettings *settings, const 
;;     gchar *key);
(define ~g_settings_get_default_value #f)
(define (g_settings_get_default_value settings key)
  (unless
    ~g_settings_get_default_value
    (set! ~g_settings_get_default_value
      (fh-link-proc
        "g_settings_get_default_value"
        '*
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_default_value ~settings ~key)))
(export g_settings_get_default_value)

;; extern gboolean g_settings_set(GSettings *settings, const gchar *key, const 
;;     gchar *format, ...);
;; ... failed.

;; extern void g_settings_get(GSettings *settings, const gchar *key, const 
;;     gchar *format, ...);
;; ... failed.

;; extern void g_settings_reset(GSettings *settings, const gchar *key);
(define ~g_settings_reset #f)
(define (g_settings_reset settings key)
  (unless
    ~g_settings_reset
    (set! ~g_settings_reset
      (fh-link-proc
        "g_settings_reset"
        ffi:void
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_reset ~settings ~key)))
(export g_settings_reset)

;; extern gint g_settings_get_int(GSettings *settings, const gchar *key);
(define ~g_settings_get_int #f)
(define (g_settings_get_int settings key)
  (unless
    ~g_settings_get_int
    (set! ~g_settings_get_int
      (fh-link-proc
        "g_settings_get_int"
        ffi:int
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_int ~settings ~key)))
(export g_settings_get_int)

;; extern gboolean g_settings_set_int(GSettings *settings, const gchar *key, 
;;     gint value);
(define ~g_settings_set_int #f)
(define (g_settings_set_int settings key value)
  (unless
    ~g_settings_set_int
    (set! ~g_settings_set_int
      (fh-link-proc
        "g_settings_set_int"
        ffi:int
        (list '* '* ffi:int))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~value (unwrap~fixed value)))
    (~g_settings_set_int ~settings ~key ~value)))
(export g_settings_set_int)

;; extern gint64 g_settings_get_int64(GSettings *settings, const gchar *key);
(define ~g_settings_get_int64 #f)
(define (g_settings_get_int64 settings key)
  (unless
    ~g_settings_get_int64
    (set! ~g_settings_get_int64
      (fh-link-proc
        "g_settings_get_int64"
        ffi:long
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_int64 ~settings ~key)))
(export g_settings_get_int64)

;; extern gboolean g_settings_set_int64(GSettings *settings, const gchar *key, 
;;     gint64 value);
(define ~g_settings_set_int64 #f)
(define (g_settings_set_int64 settings key value)
  (unless
    ~g_settings_set_int64
    (set! ~g_settings_set_int64
      (fh-link-proc
        "g_settings_set_int64"
        ffi:int
        (list '* '* ffi:long))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~value (unwrap~fixed value)))
    (~g_settings_set_int64 ~settings ~key ~value)))
(export g_settings_set_int64)

;; extern guint g_settings_get_uint(GSettings *settings, const gchar *key);
(define ~g_settings_get_uint #f)
(define (g_settings_get_uint settings key)
  (unless
    ~g_settings_get_uint
    (set! ~g_settings_get_uint
      (fh-link-proc
        "g_settings_get_uint"
        ffi:unsigned-int
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_uint ~settings ~key)))
(export g_settings_get_uint)

;; extern gboolean g_settings_set_uint(GSettings *settings, const gchar *key, 
;;     guint value);
(define ~g_settings_set_uint #f)
(define (g_settings_set_uint settings key value)
  (unless
    ~g_settings_set_uint
    (set! ~g_settings_set_uint
      (fh-link-proc
        "g_settings_set_uint"
        ffi:int
        (list '* '* ffi:unsigned-int))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~value (unwrap~fixed value)))
    (~g_settings_set_uint ~settings ~key ~value)))
(export g_settings_set_uint)

;; extern guint64 g_settings_get_uint64(GSettings *settings, const gchar *key)
;;     ;
(define ~g_settings_get_uint64 #f)
(define (g_settings_get_uint64 settings key)
  (unless
    ~g_settings_get_uint64
    (set! ~g_settings_get_uint64
      (fh-link-proc
        "g_settings_get_uint64"
        ffi:unsigned-long
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_uint64 ~settings ~key)))
(export g_settings_get_uint64)

;; extern gboolean g_settings_set_uint64(GSettings *settings, const gchar *key
;;     , guint64 value);
(define ~g_settings_set_uint64 #f)
(define (g_settings_set_uint64 settings key value)
  (unless
    ~g_settings_set_uint64
    (set! ~g_settings_set_uint64
      (fh-link-proc
        "g_settings_set_uint64"
        ffi:int
        (list '* '* ffi:unsigned-long))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~value (unwrap~fixed value)))
    (~g_settings_set_uint64 ~settings ~key ~value)))
(export g_settings_set_uint64)

;; extern gchar *g_settings_get_string(GSettings *settings, const gchar *key);
(define ~g_settings_get_string #f)
(define (g_settings_get_string settings key)
  (unless
    ~g_settings_get_string
    (set! ~g_settings_get_string
      (fh-link-proc
        "g_settings_get_string"
        '*
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_string ~settings ~key)))
(export g_settings_get_string)

;; extern gboolean g_settings_set_string(GSettings *settings, const gchar *key
;;     , const gchar *value);
(define ~g_settings_set_string #f)
(define (g_settings_set_string settings key value)
  (unless
    ~g_settings_set_string
    (set! ~g_settings_set_string
      (fh-link-proc
        "g_settings_set_string"
        ffi:int
        (list '* '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~value (unwrap~pointer value)))
    (~g_settings_set_string ~settings ~key ~value)))
(export g_settings_set_string)

;; extern gboolean g_settings_get_boolean(GSettings *settings, const gchar *key
;;     );
(define ~g_settings_get_boolean #f)
(define (g_settings_get_boolean settings key)
  (unless
    ~g_settings_get_boolean
    (set! ~g_settings_get_boolean
      (fh-link-proc
        "g_settings_get_boolean"
        ffi:int
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_boolean ~settings ~key)))
(export g_settings_get_boolean)

;; extern gboolean g_settings_set_boolean(GSettings *settings, const gchar *key
;;     , gboolean value);
(define ~g_settings_set_boolean #f)
(define (g_settings_set_boolean settings key value)
  (unless
    ~g_settings_set_boolean
    (set! ~g_settings_set_boolean
      (fh-link-proc
        "g_settings_set_boolean"
        ffi:int
        (list '* '* ffi:int))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~value (unwrap~fixed value)))
    (~g_settings_set_boolean ~settings ~key ~value)))
(export g_settings_set_boolean)

;; extern gdouble g_settings_get_double(GSettings *settings, const gchar *key)
;;     ;
(define ~g_settings_get_double #f)
(define (g_settings_get_double settings key)
  (unless
    ~g_settings_get_double
    (set! ~g_settings_get_double
      (fh-link-proc
        "g_settings_get_double"
        ffi:double
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (wrap-gdouble
      (~g_settings_get_double ~settings ~key))))
(export g_settings_get_double)

;; extern gboolean g_settings_set_double(GSettings *settings, const gchar *key
;;     , gdouble value);
(define ~g_settings_set_double #f)
(define (g_settings_set_double settings key value)
  (unless
    ~g_settings_set_double
    (set! ~g_settings_set_double
      (fh-link-proc
        "g_settings_set_double"
        ffi:int
        (list '* '* ffi:double))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~value (unwrap-gdouble value)))
    (~g_settings_set_double ~settings ~key ~value)))
(export g_settings_set_double)

;; extern gchar **g_settings_get_strv(GSettings *settings, const gchar *key);
(define ~g_settings_get_strv #f)
(define (g_settings_get_strv settings key)
  (unless
    ~g_settings_get_strv
    (set! ~g_settings_get_strv
      (fh-link-proc
        "g_settings_get_strv"
        '*
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_strv ~settings ~key)))
(export g_settings_get_strv)

;; extern gboolean g_settings_set_strv(GSettings *settings, const gchar *key, 
;;     const gchar *const*value);
(define ~g_settings_set_strv #f)
(define (g_settings_set_strv settings key value)
  (unless
    ~g_settings_set_strv
    (set! ~g_settings_set_strv
      (fh-link-proc
        "g_settings_set_strv"
        ffi:int
        (list '* '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~value (unwrap~pointer value)))
    (~g_settings_set_strv ~settings ~key ~value)))
(export g_settings_set_strv)

;; extern gint g_settings_get_enum(GSettings *settings, const gchar *key);
(define ~g_settings_get_enum #f)
(define (g_settings_get_enum settings key)
  (unless
    ~g_settings_get_enum
    (set! ~g_settings_get_enum
      (fh-link-proc
        "g_settings_get_enum"
        ffi:int
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_enum ~settings ~key)))
(export g_settings_get_enum)

;; extern gboolean g_settings_set_enum(GSettings *settings, const gchar *key, 
;;     gint value);
(define ~g_settings_set_enum #f)
(define (g_settings_set_enum settings key value)
  (unless
    ~g_settings_set_enum
    (set! ~g_settings_set_enum
      (fh-link-proc
        "g_settings_set_enum"
        ffi:int
        (list '* '* ffi:int))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~value (unwrap~fixed value)))
    (~g_settings_set_enum ~settings ~key ~value)))
(export g_settings_set_enum)

;; extern guint g_settings_get_flags(GSettings *settings, const gchar *key);
(define ~g_settings_get_flags #f)
(define (g_settings_get_flags settings key)
  (unless
    ~g_settings_get_flags
    (set! ~g_settings_get_flags
      (fh-link-proc
        "g_settings_get_flags"
        ffi:unsigned-int
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (~g_settings_get_flags ~settings ~key)))
(export g_settings_get_flags)

;; extern gboolean g_settings_set_flags(GSettings *settings, const gchar *key, 
;;     guint value);
(define ~g_settings_set_flags #f)
(define (g_settings_set_flags settings key value)
  (unless
    ~g_settings_set_flags
    (set! ~g_settings_set_flags
      (fh-link-proc
        "g_settings_set_flags"
        ffi:int
        (list '* '* ffi:unsigned-int))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~value (unwrap~fixed value)))
    (~g_settings_set_flags ~settings ~key ~value)))
(export g_settings_set_flags)

;; extern GSettings *g_settings_get_child(GSettings *settings, const gchar *
;;     name);
(define ~g_settings_get_child #f)
(define (g_settings_get_child settings name)
  (unless
    ~g_settings_get_child
    (set! ~g_settings_get_child
      (fh-link-proc
        "g_settings_get_child"
        '*
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~name (unwrap~pointer name)))
    (wrap-GSettings*
      (~g_settings_get_child ~settings ~name))))
(export g_settings_get_child)

;; extern gboolean g_settings_is_writable(GSettings *settings, const gchar *
;;     name);
(define ~g_settings_is_writable #f)
(define (g_settings_is_writable settings name)
  (unless
    ~g_settings_is_writable
    (set! ~g_settings_is_writable
      (fh-link-proc
        "g_settings_is_writable"
        ffi:int
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~name (unwrap~pointer name)))
    (~g_settings_is_writable ~settings ~name)))
(export g_settings_is_writable)

;; extern void g_settings_delay(GSettings *settings);
(define ~g_settings_delay #f)
(define (g_settings_delay settings)
  (unless
    ~g_settings_delay
    (set! ~g_settings_delay
      (fh-link-proc
        "g_settings_delay"
        ffi:void
        (list '*))))
  (let ((~settings (unwrap-GSettings* settings)))
    (~g_settings_delay ~settings)))
(export g_settings_delay)

;; extern void g_settings_apply(GSettings *settings);
(define ~g_settings_apply #f)
(define (g_settings_apply settings)
  (unless
    ~g_settings_apply
    (set! ~g_settings_apply
      (fh-link-proc
        "g_settings_apply"
        ffi:void
        (list '*))))
  (let ((~settings (unwrap-GSettings* settings)))
    (~g_settings_apply ~settings)))
(export g_settings_apply)

;; extern void g_settings_revert(GSettings *settings);
(define ~g_settings_revert #f)
(define (g_settings_revert settings)
  (unless
    ~g_settings_revert
    (set! ~g_settings_revert
      (fh-link-proc
        "g_settings_revert"
        ffi:void
        (list '*))))
  (let ((~settings (unwrap-GSettings* settings)))
    (~g_settings_revert ~settings)))
(export g_settings_revert)

;; extern gboolean g_settings_get_has_unapplied(GSettings *settings);
(define ~g_settings_get_has_unapplied #f)
(define (g_settings_get_has_unapplied settings)
  (unless
    ~g_settings_get_has_unapplied
    (set! ~g_settings_get_has_unapplied
      (fh-link-proc
        "g_settings_get_has_unapplied"
        ffi:int
        (list '*))))
  (let ((~settings (unwrap-GSettings* settings)))
    (~g_settings_get_has_unapplied ~settings)))
(export g_settings_get_has_unapplied)

;; extern void g_settings_sync(void);
(define ~g_settings_sync #f)
(define (g_settings_sync)
  (unless
    ~g_settings_sync
    (set! ~g_settings_sync
      (fh-link-proc "g_settings_sync" ffi:void (list))))
  (let () (~g_settings_sync)))
(export g_settings_sync)

;; typedef GVariant *(*GSettingsBindSetMapping)(const GValue *value, const 
;;     GVariantType *expected_type, gpointer user_data);
(define-fh-function/p
  GSettingsBindSetMapping
  '*
  (list '* '* '*))

;; typedef gboolean (*GSettingsBindGetMapping)(GValue *value, GVariant *variant
;;     , gpointer user_data);
(define-fh-function/p GSettingsBindGetMapping
  ffi:int (list (quote *) (quote *) (quote *)))

;; typedef gboolean (*GSettingsGetMapping)(GVariant *value, gpointer *result, 
;;     gpointer user_data);
(define-fh-function/p GSettingsGetMapping
  ffi:int (list (quote *) (quote *) (quote *)))

;; typedef enum {
;;   G_SETTINGS_BIND_DEFAULT,
;;   G_SETTINGS_BIND_GET = 1<<0,
;;   G_SETTINGS_BIND_SET = 1<<1,
;;   G_SETTINGS_BIND_NO_SENSITIVITY = 1<<2,
;;   G_SETTINGS_BIND_GET_NO_CHANGES = 1<<3,
;;   G_SETTINGS_BIND_INVERT_BOOLEAN = 1<<4,
;; } GSettingsBindFlags;
(define-fh-enum GSettingsBindFlags
  '((G_SETTINGS_BIND_DEFAULT . 0)
    (G_SETTINGS_BIND_GET . 1)
    (G_SETTINGS_BIND_SET . 2)
    (G_SETTINGS_BIND_NO_SENSITIVITY . 4)
    (G_SETTINGS_BIND_GET_NO_CHANGES . 8)
    (G_SETTINGS_BIND_INVERT_BOOLEAN . 16))
  )

;; extern void g_settings_bind(GSettings *settings, const gchar *key, gpointer 
;;     object, const gchar *property, GSettingsBindFlags flags);
(define ~g_settings_bind #f)
(define (g_settings_bind
         settings
         key
         object
         property
         flags)
  (unless
    ~g_settings_bind
    (set! ~g_settings_bind
      (fh-link-proc
        "g_settings_bind"
        ffi:void
        (list '* '* '* '* ffi:int))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~object (unwrap-gpointer object))
        (~property (unwrap~pointer property))
        (~flags (unwrap~fixed flags)))
    (~g_settings_bind
      ~settings
      ~key
      ~object
      ~property
      ~flags)))
(export g_settings_bind)

;; extern void g_settings_bind_with_mapping(GSettings *settings, const gchar *
;;     key, gpointer object, const gchar *property, GSettingsBindFlags flags, 
;;     GSettingsBindGetMapping get_mapping, GSettingsBindSetMapping set_mapping
;;     , gpointer user_data, GDestroyNotify destroy);
(define ~g_settings_bind_with_mapping #f)
(define (g_settings_bind_with_mapping
         settings
         key
         object
         property
         flags
         get_mapping
         set_mapping
         user_data
         destroy)
  (unless
    ~g_settings_bind_with_mapping
    (set! ~g_settings_bind_with_mapping
      (fh-link-proc
        "g_settings_bind_with_mapping"
        ffi:void
        (list '* '* '* '* ffi:int '* '* '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~object (unwrap-gpointer object))
        (~property (unwrap~pointer property))
        (~flags (unwrap~fixed flags))
        (~get_mapping
          ((make-ftn-arg-unwrapper ffi:int (list '* '* '*))
           get_mapping))
        (~set_mapping
          ((make-ftn-arg-unwrapper '* (list '* '* '*))
           set_mapping))
        (~user_data (unwrap-gpointer user_data))
        (~destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy)))
    (~g_settings_bind_with_mapping
      ~settings
      ~key
      ~object
      ~property
      ~flags
      ~get_mapping
      ~set_mapping
      ~user_data
      ~destroy)))
(export g_settings_bind_with_mapping)

;; extern void g_settings_bind_writable(GSettings *settings, const gchar *key, 
;;     gpointer object, const gchar *property, gboolean inverted);
(define ~g_settings_bind_writable #f)
(define (g_settings_bind_writable
         settings
         key
         object
         property
         inverted)
  (unless
    ~g_settings_bind_writable
    (set! ~g_settings_bind_writable
      (fh-link-proc
        "g_settings_bind_writable"
        ffi:void
        (list '* '* '* '* ffi:int))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~object (unwrap-gpointer object))
        (~property (unwrap~pointer property))
        (~inverted (unwrap~fixed inverted)))
    (~g_settings_bind_writable
      ~settings
      ~key
      ~object
      ~property
      ~inverted)))
(export g_settings_bind_writable)

;; extern void g_settings_unbind(gpointer object, const gchar *property);
(define ~g_settings_unbind #f)
(define (g_settings_unbind object property)
  (unless
    ~g_settings_unbind
    (set! ~g_settings_unbind
      (fh-link-proc
        "g_settings_unbind"
        ffi:void
        (list '* '*))))
  (let ((~object (unwrap-gpointer object))
        (~property (unwrap~pointer property)))
    (~g_settings_unbind ~object ~property)))
(export g_settings_unbind)

;; extern GAction *g_settings_create_action(GSettings *settings, const gchar *
;;     key);
(define ~g_settings_create_action #f)
(define (g_settings_create_action settings key)
  (unless
    ~g_settings_create_action
    (set! ~g_settings_create_action
      (fh-link-proc
        "g_settings_create_action"
        '*
        (list '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key)))
    (wrap-GAction*
      (~g_settings_create_action ~settings ~key))))
(export g_settings_create_action)

;; extern gpointer g_settings_get_mapped(GSettings *settings, const gchar *key
;;     , GSettingsGetMapping mapping, gpointer user_data);
(define ~g_settings_get_mapped #f)
(define (g_settings_get_mapped
         settings
         key
         mapping
         user_data)
  (unless
    ~g_settings_get_mapped
    (set! ~g_settings_get_mapped
      (fh-link-proc
        "g_settings_get_mapped"
        '*
        (list '* '* '* '*))))
  (let ((~settings (unwrap-GSettings* settings))
        (~key (unwrap~pointer key))
        (~mapping
          ((make-ftn-arg-unwrapper ffi:int (list '* '* '*))
           mapping))
        (~user_data (unwrap-gpointer user_data)))
    (wrap-gpointer
      (~g_settings_get_mapped
        ~settings
        ~key
        ~mapping
        ~user_data))))
(export g_settings_get_mapped)

;; extern GType g_simple_action_get_type(void);
(define ~g_simple_action_get_type #f)
(define (g_simple_action_get_type)
  (unless
    ~g_simple_action_get_type
    (set! ~g_simple_action_get_type
      (fh-link-proc
        "g_simple_action_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_simple_action_get_type)))
(export g_simple_action_get_type)

;; extern GSimpleAction *g_simple_action_new(const gchar *name, const 
;;     GVariantType *parameter_type);
(define ~g_simple_action_new #f)
(define (g_simple_action_new name parameter_type)
  (unless
    ~g_simple_action_new
    (set! ~g_simple_action_new
      (fh-link-proc
        "g_simple_action_new"
        '*
        (list '* '*))))
  (let ((~name (unwrap~pointer name)))
    (wrap-GSimpleAction*
      (~g_simple_action_new ~name parameter_type))))
(export g_simple_action_new)

;; extern GSimpleAction *g_simple_action_new_stateful(const gchar *name, const 
;;     GVariantType *parameter_type, GVariant *state);
(define ~g_simple_action_new_stateful #f)
(define (g_simple_action_new_stateful
         name
         parameter_type
         state)
  (unless
    ~g_simple_action_new_stateful
    (set! ~g_simple_action_new_stateful
      (fh-link-proc
        "g_simple_action_new_stateful"
        '*
        (list '* '* '*))))
  (let ((~name (unwrap~pointer name)))
    (wrap-GSimpleAction*
      (~g_simple_action_new_stateful
        ~name
        parameter_type
        state))))
(export g_simple_action_new_stateful)

;; extern void g_simple_action_set_enabled(GSimpleAction *simple, gboolean 
;;     enabled);
(define ~g_simple_action_set_enabled #f)
(define (g_simple_action_set_enabled simple enabled)
  (unless
    ~g_simple_action_set_enabled
    (set! ~g_simple_action_set_enabled
      (fh-link-proc
        "g_simple_action_set_enabled"
        ffi:void
        (list '* ffi:int))))
  (let ((~simple (unwrap-GSimpleAction* simple))
        (~enabled (unwrap~fixed enabled)))
    (~g_simple_action_set_enabled ~simple ~enabled)))
(export g_simple_action_set_enabled)

;; extern void g_simple_action_set_state(GSimpleAction *simple, GVariant *value
;;     );
(define ~g_simple_action_set_state #f)
(define (g_simple_action_set_state simple value)
  (unless
    ~g_simple_action_set_state
    (set! ~g_simple_action_set_state
      (fh-link-proc
        "g_simple_action_set_state"
        ffi:void
        (list '* '*))))
  (let ((~simple (unwrap-GSimpleAction* simple)))
    (~g_simple_action_set_state ~simple value)))
(export g_simple_action_set_state)

;; extern void g_simple_action_set_state_hint(GSimpleAction *simple, GVariant *
;;     state_hint);
(define ~g_simple_action_set_state_hint #f)
(define (g_simple_action_set_state_hint
         simple
         state_hint)
  (unless
    ~g_simple_action_set_state_hint
    (set! ~g_simple_action_set_state_hint
      (fh-link-proc
        "g_simple_action_set_state_hint"
        ffi:void
        (list '* '*))))
  (let ((~simple (unwrap-GSimpleAction* simple)))
    (~g_simple_action_set_state_hint
      ~simple
      state_hint)))
(export g_simple_action_set_state_hint)

;; typedef struct _GSimpleActionGroupPrivate GSimpleActionGroupPrivate;
(define GSimpleActionGroupPrivate-desc void)
(export GSimpleActionGroupPrivate-desc)
(define GSimpleActionGroupPrivate*-desc (bs:pointer GSimpleActionGroupPrivate-desc))
(export GSimpleActionGroupPrivate*-desc)
(define-fh-pointer-type GSimpleActionGroupPrivate* GSimpleActionGroupPrivate*-desc)

;; typedef struct _GSimpleActionGroupClass GSimpleActionGroupClass;
(define GSimpleActionGroupClass-desc void)
(export GSimpleActionGroupClass-desc)
(define GSimpleActionGroupClass*-desc (bs:pointer (delay GSimpleActionGroupClass-desc)))
(export GSimpleActionGroupClass*-desc)
(define-fh-pointer-type GSimpleActionGroupClass* GSimpleActionGroupClass*-desc)

;; struct _GSimpleActionGroup {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GSimpleActionGroupPrivate *priv;
;; };
(define struct-_GSimpleActionGroup-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GSimpleActionGroupPrivate*-desc))))))
(export struct-_GSimpleActionGroup-desc)
(define-fh-compound-type/p struct-_GSimpleActionGroup struct-_GSimpleActionGroup-desc)
(set! GSimpleActionGroup-desc struct-_GSimpleActionGroup-desc)
(define-fh-compound-type GSimpleActionGroup GSimpleActionGroup-desc)

;; struct _GSimpleActionGroupClass {
;;   /*< private >*/
;;   GObjectClass parent_class;
;;   /*< private >*/
;;   gpointer padding[12];
;; };
(define struct-_GSimpleActionGroupClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(padding ,(bs:vector 12 gpointer-desc)))))
(export struct-_GSimpleActionGroupClass-desc)
(define-fh-compound-type/p struct-_GSimpleActionGroupClass struct-_GSimpleActionGroupClass-desc)
(set! GSimpleActionGroupClass-desc struct-_GSimpleActionGroupClass-desc)
(define-fh-compound-type GSimpleActionGroupClass GSimpleActionGroupClass-desc)

;; extern GType g_simple_action_group_get_type(void);
(define ~g_simple_action_group_get_type #f)
(define (g_simple_action_group_get_type)
  (unless
    ~g_simple_action_group_get_type
    (set! ~g_simple_action_group_get_type
      (fh-link-proc
        "g_simple_action_group_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_simple_action_group_get_type)))
(export g_simple_action_group_get_type)

;; extern GSimpleActionGroup *g_simple_action_group_new(void);
(define ~g_simple_action_group_new #f)
(define (g_simple_action_group_new)
  (unless
    ~g_simple_action_group_new
    (set! ~g_simple_action_group_new
      (fh-link-proc
        "g_simple_action_group_new"
        '*
        (list))))
  (let ()
    (wrap-GSimpleActionGroup*
      (~g_simple_action_group_new))))
(export g_simple_action_group_new)

;; extern GAction *g_simple_action_group_lookup(GSimpleActionGroup *simple, 
;;     const gchar *action_name);
(define ~g_simple_action_group_lookup #f)
(define (g_simple_action_group_lookup simple action_name)
  (unless
    ~g_simple_action_group_lookup
    (set! ~g_simple_action_group_lookup
      (fh-link-proc
        "g_simple_action_group_lookup"
        '*
        (list '* '*))))
  (let ((~simple (unwrap-GSimpleActionGroup* simple))
        (~action_name (unwrap~pointer action_name)))
    (wrap-GAction*
      (~g_simple_action_group_lookup
        ~simple
        ~action_name))))
(export g_simple_action_group_lookup)

;; extern void g_simple_action_group_insert(GSimpleActionGroup *simple, GAction
;;      *action);
(define ~g_simple_action_group_insert #f)
(define (g_simple_action_group_insert simple action)
  (unless
    ~g_simple_action_group_insert
    (set! ~g_simple_action_group_insert
      (fh-link-proc
        "g_simple_action_group_insert"
        ffi:void
        (list '* '*))))
  (let ((~simple (unwrap-GSimpleActionGroup* simple))
        (~action (unwrap-GAction* action)))
    (~g_simple_action_group_insert ~simple ~action)))
(export g_simple_action_group_insert)

;; extern void g_simple_action_group_remove(GSimpleActionGroup *simple, const 
;;     gchar *action_name);
(define ~g_simple_action_group_remove #f)
(define (g_simple_action_group_remove simple action_name)
  (unless
    ~g_simple_action_group_remove
    (set! ~g_simple_action_group_remove
      (fh-link-proc
        "g_simple_action_group_remove"
        ffi:void
        (list '* '*))))
  (let ((~simple (unwrap-GSimpleActionGroup* simple))
        (~action_name (unwrap~pointer action_name)))
    (~g_simple_action_group_remove
      ~simple
      ~action_name)))
(export g_simple_action_group_remove)

;; extern void g_simple_action_group_add_entries(GSimpleActionGroup *simple, 
;;     const GActionEntry *entries, gint n_entries, gpointer user_data);
(define ~g_simple_action_group_add_entries #f)
(define (g_simple_action_group_add_entries
         simple
         entries
         n_entries
         user_data)
  (unless
    ~g_simple_action_group_add_entries
    (set! ~g_simple_action_group_add_entries
      (fh-link-proc
        "g_simple_action_group_add_entries"
        ffi:void
        (list '* '* ffi:int '*))))
  (let ((~simple (unwrap-GSimpleActionGroup* simple))
        (~entries (unwrap-GActionEntry* entries))
        (~n_entries (unwrap~fixed n_entries))
        (~user_data (unwrap-gpointer user_data)))
    (~g_simple_action_group_add_entries
      ~simple
      ~entries
      ~n_entries
      ~user_data)))
(export g_simple_action_group_add_entries)

;; typedef struct _GSimpleAsyncResultClass GSimpleAsyncResultClass;
(define GSimpleAsyncResultClass-desc void)
(export GSimpleAsyncResultClass-desc)
(define GSimpleAsyncResultClass*-desc (bs:pointer GSimpleAsyncResultClass-desc))
(export GSimpleAsyncResultClass*-desc)
(define-fh-pointer-type GSimpleAsyncResultClass* GSimpleAsyncResultClass*-desc)

;; extern GType g_simple_async_result_get_type(void);
(define ~g_simple_async_result_get_type #f)
(define (g_simple_async_result_get_type)
  (unless
    ~g_simple_async_result_get_type
    (set! ~g_simple_async_result_get_type
      (fh-link-proc
        "g_simple_async_result_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_simple_async_result_get_type)))
(export g_simple_async_result_get_type)

;; extern GSimpleAsyncResult *g_simple_async_result_new(GObject *source_object
;;     , GAsyncReadyCallback callback, gpointer user_data, gpointer source_tag)
;;     ;
(define ~g_simple_async_result_new #f)
(define (g_simple_async_result_new
         source_object
         callback
         user_data
         source_tag)
  (unless
    ~g_simple_async_result_new
    (set! ~g_simple_async_result_new
      (fh-link-proc
        "g_simple_async_result_new"
        '*
        (list '* '* '* '*))))
  (let ((~source_object (unwrap~pointer source_object))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data))
        (~source_tag (unwrap-gpointer source_tag)))
    (wrap-GSimpleAsyncResult*
      (~g_simple_async_result_new
        ~source_object
        ~callback
        ~user_data
        ~source_tag))))
(export g_simple_async_result_new)

;; extern GSimpleAsyncResult *g_simple_async_result_new_error(GObject *
;;     source_object, GAsyncReadyCallback callback, gpointer user_data, GQuark 
;;     domain, gint code, const char *format, ...);
;; ... failed.

;; extern GSimpleAsyncResult *g_simple_async_result_new_from_error(GObject *
;;     source_object, GAsyncReadyCallback callback, gpointer user_data, const 
;;     GError *error);
(define ~g_simple_async_result_new_from_error #f)
(define (g_simple_async_result_new_from_error
         source_object
         callback
         user_data
         error)
  (unless
    ~g_simple_async_result_new_from_error
    (set! ~g_simple_async_result_new_from_error
      (fh-link-proc
        "g_simple_async_result_new_from_error"
        '*
        (list '* '* '* '*))))
  (let ((~source_object (unwrap~pointer source_object))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (wrap-GSimpleAsyncResult*
      (~g_simple_async_result_new_from_error
        ~source_object
        ~callback
        ~user_data
        error))))
(export g_simple_async_result_new_from_error)

;; extern GSimpleAsyncResult *g_simple_async_result_new_take_error(GObject *
;;     source_object, GAsyncReadyCallback callback, gpointer user_data, GError 
;;     *error);
(define ~g_simple_async_result_new_take_error #f)
(define (g_simple_async_result_new_take_error
         source_object
         callback
         user_data
         error)
  (unless
    ~g_simple_async_result_new_take_error
    (set! ~g_simple_async_result_new_take_error
      (fh-link-proc
        "g_simple_async_result_new_take_error"
        '*
        (list '* '* '* '*))))
  (let ((~source_object (unwrap~pointer source_object))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (wrap-GSimpleAsyncResult*
      (~g_simple_async_result_new_take_error
        ~source_object
        ~callback
        ~user_data
        error))))
(export g_simple_async_result_new_take_error)

;; extern void g_simple_async_result_set_op_res_gpointer(GSimpleAsyncResult *
;;     simple, gpointer op_res, GDestroyNotify destroy_op_res);
(define ~g_simple_async_result_set_op_res_gpointer #f)
(define (g_simple_async_result_set_op_res_gpointer
         simple
         op_res
         destroy_op_res)
  (unless
    ~g_simple_async_result_set_op_res_gpointer
    (set! ~g_simple_async_result_set_op_res_gpointer
      (fh-link-proc
        "g_simple_async_result_set_op_res_gpointer"
        ffi:void
        (list '* '* '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple))
        (~op_res (unwrap-gpointer op_res))
        (~destroy_op_res
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy_op_res)))
    (~g_simple_async_result_set_op_res_gpointer
      ~simple
      ~op_res
      ~destroy_op_res)))
(export g_simple_async_result_set_op_res_gpointer)

;; extern gpointer g_simple_async_result_get_op_res_gpointer(GSimpleAsyncResult
;;      *simple);
(define ~g_simple_async_result_get_op_res_gpointer #f)
(define (g_simple_async_result_get_op_res_gpointer
         simple)
  (unless
    ~g_simple_async_result_get_op_res_gpointer
    (set! ~g_simple_async_result_get_op_res_gpointer
      (fh-link-proc
        "g_simple_async_result_get_op_res_gpointer"
        '*
        (list '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple)))
    (wrap-gpointer
      (~g_simple_async_result_get_op_res_gpointer
        ~simple))))
(export g_simple_async_result_get_op_res_gpointer)

;; extern void g_simple_async_result_set_op_res_gssize(GSimpleAsyncResult *
;;     simple, gssize op_res);
(define ~g_simple_async_result_set_op_res_gssize #f)
(define (g_simple_async_result_set_op_res_gssize
         simple
         op_res)
  (unless
    ~g_simple_async_result_set_op_res_gssize
    (set! ~g_simple_async_result_set_op_res_gssize
      (fh-link-proc
        "g_simple_async_result_set_op_res_gssize"
        ffi:void
        (list '* ffi:long))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple))
        (~op_res (unwrap~fixed op_res)))
    (~g_simple_async_result_set_op_res_gssize
      ~simple
      ~op_res)))
(export g_simple_async_result_set_op_res_gssize)

;; extern gssize g_simple_async_result_get_op_res_gssize(GSimpleAsyncResult *
;;     simple);
(define ~g_simple_async_result_get_op_res_gssize #f)
(define (g_simple_async_result_get_op_res_gssize simple)
  (unless
    ~g_simple_async_result_get_op_res_gssize
    (set! ~g_simple_async_result_get_op_res_gssize
      (fh-link-proc
        "g_simple_async_result_get_op_res_gssize"
        ffi:long
        (list '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple)))
    (~g_simple_async_result_get_op_res_gssize
      ~simple)))
(export g_simple_async_result_get_op_res_gssize)

;; extern void g_simple_async_result_set_op_res_gboolean(GSimpleAsyncResult *
;;     simple, gboolean op_res);
(define ~g_simple_async_result_set_op_res_gboolean #f)
(define (g_simple_async_result_set_op_res_gboolean
         simple
         op_res)
  (unless
    ~g_simple_async_result_set_op_res_gboolean
    (set! ~g_simple_async_result_set_op_res_gboolean
      (fh-link-proc
        "g_simple_async_result_set_op_res_gboolean"
        ffi:void
        (list '* ffi:int))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple))
        (~op_res (unwrap~fixed op_res)))
    (~g_simple_async_result_set_op_res_gboolean
      ~simple
      ~op_res)))
(export g_simple_async_result_set_op_res_gboolean)

;; extern gboolean g_simple_async_result_get_op_res_gboolean(GSimpleAsyncResult
;;      *simple);
(define ~g_simple_async_result_get_op_res_gboolean #f)
(define (g_simple_async_result_get_op_res_gboolean
         simple)
  (unless
    ~g_simple_async_result_get_op_res_gboolean
    (set! ~g_simple_async_result_get_op_res_gboolean
      (fh-link-proc
        "g_simple_async_result_get_op_res_gboolean"
        ffi:int
        (list '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple)))
    (~g_simple_async_result_get_op_res_gboolean
      ~simple)))
(export g_simple_async_result_get_op_res_gboolean)

;; extern void g_simple_async_result_set_check_cancellable(GSimpleAsyncResult *
;;     simple, GCancellable *check_cancellable);
(define ~g_simple_async_result_set_check_cancellable #f)
(define (g_simple_async_result_set_check_cancellable
         simple
         check_cancellable)
  (unless
    ~g_simple_async_result_set_check_cancellable
    (set! ~g_simple_async_result_set_check_cancellable
      (fh-link-proc
        "g_simple_async_result_set_check_cancellable"
        ffi:void
        (list '* '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple))
        (~check_cancellable
          (unwrap-GCancellable* check_cancellable)))
    (~g_simple_async_result_set_check_cancellable
      ~simple
      ~check_cancellable)))
(export g_simple_async_result_set_check_cancellable)

;; extern gpointer g_simple_async_result_get_source_tag(GSimpleAsyncResult *
;;     simple);
(define ~g_simple_async_result_get_source_tag #f)
(define (g_simple_async_result_get_source_tag simple)
  (unless
    ~g_simple_async_result_get_source_tag
    (set! ~g_simple_async_result_get_source_tag
      (fh-link-proc
        "g_simple_async_result_get_source_tag"
        '*
        (list '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple)))
    (wrap-gpointer
      (~g_simple_async_result_get_source_tag ~simple))))
(export g_simple_async_result_get_source_tag)

;; extern void g_simple_async_result_set_handle_cancellation(GSimpleAsyncResult
;;      *simple, gboolean handle_cancellation);
(define ~g_simple_async_result_set_handle_cancellation #f)
(define (g_simple_async_result_set_handle_cancellation
         simple
         handle_cancellation)
  (unless
    ~g_simple_async_result_set_handle_cancellation
    (set! ~g_simple_async_result_set_handle_cancellation
      (fh-link-proc
        "g_simple_async_result_set_handle_cancellation"
        ffi:void
        (list '* ffi:int))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple))
        (~handle_cancellation
          (unwrap~fixed handle_cancellation)))
    (~g_simple_async_result_set_handle_cancellation
      ~simple
      ~handle_cancellation)))
(export g_simple_async_result_set_handle_cancellation)

;; extern void g_simple_async_result_complete(GSimpleAsyncResult *simple);
(define ~g_simple_async_result_complete #f)
(define (g_simple_async_result_complete simple)
  (unless
    ~g_simple_async_result_complete
    (set! ~g_simple_async_result_complete
      (fh-link-proc
        "g_simple_async_result_complete"
        ffi:void
        (list '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple)))
    (~g_simple_async_result_complete ~simple)))
(export g_simple_async_result_complete)

;; extern void g_simple_async_result_complete_in_idle(GSimpleAsyncResult *
;;     simple);
(define ~g_simple_async_result_complete_in_idle #f)
(define (g_simple_async_result_complete_in_idle simple)
  (unless
    ~g_simple_async_result_complete_in_idle
    (set! ~g_simple_async_result_complete_in_idle
      (fh-link-proc
        "g_simple_async_result_complete_in_idle"
        ffi:void
        (list '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple)))
    (~g_simple_async_result_complete_in_idle ~simple)))
(export g_simple_async_result_complete_in_idle)

;; extern void g_simple_async_result_run_in_thread(GSimpleAsyncResult *simple, 
;;     GSimpleAsyncThreadFunc func, int io_priority, GCancellable *cancellable)
;;     ;
(define ~g_simple_async_result_run_in_thread #f)
(define (g_simple_async_result_run_in_thread
         simple
         func
         io_priority
         cancellable)
  (unless
    ~g_simple_async_result_run_in_thread
    (set! ~g_simple_async_result_run_in_thread
      (fh-link-proc
        "g_simple_async_result_run_in_thread"
        ffi:void
        (list '* '* ffi:int '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple))
        (~func ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
                func))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable)))
    (~g_simple_async_result_run_in_thread
      ~simple
      ~func
      ~io_priority
      ~cancellable)))
(export g_simple_async_result_run_in_thread)

;; extern void g_simple_async_result_set_from_error(GSimpleAsyncResult *simple
;;     , const GError *error);
(define ~g_simple_async_result_set_from_error #f)
(define (g_simple_async_result_set_from_error
         simple
         error)
  (unless
    ~g_simple_async_result_set_from_error
    (set! ~g_simple_async_result_set_from_error
      (fh-link-proc
        "g_simple_async_result_set_from_error"
        ffi:void
        (list '* '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple)))
    (~g_simple_async_result_set_from_error
      ~simple
      error)))
(export g_simple_async_result_set_from_error)

;; extern void g_simple_async_result_take_error(GSimpleAsyncResult *simple, 
;;     GError *error);
(define ~g_simple_async_result_take_error #f)
(define (g_simple_async_result_take_error simple error)
  (unless
    ~g_simple_async_result_take_error
    (set! ~g_simple_async_result_take_error
      (fh-link-proc
        "g_simple_async_result_take_error"
        ffi:void
        (list '* '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple)))
    (~g_simple_async_result_take_error ~simple error)))
(export g_simple_async_result_take_error)

;; extern gboolean g_simple_async_result_propagate_error(GSimpleAsyncResult *
;;     simple, GError **dest);
(define ~g_simple_async_result_propagate_error #f)
(define (g_simple_async_result_propagate_error
         simple
         dest)
  (unless
    ~g_simple_async_result_propagate_error
    (set! ~g_simple_async_result_propagate_error
      (fh-link-proc
        "g_simple_async_result_propagate_error"
        ffi:int
        (list '* '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple))
        (~dest (unwrap~pointer dest)))
    (~g_simple_async_result_propagate_error
      ~simple
      ~dest)))
(export g_simple_async_result_propagate_error)

;; extern void g_simple_async_result_set_error(GSimpleAsyncResult *simple, 
;;     GQuark domain, gint code, const char *format, ...);
;; ... failed.

;; extern void g_simple_async_result_set_error_va(GSimpleAsyncResult *simple, 
;;     GQuark domain, gint code, const char *format, va_list args);
(define ~g_simple_async_result_set_error_va #f)
(define (g_simple_async_result_set_error_va
         simple
         domain
         code
         format
         args)
  (unless
    ~g_simple_async_result_set_error_va
    (set! ~g_simple_async_result_set_error_va
      (fh-link-proc
        "g_simple_async_result_set_error_va"
        ffi:void
        (list '* ffi:unsigned-int ffi:int '* '*))))
  (let ((~simple (unwrap-GSimpleAsyncResult* simple))
        (~domain (unwrap~fixed domain))
        (~code (unwrap~fixed code))
        (~format (unwrap~pointer format))
        (~args (unwrap~pointer args)))
    (~g_simple_async_result_set_error_va
      ~simple
      ~domain
      ~code
      ~format
      ~args)))
(export g_simple_async_result_set_error_va)

;; extern gboolean g_simple_async_result_is_valid(GAsyncResult *result, GObject
;;      *source, gpointer source_tag);
(define ~g_simple_async_result_is_valid #f)
(define (g_simple_async_result_is_valid
         result
         source
         source_tag)
  (unless
    ~g_simple_async_result_is_valid
    (set! ~g_simple_async_result_is_valid
      (fh-link-proc
        "g_simple_async_result_is_valid"
        ffi:int
        (list '* '* '*))))
  (let ((~result (unwrap-GAsyncResult* result))
        (~source (unwrap~pointer source))
        (~source_tag (unwrap-gpointer source_tag)))
    (~g_simple_async_result_is_valid
      ~result
      ~source
      ~source_tag)))
(export g_simple_async_result_is_valid)

;; extern void g_simple_async_report_error_in_idle(GObject *object, 
;;     GAsyncReadyCallback callback, gpointer user_data, GQuark domain, gint 
;;     code, const char *format, ...);
;; ... failed.

;; extern void g_simple_async_report_gerror_in_idle(GObject *object, 
;;     GAsyncReadyCallback callback, gpointer user_data, const GError *error);
(define ~g_simple_async_report_gerror_in_idle #f)
(define (g_simple_async_report_gerror_in_idle
         object
         callback
         user_data
         error)
  (unless
    ~g_simple_async_report_gerror_in_idle
    (set! ~g_simple_async_report_gerror_in_idle
      (fh-link-proc
        "g_simple_async_report_gerror_in_idle"
        ffi:void
        (list '* '* '* '*))))
  (let ((~object (unwrap~pointer object))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_simple_async_report_gerror_in_idle
      ~object
      ~callback
      ~user_data
      error)))
(export g_simple_async_report_gerror_in_idle)

;; extern void g_simple_async_report_take_gerror_in_idle(GObject *object, 
;;     GAsyncReadyCallback callback, gpointer user_data, GError *error);
(define ~g_simple_async_report_take_gerror_in_idle #f)
(define (g_simple_async_report_take_gerror_in_idle
         object
         callback
         user_data
         error)
  (unless
    ~g_simple_async_report_take_gerror_in_idle
    (set! ~g_simple_async_report_take_gerror_in_idle
      (fh-link-proc
        "g_simple_async_report_take_gerror_in_idle"
        ffi:void
        (list '* '* '* '*))))
  (let ((~object (unwrap~pointer object))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_simple_async_report_take_gerror_in_idle
      ~object
      ~callback
      ~user_data
      error)))
(export g_simple_async_report_take_gerror_in_idle)

;; extern GType g_simple_io_stream_get_type(void);
(define ~g_simple_io_stream_get_type #f)
(define (g_simple_io_stream_get_type)
  (unless
    ~g_simple_io_stream_get_type
    (set! ~g_simple_io_stream_get_type
      (fh-link-proc
        "g_simple_io_stream_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_simple_io_stream_get_type)))
(export g_simple_io_stream_get_type)

;; extern GIOStream *g_simple_io_stream_new(GInputStream *input_stream, 
;;     GOutputStream *output_stream);
(define ~g_simple_io_stream_new #f)
(define (g_simple_io_stream_new
         input_stream
         output_stream)
  (unless
    ~g_simple_io_stream_new
    (set! ~g_simple_io_stream_new
      (fh-link-proc
        "g_simple_io_stream_new"
        '*
        (list '* '*))))
  (let ((~input_stream
          (unwrap-GInputStream* input_stream))
        (~output_stream
          (unwrap-GOutputStream* output_stream)))
    (wrap-GIOStream*
      (~g_simple_io_stream_new
        ~input_stream
        ~output_stream))))
(export g_simple_io_stream_new)

;; extern GType g_simple_permission_get_type(void);
(define ~g_simple_permission_get_type #f)
(define (g_simple_permission_get_type)
  (unless
    ~g_simple_permission_get_type
    (set! ~g_simple_permission_get_type
      (fh-link-proc
        "g_simple_permission_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_simple_permission_get_type)))
(export g_simple_permission_get_type)

;; extern GPermission *g_simple_permission_new(gboolean allowed);
(define ~g_simple_permission_new #f)
(define (g_simple_permission_new allowed)
  (unless
    ~g_simple_permission_new
    (set! ~g_simple_permission_new
      (fh-link-proc
        "g_simple_permission_new"
        '*
        (list ffi:int))))
  (let ((~allowed (unwrap~fixed allowed)))
    (wrap-GPermission*
      (~g_simple_permission_new ~allowed))))
(export g_simple_permission_new)

;; typedef struct _GSocketClientPrivate GSocketClientPrivate;
(define GSocketClientPrivate-desc void)
(export GSocketClientPrivate-desc)
(define GSocketClientPrivate*-desc (bs:pointer GSocketClientPrivate-desc))
(export GSocketClientPrivate*-desc)
(define-fh-pointer-type GSocketClientPrivate* GSocketClientPrivate*-desc)

;; typedef struct _GSocketClientClass GSocketClientClass;
(define GSocketClientClass-desc void)
(export GSocketClientClass-desc)
(define GSocketClientClass*-desc (bs:pointer (delay GSocketClientClass-desc)))
(export GSocketClientClass*-desc)
(define-fh-pointer-type GSocketClientClass* GSocketClientClass*-desc)

;; struct _GSocketClientClass {
;;   GObjectClass parent_class;
;;   void (*event)(GSocketClient *client, GSocketClientEvent event, 
;;       GSocketConnectable *connectable, GIOStream *connection);
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;; };
(define struct-_GSocketClientClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(event ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void)))))
(export struct-_GSocketClientClass-desc)
(define-fh-compound-type/p struct-_GSocketClientClass struct-_GSocketClientClass-desc)
(set! GSocketClientClass-desc struct-_GSocketClientClass-desc)
(define-fh-compound-type GSocketClientClass GSocketClientClass-desc)

;; struct _GSocketClient {
;;   GObject parent_instance;
;;   GSocketClientPrivate *priv;
;; };
(define struct-_GSocketClient-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GSocketClientPrivate*-desc))))))
(export struct-_GSocketClient-desc)
(define-fh-compound-type/p struct-_GSocketClient struct-_GSocketClient-desc)
(set! GSocketClient-desc struct-_GSocketClient-desc)
(define-fh-compound-type GSocketClient GSocketClient-desc)

;; extern GType g_socket_client_get_type(void);
(define ~g_socket_client_get_type #f)
(define (g_socket_client_get_type)
  (unless
    ~g_socket_client_get_type
    (set! ~g_socket_client_get_type
      (fh-link-proc
        "g_socket_client_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_client_get_type)))
(export g_socket_client_get_type)

;; extern GSocketClient *g_socket_client_new(void);
(define ~g_socket_client_new #f)
(define (g_socket_client_new)
  (unless
    ~g_socket_client_new
    (set! ~g_socket_client_new
      (fh-link-proc "g_socket_client_new" '* (list))))
  (let ()
    (wrap-GSocketClient* (~g_socket_client_new))))
(export g_socket_client_new)

;; extern GSocketFamily g_socket_client_get_family(GSocketClient *client);
(define ~g_socket_client_get_family #f)
(define (g_socket_client_get_family client)
  (unless
    ~g_socket_client_get_family
    (set! ~g_socket_client_get_family
      (fh-link-proc
        "g_socket_client_get_family"
        ffi:int
        (list '*))))
  (let ((~client (unwrap-GSocketClient* client)))
    (~g_socket_client_get_family ~client)))
(export g_socket_client_get_family)

;; extern void g_socket_client_set_family(GSocketClient *client, GSocketFamily 
;;     family);
(define ~g_socket_client_set_family #f)
(define (g_socket_client_set_family client family)
  (unless
    ~g_socket_client_set_family
    (set! ~g_socket_client_set_family
      (fh-link-proc
        "g_socket_client_set_family"
        ffi:void
        (list '* ffi:int))))
  (let ((~client (unwrap-GSocketClient* client))
        (~family (unwrap~fixed family)))
    (~g_socket_client_set_family ~client ~family)))
(export g_socket_client_set_family)

;; extern GSocketType g_socket_client_get_socket_type(GSocketClient *client);
(define ~g_socket_client_get_socket_type #f)
(define (g_socket_client_get_socket_type client)
  (unless
    ~g_socket_client_get_socket_type
    (set! ~g_socket_client_get_socket_type
      (fh-link-proc
        "g_socket_client_get_socket_type"
        ffi:int
        (list '*))))
  (let ((~client (unwrap-GSocketClient* client)))
    (~g_socket_client_get_socket_type ~client)))
(export g_socket_client_get_socket_type)

;; extern void g_socket_client_set_socket_type(GSocketClient *client, 
;;     GSocketType type);
(define ~g_socket_client_set_socket_type #f)
(define (g_socket_client_set_socket_type client type)
  (unless
    ~g_socket_client_set_socket_type
    (set! ~g_socket_client_set_socket_type
      (fh-link-proc
        "g_socket_client_set_socket_type"
        ffi:void
        (list '* ffi:int))))
  (let ((~client (unwrap-GSocketClient* client))
        (~type (unwrap~fixed type)))
    (~g_socket_client_set_socket_type ~client ~type)))
(export g_socket_client_set_socket_type)

;; extern GSocketProtocol g_socket_client_get_protocol(GSocketClient *client);
(define ~g_socket_client_get_protocol #f)
(define (g_socket_client_get_protocol client)
  (unless
    ~g_socket_client_get_protocol
    (set! ~g_socket_client_get_protocol
      (fh-link-proc
        "g_socket_client_get_protocol"
        ffi:int
        (list '*))))
  (let ((~client (unwrap-GSocketClient* client)))
    (~g_socket_client_get_protocol ~client)))
(export g_socket_client_get_protocol)

;; extern void g_socket_client_set_protocol(GSocketClient *client, 
;;     GSocketProtocol protocol);
(define ~g_socket_client_set_protocol #f)
(define (g_socket_client_set_protocol client protocol)
  (unless
    ~g_socket_client_set_protocol
    (set! ~g_socket_client_set_protocol
      (fh-link-proc
        "g_socket_client_set_protocol"
        ffi:void
        (list '* ffi:int))))
  (let ((~client (unwrap-GSocketClient* client))
        (~protocol (unwrap~fixed protocol)))
    (~g_socket_client_set_protocol ~client ~protocol)))
(export g_socket_client_set_protocol)

;; extern GSocketAddress *g_socket_client_get_local_address(GSocketClient *
;;     client);
(define ~g_socket_client_get_local_address #f)
(define (g_socket_client_get_local_address client)
  (unless
    ~g_socket_client_get_local_address
    (set! ~g_socket_client_get_local_address
      (fh-link-proc
        "g_socket_client_get_local_address"
        '*
        (list '*))))
  (let ((~client (unwrap-GSocketClient* client)))
    (wrap-GSocketAddress*
      (~g_socket_client_get_local_address ~client))))
(export g_socket_client_get_local_address)

;; extern void g_socket_client_set_local_address(GSocketClient *client, 
;;     GSocketAddress *address);
(define ~g_socket_client_set_local_address #f)
(define (g_socket_client_set_local_address
         client
         address)
  (unless
    ~g_socket_client_set_local_address
    (set! ~g_socket_client_set_local_address
      (fh-link-proc
        "g_socket_client_set_local_address"
        ffi:void
        (list '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~address (unwrap-GSocketAddress* address)))
    (~g_socket_client_set_local_address
      ~client
      ~address)))
(export g_socket_client_set_local_address)

;; extern guint g_socket_client_get_timeout(GSocketClient *client);
(define ~g_socket_client_get_timeout #f)
(define (g_socket_client_get_timeout client)
  (unless
    ~g_socket_client_get_timeout
    (set! ~g_socket_client_get_timeout
      (fh-link-proc
        "g_socket_client_get_timeout"
        ffi:unsigned-int
        (list '*))))
  (let ((~client (unwrap-GSocketClient* client)))
    (~g_socket_client_get_timeout ~client)))
(export g_socket_client_get_timeout)

;; extern void g_socket_client_set_timeout(GSocketClient *client, guint timeout
;;     );
(define ~g_socket_client_set_timeout #f)
(define (g_socket_client_set_timeout client timeout)
  (unless
    ~g_socket_client_set_timeout
    (set! ~g_socket_client_set_timeout
      (fh-link-proc
        "g_socket_client_set_timeout"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~client (unwrap-GSocketClient* client))
        (~timeout (unwrap~fixed timeout)))
    (~g_socket_client_set_timeout ~client ~timeout)))
(export g_socket_client_set_timeout)

;; extern gboolean g_socket_client_get_enable_proxy(GSocketClient *client);
(define ~g_socket_client_get_enable_proxy #f)
(define (g_socket_client_get_enable_proxy client)
  (unless
    ~g_socket_client_get_enable_proxy
    (set! ~g_socket_client_get_enable_proxy
      (fh-link-proc
        "g_socket_client_get_enable_proxy"
        ffi:int
        (list '*))))
  (let ((~client (unwrap-GSocketClient* client)))
    (~g_socket_client_get_enable_proxy ~client)))
(export g_socket_client_get_enable_proxy)

;; extern void g_socket_client_set_enable_proxy(GSocketClient *client, gboolean
;;      enable);
(define ~g_socket_client_set_enable_proxy #f)
(define (g_socket_client_set_enable_proxy client enable)
  (unless
    ~g_socket_client_set_enable_proxy
    (set! ~g_socket_client_set_enable_proxy
      (fh-link-proc
        "g_socket_client_set_enable_proxy"
        ffi:void
        (list '* ffi:int))))
  (let ((~client (unwrap-GSocketClient* client))
        (~enable (unwrap~fixed enable)))
    (~g_socket_client_set_enable_proxy
      ~client
      ~enable)))
(export g_socket_client_set_enable_proxy)

;; extern gboolean g_socket_client_get_tls(GSocketClient *client);
(define ~g_socket_client_get_tls #f)
(define (g_socket_client_get_tls client)
  (unless
    ~g_socket_client_get_tls
    (set! ~g_socket_client_get_tls
      (fh-link-proc
        "g_socket_client_get_tls"
        ffi:int
        (list '*))))
  (let ((~client (unwrap-GSocketClient* client)))
    (~g_socket_client_get_tls ~client)))
(export g_socket_client_get_tls)

;; extern void g_socket_client_set_tls(GSocketClient *client, gboolean tls);
(define ~g_socket_client_set_tls #f)
(define (g_socket_client_set_tls client tls)
  (unless
    ~g_socket_client_set_tls
    (set! ~g_socket_client_set_tls
      (fh-link-proc
        "g_socket_client_set_tls"
        ffi:void
        (list '* ffi:int))))
  (let ((~client (unwrap-GSocketClient* client))
        (~tls (unwrap~fixed tls)))
    (~g_socket_client_set_tls ~client ~tls)))
(export g_socket_client_set_tls)

;; extern GTlsCertificateFlags g_socket_client_get_tls_validation_flags(
;;     GSocketClient *client);
(define ~g_socket_client_get_tls_validation_flags #f)
(define (g_socket_client_get_tls_validation_flags client)
  (unless
    ~g_socket_client_get_tls_validation_flags
    (set! ~g_socket_client_get_tls_validation_flags
      (fh-link-proc
        "g_socket_client_get_tls_validation_flags"
        ffi:int
        (list '*))))
  (let ((~client (unwrap-GSocketClient* client)))
    (~g_socket_client_get_tls_validation_flags
      ~client)))
(export g_socket_client_get_tls_validation_flags)

;; extern void g_socket_client_set_tls_validation_flags(GSocketClient *client, 
;;     GTlsCertificateFlags flags);
(define ~g_socket_client_set_tls_validation_flags #f)
(define (g_socket_client_set_tls_validation_flags
         client
         flags)
  (unless
    ~g_socket_client_set_tls_validation_flags
    (set! ~g_socket_client_set_tls_validation_flags
      (fh-link-proc
        "g_socket_client_set_tls_validation_flags"
        ffi:void
        (list '* ffi:int))))
  (let ((~client (unwrap-GSocketClient* client))
        (~flags (unwrap~fixed flags)))
    (~g_socket_client_set_tls_validation_flags
      ~client
      ~flags)))
(export g_socket_client_set_tls_validation_flags)

;; extern GProxyResolver *g_socket_client_get_proxy_resolver(GSocketClient *
;;     client);
(define ~g_socket_client_get_proxy_resolver #f)
(define (g_socket_client_get_proxy_resolver client)
  (unless
    ~g_socket_client_get_proxy_resolver
    (set! ~g_socket_client_get_proxy_resolver
      (fh-link-proc
        "g_socket_client_get_proxy_resolver"
        '*
        (list '*))))
  (let ((~client (unwrap-GSocketClient* client)))
    (wrap-GProxyResolver*
      (~g_socket_client_get_proxy_resolver ~client))))
(export g_socket_client_get_proxy_resolver)

;; extern void g_socket_client_set_proxy_resolver(GSocketClient *client, 
;;     GProxyResolver *proxy_resolver);
(define ~g_socket_client_set_proxy_resolver #f)
(define (g_socket_client_set_proxy_resolver
         client
         proxy_resolver)
  (unless
    ~g_socket_client_set_proxy_resolver
    (set! ~g_socket_client_set_proxy_resolver
      (fh-link-proc
        "g_socket_client_set_proxy_resolver"
        ffi:void
        (list '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~proxy_resolver
          (unwrap-GProxyResolver* proxy_resolver)))
    (~g_socket_client_set_proxy_resolver
      ~client
      ~proxy_resolver)))
(export g_socket_client_set_proxy_resolver)

;; extern GSocketConnection *g_socket_client_connect(GSocketClient *client, 
;;     GSocketConnectable *connectable, GCancellable *cancellable, GError **
;;     error);
(define ~g_socket_client_connect #f)
(define (g_socket_client_connect
         client
         connectable
         cancellable
         error)
  (unless
    ~g_socket_client_connect
    (set! ~g_socket_client_connect
      (fh-link-proc
        "g_socket_client_connect"
        '*
        (list '* '* '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~connectable
          (unwrap-GSocketConnectable* connectable))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnection*
      (~g_socket_client_connect
        ~client
        ~connectable
        ~cancellable
        ~error))))
(export g_socket_client_connect)

;; extern GSocketConnection *g_socket_client_connect_to_host(GSocketClient *
;;     client, const gchar *host_and_port, guint16 default_port, GCancellable *
;;     cancellable, GError **error);
(define ~g_socket_client_connect_to_host #f)
(define (g_socket_client_connect_to_host
         client
         host_and_port
         default_port
         cancellable
         error)
  (unless
    ~g_socket_client_connect_to_host
    (set! ~g_socket_client_connect_to_host
      (fh-link-proc
        "g_socket_client_connect_to_host"
        '*
        (list '* '* ffi:unsigned-short '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~host_and_port (unwrap~pointer host_and_port))
        (~default_port (unwrap~fixed default_port))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnection*
      (~g_socket_client_connect_to_host
        ~client
        ~host_and_port
        ~default_port
        ~cancellable
        ~error))))
(export g_socket_client_connect_to_host)

;; extern GSocketConnection *g_socket_client_connect_to_service(GSocketClient *
;;     client, const gchar *domain, const gchar *service, GCancellable *
;;     cancellable, GError **error);
(define ~g_socket_client_connect_to_service #f)
(define (g_socket_client_connect_to_service
         client
         domain
         service
         cancellable
         error)
  (unless
    ~g_socket_client_connect_to_service
    (set! ~g_socket_client_connect_to_service
      (fh-link-proc
        "g_socket_client_connect_to_service"
        '*
        (list '* '* '* '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~domain (unwrap~pointer domain))
        (~service (unwrap~pointer service))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnection*
      (~g_socket_client_connect_to_service
        ~client
        ~domain
        ~service
        ~cancellable
        ~error))))
(export g_socket_client_connect_to_service)

;; extern GSocketConnection *g_socket_client_connect_to_uri(GSocketClient *
;;     client, const gchar *uri, guint16 default_port, GCancellable *
;;     cancellable, GError **error);
(define ~g_socket_client_connect_to_uri #f)
(define (g_socket_client_connect_to_uri
         client
         uri
         default_port
         cancellable
         error)
  (unless
    ~g_socket_client_connect_to_uri
    (set! ~g_socket_client_connect_to_uri
      (fh-link-proc
        "g_socket_client_connect_to_uri"
        '*
        (list '* '* ffi:unsigned-short '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~uri (unwrap~pointer uri))
        (~default_port (unwrap~fixed default_port))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnection*
      (~g_socket_client_connect_to_uri
        ~client
        ~uri
        ~default_port
        ~cancellable
        ~error))))
(export g_socket_client_connect_to_uri)

;; extern void g_socket_client_connect_async(GSocketClient *client, 
;;     GSocketConnectable *connectable, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_socket_client_connect_async #f)
(define (g_socket_client_connect_async
         client
         connectable
         cancellable
         callback
         user_data)
  (unless
    ~g_socket_client_connect_async
    (set! ~g_socket_client_connect_async
      (fh-link-proc
        "g_socket_client_connect_async"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~connectable
          (unwrap-GSocketConnectable* connectable))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_socket_client_connect_async
      ~client
      ~connectable
      ~cancellable
      ~callback
      ~user_data)))
(export g_socket_client_connect_async)

;; extern GSocketConnection *g_socket_client_connect_finish(GSocketClient *
;;     client, GAsyncResult *result, GError **error);
(define ~g_socket_client_connect_finish #f)
(define (g_socket_client_connect_finish
         client
         result
         error)
  (unless
    ~g_socket_client_connect_finish
    (set! ~g_socket_client_connect_finish
      (fh-link-proc
        "g_socket_client_connect_finish"
        '*
        (list '* '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnection*
      (~g_socket_client_connect_finish
        ~client
        ~result
        ~error))))
(export g_socket_client_connect_finish)

;; extern void g_socket_client_connect_to_host_async(GSocketClient *client, 
;;     const gchar *host_and_port, guint16 default_port, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_socket_client_connect_to_host_async #f)
(define (g_socket_client_connect_to_host_async
         client
         host_and_port
         default_port
         cancellable
         callback
         user_data)
  (unless
    ~g_socket_client_connect_to_host_async
    (set! ~g_socket_client_connect_to_host_async
      (fh-link-proc
        "g_socket_client_connect_to_host_async"
        ffi:void
        (list '* '* ffi:unsigned-short '* '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~host_and_port (unwrap~pointer host_and_port))
        (~default_port (unwrap~fixed default_port))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_socket_client_connect_to_host_async
      ~client
      ~host_and_port
      ~default_port
      ~cancellable
      ~callback
      ~user_data)))
(export g_socket_client_connect_to_host_async)

;; extern GSocketConnection *g_socket_client_connect_to_host_finish(
;;     GSocketClient *client, GAsyncResult *result, GError **error);
(define ~g_socket_client_connect_to_host_finish #f)
(define (g_socket_client_connect_to_host_finish
         client
         result
         error)
  (unless
    ~g_socket_client_connect_to_host_finish
    (set! ~g_socket_client_connect_to_host_finish
      (fh-link-proc
        "g_socket_client_connect_to_host_finish"
        '*
        (list '* '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnection*
      (~g_socket_client_connect_to_host_finish
        ~client
        ~result
        ~error))))
(export g_socket_client_connect_to_host_finish)

;; extern void g_socket_client_connect_to_service_async(GSocketClient *client, 
;;     const gchar *domain, const gchar *service, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_socket_client_connect_to_service_async #f)
(define (g_socket_client_connect_to_service_async
         client
         domain
         service
         cancellable
         callback
         user_data)
  (unless
    ~g_socket_client_connect_to_service_async
    (set! ~g_socket_client_connect_to_service_async
      (fh-link-proc
        "g_socket_client_connect_to_service_async"
        ffi:void
        (list '* '* '* '* '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~domain (unwrap~pointer domain))
        (~service (unwrap~pointer service))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_socket_client_connect_to_service_async
      ~client
      ~domain
      ~service
      ~cancellable
      ~callback
      ~user_data)))
(export g_socket_client_connect_to_service_async)

;; extern GSocketConnection *g_socket_client_connect_to_service_finish(
;;     GSocketClient *client, GAsyncResult *result, GError **error);
(define ~g_socket_client_connect_to_service_finish #f)
(define (g_socket_client_connect_to_service_finish
         client
         result
         error)
  (unless
    ~g_socket_client_connect_to_service_finish
    (set! ~g_socket_client_connect_to_service_finish
      (fh-link-proc
        "g_socket_client_connect_to_service_finish"
        '*
        (list '* '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnection*
      (~g_socket_client_connect_to_service_finish
        ~client
        ~result
        ~error))))
(export g_socket_client_connect_to_service_finish)

;; extern void g_socket_client_connect_to_uri_async(GSocketClient *client, 
;;     const gchar *uri, guint16 default_port, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_socket_client_connect_to_uri_async #f)
(define (g_socket_client_connect_to_uri_async
         client
         uri
         default_port
         cancellable
         callback
         user_data)
  (unless
    ~g_socket_client_connect_to_uri_async
    (set! ~g_socket_client_connect_to_uri_async
      (fh-link-proc
        "g_socket_client_connect_to_uri_async"
        ffi:void
        (list '* '* ffi:unsigned-short '* '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~uri (unwrap~pointer uri))
        (~default_port (unwrap~fixed default_port))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_socket_client_connect_to_uri_async
      ~client
      ~uri
      ~default_port
      ~cancellable
      ~callback
      ~user_data)))
(export g_socket_client_connect_to_uri_async)

;; extern GSocketConnection *g_socket_client_connect_to_uri_finish(
;;     GSocketClient *client, GAsyncResult *result, GError **error);
(define ~g_socket_client_connect_to_uri_finish #f)
(define (g_socket_client_connect_to_uri_finish
         client
         result
         error)
  (unless
    ~g_socket_client_connect_to_uri_finish
    (set! ~g_socket_client_connect_to_uri_finish
      (fh-link-proc
        "g_socket_client_connect_to_uri_finish"
        '*
        (list '* '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnection*
      (~g_socket_client_connect_to_uri_finish
        ~client
        ~result
        ~error))))
(export g_socket_client_connect_to_uri_finish)

;; extern void g_socket_client_add_application_proxy(GSocketClient *client, 
;;     const gchar *protocol);
(define ~g_socket_client_add_application_proxy #f)
(define (g_socket_client_add_application_proxy
         client
         protocol)
  (unless
    ~g_socket_client_add_application_proxy
    (set! ~g_socket_client_add_application_proxy
      (fh-link-proc
        "g_socket_client_add_application_proxy"
        ffi:void
        (list '* '*))))
  (let ((~client (unwrap-GSocketClient* client))
        (~protocol (unwrap~pointer protocol)))
    (~g_socket_client_add_application_proxy
      ~client
      ~protocol)))
(export g_socket_client_add_application_proxy)

;; typedef struct _GSocketConnectableIface GSocketConnectableIface;
(define GSocketConnectableIface-desc void)
(export GSocketConnectableIface-desc)
(define GSocketConnectableIface*-desc (bs:pointer (delay GSocketConnectableIface-desc)))
(export GSocketConnectableIface*-desc)
(define-fh-pointer-type GSocketConnectableIface* GSocketConnectableIface*-desc)

;; struct _GSocketConnectableIface {
;;   GTypeInterface g_iface;
;;   /* Virtual Table */
;;   GSocketAddressEnumerator *(*enumerate)(GSocketConnectable *connectable);
;;   GSocketAddressEnumerator *(*proxy_enumerate)(GSocketConnectable *
;;       connectable);
;;   gchar *(*to_string)(GSocketConnectable *connectable);
;; };
(define struct-_GSocketConnectableIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(enumerate ,(bs:pointer void))
          `(proxy_enumerate ,(bs:pointer void))
          `(to_string ,(bs:pointer void)))))
(export struct-_GSocketConnectableIface-desc)
(define-fh-compound-type/p struct-_GSocketConnectableIface struct-_GSocketConnectableIface-desc)
(set! GSocketConnectableIface-desc struct-_GSocketConnectableIface-desc)
(define-fh-compound-type GSocketConnectableIface GSocketConnectableIface-desc)

;; extern GType g_socket_connectable_get_type(void);
(define ~g_socket_connectable_get_type #f)
(define (g_socket_connectable_get_type)
  (unless
    ~g_socket_connectable_get_type
    (set! ~g_socket_connectable_get_type
      (fh-link-proc
        "g_socket_connectable_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_connectable_get_type)))
(export g_socket_connectable_get_type)

;; extern GSocketAddressEnumerator *g_socket_connectable_enumerate(
;;     GSocketConnectable *connectable);
(define ~g_socket_connectable_enumerate #f)
(define (g_socket_connectable_enumerate connectable)
  (unless
    ~g_socket_connectable_enumerate
    (set! ~g_socket_connectable_enumerate
      (fh-link-proc
        "g_socket_connectable_enumerate"
        '*
        (list '*))))
  (let ((~connectable
          (unwrap-GSocketConnectable* connectable)))
    (wrap-GSocketAddressEnumerator*
      (~g_socket_connectable_enumerate ~connectable))))
(export g_socket_connectable_enumerate)

;; extern GSocketAddressEnumerator *g_socket_connectable_proxy_enumerate(
;;     GSocketConnectable *connectable);
(define ~g_socket_connectable_proxy_enumerate #f)
(define (g_socket_connectable_proxy_enumerate
         connectable)
  (unless
    ~g_socket_connectable_proxy_enumerate
    (set! ~g_socket_connectable_proxy_enumerate
      (fh-link-proc
        "g_socket_connectable_proxy_enumerate"
        '*
        (list '*))))
  (let ((~connectable
          (unwrap-GSocketConnectable* connectable)))
    (wrap-GSocketAddressEnumerator*
      (~g_socket_connectable_proxy_enumerate
        ~connectable))))
(export g_socket_connectable_proxy_enumerate)

;; extern gchar *g_socket_connectable_to_string(GSocketConnectable *connectable
;;     );
(define ~g_socket_connectable_to_string #f)
(define (g_socket_connectable_to_string connectable)
  (unless
    ~g_socket_connectable_to_string
    (set! ~g_socket_connectable_to_string
      (fh-link-proc
        "g_socket_connectable_to_string"
        '*
        (list '*))))
  (let ((~connectable
          (unwrap-GSocketConnectable* connectable)))
    (~g_socket_connectable_to_string ~connectable)))
(export g_socket_connectable_to_string)

;; typedef struct _GSocketPrivate GSocketPrivate;
(define GSocketPrivate-desc void)
(export GSocketPrivate-desc)
(define GSocketPrivate*-desc (bs:pointer GSocketPrivate-desc))
(export GSocketPrivate*-desc)
(define-fh-pointer-type GSocketPrivate* GSocketPrivate*-desc)

;; typedef struct _GSocketClass GSocketClass;
(define GSocketClass-desc void)
(export GSocketClass-desc)
(define GSocketClass*-desc (bs:pointer (delay GSocketClass-desc)))
(export GSocketClass*-desc)
(define-fh-pointer-type GSocketClass* GSocketClass*-desc)

;; struct _GSocketClass {
;;   GObjectClass parent_class;
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;;   void (*_g_reserved7)(void);
;;   void (*_g_reserved8)(void);
;;   void (*_g_reserved9)(void);
;;   void (*_g_reserved10)(void);
;; };
(define struct-_GSocketClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void))
          `(_g_reserved7 ,(bs:pointer void))
          `(_g_reserved8 ,(bs:pointer void))
          `(_g_reserved9 ,(bs:pointer void))
          `(_g_reserved10 ,(bs:pointer void)))))
(export struct-_GSocketClass-desc)
(define-fh-compound-type/p struct-_GSocketClass struct-_GSocketClass-desc)
(set! GSocketClass-desc struct-_GSocketClass-desc)
(define-fh-compound-type GSocketClass GSocketClass-desc)

;; struct _GSocket {
;;   GObject parent_instance;
;;   GSocketPrivate *priv;
;; };
(define struct-_GSocket-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GSocketPrivate*-desc))))))
(export struct-_GSocket-desc)
(define-fh-compound-type/p struct-_GSocket struct-_GSocket-desc)
(set! GSocket-desc struct-_GSocket-desc)
(define-fh-compound-type GSocket GSocket-desc)

;; extern GType g_socket_get_type(void);
(define ~g_socket_get_type #f)
(define (g_socket_get_type)
  (unless
    ~g_socket_get_type
    (set! ~g_socket_get_type
      (fh-link-proc
        "g_socket_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_get_type)))
(export g_socket_get_type)

;; extern GSocket *g_socket_new(GSocketFamily family, GSocketType type, 
;;     GSocketProtocol protocol, GError **error);
(define ~g_socket_new #f)
(define (g_socket_new family type protocol error)
  (unless
    ~g_socket_new
    (set! ~g_socket_new
      (fh-link-proc
        "g_socket_new"
        '*
        (list ffi:int ffi:int ffi:int '*))))
  (let ((~family (unwrap~fixed family))
        (~type (unwrap~fixed type))
        (~protocol (unwrap~fixed protocol))
        (~error (unwrap~pointer error)))
    (wrap-GSocket*
      (~g_socket_new ~family ~type ~protocol ~error))))
(export g_socket_new)

;; extern GSocket *g_socket_new_from_fd(gint fd, GError **error);
(define ~g_socket_new_from_fd #f)
(define (g_socket_new_from_fd fd error)
  (unless
    ~g_socket_new_from_fd
    (set! ~g_socket_new_from_fd
      (fh-link-proc
        "g_socket_new_from_fd"
        '*
        (list ffi:int '*))))
  (let ((~fd (unwrap~fixed fd))
        (~error (unwrap~pointer error)))
    (wrap-GSocket*
      (~g_socket_new_from_fd ~fd ~error))))
(export g_socket_new_from_fd)

;; extern int g_socket_get_fd(GSocket *socket);
(define ~g_socket_get_fd #f)
(define (g_socket_get_fd socket)
  (unless
    ~g_socket_get_fd
    (set! ~g_socket_get_fd
      (fh-link-proc
        "g_socket_get_fd"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_fd ~socket)))
(export g_socket_get_fd)

;; extern GSocketFamily g_socket_get_family(GSocket *socket);
(define ~g_socket_get_family #f)
(define (g_socket_get_family socket)
  (unless
    ~g_socket_get_family
    (set! ~g_socket_get_family
      (fh-link-proc
        "g_socket_get_family"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_family ~socket)))
(export g_socket_get_family)

;; extern GSocketType g_socket_get_socket_type(GSocket *socket);
(define ~g_socket_get_socket_type #f)
(define (g_socket_get_socket_type socket)
  (unless
    ~g_socket_get_socket_type
    (set! ~g_socket_get_socket_type
      (fh-link-proc
        "g_socket_get_socket_type"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_socket_type ~socket)))
(export g_socket_get_socket_type)

;; extern GSocketProtocol g_socket_get_protocol(GSocket *socket);
(define ~g_socket_get_protocol #f)
(define (g_socket_get_protocol socket)
  (unless
    ~g_socket_get_protocol
    (set! ~g_socket_get_protocol
      (fh-link-proc
        "g_socket_get_protocol"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_protocol ~socket)))
(export g_socket_get_protocol)

;; extern GSocketAddress *g_socket_get_local_address(GSocket *socket, GError **
;;     error);
(define ~g_socket_get_local_address #f)
(define (g_socket_get_local_address socket error)
  (unless
    ~g_socket_get_local_address
    (set! ~g_socket_get_local_address
      (fh-link-proc
        "g_socket_get_local_address"
        '*
        (list '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~error (unwrap~pointer error)))
    (wrap-GSocketAddress*
      (~g_socket_get_local_address ~socket ~error))))
(export g_socket_get_local_address)

;; extern GSocketAddress *g_socket_get_remote_address(GSocket *socket, GError *
;;     *error);
(define ~g_socket_get_remote_address #f)
(define (g_socket_get_remote_address socket error)
  (unless
    ~g_socket_get_remote_address
    (set! ~g_socket_get_remote_address
      (fh-link-proc
        "g_socket_get_remote_address"
        '*
        (list '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~error (unwrap~pointer error)))
    (wrap-GSocketAddress*
      (~g_socket_get_remote_address ~socket ~error))))
(export g_socket_get_remote_address)

;; extern void g_socket_set_blocking(GSocket *socket, gboolean blocking);
(define ~g_socket_set_blocking #f)
(define (g_socket_set_blocking socket blocking)
  (unless
    ~g_socket_set_blocking
    (set! ~g_socket_set_blocking
      (fh-link-proc
        "g_socket_set_blocking"
        ffi:void
        (list '* ffi:int))))
  (let ((~socket (unwrap-GSocket* socket))
        (~blocking (unwrap~fixed blocking)))
    (~g_socket_set_blocking ~socket ~blocking)))
(export g_socket_set_blocking)

;; extern gboolean g_socket_get_blocking(GSocket *socket);
(define ~g_socket_get_blocking #f)
(define (g_socket_get_blocking socket)
  (unless
    ~g_socket_get_blocking
    (set! ~g_socket_get_blocking
      (fh-link-proc
        "g_socket_get_blocking"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_blocking ~socket)))
(export g_socket_get_blocking)

;; extern void g_socket_set_keepalive(GSocket *socket, gboolean keepalive);
(define ~g_socket_set_keepalive #f)
(define (g_socket_set_keepalive socket keepalive)
  (unless
    ~g_socket_set_keepalive
    (set! ~g_socket_set_keepalive
      (fh-link-proc
        "g_socket_set_keepalive"
        ffi:void
        (list '* ffi:int))))
  (let ((~socket (unwrap-GSocket* socket))
        (~keepalive (unwrap~fixed keepalive)))
    (~g_socket_set_keepalive ~socket ~keepalive)))
(export g_socket_set_keepalive)

;; extern gboolean g_socket_get_keepalive(GSocket *socket);
(define ~g_socket_get_keepalive #f)
(define (g_socket_get_keepalive socket)
  (unless
    ~g_socket_get_keepalive
    (set! ~g_socket_get_keepalive
      (fh-link-proc
        "g_socket_get_keepalive"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_keepalive ~socket)))
(export g_socket_get_keepalive)

;; extern gint g_socket_get_listen_backlog(GSocket *socket);
(define ~g_socket_get_listen_backlog #f)
(define (g_socket_get_listen_backlog socket)
  (unless
    ~g_socket_get_listen_backlog
    (set! ~g_socket_get_listen_backlog
      (fh-link-proc
        "g_socket_get_listen_backlog"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_listen_backlog ~socket)))
(export g_socket_get_listen_backlog)

;; extern void g_socket_set_listen_backlog(GSocket *socket, gint backlog);
(define ~g_socket_set_listen_backlog #f)
(define (g_socket_set_listen_backlog socket backlog)
  (unless
    ~g_socket_set_listen_backlog
    (set! ~g_socket_set_listen_backlog
      (fh-link-proc
        "g_socket_set_listen_backlog"
        ffi:void
        (list '* ffi:int))))
  (let ((~socket (unwrap-GSocket* socket))
        (~backlog (unwrap~fixed backlog)))
    (~g_socket_set_listen_backlog ~socket ~backlog)))
(export g_socket_set_listen_backlog)

;; extern guint g_socket_get_timeout(GSocket *socket);
(define ~g_socket_get_timeout #f)
(define (g_socket_get_timeout socket)
  (unless
    ~g_socket_get_timeout
    (set! ~g_socket_get_timeout
      (fh-link-proc
        "g_socket_get_timeout"
        ffi:unsigned-int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_timeout ~socket)))
(export g_socket_get_timeout)

;; extern void g_socket_set_timeout(GSocket *socket, guint timeout);
(define ~g_socket_set_timeout #f)
(define (g_socket_set_timeout socket timeout)
  (unless
    ~g_socket_set_timeout
    (set! ~g_socket_set_timeout
      (fh-link-proc
        "g_socket_set_timeout"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~socket (unwrap-GSocket* socket))
        (~timeout (unwrap~fixed timeout)))
    (~g_socket_set_timeout ~socket ~timeout)))
(export g_socket_set_timeout)

;; extern guint g_socket_get_ttl(GSocket *socket);
(define ~g_socket_get_ttl #f)
(define (g_socket_get_ttl socket)
  (unless
    ~g_socket_get_ttl
    (set! ~g_socket_get_ttl
      (fh-link-proc
        "g_socket_get_ttl"
        ffi:unsigned-int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_ttl ~socket)))
(export g_socket_get_ttl)

;; extern void g_socket_set_ttl(GSocket *socket, guint ttl);
(define ~g_socket_set_ttl #f)
(define (g_socket_set_ttl socket ttl)
  (unless
    ~g_socket_set_ttl
    (set! ~g_socket_set_ttl
      (fh-link-proc
        "g_socket_set_ttl"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~socket (unwrap-GSocket* socket))
        (~ttl (unwrap~fixed ttl)))
    (~g_socket_set_ttl ~socket ~ttl)))
(export g_socket_set_ttl)

;; extern gboolean g_socket_get_broadcast(GSocket *socket);
(define ~g_socket_get_broadcast #f)
(define (g_socket_get_broadcast socket)
  (unless
    ~g_socket_get_broadcast
    (set! ~g_socket_get_broadcast
      (fh-link-proc
        "g_socket_get_broadcast"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_broadcast ~socket)))
(export g_socket_get_broadcast)

;; extern void g_socket_set_broadcast(GSocket *socket, gboolean broadcast);
(define ~g_socket_set_broadcast #f)
(define (g_socket_set_broadcast socket broadcast)
  (unless
    ~g_socket_set_broadcast
    (set! ~g_socket_set_broadcast
      (fh-link-proc
        "g_socket_set_broadcast"
        ffi:void
        (list '* ffi:int))))
  (let ((~socket (unwrap-GSocket* socket))
        (~broadcast (unwrap~fixed broadcast)))
    (~g_socket_set_broadcast ~socket ~broadcast)))
(export g_socket_set_broadcast)

;; extern gboolean g_socket_get_multicast_loopback(GSocket *socket);
(define ~g_socket_get_multicast_loopback #f)
(define (g_socket_get_multicast_loopback socket)
  (unless
    ~g_socket_get_multicast_loopback
    (set! ~g_socket_get_multicast_loopback
      (fh-link-proc
        "g_socket_get_multicast_loopback"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_multicast_loopback ~socket)))
(export g_socket_get_multicast_loopback)

;; extern void g_socket_set_multicast_loopback(GSocket *socket, gboolean 
;;     loopback);
(define ~g_socket_set_multicast_loopback #f)
(define (g_socket_set_multicast_loopback socket loopback)
  (unless
    ~g_socket_set_multicast_loopback
    (set! ~g_socket_set_multicast_loopback
      (fh-link-proc
        "g_socket_set_multicast_loopback"
        ffi:void
        (list '* ffi:int))))
  (let ((~socket (unwrap-GSocket* socket))
        (~loopback (unwrap~fixed loopback)))
    (~g_socket_set_multicast_loopback
      ~socket
      ~loopback)))
(export g_socket_set_multicast_loopback)

;; extern guint g_socket_get_multicast_ttl(GSocket *socket);
(define ~g_socket_get_multicast_ttl #f)
(define (g_socket_get_multicast_ttl socket)
  (unless
    ~g_socket_get_multicast_ttl
    (set! ~g_socket_get_multicast_ttl
      (fh-link-proc
        "g_socket_get_multicast_ttl"
        ffi:unsigned-int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_multicast_ttl ~socket)))
(export g_socket_get_multicast_ttl)

;; extern void g_socket_set_multicast_ttl(GSocket *socket, guint ttl);
(define ~g_socket_set_multicast_ttl #f)
(define (g_socket_set_multicast_ttl socket ttl)
  (unless
    ~g_socket_set_multicast_ttl
    (set! ~g_socket_set_multicast_ttl
      (fh-link-proc
        "g_socket_set_multicast_ttl"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~socket (unwrap-GSocket* socket))
        (~ttl (unwrap~fixed ttl)))
    (~g_socket_set_multicast_ttl ~socket ~ttl)))
(export g_socket_set_multicast_ttl)

;; extern gboolean g_socket_is_connected(GSocket *socket);
(define ~g_socket_is_connected #f)
(define (g_socket_is_connected socket)
  (unless
    ~g_socket_is_connected
    (set! ~g_socket_is_connected
      (fh-link-proc
        "g_socket_is_connected"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_is_connected ~socket)))
(export g_socket_is_connected)

;; extern gboolean g_socket_bind(GSocket *socket, GSocketAddress *address, 
;;     gboolean allow_reuse, GError **error);
(define ~g_socket_bind #f)
(define (g_socket_bind socket address allow_reuse error)
  (unless
    ~g_socket_bind
    (set! ~g_socket_bind
      (fh-link-proc
        "g_socket_bind"
        ffi:int
        (list '* '* ffi:int '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~address (unwrap-GSocketAddress* address))
        (~allow_reuse (unwrap~fixed allow_reuse))
        (~error (unwrap~pointer error)))
    (~g_socket_bind
      ~socket
      ~address
      ~allow_reuse
      ~error)))
(export g_socket_bind)

;; extern gboolean g_socket_join_multicast_group(GSocket *socket, GInetAddress 
;;     *group, gboolean source_specific, const gchar *iface, GError **error);
(define ~g_socket_join_multicast_group #f)
(define (g_socket_join_multicast_group
         socket
         group
         source_specific
         iface
         error)
  (unless
    ~g_socket_join_multicast_group
    (set! ~g_socket_join_multicast_group
      (fh-link-proc
        "g_socket_join_multicast_group"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~group (unwrap-GInetAddress* group))
        (~source_specific (unwrap~fixed source_specific))
        (~iface (unwrap~pointer iface))
        (~error (unwrap~pointer error)))
    (~g_socket_join_multicast_group
      ~socket
      ~group
      ~source_specific
      ~iface
      ~error)))
(export g_socket_join_multicast_group)

;; extern gboolean g_socket_leave_multicast_group(GSocket *socket, GInetAddress
;;      *group, gboolean source_specific, const gchar *iface, GError **error);
(define ~g_socket_leave_multicast_group #f)
(define (g_socket_leave_multicast_group
         socket
         group
         source_specific
         iface
         error)
  (unless
    ~g_socket_leave_multicast_group
    (set! ~g_socket_leave_multicast_group
      (fh-link-proc
        "g_socket_leave_multicast_group"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~group (unwrap-GInetAddress* group))
        (~source_specific (unwrap~fixed source_specific))
        (~iface (unwrap~pointer iface))
        (~error (unwrap~pointer error)))
    (~g_socket_leave_multicast_group
      ~socket
      ~group
      ~source_specific
      ~iface
      ~error)))
(export g_socket_leave_multicast_group)

;; extern gboolean g_socket_connect(GSocket *socket, GSocketAddress *address, 
;;     GCancellable *cancellable, GError **error);
(define ~g_socket_connect #f)
(define (g_socket_connect
         socket
         address
         cancellable
         error)
  (unless
    ~g_socket_connect
    (set! ~g_socket_connect
      (fh-link-proc
        "g_socket_connect"
        ffi:int
        (list '* '* '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~address (unwrap-GSocketAddress* address))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_connect
      ~socket
      ~address
      ~cancellable
      ~error)))
(export g_socket_connect)

;; extern gboolean g_socket_check_connect_result(GSocket *socket, GError **
;;     error);
(define ~g_socket_check_connect_result #f)
(define (g_socket_check_connect_result socket error)
  (unless
    ~g_socket_check_connect_result
    (set! ~g_socket_check_connect_result
      (fh-link-proc
        "g_socket_check_connect_result"
        ffi:int
        (list '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~error (unwrap~pointer error)))
    (~g_socket_check_connect_result ~socket ~error)))
(export g_socket_check_connect_result)

;; extern gssize g_socket_get_available_bytes(GSocket *socket);
(define ~g_socket_get_available_bytes #f)
(define (g_socket_get_available_bytes socket)
  (unless
    ~g_socket_get_available_bytes
    (set! ~g_socket_get_available_bytes
      (fh-link-proc
        "g_socket_get_available_bytes"
        ffi:long
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_get_available_bytes ~socket)))
(export g_socket_get_available_bytes)

;; extern GIOCondition g_socket_condition_check(GSocket *socket, GIOCondition 
;;     condition);
(define ~g_socket_condition_check #f)
(define (g_socket_condition_check socket condition)
  (unless
    ~g_socket_condition_check
    (set! ~g_socket_condition_check
      (fh-link-proc
        "g_socket_condition_check"
        ffi:int
        (list '* ffi:int))))
  (let ((~socket (unwrap-GSocket* socket))
        (~condition (unwrap~fixed condition)))
    (~g_socket_condition_check ~socket ~condition)))
(export g_socket_condition_check)

;; extern gboolean g_socket_condition_wait(GSocket *socket, GIOCondition 
;;     condition, GCancellable *cancellable, GError **error);
(define ~g_socket_condition_wait #f)
(define (g_socket_condition_wait
         socket
         condition
         cancellable
         error)
  (unless
    ~g_socket_condition_wait
    (set! ~g_socket_condition_wait
      (fh-link-proc
        "g_socket_condition_wait"
        ffi:int
        (list '* ffi:int '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~condition (unwrap~fixed condition))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_condition_wait
      ~socket
      ~condition
      ~cancellable
      ~error)))
(export g_socket_condition_wait)

;; extern gboolean g_socket_condition_timed_wait(GSocket *socket, GIOCondition 
;;     condition, gint64 timeout, GCancellable *cancellable, GError **error);
(define ~g_socket_condition_timed_wait #f)
(define (g_socket_condition_timed_wait
         socket
         condition
         timeout
         cancellable
         error)
  (unless
    ~g_socket_condition_timed_wait
    (set! ~g_socket_condition_timed_wait
      (fh-link-proc
        "g_socket_condition_timed_wait"
        ffi:int
        (list '* ffi:int ffi:long '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~condition (unwrap~fixed condition))
        (~timeout (unwrap~fixed timeout))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_condition_timed_wait
      ~socket
      ~condition
      ~timeout
      ~cancellable
      ~error)))
(export g_socket_condition_timed_wait)

;; extern GSocket *g_socket_accept(GSocket *socket, GCancellable *cancellable, 
;;     GError **error);
(define ~g_socket_accept #f)
(define (g_socket_accept socket cancellable error)
  (unless
    ~g_socket_accept
    (set! ~g_socket_accept
      (fh-link-proc
        "g_socket_accept"
        '*
        (list '* '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GSocket*
      (~g_socket_accept ~socket ~cancellable ~error))))
(export g_socket_accept)

;; extern gboolean g_socket_listen(GSocket *socket, GError **error);
(define ~g_socket_listen #f)
(define (g_socket_listen socket error)
  (unless
    ~g_socket_listen
    (set! ~g_socket_listen
      (fh-link-proc
        "g_socket_listen"
        ffi:int
        (list '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~error (unwrap~pointer error)))
    (~g_socket_listen ~socket ~error)))
(export g_socket_listen)

;; extern gssize g_socket_receive(GSocket *socket, gchar *buffer, gsize size, 
;;     GCancellable *cancellable, GError **error);
(define ~g_socket_receive #f)
(define (g_socket_receive
         socket
         buffer
         size
         cancellable
         error)
  (unless
    ~g_socket_receive
    (set! ~g_socket_receive
      (fh-link-proc
        "g_socket_receive"
        ffi:long
        (list '* '* ffi:unsigned-long '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~buffer (unwrap~pointer buffer))
        (~size (unwrap~fixed size))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_receive
      ~socket
      ~buffer
      ~size
      ~cancellable
      ~error)))
(export g_socket_receive)

;; extern gssize g_socket_receive_from(GSocket *socket, GSocketAddress **
;;     address, gchar *buffer, gsize size, GCancellable *cancellable, GError **
;;     error);
(define ~g_socket_receive_from #f)
(define (g_socket_receive_from
         socket
         address
         buffer
         size
         cancellable
         error)
  (unless
    ~g_socket_receive_from
    (set! ~g_socket_receive_from
      (fh-link-proc
        "g_socket_receive_from"
        ffi:long
        (list '* '* '* ffi:unsigned-long '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~address (unwrap~pointer address))
        (~buffer (unwrap~pointer buffer))
        (~size (unwrap~fixed size))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_receive_from
      ~socket
      ~address
      ~buffer
      ~size
      ~cancellable
      ~error)))
(export g_socket_receive_from)

;; extern gssize g_socket_send(GSocket *socket, const gchar *buffer, gsize size
;;     , GCancellable *cancellable, GError **error);
(define ~g_socket_send #f)
(define (g_socket_send
         socket
         buffer
         size
         cancellable
         error)
  (unless
    ~g_socket_send
    (set! ~g_socket_send
      (fh-link-proc
        "g_socket_send"
        ffi:long
        (list '* '* ffi:unsigned-long '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~buffer (unwrap~pointer buffer))
        (~size (unwrap~fixed size))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_send
      ~socket
      ~buffer
      ~size
      ~cancellable
      ~error)))
(export g_socket_send)

;; extern gssize g_socket_send_to(GSocket *socket, GSocketAddress *address, 
;;     const gchar *buffer, gsize size, GCancellable *cancellable, GError **
;;     error);
(define ~g_socket_send_to #f)
(define (g_socket_send_to
         socket
         address
         buffer
         size
         cancellable
         error)
  (unless
    ~g_socket_send_to
    (set! ~g_socket_send_to
      (fh-link-proc
        "g_socket_send_to"
        ffi:long
        (list '* '* '* ffi:unsigned-long '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~address (unwrap-GSocketAddress* address))
        (~buffer (unwrap~pointer buffer))
        (~size (unwrap~fixed size))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_send_to
      ~socket
      ~address
      ~buffer
      ~size
      ~cancellable
      ~error)))
(export g_socket_send_to)

;; extern gssize g_socket_receive_message(GSocket *socket, GSocketAddress **
;;     address, GInputVector *vectors, gint num_vectors, GSocketControlMessage 
;;     ***messages, gint *num_messages, gint *flags, GCancellable *cancellable
;;     , GError **error);
(define ~g_socket_receive_message #f)
(define (g_socket_receive_message
         socket
         address
         vectors
         num_vectors
         messages
         num_messages
         flags
         cancellable
         error)
  (unless
    ~g_socket_receive_message
    (set! ~g_socket_receive_message
      (fh-link-proc
        "g_socket_receive_message"
        ffi:long
        (list '* '* '* ffi:int '* '* '* '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~address (unwrap~pointer address))
        (~vectors (unwrap-GInputVector* vectors))
        (~num_vectors (unwrap~fixed num_vectors))
        (~messages (unwrap~pointer messages))
        (~num_messages (unwrap~pointer num_messages))
        (~flags (unwrap~pointer flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_receive_message
      ~socket
      ~address
      ~vectors
      ~num_vectors
      ~messages
      ~num_messages
      ~flags
      ~cancellable
      ~error)))
(export g_socket_receive_message)

;; extern gssize g_socket_send_message(GSocket *socket, GSocketAddress *address
;;     , GOutputVector *vectors, gint num_vectors, GSocketControlMessage **
;;     messages, gint num_messages, gint flags, GCancellable *cancellable, 
;;     GError **error);
(define ~g_socket_send_message #f)
(define (g_socket_send_message
         socket
         address
         vectors
         num_vectors
         messages
         num_messages
         flags
         cancellable
         error)
  (unless
    ~g_socket_send_message
    (set! ~g_socket_send_message
      (fh-link-proc
        "g_socket_send_message"
        ffi:long
        (list '* '* '* ffi:int '* ffi:int ffi:int '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~address (unwrap-GSocketAddress* address))
        (~vectors (unwrap-GOutputVector* vectors))
        (~num_vectors (unwrap~fixed num_vectors))
        (~messages (unwrap~pointer messages))
        (~num_messages (unwrap~fixed num_messages))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_send_message
      ~socket
      ~address
      ~vectors
      ~num_vectors
      ~messages
      ~num_messages
      ~flags
      ~cancellable
      ~error)))
(export g_socket_send_message)

;; extern gint g_socket_receive_messages(GSocket *socket, GInputMessage *
;;     messages, guint num_messages, gint flags, GCancellable *cancellable, 
;;     GError **error);
(define ~g_socket_receive_messages #f)
(define (g_socket_receive_messages
         socket
         messages
         num_messages
         flags
         cancellable
         error)
  (unless
    ~g_socket_receive_messages
    (set! ~g_socket_receive_messages
      (fh-link-proc
        "g_socket_receive_messages"
        ffi:int
        (list '* '* ffi:unsigned-int ffi:int '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~messages (unwrap-GInputMessage* messages))
        (~num_messages (unwrap~fixed num_messages))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_receive_messages
      ~socket
      ~messages
      ~num_messages
      ~flags
      ~cancellable
      ~error)))
(export g_socket_receive_messages)

;; extern gint g_socket_send_messages(GSocket *socket, GOutputMessage *messages
;;     , guint num_messages, gint flags, GCancellable *cancellable, GError **
;;     error);
(define ~g_socket_send_messages #f)
(define (g_socket_send_messages
         socket
         messages
         num_messages
         flags
         cancellable
         error)
  (unless
    ~g_socket_send_messages
    (set! ~g_socket_send_messages
      (fh-link-proc
        "g_socket_send_messages"
        ffi:int
        (list '* '* ffi:unsigned-int ffi:int '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~messages (unwrap-GOutputMessage* messages))
        (~num_messages (unwrap~fixed num_messages))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_send_messages
      ~socket
      ~messages
      ~num_messages
      ~flags
      ~cancellable
      ~error)))
(export g_socket_send_messages)

;; extern gboolean g_socket_close(GSocket *socket, GError **error);
(define ~g_socket_close #f)
(define (g_socket_close socket error)
  (unless
    ~g_socket_close
    (set! ~g_socket_close
      (fh-link-proc
        "g_socket_close"
        ffi:int
        (list '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~error (unwrap~pointer error)))
    (~g_socket_close ~socket ~error)))
(export g_socket_close)

;; extern gboolean g_socket_shutdown(GSocket *socket, gboolean shutdown_read, 
;;     gboolean shutdown_write, GError **error);
(define ~g_socket_shutdown #f)
(define (g_socket_shutdown
         socket
         shutdown_read
         shutdown_write
         error)
  (unless
    ~g_socket_shutdown
    (set! ~g_socket_shutdown
      (fh-link-proc
        "g_socket_shutdown"
        ffi:int
        (list '* ffi:int ffi:int '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~shutdown_read (unwrap~fixed shutdown_read))
        (~shutdown_write (unwrap~fixed shutdown_write))
        (~error (unwrap~pointer error)))
    (~g_socket_shutdown
      ~socket
      ~shutdown_read
      ~shutdown_write
      ~error)))
(export g_socket_shutdown)

;; extern gboolean g_socket_is_closed(GSocket *socket);
(define ~g_socket_is_closed #f)
(define (g_socket_is_closed socket)
  (unless
    ~g_socket_is_closed
    (set! ~g_socket_is_closed
      (fh-link-proc
        "g_socket_is_closed"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_is_closed ~socket)))
(export g_socket_is_closed)

;; extern GSource *g_socket_create_source(GSocket *socket, GIOCondition 
;;     condition, GCancellable *cancellable);
(define ~g_socket_create_source #f)
(define (g_socket_create_source
         socket
         condition
         cancellable)
  (unless
    ~g_socket_create_source
    (set! ~g_socket_create_source
      (fh-link-proc
        "g_socket_create_source"
        '*
        (list '* ffi:int '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~condition (unwrap~fixed condition))
        (~cancellable (unwrap-GCancellable* cancellable)))
    (~g_socket_create_source
      ~socket
      ~condition
      ~cancellable)))
(export g_socket_create_source)

;; extern gboolean g_socket_speaks_ipv4(GSocket *socket);
(define ~g_socket_speaks_ipv4 #f)
(define (g_socket_speaks_ipv4 socket)
  (unless
    ~g_socket_speaks_ipv4
    (set! ~g_socket_speaks_ipv4
      (fh-link-proc
        "g_socket_speaks_ipv4"
        ffi:int
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (~g_socket_speaks_ipv4 ~socket)))
(export g_socket_speaks_ipv4)

;; extern GCredentials *g_socket_get_credentials(GSocket *socket, GError **
;;     error);
(define ~g_socket_get_credentials #f)
(define (g_socket_get_credentials socket error)
  (unless
    ~g_socket_get_credentials
    (set! ~g_socket_get_credentials
      (fh-link-proc
        "g_socket_get_credentials"
        '*
        (list '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~error (unwrap~pointer error)))
    (wrap-GCredentials*
      (~g_socket_get_credentials ~socket ~error))))
(export g_socket_get_credentials)

;; extern gssize g_socket_receive_with_blocking(GSocket *socket, gchar *buffer
;;     , gsize size, gboolean blocking, GCancellable *cancellable, GError **
;;     error);
(define ~g_socket_receive_with_blocking #f)
(define (g_socket_receive_with_blocking
         socket
         buffer
         size
         blocking
         cancellable
         error)
  (unless
    ~g_socket_receive_with_blocking
    (set! ~g_socket_receive_with_blocking
      (fh-link-proc
        "g_socket_receive_with_blocking"
        ffi:long
        (list '* '* ffi:unsigned-long ffi:int '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~buffer (unwrap~pointer buffer))
        (~size (unwrap~fixed size))
        (~blocking (unwrap~fixed blocking))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_receive_with_blocking
      ~socket
      ~buffer
      ~size
      ~blocking
      ~cancellable
      ~error)))
(export g_socket_receive_with_blocking)

;; extern gssize g_socket_send_with_blocking(GSocket *socket, const gchar *
;;     buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError
;;      **error);
(define ~g_socket_send_with_blocking #f)
(define (g_socket_send_with_blocking
         socket
         buffer
         size
         blocking
         cancellable
         error)
  (unless
    ~g_socket_send_with_blocking
    (set! ~g_socket_send_with_blocking
      (fh-link-proc
        "g_socket_send_with_blocking"
        ffi:long
        (list '* '* ffi:unsigned-long ffi:int '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~buffer (unwrap~pointer buffer))
        (~size (unwrap~fixed size))
        (~blocking (unwrap~fixed blocking))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_send_with_blocking
      ~socket
      ~buffer
      ~size
      ~blocking
      ~cancellable
      ~error)))
(export g_socket_send_with_blocking)

;; extern gboolean g_socket_get_option(GSocket *socket, gint level, gint 
;;     optname, gint *value, GError **error);
(define ~g_socket_get_option #f)
(define (g_socket_get_option
         socket
         level
         optname
         value
         error)
  (unless
    ~g_socket_get_option
    (set! ~g_socket_get_option
      (fh-link-proc
        "g_socket_get_option"
        ffi:int
        (list '* ffi:int ffi:int '* '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~level (unwrap~fixed level))
        (~optname (unwrap~fixed optname))
        (~value (unwrap~pointer value))
        (~error (unwrap~pointer error)))
    (~g_socket_get_option
      ~socket
      ~level
      ~optname
      ~value
      ~error)))
(export g_socket_get_option)

;; extern gboolean g_socket_set_option(GSocket *socket, gint level, gint 
;;     optname, gint value, GError **error);
(define ~g_socket_set_option #f)
(define (g_socket_set_option
         socket
         level
         optname
         value
         error)
  (unless
    ~g_socket_set_option
    (set! ~g_socket_set_option
      (fh-link-proc
        "g_socket_set_option"
        ffi:int
        (list '* ffi:int ffi:int ffi:int '*))))
  (let ((~socket (unwrap-GSocket* socket))
        (~level (unwrap~fixed level))
        (~optname (unwrap~fixed optname))
        (~value (unwrap~fixed value))
        (~error (unwrap~pointer error)))
    (~g_socket_set_option
      ~socket
      ~level
      ~optname
      ~value
      ~error)))
(export g_socket_set_option)

;; typedef struct _GSocketConnectionPrivate GSocketConnectionPrivate;
(define GSocketConnectionPrivate-desc void)
(export GSocketConnectionPrivate-desc)
(define GSocketConnectionPrivate*-desc (bs:pointer GSocketConnectionPrivate-desc))
(export GSocketConnectionPrivate*-desc)
(define-fh-pointer-type GSocketConnectionPrivate* GSocketConnectionPrivate*-desc)

;; typedef struct _GSocketConnectionClass GSocketConnectionClass;
(define GSocketConnectionClass-desc void)
(export GSocketConnectionClass-desc)
(define GSocketConnectionClass*-desc (bs:pointer (delay GSocketConnectionClass-desc)))
(export GSocketConnectionClass*-desc)
(define-fh-pointer-type GSocketConnectionClass* GSocketConnectionClass*-desc)

;; struct _GSocketConnectionClass {
;;   GIOStreamClass parent_class;
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;; };
(define struct-_GSocketConnectionClass-desc
  (bs:struct
    (list `(parent_class ,GIOStreamClass-desc)
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void)))))
(export struct-_GSocketConnectionClass-desc)
(define-fh-compound-type/p struct-_GSocketConnectionClass struct-_GSocketConnectionClass-desc)
(set! GSocketConnectionClass-desc struct-_GSocketConnectionClass-desc)
(define-fh-compound-type GSocketConnectionClass GSocketConnectionClass-desc)

;; struct _GSocketConnection {
;;   GIOStream parent_instance;
;;   GSocketConnectionPrivate *priv;
;; };
(define struct-_GSocketConnection-desc
  (bs:struct
    (list `(parent_instance ,GIOStream-desc)
          `(priv ,(bs:pointer
                    (delay GSocketConnectionPrivate*-desc))))))
(export struct-_GSocketConnection-desc)
(define-fh-compound-type/p struct-_GSocketConnection struct-_GSocketConnection-desc)
(set! GSocketConnection-desc struct-_GSocketConnection-desc)
(define-fh-compound-type GSocketConnection GSocketConnection-desc)

;; extern GType g_socket_connection_get_type(void);
(define ~g_socket_connection_get_type #f)
(define (g_socket_connection_get_type)
  (unless
    ~g_socket_connection_get_type
    (set! ~g_socket_connection_get_type
      (fh-link-proc
        "g_socket_connection_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_connection_get_type)))
(export g_socket_connection_get_type)

;; extern gboolean g_socket_connection_is_connected(GSocketConnection *
;;     connection);
(define ~g_socket_connection_is_connected #f)
(define (g_socket_connection_is_connected connection)
  (unless
    ~g_socket_connection_is_connected
    (set! ~g_socket_connection_is_connected
      (fh-link-proc
        "g_socket_connection_is_connected"
        ffi:int
        (list '*))))
  (let ((~connection
          (unwrap-GSocketConnection* connection)))
    (~g_socket_connection_is_connected ~connection)))
(export g_socket_connection_is_connected)

;; extern gboolean g_socket_connection_connect(GSocketConnection *connection, 
;;     GSocketAddress *address, GCancellable *cancellable, GError **error);
(define ~g_socket_connection_connect #f)
(define (g_socket_connection_connect
         connection
         address
         cancellable
         error)
  (unless
    ~g_socket_connection_connect
    (set! ~g_socket_connection_connect
      (fh-link-proc
        "g_socket_connection_connect"
        ffi:int
        (list '* '* '* '*))))
  (let ((~connection
          (unwrap-GSocketConnection* connection))
        (~address (unwrap-GSocketAddress* address))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_socket_connection_connect
      ~connection
      ~address
      ~cancellable
      ~error)))
(export g_socket_connection_connect)

;; extern void g_socket_connection_connect_async(GSocketConnection *connection
;;     , GSocketAddress *address, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_socket_connection_connect_async #f)
(define (g_socket_connection_connect_async
         connection
         address
         cancellable
         callback
         user_data)
  (unless
    ~g_socket_connection_connect_async
    (set! ~g_socket_connection_connect_async
      (fh-link-proc
        "g_socket_connection_connect_async"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~connection
          (unwrap-GSocketConnection* connection))
        (~address (unwrap-GSocketAddress* address))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_socket_connection_connect_async
      ~connection
      ~address
      ~cancellable
      ~callback
      ~user_data)))
(export g_socket_connection_connect_async)

;; extern gboolean g_socket_connection_connect_finish(GSocketConnection *
;;     connection, GAsyncResult *result, GError **error);
(define ~g_socket_connection_connect_finish #f)
(define (g_socket_connection_connect_finish
         connection
         result
         error)
  (unless
    ~g_socket_connection_connect_finish
    (set! ~g_socket_connection_connect_finish
      (fh-link-proc
        "g_socket_connection_connect_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~connection
          (unwrap-GSocketConnection* connection))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_socket_connection_connect_finish
      ~connection
      ~result
      ~error)))
(export g_socket_connection_connect_finish)

;; extern GSocket *g_socket_connection_get_socket(GSocketConnection *connection
;;     );
(define ~g_socket_connection_get_socket #f)
(define (g_socket_connection_get_socket connection)
  (unless
    ~g_socket_connection_get_socket
    (set! ~g_socket_connection_get_socket
      (fh-link-proc
        "g_socket_connection_get_socket"
        '*
        (list '*))))
  (let ((~connection
          (unwrap-GSocketConnection* connection)))
    (wrap-GSocket*
      (~g_socket_connection_get_socket ~connection))))
(export g_socket_connection_get_socket)

;; extern GSocketAddress *g_socket_connection_get_local_address(
;;     GSocketConnection *connection, GError **error);
(define ~g_socket_connection_get_local_address #f)
(define (g_socket_connection_get_local_address
         connection
         error)
  (unless
    ~g_socket_connection_get_local_address
    (set! ~g_socket_connection_get_local_address
      (fh-link-proc
        "g_socket_connection_get_local_address"
        '*
        (list '* '*))))
  (let ((~connection
          (unwrap-GSocketConnection* connection))
        (~error (unwrap~pointer error)))
    (wrap-GSocketAddress*
      (~g_socket_connection_get_local_address
        ~connection
        ~error))))
(export g_socket_connection_get_local_address)

;; extern GSocketAddress *g_socket_connection_get_remote_address(
;;     GSocketConnection *connection, GError **error);
(define ~g_socket_connection_get_remote_address #f)
(define (g_socket_connection_get_remote_address
         connection
         error)
  (unless
    ~g_socket_connection_get_remote_address
    (set! ~g_socket_connection_get_remote_address
      (fh-link-proc
        "g_socket_connection_get_remote_address"
        '*
        (list '* '*))))
  (let ((~connection
          (unwrap-GSocketConnection* connection))
        (~error (unwrap~pointer error)))
    (wrap-GSocketAddress*
      (~g_socket_connection_get_remote_address
        ~connection
        ~error))))
(export g_socket_connection_get_remote_address)

;; extern void g_socket_connection_factory_register_type(GType g_type, 
;;     GSocketFamily family, GSocketType type, gint protocol);
(define ~g_socket_connection_factory_register_type #f)
(define (g_socket_connection_factory_register_type
         g_type
         family
         type
         protocol)
  (unless
    ~g_socket_connection_factory_register_type
    (set! ~g_socket_connection_factory_register_type
      (fh-link-proc
        "g_socket_connection_factory_register_type"
        ffi:void
        (list ffi:unsigned-long ffi:int ffi:int ffi:int))))
  (let ((~g_type (unwrap~fixed g_type))
        (~family (unwrap~fixed family))
        (~type (unwrap~fixed type))
        (~protocol (unwrap~fixed protocol)))
    (~g_socket_connection_factory_register_type
      ~g_type
      ~family
      ~type
      ~protocol)))
(export g_socket_connection_factory_register_type)

;; extern GType g_socket_connection_factory_lookup_type(GSocketFamily family, 
;;     GSocketType type, gint protocol_id);
(define ~g_socket_connection_factory_lookup_type #f)
(define (g_socket_connection_factory_lookup_type
         family
         type
         protocol_id)
  (unless
    ~g_socket_connection_factory_lookup_type
    (set! ~g_socket_connection_factory_lookup_type
      (fh-link-proc
        "g_socket_connection_factory_lookup_type"
        ffi:unsigned-long
        (list ffi:int ffi:int ffi:int))))
  (let ((~family (unwrap~fixed family))
        (~type (unwrap~fixed type))
        (~protocol_id (unwrap~fixed protocol_id)))
    (~g_socket_connection_factory_lookup_type
      ~family
      ~type
      ~protocol_id)))
(export g_socket_connection_factory_lookup_type)

;; extern GSocketConnection *g_socket_connection_factory_create_connection(
;;     GSocket *socket);
(define ~g_socket_connection_factory_create_connection #f)
(define (g_socket_connection_factory_create_connection
         socket)
  (unless
    ~g_socket_connection_factory_create_connection
    (set! ~g_socket_connection_factory_create_connection
      (fh-link-proc
        "g_socket_connection_factory_create_connection"
        '*
        (list '*))))
  (let ((~socket (unwrap-GSocket* socket)))
    (wrap-GSocketConnection*
      (~g_socket_connection_factory_create_connection
        ~socket))))
(export g_socket_connection_factory_create_connection)

;; typedef struct _GSocketControlMessagePrivate GSocketControlMessagePrivate;
(define GSocketControlMessagePrivate-desc void)
(export GSocketControlMessagePrivate-desc)
(define GSocketControlMessagePrivate*-desc (bs:pointer GSocketControlMessagePrivate-desc))
(export GSocketControlMessagePrivate*-desc)
(define-fh-pointer-type GSocketControlMessagePrivate* GSocketControlMessagePrivate*-desc)

;; typedef struct _GSocketControlMessageClass GSocketControlMessageClass;
(define GSocketControlMessageClass-desc void)
(export GSocketControlMessageClass-desc)
(define GSocketControlMessageClass*-desc (bs:pointer (delay GSocketControlMessageClass-desc)))
(export GSocketControlMessageClass*-desc)
(define-fh-pointer-type GSocketControlMessageClass* GSocketControlMessageClass*-desc)

;; struct _GSocketControlMessageClass {
;;   GObjectClass parent_class;
;;   gsize (*get_size)(GSocketControlMessage *message);
;;   int (*get_level)(GSocketControlMessage *message);
;;   int (*get_type)(GSocketControlMessage *message);
;;   void (*serialize)(GSocketControlMessage *message, gpointer data);
;;   GSocketControlMessage *(*deserialize)(int level, int type, gsize size, 
;;       gpointer data);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GSocketControlMessageClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(get_size ,(bs:pointer void))
          `(get_level ,(bs:pointer void))
          `(get_type ,(bs:pointer void))
          `(serialize ,(bs:pointer void))
          `(deserialize ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GSocketControlMessageClass-desc)
(define-fh-compound-type/p struct-_GSocketControlMessageClass struct-_GSocketControlMessageClass-desc)
(set! GSocketControlMessageClass-desc struct-_GSocketControlMessageClass-desc)
(define-fh-compound-type GSocketControlMessageClass GSocketControlMessageClass-desc)

;; struct _GSocketControlMessage {
;;   GObject parent_instance;
;;   GSocketControlMessagePrivate *priv;
;; };
(define struct-_GSocketControlMessage-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GSocketControlMessagePrivate*-desc))))))
(export struct-_GSocketControlMessage-desc)
(define-fh-compound-type/p struct-_GSocketControlMessage struct-_GSocketControlMessage-desc)
(set! GSocketControlMessage-desc struct-_GSocketControlMessage-desc)
(define-fh-compound-type GSocketControlMessage GSocketControlMessage-desc)

;; extern GType g_socket_control_message_get_type(void);
(define ~g_socket_control_message_get_type #f)
(define (g_socket_control_message_get_type)
  (unless
    ~g_socket_control_message_get_type
    (set! ~g_socket_control_message_get_type
      (fh-link-proc
        "g_socket_control_message_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_control_message_get_type)))
(export g_socket_control_message_get_type)

;; extern gsize g_socket_control_message_get_size(GSocketControlMessage *
;;     message);
(define ~g_socket_control_message_get_size #f)
(define (g_socket_control_message_get_size message)
  (unless
    ~g_socket_control_message_get_size
    (set! ~g_socket_control_message_get_size
      (fh-link-proc
        "g_socket_control_message_get_size"
        ffi:unsigned-long
        (list '*))))
  (let ((~message
          (unwrap-GSocketControlMessage* message)))
    (~g_socket_control_message_get_size ~message)))
(export g_socket_control_message_get_size)

;; extern int g_socket_control_message_get_level(GSocketControlMessage *message
;;     );
(define ~g_socket_control_message_get_level #f)
(define (g_socket_control_message_get_level message)
  (unless
    ~g_socket_control_message_get_level
    (set! ~g_socket_control_message_get_level
      (fh-link-proc
        "g_socket_control_message_get_level"
        ffi:int
        (list '*))))
  (let ((~message
          (unwrap-GSocketControlMessage* message)))
    (~g_socket_control_message_get_level ~message)))
(export g_socket_control_message_get_level)

;; extern int g_socket_control_message_get_msg_type(GSocketControlMessage *
;;     message);
(define ~g_socket_control_message_get_msg_type #f)
(define (g_socket_control_message_get_msg_type message)
  (unless
    ~g_socket_control_message_get_msg_type
    (set! ~g_socket_control_message_get_msg_type
      (fh-link-proc
        "g_socket_control_message_get_msg_type"
        ffi:int
        (list '*))))
  (let ((~message
          (unwrap-GSocketControlMessage* message)))
    (~g_socket_control_message_get_msg_type ~message)))
(export g_socket_control_message_get_msg_type)

;; extern void g_socket_control_message_serialize(GSocketControlMessage *
;;     message, gpointer data);
(define ~g_socket_control_message_serialize #f)
(define (g_socket_control_message_serialize message data)
  (unless
    ~g_socket_control_message_serialize
    (set! ~g_socket_control_message_serialize
      (fh-link-proc
        "g_socket_control_message_serialize"
        ffi:void
        (list '* '*))))
  (let ((~message
          (unwrap-GSocketControlMessage* message))
        (~data (unwrap-gpointer data)))
    (~g_socket_control_message_serialize
      ~message
      ~data)))
(export g_socket_control_message_serialize)

;; extern GSocketControlMessage *g_socket_control_message_deserialize(int level
;;     , int type, gsize size, gpointer data);
(define ~g_socket_control_message_deserialize #f)
(define (g_socket_control_message_deserialize
         level
         type
         size
         data)
  (unless
    ~g_socket_control_message_deserialize
    (set! ~g_socket_control_message_deserialize
      (fh-link-proc
        "g_socket_control_message_deserialize"
        '*
        (list ffi:int ffi:int ffi:unsigned-long '*))))
  (let ((~level (unwrap~fixed level))
        (~type (unwrap~fixed type))
        (~size (unwrap~fixed size))
        (~data (unwrap-gpointer data)))
    (wrap-GSocketControlMessage*
      (~g_socket_control_message_deserialize
        ~level
        ~type
        ~size
        ~data))))
(export g_socket_control_message_deserialize)

;; typedef struct _GSocketListenerPrivate GSocketListenerPrivate;
(define GSocketListenerPrivate-desc void)
(export GSocketListenerPrivate-desc)
(define GSocketListenerPrivate*-desc (bs:pointer GSocketListenerPrivate-desc))
(export GSocketListenerPrivate*-desc)
(define-fh-pointer-type GSocketListenerPrivate* GSocketListenerPrivate*-desc)

;; typedef struct _GSocketListenerClass GSocketListenerClass;
(define GSocketListenerClass-desc void)
(export GSocketListenerClass-desc)
(define GSocketListenerClass*-desc (bs:pointer (delay GSocketListenerClass-desc)))
(export GSocketListenerClass*-desc)
(define-fh-pointer-type GSocketListenerClass* GSocketListenerClass*-desc)

;; struct _GSocketListenerClass {
;;   GObjectClass parent_class;
;;   void (*changed)(GSocketListener *listener);
;;   void (*event)(GSocketListener *listener, GSocketListenerEvent *event, 
;;       GSocket *socket);
;;   /* Padding for future expansion */
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;; };
(define struct-_GSocketListenerClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(changed ,(bs:pointer void))
          `(event ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void)))))
(export struct-_GSocketListenerClass-desc)
(define-fh-compound-type/p struct-_GSocketListenerClass struct-_GSocketListenerClass-desc)
(set! GSocketListenerClass-desc struct-_GSocketListenerClass-desc)
(define-fh-compound-type GSocketListenerClass GSocketListenerClass-desc)

;; struct _GSocketListener {
;;   GObject parent_instance;
;;   GSocketListenerPrivate *priv;
;; };
(define struct-_GSocketListener-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GSocketListenerPrivate*-desc))))))
(export struct-_GSocketListener-desc)
(define-fh-compound-type/p struct-_GSocketListener struct-_GSocketListener-desc)
(set! GSocketListener-desc struct-_GSocketListener-desc)
(define-fh-compound-type GSocketListener GSocketListener-desc)

;; extern GType g_socket_listener_get_type(void);
(define ~g_socket_listener_get_type #f)
(define (g_socket_listener_get_type)
  (unless
    ~g_socket_listener_get_type
    (set! ~g_socket_listener_get_type
      (fh-link-proc
        "g_socket_listener_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_listener_get_type)))
(export g_socket_listener_get_type)

;; extern GSocketListener *g_socket_listener_new(void);
(define ~g_socket_listener_new #f)
(define (g_socket_listener_new)
  (unless
    ~g_socket_listener_new
    (set! ~g_socket_listener_new
      (fh-link-proc "g_socket_listener_new" '* (list))))
  (let ()
    (wrap-GSocketListener* (~g_socket_listener_new))))
(export g_socket_listener_new)

;; extern void g_socket_listener_set_backlog(GSocketListener *listener, int 
;;     listen_backlog);
(define ~g_socket_listener_set_backlog #f)
(define (g_socket_listener_set_backlog
         listener
         listen_backlog)
  (unless
    ~g_socket_listener_set_backlog
    (set! ~g_socket_listener_set_backlog
      (fh-link-proc
        "g_socket_listener_set_backlog"
        ffi:void
        (list '* ffi:int))))
  (let ((~listener (unwrap-GSocketListener* listener))
        (~listen_backlog (unwrap~fixed listen_backlog)))
    (~g_socket_listener_set_backlog
      ~listener
      ~listen_backlog)))
(export g_socket_listener_set_backlog)

;; extern gboolean g_socket_listener_add_socket(GSocketListener *listener, 
;;     GSocket *socket, GObject *source_object, GError **error);
(define ~g_socket_listener_add_socket #f)
(define (g_socket_listener_add_socket
         listener
         socket
         source_object
         error)
  (unless
    ~g_socket_listener_add_socket
    (set! ~g_socket_listener_add_socket
      (fh-link-proc
        "g_socket_listener_add_socket"
        ffi:int
        (list '* '* '* '*))))
  (let ((~listener (unwrap-GSocketListener* listener))
        (~socket (unwrap-GSocket* socket))
        (~source_object (unwrap~pointer source_object))
        (~error (unwrap~pointer error)))
    (~g_socket_listener_add_socket
      ~listener
      ~socket
      ~source_object
      ~error)))
(export g_socket_listener_add_socket)

;; extern gboolean g_socket_listener_add_address(GSocketListener *listener, 
;;     GSocketAddress *address, GSocketType type, GSocketProtocol protocol, 
;;     GObject *source_object, GSocketAddress **effective_address, GError **
;;     error);
(define ~g_socket_listener_add_address #f)
(define (g_socket_listener_add_address
         listener
         address
         type
         protocol
         source_object
         effective_address
         error)
  (unless
    ~g_socket_listener_add_address
    (set! ~g_socket_listener_add_address
      (fh-link-proc
        "g_socket_listener_add_address"
        ffi:int
        (list '* '* ffi:int ffi:int '* '* '*))))
  (let ((~listener (unwrap-GSocketListener* listener))
        (~address (unwrap-GSocketAddress* address))
        (~type (unwrap~fixed type))
        (~protocol (unwrap~fixed protocol))
        (~source_object (unwrap~pointer source_object))
        (~effective_address
          (unwrap~pointer effective_address))
        (~error (unwrap~pointer error)))
    (~g_socket_listener_add_address
      ~listener
      ~address
      ~type
      ~protocol
      ~source_object
      ~effective_address
      ~error)))
(export g_socket_listener_add_address)

;; extern gboolean g_socket_listener_add_inet_port(GSocketListener *listener, 
;;     guint16 port, GObject *source_object, GError **error);
(define ~g_socket_listener_add_inet_port #f)
(define (g_socket_listener_add_inet_port
         listener
         port
         source_object
         error)
  (unless
    ~g_socket_listener_add_inet_port
    (set! ~g_socket_listener_add_inet_port
      (fh-link-proc
        "g_socket_listener_add_inet_port"
        ffi:int
        (list '* ffi:unsigned-short '* '*))))
  (let ((~listener (unwrap-GSocketListener* listener))
        (~port (unwrap~fixed port))
        (~source_object (unwrap~pointer source_object))
        (~error (unwrap~pointer error)))
    (~g_socket_listener_add_inet_port
      ~listener
      ~port
      ~source_object
      ~error)))
(export g_socket_listener_add_inet_port)

;; extern guint16 g_socket_listener_add_any_inet_port(GSocketListener *listener
;;     , GObject *source_object, GError **error);
(define ~g_socket_listener_add_any_inet_port #f)
(define (g_socket_listener_add_any_inet_port
         listener
         source_object
         error)
  (unless
    ~g_socket_listener_add_any_inet_port
    (set! ~g_socket_listener_add_any_inet_port
      (fh-link-proc
        "g_socket_listener_add_any_inet_port"
        ffi:unsigned-short
        (list '* '* '*))))
  (let ((~listener (unwrap-GSocketListener* listener))
        (~source_object (unwrap~pointer source_object))
        (~error (unwrap~pointer error)))
    (~g_socket_listener_add_any_inet_port
      ~listener
      ~source_object
      ~error)))
(export g_socket_listener_add_any_inet_port)

;; extern GSocket *g_socket_listener_accept_socket(GSocketListener *listener, 
;;     GObject **source_object, GCancellable *cancellable, GError **error);
(define ~g_socket_listener_accept_socket #f)
(define (g_socket_listener_accept_socket
         listener
         source_object
         cancellable
         error)
  (unless
    ~g_socket_listener_accept_socket
    (set! ~g_socket_listener_accept_socket
      (fh-link-proc
        "g_socket_listener_accept_socket"
        '*
        (list '* '* '* '*))))
  (let ((~listener (unwrap-GSocketListener* listener))
        (~source_object (unwrap~pointer source_object))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GSocket*
      (~g_socket_listener_accept_socket
        ~listener
        ~source_object
        ~cancellable
        ~error))))
(export g_socket_listener_accept_socket)

;; extern void g_socket_listener_accept_socket_async(GSocketListener *listener
;;     , GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_socket_listener_accept_socket_async #f)
(define (g_socket_listener_accept_socket_async
         listener
         cancellable
         callback
         user_data)
  (unless
    ~g_socket_listener_accept_socket_async
    (set! ~g_socket_listener_accept_socket_async
      (fh-link-proc
        "g_socket_listener_accept_socket_async"
        ffi:void
        (list '* '* '* '*))))
  (let ((~listener (unwrap-GSocketListener* listener))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_socket_listener_accept_socket_async
      ~listener
      ~cancellable
      ~callback
      ~user_data)))
(export g_socket_listener_accept_socket_async)

;; extern GSocket *g_socket_listener_accept_socket_finish(GSocketListener *
;;     listener, GAsyncResult *result, GObject **source_object, GError **error)
;;     ;
(define ~g_socket_listener_accept_socket_finish #f)
(define (g_socket_listener_accept_socket_finish
         listener
         result
         source_object
         error)
  (unless
    ~g_socket_listener_accept_socket_finish
    (set! ~g_socket_listener_accept_socket_finish
      (fh-link-proc
        "g_socket_listener_accept_socket_finish"
        '*
        (list '* '* '* '*))))
  (let ((~listener (unwrap-GSocketListener* listener))
        (~result (unwrap-GAsyncResult* result))
        (~source_object (unwrap~pointer source_object))
        (~error (unwrap~pointer error)))
    (wrap-GSocket*
      (~g_socket_listener_accept_socket_finish
        ~listener
        ~result
        ~source_object
        ~error))))
(export g_socket_listener_accept_socket_finish)

;; extern GSocketConnection *g_socket_listener_accept(GSocketListener *listener
;;     , GObject **source_object, GCancellable *cancellable, GError **error);
(define ~g_socket_listener_accept #f)
(define (g_socket_listener_accept
         listener
         source_object
         cancellable
         error)
  (unless
    ~g_socket_listener_accept
    (set! ~g_socket_listener_accept
      (fh-link-proc
        "g_socket_listener_accept"
        '*
        (list '* '* '* '*))))
  (let ((~listener (unwrap-GSocketListener* listener))
        (~source_object (unwrap~pointer source_object))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnection*
      (~g_socket_listener_accept
        ~listener
        ~source_object
        ~cancellable
        ~error))))
(export g_socket_listener_accept)

;; extern void g_socket_listener_accept_async(GSocketListener *listener, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_socket_listener_accept_async #f)
(define (g_socket_listener_accept_async
         listener
         cancellable
         callback
         user_data)
  (unless
    ~g_socket_listener_accept_async
    (set! ~g_socket_listener_accept_async
      (fh-link-proc
        "g_socket_listener_accept_async"
        ffi:void
        (list '* '* '* '*))))
  (let ((~listener (unwrap-GSocketListener* listener))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_socket_listener_accept_async
      ~listener
      ~cancellable
      ~callback
      ~user_data)))
(export g_socket_listener_accept_async)

;; extern GSocketConnection *g_socket_listener_accept_finish(GSocketListener *
;;     listener, GAsyncResult *result, GObject **source_object, GError **error)
;;     ;
(define ~g_socket_listener_accept_finish #f)
(define (g_socket_listener_accept_finish
         listener
         result
         source_object
         error)
  (unless
    ~g_socket_listener_accept_finish
    (set! ~g_socket_listener_accept_finish
      (fh-link-proc
        "g_socket_listener_accept_finish"
        '*
        (list '* '* '* '*))))
  (let ((~listener (unwrap-GSocketListener* listener))
        (~result (unwrap-GAsyncResult* result))
        (~source_object (unwrap~pointer source_object))
        (~error (unwrap~pointer error)))
    (wrap-GSocketConnection*
      (~g_socket_listener_accept_finish
        ~listener
        ~result
        ~source_object
        ~error))))
(export g_socket_listener_accept_finish)

;; extern void g_socket_listener_close(GSocketListener *listener);
(define ~g_socket_listener_close #f)
(define (g_socket_listener_close listener)
  (unless
    ~g_socket_listener_close
    (set! ~g_socket_listener_close
      (fh-link-proc
        "g_socket_listener_close"
        ffi:void
        (list '*))))
  (let ((~listener (unwrap-GSocketListener* listener)))
    (~g_socket_listener_close ~listener)))
(export g_socket_listener_close)

;; typedef struct _GSocketServicePrivate GSocketServicePrivate;
(define GSocketServicePrivate-desc void)
(export GSocketServicePrivate-desc)
(define GSocketServicePrivate*-desc (bs:pointer GSocketServicePrivate-desc))
(export GSocketServicePrivate*-desc)
(define-fh-pointer-type GSocketServicePrivate* GSocketServicePrivate*-desc)

;; typedef struct _GSocketServiceClass GSocketServiceClass;
(define GSocketServiceClass-desc void)
(export GSocketServiceClass-desc)
(define GSocketServiceClass*-desc (bs:pointer (delay GSocketServiceClass-desc)))
(export GSocketServiceClass*-desc)
(define-fh-pointer-type GSocketServiceClass* GSocketServiceClass*-desc)

;; struct _GSocketServiceClass {
;;   GSocketListenerClass parent_class;
;;   gboolean (*incoming)(GSocketService *service, GSocketConnection *
;;       connection, GObject *source_object);
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;; };
(define struct-_GSocketServiceClass-desc
  (bs:struct
    (list `(parent_class ,GSocketListenerClass-desc)
          `(incoming ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void)))))
(export struct-_GSocketServiceClass-desc)
(define-fh-compound-type/p struct-_GSocketServiceClass struct-_GSocketServiceClass-desc)
(set! GSocketServiceClass-desc struct-_GSocketServiceClass-desc)
(define-fh-compound-type GSocketServiceClass GSocketServiceClass-desc)

;; struct _GSocketService {
;;   GSocketListener parent_instance;
;;   GSocketServicePrivate *priv;
;; };
(define struct-_GSocketService-desc
  (bs:struct
    (list `(parent_instance ,GSocketListener-desc)
          `(priv ,(bs:pointer (delay GSocketServicePrivate*-desc))))))
(export struct-_GSocketService-desc)
(define-fh-compound-type/p struct-_GSocketService struct-_GSocketService-desc)
(set! GSocketService-desc struct-_GSocketService-desc)
(define-fh-compound-type GSocketService GSocketService-desc)

;; extern GType g_socket_service_get_type(void);
(define ~g_socket_service_get_type #f)
(define (g_socket_service_get_type)
  (unless
    ~g_socket_service_get_type
    (set! ~g_socket_service_get_type
      (fh-link-proc
        "g_socket_service_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_socket_service_get_type)))
(export g_socket_service_get_type)

;; extern GSocketService *g_socket_service_new(void);
(define ~g_socket_service_new #f)
(define (g_socket_service_new)
  (unless
    ~g_socket_service_new
    (set! ~g_socket_service_new
      (fh-link-proc "g_socket_service_new" '* (list))))
  (let ()
    (wrap-GSocketService* (~g_socket_service_new))))
(export g_socket_service_new)

;; extern void g_socket_service_start(GSocketService *service);
(define ~g_socket_service_start #f)
(define (g_socket_service_start service)
  (unless
    ~g_socket_service_start
    (set! ~g_socket_service_start
      (fh-link-proc
        "g_socket_service_start"
        ffi:void
        (list '*))))
  (let ((~service (unwrap-GSocketService* service)))
    (~g_socket_service_start ~service)))
(export g_socket_service_start)

;; extern void g_socket_service_stop(GSocketService *service);
(define ~g_socket_service_stop #f)
(define (g_socket_service_stop service)
  (unless
    ~g_socket_service_stop
    (set! ~g_socket_service_stop
      (fh-link-proc
        "g_socket_service_stop"
        ffi:void
        (list '*))))
  (let ((~service (unwrap-GSocketService* service)))
    (~g_socket_service_stop ~service)))
(export g_socket_service_stop)

;; extern gboolean g_socket_service_is_active(GSocketService *service);
(define ~g_socket_service_is_active #f)
(define (g_socket_service_is_active service)
  (unless
    ~g_socket_service_is_active
    (set! ~g_socket_service_is_active
      (fh-link-proc
        "g_socket_service_is_active"
        ffi:int
        (list '*))))
  (let ((~service (unwrap-GSocketService* service)))
    (~g_socket_service_is_active ~service)))
(export g_socket_service_is_active)

;; extern GType g_srv_target_get_type(void);
(define ~g_srv_target_get_type #f)
(define (g_srv_target_get_type)
  (unless
    ~g_srv_target_get_type
    (set! ~g_srv_target_get_type
      (fh-link-proc
        "g_srv_target_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_srv_target_get_type)))
(export g_srv_target_get_type)

;; extern GSrvTarget *g_srv_target_new(const gchar *hostname, guint16 port, 
;;     guint16 priority, guint16 weight);
(define ~g_srv_target_new #f)
(define (g_srv_target_new hostname port priority weight)
  (unless
    ~g_srv_target_new
    (set! ~g_srv_target_new
      (fh-link-proc
        "g_srv_target_new"
        '*
        (list '*
              ffi:unsigned-short
              ffi:unsigned-short
              ffi:unsigned-short))))
  (let ((~hostname (unwrap~pointer hostname))
        (~port (unwrap~fixed port))
        (~priority (unwrap~fixed priority))
        (~weight (unwrap~fixed weight)))
    (wrap-GSrvTarget*
      (~g_srv_target_new
        ~hostname
        ~port
        ~priority
        ~weight))))
(export g_srv_target_new)

;; extern GSrvTarget *g_srv_target_copy(GSrvTarget *target);
(define ~g_srv_target_copy #f)
(define (g_srv_target_copy target)
  (unless
    ~g_srv_target_copy
    (set! ~g_srv_target_copy
      (fh-link-proc "g_srv_target_copy" '* (list '*))))
  (let ((~target (unwrap-GSrvTarget* target)))
    (wrap-GSrvTarget* (~g_srv_target_copy ~target))))
(export g_srv_target_copy)

;; extern void g_srv_target_free(GSrvTarget *target);
(define ~g_srv_target_free #f)
(define (g_srv_target_free target)
  (unless
    ~g_srv_target_free
    (set! ~g_srv_target_free
      (fh-link-proc
        "g_srv_target_free"
        ffi:void
        (list '*))))
  (let ((~target (unwrap-GSrvTarget* target)))
    (~g_srv_target_free ~target)))
(export g_srv_target_free)

;; extern const gchar *g_srv_target_get_hostname(GSrvTarget *target);
(define ~g_srv_target_get_hostname #f)
(define (g_srv_target_get_hostname target)
  (unless
    ~g_srv_target_get_hostname
    (set! ~g_srv_target_get_hostname
      (fh-link-proc
        "g_srv_target_get_hostname"
        '*
        (list '*))))
  (let ((~target (unwrap-GSrvTarget* target)))
    (~g_srv_target_get_hostname ~target)))
(export g_srv_target_get_hostname)

;; extern guint16 g_srv_target_get_port(GSrvTarget *target);
(define ~g_srv_target_get_port #f)
(define (g_srv_target_get_port target)
  (unless
    ~g_srv_target_get_port
    (set! ~g_srv_target_get_port
      (fh-link-proc
        "g_srv_target_get_port"
        ffi:unsigned-short
        (list '*))))
  (let ((~target (unwrap-GSrvTarget* target)))
    (~g_srv_target_get_port ~target)))
(export g_srv_target_get_port)

;; extern guint16 g_srv_target_get_priority(GSrvTarget *target);
(define ~g_srv_target_get_priority #f)
(define (g_srv_target_get_priority target)
  (unless
    ~g_srv_target_get_priority
    (set! ~g_srv_target_get_priority
      (fh-link-proc
        "g_srv_target_get_priority"
        ffi:unsigned-short
        (list '*))))
  (let ((~target (unwrap-GSrvTarget* target)))
    (~g_srv_target_get_priority ~target)))
(export g_srv_target_get_priority)

;; extern guint16 g_srv_target_get_weight(GSrvTarget *target);
(define ~g_srv_target_get_weight #f)
(define (g_srv_target_get_weight target)
  (unless
    ~g_srv_target_get_weight
    (set! ~g_srv_target_get_weight
      (fh-link-proc
        "g_srv_target_get_weight"
        ffi:unsigned-short
        (list '*))))
  (let ((~target (unwrap-GSrvTarget* target)))
    (~g_srv_target_get_weight ~target)))
(export g_srv_target_get_weight)

;; extern GList *g_srv_target_list_sort(GList *targets);
(define ~g_srv_target_list_sort #f)
(define (g_srv_target_list_sort targets)
  (unless
    ~g_srv_target_list_sort
    (set! ~g_srv_target_list_sort
      (fh-link-proc
        "g_srv_target_list_sort"
        '*
        (list '*))))
  (let () (~g_srv_target_list_sort targets)))
(export g_srv_target_list_sort)

;; typedef struct _GSimpleProxyResolver GSimpleProxyResolver;
(define GSimpleProxyResolver-desc void)
(export GSimpleProxyResolver-desc)
(define GSimpleProxyResolver*-desc (bs:pointer (delay GSimpleProxyResolver-desc)))
(export GSimpleProxyResolver*-desc)
(define-fh-pointer-type GSimpleProxyResolver* GSimpleProxyResolver*-desc)

;; typedef struct _GSimpleProxyResolverPrivate GSimpleProxyResolverPrivate;
(define GSimpleProxyResolverPrivate-desc void)
(export GSimpleProxyResolverPrivate-desc)
(define GSimpleProxyResolverPrivate*-desc (bs:pointer GSimpleProxyResolverPrivate-desc))
(export GSimpleProxyResolverPrivate*-desc)
(define-fh-pointer-type GSimpleProxyResolverPrivate* GSimpleProxyResolverPrivate*-desc)

;; typedef struct _GSimpleProxyResolverClass GSimpleProxyResolverClass;
(define GSimpleProxyResolverClass-desc void)
(export GSimpleProxyResolverClass-desc)
(define GSimpleProxyResolverClass*-desc (bs:pointer (delay GSimpleProxyResolverClass-desc)))
(export GSimpleProxyResolverClass*-desc)
(define-fh-pointer-type GSimpleProxyResolverClass* GSimpleProxyResolverClass*-desc)

;; struct _GSimpleProxyResolver {
;;   GObject parent_instance;
;;   /*< private >*/
;;   GSimpleProxyResolverPrivate *priv;
;; };
(define struct-_GSimpleProxyResolver-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GSimpleProxyResolverPrivate*-desc))))))
(export struct-_GSimpleProxyResolver-desc)
(define-fh-compound-type/p struct-_GSimpleProxyResolver struct-_GSimpleProxyResolver-desc)
(set! GSimpleProxyResolver-desc struct-_GSimpleProxyResolver-desc)
(define-fh-compound-type GSimpleProxyResolver GSimpleProxyResolver-desc)

;; struct _GSimpleProxyResolverClass {
;;   GObjectClass parent_class;
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GSimpleProxyResolverClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GSimpleProxyResolverClass-desc)
(define-fh-compound-type/p struct-_GSimpleProxyResolverClass struct-_GSimpleProxyResolverClass-desc)
(set! GSimpleProxyResolverClass-desc struct-_GSimpleProxyResolverClass-desc)
(define-fh-compound-type GSimpleProxyResolverClass GSimpleProxyResolverClass-desc)

;; extern GType g_simple_proxy_resolver_get_type(void);
(define ~g_simple_proxy_resolver_get_type #f)
(define (g_simple_proxy_resolver_get_type)
  (unless
    ~g_simple_proxy_resolver_get_type
    (set! ~g_simple_proxy_resolver_get_type
      (fh-link-proc
        "g_simple_proxy_resolver_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_simple_proxy_resolver_get_type)))
(export g_simple_proxy_resolver_get_type)

;; extern GProxyResolver *g_simple_proxy_resolver_new(const gchar *
;;     default_proxy, gchar **ignore_hosts);
(define ~g_simple_proxy_resolver_new #f)
(define (g_simple_proxy_resolver_new
         default_proxy
         ignore_hosts)
  (unless
    ~g_simple_proxy_resolver_new
    (set! ~g_simple_proxy_resolver_new
      (fh-link-proc
        "g_simple_proxy_resolver_new"
        '*
        (list '* '*))))
  (let ((~default_proxy (unwrap~pointer default_proxy))
        (~ignore_hosts (unwrap~pointer ignore_hosts)))
    (wrap-GProxyResolver*
      (~g_simple_proxy_resolver_new
        ~default_proxy
        ~ignore_hosts))))
(export g_simple_proxy_resolver_new)

;; extern void g_simple_proxy_resolver_set_default_proxy(GSimpleProxyResolver *
;;     resolver, const gchar *default_proxy);
(define ~g_simple_proxy_resolver_set_default_proxy #f)
(define (g_simple_proxy_resolver_set_default_proxy
         resolver
         default_proxy)
  (unless
    ~g_simple_proxy_resolver_set_default_proxy
    (set! ~g_simple_proxy_resolver_set_default_proxy
      (fh-link-proc
        "g_simple_proxy_resolver_set_default_proxy"
        ffi:void
        (list '* '*))))
  (let ((~resolver
          (unwrap-GSimpleProxyResolver* resolver))
        (~default_proxy (unwrap~pointer default_proxy)))
    (~g_simple_proxy_resolver_set_default_proxy
      ~resolver
      ~default_proxy)))
(export g_simple_proxy_resolver_set_default_proxy)

;; extern void g_simple_proxy_resolver_set_ignore_hosts(GSimpleProxyResolver *
;;     resolver, gchar **ignore_hosts);
(define ~g_simple_proxy_resolver_set_ignore_hosts #f)
(define (g_simple_proxy_resolver_set_ignore_hosts
         resolver
         ignore_hosts)
  (unless
    ~g_simple_proxy_resolver_set_ignore_hosts
    (set! ~g_simple_proxy_resolver_set_ignore_hosts
      (fh-link-proc
        "g_simple_proxy_resolver_set_ignore_hosts"
        ffi:void
        (list '* '*))))
  (let ((~resolver
          (unwrap-GSimpleProxyResolver* resolver))
        (~ignore_hosts (unwrap~pointer ignore_hosts)))
    (~g_simple_proxy_resolver_set_ignore_hosts
      ~resolver
      ~ignore_hosts)))
(export g_simple_proxy_resolver_set_ignore_hosts)

;; extern void g_simple_proxy_resolver_set_uri_proxy(GSimpleProxyResolver *
;;     resolver, const gchar *uri_scheme, const gchar *proxy);
(define ~g_simple_proxy_resolver_set_uri_proxy #f)
(define (g_simple_proxy_resolver_set_uri_proxy
         resolver
         uri_scheme
         proxy)
  (unless
    ~g_simple_proxy_resolver_set_uri_proxy
    (set! ~g_simple_proxy_resolver_set_uri_proxy
      (fh-link-proc
        "g_simple_proxy_resolver_set_uri_proxy"
        ffi:void
        (list '* '* '*))))
  (let ((~resolver
          (unwrap-GSimpleProxyResolver* resolver))
        (~uri_scheme (unwrap~pointer uri_scheme))
        (~proxy (unwrap~pointer proxy)))
    (~g_simple_proxy_resolver_set_uri_proxy
      ~resolver
      ~uri_scheme
      ~proxy)))
(export g_simple_proxy_resolver_set_uri_proxy)

;; typedef struct _GTaskClass GTaskClass;
(define GTaskClass-desc void)
(export GTaskClass-desc)
(define GTaskClass*-desc (bs:pointer GTaskClass-desc))
(export GTaskClass*-desc)
(define-fh-pointer-type GTaskClass* GTaskClass*-desc)

;; extern GType g_task_get_type(void);
(define ~g_task_get_type #f)
(define (g_task_get_type)
  (unless
    ~g_task_get_type
    (set! ~g_task_get_type
      (fh-link-proc
        "g_task_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_task_get_type)))
(export g_task_get_type)

;; extern GTask *g_task_new(gpointer source_object, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer callback_data);
(define ~g_task_new #f)
(define (g_task_new
         source_object
         cancellable
         callback
         callback_data)
  (unless
    ~g_task_new
    (set! ~g_task_new
      (fh-link-proc "g_task_new" '* (list '* '* '* '*))))
  (let ((~source_object (unwrap-gpointer source_object))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~callback_data (unwrap-gpointer callback_data)))
    (wrap-GTask*
      (~g_task_new
        ~source_object
        ~cancellable
        ~callback
        ~callback_data))))
(export g_task_new)

;; extern void g_task_report_error(gpointer source_object, GAsyncReadyCallback 
;;     callback, gpointer callback_data, gpointer source_tag, GError *error);
(define ~g_task_report_error #f)
(define (g_task_report_error
         source_object
         callback
         callback_data
         source_tag
         error)
  (unless
    ~g_task_report_error
    (set! ~g_task_report_error
      (fh-link-proc
        "g_task_report_error"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~source_object (unwrap-gpointer source_object))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~callback_data (unwrap-gpointer callback_data))
        (~source_tag (unwrap-gpointer source_tag)))
    (~g_task_report_error
      ~source_object
      ~callback
      ~callback_data
      ~source_tag
      error)))
(export g_task_report_error)

;; extern void g_task_report_new_error(gpointer source_object, 
;;     GAsyncReadyCallback callback, gpointer callback_data, gpointer 
;;     source_tag, GQuark domain, gint code, const char *format, ...);
;; ... failed.

;; extern void g_task_set_task_data(GTask *task, gpointer task_data, 
;;     GDestroyNotify task_data_destroy);
(define ~g_task_set_task_data #f)
(define (g_task_set_task_data
         task
         task_data
         task_data_destroy)
  (unless
    ~g_task_set_task_data
    (set! ~g_task_set_task_data
      (fh-link-proc
        "g_task_set_task_data"
        ffi:void
        (list '* '* '*))))
  (let ((~task (unwrap-GTask* task))
        (~task_data (unwrap-gpointer task_data))
        (~task_data_destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           task_data_destroy)))
    (~g_task_set_task_data
      ~task
      ~task_data
      ~task_data_destroy)))
(export g_task_set_task_data)

;; extern void g_task_set_priority(GTask *task, gint priority);
(define ~g_task_set_priority #f)
(define (g_task_set_priority task priority)
  (unless
    ~g_task_set_priority
    (set! ~g_task_set_priority
      (fh-link-proc
        "g_task_set_priority"
        ffi:void
        (list '* ffi:int))))
  (let ((~task (unwrap-GTask* task))
        (~priority (unwrap~fixed priority)))
    (~g_task_set_priority ~task ~priority)))
(export g_task_set_priority)

;; extern void g_task_set_check_cancellable(GTask *task, gboolean 
;;     check_cancellable);
(define ~g_task_set_check_cancellable #f)
(define (g_task_set_check_cancellable
         task
         check_cancellable)
  (unless
    ~g_task_set_check_cancellable
    (set! ~g_task_set_check_cancellable
      (fh-link-proc
        "g_task_set_check_cancellable"
        ffi:void
        (list '* ffi:int))))
  (let ((~task (unwrap-GTask* task))
        (~check_cancellable
          (unwrap~fixed check_cancellable)))
    (~g_task_set_check_cancellable
      ~task
      ~check_cancellable)))
(export g_task_set_check_cancellable)

;; extern void g_task_set_source_tag(GTask *task, gpointer source_tag);
(define ~g_task_set_source_tag #f)
(define (g_task_set_source_tag task source_tag)
  (unless
    ~g_task_set_source_tag
    (set! ~g_task_set_source_tag
      (fh-link-proc
        "g_task_set_source_tag"
        ffi:void
        (list '* '*))))
  (let ((~task (unwrap-GTask* task))
        (~source_tag (unwrap-gpointer source_tag)))
    (~g_task_set_source_tag ~task ~source_tag)))
(export g_task_set_source_tag)

;; extern gpointer g_task_get_source_object(GTask *task);
(define ~g_task_get_source_object #f)
(define (g_task_get_source_object task)
  (unless
    ~g_task_get_source_object
    (set! ~g_task_get_source_object
      (fh-link-proc
        "g_task_get_source_object"
        '*
        (list '*))))
  (let ((~task (unwrap-GTask* task)))
    (wrap-gpointer (~g_task_get_source_object ~task))))
(export g_task_get_source_object)

;; extern gpointer g_task_get_task_data(GTask *task);
(define ~g_task_get_task_data #f)
(define (g_task_get_task_data task)
  (unless
    ~g_task_get_task_data
    (set! ~g_task_get_task_data
      (fh-link-proc
        "g_task_get_task_data"
        '*
        (list '*))))
  (let ((~task (unwrap-GTask* task)))
    (wrap-gpointer (~g_task_get_task_data ~task))))
(export g_task_get_task_data)

;; extern gint g_task_get_priority(GTask *task);
(define ~g_task_get_priority #f)
(define (g_task_get_priority task)
  (unless
    ~g_task_get_priority
    (set! ~g_task_get_priority
      (fh-link-proc
        "g_task_get_priority"
        ffi:int
        (list '*))))
  (let ((~task (unwrap-GTask* task)))
    (~g_task_get_priority ~task)))
(export g_task_get_priority)

;; extern GMainContext *g_task_get_context(GTask *task);
(define ~g_task_get_context #f)
(define (g_task_get_context task)
  (unless
    ~g_task_get_context
    (set! ~g_task_get_context
      (fh-link-proc "g_task_get_context" '* (list '*))))
  (let ((~task (unwrap-GTask* task)))
    (~g_task_get_context ~task)))
(export g_task_get_context)

;; extern GCancellable *g_task_get_cancellable(GTask *task);
(define ~g_task_get_cancellable #f)
(define (g_task_get_cancellable task)
  (unless
    ~g_task_get_cancellable
    (set! ~g_task_get_cancellable
      (fh-link-proc
        "g_task_get_cancellable"
        '*
        (list '*))))
  (let ((~task (unwrap-GTask* task)))
    (wrap-GCancellable*
      (~g_task_get_cancellable ~task))))
(export g_task_get_cancellable)

;; extern gboolean g_task_get_check_cancellable(GTask *task);
(define ~g_task_get_check_cancellable #f)
(define (g_task_get_check_cancellable task)
  (unless
    ~g_task_get_check_cancellable
    (set! ~g_task_get_check_cancellable
      (fh-link-proc
        "g_task_get_check_cancellable"
        ffi:int
        (list '*))))
  (let ((~task (unwrap-GTask* task)))
    (~g_task_get_check_cancellable ~task)))
(export g_task_get_check_cancellable)

;; extern gpointer g_task_get_source_tag(GTask *task);
(define ~g_task_get_source_tag #f)
(define (g_task_get_source_tag task)
  (unless
    ~g_task_get_source_tag
    (set! ~g_task_get_source_tag
      (fh-link-proc
        "g_task_get_source_tag"
        '*
        (list '*))))
  (let ((~task (unwrap-GTask* task)))
    (wrap-gpointer (~g_task_get_source_tag ~task))))
(export g_task_get_source_tag)

;; extern gboolean g_task_is_valid(gpointer result, gpointer source_object);
(define ~g_task_is_valid #f)
(define (g_task_is_valid result source_object)
  (unless
    ~g_task_is_valid
    (set! ~g_task_is_valid
      (fh-link-proc
        "g_task_is_valid"
        ffi:int
        (list '* '*))))
  (let ((~result (unwrap-gpointer result))
        (~source_object (unwrap-gpointer source_object)))
    (~g_task_is_valid ~result ~source_object)))
(export g_task_is_valid)

;; typedef void (*GTaskThreadFunc)(GTask *task, gpointer source_object, 
;;     gpointer task_data, GCancellable *cancellable);
(define-fh-function/p GTaskThreadFunc
  ffi:void (list (quote *) (quote *) (quote *) (quote *)))

;; extern void g_task_run_in_thread(GTask *task, GTaskThreadFunc task_func);
(define ~g_task_run_in_thread #f)
(define (g_task_run_in_thread task task_func)
  (unless
    ~g_task_run_in_thread
    (set! ~g_task_run_in_thread
      (fh-link-proc
        "g_task_run_in_thread"
        ffi:void
        (list '* '*))))
  (let ((~task (unwrap-GTask* task))
        (~task_func
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* '* '*))
           task_func)))
    (~g_task_run_in_thread ~task ~task_func)))
(export g_task_run_in_thread)

;; extern void g_task_run_in_thread_sync(GTask *task, GTaskThreadFunc task_func
;;     );
(define ~g_task_run_in_thread_sync #f)
(define (g_task_run_in_thread_sync task task_func)
  (unless
    ~g_task_run_in_thread_sync
    (set! ~g_task_run_in_thread_sync
      (fh-link-proc
        "g_task_run_in_thread_sync"
        ffi:void
        (list '* '*))))
  (let ((~task (unwrap-GTask* task))
        (~task_func
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* '* '*))
           task_func)))
    (~g_task_run_in_thread_sync ~task ~task_func)))
(export g_task_run_in_thread_sync)

;; extern gboolean g_task_set_return_on_cancel(GTask *task, gboolean 
;;     return_on_cancel);
(define ~g_task_set_return_on_cancel #f)
(define (g_task_set_return_on_cancel
         task
         return_on_cancel)
  (unless
    ~g_task_set_return_on_cancel
    (set! ~g_task_set_return_on_cancel
      (fh-link-proc
        "g_task_set_return_on_cancel"
        ffi:int
        (list '* ffi:int))))
  (let ((~task (unwrap-GTask* task))
        (~return_on_cancel
          (unwrap~fixed return_on_cancel)))
    (~g_task_set_return_on_cancel
      ~task
      ~return_on_cancel)))
(export g_task_set_return_on_cancel)

;; extern gboolean g_task_get_return_on_cancel(GTask *task);
(define ~g_task_get_return_on_cancel #f)
(define (g_task_get_return_on_cancel task)
  (unless
    ~g_task_get_return_on_cancel
    (set! ~g_task_get_return_on_cancel
      (fh-link-proc
        "g_task_get_return_on_cancel"
        ffi:int
        (list '*))))
  (let ((~task (unwrap-GTask* task)))
    (~g_task_get_return_on_cancel ~task)))
(export g_task_get_return_on_cancel)

;; extern void g_task_attach_source(GTask *task, GSource *source, GSourceFunc 
;;     callback);
(define ~g_task_attach_source #f)
(define (g_task_attach_source task source callback)
  (unless
    ~g_task_attach_source
    (set! ~g_task_attach_source
      (fh-link-proc
        "g_task_attach_source"
        ffi:void
        (list '* '* '*))))
  (let ((~task (unwrap-GTask* task))
        (~callback
          ((make-ftn-arg-unwrapper ffi:int (list '*))
           callback)))
    (~g_task_attach_source ~task source ~callback)))
(export g_task_attach_source)

;; extern void g_task_return_pointer(GTask *task, gpointer result, 
;;     GDestroyNotify result_destroy);
(define ~g_task_return_pointer #f)
(define (g_task_return_pointer
         task
         result
         result_destroy)
  (unless
    ~g_task_return_pointer
    (set! ~g_task_return_pointer
      (fh-link-proc
        "g_task_return_pointer"
        ffi:void
        (list '* '* '*))))
  (let ((~task (unwrap-GTask* task))
        (~result (unwrap-gpointer result))
        (~result_destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           result_destroy)))
    (~g_task_return_pointer
      ~task
      ~result
      ~result_destroy)))
(export g_task_return_pointer)

;; extern void g_task_return_boolean(GTask *task, gboolean result);
(define ~g_task_return_boolean #f)
(define (g_task_return_boolean task result)
  (unless
    ~g_task_return_boolean
    (set! ~g_task_return_boolean
      (fh-link-proc
        "g_task_return_boolean"
        ffi:void
        (list '* ffi:int))))
  (let ((~task (unwrap-GTask* task))
        (~result (unwrap~fixed result)))
    (~g_task_return_boolean ~task ~result)))
(export g_task_return_boolean)

;; extern void g_task_return_int(GTask *task, gssize result);
(define ~g_task_return_int #f)
(define (g_task_return_int task result)
  (unless
    ~g_task_return_int
    (set! ~g_task_return_int
      (fh-link-proc
        "g_task_return_int"
        ffi:void
        (list '* ffi:long))))
  (let ((~task (unwrap-GTask* task))
        (~result (unwrap~fixed result)))
    (~g_task_return_int ~task ~result)))
(export g_task_return_int)

;; extern void g_task_return_error(GTask *task, GError *error);
(define ~g_task_return_error #f)
(define (g_task_return_error task error)
  (unless
    ~g_task_return_error
    (set! ~g_task_return_error
      (fh-link-proc
        "g_task_return_error"
        ffi:void
        (list '* '*))))
  (let ((~task (unwrap-GTask* task)))
    (~g_task_return_error ~task error)))
(export g_task_return_error)

;; extern void g_task_return_new_error(GTask *task, GQuark domain, gint code, 
;;     const char *format, ...);
;; ... failed.

;; extern gboolean g_task_return_error_if_cancelled(GTask *task);
(define ~g_task_return_error_if_cancelled #f)
(define (g_task_return_error_if_cancelled task)
  (unless
    ~g_task_return_error_if_cancelled
    (set! ~g_task_return_error_if_cancelled
      (fh-link-proc
        "g_task_return_error_if_cancelled"
        ffi:int
        (list '*))))
  (let ((~task (unwrap-GTask* task)))
    (~g_task_return_error_if_cancelled ~task)))
(export g_task_return_error_if_cancelled)

;; extern gpointer g_task_propagate_pointer(GTask *task, GError **error);
(define ~g_task_propagate_pointer #f)
(define (g_task_propagate_pointer task error)
  (unless
    ~g_task_propagate_pointer
    (set! ~g_task_propagate_pointer
      (fh-link-proc
        "g_task_propagate_pointer"
        '*
        (list '* '*))))
  (let ((~task (unwrap-GTask* task))
        (~error (unwrap~pointer error)))
    (wrap-gpointer
      (~g_task_propagate_pointer ~task ~error))))
(export g_task_propagate_pointer)

;; extern gboolean g_task_propagate_boolean(GTask *task, GError **error);
(define ~g_task_propagate_boolean #f)
(define (g_task_propagate_boolean task error)
  (unless
    ~g_task_propagate_boolean
    (set! ~g_task_propagate_boolean
      (fh-link-proc
        "g_task_propagate_boolean"
        ffi:int
        (list '* '*))))
  (let ((~task (unwrap-GTask* task))
        (~error (unwrap~pointer error)))
    (~g_task_propagate_boolean ~task ~error)))
(export g_task_propagate_boolean)

;; extern gssize g_task_propagate_int(GTask *task, GError **error);
(define ~g_task_propagate_int #f)
(define (g_task_propagate_int task error)
  (unless
    ~g_task_propagate_int
    (set! ~g_task_propagate_int
      (fh-link-proc
        "g_task_propagate_int"
        ffi:long
        (list '* '*))))
  (let ((~task (unwrap-GTask* task))
        (~error (unwrap~pointer error)))
    (~g_task_propagate_int ~task ~error)))
(export g_task_propagate_int)

;; extern gboolean g_task_had_error(GTask *task);
(define ~g_task_had_error #f)
(define (g_task_had_error task)
  (unless
    ~g_task_had_error
    (set! ~g_task_had_error
      (fh-link-proc
        "g_task_had_error"
        ffi:int
        (list '*))))
  (let ((~task (unwrap-GTask* task)))
    (~g_task_had_error ~task)))
(export g_task_had_error)

;; extern gboolean g_task_get_completed(GTask *task);
(define ~g_task_get_completed #f)
(define (g_task_get_completed task)
  (unless
    ~g_task_get_completed
    (set! ~g_task_get_completed
      (fh-link-proc
        "g_task_get_completed"
        ffi:int
        (list '*))))
  (let ((~task (unwrap-GTask* task)))
    (~g_task_get_completed ~task)))
(export g_task_get_completed)

;; extern GType g_subprocess_get_type(void);
(define ~g_subprocess_get_type #f)
(define (g_subprocess_get_type)
  (unless
    ~g_subprocess_get_type
    (set! ~g_subprocess_get_type
      (fh-link-proc
        "g_subprocess_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_subprocess_get_type)))
(export g_subprocess_get_type)

;; extern GSubprocess *g_subprocess_new(GSubprocessFlags flags, GError **error
;;     , const gchar *argv0, ...);
;; ... failed.

;; extern GSubprocess *g_subprocess_newv(const gchar *const*argv, 
;;     GSubprocessFlags flags, GError **error);
(define ~g_subprocess_newv #f)
(define (g_subprocess_newv argv flags error)
  (unless
    ~g_subprocess_newv
    (set! ~g_subprocess_newv
      (fh-link-proc
        "g_subprocess_newv"
        '*
        (list '* ffi:int '*))))
  (let ((~argv (unwrap~pointer argv))
        (~flags (unwrap~fixed flags))
        (~error (unwrap~pointer error)))
    (wrap-GSubprocess*
      (~g_subprocess_newv ~argv ~flags ~error))))
(export g_subprocess_newv)

;; extern GOutputStream *g_subprocess_get_stdin_pipe(GSubprocess *subprocess);
(define ~g_subprocess_get_stdin_pipe #f)
(define (g_subprocess_get_stdin_pipe subprocess)
  (unless
    ~g_subprocess_get_stdin_pipe
    (set! ~g_subprocess_get_stdin_pipe
      (fh-link-proc
        "g_subprocess_get_stdin_pipe"
        '*
        (list '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess)))
    (wrap-GOutputStream*
      (~g_subprocess_get_stdin_pipe ~subprocess))))
(export g_subprocess_get_stdin_pipe)

;; extern GInputStream *g_subprocess_get_stdout_pipe(GSubprocess *subprocess);
(define ~g_subprocess_get_stdout_pipe #f)
(define (g_subprocess_get_stdout_pipe subprocess)
  (unless
    ~g_subprocess_get_stdout_pipe
    (set! ~g_subprocess_get_stdout_pipe
      (fh-link-proc
        "g_subprocess_get_stdout_pipe"
        '*
        (list '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess)))
    (wrap-GInputStream*
      (~g_subprocess_get_stdout_pipe ~subprocess))))
(export g_subprocess_get_stdout_pipe)

;; extern GInputStream *g_subprocess_get_stderr_pipe(GSubprocess *subprocess);
(define ~g_subprocess_get_stderr_pipe #f)
(define (g_subprocess_get_stderr_pipe subprocess)
  (unless
    ~g_subprocess_get_stderr_pipe
    (set! ~g_subprocess_get_stderr_pipe
      (fh-link-proc
        "g_subprocess_get_stderr_pipe"
        '*
        (list '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess)))
    (wrap-GInputStream*
      (~g_subprocess_get_stderr_pipe ~subprocess))))
(export g_subprocess_get_stderr_pipe)

;; extern const gchar *g_subprocess_get_identifier(GSubprocess *subprocess);
(define ~g_subprocess_get_identifier #f)
(define (g_subprocess_get_identifier subprocess)
  (unless
    ~g_subprocess_get_identifier
    (set! ~g_subprocess_get_identifier
      (fh-link-proc
        "g_subprocess_get_identifier"
        '*
        (list '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess)))
    (~g_subprocess_get_identifier ~subprocess)))
(export g_subprocess_get_identifier)

;; extern void g_subprocess_send_signal(GSubprocess *subprocess, gint 
;;     signal_num);
(define ~g_subprocess_send_signal #f)
(define (g_subprocess_send_signal subprocess signal_num)
  (unless
    ~g_subprocess_send_signal
    (set! ~g_subprocess_send_signal
      (fh-link-proc
        "g_subprocess_send_signal"
        ffi:void
        (list '* ffi:int))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~signal_num (unwrap~fixed signal_num)))
    (~g_subprocess_send_signal
      ~subprocess
      ~signal_num)))
(export g_subprocess_send_signal)

;; extern void g_subprocess_force_exit(GSubprocess *subprocess);
(define ~g_subprocess_force_exit #f)
(define (g_subprocess_force_exit subprocess)
  (unless
    ~g_subprocess_force_exit
    (set! ~g_subprocess_force_exit
      (fh-link-proc
        "g_subprocess_force_exit"
        ffi:void
        (list '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess)))
    (~g_subprocess_force_exit ~subprocess)))
(export g_subprocess_force_exit)

;; extern gboolean g_subprocess_wait(GSubprocess *subprocess, GCancellable *
;;     cancellable, GError **error);
(define ~g_subprocess_wait #f)
(define (g_subprocess_wait subprocess cancellable error)
  (unless
    ~g_subprocess_wait
    (set! ~g_subprocess_wait
      (fh-link-proc
        "g_subprocess_wait"
        ffi:int
        (list '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_subprocess_wait
      ~subprocess
      ~cancellable
      ~error)))
(export g_subprocess_wait)

;; extern void g_subprocess_wait_async(GSubprocess *subprocess, GCancellable *
;;     cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_subprocess_wait_async #f)
(define (g_subprocess_wait_async
         subprocess
         cancellable
         callback
         user_data)
  (unless
    ~g_subprocess_wait_async
    (set! ~g_subprocess_wait_async
      (fh-link-proc
        "g_subprocess_wait_async"
        ffi:void
        (list '* '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_subprocess_wait_async
      ~subprocess
      ~cancellable
      ~callback
      ~user_data)))
(export g_subprocess_wait_async)

;; extern gboolean g_subprocess_wait_finish(GSubprocess *subprocess, 
;;     GAsyncResult *result, GError **error);
(define ~g_subprocess_wait_finish #f)
(define (g_subprocess_wait_finish
         subprocess
         result
         error)
  (unless
    ~g_subprocess_wait_finish
    (set! ~g_subprocess_wait_finish
      (fh-link-proc
        "g_subprocess_wait_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_subprocess_wait_finish
      ~subprocess
      ~result
      ~error)))
(export g_subprocess_wait_finish)

;; extern gboolean g_subprocess_wait_check(GSubprocess *subprocess, 
;;     GCancellable *cancellable, GError **error);
(define ~g_subprocess_wait_check #f)
(define (g_subprocess_wait_check
         subprocess
         cancellable
         error)
  (unless
    ~g_subprocess_wait_check
    (set! ~g_subprocess_wait_check
      (fh-link-proc
        "g_subprocess_wait_check"
        ffi:int
        (list '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_subprocess_wait_check
      ~subprocess
      ~cancellable
      ~error)))
(export g_subprocess_wait_check)

;; extern void g_subprocess_wait_check_async(GSubprocess *subprocess, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_subprocess_wait_check_async #f)
(define (g_subprocess_wait_check_async
         subprocess
         cancellable
         callback
         user_data)
  (unless
    ~g_subprocess_wait_check_async
    (set! ~g_subprocess_wait_check_async
      (fh-link-proc
        "g_subprocess_wait_check_async"
        ffi:void
        (list '* '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_subprocess_wait_check_async
      ~subprocess
      ~cancellable
      ~callback
      ~user_data)))
(export g_subprocess_wait_check_async)

;; extern gboolean g_subprocess_wait_check_finish(GSubprocess *subprocess, 
;;     GAsyncResult *result, GError **error);
(define ~g_subprocess_wait_check_finish #f)
(define (g_subprocess_wait_check_finish
         subprocess
         result
         error)
  (unless
    ~g_subprocess_wait_check_finish
    (set! ~g_subprocess_wait_check_finish
      (fh-link-proc
        "g_subprocess_wait_check_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_subprocess_wait_check_finish
      ~subprocess
      ~result
      ~error)))
(export g_subprocess_wait_check_finish)

;; extern gint g_subprocess_get_status(GSubprocess *subprocess);
(define ~g_subprocess_get_status #f)
(define (g_subprocess_get_status subprocess)
  (unless
    ~g_subprocess_get_status
    (set! ~g_subprocess_get_status
      (fh-link-proc
        "g_subprocess_get_status"
        ffi:int
        (list '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess)))
    (~g_subprocess_get_status ~subprocess)))
(export g_subprocess_get_status)

;; extern gboolean g_subprocess_get_successful(GSubprocess *subprocess);
(define ~g_subprocess_get_successful #f)
(define (g_subprocess_get_successful subprocess)
  (unless
    ~g_subprocess_get_successful
    (set! ~g_subprocess_get_successful
      (fh-link-proc
        "g_subprocess_get_successful"
        ffi:int
        (list '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess)))
    (~g_subprocess_get_successful ~subprocess)))
(export g_subprocess_get_successful)

;; extern gboolean g_subprocess_get_if_exited(GSubprocess *subprocess);
(define ~g_subprocess_get_if_exited #f)
(define (g_subprocess_get_if_exited subprocess)
  (unless
    ~g_subprocess_get_if_exited
    (set! ~g_subprocess_get_if_exited
      (fh-link-proc
        "g_subprocess_get_if_exited"
        ffi:int
        (list '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess)))
    (~g_subprocess_get_if_exited ~subprocess)))
(export g_subprocess_get_if_exited)

;; extern gint g_subprocess_get_exit_status(GSubprocess *subprocess);
(define ~g_subprocess_get_exit_status #f)
(define (g_subprocess_get_exit_status subprocess)
  (unless
    ~g_subprocess_get_exit_status
    (set! ~g_subprocess_get_exit_status
      (fh-link-proc
        "g_subprocess_get_exit_status"
        ffi:int
        (list '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess)))
    (~g_subprocess_get_exit_status ~subprocess)))
(export g_subprocess_get_exit_status)

;; extern gboolean g_subprocess_get_if_signaled(GSubprocess *subprocess);
(define ~g_subprocess_get_if_signaled #f)
(define (g_subprocess_get_if_signaled subprocess)
  (unless
    ~g_subprocess_get_if_signaled
    (set! ~g_subprocess_get_if_signaled
      (fh-link-proc
        "g_subprocess_get_if_signaled"
        ffi:int
        (list '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess)))
    (~g_subprocess_get_if_signaled ~subprocess)))
(export g_subprocess_get_if_signaled)

;; extern gint g_subprocess_get_term_sig(GSubprocess *subprocess);
(define ~g_subprocess_get_term_sig #f)
(define (g_subprocess_get_term_sig subprocess)
  (unless
    ~g_subprocess_get_term_sig
    (set! ~g_subprocess_get_term_sig
      (fh-link-proc
        "g_subprocess_get_term_sig"
        ffi:int
        (list '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess)))
    (~g_subprocess_get_term_sig ~subprocess)))
(export g_subprocess_get_term_sig)

;; extern gboolean g_subprocess_communicate(GSubprocess *subprocess, GBytes *
;;     stdin_buf, GCancellable *cancellable, GBytes **stdout_buf, GBytes **
;;     stderr_buf, GError **error);
(define ~g_subprocess_communicate #f)
(define (g_subprocess_communicate
         subprocess
         stdin_buf
         cancellable
         stdout_buf
         stderr_buf
         error)
  (unless
    ~g_subprocess_communicate
    (set! ~g_subprocess_communicate
      (fh-link-proc
        "g_subprocess_communicate"
        ffi:int
        (list '* '* '* '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~stdout_buf (unwrap~pointer stdout_buf))
        (~stderr_buf (unwrap~pointer stderr_buf))
        (~error (unwrap~pointer error)))
    (~g_subprocess_communicate
      ~subprocess
      stdin_buf
      ~cancellable
      ~stdout_buf
      ~stderr_buf
      ~error)))
(export g_subprocess_communicate)

;; extern void g_subprocess_communicate_async(GSubprocess *subprocess, GBytes *
;;     stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_subprocess_communicate_async #f)
(define (g_subprocess_communicate_async
         subprocess
         stdin_buf
         cancellable
         callback
         user_data)
  (unless
    ~g_subprocess_communicate_async
    (set! ~g_subprocess_communicate_async
      (fh-link-proc
        "g_subprocess_communicate_async"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_subprocess_communicate_async
      ~subprocess
      stdin_buf
      ~cancellable
      ~callback
      ~user_data)))
(export g_subprocess_communicate_async)

;; extern gboolean g_subprocess_communicate_finish(GSubprocess *subprocess, 
;;     GAsyncResult *result, GBytes **stdout_buf, GBytes **stderr_buf, GError *
;;     *error);
(define ~g_subprocess_communicate_finish #f)
(define (g_subprocess_communicate_finish
         subprocess
         result
         stdout_buf
         stderr_buf
         error)
  (unless
    ~g_subprocess_communicate_finish
    (set! ~g_subprocess_communicate_finish
      (fh-link-proc
        "g_subprocess_communicate_finish"
        ffi:int
        (list '* '* '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~result (unwrap-GAsyncResult* result))
        (~stdout_buf (unwrap~pointer stdout_buf))
        (~stderr_buf (unwrap~pointer stderr_buf))
        (~error (unwrap~pointer error)))
    (~g_subprocess_communicate_finish
      ~subprocess
      ~result
      ~stdout_buf
      ~stderr_buf
      ~error)))
(export g_subprocess_communicate_finish)

;; extern gboolean g_subprocess_communicate_utf8(GSubprocess *subprocess, const
;;      char *stdin_buf, GCancellable *cancellable, char **stdout_buf, char **
;;     stderr_buf, GError **error);
(define ~g_subprocess_communicate_utf8 #f)
(define (g_subprocess_communicate_utf8
         subprocess
         stdin_buf
         cancellable
         stdout_buf
         stderr_buf
         error)
  (unless
    ~g_subprocess_communicate_utf8
    (set! ~g_subprocess_communicate_utf8
      (fh-link-proc
        "g_subprocess_communicate_utf8"
        ffi:int
        (list '* '* '* '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~stdin_buf (unwrap~pointer stdin_buf))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~stdout_buf (unwrap~pointer stdout_buf))
        (~stderr_buf (unwrap~pointer stderr_buf))
        (~error (unwrap~pointer error)))
    (~g_subprocess_communicate_utf8
      ~subprocess
      ~stdin_buf
      ~cancellable
      ~stdout_buf
      ~stderr_buf
      ~error)))
(export g_subprocess_communicate_utf8)

;; extern void g_subprocess_communicate_utf8_async(GSubprocess *subprocess, 
;;     const char *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback 
;;     callback, gpointer user_data);
(define ~g_subprocess_communicate_utf8_async #f)
(define (g_subprocess_communicate_utf8_async
         subprocess
         stdin_buf
         cancellable
         callback
         user_data)
  (unless
    ~g_subprocess_communicate_utf8_async
    (set! ~g_subprocess_communicate_utf8_async
      (fh-link-proc
        "g_subprocess_communicate_utf8_async"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~stdin_buf (unwrap~pointer stdin_buf))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_subprocess_communicate_utf8_async
      ~subprocess
      ~stdin_buf
      ~cancellable
      ~callback
      ~user_data)))
(export g_subprocess_communicate_utf8_async)

;; extern gboolean g_subprocess_communicate_utf8_finish(GSubprocess *subprocess
;;     , GAsyncResult *result, char **stdout_buf, char **stderr_buf, GError **
;;     error);
(define ~g_subprocess_communicate_utf8_finish #f)
(define (g_subprocess_communicate_utf8_finish
         subprocess
         result
         stdout_buf
         stderr_buf
         error)
  (unless
    ~g_subprocess_communicate_utf8_finish
    (set! ~g_subprocess_communicate_utf8_finish
      (fh-link-proc
        "g_subprocess_communicate_utf8_finish"
        ffi:int
        (list '* '* '* '* '*))))
  (let ((~subprocess (unwrap-GSubprocess* subprocess))
        (~result (unwrap-GAsyncResult* result))
        (~stdout_buf (unwrap~pointer stdout_buf))
        (~stderr_buf (unwrap~pointer stderr_buf))
        (~error (unwrap~pointer error)))
    (~g_subprocess_communicate_utf8_finish
      ~subprocess
      ~result
      ~stdout_buf
      ~stderr_buf
      ~error)))
(export g_subprocess_communicate_utf8_finish)

;; extern GType g_subprocess_launcher_get_type(void);
(define ~g_subprocess_launcher_get_type #f)
(define (g_subprocess_launcher_get_type)
  (unless
    ~g_subprocess_launcher_get_type
    (set! ~g_subprocess_launcher_get_type
      (fh-link-proc
        "g_subprocess_launcher_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_subprocess_launcher_get_type)))
(export g_subprocess_launcher_get_type)

;; extern GSubprocessLauncher *g_subprocess_launcher_new(GSubprocessFlags flags
;;     );
(define ~g_subprocess_launcher_new #f)
(define (g_subprocess_launcher_new flags)
  (unless
    ~g_subprocess_launcher_new
    (set! ~g_subprocess_launcher_new
      (fh-link-proc
        "g_subprocess_launcher_new"
        '*
        (list ffi:int))))
  (let ((~flags (unwrap~fixed flags)))
    (wrap-GSubprocessLauncher*
      (~g_subprocess_launcher_new ~flags))))
(export g_subprocess_launcher_new)

;; extern GSubprocess *g_subprocess_launcher_spawn(GSubprocessLauncher *self, 
;;     GError **error, const gchar *argv0, ...);
;; ... failed.

;; extern GSubprocess *g_subprocess_launcher_spawnv(GSubprocessLauncher *self, 
;;     const gchar *const*argv, GError **error);
(define ~g_subprocess_launcher_spawnv #f)
(define (g_subprocess_launcher_spawnv self argv error)
  (unless
    ~g_subprocess_launcher_spawnv
    (set! ~g_subprocess_launcher_spawnv
      (fh-link-proc
        "g_subprocess_launcher_spawnv"
        '*
        (list '* '* '*))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~argv (unwrap~pointer argv))
        (~error (unwrap~pointer error)))
    (wrap-GSubprocess*
      (~g_subprocess_launcher_spawnv
        ~self
        ~argv
        ~error))))
(export g_subprocess_launcher_spawnv)

;; extern void g_subprocess_launcher_set_environ(GSubprocessLauncher *self, 
;;     gchar **env);
(define ~g_subprocess_launcher_set_environ #f)
(define (g_subprocess_launcher_set_environ self env)
  (unless
    ~g_subprocess_launcher_set_environ
    (set! ~g_subprocess_launcher_set_environ
      (fh-link-proc
        "g_subprocess_launcher_set_environ"
        ffi:void
        (list '* '*))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~env (unwrap~pointer env)))
    (~g_subprocess_launcher_set_environ ~self ~env)))
(export g_subprocess_launcher_set_environ)

;; extern void g_subprocess_launcher_setenv(GSubprocessLauncher *self, const 
;;     gchar *variable, const gchar *value, gboolean overwrite);
(define ~g_subprocess_launcher_setenv #f)
(define (g_subprocess_launcher_setenv
         self
         variable
         value
         overwrite)
  (unless
    ~g_subprocess_launcher_setenv
    (set! ~g_subprocess_launcher_setenv
      (fh-link-proc
        "g_subprocess_launcher_setenv"
        ffi:void
        (list '* '* '* ffi:int))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~variable (unwrap~pointer variable))
        (~value (unwrap~pointer value))
        (~overwrite (unwrap~fixed overwrite)))
    (~g_subprocess_launcher_setenv
      ~self
      ~variable
      ~value
      ~overwrite)))
(export g_subprocess_launcher_setenv)

;; extern void g_subprocess_launcher_unsetenv(GSubprocessLauncher *self, const 
;;     gchar *variable);
(define ~g_subprocess_launcher_unsetenv #f)
(define (g_subprocess_launcher_unsetenv self variable)
  (unless
    ~g_subprocess_launcher_unsetenv
    (set! ~g_subprocess_launcher_unsetenv
      (fh-link-proc
        "g_subprocess_launcher_unsetenv"
        ffi:void
        (list '* '*))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~variable (unwrap~pointer variable)))
    (~g_subprocess_launcher_unsetenv ~self ~variable)))
(export g_subprocess_launcher_unsetenv)

;; extern const gchar *g_subprocess_launcher_getenv(GSubprocessLauncher *self, 
;;     const gchar *variable);
(define ~g_subprocess_launcher_getenv #f)
(define (g_subprocess_launcher_getenv self variable)
  (unless
    ~g_subprocess_launcher_getenv
    (set! ~g_subprocess_launcher_getenv
      (fh-link-proc
        "g_subprocess_launcher_getenv"
        '*
        (list '* '*))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~variable (unwrap~pointer variable)))
    (~g_subprocess_launcher_getenv ~self ~variable)))
(export g_subprocess_launcher_getenv)

;; extern void g_subprocess_launcher_set_cwd(GSubprocessLauncher *self, const 
;;     gchar *cwd);
(define ~g_subprocess_launcher_set_cwd #f)
(define (g_subprocess_launcher_set_cwd self cwd)
  (unless
    ~g_subprocess_launcher_set_cwd
    (set! ~g_subprocess_launcher_set_cwd
      (fh-link-proc
        "g_subprocess_launcher_set_cwd"
        ffi:void
        (list '* '*))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~cwd (unwrap~pointer cwd)))
    (~g_subprocess_launcher_set_cwd ~self ~cwd)))
(export g_subprocess_launcher_set_cwd)

;; extern void g_subprocess_launcher_set_flags(GSubprocessLauncher *self, 
;;     GSubprocessFlags flags);
(define ~g_subprocess_launcher_set_flags #f)
(define (g_subprocess_launcher_set_flags self flags)
  (unless
    ~g_subprocess_launcher_set_flags
    (set! ~g_subprocess_launcher_set_flags
      (fh-link-proc
        "g_subprocess_launcher_set_flags"
        ffi:void
        (list '* ffi:int))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~flags (unwrap~fixed flags)))
    (~g_subprocess_launcher_set_flags ~self ~flags)))
(export g_subprocess_launcher_set_flags)

;; extern void g_subprocess_launcher_set_stdin_file_path(GSubprocessLauncher *
;;     self, const gchar *path);
(define ~g_subprocess_launcher_set_stdin_file_path #f)
(define (g_subprocess_launcher_set_stdin_file_path
         self
         path)
  (unless
    ~g_subprocess_launcher_set_stdin_file_path
    (set! ~g_subprocess_launcher_set_stdin_file_path
      (fh-link-proc
        "g_subprocess_launcher_set_stdin_file_path"
        ffi:void
        (list '* '*))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~path (unwrap~pointer path)))
    (~g_subprocess_launcher_set_stdin_file_path
      ~self
      ~path)))
(export g_subprocess_launcher_set_stdin_file_path)

;; extern void g_subprocess_launcher_take_stdin_fd(GSubprocessLauncher *self, 
;;     gint fd);
(define ~g_subprocess_launcher_take_stdin_fd #f)
(define (g_subprocess_launcher_take_stdin_fd self fd)
  (unless
    ~g_subprocess_launcher_take_stdin_fd
    (set! ~g_subprocess_launcher_take_stdin_fd
      (fh-link-proc
        "g_subprocess_launcher_take_stdin_fd"
        ffi:void
        (list '* ffi:int))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~fd (unwrap~fixed fd)))
    (~g_subprocess_launcher_take_stdin_fd ~self ~fd)))
(export g_subprocess_launcher_take_stdin_fd)

;; extern void g_subprocess_launcher_set_stdout_file_path(GSubprocessLauncher *
;;     self, const gchar *path);
(define ~g_subprocess_launcher_set_stdout_file_path #f)
(define (g_subprocess_launcher_set_stdout_file_path
         self
         path)
  (unless
    ~g_subprocess_launcher_set_stdout_file_path
    (set! ~g_subprocess_launcher_set_stdout_file_path
      (fh-link-proc
        "g_subprocess_launcher_set_stdout_file_path"
        ffi:void
        (list '* '*))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~path (unwrap~pointer path)))
    (~g_subprocess_launcher_set_stdout_file_path
      ~self
      ~path)))
(export g_subprocess_launcher_set_stdout_file_path)

;; extern void g_subprocess_launcher_take_stdout_fd(GSubprocessLauncher *self, 
;;     gint fd);
(define ~g_subprocess_launcher_take_stdout_fd #f)
(define (g_subprocess_launcher_take_stdout_fd self fd)
  (unless
    ~g_subprocess_launcher_take_stdout_fd
    (set! ~g_subprocess_launcher_take_stdout_fd
      (fh-link-proc
        "g_subprocess_launcher_take_stdout_fd"
        ffi:void
        (list '* ffi:int))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~fd (unwrap~fixed fd)))
    (~g_subprocess_launcher_take_stdout_fd ~self ~fd)))
(export g_subprocess_launcher_take_stdout_fd)

;; extern void g_subprocess_launcher_set_stderr_file_path(GSubprocessLauncher *
;;     self, const gchar *path);
(define ~g_subprocess_launcher_set_stderr_file_path #f)
(define (g_subprocess_launcher_set_stderr_file_path
         self
         path)
  (unless
    ~g_subprocess_launcher_set_stderr_file_path
    (set! ~g_subprocess_launcher_set_stderr_file_path
      (fh-link-proc
        "g_subprocess_launcher_set_stderr_file_path"
        ffi:void
        (list '* '*))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~path (unwrap~pointer path)))
    (~g_subprocess_launcher_set_stderr_file_path
      ~self
      ~path)))
(export g_subprocess_launcher_set_stderr_file_path)

;; extern void g_subprocess_launcher_take_stderr_fd(GSubprocessLauncher *self, 
;;     gint fd);
(define ~g_subprocess_launcher_take_stderr_fd #f)
(define (g_subprocess_launcher_take_stderr_fd self fd)
  (unless
    ~g_subprocess_launcher_take_stderr_fd
    (set! ~g_subprocess_launcher_take_stderr_fd
      (fh-link-proc
        "g_subprocess_launcher_take_stderr_fd"
        ffi:void
        (list '* ffi:int))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~fd (unwrap~fixed fd)))
    (~g_subprocess_launcher_take_stderr_fd ~self ~fd)))
(export g_subprocess_launcher_take_stderr_fd)

;; extern void g_subprocess_launcher_take_fd(GSubprocessLauncher *self, gint 
;;     source_fd, gint target_fd);
(define ~g_subprocess_launcher_take_fd #f)
(define (g_subprocess_launcher_take_fd
         self
         source_fd
         target_fd)
  (unless
    ~g_subprocess_launcher_take_fd
    (set! ~g_subprocess_launcher_take_fd
      (fh-link-proc
        "g_subprocess_launcher_take_fd"
        ffi:void
        (list '* ffi:int ffi:int))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~source_fd (unwrap~fixed source_fd))
        (~target_fd (unwrap~fixed target_fd)))
    (~g_subprocess_launcher_take_fd
      ~self
      ~source_fd
      ~target_fd)))
(export g_subprocess_launcher_take_fd)

;; extern void g_subprocess_launcher_set_child_setup(GSubprocessLauncher *self
;;     , GSpawnChildSetupFunc child_setup, gpointer user_data, GDestroyNotify 
;;     destroy_notify);
(define ~g_subprocess_launcher_set_child_setup #f)
(define (g_subprocess_launcher_set_child_setup
         self
         child_setup
         user_data
         destroy_notify)
  (unless
    ~g_subprocess_launcher_set_child_setup
    (set! ~g_subprocess_launcher_set_child_setup
      (fh-link-proc
        "g_subprocess_launcher_set_child_setup"
        ffi:void
        (list '* '* '* '*))))
  (let ((~self (unwrap-GSubprocessLauncher* self))
        (~child_setup
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           child_setup))
        (~user_data (unwrap-gpointer user_data))
        (~destroy_notify
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy_notify)))
    (~g_subprocess_launcher_set_child_setup
      ~self
      ~child_setup
      ~user_data
      ~destroy_notify)))
(export g_subprocess_launcher_set_child_setup)

;; typedef struct _GTcpConnectionPrivate GTcpConnectionPrivate;
(define GTcpConnectionPrivate-desc void)
(export GTcpConnectionPrivate-desc)
(define GTcpConnectionPrivate*-desc (bs:pointer GTcpConnectionPrivate-desc))
(export GTcpConnectionPrivate*-desc)
(define-fh-pointer-type GTcpConnectionPrivate* GTcpConnectionPrivate*-desc)

;; typedef struct _GTcpConnectionClass GTcpConnectionClass;
(define GTcpConnectionClass-desc void)
(export GTcpConnectionClass-desc)
(define GTcpConnectionClass*-desc (bs:pointer (delay GTcpConnectionClass-desc)))
(export GTcpConnectionClass*-desc)
(define-fh-pointer-type GTcpConnectionClass* GTcpConnectionClass*-desc)

;; struct _GTcpConnectionClass {
;;   GSocketConnectionClass parent_class;
;; };
(define struct-_GTcpConnectionClass-desc
  (bs:struct
    (list `(parent_class ,GSocketConnectionClass-desc))))
(export struct-_GTcpConnectionClass-desc)
(define-fh-compound-type/p struct-_GTcpConnectionClass struct-_GTcpConnectionClass-desc)
(set! GTcpConnectionClass-desc struct-_GTcpConnectionClass-desc)
(define-fh-compound-type GTcpConnectionClass GTcpConnectionClass-desc)

;; struct _GTcpConnection {
;;   GSocketConnection parent_instance;
;;   GTcpConnectionPrivate *priv;
;; };
(define struct-_GTcpConnection-desc
  (bs:struct
    (list `(parent_instance ,GSocketConnection-desc)
          `(priv ,(bs:pointer (delay GTcpConnectionPrivate*-desc))))))
(export struct-_GTcpConnection-desc)
(define-fh-compound-type/p struct-_GTcpConnection struct-_GTcpConnection-desc)
(set! GTcpConnection-desc struct-_GTcpConnection-desc)
(define-fh-compound-type GTcpConnection GTcpConnection-desc)

;; extern GType g_tcp_connection_get_type(void);
(define ~g_tcp_connection_get_type #f)
(define (g_tcp_connection_get_type)
  (unless
    ~g_tcp_connection_get_type
    (set! ~g_tcp_connection_get_type
      (fh-link-proc
        "g_tcp_connection_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tcp_connection_get_type)))
(export g_tcp_connection_get_type)

;; extern void g_tcp_connection_set_graceful_disconnect(GTcpConnection *
;;     connection, gboolean graceful_disconnect);
(define ~g_tcp_connection_set_graceful_disconnect #f)
(define (g_tcp_connection_set_graceful_disconnect
         connection
         graceful_disconnect)
  (unless
    ~g_tcp_connection_set_graceful_disconnect
    (set! ~g_tcp_connection_set_graceful_disconnect
      (fh-link-proc
        "g_tcp_connection_set_graceful_disconnect"
        ffi:void
        (list '* ffi:int))))
  (let ((~connection (unwrap-GTcpConnection* connection))
        (~graceful_disconnect
          (unwrap~fixed graceful_disconnect)))
    (~g_tcp_connection_set_graceful_disconnect
      ~connection
      ~graceful_disconnect)))
(export g_tcp_connection_set_graceful_disconnect)

;; extern gboolean g_tcp_connection_get_graceful_disconnect(GTcpConnection *
;;     connection);
(define ~g_tcp_connection_get_graceful_disconnect #f)
(define (g_tcp_connection_get_graceful_disconnect
         connection)
  (unless
    ~g_tcp_connection_get_graceful_disconnect
    (set! ~g_tcp_connection_get_graceful_disconnect
      (fh-link-proc
        "g_tcp_connection_get_graceful_disconnect"
        ffi:int
        (list '*))))
  (let ((~connection (unwrap-GTcpConnection* connection)))
    (~g_tcp_connection_get_graceful_disconnect
      ~connection)))
(export g_tcp_connection_get_graceful_disconnect)

;; typedef struct _GTcpWrapperConnectionPrivate GTcpWrapperConnectionPrivate;
(define GTcpWrapperConnectionPrivate-desc void)
(export GTcpWrapperConnectionPrivate-desc)
(define GTcpWrapperConnectionPrivate*-desc (bs:pointer GTcpWrapperConnectionPrivate-desc))
(export GTcpWrapperConnectionPrivate*-desc)
(define-fh-pointer-type GTcpWrapperConnectionPrivate* GTcpWrapperConnectionPrivate*-desc)

;; typedef struct _GTcpWrapperConnectionClass GTcpWrapperConnectionClass;
(define GTcpWrapperConnectionClass-desc void)
(export GTcpWrapperConnectionClass-desc)
(define GTcpWrapperConnectionClass*-desc (bs:pointer (delay GTcpWrapperConnectionClass-desc)))
(export GTcpWrapperConnectionClass*-desc)
(define-fh-pointer-type GTcpWrapperConnectionClass* GTcpWrapperConnectionClass*-desc)

;; struct _GTcpWrapperConnectionClass {
;;   GTcpConnectionClass parent_class;
;; };
(define struct-_GTcpWrapperConnectionClass-desc
  (bs:struct
    (list `(parent_class ,GTcpConnectionClass-desc))))
(export struct-_GTcpWrapperConnectionClass-desc)
(define-fh-compound-type/p struct-_GTcpWrapperConnectionClass struct-_GTcpWrapperConnectionClass-desc)
(set! GTcpWrapperConnectionClass-desc struct-_GTcpWrapperConnectionClass-desc)
(define-fh-compound-type GTcpWrapperConnectionClass GTcpWrapperConnectionClass-desc)

;; struct _GTcpWrapperConnection {
;;   GTcpConnection parent_instance;
;;   GTcpWrapperConnectionPrivate *priv;
;; };
(define struct-_GTcpWrapperConnection-desc
  (bs:struct
    (list `(parent_instance ,GTcpConnection-desc)
          `(priv ,(bs:pointer
                    (delay GTcpWrapperConnectionPrivate*-desc))))))
(export struct-_GTcpWrapperConnection-desc)
(define-fh-compound-type/p struct-_GTcpWrapperConnection struct-_GTcpWrapperConnection-desc)
(set! GTcpWrapperConnection-desc struct-_GTcpWrapperConnection-desc)
(define-fh-compound-type GTcpWrapperConnection GTcpWrapperConnection-desc)

;; extern GType g_tcp_wrapper_connection_get_type(void);
(define ~g_tcp_wrapper_connection_get_type #f)
(define (g_tcp_wrapper_connection_get_type)
  (unless
    ~g_tcp_wrapper_connection_get_type
    (set! ~g_tcp_wrapper_connection_get_type
      (fh-link-proc
        "g_tcp_wrapper_connection_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tcp_wrapper_connection_get_type)))
(export g_tcp_wrapper_connection_get_type)

;; extern GSocketConnection *g_tcp_wrapper_connection_new(GIOStream *
;;     base_io_stream, GSocket *socket);
(define ~g_tcp_wrapper_connection_new #f)
(define (g_tcp_wrapper_connection_new
         base_io_stream
         socket)
  (unless
    ~g_tcp_wrapper_connection_new
    (set! ~g_tcp_wrapper_connection_new
      (fh-link-proc
        "g_tcp_wrapper_connection_new"
        '*
        (list '* '*))))
  (let ((~base_io_stream
          (unwrap-GIOStream* base_io_stream))
        (~socket (unwrap-GSocket* socket)))
    (wrap-GSocketConnection*
      (~g_tcp_wrapper_connection_new
        ~base_io_stream
        ~socket))))
(export g_tcp_wrapper_connection_new)

;; extern GIOStream *g_tcp_wrapper_connection_get_base_io_stream(
;;     GTcpWrapperConnection *conn);
(define ~g_tcp_wrapper_connection_get_base_io_stream #f)
(define (g_tcp_wrapper_connection_get_base_io_stream
         conn)
  (unless
    ~g_tcp_wrapper_connection_get_base_io_stream
    (set! ~g_tcp_wrapper_connection_get_base_io_stream
      (fh-link-proc
        "g_tcp_wrapper_connection_get_base_io_stream"
        '*
        (list '*))))
  (let ((~conn (unwrap-GTcpWrapperConnection* conn)))
    (wrap-GIOStream*
      (~g_tcp_wrapper_connection_get_base_io_stream
        ~conn))))
(export g_tcp_wrapper_connection_get_base_io_stream)

;; extern GType g_test_dbus_get_type(void);
(define ~g_test_dbus_get_type #f)
(define (g_test_dbus_get_type)
  (unless
    ~g_test_dbus_get_type
    (set! ~g_test_dbus_get_type
      (fh-link-proc
        "g_test_dbus_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_test_dbus_get_type)))
(export g_test_dbus_get_type)

;; extern GTestDBus *g_test_dbus_new(GTestDBusFlags flags);
(define ~g_test_dbus_new #f)
(define (g_test_dbus_new flags)
  (unless
    ~g_test_dbus_new
    (set! ~g_test_dbus_new
      (fh-link-proc
        "g_test_dbus_new"
        '*
        (list ffi:int))))
  (let ((~flags (unwrap~fixed flags)))
    (wrap-GTestDBus* (~g_test_dbus_new ~flags))))
(export g_test_dbus_new)

;; extern GTestDBusFlags g_test_dbus_get_flags(GTestDBus *self);
(define ~g_test_dbus_get_flags #f)
(define (g_test_dbus_get_flags self)
  (unless
    ~g_test_dbus_get_flags
    (set! ~g_test_dbus_get_flags
      (fh-link-proc
        "g_test_dbus_get_flags"
        ffi:int
        (list '*))))
  (let ((~self (unwrap-GTestDBus* self)))
    (~g_test_dbus_get_flags ~self)))
(export g_test_dbus_get_flags)

;; extern const gchar *g_test_dbus_get_bus_address(GTestDBus *self);
(define ~g_test_dbus_get_bus_address #f)
(define (g_test_dbus_get_bus_address self)
  (unless
    ~g_test_dbus_get_bus_address
    (set! ~g_test_dbus_get_bus_address
      (fh-link-proc
        "g_test_dbus_get_bus_address"
        '*
        (list '*))))
  (let ((~self (unwrap-GTestDBus* self)))
    (~g_test_dbus_get_bus_address ~self)))
(export g_test_dbus_get_bus_address)

;; extern void g_test_dbus_add_service_dir(GTestDBus *self, const gchar *path)
;;     ;
(define ~g_test_dbus_add_service_dir #f)
(define (g_test_dbus_add_service_dir self path)
  (unless
    ~g_test_dbus_add_service_dir
    (set! ~g_test_dbus_add_service_dir
      (fh-link-proc
        "g_test_dbus_add_service_dir"
        ffi:void
        (list '* '*))))
  (let ((~self (unwrap-GTestDBus* self))
        (~path (unwrap~pointer path)))
    (~g_test_dbus_add_service_dir ~self ~path)))
(export g_test_dbus_add_service_dir)

;; extern void g_test_dbus_up(GTestDBus *self);
(define ~g_test_dbus_up #f)
(define (g_test_dbus_up self)
  (unless
    ~g_test_dbus_up
    (set! ~g_test_dbus_up
      (fh-link-proc
        "g_test_dbus_up"
        ffi:void
        (list '*))))
  (let ((~self (unwrap-GTestDBus* self)))
    (~g_test_dbus_up ~self)))
(export g_test_dbus_up)

;; extern void g_test_dbus_stop(GTestDBus *self);
(define ~g_test_dbus_stop #f)
(define (g_test_dbus_stop self)
  (unless
    ~g_test_dbus_stop
    (set! ~g_test_dbus_stop
      (fh-link-proc
        "g_test_dbus_stop"
        ffi:void
        (list '*))))
  (let ((~self (unwrap-GTestDBus* self)))
    (~g_test_dbus_stop ~self)))
(export g_test_dbus_stop)

;; extern void g_test_dbus_down(GTestDBus *self);
(define ~g_test_dbus_down #f)
(define (g_test_dbus_down self)
  (unless
    ~g_test_dbus_down
    (set! ~g_test_dbus_down
      (fh-link-proc
        "g_test_dbus_down"
        ffi:void
        (list '*))))
  (let ((~self (unwrap-GTestDBus* self)))
    (~g_test_dbus_down ~self)))
(export g_test_dbus_down)

;; extern void g_test_dbus_unset(void);
(define ~g_test_dbus_unset #f)
(define (g_test_dbus_unset)
  (unless
    ~g_test_dbus_unset
    (set! ~g_test_dbus_unset
      (fh-link-proc
        "g_test_dbus_unset"
        ffi:void
        (list))))
  (let () (~g_test_dbus_unset)))
(export g_test_dbus_unset)

;; typedef struct _GThemedIconClass GThemedIconClass;
(define GThemedIconClass-desc void)
(export GThemedIconClass-desc)
(define GThemedIconClass*-desc (bs:pointer GThemedIconClass-desc))
(export GThemedIconClass*-desc)
(define-fh-pointer-type GThemedIconClass* GThemedIconClass*-desc)

;; extern GType g_themed_icon_get_type(void);
(define ~g_themed_icon_get_type #f)
(define (g_themed_icon_get_type)
  (unless
    ~g_themed_icon_get_type
    (set! ~g_themed_icon_get_type
      (fh-link-proc
        "g_themed_icon_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_themed_icon_get_type)))
(export g_themed_icon_get_type)

;; extern GIcon *g_themed_icon_new(const char *iconname);
(define ~g_themed_icon_new #f)
(define (g_themed_icon_new iconname)
  (unless
    ~g_themed_icon_new
    (set! ~g_themed_icon_new
      (fh-link-proc "g_themed_icon_new" '* (list '*))))
  (let ((~iconname (unwrap~pointer iconname)))
    (wrap-GIcon* (~g_themed_icon_new ~iconname))))
(export g_themed_icon_new)

;; extern GIcon *g_themed_icon_new_with_default_fallbacks(const char *iconname)
;;     ;
(define ~g_themed_icon_new_with_default_fallbacks #f)
(define (g_themed_icon_new_with_default_fallbacks
         iconname)
  (unless
    ~g_themed_icon_new_with_default_fallbacks
    (set! ~g_themed_icon_new_with_default_fallbacks
      (fh-link-proc
        "g_themed_icon_new_with_default_fallbacks"
        '*
        (list '*))))
  (let ((~iconname (unwrap~pointer iconname)))
    (wrap-GIcon*
      (~g_themed_icon_new_with_default_fallbacks
        ~iconname))))
(export g_themed_icon_new_with_default_fallbacks)

;; extern GIcon *g_themed_icon_new_from_names(char **iconnames, int len);
(define ~g_themed_icon_new_from_names #f)
(define (g_themed_icon_new_from_names iconnames len)
  (unless
    ~g_themed_icon_new_from_names
    (set! ~g_themed_icon_new_from_names
      (fh-link-proc
        "g_themed_icon_new_from_names"
        '*
        (list '* ffi:int))))
  (let ((~iconnames (unwrap~pointer iconnames))
        (~len (unwrap~fixed len)))
    (wrap-GIcon*
      (~g_themed_icon_new_from_names ~iconnames ~len))))
(export g_themed_icon_new_from_names)

;; extern void g_themed_icon_prepend_name(GThemedIcon *icon, const char *
;;     iconname);
(define ~g_themed_icon_prepend_name #f)
(define (g_themed_icon_prepend_name icon iconname)
  (unless
    ~g_themed_icon_prepend_name
    (set! ~g_themed_icon_prepend_name
      (fh-link-proc
        "g_themed_icon_prepend_name"
        ffi:void
        (list '* '*))))
  (let ((~icon (unwrap-GThemedIcon* icon))
        (~iconname (unwrap~pointer iconname)))
    (~g_themed_icon_prepend_name ~icon ~iconname)))
(export g_themed_icon_prepend_name)

;; extern void g_themed_icon_append_name(GThemedIcon *icon, const char *
;;     iconname);
(define ~g_themed_icon_append_name #f)
(define (g_themed_icon_append_name icon iconname)
  (unless
    ~g_themed_icon_append_name
    (set! ~g_themed_icon_append_name
      (fh-link-proc
        "g_themed_icon_append_name"
        ffi:void
        (list '* '*))))
  (let ((~icon (unwrap-GThemedIcon* icon))
        (~iconname (unwrap~pointer iconname)))
    (~g_themed_icon_append_name ~icon ~iconname)))
(export g_themed_icon_append_name)

;; extern const gchar *const*g_themed_icon_get_names(GThemedIcon *icon);
(define ~g_themed_icon_get_names #f)
(define (g_themed_icon_get_names icon)
  (unless
    ~g_themed_icon_get_names
    (set! ~g_themed_icon_get_names
      (fh-link-proc
        "g_themed_icon_get_names"
        '*
        (list '*))))
  (let ((~icon (unwrap-GThemedIcon* icon)))
    (~g_themed_icon_get_names ~icon)))
(export g_themed_icon_get_names)

;; typedef struct _GThreadedSocketServicePrivate GThreadedSocketServicePrivate
;;     ;
(define GThreadedSocketServicePrivate-desc void)
(export GThreadedSocketServicePrivate-desc)
(define GThreadedSocketServicePrivate*-desc (bs:pointer GThreadedSocketServicePrivate-desc))
(export GThreadedSocketServicePrivate*-desc)
(define-fh-pointer-type GThreadedSocketServicePrivate* GThreadedSocketServicePrivate*-desc)

;; typedef struct _GThreadedSocketServiceClass GThreadedSocketServiceClass;
(define GThreadedSocketServiceClass-desc void)
(export GThreadedSocketServiceClass-desc)
(define GThreadedSocketServiceClass*-desc (bs:pointer (delay GThreadedSocketServiceClass-desc)))
(export GThreadedSocketServiceClass*-desc)
(define-fh-pointer-type GThreadedSocketServiceClass* GThreadedSocketServiceClass*-desc)

;; struct _GThreadedSocketServiceClass {
;;   GSocketServiceClass parent_class;
;;   gboolean (*run)(GThreadedSocketService *service, GSocketConnection *
;;       connection, GObject *source_object);
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;; };
(define struct-_GThreadedSocketServiceClass-desc
  (bs:struct
    (list `(parent_class ,GSocketServiceClass-desc)
          `(run ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void)))))
(export struct-_GThreadedSocketServiceClass-desc)
(define-fh-compound-type/p struct-_GThreadedSocketServiceClass struct-_GThreadedSocketServiceClass-desc)
(set! GThreadedSocketServiceClass-desc struct-_GThreadedSocketServiceClass-desc)
(define-fh-compound-type GThreadedSocketServiceClass GThreadedSocketServiceClass-desc)

;; struct _GThreadedSocketService {
;;   GSocketService parent_instance;
;;   GThreadedSocketServicePrivate *priv;
;; };
(define struct-_GThreadedSocketService-desc
  (bs:struct
    (list `(parent_instance ,GSocketService-desc)
          `(priv ,(bs:pointer
                    (delay GThreadedSocketServicePrivate*-desc))))))
(export struct-_GThreadedSocketService-desc)
(define-fh-compound-type/p struct-_GThreadedSocketService struct-_GThreadedSocketService-desc)
(set! GThreadedSocketService-desc struct-_GThreadedSocketService-desc)
(define-fh-compound-type GThreadedSocketService GThreadedSocketService-desc)

;; extern GType g_threaded_socket_service_get_type(void);
(define ~g_threaded_socket_service_get_type #f)
(define (g_threaded_socket_service_get_type)
  (unless
    ~g_threaded_socket_service_get_type
    (set! ~g_threaded_socket_service_get_type
      (fh-link-proc
        "g_threaded_socket_service_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_threaded_socket_service_get_type)))
(export g_threaded_socket_service_get_type)

;; extern GSocketService *g_threaded_socket_service_new(int max_threads);
(define ~g_threaded_socket_service_new #f)
(define (g_threaded_socket_service_new max_threads)
  (unless
    ~g_threaded_socket_service_new
    (set! ~g_threaded_socket_service_new
      (fh-link-proc
        "g_threaded_socket_service_new"
        '*
        (list ffi:int))))
  (let ((~max_threads (unwrap~fixed max_threads)))
    (wrap-GSocketService*
      (~g_threaded_socket_service_new ~max_threads))))
(export g_threaded_socket_service_new)

;; typedef struct _GTlsBackend GTlsBackend;
(define GTlsBackend-desc void)
(export GTlsBackend-desc)
(define GTlsBackend*-desc (bs:pointer GTlsBackend-desc))
(export GTlsBackend*-desc)
(define-fh-pointer-type GTlsBackend* GTlsBackend*-desc)

;; typedef struct _GTlsBackendInterface GTlsBackendInterface;
(define GTlsBackendInterface-desc void)
(export GTlsBackendInterface-desc)
(define GTlsBackendInterface*-desc (bs:pointer (delay GTlsBackendInterface-desc)))
(export GTlsBackendInterface*-desc)
(define-fh-pointer-type GTlsBackendInterface* GTlsBackendInterface*-desc)

;; struct _GTlsBackendInterface {
;;   GTypeInterface g_iface;
;;   /* methods */
;;   gboolean (*supports_tls)(GTlsBackend *backend);
;;   GType (*get_certificate_type)(void);
;;   GType (*get_client_connection_type)(void);
;;   GType (*get_server_connection_type)(void);
;;   GType (*get_file_database_type)(void);
;;   GTlsDatabase *(*get_default_database)(GTlsBackend *backend);
;;   gboolean (*supports_dtls)(GTlsBackend *backend);
;;   GType (*get_dtls_client_connection_type)(void);
;;   GType (*get_dtls_server_connection_type)(void);
;; };
(define struct-_GTlsBackendInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(supports_tls ,(bs:pointer void))
          `(get_certificate_type ,(bs:pointer void))
          `(get_client_connection_type ,(bs:pointer void))
          `(get_server_connection_type ,(bs:pointer void))
          `(get_file_database_type ,(bs:pointer void))
          `(get_default_database ,(bs:pointer void))
          `(supports_dtls ,(bs:pointer void))
          `(get_dtls_client_connection_type
             ,(bs:pointer void))
          `(get_dtls_server_connection_type
             ,(bs:pointer void)))))
(export struct-_GTlsBackendInterface-desc)
(define-fh-compound-type/p struct-_GTlsBackendInterface struct-_GTlsBackendInterface-desc)
(set! GTlsBackendInterface-desc struct-_GTlsBackendInterface-desc)
(define-fh-compound-type GTlsBackendInterface GTlsBackendInterface-desc)

;; extern GType g_tls_backend_get_type(void);
(define ~g_tls_backend_get_type #f)
(define (g_tls_backend_get_type)
  (unless
    ~g_tls_backend_get_type
    (set! ~g_tls_backend_get_type
      (fh-link-proc
        "g_tls_backend_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_backend_get_type)))
(export g_tls_backend_get_type)

;; extern GTlsBackend *g_tls_backend_get_default(void);
(define ~g_tls_backend_get_default #f)
(define (g_tls_backend_get_default)
  (unless
    ~g_tls_backend_get_default
    (set! ~g_tls_backend_get_default
      (fh-link-proc
        "g_tls_backend_get_default"
        '*
        (list))))
  (let ()
    (wrap-GTlsBackend* (~g_tls_backend_get_default))))
(export g_tls_backend_get_default)

;; extern GTlsDatabase *g_tls_backend_get_default_database(GTlsBackend *backend
;;     );
(define ~g_tls_backend_get_default_database #f)
(define (g_tls_backend_get_default_database backend)
  (unless
    ~g_tls_backend_get_default_database
    (set! ~g_tls_backend_get_default_database
      (fh-link-proc
        "g_tls_backend_get_default_database"
        '*
        (list '*))))
  (let ((~backend (unwrap-GTlsBackend* backend)))
    (wrap-GTlsDatabase*
      (~g_tls_backend_get_default_database ~backend))))
(export g_tls_backend_get_default_database)

;; extern gboolean g_tls_backend_supports_tls(GTlsBackend *backend);
(define ~g_tls_backend_supports_tls #f)
(define (g_tls_backend_supports_tls backend)
  (unless
    ~g_tls_backend_supports_tls
    (set! ~g_tls_backend_supports_tls
      (fh-link-proc
        "g_tls_backend_supports_tls"
        ffi:int
        (list '*))))
  (let ((~backend (unwrap-GTlsBackend* backend)))
    (~g_tls_backend_supports_tls ~backend)))
(export g_tls_backend_supports_tls)

;; extern gboolean g_tls_backend_supports_dtls(GTlsBackend *backend);
(define ~g_tls_backend_supports_dtls #f)
(define (g_tls_backend_supports_dtls backend)
  (unless
    ~g_tls_backend_supports_dtls
    (set! ~g_tls_backend_supports_dtls
      (fh-link-proc
        "g_tls_backend_supports_dtls"
        ffi:int
        (list '*))))
  (let ((~backend (unwrap-GTlsBackend* backend)))
    (~g_tls_backend_supports_dtls ~backend)))
(export g_tls_backend_supports_dtls)

;; extern GType g_tls_backend_get_certificate_type(GTlsBackend *backend);
(define ~g_tls_backend_get_certificate_type #f)
(define (g_tls_backend_get_certificate_type backend)
  (unless
    ~g_tls_backend_get_certificate_type
    (set! ~g_tls_backend_get_certificate_type
      (fh-link-proc
        "g_tls_backend_get_certificate_type"
        ffi:unsigned-long
        (list '*))))
  (let ((~backend (unwrap-GTlsBackend* backend)))
    (~g_tls_backend_get_certificate_type ~backend)))
(export g_tls_backend_get_certificate_type)

;; extern GType g_tls_backend_get_client_connection_type(GTlsBackend *backend)
;;     ;
(define ~g_tls_backend_get_client_connection_type #f)
(define (g_tls_backend_get_client_connection_type
         backend)
  (unless
    ~g_tls_backend_get_client_connection_type
    (set! ~g_tls_backend_get_client_connection_type
      (fh-link-proc
        "g_tls_backend_get_client_connection_type"
        ffi:unsigned-long
        (list '*))))
  (let ((~backend (unwrap-GTlsBackend* backend)))
    (~g_tls_backend_get_client_connection_type
      ~backend)))
(export g_tls_backend_get_client_connection_type)

;; extern GType g_tls_backend_get_server_connection_type(GTlsBackend *backend)
;;     ;
(define ~g_tls_backend_get_server_connection_type #f)
(define (g_tls_backend_get_server_connection_type
         backend)
  (unless
    ~g_tls_backend_get_server_connection_type
    (set! ~g_tls_backend_get_server_connection_type
      (fh-link-proc
        "g_tls_backend_get_server_connection_type"
        ffi:unsigned-long
        (list '*))))
  (let ((~backend (unwrap-GTlsBackend* backend)))
    (~g_tls_backend_get_server_connection_type
      ~backend)))
(export g_tls_backend_get_server_connection_type)

;; extern GType g_tls_backend_get_file_database_type(GTlsBackend *backend);
(define ~g_tls_backend_get_file_database_type #f)
(define (g_tls_backend_get_file_database_type backend)
  (unless
    ~g_tls_backend_get_file_database_type
    (set! ~g_tls_backend_get_file_database_type
      (fh-link-proc
        "g_tls_backend_get_file_database_type"
        ffi:unsigned-long
        (list '*))))
  (let ((~backend (unwrap-GTlsBackend* backend)))
    (~g_tls_backend_get_file_database_type ~backend)))
(export g_tls_backend_get_file_database_type)

;; extern GType g_tls_backend_get_dtls_client_connection_type(GTlsBackend *
;;     backend);
(define ~g_tls_backend_get_dtls_client_connection_type #f)
(define (g_tls_backend_get_dtls_client_connection_type
         backend)
  (unless
    ~g_tls_backend_get_dtls_client_connection_type
    (set! ~g_tls_backend_get_dtls_client_connection_type
      (fh-link-proc
        "g_tls_backend_get_dtls_client_connection_type"
        ffi:unsigned-long
        (list '*))))
  (let ((~backend (unwrap-GTlsBackend* backend)))
    (~g_tls_backend_get_dtls_client_connection_type
      ~backend)))
(export g_tls_backend_get_dtls_client_connection_type)

;; extern GType g_tls_backend_get_dtls_server_connection_type(GTlsBackend *
;;     backend);
(define ~g_tls_backend_get_dtls_server_connection_type #f)
(define (g_tls_backend_get_dtls_server_connection_type
         backend)
  (unless
    ~g_tls_backend_get_dtls_server_connection_type
    (set! ~g_tls_backend_get_dtls_server_connection_type
      (fh-link-proc
        "g_tls_backend_get_dtls_server_connection_type"
        ffi:unsigned-long
        (list '*))))
  (let ((~backend (unwrap-GTlsBackend* backend)))
    (~g_tls_backend_get_dtls_server_connection_type
      ~backend)))
(export g_tls_backend_get_dtls_server_connection_type)

;; typedef struct _GTlsCertificateClass GTlsCertificateClass;
(define GTlsCertificateClass-desc void)
(export GTlsCertificateClass-desc)
(define GTlsCertificateClass*-desc (bs:pointer (delay GTlsCertificateClass-desc)))
(export GTlsCertificateClass*-desc)
(define-fh-pointer-type GTlsCertificateClass* GTlsCertificateClass*-desc)

;; typedef struct _GTlsCertificatePrivate GTlsCertificatePrivate;
(define GTlsCertificatePrivate-desc void)
(export GTlsCertificatePrivate-desc)
(define GTlsCertificatePrivate*-desc (bs:pointer GTlsCertificatePrivate-desc))
(export GTlsCertificatePrivate*-desc)
(define-fh-pointer-type GTlsCertificatePrivate* GTlsCertificatePrivate*-desc)

;; struct _GTlsCertificate {
;;   GObject parent_instance;
;;   GTlsCertificatePrivate *priv;
;; };
(define struct-_GTlsCertificate-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GTlsCertificatePrivate*-desc))))))
(export struct-_GTlsCertificate-desc)
(define-fh-compound-type/p struct-_GTlsCertificate struct-_GTlsCertificate-desc)
(set! GTlsCertificate-desc struct-_GTlsCertificate-desc)
(define-fh-compound-type GTlsCertificate GTlsCertificate-desc)

;; struct _GTlsCertificateClass {
;;   GObjectClass parent_class;
;;   GTlsCertificateFlags (*verify)(GTlsCertificate *cert, GSocketConnectable *
;;       identity, GTlsCertificate *trusted_ca);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   gpointer padding[8];
;; };
(define struct-_GTlsCertificateClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(verify ,(bs:pointer void))
          `(padding ,(bs:vector 8 gpointer-desc)))))
(export struct-_GTlsCertificateClass-desc)
(define-fh-compound-type/p struct-_GTlsCertificateClass struct-_GTlsCertificateClass-desc)
(set! GTlsCertificateClass-desc struct-_GTlsCertificateClass-desc)
(define-fh-compound-type GTlsCertificateClass GTlsCertificateClass-desc)

;; extern GType g_tls_certificate_get_type(void);
(define ~g_tls_certificate_get_type #f)
(define (g_tls_certificate_get_type)
  (unless
    ~g_tls_certificate_get_type
    (set! ~g_tls_certificate_get_type
      (fh-link-proc
        "g_tls_certificate_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_certificate_get_type)))
(export g_tls_certificate_get_type)

;; extern GTlsCertificate *g_tls_certificate_new_from_pem(const gchar *data, 
;;     gssize length, GError **error);
(define ~g_tls_certificate_new_from_pem #f)
(define (g_tls_certificate_new_from_pem
         data
         length
         error)
  (unless
    ~g_tls_certificate_new_from_pem
    (set! ~g_tls_certificate_new_from_pem
      (fh-link-proc
        "g_tls_certificate_new_from_pem"
        '*
        (list '* ffi:long '*))))
  (let ((~data (unwrap~pointer data))
        (~length (unwrap~fixed length))
        (~error (unwrap~pointer error)))
    (wrap-GTlsCertificate*
      (~g_tls_certificate_new_from_pem
        ~data
        ~length
        ~error))))
(export g_tls_certificate_new_from_pem)

;; extern GTlsCertificate *g_tls_certificate_new_from_file(const gchar *file, 
;;     GError **error);
(define ~g_tls_certificate_new_from_file #f)
(define (g_tls_certificate_new_from_file file error)
  (unless
    ~g_tls_certificate_new_from_file
    (set! ~g_tls_certificate_new_from_file
      (fh-link-proc
        "g_tls_certificate_new_from_file"
        '*
        (list '* '*))))
  (let ((~file (unwrap~pointer file))
        (~error (unwrap~pointer error)))
    (wrap-GTlsCertificate*
      (~g_tls_certificate_new_from_file ~file ~error))))
(export g_tls_certificate_new_from_file)

;; extern GTlsCertificate *g_tls_certificate_new_from_files(const gchar *
;;     cert_file, const gchar *key_file, GError **error);
(define ~g_tls_certificate_new_from_files #f)
(define (g_tls_certificate_new_from_files
         cert_file
         key_file
         error)
  (unless
    ~g_tls_certificate_new_from_files
    (set! ~g_tls_certificate_new_from_files
      (fh-link-proc
        "g_tls_certificate_new_from_files"
        '*
        (list '* '* '*))))
  (let ((~cert_file (unwrap~pointer cert_file))
        (~key_file (unwrap~pointer key_file))
        (~error (unwrap~pointer error)))
    (wrap-GTlsCertificate*
      (~g_tls_certificate_new_from_files
        ~cert_file
        ~key_file
        ~error))))
(export g_tls_certificate_new_from_files)

;; extern GList *g_tls_certificate_list_new_from_file(const gchar *file, GError
;;      **error);
(define ~g_tls_certificate_list_new_from_file #f)
(define (g_tls_certificate_list_new_from_file file error)
  (unless
    ~g_tls_certificate_list_new_from_file
    (set! ~g_tls_certificate_list_new_from_file
      (fh-link-proc
        "g_tls_certificate_list_new_from_file"
        '*
        (list '* '*))))
  (let ((~file (unwrap~pointer file))
        (~error (unwrap~pointer error)))
    (~g_tls_certificate_list_new_from_file
      ~file
      ~error)))
(export g_tls_certificate_list_new_from_file)

;; extern GTlsCertificate *g_tls_certificate_get_issuer(GTlsCertificate *cert)
;;     ;
(define ~g_tls_certificate_get_issuer #f)
(define (g_tls_certificate_get_issuer cert)
  (unless
    ~g_tls_certificate_get_issuer
    (set! ~g_tls_certificate_get_issuer
      (fh-link-proc
        "g_tls_certificate_get_issuer"
        '*
        (list '*))))
  (let ((~cert (unwrap-GTlsCertificate* cert)))
    (wrap-GTlsCertificate*
      (~g_tls_certificate_get_issuer ~cert))))
(export g_tls_certificate_get_issuer)

;; extern GTlsCertificateFlags g_tls_certificate_verify(GTlsCertificate *cert, 
;;     GSocketConnectable *identity, GTlsCertificate *trusted_ca);
(define ~g_tls_certificate_verify #f)
(define (g_tls_certificate_verify
         cert
         identity
         trusted_ca)
  (unless
    ~g_tls_certificate_verify
    (set! ~g_tls_certificate_verify
      (fh-link-proc
        "g_tls_certificate_verify"
        ffi:int
        (list '* '* '*))))
  (let ((~cert (unwrap-GTlsCertificate* cert))
        (~identity (unwrap-GSocketConnectable* identity))
        (~trusted_ca
          (unwrap-GTlsCertificate* trusted_ca)))
    (~g_tls_certificate_verify
      ~cert
      ~identity
      ~trusted_ca)))
(export g_tls_certificate_verify)

;; extern gboolean g_tls_certificate_is_same(GTlsCertificate *cert_one, 
;;     GTlsCertificate *cert_two);
(define ~g_tls_certificate_is_same #f)
(define (g_tls_certificate_is_same cert_one cert_two)
  (unless
    ~g_tls_certificate_is_same
    (set! ~g_tls_certificate_is_same
      (fh-link-proc
        "g_tls_certificate_is_same"
        ffi:int
        (list '* '*))))
  (let ((~cert_one (unwrap-GTlsCertificate* cert_one))
        (~cert_two (unwrap-GTlsCertificate* cert_two)))
    (~g_tls_certificate_is_same ~cert_one ~cert_two)))
(export g_tls_certificate_is_same)

;; typedef struct _GTlsConnectionClass GTlsConnectionClass;
(define GTlsConnectionClass-desc void)
(export GTlsConnectionClass-desc)
(define GTlsConnectionClass*-desc (bs:pointer (delay GTlsConnectionClass-desc)))
(export GTlsConnectionClass*-desc)
(define-fh-pointer-type GTlsConnectionClass* GTlsConnectionClass*-desc)

;; typedef struct _GTlsConnectionPrivate GTlsConnectionPrivate;
(define GTlsConnectionPrivate-desc void)
(export GTlsConnectionPrivate-desc)
(define GTlsConnectionPrivate*-desc (bs:pointer GTlsConnectionPrivate-desc))
(export GTlsConnectionPrivate*-desc)
(define-fh-pointer-type GTlsConnectionPrivate* GTlsConnectionPrivate*-desc)

;; struct _GTlsConnection {
;;   GIOStream parent_instance;
;;   GTlsConnectionPrivate *priv;
;; };
(define struct-_GTlsConnection-desc
  (bs:struct
    (list `(parent_instance ,GIOStream-desc)
          `(priv ,(bs:pointer (delay GTlsConnectionPrivate*-desc))))))
(export struct-_GTlsConnection-desc)
(define-fh-compound-type/p struct-_GTlsConnection struct-_GTlsConnection-desc)
(set! GTlsConnection-desc struct-_GTlsConnection-desc)
(define-fh-compound-type GTlsConnection GTlsConnection-desc)

;; struct _GTlsConnectionClass {
;;   GIOStreamClass parent_class;
;;   /* signals */
;;   gboolean (*accept_certificate)(GTlsConnection *connection, GTlsCertificate
;;        *peer_cert, GTlsCertificateFlags errors);
;;   /* methods */
;;   gboolean (*handshake)(GTlsConnection *conn, GCancellable *cancellable, 
;;       GError **error);
;;   void (*handshake_async)(GTlsConnection *conn, int io_priority, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   gboolean (*handshake_finish)(GTlsConnection *conn, GAsyncResult *result, 
;;       GError **error);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   gpointer padding[8];
;; };
(define struct-_GTlsConnectionClass-desc
  (bs:struct
    (list `(parent_class ,GIOStreamClass-desc)
          `(accept_certificate ,(bs:pointer void))
          `(handshake ,(bs:pointer void))
          `(handshake_async ,(bs:pointer void))
          `(handshake_finish ,(bs:pointer void))
          `(padding ,(bs:vector 8 gpointer-desc)))))
(export struct-_GTlsConnectionClass-desc)
(define-fh-compound-type/p struct-_GTlsConnectionClass struct-_GTlsConnectionClass-desc)
(set! GTlsConnectionClass-desc struct-_GTlsConnectionClass-desc)
(define-fh-compound-type GTlsConnectionClass GTlsConnectionClass-desc)

;; extern GType g_tls_connection_get_type(void);
(define ~g_tls_connection_get_type #f)
(define (g_tls_connection_get_type)
  (unless
    ~g_tls_connection_get_type
    (set! ~g_tls_connection_get_type
      (fh-link-proc
        "g_tls_connection_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_connection_get_type)))
(export g_tls_connection_get_type)

;; extern void g_tls_connection_set_use_system_certdb(GTlsConnection *conn, 
;;     gboolean use_system_certdb);
(define ~g_tls_connection_set_use_system_certdb #f)
(define (g_tls_connection_set_use_system_certdb
         conn
         use_system_certdb)
  (unless
    ~g_tls_connection_set_use_system_certdb
    (set! ~g_tls_connection_set_use_system_certdb
      (fh-link-proc
        "g_tls_connection_set_use_system_certdb"
        ffi:void
        (list '* ffi:int))))
  (let ((~conn (unwrap-GTlsConnection* conn))
        (~use_system_certdb
          (unwrap~fixed use_system_certdb)))
    (~g_tls_connection_set_use_system_certdb
      ~conn
      ~use_system_certdb)))
(export g_tls_connection_set_use_system_certdb)

;; extern gboolean g_tls_connection_get_use_system_certdb(GTlsConnection *conn)
;;     ;
(define ~g_tls_connection_get_use_system_certdb #f)
(define (g_tls_connection_get_use_system_certdb conn)
  (unless
    ~g_tls_connection_get_use_system_certdb
    (set! ~g_tls_connection_get_use_system_certdb
      (fh-link-proc
        "g_tls_connection_get_use_system_certdb"
        ffi:int
        (list '*))))
  (let ((~conn (unwrap-GTlsConnection* conn)))
    (~g_tls_connection_get_use_system_certdb ~conn)))
(export g_tls_connection_get_use_system_certdb)

;; extern void g_tls_connection_set_database(GTlsConnection *conn, GTlsDatabase
;;      *database);
(define ~g_tls_connection_set_database #f)
(define (g_tls_connection_set_database conn database)
  (unless
    ~g_tls_connection_set_database
    (set! ~g_tls_connection_set_database
      (fh-link-proc
        "g_tls_connection_set_database"
        ffi:void
        (list '* '*))))
  (let ((~conn (unwrap-GTlsConnection* conn))
        (~database (unwrap-GTlsDatabase* database)))
    (~g_tls_connection_set_database ~conn ~database)))
(export g_tls_connection_set_database)

;; extern GTlsDatabase *g_tls_connection_get_database(GTlsConnection *conn);
(define ~g_tls_connection_get_database #f)
(define (g_tls_connection_get_database conn)
  (unless
    ~g_tls_connection_get_database
    (set! ~g_tls_connection_get_database
      (fh-link-proc
        "g_tls_connection_get_database"
        '*
        (list '*))))
  (let ((~conn (unwrap-GTlsConnection* conn)))
    (wrap-GTlsDatabase*
      (~g_tls_connection_get_database ~conn))))
(export g_tls_connection_get_database)

;; extern void g_tls_connection_set_certificate(GTlsConnection *conn, 
;;     GTlsCertificate *certificate);
(define ~g_tls_connection_set_certificate #f)
(define (g_tls_connection_set_certificate
         conn
         certificate)
  (unless
    ~g_tls_connection_set_certificate
    (set! ~g_tls_connection_set_certificate
      (fh-link-proc
        "g_tls_connection_set_certificate"
        ffi:void
        (list '* '*))))
  (let ((~conn (unwrap-GTlsConnection* conn))
        (~certificate
          (unwrap-GTlsCertificate* certificate)))
    (~g_tls_connection_set_certificate
      ~conn
      ~certificate)))
(export g_tls_connection_set_certificate)

;; extern GTlsCertificate *g_tls_connection_get_certificate(GTlsConnection *
;;     conn);
(define ~g_tls_connection_get_certificate #f)
(define (g_tls_connection_get_certificate conn)
  (unless
    ~g_tls_connection_get_certificate
    (set! ~g_tls_connection_get_certificate
      (fh-link-proc
        "g_tls_connection_get_certificate"
        '*
        (list '*))))
  (let ((~conn (unwrap-GTlsConnection* conn)))
    (wrap-GTlsCertificate*
      (~g_tls_connection_get_certificate ~conn))))
(export g_tls_connection_get_certificate)

;; extern void g_tls_connection_set_interaction(GTlsConnection *conn, 
;;     GTlsInteraction *interaction);
(define ~g_tls_connection_set_interaction #f)
(define (g_tls_connection_set_interaction
         conn
         interaction)
  (unless
    ~g_tls_connection_set_interaction
    (set! ~g_tls_connection_set_interaction
      (fh-link-proc
        "g_tls_connection_set_interaction"
        ffi:void
        (list '* '*))))
  (let ((~conn (unwrap-GTlsConnection* conn))
        (~interaction
          (unwrap-GTlsInteraction* interaction)))
    (~g_tls_connection_set_interaction
      ~conn
      ~interaction)))
(export g_tls_connection_set_interaction)

;; extern GTlsInteraction *g_tls_connection_get_interaction(GTlsConnection *
;;     conn);
(define ~g_tls_connection_get_interaction #f)
(define (g_tls_connection_get_interaction conn)
  (unless
    ~g_tls_connection_get_interaction
    (set! ~g_tls_connection_get_interaction
      (fh-link-proc
        "g_tls_connection_get_interaction"
        '*
        (list '*))))
  (let ((~conn (unwrap-GTlsConnection* conn)))
    (wrap-GTlsInteraction*
      (~g_tls_connection_get_interaction ~conn))))
(export g_tls_connection_get_interaction)

;; extern GTlsCertificate *g_tls_connection_get_peer_certificate(GTlsConnection
;;      *conn);
(define ~g_tls_connection_get_peer_certificate #f)
(define (g_tls_connection_get_peer_certificate conn)
  (unless
    ~g_tls_connection_get_peer_certificate
    (set! ~g_tls_connection_get_peer_certificate
      (fh-link-proc
        "g_tls_connection_get_peer_certificate"
        '*
        (list '*))))
  (let ((~conn (unwrap-GTlsConnection* conn)))
    (wrap-GTlsCertificate*
      (~g_tls_connection_get_peer_certificate ~conn))))
(export g_tls_connection_get_peer_certificate)

;; extern GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors(
;;     GTlsConnection *conn);
(define ~g_tls_connection_get_peer_certificate_errors #f)
(define (g_tls_connection_get_peer_certificate_errors
         conn)
  (unless
    ~g_tls_connection_get_peer_certificate_errors
    (set! ~g_tls_connection_get_peer_certificate_errors
      (fh-link-proc
        "g_tls_connection_get_peer_certificate_errors"
        ffi:int
        (list '*))))
  (let ((~conn (unwrap-GTlsConnection* conn)))
    (~g_tls_connection_get_peer_certificate_errors
      ~conn)))
(export g_tls_connection_get_peer_certificate_errors)

;; extern void g_tls_connection_set_require_close_notify(GTlsConnection *conn, 
;;     gboolean require_close_notify);
(define ~g_tls_connection_set_require_close_notify #f)
(define (g_tls_connection_set_require_close_notify
         conn
         require_close_notify)
  (unless
    ~g_tls_connection_set_require_close_notify
    (set! ~g_tls_connection_set_require_close_notify
      (fh-link-proc
        "g_tls_connection_set_require_close_notify"
        ffi:void
        (list '* ffi:int))))
  (let ((~conn (unwrap-GTlsConnection* conn))
        (~require_close_notify
          (unwrap~fixed require_close_notify)))
    (~g_tls_connection_set_require_close_notify
      ~conn
      ~require_close_notify)))
(export g_tls_connection_set_require_close_notify)

;; extern gboolean g_tls_connection_get_require_close_notify(GTlsConnection *
;;     conn);
(define ~g_tls_connection_get_require_close_notify #f)
(define (g_tls_connection_get_require_close_notify conn)
  (unless
    ~g_tls_connection_get_require_close_notify
    (set! ~g_tls_connection_get_require_close_notify
      (fh-link-proc
        "g_tls_connection_get_require_close_notify"
        ffi:int
        (list '*))))
  (let ((~conn (unwrap-GTlsConnection* conn)))
    (~g_tls_connection_get_require_close_notify
      ~conn)))
(export g_tls_connection_get_require_close_notify)

;; extern void g_tls_connection_set_rehandshake_mode(GTlsConnection *conn, 
;;     GTlsRehandshakeMode mode);
(define ~g_tls_connection_set_rehandshake_mode #f)
(define (g_tls_connection_set_rehandshake_mode conn mode)
  (unless
    ~g_tls_connection_set_rehandshake_mode
    (set! ~g_tls_connection_set_rehandshake_mode
      (fh-link-proc
        "g_tls_connection_set_rehandshake_mode"
        ffi:void
        (list '* ffi:int))))
  (let ((~conn (unwrap-GTlsConnection* conn))
        (~mode (unwrap~fixed mode)))
    (~g_tls_connection_set_rehandshake_mode
      ~conn
      ~mode)))
(export g_tls_connection_set_rehandshake_mode)

;; extern GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode(
;;     GTlsConnection *conn);
(define ~g_tls_connection_get_rehandshake_mode #f)
(define (g_tls_connection_get_rehandshake_mode conn)
  (unless
    ~g_tls_connection_get_rehandshake_mode
    (set! ~g_tls_connection_get_rehandshake_mode
      (fh-link-proc
        "g_tls_connection_get_rehandshake_mode"
        ffi:int
        (list '*))))
  (let ((~conn (unwrap-GTlsConnection* conn)))
    (~g_tls_connection_get_rehandshake_mode ~conn)))
(export g_tls_connection_get_rehandshake_mode)

;; extern gboolean g_tls_connection_handshake(GTlsConnection *conn, 
;;     GCancellable *cancellable, GError **error);
(define ~g_tls_connection_handshake #f)
(define (g_tls_connection_handshake
         conn
         cancellable
         error)
  (unless
    ~g_tls_connection_handshake
    (set! ~g_tls_connection_handshake
      (fh-link-proc
        "g_tls_connection_handshake"
        ffi:int
        (list '* '* '*))))
  (let ((~conn (unwrap-GTlsConnection* conn))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_tls_connection_handshake
      ~conn
      ~cancellable
      ~error)))
(export g_tls_connection_handshake)

;; extern void g_tls_connection_handshake_async(GTlsConnection *conn, int 
;;     io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;     gpointer user_data);
(define ~g_tls_connection_handshake_async #f)
(define (g_tls_connection_handshake_async
         conn
         io_priority
         cancellable
         callback
         user_data)
  (unless
    ~g_tls_connection_handshake_async
    (set! ~g_tls_connection_handshake_async
      (fh-link-proc
        "g_tls_connection_handshake_async"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~conn (unwrap-GTlsConnection* conn))
        (~io_priority (unwrap~fixed io_priority))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_tls_connection_handshake_async
      ~conn
      ~io_priority
      ~cancellable
      ~callback
      ~user_data)))
(export g_tls_connection_handshake_async)

;; extern gboolean g_tls_connection_handshake_finish(GTlsConnection *conn, 
;;     GAsyncResult *result, GError **error);
(define ~g_tls_connection_handshake_finish #f)
(define (g_tls_connection_handshake_finish
         conn
         result
         error)
  (unless
    ~g_tls_connection_handshake_finish
    (set! ~g_tls_connection_handshake_finish
      (fh-link-proc
        "g_tls_connection_handshake_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~conn (unwrap-GTlsConnection* conn))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_tls_connection_handshake_finish
      ~conn
      ~result
      ~error)))
(export g_tls_connection_handshake_finish)

;; extern GQuark g_tls_error_quark(void);
(define ~g_tls_error_quark #f)
(define (g_tls_error_quark)
  (unless
    ~g_tls_error_quark
    (set! ~g_tls_error_quark
      (fh-link-proc
        "g_tls_error_quark"
        ffi:unsigned-int
        (list))))
  (let () (~g_tls_error_quark)))
(export g_tls_error_quark)

;; extern gboolean g_tls_connection_emit_accept_certificate(GTlsConnection *
;;     conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors);
(define ~g_tls_connection_emit_accept_certificate #f)
(define (g_tls_connection_emit_accept_certificate
         conn
         peer_cert
         errors)
  (unless
    ~g_tls_connection_emit_accept_certificate
    (set! ~g_tls_connection_emit_accept_certificate
      (fh-link-proc
        "g_tls_connection_emit_accept_certificate"
        ffi:int
        (list '* '* ffi:int))))
  (let ((~conn (unwrap-GTlsConnection* conn))
        (~peer_cert (unwrap-GTlsCertificate* peer_cert))
        (~errors (unwrap~fixed errors)))
    (~g_tls_connection_emit_accept_certificate
      ~conn
      ~peer_cert
      ~errors)))
(export g_tls_connection_emit_accept_certificate)

;; typedef struct _GTlsClientConnectionInterface GTlsClientConnectionInterface
;;     ;
(define GTlsClientConnectionInterface-desc void)
(export GTlsClientConnectionInterface-desc)
(define GTlsClientConnectionInterface*-desc (bs:pointer (delay GTlsClientConnectionInterface-desc)))
(export GTlsClientConnectionInterface*-desc)
(define-fh-pointer-type GTlsClientConnectionInterface* GTlsClientConnectionInterface*-desc)

;; struct _GTlsClientConnectionInterface {
;;   GTypeInterface g_iface;
;;   void (*copy_session_state)(GTlsClientConnection *conn, 
;;       GTlsClientConnection *source);
;; };
(define struct-_GTlsClientConnectionInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(copy_session_state ,(bs:pointer void)))))
(export struct-_GTlsClientConnectionInterface-desc)
(define-fh-compound-type/p struct-_GTlsClientConnectionInterface struct-_GTlsClientConnectionInterface-desc)
(set! GTlsClientConnectionInterface-desc struct-_GTlsClientConnectionInterface-desc)
(define-fh-compound-type GTlsClientConnectionInterface GTlsClientConnectionInterface-desc)

;; extern GType g_tls_client_connection_get_type(void);
(define ~g_tls_client_connection_get_type #f)
(define (g_tls_client_connection_get_type)
  (unless
    ~g_tls_client_connection_get_type
    (set! ~g_tls_client_connection_get_type
      (fh-link-proc
        "g_tls_client_connection_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_client_connection_get_type)))
(export g_tls_client_connection_get_type)

;; extern GIOStream *g_tls_client_connection_new(GIOStream *base_io_stream, 
;;     GSocketConnectable *server_identity, GError **error);
(define ~g_tls_client_connection_new #f)
(define (g_tls_client_connection_new
         base_io_stream
         server_identity
         error)
  (unless
    ~g_tls_client_connection_new
    (set! ~g_tls_client_connection_new
      (fh-link-proc
        "g_tls_client_connection_new"
        '*
        (list '* '* '*))))
  (let ((~base_io_stream
          (unwrap-GIOStream* base_io_stream))
        (~server_identity
          (unwrap-GSocketConnectable* server_identity))
        (~error (unwrap~pointer error)))
    (wrap-GIOStream*
      (~g_tls_client_connection_new
        ~base_io_stream
        ~server_identity
        ~error))))
(export g_tls_client_connection_new)

;; extern GTlsCertificateFlags g_tls_client_connection_get_validation_flags(
;;     GTlsClientConnection *conn);
(define ~g_tls_client_connection_get_validation_flags #f)
(define (g_tls_client_connection_get_validation_flags
         conn)
  (unless
    ~g_tls_client_connection_get_validation_flags
    (set! ~g_tls_client_connection_get_validation_flags
      (fh-link-proc
        "g_tls_client_connection_get_validation_flags"
        ffi:int
        (list '*))))
  (let ((~conn (unwrap-GTlsClientConnection* conn)))
    (~g_tls_client_connection_get_validation_flags
      ~conn)))
(export g_tls_client_connection_get_validation_flags)

;; extern void g_tls_client_connection_set_validation_flags(
;;     GTlsClientConnection *conn, GTlsCertificateFlags flags);
(define ~g_tls_client_connection_set_validation_flags #f)
(define (g_tls_client_connection_set_validation_flags
         conn
         flags)
  (unless
    ~g_tls_client_connection_set_validation_flags
    (set! ~g_tls_client_connection_set_validation_flags
      (fh-link-proc
        "g_tls_client_connection_set_validation_flags"
        ffi:void
        (list '* ffi:int))))
  (let ((~conn (unwrap-GTlsClientConnection* conn))
        (~flags (unwrap~fixed flags)))
    (~g_tls_client_connection_set_validation_flags
      ~conn
      ~flags)))
(export g_tls_client_connection_set_validation_flags)

;; extern GSocketConnectable *g_tls_client_connection_get_server_identity(
;;     GTlsClientConnection *conn);
(define ~g_tls_client_connection_get_server_identity #f)
(define (g_tls_client_connection_get_server_identity
         conn)
  (unless
    ~g_tls_client_connection_get_server_identity
    (set! ~g_tls_client_connection_get_server_identity
      (fh-link-proc
        "g_tls_client_connection_get_server_identity"
        '*
        (list '*))))
  (let ((~conn (unwrap-GTlsClientConnection* conn)))
    (wrap-GSocketConnectable*
      (~g_tls_client_connection_get_server_identity
        ~conn))))
(export g_tls_client_connection_get_server_identity)

;; extern void g_tls_client_connection_set_server_identity(GTlsClientConnection
;;      *conn, GSocketConnectable *identity);
(define ~g_tls_client_connection_set_server_identity #f)
(define (g_tls_client_connection_set_server_identity
         conn
         identity)
  (unless
    ~g_tls_client_connection_set_server_identity
    (set! ~g_tls_client_connection_set_server_identity
      (fh-link-proc
        "g_tls_client_connection_set_server_identity"
        ffi:void
        (list '* '*))))
  (let ((~conn (unwrap-GTlsClientConnection* conn))
        (~identity (unwrap-GSocketConnectable* identity)))
    (~g_tls_client_connection_set_server_identity
      ~conn
      ~identity)))
(export g_tls_client_connection_set_server_identity)

;; extern gboolean g_tls_client_connection_get_use_ssl3(GTlsClientConnection *
;;     conn);
(define ~g_tls_client_connection_get_use_ssl3 #f)
(define (g_tls_client_connection_get_use_ssl3 conn)
  (unless
    ~g_tls_client_connection_get_use_ssl3
    (set! ~g_tls_client_connection_get_use_ssl3
      (fh-link-proc
        "g_tls_client_connection_get_use_ssl3"
        ffi:int
        (list '*))))
  (let ((~conn (unwrap-GTlsClientConnection* conn)))
    (~g_tls_client_connection_get_use_ssl3 ~conn)))
(export g_tls_client_connection_get_use_ssl3)

;; extern void g_tls_client_connection_set_use_ssl3(GTlsClientConnection *conn
;;     , gboolean use_ssl3);
(define ~g_tls_client_connection_set_use_ssl3 #f)
(define (g_tls_client_connection_set_use_ssl3
         conn
         use_ssl3)
  (unless
    ~g_tls_client_connection_set_use_ssl3
    (set! ~g_tls_client_connection_set_use_ssl3
      (fh-link-proc
        "g_tls_client_connection_set_use_ssl3"
        ffi:void
        (list '* ffi:int))))
  (let ((~conn (unwrap-GTlsClientConnection* conn))
        (~use_ssl3 (unwrap~fixed use_ssl3)))
    (~g_tls_client_connection_set_use_ssl3
      ~conn
      ~use_ssl3)))
(export g_tls_client_connection_set_use_ssl3)

;; extern GList *g_tls_client_connection_get_accepted_cas(GTlsClientConnection 
;;     *conn);
(define ~g_tls_client_connection_get_accepted_cas #f)
(define (g_tls_client_connection_get_accepted_cas conn)
  (unless
    ~g_tls_client_connection_get_accepted_cas
    (set! ~g_tls_client_connection_get_accepted_cas
      (fh-link-proc
        "g_tls_client_connection_get_accepted_cas"
        '*
        (list '*))))
  (let ((~conn (unwrap-GTlsClientConnection* conn)))
    (~g_tls_client_connection_get_accepted_cas ~conn)))
(export g_tls_client_connection_get_accepted_cas)

;; extern void g_tls_client_connection_copy_session_state(GTlsClientConnection 
;;     *conn, GTlsClientConnection *source);
(define ~g_tls_client_connection_copy_session_state #f)
(define (g_tls_client_connection_copy_session_state
         conn
         source)
  (unless
    ~g_tls_client_connection_copy_session_state
    (set! ~g_tls_client_connection_copy_session_state
      (fh-link-proc
        "g_tls_client_connection_copy_session_state"
        ffi:void
        (list '* '*))))
  (let ((~conn (unwrap-GTlsClientConnection* conn))
        (~source (unwrap-GTlsClientConnection* source)))
    (~g_tls_client_connection_copy_session_state
      ~conn
      ~source)))
(export g_tls_client_connection_copy_session_state)

;; typedef struct _GTlsDatabaseClass GTlsDatabaseClass;
(define GTlsDatabaseClass-desc void)
(export GTlsDatabaseClass-desc)
(define GTlsDatabaseClass*-desc (bs:pointer (delay GTlsDatabaseClass-desc)))
(export GTlsDatabaseClass*-desc)
(define-fh-pointer-type GTlsDatabaseClass* GTlsDatabaseClass*-desc)

;; typedef struct _GTlsDatabasePrivate GTlsDatabasePrivate;
(define GTlsDatabasePrivate-desc void)
(export GTlsDatabasePrivate-desc)
(define GTlsDatabasePrivate*-desc (bs:pointer GTlsDatabasePrivate-desc))
(export GTlsDatabasePrivate*-desc)
(define-fh-pointer-type GTlsDatabasePrivate* GTlsDatabasePrivate*-desc)

;; struct _GTlsDatabase {
;;   GObject parent_instance;
;;   GTlsDatabasePrivate *priv;
;; };
(define struct-_GTlsDatabase-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GTlsDatabasePrivate*-desc))))))
(export struct-_GTlsDatabase-desc)
(define-fh-compound-type/p struct-_GTlsDatabase struct-_GTlsDatabase-desc)
(set! GTlsDatabase-desc struct-_GTlsDatabase-desc)
(define-fh-compound-type GTlsDatabase GTlsDatabase-desc)

;; struct _GTlsDatabaseClass {
;;   GObjectClass parent_class;
;;   /* virtual methods */
;;   GTlsCertificateFlags (*verify_chain)(GTlsDatabase *self, GTlsCertificate *
;;       chain, const gchar *purpose, GSocketConnectable *identity, 
;;       GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, 
;;       GCancellable *cancellable, GError **error);
;;   void (*verify_chain_async)(GTlsDatabase *self, GTlsCertificate *chain, 
;;       const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *
;;       interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable
;;       , GAsyncReadyCallback callback, gpointer user_data);
;;   GTlsCertificateFlags (*verify_chain_finish)(GTlsDatabase *self, 
;;       GAsyncResult *result, GError **error);
;;   gchar *(*create_certificate_handle)(GTlsDatabase *self, GTlsCertificate *
;;       certificate);
;;   GTlsCertificate *(*lookup_certificate_for_handle)(GTlsDatabase *self, 
;;       const gchar *handle, GTlsInteraction *interaction, 
;;       GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **
;;       error);
;;   void (*lookup_certificate_for_handle_async)(GTlsDatabase *self, const 
;;       gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags 
;;       flags, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;       gpointer user_data);
;;   GTlsCertificate *(*lookup_certificate_for_handle_finish)(GTlsDatabase *
;;       self, GAsyncResult *result, GError **error);
;;   GTlsCertificate *(*lookup_certificate_issuer)(GTlsDatabase *self, 
;;       GTlsCertificate *certificate, GTlsInteraction *interaction, 
;;       GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **
;;       error);
;;   void (*lookup_certificate_issuer_async)(GTlsDatabase *self, 
;;       GTlsCertificate *certificate, GTlsInteraction *interaction, 
;;       GTlsDatabaseLookupFlags flags, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   GTlsCertificate *(*lookup_certificate_issuer_finish)(GTlsDatabase *self, 
;;       GAsyncResult *result, GError **error);
;;   GList *(*lookup_certificates_issued_by)(GTlsDatabase *self, GByteArray *
;;       issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags 
;;       flags, GCancellable *cancellable, GError **error);
;;   void (*lookup_certificates_issued_by_async)(GTlsDatabase *self, GByteArray
;;        *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags
;;        flags, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;       gpointer user_data);
;;   GList *(*lookup_certificates_issued_by_finish)(GTlsDatabase *self, 
;;       GAsyncResult *result, GError **error);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   gpointer padding[16];
;; };
(define struct-_GTlsDatabaseClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(verify_chain ,(bs:pointer void))
          `(verify_chain_async ,(bs:pointer void))
          `(verify_chain_finish ,(bs:pointer void))
          `(create_certificate_handle ,(bs:pointer void))
          `(lookup_certificate_for_handle
             ,(bs:pointer void))
          `(lookup_certificate_for_handle_async
             ,(bs:pointer void))
          `(lookup_certificate_for_handle_finish
             ,(bs:pointer void))
          `(lookup_certificate_issuer ,(bs:pointer void))
          `(lookup_certificate_issuer_async
             ,(bs:pointer void))
          `(lookup_certificate_issuer_finish
             ,(bs:pointer void))
          `(lookup_certificates_issued_by
             ,(bs:pointer void))
          `(lookup_certificates_issued_by_async
             ,(bs:pointer void))
          `(lookup_certificates_issued_by_finish
             ,(bs:pointer void))
          `(padding ,(bs:vector 16 gpointer-desc)))))
(export struct-_GTlsDatabaseClass-desc)
(define-fh-compound-type/p struct-_GTlsDatabaseClass struct-_GTlsDatabaseClass-desc)
(set! GTlsDatabaseClass-desc struct-_GTlsDatabaseClass-desc)
(define-fh-compound-type GTlsDatabaseClass GTlsDatabaseClass-desc)

;; extern GType g_tls_database_get_type(void);
(define ~g_tls_database_get_type #f)
(define (g_tls_database_get_type)
  (unless
    ~g_tls_database_get_type
    (set! ~g_tls_database_get_type
      (fh-link-proc
        "g_tls_database_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_database_get_type)))
(export g_tls_database_get_type)

;; extern GTlsCertificateFlags g_tls_database_verify_chain(GTlsDatabase *self, 
;;     GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *
;;     identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, 
;;     GCancellable *cancellable, GError **error);
(define ~g_tls_database_verify_chain #f)
(define (g_tls_database_verify_chain
         self
         chain
         purpose
         identity
         interaction
         flags
         cancellable
         error)
  (unless
    ~g_tls_database_verify_chain
    (set! ~g_tls_database_verify_chain
      (fh-link-proc
        "g_tls_database_verify_chain"
        ffi:int
        (list '* '* '* '* '* ffi:int '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~chain (unwrap-GTlsCertificate* chain))
        (~purpose (unwrap~pointer purpose))
        (~identity (unwrap-GSocketConnectable* identity))
        (~interaction
          (unwrap-GTlsInteraction* interaction))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_tls_database_verify_chain
      ~self
      ~chain
      ~purpose
      ~identity
      ~interaction
      ~flags
      ~cancellable
      ~error)))
(export g_tls_database_verify_chain)

;; extern void g_tls_database_verify_chain_async(GTlsDatabase *self, 
;;     GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *
;;     identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_tls_database_verify_chain_async #f)
(define (g_tls_database_verify_chain_async
         self
         chain
         purpose
         identity
         interaction
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_tls_database_verify_chain_async
    (set! ~g_tls_database_verify_chain_async
      (fh-link-proc
        "g_tls_database_verify_chain_async"
        ffi:void
        (list '* '* '* '* '* ffi:int '* '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~chain (unwrap-GTlsCertificate* chain))
        (~purpose (unwrap~pointer purpose))
        (~identity (unwrap-GSocketConnectable* identity))
        (~interaction
          (unwrap-GTlsInteraction* interaction))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_tls_database_verify_chain_async
      ~self
      ~chain
      ~purpose
      ~identity
      ~interaction
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_tls_database_verify_chain_async)

;; extern GTlsCertificateFlags g_tls_database_verify_chain_finish(GTlsDatabase 
;;     *self, GAsyncResult *result, GError **error);
(define ~g_tls_database_verify_chain_finish #f)
(define (g_tls_database_verify_chain_finish
         self
         result
         error)
  (unless
    ~g_tls_database_verify_chain_finish
    (set! ~g_tls_database_verify_chain_finish
      (fh-link-proc
        "g_tls_database_verify_chain_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_tls_database_verify_chain_finish
      ~self
      ~result
      ~error)))
(export g_tls_database_verify_chain_finish)

;; extern gchar *g_tls_database_create_certificate_handle(GTlsDatabase *self, 
;;     GTlsCertificate *certificate);
(define ~g_tls_database_create_certificate_handle #f)
(define (g_tls_database_create_certificate_handle
         self
         certificate)
  (unless
    ~g_tls_database_create_certificate_handle
    (set! ~g_tls_database_create_certificate_handle
      (fh-link-proc
        "g_tls_database_create_certificate_handle"
        '*
        (list '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~certificate
          (unwrap-GTlsCertificate* certificate)))
    (~g_tls_database_create_certificate_handle
      ~self
      ~certificate)))
(export g_tls_database_create_certificate_handle)

;; extern GTlsCertificate *g_tls_database_lookup_certificate_for_handle(
;;     GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, 
;;     GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error
;;     );
(define ~g_tls_database_lookup_certificate_for_handle #f)
(define (g_tls_database_lookup_certificate_for_handle
         self
         handle
         interaction
         flags
         cancellable
         error)
  (unless
    ~g_tls_database_lookup_certificate_for_handle
    (set! ~g_tls_database_lookup_certificate_for_handle
      (fh-link-proc
        "g_tls_database_lookup_certificate_for_handle"
        '*
        (list '* '* '* ffi:int '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~handle (unwrap~pointer handle))
        (~interaction
          (unwrap-GTlsInteraction* interaction))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GTlsCertificate*
      (~g_tls_database_lookup_certificate_for_handle
        ~self
        ~handle
        ~interaction
        ~flags
        ~cancellable
        ~error))))
(export g_tls_database_lookup_certificate_for_handle)

;; extern void g_tls_database_lookup_certificate_for_handle_async(GTlsDatabase 
;;     *self, const gchar *handle, GTlsInteraction *interaction, 
;;     GTlsDatabaseLookupFlags flags, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_tls_database_lookup_certificate_for_handle_async #f)
(define (g_tls_database_lookup_certificate_for_handle_async
         self
         handle
         interaction
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_tls_database_lookup_certificate_for_handle_async
    (set! ~g_tls_database_lookup_certificate_for_handle_async
      (fh-link-proc
        "g_tls_database_lookup_certificate_for_handle_async"
        ffi:void
        (list '* '* '* ffi:int '* '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~handle (unwrap~pointer handle))
        (~interaction
          (unwrap-GTlsInteraction* interaction))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_tls_database_lookup_certificate_for_handle_async
      ~self
      ~handle
      ~interaction
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_tls_database_lookup_certificate_for_handle_async)

;; extern GTlsCertificate *g_tls_database_lookup_certificate_for_handle_finish(
;;     GTlsDatabase *self, GAsyncResult *result, GError **error);
(define ~g_tls_database_lookup_certificate_for_handle_finish #f)
(define (g_tls_database_lookup_certificate_for_handle_finish
         self
         result
         error)
  (unless
    ~g_tls_database_lookup_certificate_for_handle_finish
    (set! ~g_tls_database_lookup_certificate_for_handle_finish
      (fh-link-proc
        "g_tls_database_lookup_certificate_for_handle_finish"
        '*
        (list '* '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GTlsCertificate*
      (~g_tls_database_lookup_certificate_for_handle_finish
        ~self
        ~result
        ~error))))
(export g_tls_database_lookup_certificate_for_handle_finish)

;; extern GTlsCertificate *g_tls_database_lookup_certificate_issuer(
;;     GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *
;;     interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, 
;;     GError **error);
(define ~g_tls_database_lookup_certificate_issuer #f)
(define (g_tls_database_lookup_certificate_issuer
         self
         certificate
         interaction
         flags
         cancellable
         error)
  (unless
    ~g_tls_database_lookup_certificate_issuer
    (set! ~g_tls_database_lookup_certificate_issuer
      (fh-link-proc
        "g_tls_database_lookup_certificate_issuer"
        '*
        (list '* '* '* ffi:int '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~certificate
          (unwrap-GTlsCertificate* certificate))
        (~interaction
          (unwrap-GTlsInteraction* interaction))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GTlsCertificate*
      (~g_tls_database_lookup_certificate_issuer
        ~self
        ~certificate
        ~interaction
        ~flags
        ~cancellable
        ~error))))
(export g_tls_database_lookup_certificate_issuer)

;; extern void g_tls_database_lookup_certificate_issuer_async(GTlsDatabase *
;;     self, GTlsCertificate *certificate, GTlsInteraction *interaction, 
;;     GTlsDatabaseLookupFlags flags, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_tls_database_lookup_certificate_issuer_async #f)
(define (g_tls_database_lookup_certificate_issuer_async
         self
         certificate
         interaction
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_tls_database_lookup_certificate_issuer_async
    (set! ~g_tls_database_lookup_certificate_issuer_async
      (fh-link-proc
        "g_tls_database_lookup_certificate_issuer_async"
        ffi:void
        (list '* '* '* ffi:int '* '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~certificate
          (unwrap-GTlsCertificate* certificate))
        (~interaction
          (unwrap-GTlsInteraction* interaction))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_tls_database_lookup_certificate_issuer_async
      ~self
      ~certificate
      ~interaction
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_tls_database_lookup_certificate_issuer_async)

;; extern GTlsCertificate *g_tls_database_lookup_certificate_issuer_finish(
;;     GTlsDatabase *self, GAsyncResult *result, GError **error);
(define ~g_tls_database_lookup_certificate_issuer_finish #f)
(define (g_tls_database_lookup_certificate_issuer_finish
         self
         result
         error)
  (unless
    ~g_tls_database_lookup_certificate_issuer_finish
    (set! ~g_tls_database_lookup_certificate_issuer_finish
      (fh-link-proc
        "g_tls_database_lookup_certificate_issuer_finish"
        '*
        (list '* '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (wrap-GTlsCertificate*
      (~g_tls_database_lookup_certificate_issuer_finish
        ~self
        ~result
        ~error))))
(export g_tls_database_lookup_certificate_issuer_finish)

;; extern GList *g_tls_database_lookup_certificates_issued_by(GTlsDatabase *
;;     self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, 
;;     GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error
;;     );
(define ~g_tls_database_lookup_certificates_issued_by #f)
(define (g_tls_database_lookup_certificates_issued_by
         self
         issuer_raw_dn
         interaction
         flags
         cancellable
         error)
  (unless
    ~g_tls_database_lookup_certificates_issued_by
    (set! ~g_tls_database_lookup_certificates_issued_by
      (fh-link-proc
        "g_tls_database_lookup_certificates_issued_by"
        '*
        (list '* '* '* ffi:int '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~interaction
          (unwrap-GTlsInteraction* interaction))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_tls_database_lookup_certificates_issued_by
      ~self
      issuer_raw_dn
      ~interaction
      ~flags
      ~cancellable
      ~error)))
(export g_tls_database_lookup_certificates_issued_by)

;; extern void g_tls_database_lookup_certificates_issued_by_async(GTlsDatabase 
;;     *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, 
;;     GTlsDatabaseLookupFlags flags, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_tls_database_lookup_certificates_issued_by_async #f)
(define (g_tls_database_lookup_certificates_issued_by_async
         self
         issuer_raw_dn
         interaction
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_tls_database_lookup_certificates_issued_by_async
    (set! ~g_tls_database_lookup_certificates_issued_by_async
      (fh-link-proc
        "g_tls_database_lookup_certificates_issued_by_async"
        ffi:void
        (list '* '* '* ffi:int '* '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~interaction
          (unwrap-GTlsInteraction* interaction))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_tls_database_lookup_certificates_issued_by_async
      ~self
      issuer_raw_dn
      ~interaction
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_tls_database_lookup_certificates_issued_by_async)

;; extern GList *g_tls_database_lookup_certificates_issued_by_finish(
;;     GTlsDatabase *self, GAsyncResult *result, GError **error);
(define ~g_tls_database_lookup_certificates_issued_by_finish #f)
(define (g_tls_database_lookup_certificates_issued_by_finish
         self
         result
         error)
  (unless
    ~g_tls_database_lookup_certificates_issued_by_finish
    (set! ~g_tls_database_lookup_certificates_issued_by_finish
      (fh-link-proc
        "g_tls_database_lookup_certificates_issued_by_finish"
        '*
        (list '* '* '*))))
  (let ((~self (unwrap-GTlsDatabase* self))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_tls_database_lookup_certificates_issued_by_finish
      ~self
      ~result
      ~error)))
(export g_tls_database_lookup_certificates_issued_by_finish)

;; typedef struct _GTlsFileDatabaseInterface GTlsFileDatabaseInterface;
(define GTlsFileDatabaseInterface-desc void)
(export GTlsFileDatabaseInterface-desc)
(define GTlsFileDatabaseInterface*-desc (bs:pointer (delay GTlsFileDatabaseInterface-desc)))
(export GTlsFileDatabaseInterface*-desc)
(define-fh-pointer-type GTlsFileDatabaseInterface* GTlsFileDatabaseInterface*-desc)

;; struct _GTlsFileDatabaseInterface {
;;   GTypeInterface g_iface;
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   gpointer padding[8];
;; };
(define struct-_GTlsFileDatabaseInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(padding ,(bs:vector 8 gpointer-desc)))))
(export struct-_GTlsFileDatabaseInterface-desc)
(define-fh-compound-type/p struct-_GTlsFileDatabaseInterface struct-_GTlsFileDatabaseInterface-desc)
(set! GTlsFileDatabaseInterface-desc struct-_GTlsFileDatabaseInterface-desc)
(define-fh-compound-type GTlsFileDatabaseInterface GTlsFileDatabaseInterface-desc)

;; extern GType g_tls_file_database_get_type(void);
(define ~g_tls_file_database_get_type #f)
(define (g_tls_file_database_get_type)
  (unless
    ~g_tls_file_database_get_type
    (set! ~g_tls_file_database_get_type
      (fh-link-proc
        "g_tls_file_database_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_file_database_get_type)))
(export g_tls_file_database_get_type)

;; extern GTlsDatabase *g_tls_file_database_new(const gchar *anchors, GError **
;;     error);
(define ~g_tls_file_database_new #f)
(define (g_tls_file_database_new anchors error)
  (unless
    ~g_tls_file_database_new
    (set! ~g_tls_file_database_new
      (fh-link-proc
        "g_tls_file_database_new"
        '*
        (list '* '*))))
  (let ((~anchors (unwrap~pointer anchors))
        (~error (unwrap~pointer error)))
    (wrap-GTlsDatabase*
      (~g_tls_file_database_new ~anchors ~error))))
(export g_tls_file_database_new)

;; typedef struct _GTlsInteractionClass GTlsInteractionClass;
(define GTlsInteractionClass-desc void)
(export GTlsInteractionClass-desc)
(define GTlsInteractionClass*-desc (bs:pointer (delay GTlsInteractionClass-desc)))
(export GTlsInteractionClass*-desc)
(define-fh-pointer-type GTlsInteractionClass* GTlsInteractionClass*-desc)

;; typedef struct _GTlsInteractionPrivate GTlsInteractionPrivate;
(define GTlsInteractionPrivate-desc void)
(export GTlsInteractionPrivate-desc)
(define GTlsInteractionPrivate*-desc (bs:pointer GTlsInteractionPrivate-desc))
(export GTlsInteractionPrivate*-desc)
(define-fh-pointer-type GTlsInteractionPrivate* GTlsInteractionPrivate*-desc)

;; struct _GTlsInteraction {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GTlsInteractionPrivate *priv;
;; };
(define struct-_GTlsInteraction-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GTlsInteractionPrivate*-desc))))))
(export struct-_GTlsInteraction-desc)
(define-fh-compound-type/p struct-_GTlsInteraction struct-_GTlsInteraction-desc)
(set! GTlsInteraction-desc struct-_GTlsInteraction-desc)
(define-fh-compound-type GTlsInteraction GTlsInteraction-desc)

;; struct _GTlsInteractionClass {
;;   /*< private >*/
;;   GObjectClass parent_class;
;;   /*< public >*/
;;   GTlsInteractionResult (*ask_password)(GTlsInteraction *interaction, 
;;       GTlsPassword *password, GCancellable *cancellable, GError **error);
;;   void (*ask_password_async)(GTlsInteraction *interaction, GTlsPassword *
;;       password, GCancellable *cancellable, GAsyncReadyCallback callback, 
;;       gpointer user_data);
;;   GTlsInteractionResult (*ask_password_finish)(GTlsInteraction *interaction
;;       , GAsyncResult *result, GError **error);
;;   GTlsInteractionResult (*request_certificate)(GTlsInteraction *interaction
;;       , GTlsConnection *connection, GTlsCertificateRequestFlags flags, 
;;       GCancellable *cancellable, GError **error);
;;   void (*request_certificate_async)(GTlsInteraction *interaction, 
;;       GTlsConnection *connection, GTlsCertificateRequestFlags flags, 
;;       GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;       user_data);
;;   GTlsInteractionResult (*request_certificate_finish)(GTlsInteraction *
;;       interaction, GAsyncResult *result, GError **error);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   gpointer padding[21];
;; };
(define struct-_GTlsInteractionClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(ask_password ,(bs:pointer void))
          `(ask_password_async ,(bs:pointer void))
          `(ask_password_finish ,(bs:pointer void))
          `(request_certificate ,(bs:pointer void))
          `(request_certificate_async ,(bs:pointer void))
          `(request_certificate_finish ,(bs:pointer void))
          `(padding ,(bs:vector 21 gpointer-desc)))))
(export struct-_GTlsInteractionClass-desc)
(define-fh-compound-type/p struct-_GTlsInteractionClass struct-_GTlsInteractionClass-desc)
(set! GTlsInteractionClass-desc struct-_GTlsInteractionClass-desc)
(define-fh-compound-type GTlsInteractionClass GTlsInteractionClass-desc)

;; extern GType g_tls_interaction_get_type(void);
(define ~g_tls_interaction_get_type #f)
(define (g_tls_interaction_get_type)
  (unless
    ~g_tls_interaction_get_type
    (set! ~g_tls_interaction_get_type
      (fh-link-proc
        "g_tls_interaction_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_interaction_get_type)))
(export g_tls_interaction_get_type)

;; extern GTlsInteractionResult g_tls_interaction_invoke_ask_password(
;;     GTlsInteraction *interaction, GTlsPassword *password, GCancellable *
;;     cancellable, GError **error);
(define ~g_tls_interaction_invoke_ask_password #f)
(define (g_tls_interaction_invoke_ask_password
         interaction
         password
         cancellable
         error)
  (unless
    ~g_tls_interaction_invoke_ask_password
    (set! ~g_tls_interaction_invoke_ask_password
      (fh-link-proc
        "g_tls_interaction_invoke_ask_password"
        ffi:int
        (list '* '* '* '*))))
  (let ((~interaction
          (unwrap-GTlsInteraction* interaction))
        (~password (unwrap-GTlsPassword* password))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_tls_interaction_invoke_ask_password
      ~interaction
      ~password
      ~cancellable
      ~error)))
(export g_tls_interaction_invoke_ask_password)

;; extern GTlsInteractionResult g_tls_interaction_ask_password(GTlsInteraction 
;;     *interaction, GTlsPassword *password, GCancellable *cancellable, GError 
;;     **error);
(define ~g_tls_interaction_ask_password #f)
(define (g_tls_interaction_ask_password
         interaction
         password
         cancellable
         error)
  (unless
    ~g_tls_interaction_ask_password
    (set! ~g_tls_interaction_ask_password
      (fh-link-proc
        "g_tls_interaction_ask_password"
        ffi:int
        (list '* '* '* '*))))
  (let ((~interaction
          (unwrap-GTlsInteraction* interaction))
        (~password (unwrap-GTlsPassword* password))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_tls_interaction_ask_password
      ~interaction
      ~password
      ~cancellable
      ~error)))
(export g_tls_interaction_ask_password)

;; extern void g_tls_interaction_ask_password_async(GTlsInteraction *
;;     interaction, GTlsPassword *password, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_tls_interaction_ask_password_async #f)
(define (g_tls_interaction_ask_password_async
         interaction
         password
         cancellable
         callback
         user_data)
  (unless
    ~g_tls_interaction_ask_password_async
    (set! ~g_tls_interaction_ask_password_async
      (fh-link-proc
        "g_tls_interaction_ask_password_async"
        ffi:void
        (list '* '* '* '* '*))))
  (let ((~interaction
          (unwrap-GTlsInteraction* interaction))
        (~password (unwrap-GTlsPassword* password))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_tls_interaction_ask_password_async
      ~interaction
      ~password
      ~cancellable
      ~callback
      ~user_data)))
(export g_tls_interaction_ask_password_async)

;; extern GTlsInteractionResult g_tls_interaction_ask_password_finish(
;;     GTlsInteraction *interaction, GAsyncResult *result, GError **error);
(define ~g_tls_interaction_ask_password_finish #f)
(define (g_tls_interaction_ask_password_finish
         interaction
         result
         error)
  (unless
    ~g_tls_interaction_ask_password_finish
    (set! ~g_tls_interaction_ask_password_finish
      (fh-link-proc
        "g_tls_interaction_ask_password_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~interaction
          (unwrap-GTlsInteraction* interaction))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_tls_interaction_ask_password_finish
      ~interaction
      ~result
      ~error)))
(export g_tls_interaction_ask_password_finish)

;; extern GTlsInteractionResult g_tls_interaction_invoke_request_certificate(
;;     GTlsInteraction *interaction, GTlsConnection *connection, 
;;     GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **
;;     error);
(define ~g_tls_interaction_invoke_request_certificate #f)
(define (g_tls_interaction_invoke_request_certificate
         interaction
         connection
         flags
         cancellable
         error)
  (unless
    ~g_tls_interaction_invoke_request_certificate
    (set! ~g_tls_interaction_invoke_request_certificate
      (fh-link-proc
        "g_tls_interaction_invoke_request_certificate"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~interaction
          (unwrap-GTlsInteraction* interaction))
        (~connection (unwrap-GTlsConnection* connection))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_tls_interaction_invoke_request_certificate
      ~interaction
      ~connection
      ~flags
      ~cancellable
      ~error)))
(export g_tls_interaction_invoke_request_certificate)

;; extern GTlsInteractionResult g_tls_interaction_request_certificate(
;;     GTlsInteraction *interaction, GTlsConnection *connection, 
;;     GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **
;;     error);
(define ~g_tls_interaction_request_certificate #f)
(define (g_tls_interaction_request_certificate
         interaction
         connection
         flags
         cancellable
         error)
  (unless
    ~g_tls_interaction_request_certificate
    (set! ~g_tls_interaction_request_certificate
      (fh-link-proc
        "g_tls_interaction_request_certificate"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~interaction
          (unwrap-GTlsInteraction* interaction))
        (~connection (unwrap-GTlsConnection* connection))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (~g_tls_interaction_request_certificate
      ~interaction
      ~connection
      ~flags
      ~cancellable
      ~error)))
(export g_tls_interaction_request_certificate)

;; extern void g_tls_interaction_request_certificate_async(GTlsInteraction *
;;     interaction, GTlsConnection *connection, GTlsCertificateRequestFlags 
;;     flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer
;;      user_data);
(define ~g_tls_interaction_request_certificate_async #f)
(define (g_tls_interaction_request_certificate_async
         interaction
         connection
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_tls_interaction_request_certificate_async
    (set! ~g_tls_interaction_request_certificate_async
      (fh-link-proc
        "g_tls_interaction_request_certificate_async"
        ffi:void
        (list '* '* ffi:int '* '* '*))))
  (let ((~interaction
          (unwrap-GTlsInteraction* interaction))
        (~connection (unwrap-GTlsConnection* connection))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_tls_interaction_request_certificate_async
      ~interaction
      ~connection
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_tls_interaction_request_certificate_async)

;; extern GTlsInteractionResult g_tls_interaction_request_certificate_finish(
;;     GTlsInteraction *interaction, GAsyncResult *result, GError **error);
(define ~g_tls_interaction_request_certificate_finish #f)
(define (g_tls_interaction_request_certificate_finish
         interaction
         result
         error)
  (unless
    ~g_tls_interaction_request_certificate_finish
    (set! ~g_tls_interaction_request_certificate_finish
      (fh-link-proc
        "g_tls_interaction_request_certificate_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~interaction
          (unwrap-GTlsInteraction* interaction))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_tls_interaction_request_certificate_finish
      ~interaction
      ~result
      ~error)))
(export g_tls_interaction_request_certificate_finish)

;; typedef struct _GTlsServerConnectionInterface GTlsServerConnectionInterface
;;     ;
(define GTlsServerConnectionInterface-desc void)
(export GTlsServerConnectionInterface-desc)
(define GTlsServerConnectionInterface*-desc (bs:pointer (delay GTlsServerConnectionInterface-desc)))
(export GTlsServerConnectionInterface*-desc)
(define-fh-pointer-type GTlsServerConnectionInterface* GTlsServerConnectionInterface*-desc)

;; struct _GTlsServerConnectionInterface {
;;   GTypeInterface g_iface;
;; };
(define struct-_GTlsServerConnectionInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long)))))))
(export struct-_GTlsServerConnectionInterface-desc)
(define-fh-compound-type/p struct-_GTlsServerConnectionInterface struct-_GTlsServerConnectionInterface-desc)
(set! GTlsServerConnectionInterface-desc struct-_GTlsServerConnectionInterface-desc)
(define-fh-compound-type GTlsServerConnectionInterface GTlsServerConnectionInterface-desc)

;; extern GType g_tls_server_connection_get_type(void);
(define ~g_tls_server_connection_get_type #f)
(define (g_tls_server_connection_get_type)
  (unless
    ~g_tls_server_connection_get_type
    (set! ~g_tls_server_connection_get_type
      (fh-link-proc
        "g_tls_server_connection_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_server_connection_get_type)))
(export g_tls_server_connection_get_type)

;; extern GIOStream *g_tls_server_connection_new(GIOStream *base_io_stream, 
;;     GTlsCertificate *certificate, GError **error);
(define ~g_tls_server_connection_new #f)
(define (g_tls_server_connection_new
         base_io_stream
         certificate
         error)
  (unless
    ~g_tls_server_connection_new
    (set! ~g_tls_server_connection_new
      (fh-link-proc
        "g_tls_server_connection_new"
        '*
        (list '* '* '*))))
  (let ((~base_io_stream
          (unwrap-GIOStream* base_io_stream))
        (~certificate
          (unwrap-GTlsCertificate* certificate))
        (~error (unwrap~pointer error)))
    (wrap-GIOStream*
      (~g_tls_server_connection_new
        ~base_io_stream
        ~certificate
        ~error))))
(export g_tls_server_connection_new)

;; typedef struct _GTlsPasswordClass GTlsPasswordClass;
(define GTlsPasswordClass-desc void)
(export GTlsPasswordClass-desc)
(define GTlsPasswordClass*-desc (bs:pointer (delay GTlsPasswordClass-desc)))
(export GTlsPasswordClass*-desc)
(define-fh-pointer-type GTlsPasswordClass* GTlsPasswordClass*-desc)

;; typedef struct _GTlsPasswordPrivate GTlsPasswordPrivate;
(define GTlsPasswordPrivate-desc void)
(export GTlsPasswordPrivate-desc)
(define GTlsPasswordPrivate*-desc (bs:pointer GTlsPasswordPrivate-desc))
(export GTlsPasswordPrivate*-desc)
(define-fh-pointer-type GTlsPasswordPrivate* GTlsPasswordPrivate*-desc)

;; struct _GTlsPassword {
;;   GObject parent_instance;
;;   GTlsPasswordPrivate *priv;
;; };
(define struct-_GTlsPassword-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GTlsPasswordPrivate*-desc))))))
(export struct-_GTlsPassword-desc)
(define-fh-compound-type/p struct-_GTlsPassword struct-_GTlsPassword-desc)
(set! GTlsPassword-desc struct-_GTlsPassword-desc)
(define-fh-compound-type GTlsPassword GTlsPassword-desc)

;; struct _GTlsPasswordClass {
;;   GObjectClass parent_class;
;;   /* methods */
;;   const guchar *(*get_value)(GTlsPassword *password, gsize *length);
;;   void (*set_value)(GTlsPassword *password, guchar *value, gssize length, 
;;       GDestroyNotify destroy);
;;   const gchar *(*get_default_warning)(GTlsPassword *password);
;;   /*< private >*/
;;   /* Padding for future expansion */
;;   gpointer padding[4];
;; };
(define struct-_GTlsPasswordClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(get_value ,(bs:pointer void))
          `(set_value ,(bs:pointer void))
          `(get_default_warning ,(bs:pointer void))
          `(padding ,(bs:vector 4 gpointer-desc)))))
(export struct-_GTlsPasswordClass-desc)
(define-fh-compound-type/p struct-_GTlsPasswordClass struct-_GTlsPasswordClass-desc)
(set! GTlsPasswordClass-desc struct-_GTlsPasswordClass-desc)
(define-fh-compound-type GTlsPasswordClass GTlsPasswordClass-desc)

;; extern GType g_tls_password_get_type(void);
(define ~g_tls_password_get_type #f)
(define (g_tls_password_get_type)
  (unless
    ~g_tls_password_get_type
    (set! ~g_tls_password_get_type
      (fh-link-proc
        "g_tls_password_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_tls_password_get_type)))
(export g_tls_password_get_type)

;; extern GTlsPassword *g_tls_password_new(GTlsPasswordFlags flags, const gchar
;;      *description);
(define ~g_tls_password_new #f)
(define (g_tls_password_new flags description)
  (unless
    ~g_tls_password_new
    (set! ~g_tls_password_new
      (fh-link-proc
        "g_tls_password_new"
        '*
        (list ffi:int '*))))
  (let ((~flags (unwrap~fixed flags))
        (~description (unwrap~pointer description)))
    (wrap-GTlsPassword*
      (~g_tls_password_new ~flags ~description))))
(export g_tls_password_new)

;; extern const guchar *g_tls_password_get_value(GTlsPassword *password, gsize 
;;     *length);
(define ~g_tls_password_get_value #f)
(define (g_tls_password_get_value password length)
  (unless
    ~g_tls_password_get_value
    (set! ~g_tls_password_get_value
      (fh-link-proc
        "g_tls_password_get_value"
        '*
        (list '* '*))))
  (let ((~password (unwrap-GTlsPassword* password))
        (~length (unwrap~pointer length)))
    (~g_tls_password_get_value ~password ~length)))
(export g_tls_password_get_value)

;; extern void g_tls_password_set_value(GTlsPassword *password, const guchar *
;;     value, gssize length);
(define ~g_tls_password_set_value #f)
(define (g_tls_password_set_value password value length)
  (unless
    ~g_tls_password_set_value
    (set! ~g_tls_password_set_value
      (fh-link-proc
        "g_tls_password_set_value"
        ffi:void
        (list '* '* ffi:long))))
  (let ((~password (unwrap-GTlsPassword* password))
        (~value (unwrap~pointer value))
        (~length (unwrap~fixed length)))
    (~g_tls_password_set_value
      ~password
      ~value
      ~length)))
(export g_tls_password_set_value)

;; extern void g_tls_password_set_value_full(GTlsPassword *password, guchar *
;;     value, gssize length, GDestroyNotify destroy);
(define ~g_tls_password_set_value_full #f)
(define (g_tls_password_set_value_full
         password
         value
         length
         destroy)
  (unless
    ~g_tls_password_set_value_full
    (set! ~g_tls_password_set_value_full
      (fh-link-proc
        "g_tls_password_set_value_full"
        ffi:void
        (list '* '* ffi:long '*))))
  (let ((~password (unwrap-GTlsPassword* password))
        (~value (unwrap~pointer value))
        (~length (unwrap~fixed length))
        (~destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           destroy)))
    (~g_tls_password_set_value_full
      ~password
      ~value
      ~length
      ~destroy)))
(export g_tls_password_set_value_full)

;; extern GTlsPasswordFlags g_tls_password_get_flags(GTlsPassword *password);
(define ~g_tls_password_get_flags #f)
(define (g_tls_password_get_flags password)
  (unless
    ~g_tls_password_get_flags
    (set! ~g_tls_password_get_flags
      (fh-link-proc
        "g_tls_password_get_flags"
        ffi:int
        (list '*))))
  (let ((~password (unwrap-GTlsPassword* password)))
    (~g_tls_password_get_flags ~password)))
(export g_tls_password_get_flags)

;; extern void g_tls_password_set_flags(GTlsPassword *password, 
;;     GTlsPasswordFlags flags);
(define ~g_tls_password_set_flags #f)
(define (g_tls_password_set_flags password flags)
  (unless
    ~g_tls_password_set_flags
    (set! ~g_tls_password_set_flags
      (fh-link-proc
        "g_tls_password_set_flags"
        ffi:void
        (list '* ffi:int))))
  (let ((~password (unwrap-GTlsPassword* password))
        (~flags (unwrap~fixed flags)))
    (~g_tls_password_set_flags ~password ~flags)))
(export g_tls_password_set_flags)

;; extern const gchar *g_tls_password_get_description(GTlsPassword *password);
(define ~g_tls_password_get_description #f)
(define (g_tls_password_get_description password)
  (unless
    ~g_tls_password_get_description
    (set! ~g_tls_password_get_description
      (fh-link-proc
        "g_tls_password_get_description"
        '*
        (list '*))))
  (let ((~password (unwrap-GTlsPassword* password)))
    (~g_tls_password_get_description ~password)))
(export g_tls_password_get_description)

;; extern void g_tls_password_set_description(GTlsPassword *password, const 
;;     gchar *description);
(define ~g_tls_password_set_description #f)
(define (g_tls_password_set_description
         password
         description)
  (unless
    ~g_tls_password_set_description
    (set! ~g_tls_password_set_description
      (fh-link-proc
        "g_tls_password_set_description"
        ffi:void
        (list '* '*))))
  (let ((~password (unwrap-GTlsPassword* password))
        (~description (unwrap~pointer description)))
    (~g_tls_password_set_description
      ~password
      ~description)))
(export g_tls_password_set_description)

;; extern const gchar *g_tls_password_get_warning(GTlsPassword *password);
(define ~g_tls_password_get_warning #f)
(define (g_tls_password_get_warning password)
  (unless
    ~g_tls_password_get_warning
    (set! ~g_tls_password_get_warning
      (fh-link-proc
        "g_tls_password_get_warning"
        '*
        (list '*))))
  (let ((~password (unwrap-GTlsPassword* password)))
    (~g_tls_password_get_warning ~password)))
(export g_tls_password_get_warning)

;; extern void g_tls_password_set_warning(GTlsPassword *password, const gchar *
;;     warning);
(define ~g_tls_password_set_warning #f)
(define (g_tls_password_set_warning password warning)
  (unless
    ~g_tls_password_set_warning
    (set! ~g_tls_password_set_warning
      (fh-link-proc
        "g_tls_password_set_warning"
        ffi:void
        (list '* '*))))
  (let ((~password (unwrap-GTlsPassword* password))
        (~warning (unwrap~pointer warning)))
    (~g_tls_password_set_warning ~password ~warning)))
(export g_tls_password_set_warning)

;; typedef GFile *(*GVfsFileLookupFunc)(GVfs *vfs, const char *identifier, 
;;     gpointer user_data);
(define-fh-function/p
  GVfsFileLookupFunc
  '*
  (list '* '* '*))

;; typedef struct _GVfsClass GVfsClass;
(define GVfsClass-desc void)
(export GVfsClass-desc)
(define GVfsClass*-desc (bs:pointer (delay GVfsClass-desc)))
(export GVfsClass*-desc)
(define-fh-pointer-type GVfsClass* GVfsClass*-desc)

;; struct _GVfs {
;;   GObject parent_instance;
;; };
(define struct-_GVfs-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc)))))))))
(export struct-_GVfs-desc)
(define-fh-compound-type/p struct-_GVfs struct-_GVfs-desc)
(set! GVfs-desc struct-_GVfs-desc)
(define-fh-compound-type GVfs GVfs-desc)

;; struct _GVfsClass {
;;   GObjectClass parent_class;
;;   /* Virtual Table */
;;   gboolean (*is_active)(GVfs *vfs);
;;   GFile *(*get_file_for_path)(GVfs *vfs, const char *path);
;;   GFile *(*get_file_for_uri)(GVfs *vfs, const char *uri);
;;   const gchar *const*(*get_supported_uri_schemes)(GVfs *vfs);
;;   GFile *(*parse_name)(GVfs *vfs, const char *parse_name);
;;   /*< private >*/
;;   void (*local_file_add_info)(GVfs *vfs, const char *filename, guint64 
;;       device, GFileAttributeMatcher *attribute_matcher, GFileInfo *info, 
;;       GCancellable *cancellable, gpointer *extra_data, GDestroyNotify *
;;       free_extra_data);
;;   void (*add_writable_namespaces)(GVfs *vfs, GFileAttributeInfoList *list);
;;   gboolean (*local_file_set_attributes)(GVfs *vfs, const char *filename, 
;;       GFileInfo *info, GFileQueryInfoFlags flags, GCancellable *cancellable
;;       , GError **error);
;;   void (*local_file_removed)(GVfs *vfs, const char *filename);
;;   void (*local_file_moved)(GVfs *vfs, const char *source, const char *dest)
;;       ;
;;   GIcon *(*deserialize_icon)(GVfs *vfs, GVariant *value);
;;   /* Padding for future expansion */
;;   void (*_g_reserved1)(void);
;;   void (*_g_reserved2)(void);
;;   void (*_g_reserved3)(void);
;;   void (*_g_reserved4)(void);
;;   void (*_g_reserved5)(void);
;;   void (*_g_reserved6)(void);
;; };
(define struct-_GVfsClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(is_active ,(bs:pointer void))
          `(get_file_for_path ,(bs:pointer void))
          `(get_file_for_uri ,(bs:pointer void))
          `(get_supported_uri_schemes ,(bs:pointer void))
          `(parse_name ,(bs:pointer void))
          `(local_file_add_info ,(bs:pointer void))
          `(add_writable_namespaces ,(bs:pointer void))
          `(local_file_set_attributes ,(bs:pointer void))
          `(local_file_removed ,(bs:pointer void))
          `(local_file_moved ,(bs:pointer void))
          `(deserialize_icon ,(bs:pointer void))
          `(_g_reserved1 ,(bs:pointer void))
          `(_g_reserved2 ,(bs:pointer void))
          `(_g_reserved3 ,(bs:pointer void))
          `(_g_reserved4 ,(bs:pointer void))
          `(_g_reserved5 ,(bs:pointer void))
          `(_g_reserved6 ,(bs:pointer void)))))
(export struct-_GVfsClass-desc)
(define-fh-compound-type/p struct-_GVfsClass struct-_GVfsClass-desc)
(set! GVfsClass-desc struct-_GVfsClass-desc)
(define-fh-compound-type GVfsClass GVfsClass-desc)

;; extern GType g_vfs_get_type(void);
(define ~g_vfs_get_type #f)
(define (g_vfs_get_type)
  (unless
    ~g_vfs_get_type
    (set! ~g_vfs_get_type
      (fh-link-proc
        "g_vfs_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_vfs_get_type)))
(export g_vfs_get_type)

;; extern gboolean g_vfs_is_active(GVfs *vfs);
(define ~g_vfs_is_active #f)
(define (g_vfs_is_active vfs)
  (unless
    ~g_vfs_is_active
    (set! ~g_vfs_is_active
      (fh-link-proc
        "g_vfs_is_active"
        ffi:int
        (list '*))))
  (let ((~vfs (unwrap-GVfs* vfs)))
    (~g_vfs_is_active ~vfs)))
(export g_vfs_is_active)

;; extern GFile *g_vfs_get_file_for_path(GVfs *vfs, const char *path);
(define ~g_vfs_get_file_for_path #f)
(define (g_vfs_get_file_for_path vfs path)
  (unless
    ~g_vfs_get_file_for_path
    (set! ~g_vfs_get_file_for_path
      (fh-link-proc
        "g_vfs_get_file_for_path"
        '*
        (list '* '*))))
  (let ((~vfs (unwrap-GVfs* vfs))
        (~path (unwrap~pointer path)))
    (wrap-GFile*
      (~g_vfs_get_file_for_path ~vfs ~path))))
(export g_vfs_get_file_for_path)

;; extern GFile *g_vfs_get_file_for_uri(GVfs *vfs, const char *uri);
(define ~g_vfs_get_file_for_uri #f)
(define (g_vfs_get_file_for_uri vfs uri)
  (unless
    ~g_vfs_get_file_for_uri
    (set! ~g_vfs_get_file_for_uri
      (fh-link-proc
        "g_vfs_get_file_for_uri"
        '*
        (list '* '*))))
  (let ((~vfs (unwrap-GVfs* vfs))
        (~uri (unwrap~pointer uri)))
    (wrap-GFile* (~g_vfs_get_file_for_uri ~vfs ~uri))))
(export g_vfs_get_file_for_uri)

;; extern const gchar *const*g_vfs_get_supported_uri_schemes(GVfs *vfs);
(define ~g_vfs_get_supported_uri_schemes #f)
(define (g_vfs_get_supported_uri_schemes vfs)
  (unless
    ~g_vfs_get_supported_uri_schemes
    (set! ~g_vfs_get_supported_uri_schemes
      (fh-link-proc
        "g_vfs_get_supported_uri_schemes"
        '*
        (list '*))))
  (let ((~vfs (unwrap-GVfs* vfs)))
    (~g_vfs_get_supported_uri_schemes ~vfs)))
(export g_vfs_get_supported_uri_schemes)

;; extern GFile *g_vfs_parse_name(GVfs *vfs, const char *parse_name);
(define ~g_vfs_parse_name #f)
(define (g_vfs_parse_name vfs parse_name)
  (unless
    ~g_vfs_parse_name
    (set! ~g_vfs_parse_name
      (fh-link-proc "g_vfs_parse_name" '* (list '* '*))))
  (let ((~vfs (unwrap-GVfs* vfs))
        (~parse_name (unwrap~pointer parse_name)))
    (wrap-GFile*
      (~g_vfs_parse_name ~vfs ~parse_name))))
(export g_vfs_parse_name)

;; extern GVfs *g_vfs_get_default(void);
(define ~g_vfs_get_default #f)
(define (g_vfs_get_default)
  (unless
    ~g_vfs_get_default
    (set! ~g_vfs_get_default
      (fh-link-proc "g_vfs_get_default" '* (list))))
  (let () (wrap-GVfs* (~g_vfs_get_default))))
(export g_vfs_get_default)

;; extern GVfs *g_vfs_get_local(void);
(define ~g_vfs_get_local #f)
(define (g_vfs_get_local)
  (unless
    ~g_vfs_get_local
    (set! ~g_vfs_get_local
      (fh-link-proc "g_vfs_get_local" '* (list))))
  (let () (wrap-GVfs* (~g_vfs_get_local))))
(export g_vfs_get_local)

;; extern gboolean g_vfs_register_uri_scheme(GVfs *vfs, const char *scheme, 
;;     GVfsFileLookupFunc uri_func, gpointer uri_data, GDestroyNotify 
;;     uri_destroy, GVfsFileLookupFunc parse_name_func, gpointer 
;;     parse_name_data, GDestroyNotify parse_name_destroy);
(define ~g_vfs_register_uri_scheme #f)
(define (g_vfs_register_uri_scheme
         vfs
         scheme
         uri_func
         uri_data
         uri_destroy
         parse_name_func
         parse_name_data
         parse_name_destroy)
  (unless
    ~g_vfs_register_uri_scheme
    (set! ~g_vfs_register_uri_scheme
      (fh-link-proc
        "g_vfs_register_uri_scheme"
        ffi:int
        (list '* '* '* '* '* '* '* '*))))
  (let ((~vfs (unwrap-GVfs* vfs))
        (~scheme (unwrap~pointer scheme))
        (~uri_func
          ((make-ftn-arg-unwrapper '* (list '* '* '*))
           uri_func))
        (~uri_data (unwrap-gpointer uri_data))
        (~uri_destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           uri_destroy))
        (~parse_name_func
          ((make-ftn-arg-unwrapper '* (list '* '* '*))
           parse_name_func))
        (~parse_name_data
          (unwrap-gpointer parse_name_data))
        (~parse_name_destroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           parse_name_destroy)))
    (~g_vfs_register_uri_scheme
      ~vfs
      ~scheme
      ~uri_func
      ~uri_data
      ~uri_destroy
      ~parse_name_func
      ~parse_name_data
      ~parse_name_destroy)))
(export g_vfs_register_uri_scheme)

;; extern gboolean g_vfs_unregister_uri_scheme(GVfs *vfs, const char *scheme);
(define ~g_vfs_unregister_uri_scheme #f)
(define (g_vfs_unregister_uri_scheme vfs scheme)
  (unless
    ~g_vfs_unregister_uri_scheme
    (set! ~g_vfs_unregister_uri_scheme
      (fh-link-proc
        "g_vfs_unregister_uri_scheme"
        ffi:int
        (list '* '*))))
  (let ((~vfs (unwrap-GVfs* vfs))
        (~scheme (unwrap~pointer scheme)))
    (~g_vfs_unregister_uri_scheme ~vfs ~scheme)))
(export g_vfs_unregister_uri_scheme)

;; typedef struct _GVolumeIface GVolumeIface;
(define GVolumeIface-desc void)
(export GVolumeIface-desc)
(define GVolumeIface*-desc (bs:pointer (delay GVolumeIface-desc)))
(export GVolumeIface*-desc)
(define-fh-pointer-type GVolumeIface* GVolumeIface*-desc)

;; struct _GVolumeIface {
;;   GTypeInterface g_iface;
;;   /* signals */
;;   void (*changed)(GVolume *volume);
;;   void (*removed)(GVolume *volume);
;;   /* Virtual Table */
;;   char *(*get_name)(GVolume *volume);
;;   GIcon *(*get_icon)(GVolume *volume);
;;   char *(*get_uuid)(GVolume *volume);
;;   GDrive *(*get_drive)(GVolume *volume);
;;   GMount *(*get_mount)(GVolume *volume);
;;   gboolean (*can_mount)(GVolume *volume);
;;   gboolean (*can_eject)(GVolume *volume);
;;   void (*mount_fn)(GVolume *volume, GMountMountFlags flags, GMountOperation 
;;       *mount_operation, GCancellable *cancellable, GAsyncReadyCallback 
;;       callback, gpointer user_data);
;;   gboolean (*mount_finish)(GVolume *volume, GAsyncResult *result, GError **
;;       error);
;;   void (*eject)(GVolume *volume, GMountUnmountFlags flags, GCancellable *
;;       cancellable, GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*eject_finish)(GVolume *volume, GAsyncResult *result, GError **
;;       error);
;;   char *(*get_identifier)(GVolume *volume, const char *kind);
;;   char **(*enumerate_identifiers)(GVolume *volume);
;;   gboolean (*should_automount)(GVolume *volume);
;;   GFile *(*get_activation_root)(GVolume *volume);
;;   void (*eject_with_operation)(GVolume *volume, GMountUnmountFlags flags, 
;;       GMountOperation *mount_operation, GCancellable *cancellable, 
;;       GAsyncReadyCallback callback, gpointer user_data);
;;   gboolean (*eject_with_operation_finish)(GVolume *volume, GAsyncResult *
;;       result, GError **error);
;;   const gchar *(*get_sort_key)(GVolume *volume);
;;   GIcon *(*get_symbolic_icon)(GVolume *volume);
;; };
(define struct-_GVolumeIface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(changed ,(bs:pointer void))
          `(removed ,(bs:pointer void))
          `(get_name ,(bs:pointer void))
          `(get_icon ,(bs:pointer void))
          `(get_uuid ,(bs:pointer void))
          `(get_drive ,(bs:pointer void))
          `(get_mount ,(bs:pointer void))
          `(can_mount ,(bs:pointer void))
          `(can_eject ,(bs:pointer void))
          `(mount_fn ,(bs:pointer void))
          `(mount_finish ,(bs:pointer void))
          `(eject ,(bs:pointer void))
          `(eject_finish ,(bs:pointer void))
          `(get_identifier ,(bs:pointer void))
          `(enumerate_identifiers ,(bs:pointer void))
          `(should_automount ,(bs:pointer void))
          `(get_activation_root ,(bs:pointer void))
          `(eject_with_operation ,(bs:pointer void))
          `(eject_with_operation_finish ,(bs:pointer void))
          `(get_sort_key ,(bs:pointer void))
          `(get_symbolic_icon ,(bs:pointer void)))))
(export struct-_GVolumeIface-desc)
(define-fh-compound-type/p struct-_GVolumeIface struct-_GVolumeIface-desc)
(set! GVolumeIface-desc struct-_GVolumeIface-desc)
(define-fh-compound-type GVolumeIface GVolumeIface-desc)

;; extern GType g_volume_get_type(void);
(define ~g_volume_get_type #f)
(define (g_volume_get_type)
  (unless
    ~g_volume_get_type
    (set! ~g_volume_get_type
      (fh-link-proc
        "g_volume_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_volume_get_type)))
(export g_volume_get_type)

;; extern char *g_volume_get_name(GVolume *volume);
(define ~g_volume_get_name #f)
(define (g_volume_get_name volume)
  (unless
    ~g_volume_get_name
    (set! ~g_volume_get_name
      (fh-link-proc "g_volume_get_name" '* (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (~g_volume_get_name ~volume)))
(export g_volume_get_name)

;; extern GIcon *g_volume_get_icon(GVolume *volume);
(define ~g_volume_get_icon #f)
(define (g_volume_get_icon volume)
  (unless
    ~g_volume_get_icon
    (set! ~g_volume_get_icon
      (fh-link-proc "g_volume_get_icon" '* (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (wrap-GIcon* (~g_volume_get_icon ~volume))))
(export g_volume_get_icon)

;; extern GIcon *g_volume_get_symbolic_icon(GVolume *volume);
(define ~g_volume_get_symbolic_icon #f)
(define (g_volume_get_symbolic_icon volume)
  (unless
    ~g_volume_get_symbolic_icon
    (set! ~g_volume_get_symbolic_icon
      (fh-link-proc
        "g_volume_get_symbolic_icon"
        '*
        (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (wrap-GIcon*
      (~g_volume_get_symbolic_icon ~volume))))
(export g_volume_get_symbolic_icon)

;; extern char *g_volume_get_uuid(GVolume *volume);
(define ~g_volume_get_uuid #f)
(define (g_volume_get_uuid volume)
  (unless
    ~g_volume_get_uuid
    (set! ~g_volume_get_uuid
      (fh-link-proc "g_volume_get_uuid" '* (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (~g_volume_get_uuid ~volume)))
(export g_volume_get_uuid)

;; extern GDrive *g_volume_get_drive(GVolume *volume);
(define ~g_volume_get_drive #f)
(define (g_volume_get_drive volume)
  (unless
    ~g_volume_get_drive
    (set! ~g_volume_get_drive
      (fh-link-proc "g_volume_get_drive" '* (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (wrap-GDrive* (~g_volume_get_drive ~volume))))
(export g_volume_get_drive)

;; extern GMount *g_volume_get_mount(GVolume *volume);
(define ~g_volume_get_mount #f)
(define (g_volume_get_mount volume)
  (unless
    ~g_volume_get_mount
    (set! ~g_volume_get_mount
      (fh-link-proc "g_volume_get_mount" '* (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (wrap-GMount* (~g_volume_get_mount ~volume))))
(export g_volume_get_mount)

;; extern gboolean g_volume_can_mount(GVolume *volume);
(define ~g_volume_can_mount #f)
(define (g_volume_can_mount volume)
  (unless
    ~g_volume_can_mount
    (set! ~g_volume_can_mount
      (fh-link-proc
        "g_volume_can_mount"
        ffi:int
        (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (~g_volume_can_mount ~volume)))
(export g_volume_can_mount)

;; extern gboolean g_volume_can_eject(GVolume *volume);
(define ~g_volume_can_eject #f)
(define (g_volume_can_eject volume)
  (unless
    ~g_volume_can_eject
    (set! ~g_volume_can_eject
      (fh-link-proc
        "g_volume_can_eject"
        ffi:int
        (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (~g_volume_can_eject ~volume)))
(export g_volume_can_eject)

;; extern gboolean g_volume_should_automount(GVolume *volume);
(define ~g_volume_should_automount #f)
(define (g_volume_should_automount volume)
  (unless
    ~g_volume_should_automount
    (set! ~g_volume_should_automount
      (fh-link-proc
        "g_volume_should_automount"
        ffi:int
        (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (~g_volume_should_automount ~volume)))
(export g_volume_should_automount)

;; extern void g_volume_mount(GVolume *volume, GMountMountFlags flags, 
;;     GMountOperation *mount_operation, GCancellable *cancellable, 
;;     GAsyncReadyCallback callback, gpointer user_data);
(define ~g_volume_mount #f)
(define (g_volume_mount
         volume
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_volume_mount
    (set! ~g_volume_mount
      (fh-link-proc
        "g_volume_mount"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~volume (unwrap-GVolume* volume))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_volume_mount
      ~volume
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_volume_mount)

;; extern gboolean g_volume_mount_finish(GVolume *volume, GAsyncResult *result
;;     , GError **error);
(define ~g_volume_mount_finish #f)
(define (g_volume_mount_finish volume result error)
  (unless
    ~g_volume_mount_finish
    (set! ~g_volume_mount_finish
      (fh-link-proc
        "g_volume_mount_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~volume (unwrap-GVolume* volume))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_volume_mount_finish ~volume ~result ~error)))
(export g_volume_mount_finish)

;; extern void g_volume_eject(GVolume *volume, GMountUnmountFlags flags, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_volume_eject #f)
(define (g_volume_eject
         volume
         flags
         cancellable
         callback
         user_data)
  (unless
    ~g_volume_eject
    (set! ~g_volume_eject
      (fh-link-proc
        "g_volume_eject"
        ffi:void
        (list '* ffi:int '* '* '*))))
  (let ((~volume (unwrap-GVolume* volume))
        (~flags (unwrap~fixed flags))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_volume_eject
      ~volume
      ~flags
      ~cancellable
      ~callback
      ~user_data)))
(export g_volume_eject)

;; extern gboolean g_volume_eject_finish(GVolume *volume, GAsyncResult *result
;;     , GError **error);
(define ~g_volume_eject_finish #f)
(define (g_volume_eject_finish volume result error)
  (unless
    ~g_volume_eject_finish
    (set! ~g_volume_eject_finish
      (fh-link-proc
        "g_volume_eject_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~volume (unwrap-GVolume* volume))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_volume_eject_finish ~volume ~result ~error)))
(export g_volume_eject_finish)

;; extern char *g_volume_get_identifier(GVolume *volume, const char *kind);
(define ~g_volume_get_identifier #f)
(define (g_volume_get_identifier volume kind)
  (unless
    ~g_volume_get_identifier
    (set! ~g_volume_get_identifier
      (fh-link-proc
        "g_volume_get_identifier"
        '*
        (list '* '*))))
  (let ((~volume (unwrap-GVolume* volume))
        (~kind (unwrap~pointer kind)))
    (~g_volume_get_identifier ~volume ~kind)))
(export g_volume_get_identifier)

;; extern char **g_volume_enumerate_identifiers(GVolume *volume);
(define ~g_volume_enumerate_identifiers #f)
(define (g_volume_enumerate_identifiers volume)
  (unless
    ~g_volume_enumerate_identifiers
    (set! ~g_volume_enumerate_identifiers
      (fh-link-proc
        "g_volume_enumerate_identifiers"
        '*
        (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (~g_volume_enumerate_identifiers ~volume)))
(export g_volume_enumerate_identifiers)

;; extern GFile *g_volume_get_activation_root(GVolume *volume);
(define ~g_volume_get_activation_root #f)
(define (g_volume_get_activation_root volume)
  (unless
    ~g_volume_get_activation_root
    (set! ~g_volume_get_activation_root
      (fh-link-proc
        "g_volume_get_activation_root"
        '*
        (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (wrap-GFile*
      (~g_volume_get_activation_root ~volume))))
(export g_volume_get_activation_root)

;; extern void g_volume_eject_with_operation(GVolume *volume, 
;;     GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable
;;      *cancellable, GAsyncReadyCallback callback, gpointer user_data);
(define ~g_volume_eject_with_operation #f)
(define (g_volume_eject_with_operation
         volume
         flags
         mount_operation
         cancellable
         callback
         user_data)
  (unless
    ~g_volume_eject_with_operation
    (set! ~g_volume_eject_with_operation
      (fh-link-proc
        "g_volume_eject_with_operation"
        ffi:void
        (list '* ffi:int '* '* '* '*))))
  (let ((~volume (unwrap-GVolume* volume))
        (~flags (unwrap~fixed flags))
        (~mount_operation
          (unwrap-GMountOperation* mount_operation))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_volume_eject_with_operation
      ~volume
      ~flags
      ~mount_operation
      ~cancellable
      ~callback
      ~user_data)))
(export g_volume_eject_with_operation)

;; extern gboolean g_volume_eject_with_operation_finish(GVolume *volume, 
;;     GAsyncResult *result, GError **error);
(define ~g_volume_eject_with_operation_finish #f)
(define (g_volume_eject_with_operation_finish
         volume
         result
         error)
  (unless
    ~g_volume_eject_with_operation_finish
    (set! ~g_volume_eject_with_operation_finish
      (fh-link-proc
        "g_volume_eject_with_operation_finish"
        ffi:int
        (list '* '* '*))))
  (let ((~volume (unwrap-GVolume* volume))
        (~result (unwrap-GAsyncResult* result))
        (~error (unwrap~pointer error)))
    (~g_volume_eject_with_operation_finish
      ~volume
      ~result
      ~error)))
(export g_volume_eject_with_operation_finish)

;; extern const gchar *g_volume_get_sort_key(GVolume *volume);
(define ~g_volume_get_sort_key #f)
(define (g_volume_get_sort_key volume)
  (unless
    ~g_volume_get_sort_key
    (set! ~g_volume_get_sort_key
      (fh-link-proc
        "g_volume_get_sort_key"
        '*
        (list '*))))
  (let ((~volume (unwrap-GVolume* volume)))
    (~g_volume_get_sort_key ~volume)))
(export g_volume_get_sort_key)

;; typedef struct _GZlibCompressorClass GZlibCompressorClass;
(define GZlibCompressorClass-desc void)
(export GZlibCompressorClass-desc)
(define GZlibCompressorClass*-desc (bs:pointer (delay GZlibCompressorClass-desc)))
(export GZlibCompressorClass*-desc)
(define-fh-pointer-type GZlibCompressorClass* GZlibCompressorClass*-desc)

;; struct _GZlibCompressorClass {
;;   GObjectClass parent_class;
;; };
(define struct-_GZlibCompressorClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc))))))))
(export struct-_GZlibCompressorClass-desc)
(define-fh-compound-type/p struct-_GZlibCompressorClass struct-_GZlibCompressorClass-desc)
(set! GZlibCompressorClass-desc struct-_GZlibCompressorClass-desc)
(define-fh-compound-type GZlibCompressorClass GZlibCompressorClass-desc)

;; extern GType g_zlib_compressor_get_type(void);
(define ~g_zlib_compressor_get_type #f)
(define (g_zlib_compressor_get_type)
  (unless
    ~g_zlib_compressor_get_type
    (set! ~g_zlib_compressor_get_type
      (fh-link-proc
        "g_zlib_compressor_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_zlib_compressor_get_type)))
(export g_zlib_compressor_get_type)

;; extern GZlibCompressor *g_zlib_compressor_new(GZlibCompressorFormat format, 
;;     int level);
(define ~g_zlib_compressor_new #f)
(define (g_zlib_compressor_new format level)
  (unless
    ~g_zlib_compressor_new
    (set! ~g_zlib_compressor_new
      (fh-link-proc
        "g_zlib_compressor_new"
        '*
        (list ffi:int ffi:int))))
  (let ((~format (unwrap~fixed format))
        (~level (unwrap~fixed level)))
    (wrap-GZlibCompressor*
      (~g_zlib_compressor_new ~format ~level))))
(export g_zlib_compressor_new)

;; extern GFileInfo *g_zlib_compressor_get_file_info(GZlibCompressor *
;;     compressor);
(define ~g_zlib_compressor_get_file_info #f)
(define (g_zlib_compressor_get_file_info compressor)
  (unless
    ~g_zlib_compressor_get_file_info
    (set! ~g_zlib_compressor_get_file_info
      (fh-link-proc
        "g_zlib_compressor_get_file_info"
        '*
        (list '*))))
  (let ((~compressor
          (unwrap-GZlibCompressor* compressor)))
    (wrap-GFileInfo*
      (~g_zlib_compressor_get_file_info ~compressor))))
(export g_zlib_compressor_get_file_info)

;; extern void g_zlib_compressor_set_file_info(GZlibCompressor *compressor, 
;;     GFileInfo *file_info);
(define ~g_zlib_compressor_set_file_info #f)
(define (g_zlib_compressor_set_file_info
         compressor
         file_info)
  (unless
    ~g_zlib_compressor_set_file_info
    (set! ~g_zlib_compressor_set_file_info
      (fh-link-proc
        "g_zlib_compressor_set_file_info"
        ffi:void
        (list '* '*))))
  (let ((~compressor
          (unwrap-GZlibCompressor* compressor))
        (~file_info (unwrap-GFileInfo* file_info)))
    (~g_zlib_compressor_set_file_info
      ~compressor
      ~file_info)))
(export g_zlib_compressor_set_file_info)

;; typedef struct _GZlibDecompressorClass GZlibDecompressorClass;
(define GZlibDecompressorClass-desc void)
(export GZlibDecompressorClass-desc)
(define GZlibDecompressorClass*-desc (bs:pointer (delay GZlibDecompressorClass-desc)))
(export GZlibDecompressorClass*-desc)
(define-fh-pointer-type GZlibDecompressorClass* GZlibDecompressorClass*-desc)

;; struct _GZlibDecompressorClass {
;;   GObjectClass parent_class;
;; };
(define struct-_GZlibDecompressorClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc))))))))
(export struct-_GZlibDecompressorClass-desc)
(define-fh-compound-type/p struct-_GZlibDecompressorClass struct-_GZlibDecompressorClass-desc)
(set! GZlibDecompressorClass-desc struct-_GZlibDecompressorClass-desc)
(define-fh-compound-type GZlibDecompressorClass GZlibDecompressorClass-desc)

;; extern GType g_zlib_decompressor_get_type(void);
(define ~g_zlib_decompressor_get_type #f)
(define (g_zlib_decompressor_get_type)
  (unless
    ~g_zlib_decompressor_get_type
    (set! ~g_zlib_decompressor_get_type
      (fh-link-proc
        "g_zlib_decompressor_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_zlib_decompressor_get_type)))
(export g_zlib_decompressor_get_type)

;; extern GZlibDecompressor *g_zlib_decompressor_new(GZlibCompressorFormat 
;;     format);
(define ~g_zlib_decompressor_new #f)
(define (g_zlib_decompressor_new format)
  (unless
    ~g_zlib_decompressor_new
    (set! ~g_zlib_decompressor_new
      (fh-link-proc
        "g_zlib_decompressor_new"
        '*
        (list ffi:int))))
  (let ((~format (unwrap~fixed format)))
    (wrap-GZlibDecompressor*
      (~g_zlib_decompressor_new ~format))))
(export g_zlib_decompressor_new)

;; extern GFileInfo *g_zlib_decompressor_get_file_info(GZlibDecompressor *
;;     decompressor);
(define ~g_zlib_decompressor_get_file_info #f)
(define (g_zlib_decompressor_get_file_info decompressor)
  (unless
    ~g_zlib_decompressor_get_file_info
    (set! ~g_zlib_decompressor_get_file_info
      (fh-link-proc
        "g_zlib_decompressor_get_file_info"
        '*
        (list '*))))
  (let ((~decompressor
          (unwrap-GZlibDecompressor* decompressor)))
    (wrap-GFileInfo*
      (~g_zlib_decompressor_get_file_info
        ~decompressor))))
(export g_zlib_decompressor_get_file_info)

;; typedef struct _GDBusInterfaceIface GDBusInterfaceIface;
(define GDBusInterfaceIface-desc void)
(export GDBusInterfaceIface-desc)
(define GDBusInterfaceIface*-desc (bs:pointer (delay GDBusInterfaceIface-desc)))
(export GDBusInterfaceIface*-desc)
(define-fh-pointer-type GDBusInterfaceIface* GDBusInterfaceIface*-desc)

;; struct _GDBusInterfaceIface {
;;   GTypeInterface parent_iface;
;;   /* Virtual Functions */
;;   GDBusInterfaceInfo *(*get_info)(GDBusInterface *interface_);
;;   GDBusObject *(*get_object)(GDBusInterface *interface_);
;;   void (*set_object)(GDBusInterface *interface_, GDBusObject *object);
;;   GDBusObject *(*dup_object)(GDBusInterface *interface_);
;; };
(define struct-_GDBusInterfaceIface-desc
  (bs:struct
    (list `(parent_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(get_info ,(bs:pointer void))
          `(get_object ,(bs:pointer void))
          `(set_object ,(bs:pointer void))
          `(dup_object ,(bs:pointer void)))))
(export struct-_GDBusInterfaceIface-desc)
(define-fh-compound-type/p struct-_GDBusInterfaceIface struct-_GDBusInterfaceIface-desc)
(set! GDBusInterfaceIface-desc struct-_GDBusInterfaceIface-desc)
(define-fh-compound-type GDBusInterfaceIface GDBusInterfaceIface-desc)

;; extern GType g_dbus_interface_get_type(void);
(define ~g_dbus_interface_get_type #f)
(define (g_dbus_interface_get_type)
  (unless
    ~g_dbus_interface_get_type
    (set! ~g_dbus_interface_get_type
      (fh-link-proc
        "g_dbus_interface_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_interface_get_type)))
(export g_dbus_interface_get_type)

;; extern GDBusInterfaceInfo *g_dbus_interface_get_info(GDBusInterface *
;;     interface_);
(define ~g_dbus_interface_get_info #f)
(define (g_dbus_interface_get_info interface_)
  (unless
    ~g_dbus_interface_get_info
    (set! ~g_dbus_interface_get_info
      (fh-link-proc
        "g_dbus_interface_get_info"
        '*
        (list '*))))
  (let ((~interface_ (unwrap-GDBusInterface* interface_)))
    (wrap-GDBusInterfaceInfo*
      (~g_dbus_interface_get_info ~interface_))))
(export g_dbus_interface_get_info)

;; extern GDBusObject *g_dbus_interface_get_object(GDBusInterface *interface_)
;;     ;
(define ~g_dbus_interface_get_object #f)
(define (g_dbus_interface_get_object interface_)
  (unless
    ~g_dbus_interface_get_object
    (set! ~g_dbus_interface_get_object
      (fh-link-proc
        "g_dbus_interface_get_object"
        '*
        (list '*))))
  (let ((~interface_ (unwrap-GDBusInterface* interface_)))
    (wrap-GDBusObject*
      (~g_dbus_interface_get_object ~interface_))))
(export g_dbus_interface_get_object)

;; extern void g_dbus_interface_set_object(GDBusInterface *interface_, 
;;     GDBusObject *object);
(define ~g_dbus_interface_set_object #f)
(define (g_dbus_interface_set_object interface_ object)
  (unless
    ~g_dbus_interface_set_object
    (set! ~g_dbus_interface_set_object
      (fh-link-proc
        "g_dbus_interface_set_object"
        ffi:void
        (list '* '*))))
  (let ((~interface_ (unwrap-GDBusInterface* interface_))
        (~object (unwrap-GDBusObject* object)))
    (~g_dbus_interface_set_object
      ~interface_
      ~object)))
(export g_dbus_interface_set_object)

;; extern GDBusObject *g_dbus_interface_dup_object(GDBusInterface *interface_)
;;     ;
(define ~g_dbus_interface_dup_object #f)
(define (g_dbus_interface_dup_object interface_)
  (unless
    ~g_dbus_interface_dup_object
    (set! ~g_dbus_interface_dup_object
      (fh-link-proc
        "g_dbus_interface_dup_object"
        '*
        (list '*))))
  (let ((~interface_ (unwrap-GDBusInterface* interface_)))
    (wrap-GDBusObject*
      (~g_dbus_interface_dup_object ~interface_))))
(export g_dbus_interface_dup_object)

;; typedef struct _GDBusInterfaceSkeletonClass GDBusInterfaceSkeletonClass;
(define GDBusInterfaceSkeletonClass-desc void)
(export GDBusInterfaceSkeletonClass-desc)
(define GDBusInterfaceSkeletonClass*-desc (bs:pointer (delay GDBusInterfaceSkeletonClass-desc)))
(export GDBusInterfaceSkeletonClass*-desc)
(define-fh-pointer-type GDBusInterfaceSkeletonClass* GDBusInterfaceSkeletonClass*-desc)

;; typedef struct _GDBusInterfaceSkeletonPrivate GDBusInterfaceSkeletonPrivate
;;     ;
(define GDBusInterfaceSkeletonPrivate-desc void)
(export GDBusInterfaceSkeletonPrivate-desc)
(define GDBusInterfaceSkeletonPrivate*-desc (bs:pointer GDBusInterfaceSkeletonPrivate-desc))
(export GDBusInterfaceSkeletonPrivate*-desc)
(define-fh-pointer-type GDBusInterfaceSkeletonPrivate* GDBusInterfaceSkeletonPrivate*-desc)

;; struct _GDBusInterfaceSkeleton {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusInterfaceSkeletonPrivate *priv;
;; };
(define struct-_GDBusInterfaceSkeleton-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GDBusInterfaceSkeletonPrivate*-desc))))))
(export struct-_GDBusInterfaceSkeleton-desc)
(define-fh-compound-type/p struct-_GDBusInterfaceSkeleton struct-_GDBusInterfaceSkeleton-desc)
(set! GDBusInterfaceSkeleton-desc struct-_GDBusInterfaceSkeleton-desc)
(define-fh-compound-type GDBusInterfaceSkeleton GDBusInterfaceSkeleton-desc)

;; struct _GDBusInterfaceSkeletonClass {
;;   GObjectClass parent_class;
;;   /* Virtual Functions */
;;   GDBusInterfaceInfo *(*get_info)(GDBusInterfaceSkeleton *interface_);
;;   GDBusInterfaceVTable *(*get_vtable)(GDBusInterfaceSkeleton *interface_);
;;   GVariant *(*get_properties)(GDBusInterfaceSkeleton *interface_);
;;   void (*flush)(GDBusInterfaceSkeleton *interface_);
;;   /*< private >*/
;;   gpointer vfunc_padding[8];
;;   /*< public >*/
;;   /* Signals */
;;   gboolean (*g_authorize_method)(GDBusInterfaceSkeleton *interface_, 
;;       GDBusMethodInvocation *invocation);
;;   /*< private >*/
;;   gpointer signal_padding[8];
;; };
(define struct-_GDBusInterfaceSkeletonClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(get_info ,(bs:pointer void))
          `(get_vtable ,(bs:pointer void))
          `(get_properties ,(bs:pointer void))
          `(flush ,(bs:pointer void))
          `(vfunc_padding ,(bs:vector 8 gpointer-desc))
          `(g_authorize_method ,(bs:pointer void))
          `(signal_padding ,(bs:vector 8 gpointer-desc)))))
(export struct-_GDBusInterfaceSkeletonClass-desc)
(define-fh-compound-type/p struct-_GDBusInterfaceSkeletonClass struct-_GDBusInterfaceSkeletonClass-desc)
(set! GDBusInterfaceSkeletonClass-desc struct-_GDBusInterfaceSkeletonClass-desc)
(define-fh-compound-type GDBusInterfaceSkeletonClass GDBusInterfaceSkeletonClass-desc)

;; extern GType g_dbus_interface_skeleton_get_type(void);
(define ~g_dbus_interface_skeleton_get_type #f)
(define (g_dbus_interface_skeleton_get_type)
  (unless
    ~g_dbus_interface_skeleton_get_type
    (set! ~g_dbus_interface_skeleton_get_type
      (fh-link-proc
        "g_dbus_interface_skeleton_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_interface_skeleton_get_type)))
(export g_dbus_interface_skeleton_get_type)

;; extern GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags(
;;     GDBusInterfaceSkeleton *interface_);
(define ~g_dbus_interface_skeleton_get_flags #f)
(define (g_dbus_interface_skeleton_get_flags interface_)
  (unless
    ~g_dbus_interface_skeleton_get_flags
    (set! ~g_dbus_interface_skeleton_get_flags
      (fh-link-proc
        "g_dbus_interface_skeleton_get_flags"
        ffi:int
        (list '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_)))
    (~g_dbus_interface_skeleton_get_flags
      ~interface_)))
(export g_dbus_interface_skeleton_get_flags)

;; extern void g_dbus_interface_skeleton_set_flags(GDBusInterfaceSkeleton *
;;     interface_, GDBusInterfaceSkeletonFlags flags);
(define ~g_dbus_interface_skeleton_set_flags #f)
(define (g_dbus_interface_skeleton_set_flags
         interface_
         flags)
  (unless
    ~g_dbus_interface_skeleton_set_flags
    (set! ~g_dbus_interface_skeleton_set_flags
      (fh-link-proc
        "g_dbus_interface_skeleton_set_flags"
        ffi:void
        (list '* ffi:int))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_))
        (~flags (unwrap~fixed flags)))
    (~g_dbus_interface_skeleton_set_flags
      ~interface_
      ~flags)))
(export g_dbus_interface_skeleton_set_flags)

;; extern GDBusInterfaceInfo *g_dbus_interface_skeleton_get_info(
;;     GDBusInterfaceSkeleton *interface_);
(define ~g_dbus_interface_skeleton_get_info #f)
(define (g_dbus_interface_skeleton_get_info interface_)
  (unless
    ~g_dbus_interface_skeleton_get_info
    (set! ~g_dbus_interface_skeleton_get_info
      (fh-link-proc
        "g_dbus_interface_skeleton_get_info"
        '*
        (list '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_)))
    (wrap-GDBusInterfaceInfo*
      (~g_dbus_interface_skeleton_get_info ~interface_))))
(export g_dbus_interface_skeleton_get_info)

;; extern GDBusInterfaceVTable *g_dbus_interface_skeleton_get_vtable(
;;     GDBusInterfaceSkeleton *interface_);
(define ~g_dbus_interface_skeleton_get_vtable #f)
(define (g_dbus_interface_skeleton_get_vtable interface_)
  (unless
    ~g_dbus_interface_skeleton_get_vtable
    (set! ~g_dbus_interface_skeleton_get_vtable
      (fh-link-proc
        "g_dbus_interface_skeleton_get_vtable"
        '*
        (list '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_)))
    (wrap-GDBusInterfaceVTable*
      (~g_dbus_interface_skeleton_get_vtable
        ~interface_))))
(export g_dbus_interface_skeleton_get_vtable)

;; extern GVariant *g_dbus_interface_skeleton_get_properties(
;;     GDBusInterfaceSkeleton *interface_);
(define ~g_dbus_interface_skeleton_get_properties #f)
(define (g_dbus_interface_skeleton_get_properties
         interface_)
  (unless
    ~g_dbus_interface_skeleton_get_properties
    (set! ~g_dbus_interface_skeleton_get_properties
      (fh-link-proc
        "g_dbus_interface_skeleton_get_properties"
        '*
        (list '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_)))
    (~g_dbus_interface_skeleton_get_properties
      ~interface_)))
(export g_dbus_interface_skeleton_get_properties)

;; extern void g_dbus_interface_skeleton_flush(GDBusInterfaceSkeleton *
;;     interface_);
(define ~g_dbus_interface_skeleton_flush #f)
(define (g_dbus_interface_skeleton_flush interface_)
  (unless
    ~g_dbus_interface_skeleton_flush
    (set! ~g_dbus_interface_skeleton_flush
      (fh-link-proc
        "g_dbus_interface_skeleton_flush"
        ffi:void
        (list '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_)))
    (~g_dbus_interface_skeleton_flush ~interface_)))
(export g_dbus_interface_skeleton_flush)

;; extern gboolean g_dbus_interface_skeleton_export(GDBusInterfaceSkeleton *
;;     interface_, GDBusConnection *connection, const gchar *object_path, 
;;     GError **error);
(define ~g_dbus_interface_skeleton_export #f)
(define (g_dbus_interface_skeleton_export
         interface_
         connection
         object_path
         error)
  (unless
    ~g_dbus_interface_skeleton_export
    (set! ~g_dbus_interface_skeleton_export
      (fh-link-proc
        "g_dbus_interface_skeleton_export"
        ffi:int
        (list '* '* '* '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_))
        (~connection
          (unwrap-GDBusConnection* connection))
        (~object_path (unwrap~pointer object_path))
        (~error (unwrap~pointer error)))
    (~g_dbus_interface_skeleton_export
      ~interface_
      ~connection
      ~object_path
      ~error)))
(export g_dbus_interface_skeleton_export)

;; extern void g_dbus_interface_skeleton_unexport(GDBusInterfaceSkeleton *
;;     interface_);
(define ~g_dbus_interface_skeleton_unexport #f)
(define (g_dbus_interface_skeleton_unexport interface_)
  (unless
    ~g_dbus_interface_skeleton_unexport
    (set! ~g_dbus_interface_skeleton_unexport
      (fh-link-proc
        "g_dbus_interface_skeleton_unexport"
        ffi:void
        (list '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_)))
    (~g_dbus_interface_skeleton_unexport ~interface_)))
(export g_dbus_interface_skeleton_unexport)

;; extern void g_dbus_interface_skeleton_unexport_from_connection(
;;     GDBusInterfaceSkeleton *interface_, GDBusConnection *connection);
(define ~g_dbus_interface_skeleton_unexport_from_connection #f)
(define (g_dbus_interface_skeleton_unexport_from_connection
         interface_
         connection)
  (unless
    ~g_dbus_interface_skeleton_unexport_from_connection
    (set! ~g_dbus_interface_skeleton_unexport_from_connection
      (fh-link-proc
        "g_dbus_interface_skeleton_unexport_from_connection"
        ffi:void
        (list '* '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_))
        (~connection
          (unwrap-GDBusConnection* connection)))
    (~g_dbus_interface_skeleton_unexport_from_connection
      ~interface_
      ~connection)))
(export g_dbus_interface_skeleton_unexport_from_connection)

;; extern GDBusConnection *g_dbus_interface_skeleton_get_connection(
;;     GDBusInterfaceSkeleton *interface_);
(define ~g_dbus_interface_skeleton_get_connection #f)
(define (g_dbus_interface_skeleton_get_connection
         interface_)
  (unless
    ~g_dbus_interface_skeleton_get_connection
    (set! ~g_dbus_interface_skeleton_get_connection
      (fh-link-proc
        "g_dbus_interface_skeleton_get_connection"
        '*
        (list '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_)))
    (wrap-GDBusConnection*
      (~g_dbus_interface_skeleton_get_connection
        ~interface_))))
(export g_dbus_interface_skeleton_get_connection)

;; extern GList *g_dbus_interface_skeleton_get_connections(
;;     GDBusInterfaceSkeleton *interface_);
(define ~g_dbus_interface_skeleton_get_connections #f)
(define (g_dbus_interface_skeleton_get_connections
         interface_)
  (unless
    ~g_dbus_interface_skeleton_get_connections
    (set! ~g_dbus_interface_skeleton_get_connections
      (fh-link-proc
        "g_dbus_interface_skeleton_get_connections"
        '*
        (list '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_)))
    (~g_dbus_interface_skeleton_get_connections
      ~interface_)))
(export g_dbus_interface_skeleton_get_connections)

;; extern gboolean g_dbus_interface_skeleton_has_connection(
;;     GDBusInterfaceSkeleton *interface_, GDBusConnection *connection);
(define ~g_dbus_interface_skeleton_has_connection #f)
(define (g_dbus_interface_skeleton_has_connection
         interface_
         connection)
  (unless
    ~g_dbus_interface_skeleton_has_connection
    (set! ~g_dbus_interface_skeleton_has_connection
      (fh-link-proc
        "g_dbus_interface_skeleton_has_connection"
        ffi:int
        (list '* '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_))
        (~connection
          (unwrap-GDBusConnection* connection)))
    (~g_dbus_interface_skeleton_has_connection
      ~interface_
      ~connection)))
(export g_dbus_interface_skeleton_has_connection)

;; extern const gchar *g_dbus_interface_skeleton_get_object_path(
;;     GDBusInterfaceSkeleton *interface_);
(define ~g_dbus_interface_skeleton_get_object_path #f)
(define (g_dbus_interface_skeleton_get_object_path
         interface_)
  (unless
    ~g_dbus_interface_skeleton_get_object_path
    (set! ~g_dbus_interface_skeleton_get_object_path
      (fh-link-proc
        "g_dbus_interface_skeleton_get_object_path"
        '*
        (list '*))))
  (let ((~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_)))
    (~g_dbus_interface_skeleton_get_object_path
      ~interface_)))
(export g_dbus_interface_skeleton_get_object_path)

;; typedef struct _GDBusObjectIface GDBusObjectIface;
(define GDBusObjectIface-desc void)
(export GDBusObjectIface-desc)
(define GDBusObjectIface*-desc (bs:pointer (delay GDBusObjectIface-desc)))
(export GDBusObjectIface*-desc)
(define-fh-pointer-type GDBusObjectIface* GDBusObjectIface*-desc)

;; struct _GDBusObjectIface {
;;   GTypeInterface parent_iface;
;;   /* Virtual Functions */
;;   const gchar *(*get_object_path)(GDBusObject *object);
;;   GList *(*get_interfaces)(GDBusObject *object);
;;   GDBusInterface *(*get_interface)(GDBusObject *object, const gchar *
;;       interface_name);
;;   /* Signals */
;;   void (*interface_added)(GDBusObject *object, GDBusInterface *interface_);
;;   void (*interface_removed)(GDBusObject *object, GDBusInterface *interface_)
;;       ;
;; };
(define struct-_GDBusObjectIface-desc
  (bs:struct
    (list `(parent_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(get_object_path ,(bs:pointer void))
          `(get_interfaces ,(bs:pointer void))
          `(get_interface ,(bs:pointer void))
          `(interface_added ,(bs:pointer void))
          `(interface_removed ,(bs:pointer void)))))
(export struct-_GDBusObjectIface-desc)
(define-fh-compound-type/p struct-_GDBusObjectIface struct-_GDBusObjectIface-desc)
(set! GDBusObjectIface-desc struct-_GDBusObjectIface-desc)
(define-fh-compound-type GDBusObjectIface GDBusObjectIface-desc)

;; extern GType g_dbus_object_get_type(void);
(define ~g_dbus_object_get_type #f)
(define (g_dbus_object_get_type)
  (unless
    ~g_dbus_object_get_type
    (set! ~g_dbus_object_get_type
      (fh-link-proc
        "g_dbus_object_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_object_get_type)))
(export g_dbus_object_get_type)

;; extern const gchar *g_dbus_object_get_object_path(GDBusObject *object);
(define ~g_dbus_object_get_object_path #f)
(define (g_dbus_object_get_object_path object)
  (unless
    ~g_dbus_object_get_object_path
    (set! ~g_dbus_object_get_object_path
      (fh-link-proc
        "g_dbus_object_get_object_path"
        '*
        (list '*))))
  (let ((~object (unwrap-GDBusObject* object)))
    (~g_dbus_object_get_object_path ~object)))
(export g_dbus_object_get_object_path)

;; extern GList *g_dbus_object_get_interfaces(GDBusObject *object);
(define ~g_dbus_object_get_interfaces #f)
(define (g_dbus_object_get_interfaces object)
  (unless
    ~g_dbus_object_get_interfaces
    (set! ~g_dbus_object_get_interfaces
      (fh-link-proc
        "g_dbus_object_get_interfaces"
        '*
        (list '*))))
  (let ((~object (unwrap-GDBusObject* object)))
    (~g_dbus_object_get_interfaces ~object)))
(export g_dbus_object_get_interfaces)

;; extern GDBusInterface *g_dbus_object_get_interface(GDBusObject *object, 
;;     const gchar *interface_name);
(define ~g_dbus_object_get_interface #f)
(define (g_dbus_object_get_interface
         object
         interface_name)
  (unless
    ~g_dbus_object_get_interface
    (set! ~g_dbus_object_get_interface
      (fh-link-proc
        "g_dbus_object_get_interface"
        '*
        (list '* '*))))
  (let ((~object (unwrap-GDBusObject* object))
        (~interface_name (unwrap~pointer interface_name)))
    (wrap-GDBusInterface*
      (~g_dbus_object_get_interface
        ~object
        ~interface_name))))
(export g_dbus_object_get_interface)

;; typedef struct _GDBusObjectSkeletonClass GDBusObjectSkeletonClass;
(define GDBusObjectSkeletonClass-desc void)
(export GDBusObjectSkeletonClass-desc)
(define GDBusObjectSkeletonClass*-desc (bs:pointer (delay GDBusObjectSkeletonClass-desc)))
(export GDBusObjectSkeletonClass*-desc)
(define-fh-pointer-type GDBusObjectSkeletonClass* GDBusObjectSkeletonClass*-desc)

;; typedef struct _GDBusObjectSkeletonPrivate GDBusObjectSkeletonPrivate;
(define GDBusObjectSkeletonPrivate-desc void)
(export GDBusObjectSkeletonPrivate-desc)
(define GDBusObjectSkeletonPrivate*-desc (bs:pointer GDBusObjectSkeletonPrivate-desc))
(export GDBusObjectSkeletonPrivate*-desc)
(define-fh-pointer-type GDBusObjectSkeletonPrivate* GDBusObjectSkeletonPrivate*-desc)

;; struct _GDBusObjectSkeleton {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusObjectSkeletonPrivate *priv;
;; };
(define struct-_GDBusObjectSkeleton-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GDBusObjectSkeletonPrivate*-desc))))))
(export struct-_GDBusObjectSkeleton-desc)
(define-fh-compound-type/p struct-_GDBusObjectSkeleton struct-_GDBusObjectSkeleton-desc)
(set! GDBusObjectSkeleton-desc struct-_GDBusObjectSkeleton-desc)
(define-fh-compound-type GDBusObjectSkeleton GDBusObjectSkeleton-desc)

;; struct _GDBusObjectSkeletonClass {
;;   GObjectClass parent_class;
;;   /* Signals */
;;   gboolean (*authorize_method)(GDBusObjectSkeleton *object, 
;;       GDBusInterfaceSkeleton *interface_, GDBusMethodInvocation *invocation)
;;       ;
;;   /*< private >*/
;;   gpointer padding[8];
;; };
(define struct-_GDBusObjectSkeletonClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(authorize_method ,(bs:pointer void))
          `(padding ,(bs:vector 8 gpointer-desc)))))
(export struct-_GDBusObjectSkeletonClass-desc)
(define-fh-compound-type/p struct-_GDBusObjectSkeletonClass struct-_GDBusObjectSkeletonClass-desc)
(set! GDBusObjectSkeletonClass-desc struct-_GDBusObjectSkeletonClass-desc)
(define-fh-compound-type GDBusObjectSkeletonClass GDBusObjectSkeletonClass-desc)

;; extern GType g_dbus_object_skeleton_get_type(void);
(define ~g_dbus_object_skeleton_get_type #f)
(define (g_dbus_object_skeleton_get_type)
  (unless
    ~g_dbus_object_skeleton_get_type
    (set! ~g_dbus_object_skeleton_get_type
      (fh-link-proc
        "g_dbus_object_skeleton_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_object_skeleton_get_type)))
(export g_dbus_object_skeleton_get_type)

;; extern GDBusObjectSkeleton *g_dbus_object_skeleton_new(const gchar *
;;     object_path);
(define ~g_dbus_object_skeleton_new #f)
(define (g_dbus_object_skeleton_new object_path)
  (unless
    ~g_dbus_object_skeleton_new
    (set! ~g_dbus_object_skeleton_new
      (fh-link-proc
        "g_dbus_object_skeleton_new"
        '*
        (list '*))))
  (let ((~object_path (unwrap~pointer object_path)))
    (wrap-GDBusObjectSkeleton*
      (~g_dbus_object_skeleton_new ~object_path))))
(export g_dbus_object_skeleton_new)

;; extern void g_dbus_object_skeleton_flush(GDBusObjectSkeleton *object);
(define ~g_dbus_object_skeleton_flush #f)
(define (g_dbus_object_skeleton_flush object)
  (unless
    ~g_dbus_object_skeleton_flush
    (set! ~g_dbus_object_skeleton_flush
      (fh-link-proc
        "g_dbus_object_skeleton_flush"
        ffi:void
        (list '*))))
  (let ((~object (unwrap-GDBusObjectSkeleton* object)))
    (~g_dbus_object_skeleton_flush ~object)))
(export g_dbus_object_skeleton_flush)

;; extern void g_dbus_object_skeleton_add_interface(GDBusObjectSkeleton *object
;;     , GDBusInterfaceSkeleton *interface_);
(define ~g_dbus_object_skeleton_add_interface #f)
(define (g_dbus_object_skeleton_add_interface
         object
         interface_)
  (unless
    ~g_dbus_object_skeleton_add_interface
    (set! ~g_dbus_object_skeleton_add_interface
      (fh-link-proc
        "g_dbus_object_skeleton_add_interface"
        ffi:void
        (list '* '*))))
  (let ((~object (unwrap-GDBusObjectSkeleton* object))
        (~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_)))
    (~g_dbus_object_skeleton_add_interface
      ~object
      ~interface_)))
(export g_dbus_object_skeleton_add_interface)

;; extern void g_dbus_object_skeleton_remove_interface(GDBusObjectSkeleton *
;;     object, GDBusInterfaceSkeleton *interface_);
(define ~g_dbus_object_skeleton_remove_interface #f)
(define (g_dbus_object_skeleton_remove_interface
         object
         interface_)
  (unless
    ~g_dbus_object_skeleton_remove_interface
    (set! ~g_dbus_object_skeleton_remove_interface
      (fh-link-proc
        "g_dbus_object_skeleton_remove_interface"
        ffi:void
        (list '* '*))))
  (let ((~object (unwrap-GDBusObjectSkeleton* object))
        (~interface_
          (unwrap-GDBusInterfaceSkeleton* interface_)))
    (~g_dbus_object_skeleton_remove_interface
      ~object
      ~interface_)))
(export g_dbus_object_skeleton_remove_interface)

;; extern void g_dbus_object_skeleton_remove_interface_by_name(
;;     GDBusObjectSkeleton *object, const gchar *interface_name);
(define ~g_dbus_object_skeleton_remove_interface_by_name #f)
(define (g_dbus_object_skeleton_remove_interface_by_name
         object
         interface_name)
  (unless
    ~g_dbus_object_skeleton_remove_interface_by_name
    (set! ~g_dbus_object_skeleton_remove_interface_by_name
      (fh-link-proc
        "g_dbus_object_skeleton_remove_interface_by_name"
        ffi:void
        (list '* '*))))
  (let ((~object (unwrap-GDBusObjectSkeleton* object))
        (~interface_name (unwrap~pointer interface_name)))
    (~g_dbus_object_skeleton_remove_interface_by_name
      ~object
      ~interface_name)))
(export g_dbus_object_skeleton_remove_interface_by_name)

;; extern void g_dbus_object_skeleton_set_object_path(GDBusObjectSkeleton *
;;     object, const gchar *object_path);
(define ~g_dbus_object_skeleton_set_object_path #f)
(define (g_dbus_object_skeleton_set_object_path
         object
         object_path)
  (unless
    ~g_dbus_object_skeleton_set_object_path
    (set! ~g_dbus_object_skeleton_set_object_path
      (fh-link-proc
        "g_dbus_object_skeleton_set_object_path"
        ffi:void
        (list '* '*))))
  (let ((~object (unwrap-GDBusObjectSkeleton* object))
        (~object_path (unwrap~pointer object_path)))
    (~g_dbus_object_skeleton_set_object_path
      ~object
      ~object_path)))
(export g_dbus_object_skeleton_set_object_path)

;; typedef struct _GDBusObjectProxyClass GDBusObjectProxyClass;
(define GDBusObjectProxyClass-desc void)
(export GDBusObjectProxyClass-desc)
(define GDBusObjectProxyClass*-desc (bs:pointer (delay GDBusObjectProxyClass-desc)))
(export GDBusObjectProxyClass*-desc)
(define-fh-pointer-type GDBusObjectProxyClass* GDBusObjectProxyClass*-desc)

;; typedef struct _GDBusObjectProxyPrivate GDBusObjectProxyPrivate;
(define GDBusObjectProxyPrivate-desc void)
(export GDBusObjectProxyPrivate-desc)
(define GDBusObjectProxyPrivate*-desc (bs:pointer GDBusObjectProxyPrivate-desc))
(export GDBusObjectProxyPrivate*-desc)
(define-fh-pointer-type GDBusObjectProxyPrivate* GDBusObjectProxyPrivate*-desc)

;; struct _GDBusObjectProxy {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusObjectProxyPrivate *priv;
;; };
(define struct-_GDBusObjectProxy-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GDBusObjectProxyPrivate*-desc))))))
(export struct-_GDBusObjectProxy-desc)
(define-fh-compound-type/p struct-_GDBusObjectProxy struct-_GDBusObjectProxy-desc)
(set! GDBusObjectProxy-desc struct-_GDBusObjectProxy-desc)
(define-fh-compound-type GDBusObjectProxy GDBusObjectProxy-desc)

;; struct _GDBusObjectProxyClass {
;;   GObjectClass parent_class;
;;   /*< private >*/
;;   gpointer padding[8];
;; };
(define struct-_GDBusObjectProxyClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(padding ,(bs:vector 8 gpointer-desc)))))
(export struct-_GDBusObjectProxyClass-desc)
(define-fh-compound-type/p struct-_GDBusObjectProxyClass struct-_GDBusObjectProxyClass-desc)
(set! GDBusObjectProxyClass-desc struct-_GDBusObjectProxyClass-desc)
(define-fh-compound-type GDBusObjectProxyClass GDBusObjectProxyClass-desc)

;; extern GType g_dbus_object_proxy_get_type(void);
(define ~g_dbus_object_proxy_get_type #f)
(define (g_dbus_object_proxy_get_type)
  (unless
    ~g_dbus_object_proxy_get_type
    (set! ~g_dbus_object_proxy_get_type
      (fh-link-proc
        "g_dbus_object_proxy_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_object_proxy_get_type)))
(export g_dbus_object_proxy_get_type)

;; extern GDBusObjectProxy *g_dbus_object_proxy_new(GDBusConnection *connection
;;     , const gchar *object_path);
(define ~g_dbus_object_proxy_new #f)
(define (g_dbus_object_proxy_new connection object_path)
  (unless
    ~g_dbus_object_proxy_new
    (set! ~g_dbus_object_proxy_new
      (fh-link-proc
        "g_dbus_object_proxy_new"
        '*
        (list '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~object_path (unwrap~pointer object_path)))
    (wrap-GDBusObjectProxy*
      (~g_dbus_object_proxy_new
        ~connection
        ~object_path))))
(export g_dbus_object_proxy_new)

;; extern GDBusConnection *g_dbus_object_proxy_get_connection(GDBusObjectProxy 
;;     *proxy);
(define ~g_dbus_object_proxy_get_connection #f)
(define (g_dbus_object_proxy_get_connection proxy)
  (unless
    ~g_dbus_object_proxy_get_connection
    (set! ~g_dbus_object_proxy_get_connection
      (fh-link-proc
        "g_dbus_object_proxy_get_connection"
        '*
        (list '*))))
  (let ((~proxy (unwrap-GDBusObjectProxy* proxy)))
    (wrap-GDBusConnection*
      (~g_dbus_object_proxy_get_connection ~proxy))))
(export g_dbus_object_proxy_get_connection)

;; typedef struct _GDBusObjectManagerIface GDBusObjectManagerIface;
(define GDBusObjectManagerIface-desc void)
(export GDBusObjectManagerIface-desc)
(define GDBusObjectManagerIface*-desc (bs:pointer (delay GDBusObjectManagerIface-desc)))
(export GDBusObjectManagerIface*-desc)
(define-fh-pointer-type GDBusObjectManagerIface* GDBusObjectManagerIface*-desc)

;; struct _GDBusObjectManagerIface {
;;   GTypeInterface parent_iface;
;;   /* Virtual Functions */
;;   const gchar *(*get_object_path)(GDBusObjectManager *manager);
;;   GList *(*get_objects)(GDBusObjectManager *manager);
;;   GDBusObject *(*get_object)(GDBusObjectManager *manager, const gchar *
;;       object_path);
;;   GDBusInterface *(*get_interface)(GDBusObjectManager *manager, const gchar 
;;       *object_path, const gchar *interface_name);
;;   /* Signals */
;;   void (*object_added)(GDBusObjectManager *manager, GDBusObject *object);
;;   void (*object_removed)(GDBusObjectManager *manager, GDBusObject *object);
;;   void (*interface_added)(GDBusObjectManager *manager, GDBusObject *object, 
;;       GDBusInterface *interface_);
;;   void (*interface_removed)(GDBusObjectManager *manager, GDBusObject *object
;;       , GDBusInterface *interface_);
;; };
(define struct-_GDBusObjectManagerIface-desc
  (bs:struct
    (list `(parent_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(get_object_path ,(bs:pointer void))
          `(get_objects ,(bs:pointer void))
          `(get_object ,(bs:pointer void))
          `(get_interface ,(bs:pointer void))
          `(object_added ,(bs:pointer void))
          `(object_removed ,(bs:pointer void))
          `(interface_added ,(bs:pointer void))
          `(interface_removed ,(bs:pointer void)))))
(export struct-_GDBusObjectManagerIface-desc)
(define-fh-compound-type/p struct-_GDBusObjectManagerIface struct-_GDBusObjectManagerIface-desc)
(set! GDBusObjectManagerIface-desc struct-_GDBusObjectManagerIface-desc)
(define-fh-compound-type GDBusObjectManagerIface GDBusObjectManagerIface-desc)

;; extern GType g_dbus_object_manager_get_type(void);
(define ~g_dbus_object_manager_get_type #f)
(define (g_dbus_object_manager_get_type)
  (unless
    ~g_dbus_object_manager_get_type
    (set! ~g_dbus_object_manager_get_type
      (fh-link-proc
        "g_dbus_object_manager_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_object_manager_get_type)))
(export g_dbus_object_manager_get_type)

;; extern const gchar *g_dbus_object_manager_get_object_path(GDBusObjectManager
;;      *manager);
(define ~g_dbus_object_manager_get_object_path #f)
(define (g_dbus_object_manager_get_object_path manager)
  (unless
    ~g_dbus_object_manager_get_object_path
    (set! ~g_dbus_object_manager_get_object_path
      (fh-link-proc
        "g_dbus_object_manager_get_object_path"
        '*
        (list '*))))
  (let ((~manager (unwrap-GDBusObjectManager* manager)))
    (~g_dbus_object_manager_get_object_path ~manager)))
(export g_dbus_object_manager_get_object_path)

;; extern GList *g_dbus_object_manager_get_objects(GDBusObjectManager *manager)
;;     ;
(define ~g_dbus_object_manager_get_objects #f)
(define (g_dbus_object_manager_get_objects manager)
  (unless
    ~g_dbus_object_manager_get_objects
    (set! ~g_dbus_object_manager_get_objects
      (fh-link-proc
        "g_dbus_object_manager_get_objects"
        '*
        (list '*))))
  (let ((~manager (unwrap-GDBusObjectManager* manager)))
    (~g_dbus_object_manager_get_objects ~manager)))
(export g_dbus_object_manager_get_objects)

;; extern GDBusObject *g_dbus_object_manager_get_object(GDBusObjectManager *
;;     manager, const gchar *object_path);
(define ~g_dbus_object_manager_get_object #f)
(define (g_dbus_object_manager_get_object
         manager
         object_path)
  (unless
    ~g_dbus_object_manager_get_object
    (set! ~g_dbus_object_manager_get_object
      (fh-link-proc
        "g_dbus_object_manager_get_object"
        '*
        (list '* '*))))
  (let ((~manager (unwrap-GDBusObjectManager* manager))
        (~object_path (unwrap~pointer object_path)))
    (wrap-GDBusObject*
      (~g_dbus_object_manager_get_object
        ~manager
        ~object_path))))
(export g_dbus_object_manager_get_object)

;; extern GDBusInterface *g_dbus_object_manager_get_interface(
;;     GDBusObjectManager *manager, const gchar *object_path, const gchar *
;;     interface_name);
(define ~g_dbus_object_manager_get_interface #f)
(define (g_dbus_object_manager_get_interface
         manager
         object_path
         interface_name)
  (unless
    ~g_dbus_object_manager_get_interface
    (set! ~g_dbus_object_manager_get_interface
      (fh-link-proc
        "g_dbus_object_manager_get_interface"
        '*
        (list '* '* '*))))
  (let ((~manager (unwrap-GDBusObjectManager* manager))
        (~object_path (unwrap~pointer object_path))
        (~interface_name (unwrap~pointer interface_name)))
    (wrap-GDBusInterface*
      (~g_dbus_object_manager_get_interface
        ~manager
        ~object_path
        ~interface_name))))
(export g_dbus_object_manager_get_interface)

;; typedef struct _GDBusObjectManagerClientClass GDBusObjectManagerClientClass
;;     ;
(define GDBusObjectManagerClientClass-desc void)
(export GDBusObjectManagerClientClass-desc)
(define GDBusObjectManagerClientClass*-desc (bs:pointer (delay GDBusObjectManagerClientClass-desc)))
(export GDBusObjectManagerClientClass*-desc)
(define-fh-pointer-type GDBusObjectManagerClientClass* GDBusObjectManagerClientClass*-desc)

;; typedef struct _GDBusObjectManagerClientPrivate 
;;     GDBusObjectManagerClientPrivate;
(define GDBusObjectManagerClientPrivate-desc void)
(export GDBusObjectManagerClientPrivate-desc)
(define GDBusObjectManagerClientPrivate*-desc (bs:pointer GDBusObjectManagerClientPrivate-desc))
(export GDBusObjectManagerClientPrivate*-desc)
(define-fh-pointer-type GDBusObjectManagerClientPrivate* GDBusObjectManagerClientPrivate*-desc)

;; struct _GDBusObjectManagerClient {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusObjectManagerClientPrivate *priv;
;; };
(define struct-_GDBusObjectManagerClient-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GDBusObjectManagerClientPrivate*-desc))))))
(export struct-_GDBusObjectManagerClient-desc)
(define-fh-compound-type/p struct-_GDBusObjectManagerClient struct-_GDBusObjectManagerClient-desc)
(set! GDBusObjectManagerClient-desc struct-_GDBusObjectManagerClient-desc)
(define-fh-compound-type GDBusObjectManagerClient GDBusObjectManagerClient-desc)

;; struct _GDBusObjectManagerClientClass {
;;   GObjectClass parent_class;
;;   /* signals */
;;   void (*interface_proxy_signal)(GDBusObjectManagerClient *manager, 
;;       GDBusObjectProxy *object_proxy, GDBusProxy *interface_proxy, const 
;;       gchar *sender_name, const gchar *signal_name, GVariant *parameters);
;;   void (*interface_proxy_properties_changed)(GDBusObjectManagerClient *
;;       manager, GDBusObjectProxy *object_proxy, GDBusProxy *interface_proxy, 
;;       GVariant *changed_properties, const gchar *const*
;;       invalidated_properties);
;;   /*< private >*/
;;   gpointer padding[8];
;; };
(define struct-_GDBusObjectManagerClientClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(interface_proxy_signal ,(bs:pointer void))
          `(interface_proxy_properties_changed
             ,(bs:pointer void))
          `(padding ,(bs:vector 8 gpointer-desc)))))
(export struct-_GDBusObjectManagerClientClass-desc)
(define-fh-compound-type/p struct-_GDBusObjectManagerClientClass struct-_GDBusObjectManagerClientClass-desc)
(set! GDBusObjectManagerClientClass-desc struct-_GDBusObjectManagerClientClass-desc)
(define-fh-compound-type GDBusObjectManagerClientClass GDBusObjectManagerClientClass-desc)

;; extern GType g_dbus_object_manager_client_get_type(void);
(define ~g_dbus_object_manager_client_get_type #f)
(define (g_dbus_object_manager_client_get_type)
  (unless
    ~g_dbus_object_manager_client_get_type
    (set! ~g_dbus_object_manager_client_get_type
      (fh-link-proc
        "g_dbus_object_manager_client_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_object_manager_client_get_type)))
(export g_dbus_object_manager_client_get_type)

;; extern void g_dbus_object_manager_client_new(GDBusConnection *connection, 
;;     GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *
;;     object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer 
;;     get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_dbus_object_manager_client_new #f)
(define (g_dbus_object_manager_client_new
         connection
         flags
         name
         object_path
         get_proxy_type_func
         get_proxy_type_user_data
         get_proxy_type_destroy_notify
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_object_manager_client_new
    (set! ~g_dbus_object_manager_client_new
      (fh-link-proc
        "g_dbus_object_manager_client_new"
        ffi:void
        (list '* ffi:int '* '* '* '* '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~flags (unwrap~fixed flags))
        (~name (unwrap~pointer name))
        (~object_path (unwrap~pointer object_path))
        (~get_proxy_type_func
          ((make-ftn-arg-unwrapper
             ffi:unsigned-long
             (list '* '* '* '*))
           get_proxy_type_func))
        (~get_proxy_type_user_data
          (unwrap-gpointer get_proxy_type_user_data))
        (~get_proxy_type_destroy_notify
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           get_proxy_type_destroy_notify))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_object_manager_client_new
      ~connection
      ~flags
      ~name
      ~object_path
      ~get_proxy_type_func
      ~get_proxy_type_user_data
      ~get_proxy_type_destroy_notify
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_object_manager_client_new)

;; extern GDBusObjectManager *g_dbus_object_manager_client_new_finish(
;;     GAsyncResult *res, GError **error);
(define ~g_dbus_object_manager_client_new_finish #f)
(define (g_dbus_object_manager_client_new_finish
         res
         error)
  (unless
    ~g_dbus_object_manager_client_new_finish
    (set! ~g_dbus_object_manager_client_new_finish
      (fh-link-proc
        "g_dbus_object_manager_client_new_finish"
        '*
        (list '* '*))))
  (let ((~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GDBusObjectManager*
      (~g_dbus_object_manager_client_new_finish
        ~res
        ~error))))
(export g_dbus_object_manager_client_new_finish)

;; extern GDBusObjectManager *g_dbus_object_manager_client_new_sync(
;;     GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const 
;;     gchar *name, const gchar *object_path, GDBusProxyTypeFunc 
;;     get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify 
;;     get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error
;;     );
(define ~g_dbus_object_manager_client_new_sync #f)
(define (g_dbus_object_manager_client_new_sync
         connection
         flags
         name
         object_path
         get_proxy_type_func
         get_proxy_type_user_data
         get_proxy_type_destroy_notify
         cancellable
         error)
  (unless
    ~g_dbus_object_manager_client_new_sync
    (set! ~g_dbus_object_manager_client_new_sync
      (fh-link-proc
        "g_dbus_object_manager_client_new_sync"
        '*
        (list '* ffi:int '* '* '* '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~flags (unwrap~fixed flags))
        (~name (unwrap~pointer name))
        (~object_path (unwrap~pointer object_path))
        (~get_proxy_type_func
          ((make-ftn-arg-unwrapper
             ffi:unsigned-long
             (list '* '* '* '*))
           get_proxy_type_func))
        (~get_proxy_type_user_data
          (unwrap-gpointer get_proxy_type_user_data))
        (~get_proxy_type_destroy_notify
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           get_proxy_type_destroy_notify))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GDBusObjectManager*
      (~g_dbus_object_manager_client_new_sync
        ~connection
        ~flags
        ~name
        ~object_path
        ~get_proxy_type_func
        ~get_proxy_type_user_data
        ~get_proxy_type_destroy_notify
        ~cancellable
        ~error))))
(export g_dbus_object_manager_client_new_sync)

;; extern void g_dbus_object_manager_client_new_for_bus(GBusType bus_type, 
;;     GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *
;;     object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer 
;;     get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, 
;;     GCancellable *cancellable, GAsyncReadyCallback callback, gpointer 
;;     user_data);
(define ~g_dbus_object_manager_client_new_for_bus #f)
(define (g_dbus_object_manager_client_new_for_bus
         bus_type
         flags
         name
         object_path
         get_proxy_type_func
         get_proxy_type_user_data
         get_proxy_type_destroy_notify
         cancellable
         callback
         user_data)
  (unless
    ~g_dbus_object_manager_client_new_for_bus
    (set! ~g_dbus_object_manager_client_new_for_bus
      (fh-link-proc
        "g_dbus_object_manager_client_new_for_bus"
        ffi:void
        (list ffi:int ffi:int '* '* '* '* '* '* '* '*))))
  (let ((~bus_type (unwrap~fixed bus_type))
        (~flags (unwrap~fixed flags))
        (~name (unwrap~pointer name))
        (~object_path (unwrap~pointer object_path))
        (~get_proxy_type_func
          ((make-ftn-arg-unwrapper
             ffi:unsigned-long
             (list '* '* '* '*))
           get_proxy_type_func))
        (~get_proxy_type_user_data
          (unwrap-gpointer get_proxy_type_user_data))
        (~get_proxy_type_destroy_notify
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           get_proxy_type_destroy_notify))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~callback
          ((make-ftn-arg-unwrapper ffi:void (list '* '* '*))
           callback))
        (~user_data (unwrap-gpointer user_data)))
    (~g_dbus_object_manager_client_new_for_bus
      ~bus_type
      ~flags
      ~name
      ~object_path
      ~get_proxy_type_func
      ~get_proxy_type_user_data
      ~get_proxy_type_destroy_notify
      ~cancellable
      ~callback
      ~user_data)))
(export g_dbus_object_manager_client_new_for_bus)

;; extern GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_finish(
;;     GAsyncResult *res, GError **error);
(define ~g_dbus_object_manager_client_new_for_bus_finish #f)
(define (g_dbus_object_manager_client_new_for_bus_finish
         res
         error)
  (unless
    ~g_dbus_object_manager_client_new_for_bus_finish
    (set! ~g_dbus_object_manager_client_new_for_bus_finish
      (fh-link-proc
        "g_dbus_object_manager_client_new_for_bus_finish"
        '*
        (list '* '*))))
  (let ((~res (unwrap-GAsyncResult* res))
        (~error (unwrap~pointer error)))
    (wrap-GDBusObjectManager*
      (~g_dbus_object_manager_client_new_for_bus_finish
        ~res
        ~error))))
(export g_dbus_object_manager_client_new_for_bus_finish)

;; extern GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_sync(
;;     GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *
;;     name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, 
;;     gpointer get_proxy_type_user_data, GDestroyNotify 
;;     get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error
;;     );
(define ~g_dbus_object_manager_client_new_for_bus_sync #f)
(define (g_dbus_object_manager_client_new_for_bus_sync
         bus_type
         flags
         name
         object_path
         get_proxy_type_func
         get_proxy_type_user_data
         get_proxy_type_destroy_notify
         cancellable
         error)
  (unless
    ~g_dbus_object_manager_client_new_for_bus_sync
    (set! ~g_dbus_object_manager_client_new_for_bus_sync
      (fh-link-proc
        "g_dbus_object_manager_client_new_for_bus_sync"
        '*
        (list ffi:int ffi:int '* '* '* '* '* '* '*))))
  (let ((~bus_type (unwrap~fixed bus_type))
        (~flags (unwrap~fixed flags))
        (~name (unwrap~pointer name))
        (~object_path (unwrap~pointer object_path))
        (~get_proxy_type_func
          ((make-ftn-arg-unwrapper
             ffi:unsigned-long
             (list '* '* '* '*))
           get_proxy_type_func))
        (~get_proxy_type_user_data
          (unwrap-gpointer get_proxy_type_user_data))
        (~get_proxy_type_destroy_notify
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           get_proxy_type_destroy_notify))
        (~cancellable (unwrap-GCancellable* cancellable))
        (~error (unwrap~pointer error)))
    (wrap-GDBusObjectManager*
      (~g_dbus_object_manager_client_new_for_bus_sync
        ~bus_type
        ~flags
        ~name
        ~object_path
        ~get_proxy_type_func
        ~get_proxy_type_user_data
        ~get_proxy_type_destroy_notify
        ~cancellable
        ~error))))
(export g_dbus_object_manager_client_new_for_bus_sync)

;; extern GDBusConnection *g_dbus_object_manager_client_get_connection(
;;     GDBusObjectManagerClient *manager);
(define ~g_dbus_object_manager_client_get_connection #f)
(define (g_dbus_object_manager_client_get_connection
         manager)
  (unless
    ~g_dbus_object_manager_client_get_connection
    (set! ~g_dbus_object_manager_client_get_connection
      (fh-link-proc
        "g_dbus_object_manager_client_get_connection"
        '*
        (list '*))))
  (let ((~manager
          (unwrap-GDBusObjectManagerClient* manager)))
    (wrap-GDBusConnection*
      (~g_dbus_object_manager_client_get_connection
        ~manager))))
(export g_dbus_object_manager_client_get_connection)

;; extern GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags(
;;     GDBusObjectManagerClient *manager);
(define ~g_dbus_object_manager_client_get_flags #f)
(define (g_dbus_object_manager_client_get_flags manager)
  (unless
    ~g_dbus_object_manager_client_get_flags
    (set! ~g_dbus_object_manager_client_get_flags
      (fh-link-proc
        "g_dbus_object_manager_client_get_flags"
        ffi:int
        (list '*))))
  (let ((~manager
          (unwrap-GDBusObjectManagerClient* manager)))
    (~g_dbus_object_manager_client_get_flags
      ~manager)))
(export g_dbus_object_manager_client_get_flags)

;; extern const gchar *g_dbus_object_manager_client_get_name(
;;     GDBusObjectManagerClient *manager);
(define ~g_dbus_object_manager_client_get_name #f)
(define (g_dbus_object_manager_client_get_name manager)
  (unless
    ~g_dbus_object_manager_client_get_name
    (set! ~g_dbus_object_manager_client_get_name
      (fh-link-proc
        "g_dbus_object_manager_client_get_name"
        '*
        (list '*))))
  (let ((~manager
          (unwrap-GDBusObjectManagerClient* manager)))
    (~g_dbus_object_manager_client_get_name ~manager)))
(export g_dbus_object_manager_client_get_name)

;; extern gchar *g_dbus_object_manager_client_get_name_owner(
;;     GDBusObjectManagerClient *manager);
(define ~g_dbus_object_manager_client_get_name_owner #f)
(define (g_dbus_object_manager_client_get_name_owner
         manager)
  (unless
    ~g_dbus_object_manager_client_get_name_owner
    (set! ~g_dbus_object_manager_client_get_name_owner
      (fh-link-proc
        "g_dbus_object_manager_client_get_name_owner"
        '*
        (list '*))))
  (let ((~manager
          (unwrap-GDBusObjectManagerClient* manager)))
    (~g_dbus_object_manager_client_get_name_owner
      ~manager)))
(export g_dbus_object_manager_client_get_name_owner)

;; typedef struct _GDBusObjectManagerServerClass GDBusObjectManagerServerClass
;;     ;
(define GDBusObjectManagerServerClass-desc void)
(export GDBusObjectManagerServerClass-desc)
(define GDBusObjectManagerServerClass*-desc (bs:pointer (delay GDBusObjectManagerServerClass-desc)))
(export GDBusObjectManagerServerClass*-desc)
(define-fh-pointer-type GDBusObjectManagerServerClass* GDBusObjectManagerServerClass*-desc)

;; typedef struct _GDBusObjectManagerServerPrivate 
;;     GDBusObjectManagerServerPrivate;
(define GDBusObjectManagerServerPrivate-desc void)
(export GDBusObjectManagerServerPrivate-desc)
(define GDBusObjectManagerServerPrivate*-desc (bs:pointer GDBusObjectManagerServerPrivate-desc))
(export GDBusObjectManagerServerPrivate*-desc)
(define-fh-pointer-type GDBusObjectManagerServerPrivate* GDBusObjectManagerServerPrivate*-desc)

;; struct _GDBusObjectManagerServer {
;;   /*< private >*/
;;   GObject parent_instance;
;;   GDBusObjectManagerServerPrivate *priv;
;; };
(define struct-_GDBusObjectManagerServer-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GDBusObjectManagerServerPrivate*-desc))))))
(export struct-_GDBusObjectManagerServer-desc)
(define-fh-compound-type/p struct-_GDBusObjectManagerServer struct-_GDBusObjectManagerServer-desc)
(set! GDBusObjectManagerServer-desc struct-_GDBusObjectManagerServer-desc)
(define-fh-compound-type GDBusObjectManagerServer GDBusObjectManagerServer-desc)

;; struct _GDBusObjectManagerServerClass {
;;   GObjectClass parent_class;
;;   /*< private >*/
;;   gpointer padding[8];
;; };
(define struct-_GDBusObjectManagerServerClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(padding ,(bs:vector 8 gpointer-desc)))))
(export struct-_GDBusObjectManagerServerClass-desc)
(define-fh-compound-type/p struct-_GDBusObjectManagerServerClass struct-_GDBusObjectManagerServerClass-desc)
(set! GDBusObjectManagerServerClass-desc struct-_GDBusObjectManagerServerClass-desc)
(define-fh-compound-type GDBusObjectManagerServerClass GDBusObjectManagerServerClass-desc)

;; extern GType g_dbus_object_manager_server_get_type(void);
(define ~g_dbus_object_manager_server_get_type #f)
(define (g_dbus_object_manager_server_get_type)
  (unless
    ~g_dbus_object_manager_server_get_type
    (set! ~g_dbus_object_manager_server_get_type
      (fh-link-proc
        "g_dbus_object_manager_server_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_object_manager_server_get_type)))
(export g_dbus_object_manager_server_get_type)

;; extern GDBusObjectManagerServer *g_dbus_object_manager_server_new(const 
;;     gchar *object_path);
(define ~g_dbus_object_manager_server_new #f)
(define (g_dbus_object_manager_server_new object_path)
  (unless
    ~g_dbus_object_manager_server_new
    (set! ~g_dbus_object_manager_server_new
      (fh-link-proc
        "g_dbus_object_manager_server_new"
        '*
        (list '*))))
  (let ((~object_path (unwrap~pointer object_path)))
    (wrap-GDBusObjectManagerServer*
      (~g_dbus_object_manager_server_new ~object_path))))
(export g_dbus_object_manager_server_new)

;; extern GDBusConnection *g_dbus_object_manager_server_get_connection(
;;     GDBusObjectManagerServer *manager);
(define ~g_dbus_object_manager_server_get_connection #f)
(define (g_dbus_object_manager_server_get_connection
         manager)
  (unless
    ~g_dbus_object_manager_server_get_connection
    (set! ~g_dbus_object_manager_server_get_connection
      (fh-link-proc
        "g_dbus_object_manager_server_get_connection"
        '*
        (list '*))))
  (let ((~manager
          (unwrap-GDBusObjectManagerServer* manager)))
    (wrap-GDBusConnection*
      (~g_dbus_object_manager_server_get_connection
        ~manager))))
(export g_dbus_object_manager_server_get_connection)

;; extern void g_dbus_object_manager_server_set_connection(
;;     GDBusObjectManagerServer *manager, GDBusConnection *connection);
(define ~g_dbus_object_manager_server_set_connection #f)
(define (g_dbus_object_manager_server_set_connection
         manager
         connection)
  (unless
    ~g_dbus_object_manager_server_set_connection
    (set! ~g_dbus_object_manager_server_set_connection
      (fh-link-proc
        "g_dbus_object_manager_server_set_connection"
        ffi:void
        (list '* '*))))
  (let ((~manager
          (unwrap-GDBusObjectManagerServer* manager))
        (~connection
          (unwrap-GDBusConnection* connection)))
    (~g_dbus_object_manager_server_set_connection
      ~manager
      ~connection)))
(export g_dbus_object_manager_server_set_connection)

;; extern void g_dbus_object_manager_server_export(GDBusObjectManagerServer *
;;     manager, GDBusObjectSkeleton *object);
(define ~g_dbus_object_manager_server_export #f)
(define (g_dbus_object_manager_server_export
         manager
         object)
  (unless
    ~g_dbus_object_manager_server_export
    (set! ~g_dbus_object_manager_server_export
      (fh-link-proc
        "g_dbus_object_manager_server_export"
        ffi:void
        (list '* '*))))
  (let ((~manager
          (unwrap-GDBusObjectManagerServer* manager))
        (~object (unwrap-GDBusObjectSkeleton* object)))
    (~g_dbus_object_manager_server_export
      ~manager
      ~object)))
(export g_dbus_object_manager_server_export)

;; extern void g_dbus_object_manager_server_export_uniquely(
;;     GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object);
(define ~g_dbus_object_manager_server_export_uniquely #f)
(define (g_dbus_object_manager_server_export_uniquely
         manager
         object)
  (unless
    ~g_dbus_object_manager_server_export_uniquely
    (set! ~g_dbus_object_manager_server_export_uniquely
      (fh-link-proc
        "g_dbus_object_manager_server_export_uniquely"
        ffi:void
        (list '* '*))))
  (let ((~manager
          (unwrap-GDBusObjectManagerServer* manager))
        (~object (unwrap-GDBusObjectSkeleton* object)))
    (~g_dbus_object_manager_server_export_uniquely
      ~manager
      ~object)))
(export g_dbus_object_manager_server_export_uniquely)

;; extern gboolean g_dbus_object_manager_server_is_exported(
;;     GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object);
(define ~g_dbus_object_manager_server_is_exported #f)
(define (g_dbus_object_manager_server_is_exported
         manager
         object)
  (unless
    ~g_dbus_object_manager_server_is_exported
    (set! ~g_dbus_object_manager_server_is_exported
      (fh-link-proc
        "g_dbus_object_manager_server_is_exported"
        ffi:int
        (list '* '*))))
  (let ((~manager
          (unwrap-GDBusObjectManagerServer* manager))
        (~object (unwrap-GDBusObjectSkeleton* object)))
    (~g_dbus_object_manager_server_is_exported
      ~manager
      ~object)))
(export g_dbus_object_manager_server_is_exported)

;; extern gboolean g_dbus_object_manager_server_unexport(
;;     GDBusObjectManagerServer *manager, const gchar *object_path);
(define ~g_dbus_object_manager_server_unexport #f)
(define (g_dbus_object_manager_server_unexport
         manager
         object_path)
  (unless
    ~g_dbus_object_manager_server_unexport
    (set! ~g_dbus_object_manager_server_unexport
      (fh-link-proc
        "g_dbus_object_manager_server_unexport"
        ffi:int
        (list '* '*))))
  (let ((~manager
          (unwrap-GDBusObjectManagerServer* manager))
        (~object_path (unwrap~pointer object_path)))
    (~g_dbus_object_manager_server_unexport
      ~manager
      ~object_path)))
(export g_dbus_object_manager_server_unexport)

;; extern GType g_dbus_action_group_get_type(void);
(define ~g_dbus_action_group_get_type #f)
(define (g_dbus_action_group_get_type)
  (unless
    ~g_dbus_action_group_get_type
    (set! ~g_dbus_action_group_get_type
      (fh-link-proc
        "g_dbus_action_group_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_action_group_get_type)))
(export g_dbus_action_group_get_type)

;; extern GDBusActionGroup *g_dbus_action_group_get(GDBusConnection *connection
;;     , const gchar *bus_name, const gchar *object_path);
(define ~g_dbus_action_group_get #f)
(define (g_dbus_action_group_get
         connection
         bus_name
         object_path)
  (unless
    ~g_dbus_action_group_get
    (set! ~g_dbus_action_group_get
      (fh-link-proc
        "g_dbus_action_group_get"
        '*
        (list '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~bus_name (unwrap~pointer bus_name))
        (~object_path (unwrap~pointer object_path)))
    (wrap-GDBusActionGroup*
      (~g_dbus_action_group_get
        ~connection
        ~bus_name
        ~object_path))))
(export g_dbus_action_group_get)

;; typedef struct _GRemoteActionGroupInterface GRemoteActionGroupInterface;
(define GRemoteActionGroupInterface-desc void)
(export GRemoteActionGroupInterface-desc)
(define GRemoteActionGroupInterface*-desc (bs:pointer (delay GRemoteActionGroupInterface-desc)))
(export GRemoteActionGroupInterface*-desc)
(define-fh-pointer-type GRemoteActionGroupInterface* GRemoteActionGroupInterface*-desc)

;; struct _GRemoteActionGroupInterface {
;;   GTypeInterface g_iface;
;;   void (*activate_action_full)(GRemoteActionGroup *remote, const gchar *
;;       action_name, GVariant *parameter, GVariant *platform_data);
;;   void (*change_action_state_full)(GRemoteActionGroup *remote, const gchar *
;;       action_name, GVariant *value, GVariant *platform_data);
;; };
(define struct-_GRemoteActionGroupInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(activate_action_full ,(bs:pointer void))
          `(change_action_state_full ,(bs:pointer void)))))
(export struct-_GRemoteActionGroupInterface-desc)
(define-fh-compound-type/p struct-_GRemoteActionGroupInterface struct-_GRemoteActionGroupInterface-desc)
(set! GRemoteActionGroupInterface-desc struct-_GRemoteActionGroupInterface-desc)
(define-fh-compound-type GRemoteActionGroupInterface GRemoteActionGroupInterface-desc)

;; extern GType g_remote_action_group_get_type(void);
(define ~g_remote_action_group_get_type #f)
(define (g_remote_action_group_get_type)
  (unless
    ~g_remote_action_group_get_type
    (set! ~g_remote_action_group_get_type
      (fh-link-proc
        "g_remote_action_group_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_remote_action_group_get_type)))
(export g_remote_action_group_get_type)

;; extern void g_remote_action_group_activate_action_full(GRemoteActionGroup *
;;     remote, const gchar *action_name, GVariant *parameter, GVariant *
;;     platform_data);
(define ~g_remote_action_group_activate_action_full #f)
(define (g_remote_action_group_activate_action_full
         remote
         action_name
         parameter
         platform_data)
  (unless
    ~g_remote_action_group_activate_action_full
    (set! ~g_remote_action_group_activate_action_full
      (fh-link-proc
        "g_remote_action_group_activate_action_full"
        ffi:void
        (list '* '* '* '*))))
  (let ((~remote (unwrap-GRemoteActionGroup* remote))
        (~action_name (unwrap~pointer action_name)))
    (~g_remote_action_group_activate_action_full
      ~remote
      ~action_name
      parameter
      platform_data)))
(export g_remote_action_group_activate_action_full)

;; extern void g_remote_action_group_change_action_state_full(
;;     GRemoteActionGroup *remote, const gchar *action_name, GVariant *value, 
;;     GVariant *platform_data);
(define ~g_remote_action_group_change_action_state_full #f)
(define (g_remote_action_group_change_action_state_full
         remote
         action_name
         value
         platform_data)
  (unless
    ~g_remote_action_group_change_action_state_full
    (set! ~g_remote_action_group_change_action_state_full
      (fh-link-proc
        "g_remote_action_group_change_action_state_full"
        ffi:void
        (list '* '* '* '*))))
  (let ((~remote (unwrap-GRemoteActionGroup* remote))
        (~action_name (unwrap~pointer action_name)))
    (~g_remote_action_group_change_action_state_full
      ~remote
      ~action_name
      value
      platform_data)))
(export g_remote_action_group_change_action_state_full)

;; typedef struct _GMenuModelPrivate GMenuModelPrivate;
(define GMenuModelPrivate-desc void)
(export GMenuModelPrivate-desc)
(define GMenuModelPrivate*-desc (bs:pointer GMenuModelPrivate-desc))
(export GMenuModelPrivate*-desc)
(define-fh-pointer-type GMenuModelPrivate* GMenuModelPrivate*-desc)

;; typedef struct _GMenuModelClass GMenuModelClass;
(define GMenuModelClass-desc void)
(export GMenuModelClass-desc)
(define GMenuModelClass*-desc (bs:pointer (delay GMenuModelClass-desc)))
(export GMenuModelClass*-desc)
(define-fh-pointer-type GMenuModelClass* GMenuModelClass*-desc)

;; typedef struct _GMenuAttributeIterPrivate GMenuAttributeIterPrivate;
(define GMenuAttributeIterPrivate-desc void)
(export GMenuAttributeIterPrivate-desc)
(define GMenuAttributeIterPrivate*-desc (bs:pointer GMenuAttributeIterPrivate-desc))
(export GMenuAttributeIterPrivate*-desc)
(define-fh-pointer-type GMenuAttributeIterPrivate* GMenuAttributeIterPrivate*-desc)

;; typedef struct _GMenuAttributeIterClass GMenuAttributeIterClass;
(define GMenuAttributeIterClass-desc void)
(export GMenuAttributeIterClass-desc)
(define GMenuAttributeIterClass*-desc (bs:pointer (delay GMenuAttributeIterClass-desc)))
(export GMenuAttributeIterClass*-desc)
(define-fh-pointer-type GMenuAttributeIterClass* GMenuAttributeIterClass*-desc)

;; typedef struct _GMenuAttributeIter GMenuAttributeIter;
(define GMenuAttributeIter-desc void)
(export GMenuAttributeIter-desc)
(define GMenuAttributeIter*-desc (bs:pointer (delay GMenuAttributeIter-desc)))
(export GMenuAttributeIter*-desc)
(define-fh-pointer-type GMenuAttributeIter* GMenuAttributeIter*-desc)

;; typedef struct _GMenuLinkIterPrivate GMenuLinkIterPrivate;
(define GMenuLinkIterPrivate-desc void)
(export GMenuLinkIterPrivate-desc)
(define GMenuLinkIterPrivate*-desc (bs:pointer GMenuLinkIterPrivate-desc))
(export GMenuLinkIterPrivate*-desc)
(define-fh-pointer-type GMenuLinkIterPrivate* GMenuLinkIterPrivate*-desc)

;; typedef struct _GMenuLinkIterClass GMenuLinkIterClass;
(define GMenuLinkIterClass-desc void)
(export GMenuLinkIterClass-desc)
(define GMenuLinkIterClass*-desc (bs:pointer (delay GMenuLinkIterClass-desc)))
(export GMenuLinkIterClass*-desc)
(define-fh-pointer-type GMenuLinkIterClass* GMenuLinkIterClass*-desc)

;; typedef struct _GMenuLinkIter GMenuLinkIter;
(define GMenuLinkIter-desc void)
(export GMenuLinkIter-desc)
(define GMenuLinkIter*-desc (bs:pointer (delay GMenuLinkIter-desc)))
(export GMenuLinkIter*-desc)
(define-fh-pointer-type GMenuLinkIter* GMenuLinkIter*-desc)

;; struct _GMenuModel {
;;   GObject parent_instance;
;;   GMenuModelPrivate *priv;
;; };
(define struct-_GMenuModel-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GMenuModelPrivate*-desc))))))
(export struct-_GMenuModel-desc)
(define-fh-compound-type/p struct-_GMenuModel struct-_GMenuModel-desc)
(set! GMenuModel-desc struct-_GMenuModel-desc)
(define-fh-compound-type GMenuModel GMenuModel-desc)

;; struct _GMenuModelClass {
;;   GObjectClass parent_class;
;;   gboolean (*is_mutable)(GMenuModel *model);
;;   gint (*get_n_items)(GMenuModel *model);
;;   void (*get_item_attributes)(GMenuModel *model, gint item_index, GHashTable
;;        **attributes);
;;   GMenuAttributeIter *(*iterate_item_attributes)(GMenuModel *model, gint 
;;       item_index);
;;   GVariant *(*get_item_attribute_value)(GMenuModel *model, gint item_index, 
;;       const gchar *attribute, const GVariantType *expected_type);
;;   void (*get_item_links)(GMenuModel *model, gint item_index, GHashTable **
;;       links);
;;   GMenuLinkIter *(*iterate_item_links)(GMenuModel *model, gint item_index);
;;   GMenuModel *(*get_item_link)(GMenuModel *model, gint item_index, const 
;;       gchar *link);
;; };
(define struct-_GMenuModelClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(is_mutable ,(bs:pointer void))
          `(get_n_items ,(bs:pointer void))
          `(get_item_attributes ,(bs:pointer void))
          `(iterate_item_attributes ,(bs:pointer void))
          `(get_item_attribute_value ,(bs:pointer void))
          `(get_item_links ,(bs:pointer void))
          `(iterate_item_links ,(bs:pointer void))
          `(get_item_link ,(bs:pointer void)))))
(export struct-_GMenuModelClass-desc)
(define-fh-compound-type/p struct-_GMenuModelClass struct-_GMenuModelClass-desc)
(set! GMenuModelClass-desc struct-_GMenuModelClass-desc)
(define-fh-compound-type GMenuModelClass GMenuModelClass-desc)

;; extern GType g_menu_model_get_type(void);
(define ~g_menu_model_get_type #f)
(define (g_menu_model_get_type)
  (unless
    ~g_menu_model_get_type
    (set! ~g_menu_model_get_type
      (fh-link-proc
        "g_menu_model_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_menu_model_get_type)))
(export g_menu_model_get_type)

;; extern gboolean g_menu_model_is_mutable(GMenuModel *model);
(define ~g_menu_model_is_mutable #f)
(define (g_menu_model_is_mutable model)
  (unless
    ~g_menu_model_is_mutable
    (set! ~g_menu_model_is_mutable
      (fh-link-proc
        "g_menu_model_is_mutable"
        ffi:int
        (list '*))))
  (let ((~model (unwrap-GMenuModel* model)))
    (~g_menu_model_is_mutable ~model)))
(export g_menu_model_is_mutable)

;; extern gint g_menu_model_get_n_items(GMenuModel *model);
(define ~g_menu_model_get_n_items #f)
(define (g_menu_model_get_n_items model)
  (unless
    ~g_menu_model_get_n_items
    (set! ~g_menu_model_get_n_items
      (fh-link-proc
        "g_menu_model_get_n_items"
        ffi:int
        (list '*))))
  (let ((~model (unwrap-GMenuModel* model)))
    (~g_menu_model_get_n_items ~model)))
(export g_menu_model_get_n_items)

;; extern GMenuAttributeIter *g_menu_model_iterate_item_attributes(GMenuModel *
;;     model, gint item_index);
(define ~g_menu_model_iterate_item_attributes #f)
(define (g_menu_model_iterate_item_attributes
         model
         item_index)
  (unless
    ~g_menu_model_iterate_item_attributes
    (set! ~g_menu_model_iterate_item_attributes
      (fh-link-proc
        "g_menu_model_iterate_item_attributes"
        '*
        (list '* ffi:int))))
  (let ((~model (unwrap-GMenuModel* model))
        (~item_index (unwrap~fixed item_index)))
    (wrap-GMenuAttributeIter*
      (~g_menu_model_iterate_item_attributes
        ~model
        ~item_index))))
(export g_menu_model_iterate_item_attributes)

;; extern GVariant *g_menu_model_get_item_attribute_value(GMenuModel *model, 
;;     gint item_index, const gchar *attribute, const GVariantType *
;;     expected_type);
(define ~g_menu_model_get_item_attribute_value #f)
(define (g_menu_model_get_item_attribute_value
         model
         item_index
         attribute
         expected_type)
  (unless
    ~g_menu_model_get_item_attribute_value
    (set! ~g_menu_model_get_item_attribute_value
      (fh-link-proc
        "g_menu_model_get_item_attribute_value"
        '*
        (list '* ffi:int '* '*))))
  (let ((~model (unwrap-GMenuModel* model))
        (~item_index (unwrap~fixed item_index))
        (~attribute (unwrap~pointer attribute)))
    (~g_menu_model_get_item_attribute_value
      ~model
      ~item_index
      ~attribute
      expected_type)))
(export g_menu_model_get_item_attribute_value)

;; extern gboolean g_menu_model_get_item_attribute(GMenuModel *model, gint 
;;     item_index, const gchar *attribute, const gchar *format_string, ...);
;; ... failed.

;; extern GMenuLinkIter *g_menu_model_iterate_item_links(GMenuModel *model, 
;;     gint item_index);
(define ~g_menu_model_iterate_item_links #f)
(define (g_menu_model_iterate_item_links
         model
         item_index)
  (unless
    ~g_menu_model_iterate_item_links
    (set! ~g_menu_model_iterate_item_links
      (fh-link-proc
        "g_menu_model_iterate_item_links"
        '*
        (list '* ffi:int))))
  (let ((~model (unwrap-GMenuModel* model))
        (~item_index (unwrap~fixed item_index)))
    (wrap-GMenuLinkIter*
      (~g_menu_model_iterate_item_links
        ~model
        ~item_index))))
(export g_menu_model_iterate_item_links)

;; extern GMenuModel *g_menu_model_get_item_link(GMenuModel *model, gint 
;;     item_index, const gchar *link);
(define ~g_menu_model_get_item_link #f)
(define (g_menu_model_get_item_link
         model
         item_index
         link)
  (unless
    ~g_menu_model_get_item_link
    (set! ~g_menu_model_get_item_link
      (fh-link-proc
        "g_menu_model_get_item_link"
        '*
        (list '* ffi:int '*))))
  (let ((~model (unwrap-GMenuModel* model))
        (~item_index (unwrap~fixed item_index))
        (~link (unwrap~pointer link)))
    (wrap-GMenuModel*
      (~g_menu_model_get_item_link
        ~model
        ~item_index
        ~link))))
(export g_menu_model_get_item_link)

;; extern void g_menu_model_items_changed(GMenuModel *model, gint position, 
;;     gint removed, gint added);
(define ~g_menu_model_items_changed #f)
(define (g_menu_model_items_changed
         model
         position
         removed
         added)
  (unless
    ~g_menu_model_items_changed
    (set! ~g_menu_model_items_changed
      (fh-link-proc
        "g_menu_model_items_changed"
        ffi:void
        (list '* ffi:int ffi:int ffi:int))))
  (let ((~model (unwrap-GMenuModel* model))
        (~position (unwrap~fixed position))
        (~removed (unwrap~fixed removed))
        (~added (unwrap~fixed added)))
    (~g_menu_model_items_changed
      ~model
      ~position
      ~removed
      ~added)))
(export g_menu_model_items_changed)

;; struct _GMenuAttributeIter {
;;   GObject parent_instance;
;;   GMenuAttributeIterPrivate *priv;
;; };
(define struct-_GMenuAttributeIter-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer
                    (delay GMenuAttributeIterPrivate*-desc))))))
(export struct-_GMenuAttributeIter-desc)
(define-fh-compound-type/p struct-_GMenuAttributeIter struct-_GMenuAttributeIter-desc)
(set! GMenuAttributeIter-desc struct-_GMenuAttributeIter-desc)
(define-fh-compound-type GMenuAttributeIter GMenuAttributeIter-desc)

;; struct _GMenuAttributeIterClass {
;;   GObjectClass parent_class;
;;   gboolean (*get_next)(GMenuAttributeIter *iter, const gchar **out_name, 
;;       GVariant **value);
;; };
(define struct-_GMenuAttributeIterClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(get_next ,(bs:pointer void)))))
(export struct-_GMenuAttributeIterClass-desc)
(define-fh-compound-type/p struct-_GMenuAttributeIterClass struct-_GMenuAttributeIterClass-desc)
(set! GMenuAttributeIterClass-desc struct-_GMenuAttributeIterClass-desc)
(define-fh-compound-type GMenuAttributeIterClass GMenuAttributeIterClass-desc)

;; extern GType g_menu_attribute_iter_get_type(void);
(define ~g_menu_attribute_iter_get_type #f)
(define (g_menu_attribute_iter_get_type)
  (unless
    ~g_menu_attribute_iter_get_type
    (set! ~g_menu_attribute_iter_get_type
      (fh-link-proc
        "g_menu_attribute_iter_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_menu_attribute_iter_get_type)))
(export g_menu_attribute_iter_get_type)

;; extern gboolean g_menu_attribute_iter_get_next(GMenuAttributeIter *iter, 
;;     const gchar **out_name, GVariant **value);
(define ~g_menu_attribute_iter_get_next #f)
(define (g_menu_attribute_iter_get_next
         iter
         out_name
         value)
  (unless
    ~g_menu_attribute_iter_get_next
    (set! ~g_menu_attribute_iter_get_next
      (fh-link-proc
        "g_menu_attribute_iter_get_next"
        ffi:int
        (list '* '* '*))))
  (let ((~iter (unwrap-GMenuAttributeIter* iter))
        (~out_name (unwrap~pointer out_name))
        (~value (unwrap~pointer value)))
    (~g_menu_attribute_iter_get_next
      ~iter
      ~out_name
      ~value)))
(export g_menu_attribute_iter_get_next)

;; extern gboolean g_menu_attribute_iter_next(GMenuAttributeIter *iter);
(define ~g_menu_attribute_iter_next #f)
(define (g_menu_attribute_iter_next iter)
  (unless
    ~g_menu_attribute_iter_next
    (set! ~g_menu_attribute_iter_next
      (fh-link-proc
        "g_menu_attribute_iter_next"
        ffi:int
        (list '*))))
  (let ((~iter (unwrap-GMenuAttributeIter* iter)))
    (~g_menu_attribute_iter_next ~iter)))
(export g_menu_attribute_iter_next)

;; extern const gchar *g_menu_attribute_iter_get_name(GMenuAttributeIter *iter)
;;     ;
(define ~g_menu_attribute_iter_get_name #f)
(define (g_menu_attribute_iter_get_name iter)
  (unless
    ~g_menu_attribute_iter_get_name
    (set! ~g_menu_attribute_iter_get_name
      (fh-link-proc
        "g_menu_attribute_iter_get_name"
        '*
        (list '*))))
  (let ((~iter (unwrap-GMenuAttributeIter* iter)))
    (~g_menu_attribute_iter_get_name ~iter)))
(export g_menu_attribute_iter_get_name)

;; extern GVariant *g_menu_attribute_iter_get_value(GMenuAttributeIter *iter);
(define ~g_menu_attribute_iter_get_value #f)
(define (g_menu_attribute_iter_get_value iter)
  (unless
    ~g_menu_attribute_iter_get_value
    (set! ~g_menu_attribute_iter_get_value
      (fh-link-proc
        "g_menu_attribute_iter_get_value"
        '*
        (list '*))))
  (let ((~iter (unwrap-GMenuAttributeIter* iter)))
    (~g_menu_attribute_iter_get_value ~iter)))
(export g_menu_attribute_iter_get_value)

;; struct _GMenuLinkIter {
;;   GObject parent_instance;
;;   GMenuLinkIterPrivate *priv;
;; };
(define struct-_GMenuLinkIter-desc
  (bs:struct
    (list `(parent_instance
             ,(bs:struct
                (list `(g_type_instance
                         ,(bs:struct (list `(g_class ,(bs:pointer void)))))
                      `(ref_count ,unsigned-int)
                      `(qdata ,(bs:pointer (delay GData*-desc))))))
          `(priv ,(bs:pointer (delay GMenuLinkIterPrivate*-desc))))))
(export struct-_GMenuLinkIter-desc)
(define-fh-compound-type/p struct-_GMenuLinkIter struct-_GMenuLinkIter-desc)
(set! GMenuLinkIter-desc struct-_GMenuLinkIter-desc)
(define-fh-compound-type GMenuLinkIter GMenuLinkIter-desc)

;; struct _GMenuLinkIterClass {
;;   GObjectClass parent_class;
;;   gboolean (*get_next)(GMenuLinkIter *iter, const gchar **out_link, 
;;       GMenuModel **value);
;; };
(define struct-_GMenuLinkIterClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc)))))
          `(get_next ,(bs:pointer void)))))
(export struct-_GMenuLinkIterClass-desc)
(define-fh-compound-type/p struct-_GMenuLinkIterClass struct-_GMenuLinkIterClass-desc)
(set! GMenuLinkIterClass-desc struct-_GMenuLinkIterClass-desc)
(define-fh-compound-type GMenuLinkIterClass GMenuLinkIterClass-desc)

;; extern GType g_menu_link_iter_get_type(void);
(define ~g_menu_link_iter_get_type #f)
(define (g_menu_link_iter_get_type)
  (unless
    ~g_menu_link_iter_get_type
    (set! ~g_menu_link_iter_get_type
      (fh-link-proc
        "g_menu_link_iter_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_menu_link_iter_get_type)))
(export g_menu_link_iter_get_type)

;; extern gboolean g_menu_link_iter_get_next(GMenuLinkIter *iter, const gchar *
;;     *out_link, GMenuModel **value);
(define ~g_menu_link_iter_get_next #f)
(define (g_menu_link_iter_get_next iter out_link value)
  (unless
    ~g_menu_link_iter_get_next
    (set! ~g_menu_link_iter_get_next
      (fh-link-proc
        "g_menu_link_iter_get_next"
        ffi:int
        (list '* '* '*))))
  (let ((~iter (unwrap-GMenuLinkIter* iter))
        (~out_link (unwrap~pointer out_link))
        (~value (unwrap~pointer value)))
    (~g_menu_link_iter_get_next
      ~iter
      ~out_link
      ~value)))
(export g_menu_link_iter_get_next)

;; extern gboolean g_menu_link_iter_next(GMenuLinkIter *iter);
(define ~g_menu_link_iter_next #f)
(define (g_menu_link_iter_next iter)
  (unless
    ~g_menu_link_iter_next
    (set! ~g_menu_link_iter_next
      (fh-link-proc
        "g_menu_link_iter_next"
        ffi:int
        (list '*))))
  (let ((~iter (unwrap-GMenuLinkIter* iter)))
    (~g_menu_link_iter_next ~iter)))
(export g_menu_link_iter_next)

;; extern const gchar *g_menu_link_iter_get_name(GMenuLinkIter *iter);
(define ~g_menu_link_iter_get_name #f)
(define (g_menu_link_iter_get_name iter)
  (unless
    ~g_menu_link_iter_get_name
    (set! ~g_menu_link_iter_get_name
      (fh-link-proc
        "g_menu_link_iter_get_name"
        '*
        (list '*))))
  (let ((~iter (unwrap-GMenuLinkIter* iter)))
    (~g_menu_link_iter_get_name ~iter)))
(export g_menu_link_iter_get_name)

;; extern GMenuModel *g_menu_link_iter_get_value(GMenuLinkIter *iter);
(define ~g_menu_link_iter_get_value #f)
(define (g_menu_link_iter_get_value iter)
  (unless
    ~g_menu_link_iter_get_value
    (set! ~g_menu_link_iter_get_value
      (fh-link-proc
        "g_menu_link_iter_get_value"
        '*
        (list '*))))
  (let ((~iter (unwrap-GMenuLinkIter* iter)))
    (wrap-GMenuModel*
      (~g_menu_link_iter_get_value ~iter))))
(export g_menu_link_iter_get_value)

;; typedef struct _GMenuItem GMenuItem;
(define GMenuItem-desc void)
(export GMenuItem-desc)
(define GMenuItem*-desc (bs:pointer GMenuItem-desc))
(export GMenuItem*-desc)
(define-fh-pointer-type GMenuItem* GMenuItem*-desc)

;; typedef struct _GMenu GMenu;
(define GMenu-desc void)
(export GMenu-desc)
(define GMenu*-desc (bs:pointer GMenu-desc))
(export GMenu*-desc)
(define-fh-pointer-type GMenu* GMenu*-desc)

;; extern GType g_menu_get_type(void);
(define ~g_menu_get_type #f)
(define (g_menu_get_type)
  (unless
    ~g_menu_get_type
    (set! ~g_menu_get_type
      (fh-link-proc
        "g_menu_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_menu_get_type)))
(export g_menu_get_type)

;; extern GMenu *g_menu_new(void);
(define ~g_menu_new #f)
(define (g_menu_new)
  (unless
    ~g_menu_new
    (set! ~g_menu_new
      (fh-link-proc "g_menu_new" '* (list))))
  (let () (wrap-GMenu* (~g_menu_new))))
(export g_menu_new)

;; extern void g_menu_freeze(GMenu *menu);
(define ~g_menu_freeze #f)
(define (g_menu_freeze menu)
  (unless
    ~g_menu_freeze
    (set! ~g_menu_freeze
      (fh-link-proc "g_menu_freeze" ffi:void (list '*))))
  (let ((~menu (unwrap-GMenu* menu)))
    (~g_menu_freeze ~menu)))
(export g_menu_freeze)

;; extern void g_menu_insert_item(GMenu *menu, gint position, GMenuItem *item)
;;     ;
(define ~g_menu_insert_item #f)
(define (g_menu_insert_item menu position item)
  (unless
    ~g_menu_insert_item
    (set! ~g_menu_insert_item
      (fh-link-proc
        "g_menu_insert_item"
        ffi:void
        (list '* ffi:int '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~position (unwrap~fixed position))
        (~item (unwrap-GMenuItem* item)))
    (~g_menu_insert_item ~menu ~position ~item)))
(export g_menu_insert_item)

;; extern void g_menu_prepend_item(GMenu *menu, GMenuItem *item);
(define ~g_menu_prepend_item #f)
(define (g_menu_prepend_item menu item)
  (unless
    ~g_menu_prepend_item
    (set! ~g_menu_prepend_item
      (fh-link-proc
        "g_menu_prepend_item"
        ffi:void
        (list '* '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~item (unwrap-GMenuItem* item)))
    (~g_menu_prepend_item ~menu ~item)))
(export g_menu_prepend_item)

;; extern void g_menu_append_item(GMenu *menu, GMenuItem *item);
(define ~g_menu_append_item #f)
(define (g_menu_append_item menu item)
  (unless
    ~g_menu_append_item
    (set! ~g_menu_append_item
      (fh-link-proc
        "g_menu_append_item"
        ffi:void
        (list '* '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~item (unwrap-GMenuItem* item)))
    (~g_menu_append_item ~menu ~item)))
(export g_menu_append_item)

;; extern void g_menu_remove(GMenu *menu, gint position);
(define ~g_menu_remove #f)
(define (g_menu_remove menu position)
  (unless
    ~g_menu_remove
    (set! ~g_menu_remove
      (fh-link-proc
        "g_menu_remove"
        ffi:void
        (list '* ffi:int))))
  (let ((~menu (unwrap-GMenu* menu))
        (~position (unwrap~fixed position)))
    (~g_menu_remove ~menu ~position)))
(export g_menu_remove)

;; extern void g_menu_remove_all(GMenu *menu);
(define ~g_menu_remove_all #f)
(define (g_menu_remove_all menu)
  (unless
    ~g_menu_remove_all
    (set! ~g_menu_remove_all
      (fh-link-proc
        "g_menu_remove_all"
        ffi:void
        (list '*))))
  (let ((~menu (unwrap-GMenu* menu)))
    (~g_menu_remove_all ~menu)))
(export g_menu_remove_all)

;; extern void g_menu_insert(GMenu *menu, gint position, const gchar *label, 
;;     const gchar *detailed_action);
(define ~g_menu_insert #f)
(define (g_menu_insert
         menu
         position
         label
         detailed_action)
  (unless
    ~g_menu_insert
    (set! ~g_menu_insert
      (fh-link-proc
        "g_menu_insert"
        ffi:void
        (list '* ffi:int '* '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~position (unwrap~fixed position))
        (~label (unwrap~pointer label))
        (~detailed_action
          (unwrap~pointer detailed_action)))
    (~g_menu_insert
      ~menu
      ~position
      ~label
      ~detailed_action)))
(export g_menu_insert)

;; extern void g_menu_prepend(GMenu *menu, const gchar *label, const gchar *
;;     detailed_action);
(define ~g_menu_prepend #f)
(define (g_menu_prepend menu label detailed_action)
  (unless
    ~g_menu_prepend
    (set! ~g_menu_prepend
      (fh-link-proc
        "g_menu_prepend"
        ffi:void
        (list '* '* '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~label (unwrap~pointer label))
        (~detailed_action
          (unwrap~pointer detailed_action)))
    (~g_menu_prepend ~menu ~label ~detailed_action)))
(export g_menu_prepend)

;; extern void g_menu_append(GMenu *menu, const gchar *label, const gchar *
;;     detailed_action);
(define ~g_menu_append #f)
(define (g_menu_append menu label detailed_action)
  (unless
    ~g_menu_append
    (set! ~g_menu_append
      (fh-link-proc
        "g_menu_append"
        ffi:void
        (list '* '* '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~label (unwrap~pointer label))
        (~detailed_action
          (unwrap~pointer detailed_action)))
    (~g_menu_append ~menu ~label ~detailed_action)))
(export g_menu_append)

;; extern void g_menu_insert_section(GMenu *menu, gint position, const gchar *
;;     label, GMenuModel *section);
(define ~g_menu_insert_section #f)
(define (g_menu_insert_section
         menu
         position
         label
         section)
  (unless
    ~g_menu_insert_section
    (set! ~g_menu_insert_section
      (fh-link-proc
        "g_menu_insert_section"
        ffi:void
        (list '* ffi:int '* '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~position (unwrap~fixed position))
        (~label (unwrap~pointer label))
        (~section (unwrap-GMenuModel* section)))
    (~g_menu_insert_section
      ~menu
      ~position
      ~label
      ~section)))
(export g_menu_insert_section)

;; extern void g_menu_prepend_section(GMenu *menu, const gchar *label, 
;;     GMenuModel *section);
(define ~g_menu_prepend_section #f)
(define (g_menu_prepend_section menu label section)
  (unless
    ~g_menu_prepend_section
    (set! ~g_menu_prepend_section
      (fh-link-proc
        "g_menu_prepend_section"
        ffi:void
        (list '* '* '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~label (unwrap~pointer label))
        (~section (unwrap-GMenuModel* section)))
    (~g_menu_prepend_section ~menu ~label ~section)))
(export g_menu_prepend_section)

;; extern void g_menu_append_section(GMenu *menu, const gchar *label, 
;;     GMenuModel *section);
(define ~g_menu_append_section #f)
(define (g_menu_append_section menu label section)
  (unless
    ~g_menu_append_section
    (set! ~g_menu_append_section
      (fh-link-proc
        "g_menu_append_section"
        ffi:void
        (list '* '* '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~label (unwrap~pointer label))
        (~section (unwrap-GMenuModel* section)))
    (~g_menu_append_section ~menu ~label ~section)))
(export g_menu_append_section)

;; extern void g_menu_insert_submenu(GMenu *menu, gint position, const gchar *
;;     label, GMenuModel *submenu);
(define ~g_menu_insert_submenu #f)
(define (g_menu_insert_submenu
         menu
         position
         label
         submenu)
  (unless
    ~g_menu_insert_submenu
    (set! ~g_menu_insert_submenu
      (fh-link-proc
        "g_menu_insert_submenu"
        ffi:void
        (list '* ffi:int '* '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~position (unwrap~fixed position))
        (~label (unwrap~pointer label))
        (~submenu (unwrap-GMenuModel* submenu)))
    (~g_menu_insert_submenu
      ~menu
      ~position
      ~label
      ~submenu)))
(export g_menu_insert_submenu)

;; extern void g_menu_prepend_submenu(GMenu *menu, const gchar *label, 
;;     GMenuModel *submenu);
(define ~g_menu_prepend_submenu #f)
(define (g_menu_prepend_submenu menu label submenu)
  (unless
    ~g_menu_prepend_submenu
    (set! ~g_menu_prepend_submenu
      (fh-link-proc
        "g_menu_prepend_submenu"
        ffi:void
        (list '* '* '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~label (unwrap~pointer label))
        (~submenu (unwrap-GMenuModel* submenu)))
    (~g_menu_prepend_submenu ~menu ~label ~submenu)))
(export g_menu_prepend_submenu)

;; extern void g_menu_append_submenu(GMenu *menu, const gchar *label, 
;;     GMenuModel *submenu);
(define ~g_menu_append_submenu #f)
(define (g_menu_append_submenu menu label submenu)
  (unless
    ~g_menu_append_submenu
    (set! ~g_menu_append_submenu
      (fh-link-proc
        "g_menu_append_submenu"
        ffi:void
        (list '* '* '*))))
  (let ((~menu (unwrap-GMenu* menu))
        (~label (unwrap~pointer label))
        (~submenu (unwrap-GMenuModel* submenu)))
    (~g_menu_append_submenu ~menu ~label ~submenu)))
(export g_menu_append_submenu)

;; extern GType g_menu_item_get_type(void);
(define ~g_menu_item_get_type #f)
(define (g_menu_item_get_type)
  (unless
    ~g_menu_item_get_type
    (set! ~g_menu_item_get_type
      (fh-link-proc
        "g_menu_item_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_menu_item_get_type)))
(export g_menu_item_get_type)

;; extern GMenuItem *g_menu_item_new(const gchar *label, const gchar *
;;     detailed_action);
(define ~g_menu_item_new #f)
(define (g_menu_item_new label detailed_action)
  (unless
    ~g_menu_item_new
    (set! ~g_menu_item_new
      (fh-link-proc "g_menu_item_new" '* (list '* '*))))
  (let ((~label (unwrap~pointer label))
        (~detailed_action
          (unwrap~pointer detailed_action)))
    (wrap-GMenuItem*
      (~g_menu_item_new ~label ~detailed_action))))
(export g_menu_item_new)

;; extern GMenuItem *g_menu_item_new_from_model(GMenuModel *model, gint 
;;     item_index);
(define ~g_menu_item_new_from_model #f)
(define (g_menu_item_new_from_model model item_index)
  (unless
    ~g_menu_item_new_from_model
    (set! ~g_menu_item_new_from_model
      (fh-link-proc
        "g_menu_item_new_from_model"
        '*
        (list '* ffi:int))))
  (let ((~model (unwrap-GMenuModel* model))
        (~item_index (unwrap~fixed item_index)))
    (wrap-GMenuItem*
      (~g_menu_item_new_from_model ~model ~item_index))))
(export g_menu_item_new_from_model)

;; extern GMenuItem *g_menu_item_new_submenu(const gchar *label, GMenuModel *
;;     submenu);
(define ~g_menu_item_new_submenu #f)
(define (g_menu_item_new_submenu label submenu)
  (unless
    ~g_menu_item_new_submenu
    (set! ~g_menu_item_new_submenu
      (fh-link-proc
        "g_menu_item_new_submenu"
        '*
        (list '* '*))))
  (let ((~label (unwrap~pointer label))
        (~submenu (unwrap-GMenuModel* submenu)))
    (wrap-GMenuItem*
      (~g_menu_item_new_submenu ~label ~submenu))))
(export g_menu_item_new_submenu)

;; extern GMenuItem *g_menu_item_new_section(const gchar *label, GMenuModel *
;;     section);
(define ~g_menu_item_new_section #f)
(define (g_menu_item_new_section label section)
  (unless
    ~g_menu_item_new_section
    (set! ~g_menu_item_new_section
      (fh-link-proc
        "g_menu_item_new_section"
        '*
        (list '* '*))))
  (let ((~label (unwrap~pointer label))
        (~section (unwrap-GMenuModel* section)))
    (wrap-GMenuItem*
      (~g_menu_item_new_section ~label ~section))))
(export g_menu_item_new_section)

;; extern GVariant *g_menu_item_get_attribute_value(GMenuItem *menu_item, const
;;      gchar *attribute, const GVariantType *expected_type);
(define ~g_menu_item_get_attribute_value #f)
(define (g_menu_item_get_attribute_value
         menu_item
         attribute
         expected_type)
  (unless
    ~g_menu_item_get_attribute_value
    (set! ~g_menu_item_get_attribute_value
      (fh-link-proc
        "g_menu_item_get_attribute_value"
        '*
        (list '* '* '*))))
  (let ((~menu_item (unwrap-GMenuItem* menu_item))
        (~attribute (unwrap~pointer attribute)))
    (~g_menu_item_get_attribute_value
      ~menu_item
      ~attribute
      expected_type)))
(export g_menu_item_get_attribute_value)

;; extern gboolean g_menu_item_get_attribute(GMenuItem *menu_item, const gchar 
;;     *attribute, const gchar *format_string, ...);
;; ... failed.

;; extern GMenuModel *g_menu_item_get_link(GMenuItem *menu_item, const gchar *
;;     link);
(define ~g_menu_item_get_link #f)
(define (g_menu_item_get_link menu_item link)
  (unless
    ~g_menu_item_get_link
    (set! ~g_menu_item_get_link
      (fh-link-proc
        "g_menu_item_get_link"
        '*
        (list '* '*))))
  (let ((~menu_item (unwrap-GMenuItem* menu_item))
        (~link (unwrap~pointer link)))
    (wrap-GMenuModel*
      (~g_menu_item_get_link ~menu_item ~link))))
(export g_menu_item_get_link)

;; extern void g_menu_item_set_attribute_value(GMenuItem *menu_item, const 
;;     gchar *attribute, GVariant *value);
(define ~g_menu_item_set_attribute_value #f)
(define (g_menu_item_set_attribute_value
         menu_item
         attribute
         value)
  (unless
    ~g_menu_item_set_attribute_value
    (set! ~g_menu_item_set_attribute_value
      (fh-link-proc
        "g_menu_item_set_attribute_value"
        ffi:void
        (list '* '* '*))))
  (let ((~menu_item (unwrap-GMenuItem* menu_item))
        (~attribute (unwrap~pointer attribute)))
    (~g_menu_item_set_attribute_value
      ~menu_item
      ~attribute
      value)))
(export g_menu_item_set_attribute_value)

;; extern void g_menu_item_set_attribute(GMenuItem *menu_item, const gchar *
;;     attribute, const gchar *format_string, ...);
;; ... failed.

;; extern void g_menu_item_set_link(GMenuItem *menu_item, const gchar *link, 
;;     GMenuModel *model);
(define ~g_menu_item_set_link #f)
(define (g_menu_item_set_link menu_item link model)
  (unless
    ~g_menu_item_set_link
    (set! ~g_menu_item_set_link
      (fh-link-proc
        "g_menu_item_set_link"
        ffi:void
        (list '* '* '*))))
  (let ((~menu_item (unwrap-GMenuItem* menu_item))
        (~link (unwrap~pointer link))
        (~model (unwrap-GMenuModel* model)))
    (~g_menu_item_set_link ~menu_item ~link ~model)))
(export g_menu_item_set_link)

;; extern void g_menu_item_set_label(GMenuItem *menu_item, const gchar *label)
;;     ;
(define ~g_menu_item_set_label #f)
(define (g_menu_item_set_label menu_item label)
  (unless
    ~g_menu_item_set_label
    (set! ~g_menu_item_set_label
      (fh-link-proc
        "g_menu_item_set_label"
        ffi:void
        (list '* '*))))
  (let ((~menu_item (unwrap-GMenuItem* menu_item))
        (~label (unwrap~pointer label)))
    (~g_menu_item_set_label ~menu_item ~label)))
(export g_menu_item_set_label)

;; extern void g_menu_item_set_submenu(GMenuItem *menu_item, GMenuModel *
;;     submenu);
(define ~g_menu_item_set_submenu #f)
(define (g_menu_item_set_submenu menu_item submenu)
  (unless
    ~g_menu_item_set_submenu
    (set! ~g_menu_item_set_submenu
      (fh-link-proc
        "g_menu_item_set_submenu"
        ffi:void
        (list '* '*))))
  (let ((~menu_item (unwrap-GMenuItem* menu_item))
        (~submenu (unwrap-GMenuModel* submenu)))
    (~g_menu_item_set_submenu ~menu_item ~submenu)))
(export g_menu_item_set_submenu)

;; extern void g_menu_item_set_section(GMenuItem *menu_item, GMenuModel *
;;     section);
(define ~g_menu_item_set_section #f)
(define (g_menu_item_set_section menu_item section)
  (unless
    ~g_menu_item_set_section
    (set! ~g_menu_item_set_section
      (fh-link-proc
        "g_menu_item_set_section"
        ffi:void
        (list '* '*))))
  (let ((~menu_item (unwrap-GMenuItem* menu_item))
        (~section (unwrap-GMenuModel* section)))
    (~g_menu_item_set_section ~menu_item ~section)))
(export g_menu_item_set_section)

;; extern void g_menu_item_set_action_and_target_value(GMenuItem *menu_item, 
;;     const gchar *action, GVariant *target_value);
(define ~g_menu_item_set_action_and_target_value #f)
(define (g_menu_item_set_action_and_target_value
         menu_item
         action
         target_value)
  (unless
    ~g_menu_item_set_action_and_target_value
    (set! ~g_menu_item_set_action_and_target_value
      (fh-link-proc
        "g_menu_item_set_action_and_target_value"
        ffi:void
        (list '* '* '*))))
  (let ((~menu_item (unwrap-GMenuItem* menu_item))
        (~action (unwrap~pointer action)))
    (~g_menu_item_set_action_and_target_value
      ~menu_item
      ~action
      target_value)))
(export g_menu_item_set_action_and_target_value)

;; extern void g_menu_item_set_action_and_target(GMenuItem *menu_item, const 
;;     gchar *action, const gchar *format_string, ...);
;; ... failed.

;; extern void g_menu_item_set_detailed_action(GMenuItem *menu_item, const 
;;     gchar *detailed_action);
(define ~g_menu_item_set_detailed_action #f)
(define (g_menu_item_set_detailed_action
         menu_item
         detailed_action)
  (unless
    ~g_menu_item_set_detailed_action
    (set! ~g_menu_item_set_detailed_action
      (fh-link-proc
        "g_menu_item_set_detailed_action"
        ffi:void
        (list '* '*))))
  (let ((~menu_item (unwrap-GMenuItem* menu_item))
        (~detailed_action
          (unwrap~pointer detailed_action)))
    (~g_menu_item_set_detailed_action
      ~menu_item
      ~detailed_action)))
(export g_menu_item_set_detailed_action)

;; extern void g_menu_item_set_icon(GMenuItem *menu_item, GIcon *icon);
(define ~g_menu_item_set_icon #f)
(define (g_menu_item_set_icon menu_item icon)
  (unless
    ~g_menu_item_set_icon
    (set! ~g_menu_item_set_icon
      (fh-link-proc
        "g_menu_item_set_icon"
        ffi:void
        (list '* '*))))
  (let ((~menu_item (unwrap-GMenuItem* menu_item))
        (~icon (unwrap-GIcon* icon)))
    (~g_menu_item_set_icon ~menu_item ~icon)))
(export g_menu_item_set_icon)

;; extern guint g_dbus_connection_export_menu_model(GDBusConnection *connection
;;     , const gchar *object_path, GMenuModel *menu, GError **error);
(define ~g_dbus_connection_export_menu_model #f)
(define (g_dbus_connection_export_menu_model
         connection
         object_path
         menu
         error)
  (unless
    ~g_dbus_connection_export_menu_model
    (set! ~g_dbus_connection_export_menu_model
      (fh-link-proc
        "g_dbus_connection_export_menu_model"
        ffi:unsigned-int
        (list '* '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~object_path (unwrap~pointer object_path))
        (~menu (unwrap-GMenuModel* menu))
        (~error (unwrap~pointer error)))
    (~g_dbus_connection_export_menu_model
      ~connection
      ~object_path
      ~menu
      ~error)))
(export g_dbus_connection_export_menu_model)

;; extern void g_dbus_connection_unexport_menu_model(GDBusConnection *
;;     connection, guint export_id);
(define ~g_dbus_connection_unexport_menu_model #f)
(define (g_dbus_connection_unexport_menu_model
         connection
         export_id)
  (unless
    ~g_dbus_connection_unexport_menu_model
    (set! ~g_dbus_connection_unexport_menu_model
      (fh-link-proc
        "g_dbus_connection_unexport_menu_model"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~export_id (unwrap~fixed export_id)))
    (~g_dbus_connection_unexport_menu_model
      ~connection
      ~export_id)))
(export g_dbus_connection_unexport_menu_model)

;; typedef struct _GDBusMenuModel GDBusMenuModel;
(define GDBusMenuModel-desc void)
(export GDBusMenuModel-desc)
(define GDBusMenuModel*-desc (bs:pointer GDBusMenuModel-desc))
(export GDBusMenuModel*-desc)
(define-fh-pointer-type GDBusMenuModel* GDBusMenuModel*-desc)

;; extern GType g_dbus_menu_model_get_type(void);
(define ~g_dbus_menu_model_get_type #f)
(define (g_dbus_menu_model_get_type)
  (unless
    ~g_dbus_menu_model_get_type
    (set! ~g_dbus_menu_model_get_type
      (fh-link-proc
        "g_dbus_menu_model_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_dbus_menu_model_get_type)))
(export g_dbus_menu_model_get_type)

;; extern GDBusMenuModel *g_dbus_menu_model_get(GDBusConnection *connection, 
;;     const gchar *bus_name, const gchar *object_path);
(define ~g_dbus_menu_model_get #f)
(define (g_dbus_menu_model_get
         connection
         bus_name
         object_path)
  (unless
    ~g_dbus_menu_model_get
    (set! ~g_dbus_menu_model_get
      (fh-link-proc
        "g_dbus_menu_model_get"
        '*
        (list '* '* '*))))
  (let ((~connection
          (unwrap-GDBusConnection* connection))
        (~bus_name (unwrap~pointer bus_name))
        (~object_path (unwrap~pointer object_path)))
    (wrap-GDBusMenuModel*
      (~g_dbus_menu_model_get
        ~connection
        ~bus_name
        ~object_path))))
(export g_dbus_menu_model_get)

;; extern GType g_notification_get_type(void);
(define ~g_notification_get_type #f)
(define (g_notification_get_type)
  (unless
    ~g_notification_get_type
    (set! ~g_notification_get_type
      (fh-link-proc
        "g_notification_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_notification_get_type)))
(export g_notification_get_type)

;; extern GNotification *g_notification_new(const gchar *title);
(define ~g_notification_new #f)
(define (g_notification_new title)
  (unless
    ~g_notification_new
    (set! ~g_notification_new
      (fh-link-proc "g_notification_new" '* (list '*))))
  (let ((~title (unwrap~pointer title)))
    (wrap-GNotification*
      (~g_notification_new ~title))))
(export g_notification_new)

;; extern void g_notification_set_title(GNotification *notification, const 
;;     gchar *title);
(define ~g_notification_set_title #f)
(define (g_notification_set_title notification title)
  (unless
    ~g_notification_set_title
    (set! ~g_notification_set_title
      (fh-link-proc
        "g_notification_set_title"
        ffi:void
        (list '* '*))))
  (let ((~notification
          (unwrap-GNotification* notification))
        (~title (unwrap~pointer title)))
    (~g_notification_set_title ~notification ~title)))
(export g_notification_set_title)

;; extern void g_notification_set_body(GNotification *notification, const gchar
;;      *body);
(define ~g_notification_set_body #f)
(define (g_notification_set_body notification body)
  (unless
    ~g_notification_set_body
    (set! ~g_notification_set_body
      (fh-link-proc
        "g_notification_set_body"
        ffi:void
        (list '* '*))))
  (let ((~notification
          (unwrap-GNotification* notification))
        (~body (unwrap~pointer body)))
    (~g_notification_set_body ~notification ~body)))
(export g_notification_set_body)

;; extern void g_notification_set_icon(GNotification *notification, GIcon *icon
;;     );
(define ~g_notification_set_icon #f)
(define (g_notification_set_icon notification icon)
  (unless
    ~g_notification_set_icon
    (set! ~g_notification_set_icon
      (fh-link-proc
        "g_notification_set_icon"
        ffi:void
        (list '* '*))))
  (let ((~notification
          (unwrap-GNotification* notification))
        (~icon (unwrap-GIcon* icon)))
    (~g_notification_set_icon ~notification ~icon)))
(export g_notification_set_icon)

;; extern void g_notification_set_urgent(GNotification *notification, gboolean 
;;     urgent);
(define ~g_notification_set_urgent #f)
(define (g_notification_set_urgent notification urgent)
  (unless
    ~g_notification_set_urgent
    (set! ~g_notification_set_urgent
      (fh-link-proc
        "g_notification_set_urgent"
        ffi:void
        (list '* ffi:int))))
  (let ((~notification
          (unwrap-GNotification* notification))
        (~urgent (unwrap~fixed urgent)))
    (~g_notification_set_urgent
      ~notification
      ~urgent)))
(export g_notification_set_urgent)

;; extern void g_notification_set_priority(GNotification *notification, 
;;     GNotificationPriority priority);
(define ~g_notification_set_priority #f)
(define (g_notification_set_priority
         notification
         priority)
  (unless
    ~g_notification_set_priority
    (set! ~g_notification_set_priority
      (fh-link-proc
        "g_notification_set_priority"
        ffi:void
        (list '* ffi:int))))
  (let ((~notification
          (unwrap-GNotification* notification))
        (~priority (unwrap~fixed priority)))
    (~g_notification_set_priority
      ~notification
      ~priority)))
(export g_notification_set_priority)

;; extern void g_notification_add_button(GNotification *notification, const 
;;     gchar *label, const gchar *detailed_action);
(define ~g_notification_add_button #f)
(define (g_notification_add_button
         notification
         label
         detailed_action)
  (unless
    ~g_notification_add_button
    (set! ~g_notification_add_button
      (fh-link-proc
        "g_notification_add_button"
        ffi:void
        (list '* '* '*))))
  (let ((~notification
          (unwrap-GNotification* notification))
        (~label (unwrap~pointer label))
        (~detailed_action
          (unwrap~pointer detailed_action)))
    (~g_notification_add_button
      ~notification
      ~label
      ~detailed_action)))
(export g_notification_add_button)

;; extern void g_notification_add_button_with_target(GNotification *
;;     notification, const gchar *label, const gchar *action, const gchar *
;;     target_format, ...);
;; ... failed.

;; extern void g_notification_add_button_with_target_value(GNotification *
;;     notification, const gchar *label, const gchar *action, GVariant *target)
;;     ;
(define ~g_notification_add_button_with_target_value #f)
(define (g_notification_add_button_with_target_value
         notification
         label
         action
         target)
  (unless
    ~g_notification_add_button_with_target_value
    (set! ~g_notification_add_button_with_target_value
      (fh-link-proc
        "g_notification_add_button_with_target_value"
        ffi:void
        (list '* '* '* '*))))
  (let ((~notification
          (unwrap-GNotification* notification))
        (~label (unwrap~pointer label))
        (~action (unwrap~pointer action)))
    (~g_notification_add_button_with_target_value
      ~notification
      ~label
      ~action
      target)))
(export g_notification_add_button_with_target_value)

;; extern void g_notification_set_default_action(GNotification *notification, 
;;     const gchar *detailed_action);
(define ~g_notification_set_default_action #f)
(define (g_notification_set_default_action
         notification
         detailed_action)
  (unless
    ~g_notification_set_default_action
    (set! ~g_notification_set_default_action
      (fh-link-proc
        "g_notification_set_default_action"
        ffi:void
        (list '* '*))))
  (let ((~notification
          (unwrap-GNotification* notification))
        (~detailed_action
          (unwrap~pointer detailed_action)))
    (~g_notification_set_default_action
      ~notification
      ~detailed_action)))
(export g_notification_set_default_action)

;; extern void g_notification_set_default_action_and_target(GNotification *
;;     notification, const gchar *action, const gchar *target_format, ...);
;; ... failed.

;; extern void g_notification_set_default_action_and_target_value(GNotification
;;      *notification, const gchar *action, GVariant *target);
(define ~g_notification_set_default_action_and_target_value #f)
(define (g_notification_set_default_action_and_target_value
         notification
         action
         target)
  (unless
    ~g_notification_set_default_action_and_target_value
    (set! ~g_notification_set_default_action_and_target_value
      (fh-link-proc
        "g_notification_set_default_action_and_target_value"
        ffi:void
        (list '* '* '*))))
  (let ((~notification
          (unwrap-GNotification* notification))
        (~action (unwrap~pointer action)))
    (~g_notification_set_default_action_and_target_value
      ~notification
      ~action
      target)))
(export g_notification_set_default_action_and_target_value)

;; extern GType g_list_model_get_type(void);
(define ~g_list_model_get_type #f)
(define (g_list_model_get_type)
  (unless
    ~g_list_model_get_type
    (set! ~g_list_model_get_type
      (fh-link-proc
        "g_list_model_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_list_model_get_type)))
(export g_list_model_get_type)

;; typedef struct _GListModel GListModel;
(define GListModel-desc void)
(export GListModel-desc)
(define GListModel*-desc (bs:pointer GListModel-desc))
(export GListModel*-desc)
(define-fh-pointer-type GListModel* GListModel*-desc)

;; typedef struct _GListModelInterface GListModelInterface;
(define GListModelInterface-desc void)
(export GListModelInterface-desc)
(define GListModelInterface*-desc (bs:pointer (delay GListModelInterface-desc)))
(export GListModelInterface*-desc)
(define-fh-pointer-type GListModelInterface* GListModelInterface*-desc)

;; typedef GListModel *GListModel_autoptr;
(define GListModel_autoptr-desc (bs:pointer GListModel-desc))
(export GListModel_autoptr-desc)
(define-fh-pointer-type GListModel_autoptr GListModel_autoptr-desc)

;; struct _GListModelInterface {
;;   GTypeInterface g_iface;
;;   GType (*get_item_type)(GListModel *list);
;;   guint (*get_n_items)(GListModel *list);
;;   gpointer (*get_item)(GListModel *list, guint position);
;; };
(define struct-_GListModelInterface-desc
  (bs:struct
    (list `(g_iface
             ,(bs:struct
                (list `(g_type ,unsigned-long)
                      `(g_instance_type ,unsigned-long))))
          `(get_item_type ,(bs:pointer void))
          `(get_n_items ,(bs:pointer void))
          `(get_item ,(bs:pointer void)))))
(export struct-_GListModelInterface-desc)
(define-fh-compound-type/p struct-_GListModelInterface struct-_GListModelInterface-desc)
(set! GListModelInterface-desc struct-_GListModelInterface-desc)
(define-fh-compound-type GListModelInterface GListModelInterface-desc)

;; extern GType g_list_model_get_item_type(GListModel *list);
(define ~g_list_model_get_item_type #f)
(define (g_list_model_get_item_type list)
  (unless
    ~g_list_model_get_item_type
    (set! ~g_list_model_get_item_type
      (fh-link-proc
        "g_list_model_get_item_type"
        ffi:unsigned-long
        (list '*))))
  (let ((~list (unwrap-GListModel* list)))
    (~g_list_model_get_item_type ~list)))
(export g_list_model_get_item_type)

;; extern guint g_list_model_get_n_items(GListModel *list);
(define ~g_list_model_get_n_items #f)
(define (g_list_model_get_n_items list)
  (unless
    ~g_list_model_get_n_items
    (set! ~g_list_model_get_n_items
      (fh-link-proc
        "g_list_model_get_n_items"
        ffi:unsigned-int
        (list '*))))
  (let ((~list (unwrap-GListModel* list)))
    (~g_list_model_get_n_items ~list)))
(export g_list_model_get_n_items)

;; extern gpointer g_list_model_get_item(GListModel *list, guint position);
(define ~g_list_model_get_item #f)
(define (g_list_model_get_item list position)
  (unless
    ~g_list_model_get_item
    (set! ~g_list_model_get_item
      (fh-link-proc
        "g_list_model_get_item"
        '*
        (list '* ffi:unsigned-int))))
  (let ((~list (unwrap-GListModel* list))
        (~position (unwrap~fixed position)))
    (wrap-gpointer
      (~g_list_model_get_item ~list ~position))))
(export g_list_model_get_item)

;; extern GObject *g_list_model_get_object(GListModel *list, guint position);
(define ~g_list_model_get_object #f)
(define (g_list_model_get_object list position)
  (unless
    ~g_list_model_get_object
    (set! ~g_list_model_get_object
      (fh-link-proc
        "g_list_model_get_object"
        '*
        (list '* ffi:unsigned-int))))
  (let ((~list (unwrap-GListModel* list))
        (~position (unwrap~fixed position)))
    (~g_list_model_get_object ~list ~position)))
(export g_list_model_get_object)

;; extern void g_list_model_items_changed(GListModel *list, guint position, 
;;     guint removed, guint added);
(define ~g_list_model_items_changed #f)
(define (g_list_model_items_changed
         list
         position
         removed
         added)
  (unless
    ~g_list_model_items_changed
    (set! ~g_list_model_items_changed
      (fh-link-proc
        "g_list_model_items_changed"
        ffi:void
        (list '*
              ffi:unsigned-int
              ffi:unsigned-int
              ffi:unsigned-int))))
  (let ((~list (unwrap-GListModel* list))
        (~position (unwrap~fixed position))
        (~removed (unwrap~fixed removed))
        (~added (unwrap~fixed added)))
    (~g_list_model_items_changed
      ~list
      ~position
      ~removed
      ~added)))
(export g_list_model_items_changed)

;; extern GType g_list_store_get_type(void);
(define ~g_list_store_get_type #f)
(define (g_list_store_get_type)
  (unless
    ~g_list_store_get_type
    (set! ~g_list_store_get_type
      (fh-link-proc
        "g_list_store_get_type"
        ffi:unsigned-long
        (list))))
  (let () (~g_list_store_get_type)))
(export g_list_store_get_type)

;; typedef struct _GListStore GListStore;
(define GListStore-desc void)
(export GListStore-desc)
(define GListStore*-desc (bs:pointer GListStore-desc))
(export GListStore*-desc)
(define-fh-pointer-type GListStore* GListStore*-desc)

;; typedef struct {
;;   GObjectClass parent_class;
;; } GListStoreClass;
(define GListStoreClass-desc
  (bs:struct
    (list `(parent_class
             ,(bs:struct
                (list `(g_type_class
                         ,(bs:struct (list `(g_type ,unsigned-long))))
                      `(construct_properties
                         ,(bs:pointer (delay GSList*-desc)))
                      `(constructor ,(bs:pointer void))
                      `(set_property ,(bs:pointer void))
                      `(get_property ,(bs:pointer void))
                      `(dispose ,(bs:pointer void))
                      `(finalize ,(bs:pointer void))
                      `(dispatch_properties_changed ,(bs:pointer void))
                      `(notify ,(bs:pointer void))
                      `(constructed ,(bs:pointer void))
                      `(flags ,unsigned-long)
                      `(pdummy ,(bs:vector 6 gpointer-desc))))))))
(export GListStoreClass-desc)
(define-fh-compound-type/p GListStoreClass GListStoreClass-desc)

;; typedef GListStore *GListStore_autoptr;
(define GListStore_autoptr-desc (bs:pointer GListStore-desc))
(export GListStore_autoptr-desc)
(define-fh-pointer-type GListStore_autoptr GListStore_autoptr-desc)

;; extern GListStore *g_list_store_new(GType item_type);
(define ~g_list_store_new #f)
(define (g_list_store_new item_type)
  (unless
    ~g_list_store_new
    (set! ~g_list_store_new
      (fh-link-proc
        "g_list_store_new"
        '*
        (list ffi:unsigned-long))))
  (let ((~item_type (unwrap~fixed item_type)))
    (wrap-GListStore* (~g_list_store_new ~item_type))))
(export g_list_store_new)

;; extern void g_list_store_insert(GListStore *store, guint position, gpointer 
;;     item);
(define ~g_list_store_insert #f)
(define (g_list_store_insert store position item)
  (unless
    ~g_list_store_insert
    (set! ~g_list_store_insert
      (fh-link-proc
        "g_list_store_insert"
        ffi:void
        (list '* ffi:unsigned-int '*))))
  (let ((~store (unwrap-GListStore* store))
        (~position (unwrap~fixed position))
        (~item (unwrap-gpointer item)))
    (~g_list_store_insert ~store ~position ~item)))
(export g_list_store_insert)

;; extern guint g_list_store_insert_sorted(GListStore *store, gpointer item, 
;;     GCompareDataFunc compare_func, gpointer user_data);
(define ~g_list_store_insert_sorted #f)
(define (g_list_store_insert_sorted
         store
         item
         compare_func
         user_data)
  (unless
    ~g_list_store_insert_sorted
    (set! ~g_list_store_insert_sorted
      (fh-link-proc
        "g_list_store_insert_sorted"
        ffi:unsigned-int
        (list '* '* '* '*))))
  (let ((~store (unwrap-GListStore* store))
        (~item (unwrap-gpointer item))
        (~compare_func
          ((make-ftn-arg-unwrapper ffi:int (list '* '* '*))
           compare_func))
        (~user_data (unwrap-gpointer user_data)))
    (~g_list_store_insert_sorted
      ~store
      ~item
      ~compare_func
      ~user_data)))
(export g_list_store_insert_sorted)

;; extern void g_list_store_sort(GListStore *store, GCompareDataFunc 
;;     compare_func, gpointer user_data);
(define ~g_list_store_sort #f)
(define (g_list_store_sort store compare_func user_data)
  (unless
    ~g_list_store_sort
    (set! ~g_list_store_sort
      (fh-link-proc
        "g_list_store_sort"
        ffi:void
        (list '* '* '*))))
  (let ((~store (unwrap-GListStore* store))
        (~compare_func
          ((make-ftn-arg-unwrapper ffi:int (list '* '* '*))
           compare_func))
        (~user_data (unwrap-gpointer user_data)))
    (~g_list_store_sort
      ~store
      ~compare_func
      ~user_data)))
(export g_list_store_sort)

;; extern void g_list_store_append(GListStore *store, gpointer item);
(define ~g_list_store_append #f)
(define (g_list_store_append store item)
  (unless
    ~g_list_store_append
    (set! ~g_list_store_append
      (fh-link-proc
        "g_list_store_append"
        ffi:void
        (list '* '*))))
  (let ((~store (unwrap-GListStore* store))
        (~item (unwrap-gpointer item)))
    (~g_list_store_append ~store ~item)))
(export g_list_store_append)

;; extern void g_list_store_remove(GListStore *store, guint position);
(define ~g_list_store_remove #f)
(define (g_list_store_remove store position)
  (unless
    ~g_list_store_remove
    (set! ~g_list_store_remove
      (fh-link-proc
        "g_list_store_remove"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~store (unwrap-GListStore* store))
        (~position (unwrap~fixed position)))
    (~g_list_store_remove ~store ~position)))
(export g_list_store_remove)

;; extern void g_list_store_remove_all(GListStore *store);
(define ~g_list_store_remove_all #f)
(define (g_list_store_remove_all store)
  (unless
    ~g_list_store_remove_all
    (set! ~g_list_store_remove_all
      (fh-link-proc
        "g_list_store_remove_all"
        ffi:void
        (list '*))))
  (let ((~store (unwrap-GListStore* store)))
    (~g_list_store_remove_all ~store)))
(export g_list_store_remove_all)

;; extern void g_list_store_splice(GListStore *store, guint position, guint 
;;     n_removals, gpointer *additions, guint n_additions);
(define ~g_list_store_splice #f)
(define (g_list_store_splice
         store
         position
         n_removals
         additions
         n_additions)
  (unless
    ~g_list_store_splice
    (set! ~g_list_store_splice
      (fh-link-proc
        "g_list_store_splice"
        ffi:void
        (list '*
              ffi:unsigned-int
              ffi:unsigned-int
              '*
              ffi:unsigned-int))))
  (let ((~store (unwrap-GListStore* store))
        (~position (unwrap~fixed position))
        (~n_removals (unwrap~fixed n_removals))
        (~n_additions (unwrap~fixed n_additions)))
    (~g_list_store_splice
      ~store
      ~position
      ~n_removals
      additions
      ~n_additions)))
(export g_list_store_splice)

;; typedef GAction *GAction_autoptr;
(define GAction_autoptr-desc (bs:pointer GAction-desc))
(export GAction_autoptr-desc)
(define-fh-pointer-type GAction_autoptr GAction_autoptr-desc)

;; typedef GActionMap *GActionMap_autoptr;
(define GActionMap_autoptr-desc (bs:pointer GActionMap-desc))
(export GActionMap_autoptr-desc)
(define-fh-pointer-type GActionMap_autoptr GActionMap_autoptr-desc)

;; typedef GAppInfo *GAppInfo_autoptr;
(define GAppInfo_autoptr-desc (bs:pointer GAppInfo-desc))
(export GAppInfo_autoptr-desc)
(define-fh-pointer-type GAppInfo_autoptr GAppInfo_autoptr-desc)

;; typedef GAppLaunchContext *GAppLaunchContext_autoptr;
(define GAppLaunchContext_autoptr-desc (bs:pointer GAppLaunchContext-desc))
(export GAppLaunchContext_autoptr-desc)
(define-fh-pointer-type GAppLaunchContext_autoptr GAppLaunchContext_autoptr-desc)

;; typedef GAppInfoMonitor *GAppInfoMonitor_autoptr;
(define GAppInfoMonitor_autoptr-desc (bs:pointer GAppInfoMonitor-desc))
(export GAppInfoMonitor_autoptr-desc)
(define-fh-pointer-type GAppInfoMonitor_autoptr GAppInfoMonitor_autoptr-desc)

;; typedef GApplicationCommandLine *GApplicationCommandLine_autoptr;
(define GApplicationCommandLine_autoptr-desc (bs:pointer GApplicationCommandLine-desc))
(export GApplicationCommandLine_autoptr-desc)
(define-fh-pointer-type GApplicationCommandLine_autoptr GApplicationCommandLine_autoptr-desc)

;; typedef GApplication *GApplication_autoptr;
(define GApplication_autoptr-desc (bs:pointer GApplication-desc))
(export GApplication_autoptr-desc)
(define-fh-pointer-type GApplication_autoptr GApplication_autoptr-desc)

;; typedef GAsyncInitable *GAsyncInitable_autoptr;
(define GAsyncInitable_autoptr-desc (bs:pointer GAsyncInitable-desc))
(export GAsyncInitable_autoptr-desc)
(define-fh-pointer-type GAsyncInitable_autoptr GAsyncInitable_autoptr-desc)

;; typedef GAsyncResult *GAsyncResult_autoptr;
(define GAsyncResult_autoptr-desc (bs:pointer GAsyncResult-desc))
(export GAsyncResult_autoptr-desc)
(define-fh-pointer-type GAsyncResult_autoptr GAsyncResult_autoptr-desc)

;; typedef GBufferedInputStream *GBufferedInputStream_autoptr;
(define GBufferedInputStream_autoptr-desc (bs:pointer GBufferedInputStream-desc))
(export GBufferedInputStream_autoptr-desc)
(define-fh-pointer-type GBufferedInputStream_autoptr GBufferedInputStream_autoptr-desc)

;; typedef GBufferedOutputStream *GBufferedOutputStream_autoptr;
(define GBufferedOutputStream_autoptr-desc (bs:pointer GBufferedOutputStream-desc))
(export GBufferedOutputStream_autoptr-desc)
(define-fh-pointer-type GBufferedOutputStream_autoptr GBufferedOutputStream_autoptr-desc)

;; typedef GBytesIcon *GBytesIcon_autoptr;
(define GBytesIcon_autoptr-desc (bs:pointer GBytesIcon-desc))
(export GBytesIcon_autoptr-desc)
(define-fh-pointer-type GBytesIcon_autoptr GBytesIcon_autoptr-desc)

;; typedef GCancellable *GCancellable_autoptr;
(define GCancellable_autoptr-desc (bs:pointer GCancellable-desc))
(export GCancellable_autoptr-desc)
(define-fh-pointer-type GCancellable_autoptr GCancellable_autoptr-desc)

;; typedef GCharsetConverter *GCharsetConverter_autoptr;
(define GCharsetConverter_autoptr-desc (bs:pointer GCharsetConverter-desc))
(export GCharsetConverter_autoptr-desc)
(define-fh-pointer-type GCharsetConverter_autoptr GCharsetConverter_autoptr-desc)

;; typedef GConverter *GConverter_autoptr;
(define GConverter_autoptr-desc (bs:pointer GConverter-desc))
(export GConverter_autoptr-desc)
(define-fh-pointer-type GConverter_autoptr GConverter_autoptr-desc)

;; typedef GConverterInputStream *GConverterInputStream_autoptr;
(define GConverterInputStream_autoptr-desc (bs:pointer GConverterInputStream-desc))
(export GConverterInputStream_autoptr-desc)
(define-fh-pointer-type GConverterInputStream_autoptr GConverterInputStream_autoptr-desc)

;; typedef GConverterOutputStream *GConverterOutputStream_autoptr;
(define GConverterOutputStream_autoptr-desc (bs:pointer GConverterOutputStream-desc))
(export GConverterOutputStream_autoptr-desc)
(define-fh-pointer-type GConverterOutputStream_autoptr GConverterOutputStream_autoptr-desc)

;; typedef GCredentials *GCredentials_autoptr;
(define GCredentials_autoptr-desc (bs:pointer GCredentials-desc))
(export GCredentials_autoptr-desc)
(define-fh-pointer-type GCredentials_autoptr GCredentials_autoptr-desc)

;; typedef GDatagramBased *GDatagramBased_autoptr;
(define GDatagramBased_autoptr-desc (bs:pointer GDatagramBased-desc))
(export GDatagramBased_autoptr-desc)
(define-fh-pointer-type GDatagramBased_autoptr GDatagramBased_autoptr-desc)

;; typedef GDataInputStream *GDataInputStream_autoptr;
(define GDataInputStream_autoptr-desc (bs:pointer GDataInputStream-desc))
(export GDataInputStream_autoptr-desc)
(define-fh-pointer-type GDataInputStream_autoptr GDataInputStream_autoptr-desc)

;; typedef GDataOutputStream *GDataOutputStream_autoptr;
(define GDataOutputStream_autoptr-desc (bs:pointer GDataOutputStream-desc))
(export GDataOutputStream_autoptr-desc)
(define-fh-pointer-type GDataOutputStream_autoptr GDataOutputStream_autoptr-desc)

;; typedef GDBusActionGroup *GDBusActionGroup_autoptr;
(define GDBusActionGroup_autoptr-desc (bs:pointer GDBusActionGroup-desc))
(export GDBusActionGroup_autoptr-desc)
(define-fh-pointer-type GDBusActionGroup_autoptr GDBusActionGroup_autoptr-desc)

;; typedef GDBusAuthObserver *GDBusAuthObserver_autoptr;
(define GDBusAuthObserver_autoptr-desc (bs:pointer GDBusAuthObserver-desc))
(export GDBusAuthObserver_autoptr-desc)
(define-fh-pointer-type GDBusAuthObserver_autoptr GDBusAuthObserver_autoptr-desc)

;; typedef GDBusConnection *GDBusConnection_autoptr;
(define GDBusConnection_autoptr-desc (bs:pointer GDBusConnection-desc))
(export GDBusConnection_autoptr-desc)
(define-fh-pointer-type GDBusConnection_autoptr GDBusConnection_autoptr-desc)

;; typedef GDBusInterface *GDBusInterface_autoptr;
(define GDBusInterface_autoptr-desc (bs:pointer GDBusInterface-desc))
(export GDBusInterface_autoptr-desc)
(define-fh-pointer-type GDBusInterface_autoptr GDBusInterface_autoptr-desc)

;; typedef GDBusInterfaceSkeleton *GDBusInterfaceSkeleton_autoptr;
(define GDBusInterfaceSkeleton_autoptr-desc (bs:pointer GDBusInterfaceSkeleton-desc))
(export GDBusInterfaceSkeleton_autoptr-desc)
(define-fh-pointer-type GDBusInterfaceSkeleton_autoptr GDBusInterfaceSkeleton_autoptr-desc)

;; typedef GDBusMenuModel *GDBusMenuModel_autoptr;
(define GDBusMenuModel_autoptr-desc (bs:pointer GDBusMenuModel-desc))
(export GDBusMenuModel_autoptr-desc)
(define-fh-pointer-type GDBusMenuModel_autoptr GDBusMenuModel_autoptr-desc)

;; typedef GDBusMessage *GDBusMessage_autoptr;
(define GDBusMessage_autoptr-desc (bs:pointer GDBusMessage-desc))
(export GDBusMessage_autoptr-desc)
(define-fh-pointer-type GDBusMessage_autoptr GDBusMessage_autoptr-desc)

;; typedef GDBusMethodInvocation *GDBusMethodInvocation_autoptr;
(define GDBusMethodInvocation_autoptr-desc (bs:pointer GDBusMethodInvocation-desc))
(export GDBusMethodInvocation_autoptr-desc)
(define-fh-pointer-type GDBusMethodInvocation_autoptr GDBusMethodInvocation_autoptr-desc)

;; typedef GDBusNodeInfo *GDBusNodeInfo_autoptr;
(define GDBusNodeInfo_autoptr-desc (bs:pointer GDBusNodeInfo-desc))
(export GDBusNodeInfo_autoptr-desc)
(define-fh-pointer-type GDBusNodeInfo_autoptr GDBusNodeInfo_autoptr-desc)

;; typedef GDBusObject *GDBusObject_autoptr;
(define GDBusObject_autoptr-desc (bs:pointer GDBusObject-desc))
(export GDBusObject_autoptr-desc)
(define-fh-pointer-type GDBusObject_autoptr GDBusObject_autoptr-desc)

;; typedef GDBusObjectManagerClient *GDBusObjectManagerClient_autoptr;
(define GDBusObjectManagerClient_autoptr-desc (bs:pointer GDBusObjectManagerClient-desc))
(export GDBusObjectManagerClient_autoptr-desc)
(define-fh-pointer-type GDBusObjectManagerClient_autoptr GDBusObjectManagerClient_autoptr-desc)

;; typedef GDBusObjectManager *GDBusObjectManager_autoptr;
(define GDBusObjectManager_autoptr-desc (bs:pointer GDBusObjectManager-desc))
(export GDBusObjectManager_autoptr-desc)
(define-fh-pointer-type GDBusObjectManager_autoptr GDBusObjectManager_autoptr-desc)

;; typedef GDBusObjectManagerServer *GDBusObjectManagerServer_autoptr;
(define GDBusObjectManagerServer_autoptr-desc (bs:pointer GDBusObjectManagerServer-desc))
(export GDBusObjectManagerServer_autoptr-desc)
(define-fh-pointer-type GDBusObjectManagerServer_autoptr GDBusObjectManagerServer_autoptr-desc)

;; typedef GDBusObjectProxy *GDBusObjectProxy_autoptr;
(define GDBusObjectProxy_autoptr-desc (bs:pointer GDBusObjectProxy-desc))
(export GDBusObjectProxy_autoptr-desc)
(define-fh-pointer-type GDBusObjectProxy_autoptr GDBusObjectProxy_autoptr-desc)

;; typedef GDBusObjectSkeleton *GDBusObjectSkeleton_autoptr;
(define GDBusObjectSkeleton_autoptr-desc (bs:pointer GDBusObjectSkeleton-desc))
(export GDBusObjectSkeleton_autoptr-desc)
(define-fh-pointer-type GDBusObjectSkeleton_autoptr GDBusObjectSkeleton_autoptr-desc)

;; typedef GDBusProxy *GDBusProxy_autoptr;
(define GDBusProxy_autoptr-desc (bs:pointer GDBusProxy-desc))
(export GDBusProxy_autoptr-desc)
(define-fh-pointer-type GDBusProxy_autoptr GDBusProxy_autoptr-desc)

;; typedef GDBusServer *GDBusServer_autoptr;
(define GDBusServer_autoptr-desc (bs:pointer GDBusServer-desc))
(export GDBusServer_autoptr-desc)
(define-fh-pointer-type GDBusServer_autoptr GDBusServer_autoptr-desc)

;; typedef GDrive *GDrive_autoptr;
(define GDrive_autoptr-desc (bs:pointer GDrive-desc))
(export GDrive_autoptr-desc)
(define-fh-pointer-type GDrive_autoptr GDrive_autoptr-desc)

;; typedef GEmblemedIcon *GEmblemedIcon_autoptr;
(define GEmblemedIcon_autoptr-desc (bs:pointer GEmblemedIcon-desc))
(export GEmblemedIcon_autoptr-desc)
(define-fh-pointer-type GEmblemedIcon_autoptr GEmblemedIcon_autoptr-desc)

;; typedef GEmblem *GEmblem_autoptr;
(define GEmblem_autoptr-desc (bs:pointer GEmblem-desc))
(export GEmblem_autoptr-desc)
(define-fh-pointer-type GEmblem_autoptr GEmblem_autoptr-desc)

;; typedef GFileEnumerator *GFileEnumerator_autoptr;
(define GFileEnumerator_autoptr-desc (bs:pointer GFileEnumerator-desc))
(export GFileEnumerator_autoptr-desc)
(define-fh-pointer-type GFileEnumerator_autoptr GFileEnumerator_autoptr-desc)

;; typedef GFile *GFile_autoptr;
(define GFile_autoptr-desc (bs:pointer GFile-desc))
(export GFile_autoptr-desc)
(define-fh-pointer-type GFile_autoptr GFile_autoptr-desc)

;; typedef GFileAttributeInfoList *GFileAttributeInfoList_autoptr;
(define GFileAttributeInfoList_autoptr-desc (bs:pointer GFileAttributeInfoList-desc))
(export GFileAttributeInfoList_autoptr-desc)
(define-fh-pointer-type GFileAttributeInfoList_autoptr GFileAttributeInfoList_autoptr-desc)

;; typedef GFileIcon *GFileIcon_autoptr;
(define GFileIcon_autoptr-desc (bs:pointer GFileIcon-desc))
(export GFileIcon_autoptr-desc)
(define-fh-pointer-type GFileIcon_autoptr GFileIcon_autoptr-desc)

;; typedef GFileInfo *GFileInfo_autoptr;
(define GFileInfo_autoptr-desc (bs:pointer GFileInfo-desc))
(export GFileInfo_autoptr-desc)
(define-fh-pointer-type GFileInfo_autoptr GFileInfo_autoptr-desc)

;; typedef GFileInputStream *GFileInputStream_autoptr;
(define GFileInputStream_autoptr-desc (bs:pointer GFileInputStream-desc))
(export GFileInputStream_autoptr-desc)
(define-fh-pointer-type GFileInputStream_autoptr GFileInputStream_autoptr-desc)

;; typedef GFileIOStream *GFileIOStream_autoptr;
(define GFileIOStream_autoptr-desc (bs:pointer GFileIOStream-desc))
(export GFileIOStream_autoptr-desc)
(define-fh-pointer-type GFileIOStream_autoptr GFileIOStream_autoptr-desc)

;; typedef GFileMonitor *GFileMonitor_autoptr;
(define GFileMonitor_autoptr-desc (bs:pointer GFileMonitor-desc))
(export GFileMonitor_autoptr-desc)
(define-fh-pointer-type GFileMonitor_autoptr GFileMonitor_autoptr-desc)

;; typedef GFilenameCompleter *GFilenameCompleter_autoptr;
(define GFilenameCompleter_autoptr-desc (bs:pointer GFilenameCompleter-desc))
(export GFilenameCompleter_autoptr-desc)
(define-fh-pointer-type GFilenameCompleter_autoptr GFilenameCompleter_autoptr-desc)

;; typedef GFileOutputStream *GFileOutputStream_autoptr;
(define GFileOutputStream_autoptr-desc (bs:pointer GFileOutputStream-desc))
(export GFileOutputStream_autoptr-desc)
(define-fh-pointer-type GFileOutputStream_autoptr GFileOutputStream_autoptr-desc)

;; typedef GFilterInputStream *GFilterInputStream_autoptr;
(define GFilterInputStream_autoptr-desc (bs:pointer GFilterInputStream-desc))
(export GFilterInputStream_autoptr-desc)
(define-fh-pointer-type GFilterInputStream_autoptr GFilterInputStream_autoptr-desc)

;; typedef GFilterOutputStream *GFilterOutputStream_autoptr;
(define GFilterOutputStream_autoptr-desc (bs:pointer GFilterOutputStream-desc))
(export GFilterOutputStream_autoptr-desc)
(define-fh-pointer-type GFilterOutputStream_autoptr GFilterOutputStream_autoptr-desc)

;; typedef GIcon *GIcon_autoptr;
(define GIcon_autoptr-desc (bs:pointer GIcon-desc))
(export GIcon_autoptr-desc)
(define-fh-pointer-type GIcon_autoptr GIcon_autoptr-desc)

;; typedef GInetAddress *GInetAddress_autoptr;
(define GInetAddress_autoptr-desc (bs:pointer GInetAddress-desc))
(export GInetAddress_autoptr-desc)
(define-fh-pointer-type GInetAddress_autoptr GInetAddress_autoptr-desc)

;; typedef GInetAddressMask *GInetAddressMask_autoptr;
(define GInetAddressMask_autoptr-desc (bs:pointer GInetAddressMask-desc))
(export GInetAddressMask_autoptr-desc)
(define-fh-pointer-type GInetAddressMask_autoptr GInetAddressMask_autoptr-desc)

;; typedef GInetSocketAddress *GInetSocketAddress_autoptr;
(define GInetSocketAddress_autoptr-desc (bs:pointer GInetSocketAddress-desc))
(export GInetSocketAddress_autoptr-desc)
(define-fh-pointer-type GInetSocketAddress_autoptr GInetSocketAddress_autoptr-desc)

;; typedef GInitable *GInitable_autoptr;
(define GInitable_autoptr-desc (bs:pointer GInitable-desc))
(export GInitable_autoptr-desc)
(define-fh-pointer-type GInitable_autoptr GInitable_autoptr-desc)

;; typedef GInputStream *GInputStream_autoptr;
(define GInputStream_autoptr-desc (bs:pointer GInputStream-desc))
(export GInputStream_autoptr-desc)
(define-fh-pointer-type GInputStream_autoptr GInputStream_autoptr-desc)

;; typedef GIOModule *GIOModule_autoptr;
(define GIOModule_autoptr-desc (bs:pointer GIOModule-desc))
(export GIOModule_autoptr-desc)
(define-fh-pointer-type GIOModule_autoptr GIOModule_autoptr-desc)

;; typedef GIOStream *GIOStream_autoptr;
(define GIOStream_autoptr-desc (bs:pointer GIOStream-desc))
(export GIOStream_autoptr-desc)
(define-fh-pointer-type GIOStream_autoptr GIOStream_autoptr-desc)

;; typedef GLoadableIcon *GLoadableIcon_autoptr;
(define GLoadableIcon_autoptr-desc (bs:pointer GLoadableIcon-desc))
(export GLoadableIcon_autoptr-desc)
(define-fh-pointer-type GLoadableIcon_autoptr GLoadableIcon_autoptr-desc)

;; typedef GMemoryInputStream *GMemoryInputStream_autoptr;
(define GMemoryInputStream_autoptr-desc (bs:pointer GMemoryInputStream-desc))
(export GMemoryInputStream_autoptr-desc)
(define-fh-pointer-type GMemoryInputStream_autoptr GMemoryInputStream_autoptr-desc)

;; typedef GMemoryOutputStream *GMemoryOutputStream_autoptr;
(define GMemoryOutputStream_autoptr-desc (bs:pointer GMemoryOutputStream-desc))
(export GMemoryOutputStream_autoptr-desc)
(define-fh-pointer-type GMemoryOutputStream_autoptr GMemoryOutputStream_autoptr-desc)

;; typedef GMenu *GMenu_autoptr;
(define GMenu_autoptr-desc (bs:pointer GMenu-desc))
(export GMenu_autoptr-desc)
(define-fh-pointer-type GMenu_autoptr GMenu_autoptr-desc)

;; typedef GMenuItem *GMenuItem_autoptr;
(define GMenuItem_autoptr-desc (bs:pointer GMenuItem-desc))
(export GMenuItem_autoptr-desc)
(define-fh-pointer-type GMenuItem_autoptr GMenuItem_autoptr-desc)

;; typedef GMenuModel *GMenuModel_autoptr;
(define GMenuModel_autoptr-desc (bs:pointer GMenuModel-desc))
(export GMenuModel_autoptr-desc)
(define-fh-pointer-type GMenuModel_autoptr GMenuModel_autoptr-desc)

;; typedef GMenuAttributeIter *GMenuAttributeIter_autoptr;
(define GMenuAttributeIter_autoptr-desc (bs:pointer GMenuAttributeIter-desc))
(export GMenuAttributeIter_autoptr-desc)
(define-fh-pointer-type GMenuAttributeIter_autoptr GMenuAttributeIter_autoptr-desc)

;; typedef GMenuLinkIter *GMenuLinkIter_autoptr;
(define GMenuLinkIter_autoptr-desc (bs:pointer GMenuLinkIter-desc))
(export GMenuLinkIter_autoptr-desc)
(define-fh-pointer-type GMenuLinkIter_autoptr GMenuLinkIter_autoptr-desc)

;; typedef GMount *GMount_autoptr;
(define GMount_autoptr-desc (bs:pointer GMount-desc))
(export GMount_autoptr-desc)
(define-fh-pointer-type GMount_autoptr GMount_autoptr-desc)

;; typedef GMountOperation *GMountOperation_autoptr;
(define GMountOperation_autoptr-desc (bs:pointer GMountOperation-desc))
(export GMountOperation_autoptr-desc)
(define-fh-pointer-type GMountOperation_autoptr GMountOperation_autoptr-desc)

;; typedef GNativeVolumeMonitor *GNativeVolumeMonitor_autoptr;
(define GNativeVolumeMonitor_autoptr-desc (bs:pointer GNativeVolumeMonitor-desc))
(export GNativeVolumeMonitor_autoptr-desc)
(define-fh-pointer-type GNativeVolumeMonitor_autoptr GNativeVolumeMonitor_autoptr-desc)

;; typedef GNetworkAddress *GNetworkAddress_autoptr;
(define GNetworkAddress_autoptr-desc (bs:pointer GNetworkAddress-desc))
(export GNetworkAddress_autoptr-desc)
(define-fh-pointer-type GNetworkAddress_autoptr GNetworkAddress_autoptr-desc)

;; typedef GNetworkMonitor *GNetworkMonitor_autoptr;
(define GNetworkMonitor_autoptr-desc (bs:pointer GNetworkMonitor-desc))
(export GNetworkMonitor_autoptr-desc)
(define-fh-pointer-type GNetworkMonitor_autoptr GNetworkMonitor_autoptr-desc)

;; typedef GNetworkService *GNetworkService_autoptr;
(define GNetworkService_autoptr-desc (bs:pointer GNetworkService-desc))
(export GNetworkService_autoptr-desc)
(define-fh-pointer-type GNetworkService_autoptr GNetworkService_autoptr-desc)

;; typedef GNotification *GNotification_autoptr;
(define GNotification_autoptr-desc (bs:pointer GNotification-desc))
(export GNotification_autoptr-desc)
(define-fh-pointer-type GNotification_autoptr GNotification_autoptr-desc)

;; typedef GOutputStream *GOutputStream_autoptr;
(define GOutputStream_autoptr-desc (bs:pointer GOutputStream-desc))
(export GOutputStream_autoptr-desc)
(define-fh-pointer-type GOutputStream_autoptr GOutputStream_autoptr-desc)

;; typedef GPermission *GPermission_autoptr;
(define GPermission_autoptr-desc (bs:pointer GPermission-desc))
(export GPermission_autoptr-desc)
(define-fh-pointer-type GPermission_autoptr GPermission_autoptr-desc)

;; typedef GPollableInputStream *GPollableInputStream_autoptr;
(define GPollableInputStream_autoptr-desc (bs:pointer GPollableInputStream-desc))
(export GPollableInputStream_autoptr-desc)
(define-fh-pointer-type GPollableInputStream_autoptr GPollableInputStream_autoptr-desc)

;; typedef GPollableOutputStream *GPollableOutputStream_autoptr;
(define GPollableOutputStream_autoptr-desc (bs:pointer GPollableOutputStream-desc))
(export GPollableOutputStream_autoptr-desc)
(define-fh-pointer-type GPollableOutputStream_autoptr GPollableOutputStream_autoptr-desc)

;; typedef GPropertyAction *GPropertyAction_autoptr;
(define GPropertyAction_autoptr-desc (bs:pointer GPropertyAction-desc))
(export GPropertyAction_autoptr-desc)
(define-fh-pointer-type GPropertyAction_autoptr GPropertyAction_autoptr-desc)

;; typedef GProxyAddressEnumerator *GProxyAddressEnumerator_autoptr;
(define GProxyAddressEnumerator_autoptr-desc (bs:pointer GProxyAddressEnumerator-desc))
(export GProxyAddressEnumerator_autoptr-desc)
(define-fh-pointer-type GProxyAddressEnumerator_autoptr GProxyAddressEnumerator_autoptr-desc)

;; typedef GProxyAddress *GProxyAddress_autoptr;
(define GProxyAddress_autoptr-desc (bs:pointer GProxyAddress-desc))
(export GProxyAddress_autoptr-desc)
(define-fh-pointer-type GProxyAddress_autoptr GProxyAddress_autoptr-desc)

;; typedef GProxy *GProxy_autoptr;
(define GProxy_autoptr-desc (bs:pointer GProxy-desc))
(export GProxy_autoptr-desc)
(define-fh-pointer-type GProxy_autoptr GProxy_autoptr-desc)

;; typedef GProxyResolver *GProxyResolver_autoptr;
(define GProxyResolver_autoptr-desc (bs:pointer GProxyResolver-desc))
(export GProxyResolver_autoptr-desc)
(define-fh-pointer-type GProxyResolver_autoptr GProxyResolver_autoptr-desc)

;; typedef GRemoteActionGroup *GRemoteActionGroup_autoptr;
(define GRemoteActionGroup_autoptr-desc (bs:pointer GRemoteActionGroup-desc))
(export GRemoteActionGroup_autoptr-desc)
(define-fh-pointer-type GRemoteActionGroup_autoptr GRemoteActionGroup_autoptr-desc)

;; typedef GResolver *GResolver_autoptr;
(define GResolver_autoptr-desc (bs:pointer GResolver-desc))
(export GResolver_autoptr-desc)
(define-fh-pointer-type GResolver_autoptr GResolver_autoptr-desc)

;; typedef GSeekable *GSeekable_autoptr;
(define GSeekable_autoptr-desc (bs:pointer GSeekable-desc))
(export GSeekable_autoptr-desc)
(define-fh-pointer-type GSeekable_autoptr GSeekable_autoptr-desc)

;; typedef GSettingsBackend *GSettingsBackend_autoptr;
(define GSettingsBackend_autoptr-desc (bs:pointer GSettingsBackend-desc))
(export GSettingsBackend_autoptr-desc)
(define-fh-pointer-type GSettingsBackend_autoptr GSettingsBackend_autoptr-desc)

;; typedef GSettingsSchema *GSettingsSchema_autoptr;
(define GSettingsSchema_autoptr-desc (bs:pointer GSettingsSchema-desc))
(export GSettingsSchema_autoptr-desc)
(define-fh-pointer-type GSettingsSchema_autoptr GSettingsSchema_autoptr-desc)

;; typedef GSettings *GSettings_autoptr;
(define GSettings_autoptr-desc (bs:pointer GSettings-desc))
(export GSettings_autoptr-desc)
(define-fh-pointer-type GSettings_autoptr GSettings_autoptr-desc)

;; typedef GSimpleActionGroup *GSimpleActionGroup_autoptr;
(define GSimpleActionGroup_autoptr-desc (bs:pointer GSimpleActionGroup-desc))
(export GSimpleActionGroup_autoptr-desc)
(define-fh-pointer-type GSimpleActionGroup_autoptr GSimpleActionGroup_autoptr-desc)

;; typedef GSimpleAction *GSimpleAction_autoptr;
(define GSimpleAction_autoptr-desc (bs:pointer GSimpleAction-desc))
(export GSimpleAction_autoptr-desc)
(define-fh-pointer-type GSimpleAction_autoptr GSimpleAction_autoptr-desc)

;; typedef GSimpleAsyncResult *GSimpleAsyncResult_autoptr;
(define GSimpleAsyncResult_autoptr-desc (bs:pointer GSimpleAsyncResult-desc))
(export GSimpleAsyncResult_autoptr-desc)
(define-fh-pointer-type GSimpleAsyncResult_autoptr GSimpleAsyncResult_autoptr-desc)

;; typedef GSimplePermission *GSimplePermission_autoptr;
(define GSimplePermission_autoptr-desc (bs:pointer GSimplePermission-desc))
(export GSimplePermission_autoptr-desc)
(define-fh-pointer-type GSimplePermission_autoptr GSimplePermission_autoptr-desc)

;; typedef GSimpleProxyResolver *GSimpleProxyResolver_autoptr;
(define GSimpleProxyResolver_autoptr-desc (bs:pointer GSimpleProxyResolver-desc))
(export GSimpleProxyResolver_autoptr-desc)
(define-fh-pointer-type GSimpleProxyResolver_autoptr GSimpleProxyResolver_autoptr-desc)

;; typedef GSocketAddressEnumerator *GSocketAddressEnumerator_autoptr;
(define GSocketAddressEnumerator_autoptr-desc (bs:pointer GSocketAddressEnumerator-desc))
(export GSocketAddressEnumerator_autoptr-desc)
(define-fh-pointer-type GSocketAddressEnumerator_autoptr GSocketAddressEnumerator_autoptr-desc)

;; typedef GSocketAddress *GSocketAddress_autoptr;
(define GSocketAddress_autoptr-desc (bs:pointer GSocketAddress-desc))
(export GSocketAddress_autoptr-desc)
(define-fh-pointer-type GSocketAddress_autoptr GSocketAddress_autoptr-desc)

;; typedef GSocketClient *GSocketClient_autoptr;
(define GSocketClient_autoptr-desc (bs:pointer GSocketClient-desc))
(export GSocketClient_autoptr-desc)
(define-fh-pointer-type GSocketClient_autoptr GSocketClient_autoptr-desc)

;; typedef GSocketConnectable *GSocketConnectable_autoptr;
(define GSocketConnectable_autoptr-desc (bs:pointer GSocketConnectable-desc))
(export GSocketConnectable_autoptr-desc)
(define-fh-pointer-type GSocketConnectable_autoptr GSocketConnectable_autoptr-desc)

;; typedef GSocketConnection *GSocketConnection_autoptr;
(define GSocketConnection_autoptr-desc (bs:pointer GSocketConnection-desc))
(export GSocketConnection_autoptr-desc)
(define-fh-pointer-type GSocketConnection_autoptr GSocketConnection_autoptr-desc)

;; typedef GSocketControlMessage *GSocketControlMessage_autoptr;
(define GSocketControlMessage_autoptr-desc (bs:pointer GSocketControlMessage-desc))
(export GSocketControlMessage_autoptr-desc)
(define-fh-pointer-type GSocketControlMessage_autoptr GSocketControlMessage_autoptr-desc)

;; typedef GSocket *GSocket_autoptr;
(define GSocket_autoptr-desc (bs:pointer GSocket-desc))
(export GSocket_autoptr-desc)
(define-fh-pointer-type GSocket_autoptr GSocket_autoptr-desc)

;; typedef GSocketListener *GSocketListener_autoptr;
(define GSocketListener_autoptr-desc (bs:pointer GSocketListener-desc))
(export GSocketListener_autoptr-desc)
(define-fh-pointer-type GSocketListener_autoptr GSocketListener_autoptr-desc)

;; typedef GSocketService *GSocketService_autoptr;
(define GSocketService_autoptr-desc (bs:pointer GSocketService-desc))
(export GSocketService_autoptr-desc)
(define-fh-pointer-type GSocketService_autoptr GSocketService_autoptr-desc)

;; typedef GSubprocess *GSubprocess_autoptr;
(define GSubprocess_autoptr-desc (bs:pointer GSubprocess-desc))
(export GSubprocess_autoptr-desc)
(define-fh-pointer-type GSubprocess_autoptr GSubprocess_autoptr-desc)

;; typedef GSubprocessLauncher *GSubprocessLauncher_autoptr;
(define GSubprocessLauncher_autoptr-desc (bs:pointer GSubprocessLauncher-desc))
(export GSubprocessLauncher_autoptr-desc)
(define-fh-pointer-type GSubprocessLauncher_autoptr GSubprocessLauncher_autoptr-desc)

;; typedef GTask *GTask_autoptr;
(define GTask_autoptr-desc (bs:pointer GTask-desc))
(export GTask_autoptr-desc)
(define-fh-pointer-type GTask_autoptr GTask_autoptr-desc)

;; typedef GTcpConnection *GTcpConnection_autoptr;
(define GTcpConnection_autoptr-desc (bs:pointer GTcpConnection-desc))
(export GTcpConnection_autoptr-desc)
(define-fh-pointer-type GTcpConnection_autoptr GTcpConnection_autoptr-desc)

;; typedef GTcpWrapperConnection *GTcpWrapperConnection_autoptr;
(define GTcpWrapperConnection_autoptr-desc (bs:pointer GTcpWrapperConnection-desc))
(export GTcpWrapperConnection_autoptr-desc)
(define-fh-pointer-type GTcpWrapperConnection_autoptr GTcpWrapperConnection_autoptr-desc)

;; typedef GTestDBus *GTestDBus_autoptr;
(define GTestDBus_autoptr-desc (bs:pointer GTestDBus-desc))
(export GTestDBus_autoptr-desc)
(define-fh-pointer-type GTestDBus_autoptr GTestDBus_autoptr-desc)

;; typedef GThemedIcon *GThemedIcon_autoptr;
(define GThemedIcon_autoptr-desc (bs:pointer GThemedIcon-desc))
(export GThemedIcon_autoptr-desc)
(define-fh-pointer-type GThemedIcon_autoptr GThemedIcon_autoptr-desc)

;; typedef GThreadedSocketService *GThreadedSocketService_autoptr;
(define GThreadedSocketService_autoptr-desc (bs:pointer GThreadedSocketService-desc))
(export GThreadedSocketService_autoptr-desc)
(define-fh-pointer-type GThreadedSocketService_autoptr GThreadedSocketService_autoptr-desc)

;; typedef GTlsBackend *GTlsBackend_autoptr;
(define GTlsBackend_autoptr-desc (bs:pointer GTlsBackend-desc))
(export GTlsBackend_autoptr-desc)
(define-fh-pointer-type GTlsBackend_autoptr GTlsBackend_autoptr-desc)

;; typedef GTlsCertificate *GTlsCertificate_autoptr;
(define GTlsCertificate_autoptr-desc (bs:pointer GTlsCertificate-desc))
(export GTlsCertificate_autoptr-desc)
(define-fh-pointer-type GTlsCertificate_autoptr GTlsCertificate_autoptr-desc)

;; typedef GTlsClientConnection *GTlsClientConnection_autoptr;
(define GTlsClientConnection_autoptr-desc (bs:pointer GTlsClientConnection-desc))
(export GTlsClientConnection_autoptr-desc)
(define-fh-pointer-type GTlsClientConnection_autoptr GTlsClientConnection_autoptr-desc)

;; typedef GTlsConnection *GTlsConnection_autoptr;
(define GTlsConnection_autoptr-desc (bs:pointer GTlsConnection-desc))
(export GTlsConnection_autoptr-desc)
(define-fh-pointer-type GTlsConnection_autoptr GTlsConnection_autoptr-desc)

;; typedef GTlsDatabase *GTlsDatabase_autoptr;
(define GTlsDatabase_autoptr-desc (bs:pointer GTlsDatabase-desc))
(export GTlsDatabase_autoptr-desc)
(define-fh-pointer-type GTlsDatabase_autoptr GTlsDatabase_autoptr-desc)

;; typedef GTlsFileDatabase *GTlsFileDatabase_autoptr;
(define GTlsFileDatabase_autoptr-desc (bs:pointer GTlsFileDatabase-desc))
(export GTlsFileDatabase_autoptr-desc)
(define-fh-pointer-type GTlsFileDatabase_autoptr GTlsFileDatabase_autoptr-desc)

;; typedef GTlsInteraction *GTlsInteraction_autoptr;
(define GTlsInteraction_autoptr-desc (bs:pointer GTlsInteraction-desc))
(export GTlsInteraction_autoptr-desc)
(define-fh-pointer-type GTlsInteraction_autoptr GTlsInteraction_autoptr-desc)

;; typedef GTlsPassword *GTlsPassword_autoptr;
(define GTlsPassword_autoptr-desc (bs:pointer GTlsPassword-desc))
(export GTlsPassword_autoptr-desc)
(define-fh-pointer-type GTlsPassword_autoptr GTlsPassword_autoptr-desc)

;; typedef GTlsServerConnection *GTlsServerConnection_autoptr;
(define GTlsServerConnection_autoptr-desc (bs:pointer GTlsServerConnection-desc))
(export GTlsServerConnection_autoptr-desc)
(define-fh-pointer-type GTlsServerConnection_autoptr GTlsServerConnection_autoptr-desc)

;; typedef GVfs *GVfs_autoptr;
(define GVfs_autoptr-desc (bs:pointer GVfs-desc))
(export GVfs_autoptr-desc)
(define-fh-pointer-type GVfs_autoptr GVfs_autoptr-desc)

;; typedef GVolume *GVolume_autoptr;
(define GVolume_autoptr-desc (bs:pointer GVolume-desc))
(export GVolume_autoptr-desc)
(define-fh-pointer-type GVolume_autoptr GVolume_autoptr-desc)

;; typedef GVolumeMonitor *GVolumeMonitor_autoptr;
(define GVolumeMonitor_autoptr-desc (bs:pointer GVolumeMonitor-desc))
(export GVolumeMonitor_autoptr-desc)
(define-fh-pointer-type GVolumeMonitor_autoptr GVolumeMonitor_autoptr-desc)

;; typedef GZlibCompressor *GZlibCompressor_autoptr;
(define GZlibCompressor_autoptr-desc (bs:pointer GZlibCompressor-desc))
(export GZlibCompressor_autoptr-desc)
(define-fh-pointer-type GZlibCompressor_autoptr GZlibCompressor_autoptr-desc)

;; typedef GZlibDecompressor *GZlibDecompressor_autoptr;
(define GZlibDecompressor_autoptr-desc (bs:pointer GZlibDecompressor-desc))
(export GZlibDecompressor_autoptr-desc)
(define-fh-pointer-type GZlibDecompressor_autoptr GZlibDecompressor_autoptr-desc)

;; access to enum symbols and #define'd constants:
(define ffi-gio-symbol-val
  (let ((sym-tab
          '((_CLOCK_REALTIME . 0)
            (_CLOCK_MONOTONIC . 6)
            (_CLOCK_MONOTONIC_RAW . 4)
            (_CLOCK_MONOTONIC_RAW_APPROX . 5)
            (_CLOCK_UPTIME_RAW . 8)
            (_CLOCK_UPTIME_RAW_APPROX . 9)
            (_CLOCK_PROCESS_CPUTIME_ID . 12)
            (_CLOCK_THREAD_CPUTIME_ID . 16)
            (G_USER_DIRECTORY_DESKTOP . 0)
            (G_USER_DIRECTORY_DOCUMENTS . 1)
            (G_USER_DIRECTORY_DOWNLOAD . 2)
            (G_USER_DIRECTORY_MUSIC . 3)
            (G_USER_DIRECTORY_PICTURES . 4)
            (G_USER_DIRECTORY_PUBLIC_SHARE . 5)
            (G_USER_DIRECTORY_TEMPLATES . 6)
            (G_USER_DIRECTORY_VIDEOS . 7)
            (G_USER_N_DIRECTORIES . 8)
            (G_FORMAT_SIZE_DEFAULT . 0)
            (G_FORMAT_SIZE_LONG_FORMAT . 1)
            (G_FORMAT_SIZE_IEC_UNITS . 2)
            (G_THREAD_ERROR_AGAIN . 0)
            (G_ONCE_STATUS_NOTCALLED . 0)
            (G_ONCE_STATUS_PROGRESS . 1)
            (G_ONCE_STATUS_READY . 2)
            (G_BOOKMARK_FILE_ERROR_INVALID_URI . 0)
            (G_BOOKMARK_FILE_ERROR_INVALID_VALUE . 1)
            (G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED . 2)
            (G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND . 3)
            (G_BOOKMARK_FILE_ERROR_READ . 4)
            (G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING . 5)
            (G_BOOKMARK_FILE_ERROR_WRITE . 6)
            (G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND . 7)
            (G_CHECKSUM_MD5 . 0)
            (G_CHECKSUM_SHA1 . 1)
            (G_CHECKSUM_SHA256 . 2)
            (G_CHECKSUM_SHA512 . 3)
            (G_CHECKSUM_SHA384 . 4)
            (G_CONVERT_ERROR_NO_CONVERSION . 0)
            (G_CONVERT_ERROR_ILLEGAL_SEQUENCE . 1)
            (G_CONVERT_ERROR_FAILED . 2)
            (G_CONVERT_ERROR_PARTIAL_INPUT . 3)
            (G_CONVERT_ERROR_BAD_URI . 4)
            (G_CONVERT_ERROR_NOT_ABSOLUTE_PATH . 5)
            (G_CONVERT_ERROR_NO_MEMORY . 6)
            (G_DATE_DAY . 0)
            (G_DATE_MONTH . 1)
            (G_DATE_YEAR . 2)
            (G_DATE_BAD_WEEKDAY . 0)
            (G_DATE_MONDAY . 1)
            (G_DATE_TUESDAY . 2)
            (G_DATE_WEDNESDAY . 3)
            (G_DATE_THURSDAY . 4)
            (G_DATE_FRIDAY . 5)
            (G_DATE_SATURDAY . 6)
            (G_DATE_SUNDAY . 7)
            (G_DATE_BAD_MONTH . 0)
            (G_DATE_JANUARY . 1)
            (G_DATE_FEBRUARY . 2)
            (G_DATE_MARCH . 3)
            (G_DATE_APRIL . 4)
            (G_DATE_MAY . 5)
            (G_DATE_JUNE . 6)
            (G_DATE_JULY . 7)
            (G_DATE_AUGUST . 8)
            (G_DATE_SEPTEMBER . 9)
            (G_DATE_OCTOBER . 10)
            (G_DATE_NOVEMBER . 11)
            (G_DATE_DECEMBER . 12)
            (G_TIME_TYPE_STANDARD . 0)
            (G_TIME_TYPE_DAYLIGHT . 1)
            (G_TIME_TYPE_UNIVERSAL . 2)
            (G_FILE_ERROR_EXIST . 0)
            (G_FILE_ERROR_ISDIR . 1)
            (G_FILE_ERROR_ACCES . 2)
            (G_FILE_ERROR_NAMETOOLONG . 3)
            (G_FILE_ERROR_NOENT . 4)
            (G_FILE_ERROR_NOTDIR . 5)
            (G_FILE_ERROR_NXIO . 6)
            (G_FILE_ERROR_NODEV . 7)
            (G_FILE_ERROR_ROFS . 8)
            (G_FILE_ERROR_TXTBSY . 9)
            (G_FILE_ERROR_FAULT . 10)
            (G_FILE_ERROR_LOOP . 11)
            (G_FILE_ERROR_NOSPC . 12)
            (G_FILE_ERROR_NOMEM . 13)
            (G_FILE_ERROR_MFILE . 14)
            (G_FILE_ERROR_NFILE . 15)
            (G_FILE_ERROR_BADF . 16)
            (G_FILE_ERROR_INVAL . 17)
            (G_FILE_ERROR_PIPE . 18)
            (G_FILE_ERROR_AGAIN . 19)
            (G_FILE_ERROR_INTR . 20)
            (G_FILE_ERROR_IO . 21)
            (G_FILE_ERROR_PERM . 22)
            (G_FILE_ERROR_NOSYS . 23)
            (G_FILE_ERROR_FAILED . 24)
            (G_FILE_TEST_IS_REGULAR . 1)
            (G_FILE_TEST_IS_SYMLINK . 2)
            (G_FILE_TEST_IS_DIR . 4)
            (G_FILE_TEST_IS_EXECUTABLE . 8)
            (G_FILE_TEST_EXISTS . 16)
            (G_TRAVERSE_LEAVES . 1)
            (G_TRAVERSE_NON_LEAVES . 2)
            (G_TRAVERSE_ALL . 3)
            (G_TRAVERSE_MASK . 3)
            (G_TRAVERSE_LEAFS . 1)
            (G_TRAVERSE_NON_LEAFS . 2)
            (G_IN_ORDER . 0)
            (G_PRE_ORDER . 1)
            (G_POST_ORDER . 2)
            (G_LEVEL_ORDER . 3)
            (G_HOOK_FLAG_ACTIVE . 1)
            (G_HOOK_FLAG_IN_CALL . 2)
            (G_HOOK_FLAG_MASK . 15)
            (G_IO_IN . 1)
            (G_IO_OUT . 4)
            (G_IO_PRI . 2)
            (G_IO_ERR . 8)
            (G_IO_HUP . 16)
            (G_IO_NVAL . 32)
            (G_UNICODE_CONTROL . 0)
            (G_UNICODE_FORMAT . 1)
            (G_UNICODE_UNASSIGNED . 2)
            (G_UNICODE_PRIVATE_USE . 3)
            (G_UNICODE_SURROGATE . 4)
            (G_UNICODE_LOWERCASE_LETTER . 5)
            (G_UNICODE_MODIFIER_LETTER . 6)
            (G_UNICODE_OTHER_LETTER . 7)
            (G_UNICODE_TITLECASE_LETTER . 8)
            (G_UNICODE_UPPERCASE_LETTER . 9)
            (G_UNICODE_SPACING_MARK . 10)
            (G_UNICODE_ENCLOSING_MARK . 11)
            (G_UNICODE_NON_SPACING_MARK . 12)
            (G_UNICODE_DECIMAL_NUMBER . 13)
            (G_UNICODE_LETTER_NUMBER . 14)
            (G_UNICODE_OTHER_NUMBER . 15)
            (G_UNICODE_CONNECT_PUNCTUATION . 16)
            (G_UNICODE_DASH_PUNCTUATION . 17)
            (G_UNICODE_CLOSE_PUNCTUATION . 18)
            (G_UNICODE_FINAL_PUNCTUATION . 19)
            (G_UNICODE_INITIAL_PUNCTUATION . 20)
            (G_UNICODE_OTHER_PUNCTUATION . 21)
            (G_UNICODE_OPEN_PUNCTUATION . 22)
            (G_UNICODE_CURRENCY_SYMBOL . 23)
            (G_UNICODE_MODIFIER_SYMBOL . 24)
            (G_UNICODE_MATH_SYMBOL . 25)
            (G_UNICODE_OTHER_SYMBOL . 26)
            (G_UNICODE_LINE_SEPARATOR . 27)
            (G_UNICODE_PARAGRAPH_SEPARATOR . 28)
            (G_UNICODE_SPACE_SEPARATOR . 29)
            (G_UNICODE_BREAK_MANDATORY . 0)
            (G_UNICODE_BREAK_CARRIAGE_RETURN . 1)
            (G_UNICODE_BREAK_LINE_FEED . 2)
            (G_UNICODE_BREAK_COMBINING_MARK . 3)
            (G_UNICODE_BREAK_SURROGATE . 4)
            (G_UNICODE_BREAK_ZERO_WIDTH_SPACE . 5)
            (G_UNICODE_BREAK_INSEPARABLE . 6)
            (G_UNICODE_BREAK_NON_BREAKING_GLUE . 7)
            (G_UNICODE_BREAK_CONTINGENT . 8)
            (G_UNICODE_BREAK_SPACE . 9)
            (G_UNICODE_BREAK_AFTER . 10)
            (G_UNICODE_BREAK_BEFORE . 11)
            (G_UNICODE_BREAK_BEFORE_AND_AFTER . 12)
            (G_UNICODE_BREAK_HYPHEN . 13)
            (G_UNICODE_BREAK_NON_STARTER . 14)
            (G_UNICODE_BREAK_OPEN_PUNCTUATION . 15)
            (G_UNICODE_BREAK_CLOSE_PUNCTUATION . 16)
            (G_UNICODE_BREAK_QUOTATION . 17)
            (G_UNICODE_BREAK_EXCLAMATION . 18)
            (G_UNICODE_BREAK_IDEOGRAPHIC . 19)
            (G_UNICODE_BREAK_NUMERIC . 20)
            (G_UNICODE_BREAK_INFIX_SEPARATOR . 21)
            (G_UNICODE_BREAK_SYMBOL . 22)
            (G_UNICODE_BREAK_ALPHABETIC . 23)
            (G_UNICODE_BREAK_PREFIX . 24)
            (G_UNICODE_BREAK_POSTFIX . 25)
            (G_UNICODE_BREAK_COMPLEX_CONTEXT . 26)
            (G_UNICODE_BREAK_AMBIGUOUS . 27)
            (G_UNICODE_BREAK_UNKNOWN . 28)
            (G_UNICODE_BREAK_NEXT_LINE . 29)
            (G_UNICODE_BREAK_WORD_JOINER . 30)
            (G_UNICODE_BREAK_HANGUL_L_JAMO . 31)
            (G_UNICODE_BREAK_HANGUL_V_JAMO . 32)
            (G_UNICODE_BREAK_HANGUL_T_JAMO . 33)
            (G_UNICODE_BREAK_HANGUL_LV_SYLLABLE . 34)
            (G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE . 35)
            (G_UNICODE_BREAK_CLOSE_PARANTHESIS . 36)
            (G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER
              .
              37)
            (G_UNICODE_BREAK_HEBREW_LETTER . 38)
            (G_UNICODE_BREAK_REGIONAL_INDICATOR . 39)
            (G_UNICODE_BREAK_EMOJI_BASE . 40)
            (G_UNICODE_BREAK_EMOJI_MODIFIER . 41)
            (G_UNICODE_BREAK_ZERO_WIDTH_JOINER . 42)
            (G_UNICODE_SCRIPT_INVALID_CODE . -1)
            (G_UNICODE_SCRIPT_COMMON . 0)
            (G_UNICODE_SCRIPT_INHERITED . 1)
            (G_UNICODE_SCRIPT_ARABIC . 2)
            (G_UNICODE_SCRIPT_ARMENIAN . 3)
            (G_UNICODE_SCRIPT_BENGALI . 4)
            (G_UNICODE_SCRIPT_BOPOMOFO . 5)
            (G_UNICODE_SCRIPT_CHEROKEE . 6)
            (G_UNICODE_SCRIPT_COPTIC . 7)
            (G_UNICODE_SCRIPT_CYRILLIC . 8)
            (G_UNICODE_SCRIPT_DESERET . 9)
            (G_UNICODE_SCRIPT_DEVANAGARI . 10)
            (G_UNICODE_SCRIPT_ETHIOPIC . 11)
            (G_UNICODE_SCRIPT_GEORGIAN . 12)
            (G_UNICODE_SCRIPT_GOTHIC . 13)
            (G_UNICODE_SCRIPT_GREEK . 14)
            (G_UNICODE_SCRIPT_GUJARATI . 15)
            (G_UNICODE_SCRIPT_GURMUKHI . 16)
            (G_UNICODE_SCRIPT_HAN . 17)
            (G_UNICODE_SCRIPT_HANGUL . 18)
            (G_UNICODE_SCRIPT_HEBREW . 19)
            (G_UNICODE_SCRIPT_HIRAGANA . 20)
            (G_UNICODE_SCRIPT_KANNADA . 21)
            (G_UNICODE_SCRIPT_KATAKANA . 22)
            (G_UNICODE_SCRIPT_KHMER . 23)
            (G_UNICODE_SCRIPT_LAO . 24)
            (G_UNICODE_SCRIPT_LATIN . 25)
            (G_UNICODE_SCRIPT_MALAYALAM . 26)
            (G_UNICODE_SCRIPT_MONGOLIAN . 27)
            (G_UNICODE_SCRIPT_MYANMAR . 28)
            (G_UNICODE_SCRIPT_OGHAM . 29)
            (G_UNICODE_SCRIPT_OLD_ITALIC . 30)
            (G_UNICODE_SCRIPT_ORIYA . 31)
            (G_UNICODE_SCRIPT_RUNIC . 32)
            (G_UNICODE_SCRIPT_SINHALA . 33)
            (G_UNICODE_SCRIPT_SYRIAC . 34)
            (G_UNICODE_SCRIPT_TAMIL . 35)
            (G_UNICODE_SCRIPT_TELUGU . 36)
            (G_UNICODE_SCRIPT_THAANA . 37)
            (G_UNICODE_SCRIPT_THAI . 38)
            (G_UNICODE_SCRIPT_TIBETAN . 39)
            (G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL . 40)
            (G_UNICODE_SCRIPT_YI . 41)
            (G_UNICODE_SCRIPT_TAGALOG . 42)
            (G_UNICODE_SCRIPT_HANUNOO . 43)
            (G_UNICODE_SCRIPT_BUHID . 44)
            (G_UNICODE_SCRIPT_TAGBANWA . 45)
            (G_UNICODE_SCRIPT_BRAILLE . 46)
            (G_UNICODE_SCRIPT_CYPRIOT . 47)
            (G_UNICODE_SCRIPT_LIMBU . 48)
            (G_UNICODE_SCRIPT_OSMANYA . 49)
            (G_UNICODE_SCRIPT_SHAVIAN . 50)
            (G_UNICODE_SCRIPT_LINEAR_B . 51)
            (G_UNICODE_SCRIPT_TAI_LE . 52)
            (G_UNICODE_SCRIPT_UGARITIC . 53)
            (G_UNICODE_SCRIPT_NEW_TAI_LUE . 54)
            (G_UNICODE_SCRIPT_BUGINESE . 55)
            (G_UNICODE_SCRIPT_GLAGOLITIC . 56)
            (G_UNICODE_SCRIPT_TIFINAGH . 57)
            (G_UNICODE_SCRIPT_SYLOTI_NAGRI . 58)
            (G_UNICODE_SCRIPT_OLD_PERSIAN . 59)
            (G_UNICODE_SCRIPT_KHAROSHTHI . 60)
            (G_UNICODE_SCRIPT_UNKNOWN . 61)
            (G_UNICODE_SCRIPT_BALINESE . 62)
            (G_UNICODE_SCRIPT_CUNEIFORM . 63)
            (G_UNICODE_SCRIPT_PHOENICIAN . 64)
            (G_UNICODE_SCRIPT_PHAGS_PA . 65)
            (G_UNICODE_SCRIPT_NKO . 66)
            (G_UNICODE_SCRIPT_KAYAH_LI . 67)
            (G_UNICODE_SCRIPT_LEPCHA . 68)
            (G_UNICODE_SCRIPT_REJANG . 69)
            (G_UNICODE_SCRIPT_SUNDANESE . 70)
            (G_UNICODE_SCRIPT_SAURASHTRA . 71)
            (G_UNICODE_SCRIPT_CHAM . 72)
            (G_UNICODE_SCRIPT_OL_CHIKI . 73)
            (G_UNICODE_SCRIPT_VAI . 74)
            (G_UNICODE_SCRIPT_CARIAN . 75)
            (G_UNICODE_SCRIPT_LYCIAN . 76)
            (G_UNICODE_SCRIPT_LYDIAN . 77)
            (G_UNICODE_SCRIPT_AVESTAN . 78)
            (G_UNICODE_SCRIPT_BAMUM . 79)
            (G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS . 80)
            (G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC . 81)
            (G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI . 82)
            (G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN . 83)
            (G_UNICODE_SCRIPT_JAVANESE . 84)
            (G_UNICODE_SCRIPT_KAITHI . 85)
            (G_UNICODE_SCRIPT_LISU . 86)
            (G_UNICODE_SCRIPT_MEETEI_MAYEK . 87)
            (G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN . 88)
            (G_UNICODE_SCRIPT_OLD_TURKIC . 89)
            (G_UNICODE_SCRIPT_SAMARITAN . 90)
            (G_UNICODE_SCRIPT_TAI_THAM . 91)
            (G_UNICODE_SCRIPT_TAI_VIET . 92)
            (G_UNICODE_SCRIPT_BATAK . 93)
            (G_UNICODE_SCRIPT_BRAHMI . 94)
            (G_UNICODE_SCRIPT_MANDAIC . 95)
            (G_UNICODE_SCRIPT_CHAKMA . 96)
            (G_UNICODE_SCRIPT_MEROITIC_CURSIVE . 97)
            (G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS . 98)
            (G_UNICODE_SCRIPT_MIAO . 99)
            (G_UNICODE_SCRIPT_SHARADA . 100)
            (G_UNICODE_SCRIPT_SORA_SOMPENG . 101)
            (G_UNICODE_SCRIPT_TAKRI . 102)
            (G_UNICODE_SCRIPT_BASSA_VAH . 103)
            (G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN . 104)
            (G_UNICODE_SCRIPT_DUPLOYAN . 105)
            (G_UNICODE_SCRIPT_ELBASAN . 106)
            (G_UNICODE_SCRIPT_GRANTHA . 107)
            (G_UNICODE_SCRIPT_KHOJKI . 108)
            (G_UNICODE_SCRIPT_KHUDAWADI . 109)
            (G_UNICODE_SCRIPT_LINEAR_A . 110)
            (G_UNICODE_SCRIPT_MAHAJANI . 111)
            (G_UNICODE_SCRIPT_MANICHAEAN . 112)
            (G_UNICODE_SCRIPT_MENDE_KIKAKUI . 113)
            (G_UNICODE_SCRIPT_MODI . 114)
            (G_UNICODE_SCRIPT_MRO . 115)
            (G_UNICODE_SCRIPT_NABATAEAN . 116)
            (G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN . 117)
            (G_UNICODE_SCRIPT_OLD_PERMIC . 118)
            (G_UNICODE_SCRIPT_PAHAWH_HMONG . 119)
            (G_UNICODE_SCRIPT_PALMYRENE . 120)
            (G_UNICODE_SCRIPT_PAU_CIN_HAU . 121)
            (G_UNICODE_SCRIPT_PSALTER_PAHLAVI . 122)
            (G_UNICODE_SCRIPT_SIDDHAM . 123)
            (G_UNICODE_SCRIPT_TIRHUTA . 124)
            (G_UNICODE_SCRIPT_WARANG_CITI . 125)
            (G_UNICODE_SCRIPT_AHOM . 126)
            (G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS . 127)
            (G_UNICODE_SCRIPT_HATRAN . 128)
            (G_UNICODE_SCRIPT_MULTANI . 129)
            (G_UNICODE_SCRIPT_OLD_HUNGARIAN . 130)
            (G_UNICODE_SCRIPT_SIGNWRITING . 131)
            (G_UNICODE_SCRIPT_ADLAM . 132)
            (G_UNICODE_SCRIPT_BHAIKSUKI . 133)
            (G_UNICODE_SCRIPT_MARCHEN . 134)
            (G_UNICODE_SCRIPT_NEWA . 135)
            (G_UNICODE_SCRIPT_OSAGE . 136)
            (G_UNICODE_SCRIPT_TANGUT . 137)
            (G_NORMALIZE_DEFAULT . 0)
            (G_NORMALIZE_NFD . 0)
            (G_NORMALIZE_DEFAULT_COMPOSE . 1)
            (G_NORMALIZE_NFC . 1)
            (G_NORMALIZE_ALL . 2)
            (G_NORMALIZE_NFKD . 2)
            (G_NORMALIZE_ALL_COMPOSE . 3)
            (G_NORMALIZE_NFKC . 3)
            (G_IO_ERROR_NONE . 0)
            (G_IO_ERROR_AGAIN . 1)
            (G_IO_ERROR_INVAL . 2)
            (G_IO_ERROR_UNKNOWN . 3)
            (G_IO_CHANNEL_ERROR_FBIG . 0)
            (G_IO_CHANNEL_ERROR_INVAL . 1)
            (G_IO_CHANNEL_ERROR_IO . 2)
            (G_IO_CHANNEL_ERROR_ISDIR . 3)
            (G_IO_CHANNEL_ERROR_NOSPC . 4)
            (G_IO_CHANNEL_ERROR_NXIO . 5)
            (G_IO_CHANNEL_ERROR_OVERFLOW . 6)
            (G_IO_CHANNEL_ERROR_PIPE . 7)
            (G_IO_CHANNEL_ERROR_FAILED . 8)
            (G_IO_STATUS_ERROR . 0)
            (G_IO_STATUS_NORMAL . 1)
            (G_IO_STATUS_EOF . 2)
            (G_IO_STATUS_AGAIN . 3)
            (G_SEEK_CUR . 0)
            (G_SEEK_SET . 1)
            (G_SEEK_END . 2)
            (G_IO_FLAG_APPEND . 1)
            (G_IO_FLAG_NONBLOCK . 2)
            (G_IO_FLAG_IS_READABLE . 4)
            (G_IO_FLAG_IS_WRITABLE . 8)
            (G_IO_FLAG_IS_WRITEABLE . 8)
            (G_IO_FLAG_IS_SEEKABLE . 16)
            (G_IO_FLAG_MASK . 31)
            (G_IO_FLAG_GET_MASK . 31)
            (G_IO_FLAG_SET_MASK . 3)
            (G_KEY_FILE_ERROR_UNKNOWN_ENCODING . 0)
            (G_KEY_FILE_ERROR_PARSE . 1)
            (G_KEY_FILE_ERROR_NOT_FOUND . 2)
            (G_KEY_FILE_ERROR_KEY_NOT_FOUND . 3)
            (G_KEY_FILE_ERROR_GROUP_NOT_FOUND . 4)
            (G_KEY_FILE_ERROR_INVALID_VALUE . 5)
            (G_KEY_FILE_NONE . 0)
            (G_KEY_FILE_KEEP_COMMENTS . 1)
            (G_KEY_FILE_KEEP_TRANSLATIONS . 2)
            (G_MARKUP_ERROR_BAD_UTF8 . 0)
            (G_MARKUP_ERROR_EMPTY . 1)
            (G_MARKUP_ERROR_PARSE . 2)
            (G_MARKUP_ERROR_UNKNOWN_ELEMENT . 3)
            (G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE . 4)
            (G_MARKUP_ERROR_INVALID_CONTENT . 5)
            (G_MARKUP_ERROR_MISSING_ATTRIBUTE . 6)
            (G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG . 1)
            (G_MARKUP_TREAT_CDATA_AS_TEXT . 2)
            (G_MARKUP_PREFIX_ERROR_POSITION . 4)
            (G_MARKUP_IGNORE_QUALIFIED . 8)
            (G_MARKUP_COLLECT_INVALID . 0)
            (G_MARKUP_COLLECT_STRING . 1)
            (G_MARKUP_COLLECT_STRDUP . 2)
            (G_MARKUP_COLLECT_BOOLEAN . 3)
            (G_MARKUP_COLLECT_TRISTATE . 4)
            (G_MARKUP_COLLECT_OPTIONAL . 65536)
            (G_VARIANT_CLASS_BOOLEAN . 98)
            (G_VARIANT_CLASS_BYTE . 121)
            (G_VARIANT_CLASS_INT16 . 110)
            (G_VARIANT_CLASS_UINT16 . 113)
            (G_VARIANT_CLASS_INT32 . 105)
            (G_VARIANT_CLASS_UINT32 . 117)
            (G_VARIANT_CLASS_INT64 . 120)
            (G_VARIANT_CLASS_UINT64 . 116)
            (G_VARIANT_CLASS_HANDLE . 104)
            (G_VARIANT_CLASS_DOUBLE . 100)
            (G_VARIANT_CLASS_STRING . 115)
            (G_VARIANT_CLASS_OBJECT_PATH . 111)
            (G_VARIANT_CLASS_SIGNATURE . 103)
            (G_VARIANT_CLASS_VARIANT . 118)
            (G_VARIANT_CLASS_MAYBE . 109)
            (G_VARIANT_CLASS_ARRAY . 97)
            (G_VARIANT_CLASS_TUPLE . 40)
            (G_VARIANT_CLASS_DICT_ENTRY . 123)
            (G_VARIANT_PARSE_ERROR_FAILED . 0)
            (G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED . 1)
            (G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE . 2)
            (G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED
              .
              3)
            (G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END . 4)
            (G_VARIANT_PARSE_ERROR_INVALID_CHARACTER . 5)
            (G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING . 6)
            (G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH . 7)
            (G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE . 8)
            (G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING . 9)
            (G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE . 10)
            (G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE . 11)
            (G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG . 12)
            (G_VARIANT_PARSE_ERROR_TYPE_ERROR . 13)
            (G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN . 14)
            (G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD . 15)
            (G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT
              .
              16)
            (G_VARIANT_PARSE_ERROR_VALUE_EXPECTED . 17)
            (G_LOG_FLAG_RECURSION . 1)
            (G_LOG_FLAG_FATAL . 2)
            (G_LOG_LEVEL_ERROR . 4)
            (G_LOG_LEVEL_CRITICAL . 8)
            (G_LOG_LEVEL_WARNING . 16)
            (G_LOG_LEVEL_MESSAGE . 32)
            (G_LOG_LEVEL_INFO . 64)
            (G_LOG_LEVEL_DEBUG . 128)
            (G_LOG_LEVEL_MASK . -4)
            (G_LOG_WRITER_HANDLED . 1)
            (G_LOG_WRITER_UNHANDLED . 0)
            (G_OPTION_FLAG_NONE . 0)
            (G_OPTION_FLAG_HIDDEN . 1)
            (G_OPTION_FLAG_IN_MAIN . 2)
            (G_OPTION_FLAG_REVERSE . 4)
            (G_OPTION_FLAG_NO_ARG . 8)
            (G_OPTION_FLAG_FILENAME . 16)
            (G_OPTION_FLAG_OPTIONAL_ARG . 32)
            (G_OPTION_FLAG_NOALIAS . 64)
            (G_OPTION_ARG_NONE . 0)
            (G_OPTION_ARG_STRING . 1)
            (G_OPTION_ARG_INT . 2)
            (G_OPTION_ARG_CALLBACK . 3)
            (G_OPTION_ARG_FILENAME . 4)
            (G_OPTION_ARG_STRING_ARRAY . 5)
            (G_OPTION_ARG_FILENAME_ARRAY . 6)
            (G_OPTION_ARG_DOUBLE . 7)
            (G_OPTION_ARG_INT64 . 8)
            (G_OPTION_ERROR_UNKNOWN_OPTION . 0)
            (G_OPTION_ERROR_BAD_VALUE . 1)
            (G_OPTION_ERROR_FAILED . 2)
            (G_REGEX_ERROR_COMPILE . 0)
            (G_REGEX_ERROR_OPTIMIZE . 1)
            (G_REGEX_ERROR_REPLACE . 2)
            (G_REGEX_ERROR_MATCH . 3)
            (G_REGEX_ERROR_INTERNAL . 4)
            (G_REGEX_ERROR_STRAY_BACKSLASH . 101)
            (G_REGEX_ERROR_MISSING_CONTROL_CHAR . 102)
            (G_REGEX_ERROR_UNRECOGNIZED_ESCAPE . 103)
            (G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER . 104)
            (G_REGEX_ERROR_QUANTIFIER_TOO_BIG . 105)
            (G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS
              .
              106)
            (G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS
              .
              107)
            (G_REGEX_ERROR_RANGE_OUT_OF_ORDER . 108)
            (G_REGEX_ERROR_NOTHING_TO_REPEAT . 109)
            (G_REGEX_ERROR_UNRECOGNIZED_CHARACTER . 112)
            (G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS
              .
              113)
            (G_REGEX_ERROR_UNMATCHED_PARENTHESIS . 114)
            (G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE
              .
              115)
            (G_REGEX_ERROR_UNTERMINATED_COMMENT . 118)
            (G_REGEX_ERROR_EXPRESSION_TOO_LARGE . 120)
            (G_REGEX_ERROR_MEMORY_ERROR . 121)
            (G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND . 125)
            (G_REGEX_ERROR_MALFORMED_CONDITION . 126)
            (G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES
              .
              127)
            (G_REGEX_ERROR_ASSERTION_EXPECTED . 128)
            (G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME . 130)
            (G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED
              .
              131)
            (G_REGEX_ERROR_HEX_CODE_TOO_LARGE . 134)
            (G_REGEX_ERROR_INVALID_CONDITION . 135)
            (G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND
              .
              136)
            (G_REGEX_ERROR_INFINITE_LOOP . 140)
            (G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR
              .
              142)
            (G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME . 143)
            (G_REGEX_ERROR_MALFORMED_PROPERTY . 146)
            (G_REGEX_ERROR_UNKNOWN_PROPERTY . 147)
            (G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG . 148)
            (G_REGEX_ERROR_TOO_MANY_SUBPATTERNS . 149)
            (G_REGEX_ERROR_INVALID_OCTAL_VALUE . 151)
            (G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE . 154)
            (G_REGEX_ERROR_DEFINE_REPETION . 155)
            (G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS
              .
              156)
            (G_REGEX_ERROR_MISSING_BACK_REFERENCE . 157)
            (G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE . 158)
            (G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN
              .
              159)
            (G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB
              .
              160)
            (G_REGEX_ERROR_NUMBER_TOO_BIG . 161)
            (G_REGEX_ERROR_MISSING_SUBPATTERN_NAME . 162)
            (G_REGEX_ERROR_MISSING_DIGIT . 163)
            (G_REGEX_ERROR_INVALID_DATA_CHARACTER . 164)
            (G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME . 165)
            (G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED
              .
              166)
            (G_REGEX_ERROR_INVALID_CONTROL_CHAR . 168)
            (G_REGEX_ERROR_MISSING_NAME . 169)
            (G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS . 171)
            (G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES . 172)
            (G_REGEX_ERROR_NAME_TOO_LONG . 175)
            (G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE . 176)
            (G_REGEX_CASELESS . 1)
            (G_REGEX_MULTILINE . 2)
            (G_REGEX_DOTALL . 4)
            (G_REGEX_EXTENDED . 8)
            (G_REGEX_ANCHORED . 16)
            (G_REGEX_DOLLAR_ENDONLY . 32)
            (G_REGEX_UNGREEDY . 512)
            (G_REGEX_RAW . 2048)
            (G_REGEX_NO_AUTO_CAPTURE . 4096)
            (G_REGEX_OPTIMIZE . 8192)
            (G_REGEX_FIRSTLINE . 262144)
            (G_REGEX_DUPNAMES . 524288)
            (G_REGEX_NEWLINE_CR . 1048576)
            (G_REGEX_NEWLINE_LF . 2097152)
            (G_REGEX_NEWLINE_CRLF . 3145728)
            (G_REGEX_NEWLINE_ANYCRLF . 5242880)
            (G_REGEX_BSR_ANYCRLF . 8388608)
            (G_REGEX_JAVASCRIPT_COMPAT . 33554432)
            (G_REGEX_MATCH_ANCHORED . 16)
            (G_REGEX_MATCH_NOTBOL . 128)
            (G_REGEX_MATCH_NOTEOL . 256)
            (G_REGEX_MATCH_NOTEMPTY . 1024)
            (G_REGEX_MATCH_PARTIAL . 32768)
            (G_REGEX_MATCH_NEWLINE_CR . 1048576)
            (G_REGEX_MATCH_NEWLINE_LF . 2097152)
            (G_REGEX_MATCH_NEWLINE_CRLF . 3145728)
            (G_REGEX_MATCH_NEWLINE_ANY . 4194304)
            (G_REGEX_MATCH_NEWLINE_ANYCRLF . 5242880)
            (G_REGEX_MATCH_BSR_ANYCRLF . 8388608)
            (G_REGEX_MATCH_BSR_ANY . 16777216)
            (G_REGEX_MATCH_PARTIAL_SOFT . 32768)
            (G_REGEX_MATCH_PARTIAL_HARD . 134217728)
            (G_REGEX_MATCH_NOTEMPTY_ATSTART . 268435456)
            (G_ERR_UNKNOWN . 0)
            (G_ERR_UNEXP_EOF . 1)
            (G_ERR_UNEXP_EOF_IN_STRING . 2)
            (G_ERR_UNEXP_EOF_IN_COMMENT . 3)
            (G_ERR_NON_DIGIT_IN_CONST . 4)
            (G_ERR_DIGIT_RADIX . 5)
            (G_ERR_FLOAT_RADIX . 6)
            (G_ERR_FLOAT_MALFORMED . 7)
            (G_TOKEN_EOF . 0)
            (G_TOKEN_LEFT_PAREN . 40)
            (G_TOKEN_RIGHT_PAREN . 41)
            (G_TOKEN_LEFT_CURLY . 123)
            (G_TOKEN_RIGHT_CURLY . 125)
            (G_TOKEN_LEFT_BRACE . 91)
            (G_TOKEN_RIGHT_BRACE . 93)
            (G_TOKEN_EQUAL_SIGN . 61)
            (G_TOKEN_COMMA . 44)
            (G_TOKEN_NONE . 256)
            (G_TOKEN_ERROR . 257)
            (G_TOKEN_CHAR . 258)
            (G_TOKEN_BINARY . 259)
            (G_TOKEN_OCTAL . 260)
            (G_TOKEN_INT . 261)
            (G_TOKEN_HEX . 262)
            (G_TOKEN_FLOAT . 263)
            (G_TOKEN_STRING . 264)
            (G_TOKEN_SYMBOL . 265)
            (G_TOKEN_IDENTIFIER . 266)
            (G_TOKEN_IDENTIFIER_NULL . 267)
            (G_TOKEN_COMMENT_SINGLE . 268)
            (G_TOKEN_COMMENT_MULTI . 269)
            (G_TOKEN_LAST . 270)
            (G_SHELL_ERROR_BAD_QUOTING . 0)
            (G_SHELL_ERROR_EMPTY_STRING . 1)
            (G_SHELL_ERROR_FAILED . 2)
            (G_SLICE_CONFIG_ALWAYS_MALLOC . 1)
            (G_SLICE_CONFIG_BYPASS_MAGAZINES . 2)
            (G_SLICE_CONFIG_WORKING_SET_MSECS . 3)
            (G_SLICE_CONFIG_COLOR_INCREMENT . 4)
            (G_SLICE_CONFIG_CHUNK_SIZES . 5)
            (G_SLICE_CONFIG_CONTENTION_COUNTER . 6)
            (G_SPAWN_ERROR_FORK . 0)
            (G_SPAWN_ERROR_READ . 1)
            (G_SPAWN_ERROR_CHDIR . 2)
            (G_SPAWN_ERROR_ACCES . 3)
            (G_SPAWN_ERROR_PERM . 4)
            (G_SPAWN_ERROR_TOO_BIG . 5)
            (G_SPAWN_ERROR_2BIG . 5)
            (G_SPAWN_ERROR_NOEXEC . 6)
            (G_SPAWN_ERROR_NAMETOOLONG . 7)
            (G_SPAWN_ERROR_NOENT . 8)
            (G_SPAWN_ERROR_NOMEM . 9)
            (G_SPAWN_ERROR_NOTDIR . 10)
            (G_SPAWN_ERROR_LOOP . 11)
            (G_SPAWN_ERROR_TXTBUSY . 12)
            (G_SPAWN_ERROR_IO . 13)
            (G_SPAWN_ERROR_NFILE . 14)
            (G_SPAWN_ERROR_MFILE . 15)
            (G_SPAWN_ERROR_INVAL . 16)
            (G_SPAWN_ERROR_ISDIR . 17)
            (G_SPAWN_ERROR_LIBBAD . 18)
            (G_SPAWN_ERROR_FAILED . 19)
            (G_SPAWN_DEFAULT . 0)
            (G_SPAWN_LEAVE_DESCRIPTORS_OPEN . 1)
            (G_SPAWN_DO_NOT_REAP_CHILD . 2)
            (G_SPAWN_SEARCH_PATH . 4)
            (G_SPAWN_STDOUT_TO_DEV_NULL . 8)
            (G_SPAWN_STDERR_TO_DEV_NULL . 16)
            (G_SPAWN_CHILD_INHERITS_STDIN . 32)
            (G_SPAWN_FILE_AND_ARGV_ZERO . 64)
            (G_SPAWN_SEARCH_PATH_FROM_ENVP . 128)
            (G_SPAWN_CLOEXEC_PIPES . 256)
            (G_ASCII_ALNUM . 1)
            (G_ASCII_ALPHA . 2)
            (G_ASCII_CNTRL . 4)
            (G_ASCII_DIGIT . 8)
            (G_ASCII_GRAPH . 16)
            (G_ASCII_LOWER . 32)
            (G_ASCII_PRINT . 64)
            (G_ASCII_PUNCT . 128)
            (G_ASCII_SPACE . 256)
            (G_ASCII_UPPER . 512)
            (G_ASCII_XDIGIT . 1024)
            (G_TEST_TRAP_SILENCE_STDOUT . 128)
            (G_TEST_TRAP_SILENCE_STDERR . 256)
            (G_TEST_TRAP_INHERIT_STDIN . 512)
            (G_TEST_SUBPROCESS_INHERIT_STDIN . 1)
            (G_TEST_SUBPROCESS_INHERIT_STDOUT . 2)
            (G_TEST_SUBPROCESS_INHERIT_STDERR . 4)
            (G_TEST_LOG_NONE . 0)
            (G_TEST_LOG_ERROR . 1)
            (G_TEST_LOG_START_BINARY . 2)
            (G_TEST_LOG_LIST_CASE . 3)
            (G_TEST_LOG_SKIP_CASE . 4)
            (G_TEST_LOG_START_CASE . 5)
            (G_TEST_LOG_STOP_CASE . 6)
            (G_TEST_LOG_MIN_RESULT . 7)
            (G_TEST_LOG_MAX_RESULT . 8)
            (G_TEST_LOG_MESSAGE . 9)
            (G_TEST_LOG_START_SUITE . 10)
            (G_TEST_LOG_STOP_SUITE . 11)
            (G_TEST_DIST . 0)
            (G_TEST_BUILT . 1)
            (G_THREAD_PRIORITY_LOW . 0)
            (G_THREAD_PRIORITY_NORMAL . 1)
            (G_THREAD_PRIORITY_HIGH . 2)
            (G_THREAD_PRIORITY_URGENT . 3)
            (QOS_CLASS_USER_INTERACTIVE . 33)
            (QOS_CLASS_USER_INITIATED . 25)
            (QOS_CLASS_DEFAULT . 21)
            (QOS_CLASS_UTILITY . 17)
            (QOS_CLASS_BACKGROUND . 9)
            (QOS_CLASS_UNSPECIFIED . 0)
            (G_TYPE_DEBUG_NONE . 0)
            (G_TYPE_DEBUG_OBJECTS . 1)
            (G_TYPE_DEBUG_SIGNALS . 2)
            (G_TYPE_DEBUG_INSTANCE_COUNT . 4)
            (G_TYPE_DEBUG_MASK . 7)
            (G_TYPE_FLAG_CLASSED . 1)
            (G_TYPE_FLAG_INSTANTIATABLE . 2)
            (G_TYPE_FLAG_DERIVABLE . 4)
            (G_TYPE_FLAG_DEEP_DERIVABLE . 8)
            (G_TYPE_FLAG_ABSTRACT . 16)
            (G_TYPE_FLAG_VALUE_ABSTRACT . 32)
            (G_PARAM_READABLE . 1)
            (G_PARAM_WRITABLE . 2)
            (G_PARAM_READWRITE . 3)
            (G_PARAM_CONSTRUCT . 4)
            (G_PARAM_CONSTRUCT_ONLY . 8)
            (G_PARAM_LAX_VALIDATION . 16)
            (G_PARAM_STATIC_NAME . 32)
            (G_PARAM_PRIVATE . 32)
            (G_PARAM_STATIC_NICK . 64)
            (G_PARAM_STATIC_BLURB . 128)
            (G_PARAM_EXPLICIT_NOTIFY . 1073741824)
            (G_PARAM_DEPRECATED . 2147483648)
            (G_SIGNAL_RUN_FIRST . 1)
            (G_SIGNAL_RUN_LAST . 2)
            (G_SIGNAL_RUN_CLEANUP . 4)
            (G_SIGNAL_NO_RECURSE . 8)
            (G_SIGNAL_DETAILED . 16)
            (G_SIGNAL_ACTION . 32)
            (G_SIGNAL_NO_HOOKS . 64)
            (G_SIGNAL_MUST_COLLECT . 128)
            (G_SIGNAL_DEPRECATED . 256)
            (G_CONNECT_AFTER . 1)
            (G_CONNECT_SWAPPED . 2)
            (G_SIGNAL_MATCH_ID . 1)
            (G_SIGNAL_MATCH_DETAIL . 2)
            (G_SIGNAL_MATCH_CLOSURE . 4)
            (G_SIGNAL_MATCH_FUNC . 8)
            (G_SIGNAL_MATCH_DATA . 16)
            (G_SIGNAL_MATCH_UNBLOCKED . 32)
            (G_BINDING_DEFAULT . 0)
            (G_BINDING_BIDIRECTIONAL . 1)
            (G_BINDING_SYNC_CREATE . 2)
            (G_BINDING_INVERT_BOOLEAN . 4)
            (G_APP_INFO_CREATE_NONE . 0)
            (G_APP_INFO_CREATE_NEEDS_TERMINAL . 1)
            (G_APP_INFO_CREATE_SUPPORTS_URIS . 2)
            (G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION
              .
              4)
            (G_CONVERTER_NO_FLAGS . 0)
            (G_CONVERTER_INPUT_AT_END . 1)
            (G_CONVERTER_FLUSH . 2)
            (G_CONVERTER_ERROR . 0)
            (G_CONVERTER_CONVERTED . 1)
            (G_CONVERTER_FINISHED . 2)
            (G_CONVERTER_FLUSHED . 3)
            (G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN . 0)
            (G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN . 1)
            (G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN . 2)
            (G_DATA_STREAM_NEWLINE_TYPE_LF . 0)
            (G_DATA_STREAM_NEWLINE_TYPE_CR . 1)
            (G_DATA_STREAM_NEWLINE_TYPE_CR_LF . 2)
            (G_DATA_STREAM_NEWLINE_TYPE_ANY . 3)
            (G_FILE_ATTRIBUTE_TYPE_INVALID . 0)
            (G_FILE_ATTRIBUTE_TYPE_STRING . 1)
            (G_FILE_ATTRIBUTE_TYPE_BYTE_STRING . 2)
            (G_FILE_ATTRIBUTE_TYPE_BOOLEAN . 3)
            (G_FILE_ATTRIBUTE_TYPE_UINT32 . 4)
            (G_FILE_ATTRIBUTE_TYPE_INT32 . 5)
            (G_FILE_ATTRIBUTE_TYPE_UINT64 . 6)
            (G_FILE_ATTRIBUTE_TYPE_INT64 . 7)
            (G_FILE_ATTRIBUTE_TYPE_OBJECT . 8)
            (G_FILE_ATTRIBUTE_TYPE_STRINGV . 9)
            (G_FILE_ATTRIBUTE_INFO_NONE . 0)
            (G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE . 1)
            (G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED . 2)
            (G_FILE_ATTRIBUTE_STATUS_UNSET . 0)
            (G_FILE_ATTRIBUTE_STATUS_SET . 1)
            (G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING . 2)
            (G_FILE_QUERY_INFO_NONE . 0)
            (G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS . 1)
            (G_FILE_CREATE_NONE . 0)
            (G_FILE_CREATE_PRIVATE . 1)
            (G_FILE_CREATE_REPLACE_DESTINATION . 2)
            (G_FILE_MEASURE_NONE . 0)
            (G_FILE_MEASURE_REPORT_ANY_ERROR . 2)
            (G_FILE_MEASURE_APPARENT_SIZE . 4)
            (G_FILE_MEASURE_NO_XDEV . 8)
            (G_MOUNT_MOUNT_NONE . 0)
            (G_MOUNT_UNMOUNT_NONE . 0)
            (G_MOUNT_UNMOUNT_FORCE . 1)
            (G_DRIVE_START_NONE . 0)
            (G_DRIVE_START_STOP_TYPE_UNKNOWN . 0)
            (G_DRIVE_START_STOP_TYPE_SHUTDOWN . 1)
            (G_DRIVE_START_STOP_TYPE_NETWORK . 2)
            (G_DRIVE_START_STOP_TYPE_MULTIDISK . 3)
            (G_DRIVE_START_STOP_TYPE_PASSWORD . 4)
            (G_FILE_COPY_NONE . 0)
            (G_FILE_COPY_OVERWRITE . 1)
            (G_FILE_COPY_BACKUP . 2)
            (G_FILE_COPY_NOFOLLOW_SYMLINKS . 4)
            (G_FILE_COPY_ALL_METADATA . 8)
            (G_FILE_COPY_NO_FALLBACK_FOR_MOVE . 16)
            (G_FILE_COPY_TARGET_DEFAULT_PERMS . 32)
            (G_FILE_MONITOR_NONE . 0)
            (G_FILE_MONITOR_WATCH_MOUNTS . 1)
            (G_FILE_MONITOR_SEND_MOVED . 2)
            (G_FILE_MONITOR_WATCH_HARD_LINKS . 4)
            (G_FILE_MONITOR_WATCH_MOVES . 8)
            (G_FILE_TYPE_UNKNOWN . 0)
            (G_FILE_TYPE_REGULAR . 1)
            (G_FILE_TYPE_DIRECTORY . 2)
            (G_FILE_TYPE_SYMBOLIC_LINK . 3)
            (G_FILE_TYPE_SPECIAL . 4)
            (G_FILE_TYPE_SHORTCUT . 5)
            (G_FILE_TYPE_MOUNTABLE . 6)
            (G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS . 0)
            (G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL . 1)
            (G_FILESYSTEM_PREVIEW_TYPE_NEVER . 2)
            (G_FILE_MONITOR_EVENT_CHANGED . 0)
            (G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT . 1)
            (G_FILE_MONITOR_EVENT_DELETED . 2)
            (G_FILE_MONITOR_EVENT_CREATED . 3)
            (G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED . 4)
            (G_FILE_MONITOR_EVENT_PRE_UNMOUNT . 5)
            (G_FILE_MONITOR_EVENT_UNMOUNTED . 6)
            (G_FILE_MONITOR_EVENT_MOVED . 7)
            (G_FILE_MONITOR_EVENT_RENAMED . 8)
            (G_FILE_MONITOR_EVENT_MOVED_IN . 9)
            (G_FILE_MONITOR_EVENT_MOVED_OUT . 10)
            (G_IO_ERROR_FAILED . 0)
            (G_IO_ERROR_NOT_FOUND . 1)
            (G_IO_ERROR_EXISTS . 2)
            (G_IO_ERROR_IS_DIRECTORY . 3)
            (G_IO_ERROR_NOT_DIRECTORY . 4)
            (G_IO_ERROR_NOT_EMPTY . 5)
            (G_IO_ERROR_NOT_REGULAR_FILE . 6)
            (G_IO_ERROR_NOT_SYMBOLIC_LINK . 7)
            (G_IO_ERROR_NOT_MOUNTABLE_FILE . 8)
            (G_IO_ERROR_FILENAME_TOO_LONG . 9)
            (G_IO_ERROR_INVALID_FILENAME . 10)
            (G_IO_ERROR_TOO_MANY_LINKS . 11)
            (G_IO_ERROR_NO_SPACE . 12)
            (G_IO_ERROR_INVALID_ARGUMENT . 13)
            (G_IO_ERROR_PERMISSION_DENIED . 14)
            (G_IO_ERROR_NOT_SUPPORTED . 15)
            (G_IO_ERROR_NOT_MOUNTED . 16)
            (G_IO_ERROR_ALREADY_MOUNTED . 17)
            (G_IO_ERROR_CLOSED . 18)
            (G_IO_ERROR_CANCELLED . 19)
            (G_IO_ERROR_PENDING . 20)
            (G_IO_ERROR_READ_ONLY . 21)
            (G_IO_ERROR_CANT_CREATE_BACKUP . 22)
            (G_IO_ERROR_WRONG_ETAG . 23)
            (G_IO_ERROR_TIMED_OUT . 24)
            (G_IO_ERROR_WOULD_RECURSE . 25)
            (G_IO_ERROR_BUSY . 26)
            (G_IO_ERROR_WOULD_BLOCK . 27)
            (G_IO_ERROR_HOST_NOT_FOUND . 28)
            (G_IO_ERROR_WOULD_MERGE . 29)
            (G_IO_ERROR_FAILED_HANDLED . 30)
            (G_IO_ERROR_TOO_MANY_OPEN_FILES . 31)
            (G_IO_ERROR_NOT_INITIALIZED . 32)
            (G_IO_ERROR_ADDRESS_IN_USE . 33)
            (G_IO_ERROR_PARTIAL_INPUT . 34)
            (G_IO_ERROR_INVALID_DATA . 35)
            (G_IO_ERROR_DBUS_ERROR . 36)
            (G_IO_ERROR_HOST_UNREACHABLE . 37)
            (G_IO_ERROR_NETWORK_UNREACHABLE . 38)
            (G_IO_ERROR_CONNECTION_REFUSED . 39)
            (G_IO_ERROR_PROXY_FAILED . 40)
            (G_IO_ERROR_PROXY_AUTH_FAILED . 41)
            (G_IO_ERROR_PROXY_NEED_AUTH . 42)
            (G_IO_ERROR_PROXY_NOT_ALLOWED . 43)
            (G_IO_ERROR_BROKEN_PIPE . 44)
            (G_IO_ERROR_CONNECTION_CLOSED . 44)
            (G_IO_ERROR_NOT_CONNECTED . 45)
            (G_IO_ERROR_MESSAGE_TOO_LARGE . 46)
            (G_ASK_PASSWORD_NEED_PASSWORD . 1)
            (G_ASK_PASSWORD_NEED_USERNAME . 2)
            (G_ASK_PASSWORD_NEED_DOMAIN . 4)
            (G_ASK_PASSWORD_SAVING_SUPPORTED . 8)
            (G_ASK_PASSWORD_ANONYMOUS_SUPPORTED . 16)
            (G_PASSWORD_SAVE_NEVER . 0)
            (G_PASSWORD_SAVE_FOR_SESSION . 1)
            (G_PASSWORD_SAVE_PERMANENTLY . 2)
            (G_MOUNT_OPERATION_HANDLED . 0)
            (G_MOUNT_OPERATION_ABORTED . 1)
            (G_MOUNT_OPERATION_UNHANDLED . 2)
            (G_OUTPUT_STREAM_SPLICE_NONE . 0)
            (G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE . 1)
            (G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET . 2)
            (G_IO_STREAM_SPLICE_NONE . 0)
            (G_IO_STREAM_SPLICE_CLOSE_STREAM1 . 1)
            (G_IO_STREAM_SPLICE_CLOSE_STREAM2 . 2)
            (G_IO_STREAM_SPLICE_WAIT_FOR_BOTH . 4)
            (G_EMBLEM_ORIGIN_UNKNOWN . 0)
            (G_EMBLEM_ORIGIN_DEVICE . 1)
            (G_EMBLEM_ORIGIN_LIVEMETADATA . 2)
            (G_EMBLEM_ORIGIN_TAG . 3)
            (G_RESOLVER_ERROR_NOT_FOUND . 0)
            (G_RESOLVER_ERROR_TEMPORARY_FAILURE . 1)
            (G_RESOLVER_ERROR_INTERNAL . 2)
            (G_RESOLVER_RECORD_SRV . 1)
            (G_RESOLVER_RECORD_MX . 2)
            (G_RESOLVER_RECORD_TXT . 3)
            (G_RESOLVER_RECORD_SOA . 4)
            (G_RESOLVER_RECORD_NS . 5)
            (G_RESOURCE_ERROR_NOT_FOUND . 0)
            (G_RESOURCE_ERROR_INTERNAL . 1)
            (G_RESOURCE_FLAGS_NONE . 0)
            (G_RESOURCE_FLAGS_COMPRESSED . 1)
            (G_RESOURCE_LOOKUP_FLAGS_NONE . 0)
            (G_SOCKET_FAMILY_INVALID . 0)
            (G_SOCKET_FAMILY_UNIX . 1)
            (G_SOCKET_FAMILY_IPV4 . 2)
            (G_SOCKET_FAMILY_IPV6 . 30)
            (G_SOCKET_TYPE_INVALID . 0)
            (G_SOCKET_TYPE_STREAM . 1)
            (G_SOCKET_TYPE_DATAGRAM . 2)
            (G_SOCKET_TYPE_SEQPACKET . 3)
            (G_SOCKET_MSG_NONE . 0)
            (G_SOCKET_MSG_OOB . 1)
            (G_SOCKET_MSG_PEEK . 2)
            (G_SOCKET_MSG_DONTROUTE . 4)
            (G_SOCKET_PROTOCOL_UNKNOWN . -1)
            (G_SOCKET_PROTOCOL_DEFAULT . 0)
            (G_SOCKET_PROTOCOL_TCP . 6)
            (G_SOCKET_PROTOCOL_UDP . 17)
            (G_SOCKET_PROTOCOL_SCTP . 132)
            (G_ZLIB_COMPRESSOR_FORMAT_ZLIB . 0)
            (G_ZLIB_COMPRESSOR_FORMAT_GZIP . 1)
            (G_ZLIB_COMPRESSOR_FORMAT_RAW . 2)
            (G_UNIX_SOCKET_ADDRESS_INVALID . 0)
            (G_UNIX_SOCKET_ADDRESS_ANONYMOUS . 1)
            (G_UNIX_SOCKET_ADDRESS_PATH . 2)
            (G_UNIX_SOCKET_ADDRESS_ABSTRACT . 3)
            (G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED . 4)
            (G_BUS_TYPE_STARTER . -1)
            (G_BUS_TYPE_NONE . 0)
            (G_BUS_TYPE_SYSTEM . 1)
            (G_BUS_TYPE_SESSION . 2)
            (G_BUS_NAME_OWNER_FLAGS_NONE . 0)
            (G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT . 1)
            (G_BUS_NAME_OWNER_FLAGS_REPLACE . 2)
            (G_BUS_NAME_WATCHER_FLAGS_NONE . 0)
            (G_BUS_NAME_WATCHER_FLAGS_AUTO_START . 1)
            (G_DBUS_PROXY_FLAGS_NONE . 0)
            (G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES . 1)
            (G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS . 2)
            (G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START . 4)
            (G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES
              .
              8)
            (G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION
              .
              16)
            (G_DBUS_ERROR_FAILED . 0)
            (G_DBUS_ERROR_NO_MEMORY . 1)
            (G_DBUS_ERROR_SERVICE_UNKNOWN . 2)
            (G_DBUS_ERROR_NAME_HAS_NO_OWNER . 3)
            (G_DBUS_ERROR_NO_REPLY . 4)
            (G_DBUS_ERROR_IO_ERROR . 5)
            (G_DBUS_ERROR_BAD_ADDRESS . 6)
            (G_DBUS_ERROR_NOT_SUPPORTED . 7)
            (G_DBUS_ERROR_LIMITS_EXCEEDED . 8)
            (G_DBUS_ERROR_ACCESS_DENIED . 9)
            (G_DBUS_ERROR_AUTH_FAILED . 10)
            (G_DBUS_ERROR_NO_SERVER . 11)
            (G_DBUS_ERROR_TIMEOUT . 12)
            (G_DBUS_ERROR_NO_NETWORK . 13)
            (G_DBUS_ERROR_ADDRESS_IN_USE . 14)
            (G_DBUS_ERROR_DISCONNECTED . 15)
            (G_DBUS_ERROR_INVALID_ARGS . 16)
            (G_DBUS_ERROR_FILE_NOT_FOUND . 17)
            (G_DBUS_ERROR_FILE_EXISTS . 18)
            (G_DBUS_ERROR_UNKNOWN_METHOD . 19)
            (G_DBUS_ERROR_TIMED_OUT . 20)
            (G_DBUS_ERROR_MATCH_RULE_NOT_FOUND . 21)
            (G_DBUS_ERROR_MATCH_RULE_INVALID . 22)
            (G_DBUS_ERROR_SPAWN_EXEC_FAILED . 23)
            (G_DBUS_ERROR_SPAWN_FORK_FAILED . 24)
            (G_DBUS_ERROR_SPAWN_CHILD_EXITED . 25)
            (G_DBUS_ERROR_SPAWN_CHILD_SIGNALED . 26)
            (G_DBUS_ERROR_SPAWN_FAILED . 27)
            (G_DBUS_ERROR_SPAWN_SETUP_FAILED . 28)
            (G_DBUS_ERROR_SPAWN_CONFIG_INVALID . 29)
            (G_DBUS_ERROR_SPAWN_SERVICE_INVALID . 30)
            (G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND . 31)
            (G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID . 32)
            (G_DBUS_ERROR_SPAWN_FILE_INVALID . 33)
            (G_DBUS_ERROR_SPAWN_NO_MEMORY . 34)
            (G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN . 35)
            (G_DBUS_ERROR_INVALID_SIGNATURE . 36)
            (G_DBUS_ERROR_INVALID_FILE_CONTENT . 37)
            (G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN
              .
              38)
            (G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN . 39)
            (G_DBUS_ERROR_OBJECT_PATH_IN_USE . 40)
            (G_DBUS_ERROR_UNKNOWN_OBJECT . 41)
            (G_DBUS_ERROR_UNKNOWN_INTERFACE . 42)
            (G_DBUS_ERROR_UNKNOWN_PROPERTY . 43)
            (G_DBUS_ERROR_PROPERTY_READ_ONLY . 44)
            (G_DBUS_CONNECTION_FLAGS_NONE . 0)
            (G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT
              .
              1)
            (G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER
              .
              2)
            (G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS
              .
              4)
            (G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION
              .
              8)
            (G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING
              .
              16)
            (G_DBUS_CAPABILITY_FLAGS_NONE . 0)
            (G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING . 1)
            (G_DBUS_CALL_FLAGS_NONE . 0)
            (G_DBUS_CALL_FLAGS_NO_AUTO_START . 1)
            (G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION
              .
              2)
            (G_DBUS_MESSAGE_TYPE_INVALID . 0)
            (G_DBUS_MESSAGE_TYPE_METHOD_CALL . 1)
            (G_DBUS_MESSAGE_TYPE_METHOD_RETURN . 2)
            (G_DBUS_MESSAGE_TYPE_ERROR . 3)
            (G_DBUS_MESSAGE_TYPE_SIGNAL . 4)
            (G_DBUS_MESSAGE_FLAGS_NONE . 0)
            (G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED . 1)
            (G_DBUS_MESSAGE_FLAGS_NO_AUTO_START . 2)
            (G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION
              .
              4)
            (G_DBUS_MESSAGE_HEADER_FIELD_INVALID . 0)
            (G_DBUS_MESSAGE_HEADER_FIELD_PATH . 1)
            (G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE . 2)
            (G_DBUS_MESSAGE_HEADER_FIELD_MEMBER . 3)
            (G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME . 4)
            (G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL . 5)
            (G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION . 6)
            (G_DBUS_MESSAGE_HEADER_FIELD_SENDER . 7)
            (G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE . 8)
            (G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS . 9)
            (G_DBUS_PROPERTY_INFO_FLAGS_NONE . 0)
            (G_DBUS_PROPERTY_INFO_FLAGS_READABLE . 1)
            (G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE . 2)
            (G_DBUS_SUBTREE_FLAGS_NONE . 0)
            (G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES
              .
              1)
            (G_DBUS_SERVER_FLAGS_NONE . 0)
            (G_DBUS_SERVER_FLAGS_RUN_IN_THREAD . 1)
            (G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS
              .
              2)
            (G_DBUS_SIGNAL_FLAGS_NONE . 0)
            (G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE . 1)
            (G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE . 2)
            (G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH . 4)
            (G_DBUS_SEND_MESSAGE_FLAGS_NONE . 0)
            (G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL . 1)
            (G_CREDENTIALS_TYPE_INVALID . 0)
            (G_CREDENTIALS_TYPE_LINUX_UCRED . 1)
            (G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED . 2)
            (G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED . 3)
            (G_CREDENTIALS_TYPE_SOLARIS_UCRED . 4)
            (G_CREDENTIALS_TYPE_NETBSD_UNPCBID . 5)
            (G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN . 66)
            (G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN . 108)
            (G_APPLICATION_FLAGS_NONE . 0)
            (G_APPLICATION_IS_SERVICE . 1)
            (G_APPLICATION_IS_LAUNCHER . 2)
            (G_APPLICATION_HANDLES_OPEN . 4)
            (G_APPLICATION_HANDLES_COMMAND_LINE . 8)
            (G_APPLICATION_SEND_ENVIRONMENT . 16)
            (G_APPLICATION_NON_UNIQUE . 32)
            (G_APPLICATION_CAN_OVERRIDE_APP_ID . 64)
            (G_TLS_ERROR_UNAVAILABLE . 0)
            (G_TLS_ERROR_MISC . 1)
            (G_TLS_ERROR_BAD_CERTIFICATE . 2)
            (G_TLS_ERROR_NOT_TLS . 3)
            (G_TLS_ERROR_HANDSHAKE . 4)
            (G_TLS_ERROR_CERTIFICATE_REQUIRED . 5)
            (G_TLS_ERROR_EOF . 6)
            (G_TLS_CERTIFICATE_UNKNOWN_CA . 1)
            (G_TLS_CERTIFICATE_BAD_IDENTITY . 2)
            (G_TLS_CERTIFICATE_NOT_ACTIVATED . 4)
            (G_TLS_CERTIFICATE_EXPIRED . 8)
            (G_TLS_CERTIFICATE_REVOKED . 16)
            (G_TLS_CERTIFICATE_INSECURE . 32)
            (G_TLS_CERTIFICATE_GENERIC_ERROR . 64)
            (G_TLS_CERTIFICATE_VALIDATE_ALL . 127)
            (G_TLS_AUTHENTICATION_NONE . 0)
            (G_TLS_AUTHENTICATION_REQUESTED . 1)
            (G_TLS_AUTHENTICATION_REQUIRED . 2)
            (G_TLS_REHANDSHAKE_NEVER . 0)
            (G_TLS_REHANDSHAKE_SAFELY . 1)
            (G_TLS_REHANDSHAKE_UNSAFELY . 2)
            (G_TLS_PASSWORD_NONE . 0)
            (G_TLS_PASSWORD_RETRY . 2)
            (G_TLS_PASSWORD_MANY_TRIES . 4)
            (G_TLS_PASSWORD_FINAL_TRY . 8)
            (G_TLS_INTERACTION_UNHANDLED . 0)
            (G_TLS_INTERACTION_HANDLED . 1)
            (G_TLS_INTERACTION_FAILED . 2)
            (G_DBUS_INTERFACE_SKELETON_FLAGS_NONE . 0)
            (G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD
              .
              1)
            (G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE . 0)
            (G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START
              .
              1)
            (G_TLS_DATABASE_VERIFY_NONE . 0)
            (G_TLS_DATABASE_LOOKUP_NONE . 0)
            (G_TLS_DATABASE_LOOKUP_KEYPAIR . 1)
            (G_TLS_CERTIFICATE_REQUEST_NONE . 0)
            (G_IO_MODULE_SCOPE_NONE . 0)
            (G_IO_MODULE_SCOPE_BLOCK_DUPLICATES . 1)
            (G_SOCKET_CLIENT_RESOLVING . 0)
            (G_SOCKET_CLIENT_RESOLVED . 1)
            (G_SOCKET_CLIENT_CONNECTING . 2)
            (G_SOCKET_CLIENT_CONNECTED . 3)
            (G_SOCKET_CLIENT_PROXY_NEGOTIATING . 4)
            (G_SOCKET_CLIENT_PROXY_NEGOTIATED . 5)
            (G_SOCKET_CLIENT_TLS_HANDSHAKING . 6)
            (G_SOCKET_CLIENT_TLS_HANDSHAKED . 7)
            (G_SOCKET_CLIENT_COMPLETE . 8)
            (G_SOCKET_LISTENER_BINDING . 0)
            (G_SOCKET_LISTENER_BOUND . 1)
            (G_SOCKET_LISTENER_LISTENING . 2)
            (G_SOCKET_LISTENER_LISTENED . 3)
            (G_TEST_DBUS_NONE . 0)
            (G_SUBPROCESS_FLAGS_NONE . 0)
            (G_SUBPROCESS_FLAGS_STDIN_PIPE . 1)
            (G_SUBPROCESS_FLAGS_STDIN_INHERIT . 2)
            (G_SUBPROCESS_FLAGS_STDOUT_PIPE . 4)
            (G_SUBPROCESS_FLAGS_STDOUT_SILENCE . 8)
            (G_SUBPROCESS_FLAGS_STDERR_PIPE . 16)
            (G_SUBPROCESS_FLAGS_STDERR_SILENCE . 32)
            (G_SUBPROCESS_FLAGS_STDERR_MERGE . 64)
            (G_SUBPROCESS_FLAGS_INHERIT_FDS . 128)
            (G_NOTIFICATION_PRIORITY_NORMAL . 0)
            (G_NOTIFICATION_PRIORITY_LOW . 1)
            (G_NOTIFICATION_PRIORITY_HIGH . 2)
            (G_NOTIFICATION_PRIORITY_URGENT . 3)
            (G_NETWORK_CONNECTIVITY_LOCAL . 1)
            (G_NETWORK_CONNECTIVITY_LIMITED . 2)
            (G_NETWORK_CONNECTIVITY_PORTAL . 3)
            (G_NETWORK_CONNECTIVITY_FULL . 4)
            (G_MODULE_BIND_LAZY . 1)
            (G_MODULE_BIND_LOCAL . 2)
            (G_MODULE_BIND_MASK . 3)
            (G_SETTINGS_BIND_DEFAULT . 0)
            (G_SETTINGS_BIND_GET . 1)
            (G_SETTINGS_BIND_SET . 2)
            (G_SETTINGS_BIND_NO_SENSITIVITY . 4)
            (G_SETTINGS_BIND_GET_NO_CHANGES . 8)
            (G_SETTINGS_BIND_INVERT_BOOLEAN . 16)
            (G_FILE_ATTRIBUTE_STANDARD_TYPE
              .
              "standard::type")
            (G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN
              .
              "standard::is-hidden")
            (G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP
              .
              "standard::is-backup")
            (G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK
              .
              "standard::is-symlink")
            (G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL
              .
              "standard::is-virtual")
            (G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE
              .
              "standard::is-volatile")
            (G_FILE_ATTRIBUTE_STANDARD_NAME
              .
              "standard::name")
            (G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
              .
              "standard::display-name")
            (G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME
              .
              "standard::edit-name")
            (G_FILE_ATTRIBUTE_STANDARD_COPY_NAME
              .
              "standard::copy-name")
            (G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION
              .
              "standard::description")
            (G_FILE_ATTRIBUTE_STANDARD_ICON
              .
              "standard::icon")
            (G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON
              .
              "standard::symbolic-icon")
            (G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE
              .
              "standard::content-type")
            (G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE
              .
              "standard::fast-content-type")
            (G_FILE_ATTRIBUTE_STANDARD_SIZE
              .
              "standard::size")
            (G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE
              .
              "standard::allocated-size")
            (G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET
              .
              "standard::symlink-target")
            (G_FILE_ATTRIBUTE_STANDARD_TARGET_URI
              .
              "standard::target-uri")
            (G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER
              .
              "standard::sort-order")
            (G_FILE_ATTRIBUTE_ETAG_VALUE . "etag::value")
            (G_FILE_ATTRIBUTE_ID_FILE . "id::file")
            (G_FILE_ATTRIBUTE_ID_FILESYSTEM
              .
              "id::filesystem")
            (G_FILE_ATTRIBUTE_ACCESS_CAN_READ
              .
              "access::can-read")
            (G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE
              .
              "access::can-write")
            (G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE
              .
              "access::can-execute")
            (G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE
              .
              "access::can-delete")
            (G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH
              .
              "access::can-trash")
            (G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME
              .
              "access::can-rename")
            (G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT
              .
              "mountable::can-mount")
            (G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT
              .
              "mountable::can-unmount")
            (G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT
              .
              "mountable::can-eject")
            (G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE
              .
              "mountable::unix-device")
            (G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE
              .
              "mountable::unix-device-file")
            (G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI
              .
              "mountable::hal-udi")
            (G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START
              .
              "mountable::can-start")
            (G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED
              .
              "mountable::can-start-degraded")
            (G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP
              .
              "mountable::can-stop")
            (G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE
              .
              "mountable::start-stop-type")
            (G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL
              .
              "mountable::can-poll")
            (G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC
              .
              "mountable::is-media-check-automatic")
            (G_FILE_ATTRIBUTE_TIME_MODIFIED
              .
              "time::modified")
            (G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC
              .
              "time::modified-usec")
            (G_FILE_ATTRIBUTE_TIME_ACCESS . "time::access")
            (G_FILE_ATTRIBUTE_TIME_ACCESS_USEC
              .
              "time::access-usec")
            (G_FILE_ATTRIBUTE_TIME_CHANGED . "time::changed")
            (G_FILE_ATTRIBUTE_TIME_CHANGED_USEC
              .
              "time::changed-usec")
            (G_FILE_ATTRIBUTE_TIME_CREATED . "time::created")
            (G_FILE_ATTRIBUTE_TIME_CREATED_USEC
              .
              "time::created-usec")
            (G_FILE_ATTRIBUTE_UNIX_DEVICE . "unix::device")
            (G_FILE_ATTRIBUTE_UNIX_INODE . "unix::inode")
            (G_FILE_ATTRIBUTE_UNIX_MODE . "unix::mode")
            (G_FILE_ATTRIBUTE_UNIX_NLINK . "unix::nlink")
            (G_FILE_ATTRIBUTE_UNIX_UID . "unix::uid")
            (G_FILE_ATTRIBUTE_UNIX_GID . "unix::gid")
            (G_FILE_ATTRIBUTE_UNIX_RDEV . "unix::rdev")
            (G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE
              .
              "unix::block-size")
            (G_FILE_ATTRIBUTE_UNIX_BLOCKS . "unix::blocks")
            (G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT
              .
              "unix::is-mountpoint")
            (G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE
              .
              "dos::is-archive")
            (G_FILE_ATTRIBUTE_DOS_IS_SYSTEM
              .
              "dos::is-system")
            (G_FILE_ATTRIBUTE_OWNER_USER . "owner::user")
            (G_FILE_ATTRIBUTE_OWNER_USER_REAL
              .
              "owner::user-real")
            (G_FILE_ATTRIBUTE_OWNER_GROUP . "owner::group")
            (G_FILE_ATTRIBUTE_THUMBNAIL_PATH
              .
              "thumbnail::path")
            (G_FILE_ATTRIBUTE_THUMBNAILING_FAILED
              .
              "thumbnail::failed")
            (G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID
              .
              "thumbnail::is-valid")
            (G_FILE_ATTRIBUTE_PREVIEW_ICON . "preview::icon")
            (G_FILE_ATTRIBUTE_FILESYSTEM_SIZE
              .
              "filesystem::size")
            (G_FILE_ATTRIBUTE_FILESYSTEM_FREE
              .
              "filesystem::free")
            (G_FILE_ATTRIBUTE_FILESYSTEM_USED
              .
              "filesystem::used")
            (G_FILE_ATTRIBUTE_FILESYSTEM_TYPE
              .
              "filesystem::type")
            (G_FILE_ATTRIBUTE_FILESYSTEM_READONLY
              .
              "filesystem::readonly")
            (G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW
              .
              "filesystem::use-preview")
            (G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE
              .
              "filesystem::remote")
            (G_FILE_ATTRIBUTE_GVFS_BACKEND . "gvfs::backend")
            (G_FILE_ATTRIBUTE_SELINUX_CONTEXT
              .
              "selinux::context")
            (G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT
              .
              "trash::item-count")
            (G_FILE_ATTRIBUTE_TRASH_ORIG_PATH
              .
              "trash::orig-path")
            (G_FILE_ATTRIBUTE_TRASH_DELETION_DATE
              .
              "trash::deletion-date")
            (G_FILE_ATTRIBUTE_RECENT_MODIFIED
              .
              "recent::modified")
            (G_VOLUME_MONITOR_EXTENSION_POINT_NAME
              .
              "gio-volume-monitor")
            (G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME
              .
              "gio-native-volume-monitor")
            (G_NETWORK_MONITOR_EXTENSION_POINT_NAME
              .
              "gio-network-monitor")
            (G_PROXY_EXTENSION_POINT_NAME . "gio-proxy")
            (G_PROXY_RESOLVER_EXTENSION_POINT_NAME
              .
              "gio-proxy-resolver")
            (G_TLS_BACKEND_EXTENSION_POINT_NAME
              .
              "gio-tls-backend")
            (G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER
              .
              "1.3.6.1.5.5.7.3.1")
            (G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT
              .
              "1.3.6.1.5.5.7.3.2")
            (G_VFS_EXTENSION_POINT_NAME . "gio-vfs")
            (G_VOLUME_IDENTIFIER_KIND_HAL_UDI . "hal-udi")
            (G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE
              .
              "unix-device")
            (G_VOLUME_IDENTIFIER_KIND_LABEL . "label")
            (G_VOLUME_IDENTIFIER_KIND_UUID . "uuid")
            (G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT
              .
              "nfs-mount")
            (G_VOLUME_IDENTIFIER_KIND_CLASS . "class")
            (G_MENU_ATTRIBUTE_ACTION . "action")
            (G_MENU_ATTRIBUTE_ACTION_NAMESPACE
              .
              "action-namespace")
            (G_MENU_ATTRIBUTE_TARGET . "target")
            (G_MENU_ATTRIBUTE_LABEL . "label")
            (G_MENU_ATTRIBUTE_ICON . "icon")
            (G_MENU_LINK_SUBMENU . "submenu")
            (G_MENU_LINK_SECTION . "section"))))
    (lambda (k) (assq-ref sym-tab k))))
(export ffi-gio-symbol-val)

(define (unwrap-enum obj)
  (cond ((number? obj) obj)
        ((symbol? obj) (ffi-gio-symbol-val obj))
        ((fh-object? obj) (struct-ref obj 0))
        (else (error "type mismatch"))))

(define ffi-gio-types
  '("GAppLaunchContext" "GAppInfo" "GAsyncResult" "GAsyncInitable" 
    "GBufferedInputStream" "GBufferedOutputStream" "GCancellable" 
    "GCharsetConverter" "GConverter" "GConverterInputStream" 
    "GConverterOutputStream" "GDatagramBased" "GDataInputStream" 
    "GSimplePermission" "GZlibCompressor" "GZlibDecompressor" 
    "GSimpleActionGroup" "GRemoteActionGroup" "GDBusActionGroup" "GActionMap" 
    "GActionGroup" "GPropertyAction" "GSimpleAction" "GAction" "GApplication" 
    "GApplicationCommandLine" "GSettingsBackend" "GSettings" "GPermission" 
    "GMenuModel" "GNotification" "GDrive" "GFileEnumerator" "GFileMonitor" 
    "GFilterInputStream" "GFilterOutputStream" "GFile" "GFileInfo" 
    "GFileAttributeMatcher" "GFileAttributeInfo" "GFileAttributeInfoList" 
    "GFileDescriptorBased" "GFileInputStream" "GFileOutputStream" 
    "GFileIOStream" "GFileIcon" "GFilenameCompleter" "GIcon" "GInetAddress" 
    "GInetAddressMask" "GInetSocketAddress" "GNativeSocketAddress" 
    "GInputStream" "GInitable" "GIOModule" "GIOExtensionPoint" "GIOExtension" 
    "GIOSchedulerJob" "GIOStreamAdapter" "GLoadableIcon" "GBytesIcon" 
    "GMemoryInputStream" "GMemoryOutputStream" "GMount" "GMountOperation" 
    "GNetworkAddress" "GNetworkMonitor" "GNetworkService" "GOutputStream" 
    "GIOStream" "GSimpleIOStream" "GPollableInputStream" 
    "GPollableOutputStream" "GResolver" "GResource" "GSeekable" 
    "GSimpleAsyncResult" "GSocket" "GSocketControlMessage" "GSocketClient" 
    "GSocketConnection" "GSocketListener" "GSocketService" "GSocketAddress" 
    "GSocketAddressEnumerator" "GSocketConnectable" "GSrvTarget" "GTask" 
    "GTcpConnection" "GTcpWrapperConnection" "GThreadedSocketService" 
    "GDtlsConnection" "GDtlsClientConnection" "GDtlsServerConnection" 
    "GThemedIcon" "GTlsCertificate" "GTlsClientConnection" "GTlsConnection" 
    "GTlsDatabase" "GTlsFileDatabase" "GTlsInteraction" "GTlsPassword" 
    "GTlsServerConnection" "GVfs" "GProxyResolver" "GProxy" "GProxyAddress" 
    "GProxyAddressEnumerator" "GVolume" "GVolumeMonitor" "GInputVector" (
    struct . "_GInputVector") "GInputMessage" (struct . "_GInputMessage") 
    "GOutputVector" (struct . "_GOutputVector") "GOutputMessage" (struct . 
    "_GOutputMessage") "GCredentials" "GUnixCredentialsMessage" "GUnixFDList" 
    "GDBusMessage" "GDBusConnection" "GDBusProxy" "GDBusMethodInvocation" 
    "GDBusServer" "GDBusAuthObserver" "GDBusErrorEntry" "GDBusInterfaceVTable"
    "GDBusSubtreeVTable" "GDBusAnnotationInfo" "GDBusArgInfo" 
    "GDBusMethodInfo" "GDBusSignalInfo" "GDBusPropertyInfo" 
    "GDBusInterfaceInfo" "GDBusNodeInfo" "GDBusInterface" 
    "GDBusInterfaceSkeleton" "GDBusObject" "GDBusObjectSkeleton" 
    "GDBusObjectProxy" "GDBusObjectManager" "GDBusObjectManagerClient" 
    "GDBusObjectManagerServer" "GTestDBus" "GSubprocess" "GSubprocessLauncher"
    "GActionInterface" (struct . "_GActionInterface") "GActionGroupInterface"
    (struct . "_GActionGroupInterface") "GActionMapInterface" "GActionEntry" 
    (struct . "_GActionMapInterface") (struct . "_GActionEntry") 
    "GAppLaunchContextClass" "GAppLaunchContextPrivate" "GAppInfoIface" (
    struct . "_GAppInfoIface") (struct . "_GAppLaunchContext") (struct . 
    "_GAppLaunchContextClass") "GAppInfoMonitor" "GApplicationPrivate" 
    "GApplicationClass" (struct . "_GApplication") (struct . 
    "_GApplicationClass") "GApplicationCommandLinePrivate" 
    "GApplicationCommandLineClass" (struct . "_GApplicationCommandLine") (
    struct . "_GApplicationCommandLineClass") "GInitableIface" (struct . 
    "_GInitableIface") "GAsyncInitableIface" (struct . "_GAsyncInitableIface")
    "GAsyncResultIface" (struct . "_GAsyncResultIface") "GInputStreamClass" 
    "GInputStreamPrivate" (struct . "_GInputStream") (struct . 
    "_GInputStreamClass") "GFilterInputStreamClass" (struct . 
    "_GFilterInputStream") (struct . "_GFilterInputStreamClass") 
    "GBufferedInputStreamClass" "GBufferedInputStreamPrivate" (struct . 
    "_GBufferedInputStream") (struct . "_GBufferedInputStreamClass") 
    "GOutputStreamClass" "GOutputStreamPrivate" (struct . "_GOutputStream") (
    struct . "_GOutputStreamClass") "GFilterOutputStreamClass" (struct . 
    "_GFilterOutputStream") (struct . "_GFilterOutputStreamClass") 
    "GBufferedOutputStreamClass" "GBufferedOutputStreamPrivate" (struct . 
    "_GBufferedOutputStream") (struct . "_GBufferedOutputStreamClass") 
    "GCancellableClass" "GCancellablePrivate" (struct . "_GCancellable") (
    struct . "_GCancellableClass") "GConverterIface" (struct . 
    "_GConverterIface") "GCharsetConverterClass" (struct . 
    "_GCharsetConverterClass") "GConverterInputStreamClass" 
    "GConverterInputStreamPrivate" (struct . "_GConverterInputStream") (struct
    . "_GConverterInputStreamClass") "GConverterOutputStreamClass" 
    "GConverterOutputStreamPrivate" (struct . "_GConverterOutputStream") (
    struct . "_GConverterOutputStreamClass") "GCredentialsClass" 
    "GDatagramBasedInterface" (struct . "_GDatagramBasedInterface") 
    "GDataInputStreamClass" "GDataInputStreamPrivate" (struct . 
    "_GDataInputStream") (struct . "_GDataInputStreamClass") 
    "GDataOutputStream" "GDataOutputStreamClass" "GDataOutputStreamPrivate" (
    struct . "_GDataOutputStream") (struct . "_GDataOutputStreamClass") (
    struct . "_GDBusInterfaceVTable") "GDBusSubtreeEnumerateFunc" 
    "GDBusSubtreeIntrospectFunc" (struct . "_GDBusSubtreeVTable") (struct . 
    "_GDBusErrorEntry") (struct . "_GDBusAnnotationInfo") (struct . 
    "_GDBusArgInfo") (struct . "_GDBusMethodInfo") (struct . 
    "_GDBusSignalInfo") (struct . "_GDBusPropertyInfo") (struct . 
    "_GDBusInterfaceInfo") (struct . "_GDBusNodeInfo") "GDBusProxyClass" 
    "GDBusProxyPrivate" (struct . "_GDBusProxy") (struct . "_GDBusProxyClass")
    "GDriveIface" (struct . "_GDriveIface") "GDtlsConnectionInterface" (
    struct . "_GDtlsConnectionInterface") "GDtlsClientConnectionInterface" (
    struct . "_GDtlsClientConnectionInterface") 
    "GDtlsServerConnectionInterface" (struct . 
    "_GDtlsServerConnectionInterface") "GIconIface" (struct . "_GIconIface") 
    "GEmblem" "GEmblemClass" "GEmblemedIcon" "GEmblemedIconClass" 
    "GEmblemedIconPrivate" (struct . "_GEmblemedIcon") (struct . 
    "_GEmblemedIconClass") (struct . "_GFileAttributeInfo") (struct . 
    "_GFileAttributeInfoList") "GFileEnumeratorClass" "GFileEnumeratorPrivate"
    (struct . "_GFileEnumerator") (struct . "_GFileEnumeratorClass") 
    "GFileIface" (struct . "_GFileIface") "GFileIconClass" "GFileInfoClass" 
    "GFileInputStreamClass" "GFileInputStreamPrivate" (struct . 
    "_GFileInputStream") (struct . "_GFileInputStreamClass") 
    "GIOStreamPrivate" "GIOStreamClass" (struct . "_GIOStream") (struct . 
    "_GIOStreamClass") "GFileIOStreamClass" "GFileIOStreamPrivate" (struct . 
    "_GFileIOStream") (struct . "_GFileIOStreamClass") "GFileMonitorClass" 
    "GFileMonitorPrivate" (struct . "_GFileMonitor") (struct . 
    "_GFileMonitorClass") "GFilenameCompleterClass" (struct . 
    "_GFilenameCompleterClass") "GFileOutputStreamClass" 
    "GFileOutputStreamPrivate" (struct . "_GFileOutputStream") (struct . 
    "_GFileOutputStreamClass") "GInetAddressClass" "GInetAddressPrivate" (
    struct . "_GInetAddress") (struct . "_GInetAddressClass") 
    "GInetAddressMaskClass" "GInetAddressMaskPrivate" (struct . 
    "_GInetAddressMask") (struct . "_GInetAddressMaskClass") 
    "GSocketAddressClass" (struct . "_GSocketAddress") (struct . 
    "_GSocketAddressClass") "GInetSocketAddressClass" 
    "GInetSocketAddressPrivate" (struct . "_GInetSocketAddress") (struct . 
    "_GInetSocketAddressClass") "GIOModuleScope" "GIOModuleClass" 
    "GLoadableIconIface" (struct . "_GLoadableIconIface") 
    "GMemoryInputStreamClass" "GMemoryInputStreamPrivate" (struct . 
    "_GMemoryInputStream") (struct . "_GMemoryInputStreamClass") 
    "GMemoryOutputStreamClass" "GMemoryOutputStreamPrivate" (struct . 
    "_GMemoryOutputStream") (struct . "_GMemoryOutputStreamClass") 
    "GMountIface" (struct . "_GMountIface") "GMountOperationClass" 
    "GMountOperationPrivate" (struct . "_GMountOperation") (struct . 
    "_GMountOperationClass") "GVolumeMonitorClass" (struct . "_GVolumeMonitor"
    ) (struct . "_GVolumeMonitorClass") "GNativeVolumeMonitor" 
    "GNativeVolumeMonitorClass" (struct . "_GNativeVolumeMonitor") (struct . 
    "_GNativeVolumeMonitorClass") "GNetworkAddressClass" 
    "GNetworkAddressPrivate" (struct . "_GNetworkAddress") (struct . 
    "_GNetworkAddressClass") "GNetworkMonitorInterface" (struct . 
    "_GNetworkMonitorInterface") "GNetworkServiceClass" 
    "GNetworkServicePrivate" (struct . "_GNetworkService") (struct . 
    "_GNetworkServiceClass") "GPermissionPrivate" "GPermissionClass" (struct 
    . "_GPermission") (struct . "_GPermissionClass") 
    "GPollableInputStreamInterface" (struct . "_GPollableInputStreamInterface"
    ) "GPollableOutputStreamInterface" (struct . 
    "_GPollableOutputStreamInterface") "GProxyInterface" (struct . 
    "_GProxyInterface") "GProxyAddressClass" "GProxyAddressPrivate" (struct . 
    "_GProxyAddress") (struct . "_GProxyAddressClass") 
    "GSocketAddressEnumeratorClass" (struct . "_GSocketAddressEnumerator") (
    struct . "_GSocketAddressEnumeratorClass") "GProxyAddressEnumeratorClass" 
    "GProxyAddressEnumeratorPrivate" (struct . "_GProxyAddressEnumerator") (
    struct . "_GProxyAddressEnumeratorClass") "GProxyResolverInterface" (
    struct . "_GProxyResolverInterface") "GResolverPrivate" "GResolverClass" (
    struct . "_GResolver") (struct . "_GResolverClass") "GStaticResource" (
    struct . "_GStaticResource") "GSeekableIface" (struct . "_GSeekableIface")
    "GSettingsSchemaSource" "GSettingsSchema" "GSettingsSchemaKey" 
    "GSettingsPrivate" "GSettingsClass" (struct . "_GSettingsClass") (struct 
    . "_GSettings") "GSimpleActionGroupPrivate" "GSimpleActionGroupClass" (
    struct . "_GSimpleActionGroup") (struct . "_GSimpleActionGroupClass") 
    "GSimpleAsyncResultClass" "GSocketClientPrivate" "GSocketClientClass" (
    struct . "_GSocketClientClass") (struct . "_GSocketClient") 
    "GSocketConnectableIface" (struct . "_GSocketConnectableIface") 
    "GSocketPrivate" "GSocketClass" (struct . "_GSocketClass") (struct . 
    "_GSocket") "GSocketConnectionPrivate" "GSocketConnectionClass" (struct . 
    "_GSocketConnectionClass") (struct . "_GSocketConnection") 
    "GSocketControlMessagePrivate" "GSocketControlMessageClass" (struct . 
    "_GSocketControlMessageClass") (struct . "_GSocketControlMessage") 
    "GSocketListenerPrivate" "GSocketListenerClass" (struct . 
    "_GSocketListenerClass") (struct . "_GSocketListener") 
    "GSocketServicePrivate" "GSocketServiceClass" (struct . 
    "_GSocketServiceClass") (struct . "_GSocketService") 
    "GSimpleProxyResolver" "GSimpleProxyResolverPrivate" 
    "GSimpleProxyResolverClass" (struct . "_GSimpleProxyResolver") (struct . 
    "_GSimpleProxyResolverClass") "GTaskClass" "GTcpConnectionPrivate" 
    "GTcpConnectionClass" (struct . "_GTcpConnectionClass") (struct . 
    "_GTcpConnection") "GTcpWrapperConnectionPrivate" 
    "GTcpWrapperConnectionClass" (struct . "_GTcpWrapperConnectionClass") (
    struct . "_GTcpWrapperConnection") "GThemedIconClass" 
    "GThreadedSocketServicePrivate" "GThreadedSocketServiceClass" (struct . 
    "_GThreadedSocketServiceClass") (struct . "_GThreadedSocketService") 
    "GTlsBackend" "GTlsBackendInterface" (struct . "_GTlsBackendInterface") 
    "GTlsCertificateClass" "GTlsCertificatePrivate" (struct . 
    "_GTlsCertificate") (struct . "_GTlsCertificateClass") 
    "GTlsConnectionClass" "GTlsConnectionPrivate" (struct . "_GTlsConnection")
    (struct . "_GTlsConnectionClass") "GTlsClientConnectionInterface" (struct
    . "_GTlsClientConnectionInterface") "GTlsDatabaseClass" 
    "GTlsDatabasePrivate" (struct . "_GTlsDatabase") (struct . 
    "_GTlsDatabaseClass") "GTlsFileDatabaseInterface" (struct . 
    "_GTlsFileDatabaseInterface") "GTlsInteractionClass" 
    "GTlsInteractionPrivate" (struct . "_GTlsInteraction") (struct . 
    "_GTlsInteractionClass") "GTlsServerConnectionInterface" (struct . 
    "_GTlsServerConnectionInterface") "GTlsPasswordClass" 
    "GTlsPasswordPrivate" (struct . "_GTlsPassword") (struct . 
    "_GTlsPasswordClass") "GVfsClass" (struct . "_GVfs") (struct . 
    "_GVfsClass") "GVolumeIface" (struct . "_GVolumeIface") 
    "GZlibCompressorClass" (struct . "_GZlibCompressorClass") 
    "GZlibDecompressorClass" (struct . "_GZlibDecompressorClass") 
    "GDBusInterfaceIface" (struct . "_GDBusInterfaceIface") 
    "GDBusInterfaceSkeletonClass" "GDBusInterfaceSkeletonPrivate" (struct . 
    "_GDBusInterfaceSkeleton") (struct . "_GDBusInterfaceSkeletonClass") 
    "GDBusObjectIface" (struct . "_GDBusObjectIface") 
    "GDBusObjectSkeletonClass" "GDBusObjectSkeletonPrivate" (struct . 
    "_GDBusObjectSkeleton") (struct . "_GDBusObjectSkeletonClass") 
    "GDBusObjectProxyClass" "GDBusObjectProxyPrivate" (struct . 
    "_GDBusObjectProxy") (struct . "_GDBusObjectProxyClass") 
    "GDBusObjectManagerIface" (struct . "_GDBusObjectManagerIface") 
    "GDBusObjectManagerClientClass" "GDBusObjectManagerClientPrivate" (struct 
    . "_GDBusObjectManagerClient") (struct . "_GDBusObjectManagerClientClass")
    "GDBusObjectManagerServerClass" "GDBusObjectManagerServerPrivate" (struct
    . "_GDBusObjectManagerServer") (struct . "_GDBusObjectManagerServerClass"
    ) "GRemoteActionGroupInterface" (struct . "_GRemoteActionGroupInterface") 
    "GMenuModelPrivate" "GMenuModelClass" "GMenuAttributeIterPrivate" 
    "GMenuAttributeIterClass" "GMenuAttributeIter" "GMenuLinkIterPrivate" 
    "GMenuLinkIterClass" "GMenuLinkIter" (struct . "_GMenuModel") (struct . 
    "_GMenuModelClass") (struct . "_GMenuAttributeIter") (struct . 
    "_GMenuAttributeIterClass") (struct . "_GMenuLinkIter") (struct . 
    "_GMenuLinkIterClass") "GMenuItem" "GMenu" "GDBusMenuModel" "GListModel" 
    "GListModelInterface" "GListModel_autoptr" (struct . 
    "_GListModelInterface") "GListStore" "GListStoreClass" 
    "GListStore_autoptr" "GAction_autoptr" "GActionMap_autoptr" 
    "GAppInfo_autoptr" "GAppLaunchContext_autoptr" "GAppInfoMonitor_autoptr" 
    "GApplicationCommandLine_autoptr" "GApplication_autoptr" 
    "GAsyncInitable_autoptr" "GAsyncResult_autoptr" 
    "GBufferedInputStream_autoptr" "GBufferedOutputStream_autoptr" 
    "GBytesIcon_autoptr" "GCancellable_autoptr" "GCharsetConverter_autoptr" 
    "GConverter_autoptr" "GConverterInputStream_autoptr" 
    "GConverterOutputStream_autoptr" "GCredentials_autoptr" 
    "GDatagramBased_autoptr" "GDataInputStream_autoptr" 
    "GDataOutputStream_autoptr" "GDBusActionGroup_autoptr" 
    "GDBusAuthObserver_autoptr" "GDBusConnection_autoptr" 
    "GDBusInterface_autoptr" "GDBusInterfaceSkeleton_autoptr" 
    "GDBusMenuModel_autoptr" "GDBusMessage_autoptr" 
    "GDBusMethodInvocation_autoptr" "GDBusNodeInfo_autoptr" 
    "GDBusObject_autoptr" "GDBusObjectManagerClient_autoptr" 
    "GDBusObjectManager_autoptr" "GDBusObjectManagerServer_autoptr" 
    "GDBusObjectProxy_autoptr" "GDBusObjectSkeleton_autoptr" 
    "GDBusProxy_autoptr" "GDBusServer_autoptr" "GDrive_autoptr" 
    "GEmblemedIcon_autoptr" "GEmblem_autoptr" "GFileEnumerator_autoptr" 
    "GFile_autoptr" "GFileAttributeInfoList_autoptr" "GFileIcon_autoptr" 
    "GFileInfo_autoptr" "GFileInputStream_autoptr" "GFileIOStream_autoptr" 
    "GFileMonitor_autoptr" "GFilenameCompleter_autoptr" 
    "GFileOutputStream_autoptr" "GFilterInputStream_autoptr" 
    "GFilterOutputStream_autoptr" "GIcon_autoptr" "GInetAddress_autoptr" 
    "GInetAddressMask_autoptr" "GInetSocketAddress_autoptr" 
    "GInitable_autoptr" "GInputStream_autoptr" "GIOModule_autoptr" 
    "GIOStream_autoptr" "GLoadableIcon_autoptr" "GMemoryInputStream_autoptr" 
    "GMemoryOutputStream_autoptr" "GMenu_autoptr" "GMenuItem_autoptr" 
    "GMenuModel_autoptr" "GMenuAttributeIter_autoptr" "GMenuLinkIter_autoptr" 
    "GMount_autoptr" "GMountOperation_autoptr" "GNativeVolumeMonitor_autoptr" 
    "GNetworkAddress_autoptr" "GNetworkMonitor_autoptr" 
    "GNetworkService_autoptr" "GNotification_autoptr" "GOutputStream_autoptr" 
    "GPermission_autoptr" "GPollableInputStream_autoptr" 
    "GPollableOutputStream_autoptr" "GPropertyAction_autoptr" 
    "GProxyAddressEnumerator_autoptr" "GProxyAddress_autoptr" "GProxy_autoptr"
    "GProxyResolver_autoptr" "GRemoteActionGroup_autoptr" "GResolver_autoptr"
    "GSeekable_autoptr" "GSettingsBackend_autoptr" "GSettingsSchema_autoptr" 
    "GSettings_autoptr" "GSimpleActionGroup_autoptr" "GSimpleAction_autoptr" 
    "GSimpleAsyncResult_autoptr" "GSimplePermission_autoptr" 
    "GSimpleProxyResolver_autoptr" "GSocketAddressEnumerator_autoptr" 
    "GSocketAddress_autoptr" "GSocketClient_autoptr" 
    "GSocketConnectable_autoptr" "GSocketConnection_autoptr" 
    "GSocketControlMessage_autoptr" "GSocket_autoptr" 
    "GSocketListener_autoptr" "GSocketService_autoptr" "GSubprocess_autoptr" 
    "GSubprocessLauncher_autoptr" "GTask_autoptr" "GTcpConnection_autoptr" 
    "GTcpWrapperConnection_autoptr" "GTestDBus_autoptr" "GThemedIcon_autoptr" 
    "GThreadedSocketService_autoptr" "GTlsBackend_autoptr" 
    "GTlsCertificate_autoptr" "GTlsClientConnection_autoptr" 
    "GTlsConnection_autoptr" "GTlsDatabase_autoptr" "GTlsFileDatabase_autoptr"
    "GTlsInteraction_autoptr" "GTlsPassword_autoptr" 
    "GTlsServerConnection_autoptr" "GVfs_autoptr" "GVolume_autoptr" 
    "GVolumeMonitor_autoptr" "GZlibCompressor_autoptr" 
    "GZlibDecompressor_autoptr"))
;;(export ffi-giotypes)

;; --- last line ---
