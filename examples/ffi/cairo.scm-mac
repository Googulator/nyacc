;; generated with `guild compile-ffi ffi/cairo.ffi'
;;
;; from C foo_t: (make-foo_t)) [or (make-foo_t val)] => obj
;; to recover  : (fh-object-ref obj) => val 

(define-module (ffi cairo)
  #:export (M_PI M_2PI make-cairo-unit-matrix)
  #:use-module (system ffi-help-rt)
  #:use-module ((system foreign) #:prefix ffi:)
  #:use-module (bytestructures guile)
  )
(define link-lib (dynamic-link "libcairo"))

;; int cairo_version(void);
(define ~cairo_version #f)
(define (cairo_version)
  (unless
    ~cairo_version
    (set! ~cairo_version
      (fh-link-proc
        "cairo_version"
        ffi:int
        (list)
        link-lib)))
  (let () (~cairo_version)))
(export cairo_version)

;; const char *cairo_version_string(void);
(define ~cairo_version_string #f)
(define (cairo_version_string)
  (unless
    ~cairo_version_string
    (set! ~cairo_version_string
      (fh-link-proc
        "cairo_version_string"
        ffi-void*
        (list)
        link-lib)))
  (let () (~cairo_version_string)))
(export cairo_version_string)

;; typedef int cairo_bool_t;
(define unwrap-cairo_bool_t unwrap~fixed)
(define wrap-cairo_bool_t identity)
(define-public cairo_bool_t*-desc (bs:pointer int))
(define-fh-pointer-type cairo_bool_t* cairo_bool_t*-desc cairo_bool_t*? 
 make-cairo_bool_t*)
(export cairo_bool_t* cairo_bool_t*? make-cairo_bool_t*)

;; typedef struct _cairo cairo_t;
(define-public cairo_t-desc 'void)
(define-public cairo_t*-desc (bs:pointer cairo_t-desc))
(define-fh-pointer-type cairo_t* cairo_t*-desc cairo_t*? make-cairo_t*)
(export cairo_t* cairo_t*? make-cairo_t*)

;; typedef struct _cairo_surface cairo_surface_t;
(define-public cairo_surface_t-desc 'void)
(define-public cairo_surface_t*-desc (bs:pointer cairo_surface_t-desc))
(define-fh-pointer-type cairo_surface_t* cairo_surface_t*-desc 
 cairo_surface_t*? make-cairo_surface_t*)
(export cairo_surface_t* cairo_surface_t*? make-cairo_surface_t*)

;; typedef struct _cairo_device cairo_device_t;
(define-public cairo_device_t-desc 'void)
(define-public cairo_device_t*-desc (bs:pointer cairo_device_t-desc))
(define-fh-pointer-type cairo_device_t* cairo_device_t*-desc cairo_device_t*? 
 make-cairo_device_t*)
(export cairo_device_t* cairo_device_t*? make-cairo_device_t*)

;; typedef struct _cairo_matrix {
;;   double xx;
;;   double yx;
;;   double xy;
;;   double yy;
;;   double x0;
;;   double y0;
;; } cairo_matrix_t;
;; == struct-_cairo_matrix =>
(define-public struct-_cairo_matrix-desc
  (bs:struct
    (list `(xx ,double)
          `(yx ,double)
          `(xy ,double)
          `(yy ,double)
          `(x0 ,double)
          `(y0 ,double))))
(define-fh-compound-type struct-_cairo_matrix struct-_cairo_matrix-desc 
 struct-_cairo_matrix? make-struct-_cairo_matrix)
(export struct-_cairo_matrix struct-_cairo_matrix? make-struct-_cairo_matrix)
;; == struct-_cairo_matrix* =>
(define-public struct-_cairo_matrix*-desc
  (bs:pointer struct-_cairo_matrix-desc))
(define-fh-pointer-type struct-_cairo_matrix* struct-_cairo_matrix*-desc 
 struct-_cairo_matrix*? make-struct-_cairo_matrix*)
(export struct-_cairo_matrix* struct-_cairo_matrix*? 
 make-struct-_cairo_matrix*)
;; == cairo_matrix_t =>
(define-public cairo_matrix_t
  struct-_cairo_matrix-desc)
(define-fh-compound-type cairo_matrix_t cairo_matrix_t-desc cairo_matrix_t? 
 make-cairo_matrix_t)
(export cairo_matrix_t cairo_matrix_t? make-cairo_matrix_t)
;; == cairo_matrix_t* =>
(define-public cairo_matrix_t*
  (bs:pointer cairo_matrix_t))
(define-fh-pointer-type cairo_matrix_t* cairo_matrix_t*-desc cairo_matrix_t*? 
 make-cairo_matrix_t*)
(export cairo_matrix_t* cairo_matrix_t*? make-cairo_matrix_t*)

;; typedef struct _cairo_pattern cairo_pattern_t;
(define-public cairo_pattern_t-desc 'void)
(define-public cairo_pattern_t*-desc (bs:pointer cairo_pattern_t-desc))
(define-fh-pointer-type cairo_pattern_t* cairo_pattern_t*-desc 
 cairo_pattern_t*? make-cairo_pattern_t*)
(export cairo_pattern_t* cairo_pattern_t*? make-cairo_pattern_t*)

;; typedef void (*cairo_destroy_func_t)(void *data);
(define-public cairo_destroy_func_t*-desc
(bs:pointer
  (delay (fh:function ffi:void (ffi-void*))))
  )
(define-fh-function*-type
  cairo_destroy_func_t*
  cairo_destroy_func_t*-desc
  cairo_destroy_func_t*?
  make-cairo_destroy_func_t*)
(export cairo_destroy_func_t* cairo_destroy_func_t*? 
 make-cairo_destroy_func_t*)

;; typedef struct _cairo_user_data_key {
;;   int unused;
;; } cairo_user_data_key_t;
;; == struct-_cairo_user_data_key =>
(define-public struct-_cairo_user_data_key-desc
  (bs:struct (list `(unused ,int))))
(define-fh-compound-type struct-_cairo_user_data_key 
 struct-_cairo_user_data_key-desc struct-_cairo_user_data_key? 
 make-struct-_cairo_user_data_key)
(export struct-_cairo_user_data_key struct-_cairo_user_data_key? 
 make-struct-_cairo_user_data_key)
;; == struct-_cairo_user_data_key* =>
(define-public struct-_cairo_user_data_key*-desc
  (bs:pointer struct-_cairo_user_data_key-desc))
(define-fh-pointer-type struct-_cairo_user_data_key* 
 struct-_cairo_user_data_key*-desc struct-_cairo_user_data_key*? 
 make-struct-_cairo_user_data_key*)
(export struct-_cairo_user_data_key* struct-_cairo_user_data_key*? 
 make-struct-_cairo_user_data_key*)
;; == cairo_user_data_key_t =>
(define-public cairo_user_data_key_t
  struct-_cairo_user_data_key-desc)
(define-fh-compound-type cairo_user_data_key_t cairo_user_data_key_t-desc 
 cairo_user_data_key_t? make-cairo_user_data_key_t)
(export cairo_user_data_key_t cairo_user_data_key_t? 
 make-cairo_user_data_key_t)
;; == cairo_user_data_key_t* =>
(define-public cairo_user_data_key_t*
  (bs:pointer cairo_user_data_key_t))
(define-fh-pointer-type cairo_user_data_key_t* cairo_user_data_key_t*-desc 
 cairo_user_data_key_t*? make-cairo_user_data_key_t*)
(export cairo_user_data_key_t* cairo_user_data_key_t*? 
 make-cairo_user_data_key_t*)

;; typedef enum _cairo_status {
;;   CAIRO_STATUS_SUCCESS = 0,
;;   CAIRO_STATUS_NO_MEMORY,
;;   CAIRO_STATUS_INVALID_RESTORE,
;;   CAIRO_STATUS_INVALID_POP_GROUP,
;;   CAIRO_STATUS_NO_CURRENT_POINT,
;;   CAIRO_STATUS_INVALID_MATRIX,
;;   CAIRO_STATUS_INVALID_STATUS,
;;   CAIRO_STATUS_NULL_POINTER,
;;   CAIRO_STATUS_INVALID_STRING,
;;   CAIRO_STATUS_INVALID_PATH_DATA,
;;   CAIRO_STATUS_READ_ERROR,
;;   CAIRO_STATUS_WRITE_ERROR,
;;   CAIRO_STATUS_SURFACE_FINISHED,
;;   CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
;;   CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
;;   CAIRO_STATUS_INVALID_CONTENT,
;;   CAIRO_STATUS_INVALID_FORMAT,
;;   CAIRO_STATUS_INVALID_VISUAL,
;;   CAIRO_STATUS_FILE_NOT_FOUND,
;;   CAIRO_STATUS_INVALID_DASH,
;;   CAIRO_STATUS_INVALID_DSC_COMMENT,
;;   CAIRO_STATUS_INVALID_INDEX,
;;   CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,
;;   CAIRO_STATUS_TEMP_FILE_ERROR,
;;   CAIRO_STATUS_INVALID_STRIDE,
;;   CAIRO_STATUS_FONT_TYPE_MISMATCH,
;;   CAIRO_STATUS_USER_FONT_IMMUTABLE,
;;   CAIRO_STATUS_USER_FONT_ERROR,
;;   CAIRO_STATUS_NEGATIVE_COUNT,
;;   CAIRO_STATUS_INVALID_CLUSTERS,
;;   CAIRO_STATUS_INVALID_SLANT,
;;   CAIRO_STATUS_INVALID_WEIGHT,
;;   CAIRO_STATUS_INVALID_SIZE,
;;   CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED,
;;   CAIRO_STATUS_DEVICE_TYPE_MISMATCH,
;;   CAIRO_STATUS_DEVICE_ERROR,
;;   CAIRO_STATUS_INVALID_MESH_CONSTRUCTION,
;;   CAIRO_STATUS_DEVICE_FINISHED,
;;   CAIRO_STATUS_JBIG2_GLOBAL_MISSING,
;;   CAIRO_STATUS_LAST_STATUS,
;; } cairo_status_t;
(define cairo_status_t-enum-nvl
  '((CAIRO_STATUS_SUCCESS . 0)
    (CAIRO_STATUS_NO_MEMORY . 1)
    (CAIRO_STATUS_INVALID_RESTORE . 2)
    (CAIRO_STATUS_INVALID_POP_GROUP . 3)
    (CAIRO_STATUS_NO_CURRENT_POINT . 4)
    (CAIRO_STATUS_INVALID_MATRIX . 5)
    (CAIRO_STATUS_INVALID_STATUS . 6)
    (CAIRO_STATUS_NULL_POINTER . 7)
    (CAIRO_STATUS_INVALID_STRING . 8)
    (CAIRO_STATUS_INVALID_PATH_DATA . 9)
    (CAIRO_STATUS_READ_ERROR . 10)
    (CAIRO_STATUS_WRITE_ERROR . 11)
    (CAIRO_STATUS_SURFACE_FINISHED . 12)
    (CAIRO_STATUS_SURFACE_TYPE_MISMATCH . 13)
    (CAIRO_STATUS_PATTERN_TYPE_MISMATCH . 14)
    (CAIRO_STATUS_INVALID_CONTENT . 15)
    (CAIRO_STATUS_INVALID_FORMAT . 16)
    (CAIRO_STATUS_INVALID_VISUAL . 17)
    (CAIRO_STATUS_FILE_NOT_FOUND . 18)
    (CAIRO_STATUS_INVALID_DASH . 19)
    (CAIRO_STATUS_INVALID_DSC_COMMENT . 20)
    (CAIRO_STATUS_INVALID_INDEX . 21)
    (CAIRO_STATUS_CLIP_NOT_REPRESENTABLE . 22)
    (CAIRO_STATUS_TEMP_FILE_ERROR . 23)
    (CAIRO_STATUS_INVALID_STRIDE . 24)
    (CAIRO_STATUS_FONT_TYPE_MISMATCH . 25)
    (CAIRO_STATUS_USER_FONT_IMMUTABLE . 26)
    (CAIRO_STATUS_USER_FONT_ERROR . 27)
    (CAIRO_STATUS_NEGATIVE_COUNT . 28)
    (CAIRO_STATUS_INVALID_CLUSTERS . 29)
    (CAIRO_STATUS_INVALID_SLANT . 30)
    (CAIRO_STATUS_INVALID_WEIGHT . 31)
    (CAIRO_STATUS_INVALID_SIZE . 32)
    (CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED . 33)
    (CAIRO_STATUS_DEVICE_TYPE_MISMATCH . 34)
    (CAIRO_STATUS_DEVICE_ERROR . 35)
    (CAIRO_STATUS_INVALID_MESH_CONSTRUCTION . 36)
    (CAIRO_STATUS_DEVICE_FINISHED . 37)
    (CAIRO_STATUS_JBIG2_GLOBAL_MISSING . 38)
    (CAIRO_STATUS_LAST_STATUS . 39))
  )
(define cairo_status_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_status_t-enum-nvl))
(define-public (unwrap-cairo_status_t n)
  (assq-ref cairo_status_t-enum-nvl n))
(define-public (wrap-cairo_status_t v)
  (assq-ref cairo_status_t-enum-vnl v))
(define-public unwrap-enum-_cairo_status unwrap-cairo_status_t)
(define-public wrap-enum-_cairo_status wrap-cairo_status_t)

;; typedef enum _cairo_content {
;;   CAIRO_CONTENT_COLOR = 0x1000,
;;   CAIRO_CONTENT_ALPHA = 0x2000,
;;   CAIRO_CONTENT_COLOR_ALPHA = 0x3000,
;; } cairo_content_t;
(define cairo_content_t-enum-nvl
  '((CAIRO_CONTENT_COLOR . 4096)
    (CAIRO_CONTENT_ALPHA . 8192)
    (CAIRO_CONTENT_COLOR_ALPHA . 12288))
  )
(define cairo_content_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_content_t-enum-nvl))
(define-public (unwrap-cairo_content_t n)
  (assq-ref cairo_content_t-enum-nvl n))
(define-public (wrap-cairo_content_t v)
  (assq-ref cairo_content_t-enum-vnl v))
(define-public unwrap-enum-_cairo_content unwrap-cairo_content_t)
(define-public wrap-enum-_cairo_content wrap-cairo_content_t)

;; typedef enum _cairo_format {
;;   CAIRO_FORMAT_INVALID = -1,
;;   CAIRO_FORMAT_ARGB32 = 0,
;;   CAIRO_FORMAT_RGB24 = 1,
;;   CAIRO_FORMAT_A8 = 2,
;;   CAIRO_FORMAT_A1 = 3,
;;   CAIRO_FORMAT_RGB16_565 = 4,
;;   CAIRO_FORMAT_RGB30 = 5,
;; } cairo_format_t;
(define cairo_format_t-enum-nvl
  '((CAIRO_FORMAT_INVALID . -1)
    (CAIRO_FORMAT_ARGB32 . 0)
    (CAIRO_FORMAT_RGB24 . 1)
    (CAIRO_FORMAT_A8 . 2)
    (CAIRO_FORMAT_A1 . 3)
    (CAIRO_FORMAT_RGB16_565 . 4)
    (CAIRO_FORMAT_RGB30 . 5))
  )
(define cairo_format_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_format_t-enum-nvl))
(define-public (unwrap-cairo_format_t n)
  (assq-ref cairo_format_t-enum-nvl n))
(define-public (wrap-cairo_format_t v)
  (assq-ref cairo_format_t-enum-vnl v))
(define-public unwrap-enum-_cairo_format unwrap-cairo_format_t)
(define-public wrap-enum-_cairo_format wrap-cairo_format_t)

;; typedef cairo_status_t (*cairo_write_func_t)(void *closure, const 
;;     unsigned char *data, unsigned int length);
(define-public cairo_write_func_t*-desc
(bs:pointer
  (delay (fh:function
           ffi:int
           (ffi-void* ffi-void* ffi:unsigned-int))))
  )
(define-fh-function*-type
  cairo_write_func_t*
  cairo_write_func_t*-desc
  cairo_write_func_t*?
  make-cairo_write_func_t*)
(export cairo_write_func_t* cairo_write_func_t*? make-cairo_write_func_t*)

;; typedef cairo_status_t (*cairo_read_func_t)(void *closure, unsigned char *
;;     data, unsigned int length);
(define-public cairo_read_func_t*-desc
(bs:pointer
  (delay (fh:function
           ffi:int
           (ffi-void* ffi-void* ffi:unsigned-int))))
  )
(define-fh-function*-type
  cairo_read_func_t*
  cairo_read_func_t*-desc
  cairo_read_func_t*?
  make-cairo_read_func_t*)
(export cairo_read_func_t* cairo_read_func_t*? make-cairo_read_func_t*)

;; typedef struct _cairo_rectangle_int {
;;   int x, y;
;;   int width, height;
;; } cairo_rectangle_int_t;
;; == struct-_cairo_rectangle_int =>
(define-public struct-_cairo_rectangle_int-desc
  (bs:struct
    (list `(y ,int)
          `(x ,int)
          `(height ,int)
          `(width ,int))))
(define-fh-compound-type struct-_cairo_rectangle_int 
 struct-_cairo_rectangle_int-desc struct-_cairo_rectangle_int? 
 make-struct-_cairo_rectangle_int)
(export struct-_cairo_rectangle_int struct-_cairo_rectangle_int? 
 make-struct-_cairo_rectangle_int)
;; == struct-_cairo_rectangle_int* =>
(define-public struct-_cairo_rectangle_int*-desc
  (bs:pointer struct-_cairo_rectangle_int-desc))
(define-fh-pointer-type struct-_cairo_rectangle_int* 
 struct-_cairo_rectangle_int*-desc struct-_cairo_rectangle_int*? 
 make-struct-_cairo_rectangle_int*)
(export struct-_cairo_rectangle_int* struct-_cairo_rectangle_int*? 
 make-struct-_cairo_rectangle_int*)
;; == cairo_rectangle_int_t =>
(define-public cairo_rectangle_int_t
  struct-_cairo_rectangle_int-desc)
(define-fh-compound-type cairo_rectangle_int_t cairo_rectangle_int_t-desc 
 cairo_rectangle_int_t? make-cairo_rectangle_int_t)
(export cairo_rectangle_int_t cairo_rectangle_int_t? 
 make-cairo_rectangle_int_t)
;; == cairo_rectangle_int_t* =>
(define-public cairo_rectangle_int_t*
  (bs:pointer cairo_rectangle_int_t))
(define-fh-pointer-type cairo_rectangle_int_t* cairo_rectangle_int_t*-desc 
 cairo_rectangle_int_t*? make-cairo_rectangle_int_t*)
(export cairo_rectangle_int_t* cairo_rectangle_int_t*? 
 make-cairo_rectangle_int_t*)

;; cairo_t *cairo_create(cairo_surface_t *target);
(define ~cairo_create #f)
(define (cairo_create target)
  (unless
    ~cairo_create
    (set! ~cairo_create
      (fh-link-proc
        "cairo_create"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_create target)))
(export cairo_create)

;; cairo_t *cairo_reference(cairo_t *cr);
(define ~cairo_reference #f)
(define (cairo_reference cr)
  (unless
    ~cairo_reference
    (set! ~cairo_reference
      (fh-link-proc
        "cairo_reference"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_reference cr)))
(export cairo_reference)

;; void cairo_destroy(cairo_t *cr);
(define ~cairo_destroy #f)
(define (cairo_destroy cr)
  (unless
    ~cairo_destroy
    (set! ~cairo_destroy
      (fh-link-proc
        "cairo_destroy"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_destroy cr)))
(export cairo_destroy)

;; unsigned int cairo_get_reference_count(cairo_t *cr);
(define ~cairo_get_reference_count #f)
(define (cairo_get_reference_count cr)
  (unless
    ~cairo_get_reference_count
    (set! ~cairo_get_reference_count
      (fh-link-proc
        "cairo_get_reference_count"
        ffi:unsigned-int
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_get_reference_count cr)))
(export cairo_get_reference_count)

;; void *cairo_get_user_data(cairo_t *cr, const cairo_user_data_key_t *key);
(define ~cairo_get_user_data #f)
(define (cairo_get_user_data cr key)
  (unless
    ~cairo_get_user_data
    (set! ~cairo_get_user_data
      (fh-link-proc
        "cairo_get_user_data"
        ffi-void*
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_get_user_data cr key)))
(export cairo_get_user_data)

;; cairo_status_t cairo_set_user_data(cairo_t *cr, const cairo_user_data_key_t 
;;     *key, void *user_data, cairo_destroy_func_t destroy);
(define ~cairo_set_user_data #f)
(define (cairo_set_user_data cr key user_data destroy)
  (unless
    ~cairo_set_user_data
    (set! ~cairo_set_user_data
      (fh-link-proc
        "cairo_set_user_data"
        ffi:int
        (list ffi-void* ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~user_data (unwrap~pointer user_data))
        (~destroy
          ((make-fctn-param-unwrapper
             ffi:void
             (list ffi-void*))
           destroy)))
    (wrap-cairo_status_t
      (~cairo_set_user_data cr key ~user_data ~destroy))))
(export cairo_set_user_data)

;; void cairo_save(cairo_t *cr);
(define ~cairo_save #f)
(define (cairo_save cr)
  (unless
    ~cairo_save
    (set! ~cairo_save
      (fh-link-proc
        "cairo_save"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_save cr)))
(export cairo_save)

;; void cairo_restore(cairo_t *cr);
(define ~cairo_restore #f)
(define (cairo_restore cr)
  (unless
    ~cairo_restore
    (set! ~cairo_restore
      (fh-link-proc
        "cairo_restore"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_restore cr)))
(export cairo_restore)

;; void cairo_push_group(cairo_t *cr);
(define ~cairo_push_group #f)
(define (cairo_push_group cr)
  (unless
    ~cairo_push_group
    (set! ~cairo_push_group
      (fh-link-proc
        "cairo_push_group"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_push_group cr)))
(export cairo_push_group)

;; void cairo_push_group_with_content(cairo_t *cr, cairo_content_t content);
(define ~cairo_push_group_with_content #f)
(define (cairo_push_group_with_content cr content)
  (unless
    ~cairo_push_group_with_content
    (set! ~cairo_push_group_with_content
      (fh-link-proc
        "cairo_push_group_with_content"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~content (unwrap-cairo_content_t content)))
    (~cairo_push_group_with_content cr ~content)))
(export cairo_push_group_with_content)

;; cairo_pattern_t *cairo_pop_group(cairo_t *cr);
(define ~cairo_pop_group #f)
(define (cairo_pop_group cr)
  (unless
    ~cairo_pop_group
    (set! ~cairo_pop_group
      (fh-link-proc
        "cairo_pop_group"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_pop_group cr)))
(export cairo_pop_group)

;; void cairo_pop_group_to_source(cairo_t *cr);
(define ~cairo_pop_group_to_source #f)
(define (cairo_pop_group_to_source cr)
  (unless
    ~cairo_pop_group_to_source
    (set! ~cairo_pop_group_to_source
      (fh-link-proc
        "cairo_pop_group_to_source"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_pop_group_to_source cr)))
(export cairo_pop_group_to_source)

;; typedef enum _cairo_operator {
;;   CAIRO_OPERATOR_CLEAR,
;;   CAIRO_OPERATOR_SOURCE,
;;   CAIRO_OPERATOR_OVER,
;;   CAIRO_OPERATOR_IN,
;;   CAIRO_OPERATOR_OUT,
;;   CAIRO_OPERATOR_ATOP,
;;   CAIRO_OPERATOR_DEST,
;;   CAIRO_OPERATOR_DEST_OVER,
;;   CAIRO_OPERATOR_DEST_IN,
;;   CAIRO_OPERATOR_DEST_OUT,
;;   CAIRO_OPERATOR_DEST_ATOP,
;;   CAIRO_OPERATOR_XOR,
;;   CAIRO_OPERATOR_ADD,
;;   CAIRO_OPERATOR_SATURATE,
;;   CAIRO_OPERATOR_MULTIPLY,
;;   CAIRO_OPERATOR_SCREEN,
;;   CAIRO_OPERATOR_OVERLAY,
;;   CAIRO_OPERATOR_DARKEN,
;;   CAIRO_OPERATOR_LIGHTEN,
;;   CAIRO_OPERATOR_COLOR_DODGE,
;;   CAIRO_OPERATOR_COLOR_BURN,
;;   CAIRO_OPERATOR_HARD_LIGHT,
;;   CAIRO_OPERATOR_SOFT_LIGHT,
;;   CAIRO_OPERATOR_DIFFERENCE,
;;   CAIRO_OPERATOR_EXCLUSION,
;;   CAIRO_OPERATOR_HSL_HUE,
;;   CAIRO_OPERATOR_HSL_SATURATION,
;;   CAIRO_OPERATOR_HSL_COLOR,
;;   CAIRO_OPERATOR_HSL_LUMINOSITY,
;; } cairo_operator_t;
(define cairo_operator_t-enum-nvl
  '((CAIRO_OPERATOR_CLEAR . 0)
    (CAIRO_OPERATOR_SOURCE . 1)
    (CAIRO_OPERATOR_OVER . 2)
    (CAIRO_OPERATOR_IN . 3)
    (CAIRO_OPERATOR_OUT . 4)
    (CAIRO_OPERATOR_ATOP . 5)
    (CAIRO_OPERATOR_DEST . 6)
    (CAIRO_OPERATOR_DEST_OVER . 7)
    (CAIRO_OPERATOR_DEST_IN . 8)
    (CAIRO_OPERATOR_DEST_OUT . 9)
    (CAIRO_OPERATOR_DEST_ATOP . 10)
    (CAIRO_OPERATOR_XOR . 11)
    (CAIRO_OPERATOR_ADD . 12)
    (CAIRO_OPERATOR_SATURATE . 13)
    (CAIRO_OPERATOR_MULTIPLY . 14)
    (CAIRO_OPERATOR_SCREEN . 15)
    (CAIRO_OPERATOR_OVERLAY . 16)
    (CAIRO_OPERATOR_DARKEN . 17)
    (CAIRO_OPERATOR_LIGHTEN . 18)
    (CAIRO_OPERATOR_COLOR_DODGE . 19)
    (CAIRO_OPERATOR_COLOR_BURN . 20)
    (CAIRO_OPERATOR_HARD_LIGHT . 21)
    (CAIRO_OPERATOR_SOFT_LIGHT . 22)
    (CAIRO_OPERATOR_DIFFERENCE . 23)
    (CAIRO_OPERATOR_EXCLUSION . 24)
    (CAIRO_OPERATOR_HSL_HUE . 25)
    (CAIRO_OPERATOR_HSL_SATURATION . 26)
    (CAIRO_OPERATOR_HSL_COLOR . 27)
    (CAIRO_OPERATOR_HSL_LUMINOSITY . 28))
  )
(define cairo_operator_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_operator_t-enum-nvl))
(define-public (unwrap-cairo_operator_t n)
  (assq-ref cairo_operator_t-enum-nvl n))
(define-public (wrap-cairo_operator_t v)
  (assq-ref cairo_operator_t-enum-vnl v))
(define-public unwrap-enum-_cairo_operator unwrap-cairo_operator_t)
(define-public wrap-enum-_cairo_operator wrap-cairo_operator_t)

;; void cairo_set_operator(cairo_t *cr, cairo_operator_t op);
(define ~cairo_set_operator #f)
(define (cairo_set_operator cr op)
  (unless
    ~cairo_set_operator
    (set! ~cairo_set_operator
      (fh-link-proc
        "cairo_set_operator"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~op (unwrap-cairo_operator_t op)))
    (~cairo_set_operator cr ~op)))
(export cairo_set_operator)

;; void cairo_set_source(cairo_t *cr, cairo_pattern_t *source);
(define ~cairo_set_source #f)
(define (cairo_set_source cr source)
  (unless
    ~cairo_set_source
    (set! ~cairo_set_source
      (fh-link-proc
        "cairo_set_source"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_set_source cr source)))
(export cairo_set_source)

;; void cairo_set_source_rgb(cairo_t *cr, double red, double green, double blue
;;     );
(define ~cairo_set_source_rgb #f)
(define (cairo_set_source_rgb cr red green blue)
  (unless
    ~cairo_set_source_rgb
    (set! ~cairo_set_source_rgb
      (fh-link-proc
        "cairo_set_source_rgb"
        ffi:void
        (list ffi-void* ffi:double ffi:double ffi:double)
        link-lib)))
  (let ((~red (unwrap~float red))
        (~green (unwrap~float green))
        (~blue (unwrap~float blue)))
    (~cairo_set_source_rgb cr ~red ~green ~blue)))
(export cairo_set_source_rgb)

;; void cairo_set_source_rgba(cairo_t *cr, double red, double green, double 
;;     blue, double alpha);
(define ~cairo_set_source_rgba #f)
(define (cairo_set_source_rgba cr red green blue alpha)
  (unless
    ~cairo_set_source_rgba
    (set! ~cairo_set_source_rgba
      (fh-link-proc
        "cairo_set_source_rgba"
        ffi:void
        (list ffi-void*
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~red (unwrap~float red))
        (~green (unwrap~float green))
        (~blue (unwrap~float blue))
        (~alpha (unwrap~float alpha)))
    (~cairo_set_source_rgba
      cr
      ~red
      ~green
      ~blue
      ~alpha)))
(export cairo_set_source_rgba)

;; void cairo_set_source_surface(cairo_t *cr, cairo_surface_t *surface, double 
;;     x, double y);
(define ~cairo_set_source_surface #f)
(define (cairo_set_source_surface cr surface x y)
  (unless
    ~cairo_set_source_surface
    (set! ~cairo_set_source_surface
      (fh-link-proc
        "cairo_set_source_surface"
        ffi:void
        (list ffi-void* ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~x (unwrap~float x)) (~y (unwrap~float y)))
    (~cairo_set_source_surface cr surface ~x ~y)))
(export cairo_set_source_surface)

;; void cairo_set_tolerance(cairo_t *cr, double tolerance);
(define ~cairo_set_tolerance #f)
(define (cairo_set_tolerance cr tolerance)
  (unless
    ~cairo_set_tolerance
    (set! ~cairo_set_tolerance
      (fh-link-proc
        "cairo_set_tolerance"
        ffi:void
        (list ffi-void* ffi:double)
        link-lib)))
  (let ((~tolerance (unwrap~float tolerance)))
    (~cairo_set_tolerance cr ~tolerance)))
(export cairo_set_tolerance)

;; typedef enum _cairo_antialias {
;;   CAIRO_ANTIALIAS_DEFAULT,
;;   CAIRO_ANTIALIAS_NONE,
;;   CAIRO_ANTIALIAS_GRAY,
;;   CAIRO_ANTIALIAS_SUBPIXEL,
;;   CAIRO_ANTIALIAS_FAST,
;;   CAIRO_ANTIALIAS_GOOD,
;;   CAIRO_ANTIALIAS_BEST,
;; } cairo_antialias_t;
(define cairo_antialias_t-enum-nvl
  '((CAIRO_ANTIALIAS_DEFAULT . 0)
    (CAIRO_ANTIALIAS_NONE . 1)
    (CAIRO_ANTIALIAS_GRAY . 2)
    (CAIRO_ANTIALIAS_SUBPIXEL . 3)
    (CAIRO_ANTIALIAS_FAST . 4)
    (CAIRO_ANTIALIAS_GOOD . 5)
    (CAIRO_ANTIALIAS_BEST . 6))
  )
(define cairo_antialias_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_antialias_t-enum-nvl))
(define-public (unwrap-cairo_antialias_t n)
  (assq-ref cairo_antialias_t-enum-nvl n))
(define-public (wrap-cairo_antialias_t v)
  (assq-ref cairo_antialias_t-enum-vnl v))
(define-public unwrap-enum-_cairo_antialias unwrap-cairo_antialias_t)
(define-public wrap-enum-_cairo_antialias wrap-cairo_antialias_t)

;; void cairo_set_antialias(cairo_t *cr, cairo_antialias_t antialias);
(define ~cairo_set_antialias #f)
(define (cairo_set_antialias cr antialias)
  (unless
    ~cairo_set_antialias
    (set! ~cairo_set_antialias
      (fh-link-proc
        "cairo_set_antialias"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~antialias (unwrap-cairo_antialias_t antialias)))
    (~cairo_set_antialias cr ~antialias)))
(export cairo_set_antialias)

;; typedef enum _cairo_fill_rule {
;;   CAIRO_FILL_RULE_WINDING,
;;   CAIRO_FILL_RULE_EVEN_ODD,
;; } cairo_fill_rule_t;
(define cairo_fill_rule_t-enum-nvl
  '((CAIRO_FILL_RULE_WINDING . 0)
    (CAIRO_FILL_RULE_EVEN_ODD . 1))
  )
(define cairo_fill_rule_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_fill_rule_t-enum-nvl))
(define-public (unwrap-cairo_fill_rule_t n)
  (assq-ref cairo_fill_rule_t-enum-nvl n))
(define-public (wrap-cairo_fill_rule_t v)
  (assq-ref cairo_fill_rule_t-enum-vnl v))
(define-public unwrap-enum-_cairo_fill_rule unwrap-cairo_fill_rule_t)
(define-public wrap-enum-_cairo_fill_rule wrap-cairo_fill_rule_t)

;; void cairo_set_fill_rule(cairo_t *cr, cairo_fill_rule_t fill_rule);
(define ~cairo_set_fill_rule #f)
(define (cairo_set_fill_rule cr fill_rule)
  (unless
    ~cairo_set_fill_rule
    (set! ~cairo_set_fill_rule
      (fh-link-proc
        "cairo_set_fill_rule"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~fill_rule (unwrap-cairo_fill_rule_t fill_rule)))
    (~cairo_set_fill_rule cr ~fill_rule)))
(export cairo_set_fill_rule)

;; void cairo_set_line_width(cairo_t *cr, double width);
(define ~cairo_set_line_width #f)
(define (cairo_set_line_width cr width)
  (unless
    ~cairo_set_line_width
    (set! ~cairo_set_line_width
      (fh-link-proc
        "cairo_set_line_width"
        ffi:void
        (list ffi-void* ffi:double)
        link-lib)))
  (let ((~width (unwrap~float width)))
    (~cairo_set_line_width cr ~width)))
(export cairo_set_line_width)

;; typedef enum _cairo_line_cap {
;;   CAIRO_LINE_CAP_BUTT,
;;   CAIRO_LINE_CAP_ROUND,
;;   CAIRO_LINE_CAP_SQUARE,
;; } cairo_line_cap_t;
(define cairo_line_cap_t-enum-nvl
  '((CAIRO_LINE_CAP_BUTT . 0)
    (CAIRO_LINE_CAP_ROUND . 1)
    (CAIRO_LINE_CAP_SQUARE . 2))
  )
(define cairo_line_cap_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_line_cap_t-enum-nvl))
(define-public (unwrap-cairo_line_cap_t n)
  (assq-ref cairo_line_cap_t-enum-nvl n))
(define-public (wrap-cairo_line_cap_t v)
  (assq-ref cairo_line_cap_t-enum-vnl v))
(define-public unwrap-enum-_cairo_line_cap unwrap-cairo_line_cap_t)
(define-public wrap-enum-_cairo_line_cap wrap-cairo_line_cap_t)

;; void cairo_set_line_cap(cairo_t *cr, cairo_line_cap_t line_cap);
(define ~cairo_set_line_cap #f)
(define (cairo_set_line_cap cr line_cap)
  (unless
    ~cairo_set_line_cap
    (set! ~cairo_set_line_cap
      (fh-link-proc
        "cairo_set_line_cap"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~line_cap (unwrap-cairo_line_cap_t line_cap)))
    (~cairo_set_line_cap cr ~line_cap)))
(export cairo_set_line_cap)

;; typedef enum _cairo_line_join {
;;   CAIRO_LINE_JOIN_MITER,
;;   CAIRO_LINE_JOIN_ROUND,
;;   CAIRO_LINE_JOIN_BEVEL,
;; } cairo_line_join_t;
(define cairo_line_join_t-enum-nvl
  '((CAIRO_LINE_JOIN_MITER . 0)
    (CAIRO_LINE_JOIN_ROUND . 1)
    (CAIRO_LINE_JOIN_BEVEL . 2))
  )
(define cairo_line_join_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_line_join_t-enum-nvl))
(define-public (unwrap-cairo_line_join_t n)
  (assq-ref cairo_line_join_t-enum-nvl n))
(define-public (wrap-cairo_line_join_t v)
  (assq-ref cairo_line_join_t-enum-vnl v))
(define-public unwrap-enum-_cairo_line_join unwrap-cairo_line_join_t)
(define-public wrap-enum-_cairo_line_join wrap-cairo_line_join_t)

;; void cairo_set_line_join(cairo_t *cr, cairo_line_join_t line_join);
(define ~cairo_set_line_join #f)
(define (cairo_set_line_join cr line_join)
  (unless
    ~cairo_set_line_join
    (set! ~cairo_set_line_join
      (fh-link-proc
        "cairo_set_line_join"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~line_join (unwrap-cairo_line_join_t line_join)))
    (~cairo_set_line_join cr ~line_join)))
(export cairo_set_line_join)

;; void cairo_set_dash(cairo_t *cr, const double *dashes, int num_dashes, 
;;     double offset);
(define ~cairo_set_dash #f)
(define (cairo_set_dash cr dashes num_dashes offset)
  (unless
    ~cairo_set_dash
    (set! ~cairo_set_dash
      (fh-link-proc
        "cairo_set_dash"
        ffi:void
        (list ffi-void* ffi-void* ffi:int ffi:double)
        link-lib)))
  (let ((~dashes (unwrap~pointer dashes))
        (~num_dashes (unwrap~fixed num_dashes))
        (~offset (unwrap~float offset)))
    (~cairo_set_dash cr ~dashes ~num_dashes ~offset)))
(export cairo_set_dash)

;; void cairo_set_miter_limit(cairo_t *cr, double limit);
(define ~cairo_set_miter_limit #f)
(define (cairo_set_miter_limit cr limit)
  (unless
    ~cairo_set_miter_limit
    (set! ~cairo_set_miter_limit
      (fh-link-proc
        "cairo_set_miter_limit"
        ffi:void
        (list ffi-void* ffi:double)
        link-lib)))
  (let ((~limit (unwrap~float limit)))
    (~cairo_set_miter_limit cr ~limit)))
(export cairo_set_miter_limit)

;; void cairo_translate(cairo_t *cr, double tx, double ty);
(define ~cairo_translate #f)
(define (cairo_translate cr tx ty)
  (unless
    ~cairo_translate
    (set! ~cairo_translate
      (fh-link-proc
        "cairo_translate"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~tx (unwrap~float tx)) (~ty (unwrap~float ty)))
    (~cairo_translate cr ~tx ~ty)))
(export cairo_translate)

;; void cairo_scale(cairo_t *cr, double sx, double sy);
(define ~cairo_scale #f)
(define (cairo_scale cr sx sy)
  (unless
    ~cairo_scale
    (set! ~cairo_scale
      (fh-link-proc
        "cairo_scale"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~sx (unwrap~float sx)) (~sy (unwrap~float sy)))
    (~cairo_scale cr ~sx ~sy)))
(export cairo_scale)

;; void cairo_rotate(cairo_t *cr, double angle);
(define ~cairo_rotate #f)
(define (cairo_rotate cr angle)
  (unless
    ~cairo_rotate
    (set! ~cairo_rotate
      (fh-link-proc
        "cairo_rotate"
        ffi:void
        (list ffi-void* ffi:double)
        link-lib)))
  (let ((~angle (unwrap~float angle)))
    (~cairo_rotate cr ~angle)))
(export cairo_rotate)

;; void cairo_transform(cairo_t *cr, const cairo_matrix_t *matrix);
(define ~cairo_transform #f)
(define (cairo_transform cr matrix)
  (unless
    ~cairo_transform
    (set! ~cairo_transform
      (fh-link-proc
        "cairo_transform"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_transform cr matrix)))
(export cairo_transform)

;; void cairo_set_matrix(cairo_t *cr, const cairo_matrix_t *matrix);
(define ~cairo_set_matrix #f)
(define (cairo_set_matrix cr matrix)
  (unless
    ~cairo_set_matrix
    (set! ~cairo_set_matrix
      (fh-link-proc
        "cairo_set_matrix"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_set_matrix cr matrix)))
(export cairo_set_matrix)

;; void cairo_identity_matrix(cairo_t *cr);
(define ~cairo_identity_matrix #f)
(define (cairo_identity_matrix cr)
  (unless
    ~cairo_identity_matrix
    (set! ~cairo_identity_matrix
      (fh-link-proc
        "cairo_identity_matrix"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_identity_matrix cr)))
(export cairo_identity_matrix)

;; void cairo_user_to_device(cairo_t *cr, double *x, double *y);
(define ~cairo_user_to_device #f)
(define (cairo_user_to_device cr x y)
  (unless
    ~cairo_user_to_device
    (set! ~cairo_user_to_device
      (fh-link-proc
        "cairo_user_to_device"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~x (unwrap~pointer x)) (~y (unwrap~pointer y)))
    (~cairo_user_to_device cr ~x ~y)))
(export cairo_user_to_device)

;; void cairo_user_to_device_distance(cairo_t *cr, double *dx, double *dy);
(define ~cairo_user_to_device_distance #f)
(define (cairo_user_to_device_distance cr dx dy)
  (unless
    ~cairo_user_to_device_distance
    (set! ~cairo_user_to_device_distance
      (fh-link-proc
        "cairo_user_to_device_distance"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~dx (unwrap~pointer dx))
        (~dy (unwrap~pointer dy)))
    (~cairo_user_to_device_distance cr ~dx ~dy)))
(export cairo_user_to_device_distance)

;; void cairo_device_to_user(cairo_t *cr, double *x, double *y);
(define ~cairo_device_to_user #f)
(define (cairo_device_to_user cr x y)
  (unless
    ~cairo_device_to_user
    (set! ~cairo_device_to_user
      (fh-link-proc
        "cairo_device_to_user"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~x (unwrap~pointer x)) (~y (unwrap~pointer y)))
    (~cairo_device_to_user cr ~x ~y)))
(export cairo_device_to_user)

;; void cairo_device_to_user_distance(cairo_t *cr, double *dx, double *dy);
(define ~cairo_device_to_user_distance #f)
(define (cairo_device_to_user_distance cr dx dy)
  (unless
    ~cairo_device_to_user_distance
    (set! ~cairo_device_to_user_distance
      (fh-link-proc
        "cairo_device_to_user_distance"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~dx (unwrap~pointer dx))
        (~dy (unwrap~pointer dy)))
    (~cairo_device_to_user_distance cr ~dx ~dy)))
(export cairo_device_to_user_distance)

;; void cairo_new_path(cairo_t *cr);
(define ~cairo_new_path #f)
(define (cairo_new_path cr)
  (unless
    ~cairo_new_path
    (set! ~cairo_new_path
      (fh-link-proc
        "cairo_new_path"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_new_path cr)))
(export cairo_new_path)

;; void cairo_move_to(cairo_t *cr, double x, double y);
(define ~cairo_move_to #f)
(define (cairo_move_to cr x y)
  (unless
    ~cairo_move_to
    (set! ~cairo_move_to
      (fh-link-proc
        "cairo_move_to"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~x (unwrap~float x)) (~y (unwrap~float y)))
    (~cairo_move_to cr ~x ~y)))
(export cairo_move_to)

;; void cairo_new_sub_path(cairo_t *cr);
(define ~cairo_new_sub_path #f)
(define (cairo_new_sub_path cr)
  (unless
    ~cairo_new_sub_path
    (set! ~cairo_new_sub_path
      (fh-link-proc
        "cairo_new_sub_path"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_new_sub_path cr)))
(export cairo_new_sub_path)

;; void cairo_line_to(cairo_t *cr, double x, double y);
(define ~cairo_line_to #f)
(define (cairo_line_to cr x y)
  (unless
    ~cairo_line_to
    (set! ~cairo_line_to
      (fh-link-proc
        "cairo_line_to"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~x (unwrap~float x)) (~y (unwrap~float y)))
    (~cairo_line_to cr ~x ~y)))
(export cairo_line_to)

;; void cairo_curve_to(cairo_t *cr, double x1, double y1, double x2, double y2
;;     , double x3, double y3);
(define ~cairo_curve_to #f)
(define (cairo_curve_to cr x1 y1 x2 y2 x3 y3)
  (unless
    ~cairo_curve_to
    (set! ~cairo_curve_to
      (fh-link-proc
        "cairo_curve_to"
        ffi:void
        (list ffi-void*
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~x1 (unwrap~float x1))
        (~y1 (unwrap~float y1))
        (~x2 (unwrap~float x2))
        (~y2 (unwrap~float y2))
        (~x3 (unwrap~float x3))
        (~y3 (unwrap~float y3)))
    (~cairo_curve_to cr ~x1 ~y1 ~x2 ~y2 ~x3 ~y3)))
(export cairo_curve_to)

;; void cairo_arc(cairo_t *cr, double xc, double yc, double radius, double 
;;     angle1, double angle2);
(define ~cairo_arc #f)
(define (cairo_arc cr xc yc radius angle1 angle2)
  (unless
    ~cairo_arc
    (set! ~cairo_arc
      (fh-link-proc
        "cairo_arc"
        ffi:void
        (list ffi-void*
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~xc (unwrap~float xc))
        (~yc (unwrap~float yc))
        (~radius (unwrap~float radius))
        (~angle1 (unwrap~float angle1))
        (~angle2 (unwrap~float angle2)))
    (~cairo_arc cr ~xc ~yc ~radius ~angle1 ~angle2)))
(export cairo_arc)

;; void cairo_arc_negative(cairo_t *cr, double xc, double yc, double radius, 
;;     double angle1, double angle2);
(define ~cairo_arc_negative #f)
(define (cairo_arc_negative
         cr
         xc
         yc
         radius
         angle1
         angle2)
  (unless
    ~cairo_arc_negative
    (set! ~cairo_arc_negative
      (fh-link-proc
        "cairo_arc_negative"
        ffi:void
        (list ffi-void*
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~xc (unwrap~float xc))
        (~yc (unwrap~float yc))
        (~radius (unwrap~float radius))
        (~angle1 (unwrap~float angle1))
        (~angle2 (unwrap~float angle2)))
    (~cairo_arc_negative
      cr
      ~xc
      ~yc
      ~radius
      ~angle1
      ~angle2)))
(export cairo_arc_negative)

;; void cairo_rel_move_to(cairo_t *cr, double dx, double dy);
(define ~cairo_rel_move_to #f)
(define (cairo_rel_move_to cr dx dy)
  (unless
    ~cairo_rel_move_to
    (set! ~cairo_rel_move_to
      (fh-link-proc
        "cairo_rel_move_to"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~dx (unwrap~float dx)) (~dy (unwrap~float dy)))
    (~cairo_rel_move_to cr ~dx ~dy)))
(export cairo_rel_move_to)

;; void cairo_rel_line_to(cairo_t *cr, double dx, double dy);
(define ~cairo_rel_line_to #f)
(define (cairo_rel_line_to cr dx dy)
  (unless
    ~cairo_rel_line_to
    (set! ~cairo_rel_line_to
      (fh-link-proc
        "cairo_rel_line_to"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~dx (unwrap~float dx)) (~dy (unwrap~float dy)))
    (~cairo_rel_line_to cr ~dx ~dy)))
(export cairo_rel_line_to)

;; void cairo_rel_curve_to(cairo_t *cr, double dx1, double dy1, double dx2, 
;;     double dy2, double dx3, double dy3);
(define ~cairo_rel_curve_to #f)
(define (cairo_rel_curve_to cr dx1 dy1 dx2 dy2 dx3 dy3)
  (unless
    ~cairo_rel_curve_to
    (set! ~cairo_rel_curve_to
      (fh-link-proc
        "cairo_rel_curve_to"
        ffi:void
        (list ffi-void*
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~dx1 (unwrap~float dx1))
        (~dy1 (unwrap~float dy1))
        (~dx2 (unwrap~float dx2))
        (~dy2 (unwrap~float dy2))
        (~dx3 (unwrap~float dx3))
        (~dy3 (unwrap~float dy3)))
    (~cairo_rel_curve_to
      cr
      ~dx1
      ~dy1
      ~dx2
      ~dy2
      ~dx3
      ~dy3)))
(export cairo_rel_curve_to)

;; void cairo_rectangle(cairo_t *cr, double x, double y, double width, double 
;;     height);
(define ~cairo_rectangle #f)
(define (cairo_rectangle cr x y width height)
  (unless
    ~cairo_rectangle
    (set! ~cairo_rectangle
      (fh-link-proc
        "cairo_rectangle"
        ffi:void
        (list ffi-void*
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~x (unwrap~float x))
        (~y (unwrap~float y))
        (~width (unwrap~float width))
        (~height (unwrap~float height)))
    (~cairo_rectangle cr ~x ~y ~width ~height)))
(export cairo_rectangle)

;; void cairo_close_path(cairo_t *cr);
(define ~cairo_close_path #f)
(define (cairo_close_path cr)
  (unless
    ~cairo_close_path
    (set! ~cairo_close_path
      (fh-link-proc
        "cairo_close_path"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_close_path cr)))
(export cairo_close_path)

;; void cairo_path_extents(cairo_t *cr, double *x1, double *y1, double *x2, 
;;     double *y2);
(define ~cairo_path_extents #f)
(define (cairo_path_extents cr x1 y1 x2 y2)
  (unless
    ~cairo_path_extents
    (set! ~cairo_path_extents
      (fh-link-proc
        "cairo_path_extents"
        ffi:void
        (list ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~x1 (unwrap~pointer x1))
        (~y1 (unwrap~pointer y1))
        (~x2 (unwrap~pointer x2))
        (~y2 (unwrap~pointer y2)))
    (~cairo_path_extents cr ~x1 ~y1 ~x2 ~y2)))
(export cairo_path_extents)

;; void cairo_paint(cairo_t *cr);
(define ~cairo_paint #f)
(define (cairo_paint cr)
  (unless
    ~cairo_paint
    (set! ~cairo_paint
      (fh-link-proc
        "cairo_paint"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_paint cr)))
(export cairo_paint)

;; void cairo_paint_with_alpha(cairo_t *cr, double alpha);
(define ~cairo_paint_with_alpha #f)
(define (cairo_paint_with_alpha cr alpha)
  (unless
    ~cairo_paint_with_alpha
    (set! ~cairo_paint_with_alpha
      (fh-link-proc
        "cairo_paint_with_alpha"
        ffi:void
        (list ffi-void* ffi:double)
        link-lib)))
  (let ((~alpha (unwrap~float alpha)))
    (~cairo_paint_with_alpha cr ~alpha)))
(export cairo_paint_with_alpha)

;; void cairo_mask(cairo_t *cr, cairo_pattern_t *pattern);
(define ~cairo_mask #f)
(define (cairo_mask cr pattern)
  (unless
    ~cairo_mask
    (set! ~cairo_mask
      (fh-link-proc
        "cairo_mask"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_mask cr pattern)))
(export cairo_mask)

;; void cairo_mask_surface(cairo_t *cr, cairo_surface_t *surface, double 
;;     surface_x, double surface_y);
(define ~cairo_mask_surface #f)
(define (cairo_mask_surface
         cr
         surface
         surface_x
         surface_y)
  (unless
    ~cairo_mask_surface
    (set! ~cairo_mask_surface
      (fh-link-proc
        "cairo_mask_surface"
        ffi:void
        (list ffi-void* ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~surface_x (unwrap~float surface_x))
        (~surface_y (unwrap~float surface_y)))
    (~cairo_mask_surface
      cr
      surface
      ~surface_x
      ~surface_y)))
(export cairo_mask_surface)

;; void cairo_stroke(cairo_t *cr);
(define ~cairo_stroke #f)
(define (cairo_stroke cr)
  (unless
    ~cairo_stroke
    (set! ~cairo_stroke
      (fh-link-proc
        "cairo_stroke"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_stroke cr)))
(export cairo_stroke)

;; void cairo_stroke_preserve(cairo_t *cr);
(define ~cairo_stroke_preserve #f)
(define (cairo_stroke_preserve cr)
  (unless
    ~cairo_stroke_preserve
    (set! ~cairo_stroke_preserve
      (fh-link-proc
        "cairo_stroke_preserve"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_stroke_preserve cr)))
(export cairo_stroke_preserve)

;; void cairo_fill(cairo_t *cr);
(define ~cairo_fill #f)
(define (cairo_fill cr)
  (unless
    ~cairo_fill
    (set! ~cairo_fill
      (fh-link-proc
        "cairo_fill"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_fill cr)))
(export cairo_fill)

;; void cairo_fill_preserve(cairo_t *cr);
(define ~cairo_fill_preserve #f)
(define (cairo_fill_preserve cr)
  (unless
    ~cairo_fill_preserve
    (set! ~cairo_fill_preserve
      (fh-link-proc
        "cairo_fill_preserve"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_fill_preserve cr)))
(export cairo_fill_preserve)

;; void cairo_copy_page(cairo_t *cr);
(define ~cairo_copy_page #f)
(define (cairo_copy_page cr)
  (unless
    ~cairo_copy_page
    (set! ~cairo_copy_page
      (fh-link-proc
        "cairo_copy_page"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_copy_page cr)))
(export cairo_copy_page)

;; void cairo_show_page(cairo_t *cr);
(define ~cairo_show_page #f)
(define (cairo_show_page cr)
  (unless
    ~cairo_show_page
    (set! ~cairo_show_page
      (fh-link-proc
        "cairo_show_page"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_show_page cr)))
(export cairo_show_page)

;; cairo_bool_t cairo_in_stroke(cairo_t *cr, double x, double y);
(define ~cairo_in_stroke #f)
(define (cairo_in_stroke cr x y)
  (unless
    ~cairo_in_stroke
    (set! ~cairo_in_stroke
      (fh-link-proc
        "cairo_in_stroke"
        ffi:int
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~x (unwrap~float x)) (~y (unwrap~float y)))
    (wrap-cairo_bool_t (~cairo_in_stroke cr ~x ~y))))
(export cairo_in_stroke)

;; cairo_bool_t cairo_in_fill(cairo_t *cr, double x, double y);
(define ~cairo_in_fill #f)
(define (cairo_in_fill cr x y)
  (unless
    ~cairo_in_fill
    (set! ~cairo_in_fill
      (fh-link-proc
        "cairo_in_fill"
        ffi:int
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~x (unwrap~float x)) (~y (unwrap~float y)))
    (wrap-cairo_bool_t (~cairo_in_fill cr ~x ~y))))
(export cairo_in_fill)

;; cairo_bool_t cairo_in_clip(cairo_t *cr, double x, double y);
(define ~cairo_in_clip #f)
(define (cairo_in_clip cr x y)
  (unless
    ~cairo_in_clip
    (set! ~cairo_in_clip
      (fh-link-proc
        "cairo_in_clip"
        ffi:int
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~x (unwrap~float x)) (~y (unwrap~float y)))
    (wrap-cairo_bool_t (~cairo_in_clip cr ~x ~y))))
(export cairo_in_clip)

;; void cairo_stroke_extents(cairo_t *cr, double *x1, double *y1, double *x2, 
;;     double *y2);
(define ~cairo_stroke_extents #f)
(define (cairo_stroke_extents cr x1 y1 x2 y2)
  (unless
    ~cairo_stroke_extents
    (set! ~cairo_stroke_extents
      (fh-link-proc
        "cairo_stroke_extents"
        ffi:void
        (list ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~x1 (unwrap~pointer x1))
        (~y1 (unwrap~pointer y1))
        (~x2 (unwrap~pointer x2))
        (~y2 (unwrap~pointer y2)))
    (~cairo_stroke_extents cr ~x1 ~y1 ~x2 ~y2)))
(export cairo_stroke_extents)

;; void cairo_fill_extents(cairo_t *cr, double *x1, double *y1, double *x2, 
;;     double *y2);
(define ~cairo_fill_extents #f)
(define (cairo_fill_extents cr x1 y1 x2 y2)
  (unless
    ~cairo_fill_extents
    (set! ~cairo_fill_extents
      (fh-link-proc
        "cairo_fill_extents"
        ffi:void
        (list ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~x1 (unwrap~pointer x1))
        (~y1 (unwrap~pointer y1))
        (~x2 (unwrap~pointer x2))
        (~y2 (unwrap~pointer y2)))
    (~cairo_fill_extents cr ~x1 ~y1 ~x2 ~y2)))
(export cairo_fill_extents)

;; void cairo_reset_clip(cairo_t *cr);
(define ~cairo_reset_clip #f)
(define (cairo_reset_clip cr)
  (unless
    ~cairo_reset_clip
    (set! ~cairo_reset_clip
      (fh-link-proc
        "cairo_reset_clip"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_reset_clip cr)))
(export cairo_reset_clip)

;; void cairo_clip(cairo_t *cr);
(define ~cairo_clip #f)
(define (cairo_clip cr)
  (unless
    ~cairo_clip
    (set! ~cairo_clip
      (fh-link-proc
        "cairo_clip"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_clip cr)))
(export cairo_clip)

;; void cairo_clip_preserve(cairo_t *cr);
(define ~cairo_clip_preserve #f)
(define (cairo_clip_preserve cr)
  (unless
    ~cairo_clip_preserve
    (set! ~cairo_clip_preserve
      (fh-link-proc
        "cairo_clip_preserve"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_clip_preserve cr)))
(export cairo_clip_preserve)

;; void cairo_clip_extents(cairo_t *cr, double *x1, double *y1, double *x2, 
;;     double *y2);
(define ~cairo_clip_extents #f)
(define (cairo_clip_extents cr x1 y1 x2 y2)
  (unless
    ~cairo_clip_extents
    (set! ~cairo_clip_extents
      (fh-link-proc
        "cairo_clip_extents"
        ffi:void
        (list ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~x1 (unwrap~pointer x1))
        (~y1 (unwrap~pointer y1))
        (~x2 (unwrap~pointer x2))
        (~y2 (unwrap~pointer y2)))
    (~cairo_clip_extents cr ~x1 ~y1 ~x2 ~y2)))
(export cairo_clip_extents)

;; typedef struct _cairo_rectangle {
;;   double x, y, width, height;
;; } cairo_rectangle_t;
;; == struct-_cairo_rectangle =>
(define-public struct-_cairo_rectangle-desc
  (bs:struct
    (list `(height ,double)
          `(width ,double)
          `(y ,double)
          `(x ,double))))
(define-fh-compound-type struct-_cairo_rectangle struct-_cairo_rectangle-desc 
 struct-_cairo_rectangle? make-struct-_cairo_rectangle)
(export struct-_cairo_rectangle struct-_cairo_rectangle? 
 make-struct-_cairo_rectangle)
;; == struct-_cairo_rectangle* =>
(define-public struct-_cairo_rectangle*-desc
  (bs:pointer struct-_cairo_rectangle-desc))
(define-fh-pointer-type struct-_cairo_rectangle* struct-_cairo_rectangle*-desc
 struct-_cairo_rectangle*? make-struct-_cairo_rectangle*)
(export struct-_cairo_rectangle* struct-_cairo_rectangle*? 
 make-struct-_cairo_rectangle*)
;; == cairo_rectangle_t =>
(define-public cairo_rectangle_t
  struct-_cairo_rectangle-desc)
(define-fh-compound-type cairo_rectangle_t cairo_rectangle_t-desc 
 cairo_rectangle_t? make-cairo_rectangle_t)
(export cairo_rectangle_t cairo_rectangle_t? make-cairo_rectangle_t)
;; == cairo_rectangle_t* =>
(define-public cairo_rectangle_t*
  (bs:pointer cairo_rectangle_t))
(define-fh-pointer-type cairo_rectangle_t* cairo_rectangle_t*-desc 
 cairo_rectangle_t*? make-cairo_rectangle_t*)
(export cairo_rectangle_t* cairo_rectangle_t*? make-cairo_rectangle_t*)

;; typedef struct _cairo_rectangle_list {
;;   cairo_status_t status;
;;   cairo_rectangle_t *rectangles;
;;   int num_rectangles;
;; } cairo_rectangle_list_t;
;; == struct-_cairo_rectangle_list =>
(define-public struct-_cairo_rectangle_list-desc
  (bs:struct
    (list `(status ,int)
          `(rectangles
             ,(bs:pointer (delay cairo_rectangle_t*-desc)))
          `(num_rectangles ,int))))
(define-fh-compound-type struct-_cairo_rectangle_list 
 struct-_cairo_rectangle_list-desc struct-_cairo_rectangle_list? 
 make-struct-_cairo_rectangle_list)
(export struct-_cairo_rectangle_list struct-_cairo_rectangle_list? 
 make-struct-_cairo_rectangle_list)
;; == struct-_cairo_rectangle_list* =>
(define-public struct-_cairo_rectangle_list*-desc
  (bs:pointer struct-_cairo_rectangle_list-desc))
(define-fh-pointer-type struct-_cairo_rectangle_list* 
 struct-_cairo_rectangle_list*-desc struct-_cairo_rectangle_list*? 
 make-struct-_cairo_rectangle_list*)
(export struct-_cairo_rectangle_list* struct-_cairo_rectangle_list*? 
 make-struct-_cairo_rectangle_list*)
;; == cairo_rectangle_list_t =>
(define-public cairo_rectangle_list_t
  struct-_cairo_rectangle_list-desc)
(define-fh-compound-type cairo_rectangle_list_t cairo_rectangle_list_t-desc 
 cairo_rectangle_list_t? make-cairo_rectangle_list_t)
(export cairo_rectangle_list_t cairo_rectangle_list_t? 
 make-cairo_rectangle_list_t)
;; == cairo_rectangle_list_t* =>
(define-public cairo_rectangle_list_t*
  (bs:pointer cairo_rectangle_list_t))
(define-fh-pointer-type cairo_rectangle_list_t* cairo_rectangle_list_t*-desc 
 cairo_rectangle_list_t*? make-cairo_rectangle_list_t*)
(export cairo_rectangle_list_t* cairo_rectangle_list_t*? 
 make-cairo_rectangle_list_t*)

;; cairo_rectangle_list_t *cairo_copy_clip_rectangle_list(cairo_t *cr);
(define ~cairo_copy_clip_rectangle_list #f)
(define (cairo_copy_clip_rectangle_list cr)
  (unless
    ~cairo_copy_clip_rectangle_list
    (set! ~cairo_copy_clip_rectangle_list
      (fh-link-proc
        "cairo_copy_clip_rectangle_list"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_copy_clip_rectangle_list cr)))
(export cairo_copy_clip_rectangle_list)

;; void cairo_rectangle_list_destroy(cairo_rectangle_list_t *rectangle_list);
(define ~cairo_rectangle_list_destroy #f)
(define (cairo_rectangle_list_destroy rectangle_list)
  (unless
    ~cairo_rectangle_list_destroy
    (set! ~cairo_rectangle_list_destroy
      (fh-link-proc
        "cairo_rectangle_list_destroy"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_rectangle_list_destroy rectangle_list)))
(export cairo_rectangle_list_destroy)

;; typedef struct _cairo_scaled_font cairo_scaled_font_t;
(define-public cairo_scaled_font_t-desc 'void)
(define-public cairo_scaled_font_t*-desc (bs:pointer cairo_scaled_font_t-desc))
(define-fh-pointer-type cairo_scaled_font_t* cairo_scaled_font_t*-desc 
 cairo_scaled_font_t*? make-cairo_scaled_font_t*)
(export cairo_scaled_font_t* cairo_scaled_font_t*? make-cairo_scaled_font_t*)

;; typedef struct _cairo_font_face cairo_font_face_t;
(define-public cairo_font_face_t-desc 'void)
(define-public cairo_font_face_t*-desc (bs:pointer cairo_font_face_t-desc))
(define-fh-pointer-type cairo_font_face_t* cairo_font_face_t*-desc 
 cairo_font_face_t*? make-cairo_font_face_t*)
(export cairo_font_face_t* cairo_font_face_t*? make-cairo_font_face_t*)

;; typedef struct {
;;   unsigned long index;
;;   double x;
;;   double y;
;; } cairo_glyph_t;
(define-public cairo_glyph_t-desc
  (bs:struct
    (list `(index ,unsigned-long)
          `(x ,double)
          `(y ,double))))
(define-fh-compound-type cairo_glyph_t cairo_glyph_t-desc cairo_glyph_t? 
 make-cairo_glyph_t)
(export cairo_glyph_t cairo_glyph_t? make-cairo_glyph_t)

(define-public cairo_glyph_t*
  (bs:pointer cairo_glyph_t))
(define-fh-pointer-type cairo_glyph_t* cairo_glyph_t*-desc cairo_glyph_t*? 
 make-cairo_glyph_t*)
(export cairo_glyph_t* cairo_glyph_t*? make-cairo_glyph_t*)

;; cairo_glyph_t *cairo_glyph_allocate(int num_glyphs);
(define ~cairo_glyph_allocate #f)
(define (cairo_glyph_allocate num_glyphs)
  (unless
    ~cairo_glyph_allocate
    (set! ~cairo_glyph_allocate
      (fh-link-proc
        "cairo_glyph_allocate"
        ffi-void*
        (list ffi:int)
        link-lib)))
  (let ((~num_glyphs (unwrap~fixed num_glyphs)))
    (~cairo_glyph_allocate ~num_glyphs)))
(export cairo_glyph_allocate)

;; void cairo_glyph_free(cairo_glyph_t *glyphs);
(define ~cairo_glyph_free #f)
(define (cairo_glyph_free glyphs)
  (unless
    ~cairo_glyph_free
    (set! ~cairo_glyph_free
      (fh-link-proc
        "cairo_glyph_free"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_glyph_free glyphs)))
(export cairo_glyph_free)

;; typedef struct {
;;   int num_bytes;
;;   int num_glyphs;
;; } cairo_text_cluster_t;
(define-public cairo_text_cluster_t-desc
  (bs:struct
    (list `(num_bytes ,int) `(num_glyphs ,int))))
(define-fh-compound-type cairo_text_cluster_t cairo_text_cluster_t-desc 
 cairo_text_cluster_t? make-cairo_text_cluster_t)
(export cairo_text_cluster_t cairo_text_cluster_t? make-cairo_text_cluster_t)

(define-public cairo_text_cluster_t*
  (bs:pointer cairo_text_cluster_t))
(define-fh-pointer-type cairo_text_cluster_t* cairo_text_cluster_t*-desc 
 cairo_text_cluster_t*? make-cairo_text_cluster_t*)
(export cairo_text_cluster_t* cairo_text_cluster_t*? 
 make-cairo_text_cluster_t*)

;; cairo_text_cluster_t *cairo_text_cluster_allocate(int num_clusters);
(define ~cairo_text_cluster_allocate #f)
(define (cairo_text_cluster_allocate num_clusters)
  (unless
    ~cairo_text_cluster_allocate
    (set! ~cairo_text_cluster_allocate
      (fh-link-proc
        "cairo_text_cluster_allocate"
        ffi-void*
        (list ffi:int)
        link-lib)))
  (let ((~num_clusters (unwrap~fixed num_clusters)))
    (~cairo_text_cluster_allocate ~num_clusters)))
(export cairo_text_cluster_allocate)

;; void cairo_text_cluster_free(cairo_text_cluster_t *clusters);
(define ~cairo_text_cluster_free #f)
(define (cairo_text_cluster_free clusters)
  (unless
    ~cairo_text_cluster_free
    (set! ~cairo_text_cluster_free
      (fh-link-proc
        "cairo_text_cluster_free"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_text_cluster_free clusters)))
(export cairo_text_cluster_free)

;; typedef enum _cairo_text_cluster_flags {
;;   CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 0x00000001,
;; } cairo_text_cluster_flags_t;
(define cairo_text_cluster_flags_t-enum-nvl
  '((CAIRO_TEXT_CLUSTER_FLAG_BACKWARD . 1))
  )
(define cairo_text_cluster_flags_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_text_cluster_flags_t-enum-nvl))
(define-public (unwrap-cairo_text_cluster_flags_t n)
  (assq-ref cairo_text_cluster_flags_t-enum-nvl n))
(define-public (wrap-cairo_text_cluster_flags_t v)
  (assq-ref cairo_text_cluster_flags_t-enum-vnl v))
(define-public unwrap-enum-_cairo_text_cluster_flags unwrap-cairo_text_cluster_flags_t)
(define-public wrap-enum-_cairo_text_cluster_flags wrap-cairo_text_cluster_flags_t)

;; typedef struct {
;;   double x_bearing;
;;   double y_bearing;
;;   double width;
;;   double height;
;;   double x_advance;
;;   double y_advance;
;; } cairo_text_extents_t;
(define-public cairo_text_extents_t-desc
  (bs:struct
    (list `(x_bearing ,double)
          `(y_bearing ,double)
          `(width ,double)
          `(height ,double)
          `(x_advance ,double)
          `(y_advance ,double))))
(define-fh-compound-type cairo_text_extents_t cairo_text_extents_t-desc 
 cairo_text_extents_t? make-cairo_text_extents_t)
(export cairo_text_extents_t cairo_text_extents_t? make-cairo_text_extents_t)

(define-public cairo_text_extents_t*
  (bs:pointer cairo_text_extents_t))
(define-fh-pointer-type cairo_text_extents_t* cairo_text_extents_t*-desc 
 cairo_text_extents_t*? make-cairo_text_extents_t*)
(export cairo_text_extents_t* cairo_text_extents_t*? 
 make-cairo_text_extents_t*)

;; typedef struct {
;;   double ascent;
;;   double descent;
;;   double height;
;;   double max_x_advance;
;;   double max_y_advance;
;; } cairo_font_extents_t;
(define-public cairo_font_extents_t-desc
  (bs:struct
    (list `(ascent ,double)
          `(descent ,double)
          `(height ,double)
          `(max_x_advance ,double)
          `(max_y_advance ,double))))
(define-fh-compound-type cairo_font_extents_t cairo_font_extents_t-desc 
 cairo_font_extents_t? make-cairo_font_extents_t)
(export cairo_font_extents_t cairo_font_extents_t? make-cairo_font_extents_t)

(define-public cairo_font_extents_t*
  (bs:pointer cairo_font_extents_t))
(define-fh-pointer-type cairo_font_extents_t* cairo_font_extents_t*-desc 
 cairo_font_extents_t*? make-cairo_font_extents_t*)
(export cairo_font_extents_t* cairo_font_extents_t*? 
 make-cairo_font_extents_t*)

;; typedef enum _cairo_font_slant {
;;   CAIRO_FONT_SLANT_NORMAL,
;;   CAIRO_FONT_SLANT_ITALIC,
;;   CAIRO_FONT_SLANT_OBLIQUE,
;; } cairo_font_slant_t;
(define cairo_font_slant_t-enum-nvl
  '((CAIRO_FONT_SLANT_NORMAL . 0)
    (CAIRO_FONT_SLANT_ITALIC . 1)
    (CAIRO_FONT_SLANT_OBLIQUE . 2))
  )
(define cairo_font_slant_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_font_slant_t-enum-nvl))
(define-public (unwrap-cairo_font_slant_t n)
  (assq-ref cairo_font_slant_t-enum-nvl n))
(define-public (wrap-cairo_font_slant_t v)
  (assq-ref cairo_font_slant_t-enum-vnl v))
(define-public unwrap-enum-_cairo_font_slant unwrap-cairo_font_slant_t)
(define-public wrap-enum-_cairo_font_slant wrap-cairo_font_slant_t)

;; typedef enum _cairo_font_weight {
;;   CAIRO_FONT_WEIGHT_NORMAL,
;;   CAIRO_FONT_WEIGHT_BOLD,
;; } cairo_font_weight_t;
(define cairo_font_weight_t-enum-nvl
  '((CAIRO_FONT_WEIGHT_NORMAL . 0)
    (CAIRO_FONT_WEIGHT_BOLD . 1))
  )
(define cairo_font_weight_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_font_weight_t-enum-nvl))
(define-public (unwrap-cairo_font_weight_t n)
  (assq-ref cairo_font_weight_t-enum-nvl n))
(define-public (wrap-cairo_font_weight_t v)
  (assq-ref cairo_font_weight_t-enum-vnl v))
(define-public unwrap-enum-_cairo_font_weight unwrap-cairo_font_weight_t)
(define-public wrap-enum-_cairo_font_weight wrap-cairo_font_weight_t)

;; typedef enum _cairo_subpixel_order {
;;   CAIRO_SUBPIXEL_ORDER_DEFAULT,
;;   CAIRO_SUBPIXEL_ORDER_RGB,
;;   CAIRO_SUBPIXEL_ORDER_BGR,
;;   CAIRO_SUBPIXEL_ORDER_VRGB,
;;   CAIRO_SUBPIXEL_ORDER_VBGR,
;; } cairo_subpixel_order_t;
(define cairo_subpixel_order_t-enum-nvl
  '((CAIRO_SUBPIXEL_ORDER_DEFAULT . 0)
    (CAIRO_SUBPIXEL_ORDER_RGB . 1)
    (CAIRO_SUBPIXEL_ORDER_BGR . 2)
    (CAIRO_SUBPIXEL_ORDER_VRGB . 3)
    (CAIRO_SUBPIXEL_ORDER_VBGR . 4))
  )
(define cairo_subpixel_order_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_subpixel_order_t-enum-nvl))
(define-public (unwrap-cairo_subpixel_order_t n)
  (assq-ref cairo_subpixel_order_t-enum-nvl n))
(define-public (wrap-cairo_subpixel_order_t v)
  (assq-ref cairo_subpixel_order_t-enum-vnl v))
(define-public unwrap-enum-_cairo_subpixel_order unwrap-cairo_subpixel_order_t)
(define-public wrap-enum-_cairo_subpixel_order wrap-cairo_subpixel_order_t)

;; typedef enum _cairo_hint_style {
;;   CAIRO_HINT_STYLE_DEFAULT,
;;   CAIRO_HINT_STYLE_NONE,
;;   CAIRO_HINT_STYLE_SLIGHT,
;;   CAIRO_HINT_STYLE_MEDIUM,
;;   CAIRO_HINT_STYLE_FULL,
;; } cairo_hint_style_t;
(define cairo_hint_style_t-enum-nvl
  '((CAIRO_HINT_STYLE_DEFAULT . 0)
    (CAIRO_HINT_STYLE_NONE . 1)
    (CAIRO_HINT_STYLE_SLIGHT . 2)
    (CAIRO_HINT_STYLE_MEDIUM . 3)
    (CAIRO_HINT_STYLE_FULL . 4))
  )
(define cairo_hint_style_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_hint_style_t-enum-nvl))
(define-public (unwrap-cairo_hint_style_t n)
  (assq-ref cairo_hint_style_t-enum-nvl n))
(define-public (wrap-cairo_hint_style_t v)
  (assq-ref cairo_hint_style_t-enum-vnl v))
(define-public unwrap-enum-_cairo_hint_style unwrap-cairo_hint_style_t)
(define-public wrap-enum-_cairo_hint_style wrap-cairo_hint_style_t)

;; typedef enum _cairo_hint_metrics {
;;   CAIRO_HINT_METRICS_DEFAULT,
;;   CAIRO_HINT_METRICS_OFF,
;;   CAIRO_HINT_METRICS_ON,
;; } cairo_hint_metrics_t;
(define cairo_hint_metrics_t-enum-nvl
  '((CAIRO_HINT_METRICS_DEFAULT . 0)
    (CAIRO_HINT_METRICS_OFF . 1)
    (CAIRO_HINT_METRICS_ON . 2))
  )
(define cairo_hint_metrics_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_hint_metrics_t-enum-nvl))
(define-public (unwrap-cairo_hint_metrics_t n)
  (assq-ref cairo_hint_metrics_t-enum-nvl n))
(define-public (wrap-cairo_hint_metrics_t v)
  (assq-ref cairo_hint_metrics_t-enum-vnl v))
(define-public unwrap-enum-_cairo_hint_metrics unwrap-cairo_hint_metrics_t)
(define-public wrap-enum-_cairo_hint_metrics wrap-cairo_hint_metrics_t)

;; typedef struct _cairo_font_options cairo_font_options_t;
(define-public cairo_font_options_t-desc 'void)
(define-public cairo_font_options_t*-desc (bs:pointer cairo_font_options_t-desc))
(define-fh-pointer-type cairo_font_options_t* cairo_font_options_t*-desc 
 cairo_font_options_t*? make-cairo_font_options_t*)
(export cairo_font_options_t* cairo_font_options_t*? 
 make-cairo_font_options_t*)

;; cairo_font_options_t *cairo_font_options_create(void);
(define ~cairo_font_options_create #f)
(define (cairo_font_options_create)
  (unless
    ~cairo_font_options_create
    (set! ~cairo_font_options_create
      (fh-link-proc
        "cairo_font_options_create"
        ffi-void*
        (list)
        link-lib)))
  (let () (~cairo_font_options_create)))
(export cairo_font_options_create)

;; cairo_font_options_t *cairo_font_options_copy(const cairo_font_options_t *
;;     original);
(define ~cairo_font_options_copy #f)
(define (cairo_font_options_copy original)
  (unless
    ~cairo_font_options_copy
    (set! ~cairo_font_options_copy
      (fh-link-proc
        "cairo_font_options_copy"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_font_options_copy original)))
(export cairo_font_options_copy)

;; void cairo_font_options_destroy(cairo_font_options_t *options);
(define ~cairo_font_options_destroy #f)
(define (cairo_font_options_destroy options)
  (unless
    ~cairo_font_options_destroy
    (set! ~cairo_font_options_destroy
      (fh-link-proc
        "cairo_font_options_destroy"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_font_options_destroy options)))
(export cairo_font_options_destroy)

;; cairo_status_t cairo_font_options_status(cairo_font_options_t *options);
(define ~cairo_font_options_status #f)
(define (cairo_font_options_status options)
  (unless
    ~cairo_font_options_status
    (set! ~cairo_font_options_status
      (fh-link-proc
        "cairo_font_options_status"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_font_options_status options))))
(export cairo_font_options_status)

;; void cairo_font_options_merge(cairo_font_options_t *options, const 
;;     cairo_font_options_t *other);
(define ~cairo_font_options_merge #f)
(define (cairo_font_options_merge options other)
  (unless
    ~cairo_font_options_merge
    (set! ~cairo_font_options_merge
      (fh-link-proc
        "cairo_font_options_merge"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_font_options_merge options other)))
(export cairo_font_options_merge)

;; cairo_bool_t cairo_font_options_equal(const cairo_font_options_t *options, 
;;     const cairo_font_options_t *other);
(define ~cairo_font_options_equal #f)
(define (cairo_font_options_equal options other)
  (unless
    ~cairo_font_options_equal
    (set! ~cairo_font_options_equal
      (fh-link-proc
        "cairo_font_options_equal"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_bool_t
      (~cairo_font_options_equal options other))))
(export cairo_font_options_equal)

;; unsigned long cairo_font_options_hash(const cairo_font_options_t *options);
(define ~cairo_font_options_hash #f)
(define (cairo_font_options_hash options)
  (unless
    ~cairo_font_options_hash
    (set! ~cairo_font_options_hash
      (fh-link-proc
        "cairo_font_options_hash"
        ffi:unsigned-long
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_font_options_hash options)))
(export cairo_font_options_hash)

;; void cairo_font_options_set_antialias(cairo_font_options_t *options, 
;;     cairo_antialias_t antialias);
(define ~cairo_font_options_set_antialias #f)
(define (cairo_font_options_set_antialias
         options
         antialias)
  (unless
    ~cairo_font_options_set_antialias
    (set! ~cairo_font_options_set_antialias
      (fh-link-proc
        "cairo_font_options_set_antialias"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~antialias (unwrap-cairo_antialias_t antialias)))
    (~cairo_font_options_set_antialias
      options
      ~antialias)))
(export cairo_font_options_set_antialias)

;; cairo_antialias_t cairo_font_options_get_antialias(const 
;;     cairo_font_options_t *options);
(define ~cairo_font_options_get_antialias #f)
(define (cairo_font_options_get_antialias options)
  (unless
    ~cairo_font_options_get_antialias
    (set! ~cairo_font_options_get_antialias
      (fh-link-proc
        "cairo_font_options_get_antialias"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_antialias_t
      (~cairo_font_options_get_antialias options))))
(export cairo_font_options_get_antialias)

;; void cairo_font_options_set_subpixel_order(cairo_font_options_t *options, 
;;     cairo_subpixel_order_t subpixel_order);
(define ~cairo_font_options_set_subpixel_order #f)
(define (cairo_font_options_set_subpixel_order
         options
         subpixel_order)
  (unless
    ~cairo_font_options_set_subpixel_order
    (set! ~cairo_font_options_set_subpixel_order
      (fh-link-proc
        "cairo_font_options_set_subpixel_order"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~subpixel_order
          (unwrap-cairo_subpixel_order_t subpixel_order)))
    (~cairo_font_options_set_subpixel_order
      options
      ~subpixel_order)))
(export cairo_font_options_set_subpixel_order)

;; cairo_subpixel_order_t cairo_font_options_get_subpixel_order(const 
;;     cairo_font_options_t *options);
(define ~cairo_font_options_get_subpixel_order #f)
(define (cairo_font_options_get_subpixel_order options)
  (unless
    ~cairo_font_options_get_subpixel_order
    (set! ~cairo_font_options_get_subpixel_order
      (fh-link-proc
        "cairo_font_options_get_subpixel_order"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_subpixel_order_t
      (~cairo_font_options_get_subpixel_order options))))
(export cairo_font_options_get_subpixel_order)

;; void cairo_font_options_set_hint_style(cairo_font_options_t *options, 
;;     cairo_hint_style_t hint_style);
(define ~cairo_font_options_set_hint_style #f)
(define (cairo_font_options_set_hint_style
         options
         hint_style)
  (unless
    ~cairo_font_options_set_hint_style
    (set! ~cairo_font_options_set_hint_style
      (fh-link-proc
        "cairo_font_options_set_hint_style"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~hint_style
          (unwrap-cairo_hint_style_t hint_style)))
    (~cairo_font_options_set_hint_style
      options
      ~hint_style)))
(export cairo_font_options_set_hint_style)

;; cairo_hint_style_t cairo_font_options_get_hint_style(const 
;;     cairo_font_options_t *options);
(define ~cairo_font_options_get_hint_style #f)
(define (cairo_font_options_get_hint_style options)
  (unless
    ~cairo_font_options_get_hint_style
    (set! ~cairo_font_options_get_hint_style
      (fh-link-proc
        "cairo_font_options_get_hint_style"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_hint_style_t
      (~cairo_font_options_get_hint_style options))))
(export cairo_font_options_get_hint_style)

;; void cairo_font_options_set_hint_metrics(cairo_font_options_t *options, 
;;     cairo_hint_metrics_t hint_metrics);
(define ~cairo_font_options_set_hint_metrics #f)
(define (cairo_font_options_set_hint_metrics
         options
         hint_metrics)
  (unless
    ~cairo_font_options_set_hint_metrics
    (set! ~cairo_font_options_set_hint_metrics
      (fh-link-proc
        "cairo_font_options_set_hint_metrics"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~hint_metrics
          (unwrap-cairo_hint_metrics_t hint_metrics)))
    (~cairo_font_options_set_hint_metrics
      options
      ~hint_metrics)))
(export cairo_font_options_set_hint_metrics)

;; cairo_hint_metrics_t cairo_font_options_get_hint_metrics(const 
;;     cairo_font_options_t *options);
(define ~cairo_font_options_get_hint_metrics #f)
(define (cairo_font_options_get_hint_metrics options)
  (unless
    ~cairo_font_options_get_hint_metrics
    (set! ~cairo_font_options_get_hint_metrics
      (fh-link-proc
        "cairo_font_options_get_hint_metrics"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_hint_metrics_t
      (~cairo_font_options_get_hint_metrics options))))
(export cairo_font_options_get_hint_metrics)

;; void cairo_select_font_face(cairo_t *cr, const char *family, 
;;     cairo_font_slant_t slant, cairo_font_weight_t weight);
(define ~cairo_select_font_face #f)
(define (cairo_select_font_face cr family slant weight)
  (unless
    ~cairo_select_font_face
    (set! ~cairo_select_font_face
      (fh-link-proc
        "cairo_select_font_face"
        ffi:void
        (list ffi-void* ffi-void* ffi:int ffi:int)
        link-lib)))
  (let ((~family (unwrap~pointer family))
        (~slant (unwrap-cairo_font_slant_t slant))
        (~weight (unwrap-cairo_font_weight_t weight)))
    (~cairo_select_font_face
      cr
      ~family
      ~slant
      ~weight)))
(export cairo_select_font_face)

;; void cairo_set_font_size(cairo_t *cr, double size);
(define ~cairo_set_font_size #f)
(define (cairo_set_font_size cr size)
  (unless
    ~cairo_set_font_size
    (set! ~cairo_set_font_size
      (fh-link-proc
        "cairo_set_font_size"
        ffi:void
        (list ffi-void* ffi:double)
        link-lib)))
  (let ((~size (unwrap~float size)))
    (~cairo_set_font_size cr ~size)))
(export cairo_set_font_size)

;; void cairo_set_font_matrix(cairo_t *cr, const cairo_matrix_t *matrix);
(define ~cairo_set_font_matrix #f)
(define (cairo_set_font_matrix cr matrix)
  (unless
    ~cairo_set_font_matrix
    (set! ~cairo_set_font_matrix
      (fh-link-proc
        "cairo_set_font_matrix"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_set_font_matrix cr matrix)))
(export cairo_set_font_matrix)

;; void cairo_get_font_matrix(cairo_t *cr, cairo_matrix_t *matrix);
(define ~cairo_get_font_matrix #f)
(define (cairo_get_font_matrix cr matrix)
  (unless
    ~cairo_get_font_matrix
    (set! ~cairo_get_font_matrix
      (fh-link-proc
        "cairo_get_font_matrix"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_get_font_matrix cr matrix)))
(export cairo_get_font_matrix)

;; void cairo_set_font_options(cairo_t *cr, const cairo_font_options_t *options
;;     );
(define ~cairo_set_font_options #f)
(define (cairo_set_font_options cr options)
  (unless
    ~cairo_set_font_options
    (set! ~cairo_set_font_options
      (fh-link-proc
        "cairo_set_font_options"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_set_font_options cr options)))
(export cairo_set_font_options)

;; void cairo_get_font_options(cairo_t *cr, cairo_font_options_t *options);
(define ~cairo_get_font_options #f)
(define (cairo_get_font_options cr options)
  (unless
    ~cairo_get_font_options
    (set! ~cairo_get_font_options
      (fh-link-proc
        "cairo_get_font_options"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_get_font_options cr options)))
(export cairo_get_font_options)

;; void cairo_set_font_face(cairo_t *cr, cairo_font_face_t *font_face);
(define ~cairo_set_font_face #f)
(define (cairo_set_font_face cr font_face)
  (unless
    ~cairo_set_font_face
    (set! ~cairo_set_font_face
      (fh-link-proc
        "cairo_set_font_face"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_set_font_face cr font_face)))
(export cairo_set_font_face)

;; cairo_font_face_t *cairo_get_font_face(cairo_t *cr);
(define ~cairo_get_font_face #f)
(define (cairo_get_font_face cr)
  (unless
    ~cairo_get_font_face
    (set! ~cairo_get_font_face
      (fh-link-proc
        "cairo_get_font_face"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_get_font_face cr)))
(export cairo_get_font_face)

;; void cairo_set_scaled_font(cairo_t *cr, const cairo_scaled_font_t *
;;     scaled_font);
(define ~cairo_set_scaled_font #f)
(define (cairo_set_scaled_font cr scaled_font)
  (unless
    ~cairo_set_scaled_font
    (set! ~cairo_set_scaled_font
      (fh-link-proc
        "cairo_set_scaled_font"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_set_scaled_font cr scaled_font)))
(export cairo_set_scaled_font)

;; cairo_scaled_font_t *cairo_get_scaled_font(cairo_t *cr);
(define ~cairo_get_scaled_font #f)
(define (cairo_get_scaled_font cr)
  (unless
    ~cairo_get_scaled_font
    (set! ~cairo_get_scaled_font
      (fh-link-proc
        "cairo_get_scaled_font"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_get_scaled_font cr)))
(export cairo_get_scaled_font)

;; void cairo_show_text(cairo_t *cr, const char *utf8);
(define ~cairo_show_text #f)
(define (cairo_show_text cr utf8)
  (unless
    ~cairo_show_text
    (set! ~cairo_show_text
      (fh-link-proc
        "cairo_show_text"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~utf8 (unwrap~pointer utf8)))
    (~cairo_show_text cr ~utf8)))
(export cairo_show_text)

;; void cairo_show_glyphs(cairo_t *cr, const cairo_glyph_t *glyphs, int 
;;     num_glyphs);
(define ~cairo_show_glyphs #f)
(define (cairo_show_glyphs cr glyphs num_glyphs)
  (unless
    ~cairo_show_glyphs
    (set! ~cairo_show_glyphs
      (fh-link-proc
        "cairo_show_glyphs"
        ffi:void
        (list ffi-void* ffi-void* ffi:int)
        link-lib)))
  (let ((~num_glyphs (unwrap~fixed num_glyphs)))
    (~cairo_show_glyphs cr glyphs ~num_glyphs)))
(export cairo_show_glyphs)

;; void cairo_show_text_glyphs(cairo_t *cr, const char *utf8, int utf8_len, 
;;     const cairo_glyph_t *glyphs, int num_glyphs, const cairo_text_cluster_t 
;;     *clusters, int num_clusters, cairo_text_cluster_flags_t cluster_flags);
(define ~cairo_show_text_glyphs #f)
(define (cairo_show_text_glyphs
         cr
         utf8
         utf8_len
         glyphs
         num_glyphs
         clusters
         num_clusters
         cluster_flags)
  (unless
    ~cairo_show_text_glyphs
    (set! ~cairo_show_text_glyphs
      (fh-link-proc
        "cairo_show_text_glyphs"
        ffi:void
        (list ffi-void*
              ffi-void*
              ffi:int
              ffi-void*
              ffi:int
              ffi-void*
              ffi:int
              ffi:int)
        link-lib)))
  (let ((~utf8 (unwrap~pointer utf8))
        (~utf8_len (unwrap~fixed utf8_len))
        (~num_glyphs (unwrap~fixed num_glyphs))
        (~num_clusters (unwrap~fixed num_clusters))
        (~cluster_flags
          (unwrap-cairo_text_cluster_flags_t cluster_flags)))
    (~cairo_show_text_glyphs
      cr
      ~utf8
      ~utf8_len
      glyphs
      ~num_glyphs
      clusters
      ~num_clusters
      ~cluster_flags)))
(export cairo_show_text_glyphs)

;; void cairo_text_path(cairo_t *cr, const char *utf8);
(define ~cairo_text_path #f)
(define (cairo_text_path cr utf8)
  (unless
    ~cairo_text_path
    (set! ~cairo_text_path
      (fh-link-proc
        "cairo_text_path"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~utf8 (unwrap~pointer utf8)))
    (~cairo_text_path cr ~utf8)))
(export cairo_text_path)

;; void cairo_glyph_path(cairo_t *cr, const cairo_glyph_t *glyphs, int 
;;     num_glyphs);
(define ~cairo_glyph_path #f)
(define (cairo_glyph_path cr glyphs num_glyphs)
  (unless
    ~cairo_glyph_path
    (set! ~cairo_glyph_path
      (fh-link-proc
        "cairo_glyph_path"
        ffi:void
        (list ffi-void* ffi-void* ffi:int)
        link-lib)))
  (let ((~num_glyphs (unwrap~fixed num_glyphs)))
    (~cairo_glyph_path cr glyphs ~num_glyphs)))
(export cairo_glyph_path)

;; void cairo_text_extents(cairo_t *cr, const char *utf8, cairo_text_extents_t 
;;     *extents);
(define ~cairo_text_extents #f)
(define (cairo_text_extents cr utf8 extents)
  (unless
    ~cairo_text_extents
    (set! ~cairo_text_extents
      (fh-link-proc
        "cairo_text_extents"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~utf8 (unwrap~pointer utf8)))
    (~cairo_text_extents cr ~utf8 extents)))
(export cairo_text_extents)

;; void cairo_glyph_extents(cairo_t *cr, const cairo_glyph_t *glyphs, int 
;;     num_glyphs, cairo_text_extents_t *extents);
(define ~cairo_glyph_extents #f)
(define (cairo_glyph_extents
         cr
         glyphs
         num_glyphs
         extents)
  (unless
    ~cairo_glyph_extents
    (set! ~cairo_glyph_extents
      (fh-link-proc
        "cairo_glyph_extents"
        ffi:void
        (list ffi-void* ffi-void* ffi:int ffi-void*)
        link-lib)))
  (let ((~num_glyphs (unwrap~fixed num_glyphs)))
    (~cairo_glyph_extents
      cr
      glyphs
      ~num_glyphs
      extents)))
(export cairo_glyph_extents)

;; void cairo_font_extents(cairo_t *cr, cairo_font_extents_t *extents);
(define ~cairo_font_extents #f)
(define (cairo_font_extents cr extents)
  (unless
    ~cairo_font_extents
    (set! ~cairo_font_extents
      (fh-link-proc
        "cairo_font_extents"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_font_extents cr extents)))
(export cairo_font_extents)

;; cairo_font_face_t *cairo_font_face_reference(cairo_font_face_t *font_face);
(define ~cairo_font_face_reference #f)
(define (cairo_font_face_reference font_face)
  (unless
    ~cairo_font_face_reference
    (set! ~cairo_font_face_reference
      (fh-link-proc
        "cairo_font_face_reference"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_font_face_reference font_face)))
(export cairo_font_face_reference)

;; void cairo_font_face_destroy(cairo_font_face_t *font_face);
(define ~cairo_font_face_destroy #f)
(define (cairo_font_face_destroy font_face)
  (unless
    ~cairo_font_face_destroy
    (set! ~cairo_font_face_destroy
      (fh-link-proc
        "cairo_font_face_destroy"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_font_face_destroy font_face)))
(export cairo_font_face_destroy)

;; unsigned int cairo_font_face_get_reference_count(cairo_font_face_t *
;;     font_face);
(define ~cairo_font_face_get_reference_count #f)
(define (cairo_font_face_get_reference_count font_face)
  (unless
    ~cairo_font_face_get_reference_count
    (set! ~cairo_font_face_get_reference_count
      (fh-link-proc
        "cairo_font_face_get_reference_count"
        ffi:unsigned-int
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_font_face_get_reference_count font_face)))
(export cairo_font_face_get_reference_count)

;; cairo_status_t cairo_font_face_status(cairo_font_face_t *font_face);
(define ~cairo_font_face_status #f)
(define (cairo_font_face_status font_face)
  (unless
    ~cairo_font_face_status
    (set! ~cairo_font_face_status
      (fh-link-proc
        "cairo_font_face_status"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_font_face_status font_face))))
(export cairo_font_face_status)

;; typedef enum _cairo_font_type {
;;   CAIRO_FONT_TYPE_TOY,
;;   CAIRO_FONT_TYPE_FT,
;;   CAIRO_FONT_TYPE_WIN32,
;;   CAIRO_FONT_TYPE_QUARTZ,
;;   CAIRO_FONT_TYPE_USER,
;; } cairo_font_type_t;
(define cairo_font_type_t-enum-nvl
  '((CAIRO_FONT_TYPE_TOY . 0)
    (CAIRO_FONT_TYPE_FT . 1)
    (CAIRO_FONT_TYPE_WIN32 . 2)
    (CAIRO_FONT_TYPE_QUARTZ . 3)
    (CAIRO_FONT_TYPE_USER . 4))
  )
(define cairo_font_type_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_font_type_t-enum-nvl))
(define-public (unwrap-cairo_font_type_t n)
  (assq-ref cairo_font_type_t-enum-nvl n))
(define-public (wrap-cairo_font_type_t v)
  (assq-ref cairo_font_type_t-enum-vnl v))
(define-public unwrap-enum-_cairo_font_type unwrap-cairo_font_type_t)
(define-public wrap-enum-_cairo_font_type wrap-cairo_font_type_t)

;; cairo_font_type_t cairo_font_face_get_type(cairo_font_face_t *font_face);
(define ~cairo_font_face_get_type #f)
(define (cairo_font_face_get_type font_face)
  (unless
    ~cairo_font_face_get_type
    (set! ~cairo_font_face_get_type
      (fh-link-proc
        "cairo_font_face_get_type"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_font_type_t
      (~cairo_font_face_get_type font_face))))
(export cairo_font_face_get_type)

;; void *cairo_font_face_get_user_data(cairo_font_face_t *font_face, const 
;;     cairo_user_data_key_t *key);
(define ~cairo_font_face_get_user_data #f)
(define (cairo_font_face_get_user_data font_face key)
  (unless
    ~cairo_font_face_get_user_data
    (set! ~cairo_font_face_get_user_data
      (fh-link-proc
        "cairo_font_face_get_user_data"
        ffi-void*
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_font_face_get_user_data font_face key)))
(export cairo_font_face_get_user_data)

;; cairo_status_t cairo_font_face_set_user_data(cairo_font_face_t *font_face, 
;;     const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t 
;;     destroy);
(define ~cairo_font_face_set_user_data #f)
(define (cairo_font_face_set_user_data
         font_face
         key
         user_data
         destroy)
  (unless
    ~cairo_font_face_set_user_data
    (set! ~cairo_font_face_set_user_data
      (fh-link-proc
        "cairo_font_face_set_user_data"
        ffi:int
        (list ffi-void* ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~user_data (unwrap~pointer user_data))
        (~destroy
          ((make-fctn-param-unwrapper
             ffi:void
             (list ffi-void*))
           destroy)))
    (wrap-cairo_status_t
      (~cairo_font_face_set_user_data
        font_face
        key
        ~user_data
        ~destroy))))
(export cairo_font_face_set_user_data)

;; cairo_scaled_font_t *cairo_scaled_font_create(cairo_font_face_t *font_face, 
;;     const cairo_matrix_t *font_matrix, const cairo_matrix_t *ctm, const 
;;     cairo_font_options_t *options);
(define ~cairo_scaled_font_create #f)
(define (cairo_scaled_font_create
         font_face
         font_matrix
         ctm
         options)
  (unless
    ~cairo_scaled_font_create
    (set! ~cairo_scaled_font_create
      (fh-link-proc
        "cairo_scaled_font_create"
        ffi-void*
        (list ffi-void* ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_scaled_font_create
      font_face
      font_matrix
      ctm
      options)))
(export cairo_scaled_font_create)

;; cairo_scaled_font_t *cairo_scaled_font_reference(cairo_scaled_font_t *
;;     scaled_font);
(define ~cairo_scaled_font_reference #f)
(define (cairo_scaled_font_reference scaled_font)
  (unless
    ~cairo_scaled_font_reference
    (set! ~cairo_scaled_font_reference
      (fh-link-proc
        "cairo_scaled_font_reference"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_scaled_font_reference scaled_font)))
(export cairo_scaled_font_reference)

;; void cairo_scaled_font_destroy(cairo_scaled_font_t *scaled_font);
(define ~cairo_scaled_font_destroy #f)
(define (cairo_scaled_font_destroy scaled_font)
  (unless
    ~cairo_scaled_font_destroy
    (set! ~cairo_scaled_font_destroy
      (fh-link-proc
        "cairo_scaled_font_destroy"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_scaled_font_destroy scaled_font)))
(export cairo_scaled_font_destroy)

;; unsigned int cairo_scaled_font_get_reference_count(cairo_scaled_font_t *
;;     scaled_font);
(define ~cairo_scaled_font_get_reference_count #f)
(define (cairo_scaled_font_get_reference_count
         scaled_font)
  (unless
    ~cairo_scaled_font_get_reference_count
    (set! ~cairo_scaled_font_get_reference_count
      (fh-link-proc
        "cairo_scaled_font_get_reference_count"
        ffi:unsigned-int
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_scaled_font_get_reference_count
      scaled_font)))
(export cairo_scaled_font_get_reference_count)

;; cairo_status_t cairo_scaled_font_status(cairo_scaled_font_t *scaled_font);
(define ~cairo_scaled_font_status #f)
(define (cairo_scaled_font_status scaled_font)
  (unless
    ~cairo_scaled_font_status
    (set! ~cairo_scaled_font_status
      (fh-link-proc
        "cairo_scaled_font_status"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_scaled_font_status scaled_font))))
(export cairo_scaled_font_status)

;; cairo_font_type_t cairo_scaled_font_get_type(cairo_scaled_font_t *
;;     scaled_font);
(define ~cairo_scaled_font_get_type #f)
(define (cairo_scaled_font_get_type scaled_font)
  (unless
    ~cairo_scaled_font_get_type
    (set! ~cairo_scaled_font_get_type
      (fh-link-proc
        "cairo_scaled_font_get_type"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_font_type_t
      (~cairo_scaled_font_get_type scaled_font))))
(export cairo_scaled_font_get_type)

;; void *cairo_scaled_font_get_user_data(cairo_scaled_font_t *scaled_font, 
;;     const cairo_user_data_key_t *key);
(define ~cairo_scaled_font_get_user_data #f)
(define (cairo_scaled_font_get_user_data scaled_font key)
  (unless
    ~cairo_scaled_font_get_user_data
    (set! ~cairo_scaled_font_get_user_data
      (fh-link-proc
        "cairo_scaled_font_get_user_data"
        ffi-void*
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_scaled_font_get_user_data
      scaled_font
      key)))
(export cairo_scaled_font_get_user_data)

;; cairo_status_t cairo_scaled_font_set_user_data(cairo_scaled_font_t *
;;     scaled_font, const cairo_user_data_key_t *key, void *user_data, 
;;     cairo_destroy_func_t destroy);
(define ~cairo_scaled_font_set_user_data #f)
(define (cairo_scaled_font_set_user_data
         scaled_font
         key
         user_data
         destroy)
  (unless
    ~cairo_scaled_font_set_user_data
    (set! ~cairo_scaled_font_set_user_data
      (fh-link-proc
        "cairo_scaled_font_set_user_data"
        ffi:int
        (list ffi-void* ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~user_data (unwrap~pointer user_data))
        (~destroy
          ((make-fctn-param-unwrapper
             ffi:void
             (list ffi-void*))
           destroy)))
    (wrap-cairo_status_t
      (~cairo_scaled_font_set_user_data
        scaled_font
        key
        ~user_data
        ~destroy))))
(export cairo_scaled_font_set_user_data)

;; void cairo_scaled_font_extents(cairo_scaled_font_t *scaled_font, 
;;     cairo_font_extents_t *extents);
(define ~cairo_scaled_font_extents #f)
(define (cairo_scaled_font_extents scaled_font extents)
  (unless
    ~cairo_scaled_font_extents
    (set! ~cairo_scaled_font_extents
      (fh-link-proc
        "cairo_scaled_font_extents"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_scaled_font_extents scaled_font extents)))
(export cairo_scaled_font_extents)

;; void cairo_scaled_font_text_extents(cairo_scaled_font_t *scaled_font, const 
;;     char *utf8, cairo_text_extents_t *extents);
(define ~cairo_scaled_font_text_extents #f)
(define (cairo_scaled_font_text_extents
         scaled_font
         utf8
         extents)
  (unless
    ~cairo_scaled_font_text_extents
    (set! ~cairo_scaled_font_text_extents
      (fh-link-proc
        "cairo_scaled_font_text_extents"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~utf8 (unwrap~pointer utf8)))
    (~cairo_scaled_font_text_extents
      scaled_font
      ~utf8
      extents)))
(export cairo_scaled_font_text_extents)

;; void cairo_scaled_font_glyph_extents(cairo_scaled_font_t *scaled_font, const
;;      cairo_glyph_t *glyphs, int num_glyphs, cairo_text_extents_t *extents);
(define ~cairo_scaled_font_glyph_extents #f)
(define (cairo_scaled_font_glyph_extents
         scaled_font
         glyphs
         num_glyphs
         extents)
  (unless
    ~cairo_scaled_font_glyph_extents
    (set! ~cairo_scaled_font_glyph_extents
      (fh-link-proc
        "cairo_scaled_font_glyph_extents"
        ffi:void
        (list ffi-void* ffi-void* ffi:int ffi-void*)
        link-lib)))
  (let ((~num_glyphs (unwrap~fixed num_glyphs)))
    (~cairo_scaled_font_glyph_extents
      scaled_font
      glyphs
      ~num_glyphs
      extents)))
(export cairo_scaled_font_glyph_extents)

;; cairo_status_t cairo_scaled_font_text_to_glyphs(cairo_scaled_font_t *
;;     scaled_font, double x, double y, const char *utf8, int utf8_len, 
;;     cairo_glyph_t **glyphs, int *num_glyphs, cairo_text_cluster_t **clusters
;;     , int *num_clusters, cairo_text_cluster_flags_t *cluster_flags);
(define ~cairo_scaled_font_text_to_glyphs #f)
(define (cairo_scaled_font_text_to_glyphs
         scaled_font
         x
         y
         utf8
         utf8_len
         glyphs
         num_glyphs
         clusters
         num_clusters
         cluster_flags)
  (unless
    ~cairo_scaled_font_text_to_glyphs
    (set! ~cairo_scaled_font_text_to_glyphs
      (fh-link-proc
        "cairo_scaled_font_text_to_glyphs"
        ffi:int
        (list ffi-void*
              ffi:double
              ffi:double
              ffi-void*
              ffi:int
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~x (unwrap~float x))
        (~y (unwrap~float y))
        (~utf8 (unwrap~pointer utf8))
        (~utf8_len (unwrap~fixed utf8_len))
        (~glyphs (unwrap~pointer glyphs))
        (~num_glyphs (unwrap~pointer num_glyphs))
        (~clusters (unwrap~pointer clusters))
        (~num_clusters (unwrap~pointer num_clusters)))
    (wrap-cairo_status_t
      (~cairo_scaled_font_text_to_glyphs
        scaled_font
        ~x
        ~y
        ~utf8
        ~utf8_len
        ~glyphs
        ~num_glyphs
        ~clusters
        ~num_clusters
        cluster_flags))))
(export cairo_scaled_font_text_to_glyphs)

;; cairo_font_face_t *cairo_scaled_font_get_font_face(cairo_scaled_font_t *
;;     scaled_font);
(define ~cairo_scaled_font_get_font_face #f)
(define (cairo_scaled_font_get_font_face scaled_font)
  (unless
    ~cairo_scaled_font_get_font_face
    (set! ~cairo_scaled_font_get_font_face
      (fh-link-proc
        "cairo_scaled_font_get_font_face"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_scaled_font_get_font_face scaled_font)))
(export cairo_scaled_font_get_font_face)

;; void cairo_scaled_font_get_font_matrix(cairo_scaled_font_t *scaled_font, 
;;     cairo_matrix_t *font_matrix);
(define ~cairo_scaled_font_get_font_matrix #f)
(define (cairo_scaled_font_get_font_matrix
         scaled_font
         font_matrix)
  (unless
    ~cairo_scaled_font_get_font_matrix
    (set! ~cairo_scaled_font_get_font_matrix
      (fh-link-proc
        "cairo_scaled_font_get_font_matrix"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_scaled_font_get_font_matrix
      scaled_font
      font_matrix)))
(export cairo_scaled_font_get_font_matrix)

;; void cairo_scaled_font_get_ctm(cairo_scaled_font_t *scaled_font, 
;;     cairo_matrix_t *ctm);
(define ~cairo_scaled_font_get_ctm #f)
(define (cairo_scaled_font_get_ctm scaled_font ctm)
  (unless
    ~cairo_scaled_font_get_ctm
    (set! ~cairo_scaled_font_get_ctm
      (fh-link-proc
        "cairo_scaled_font_get_ctm"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_scaled_font_get_ctm scaled_font ctm)))
(export cairo_scaled_font_get_ctm)

;; void cairo_scaled_font_get_scale_matrix(cairo_scaled_font_t *scaled_font, 
;;     cairo_matrix_t *scale_matrix);
(define ~cairo_scaled_font_get_scale_matrix #f)
(define (cairo_scaled_font_get_scale_matrix
         scaled_font
         scale_matrix)
  (unless
    ~cairo_scaled_font_get_scale_matrix
    (set! ~cairo_scaled_font_get_scale_matrix
      (fh-link-proc
        "cairo_scaled_font_get_scale_matrix"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_scaled_font_get_scale_matrix
      scaled_font
      scale_matrix)))
(export cairo_scaled_font_get_scale_matrix)

;; void cairo_scaled_font_get_font_options(cairo_scaled_font_t *scaled_font, 
;;     cairo_font_options_t *options);
(define ~cairo_scaled_font_get_font_options #f)
(define (cairo_scaled_font_get_font_options
         scaled_font
         options)
  (unless
    ~cairo_scaled_font_get_font_options
    (set! ~cairo_scaled_font_get_font_options
      (fh-link-proc
        "cairo_scaled_font_get_font_options"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_scaled_font_get_font_options
      scaled_font
      options)))
(export cairo_scaled_font_get_font_options)

;; cairo_font_face_t *cairo_toy_font_face_create(const char *family, 
;;     cairo_font_slant_t slant, cairo_font_weight_t weight);
(define ~cairo_toy_font_face_create #f)
(define (cairo_toy_font_face_create family slant weight)
  (unless
    ~cairo_toy_font_face_create
    (set! ~cairo_toy_font_face_create
      (fh-link-proc
        "cairo_toy_font_face_create"
        ffi-void*
        (list ffi-void* ffi:int ffi:int)
        link-lib)))
  (let ((~family (unwrap~pointer family))
        (~slant (unwrap-cairo_font_slant_t slant))
        (~weight (unwrap-cairo_font_weight_t weight)))
    (~cairo_toy_font_face_create
      ~family
      ~slant
      ~weight)))
(export cairo_toy_font_face_create)

;; const char *cairo_toy_font_face_get_family(cairo_font_face_t *font_face);
(define ~cairo_toy_font_face_get_family #f)
(define (cairo_toy_font_face_get_family font_face)
  (unless
    ~cairo_toy_font_face_get_family
    (set! ~cairo_toy_font_face_get_family
      (fh-link-proc
        "cairo_toy_font_face_get_family"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_toy_font_face_get_family font_face)))
(export cairo_toy_font_face_get_family)

;; cairo_font_slant_t cairo_toy_font_face_get_slant(cairo_font_face_t *
;;     font_face);
(define ~cairo_toy_font_face_get_slant #f)
(define (cairo_toy_font_face_get_slant font_face)
  (unless
    ~cairo_toy_font_face_get_slant
    (set! ~cairo_toy_font_face_get_slant
      (fh-link-proc
        "cairo_toy_font_face_get_slant"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_font_slant_t
      (~cairo_toy_font_face_get_slant font_face))))
(export cairo_toy_font_face_get_slant)

;; cairo_font_weight_t cairo_toy_font_face_get_weight(cairo_font_face_t *
;;     font_face);
(define ~cairo_toy_font_face_get_weight #f)
(define (cairo_toy_font_face_get_weight font_face)
  (unless
    ~cairo_toy_font_face_get_weight
    (set! ~cairo_toy_font_face_get_weight
      (fh-link-proc
        "cairo_toy_font_face_get_weight"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_font_weight_t
      (~cairo_toy_font_face_get_weight font_face))))
(export cairo_toy_font_face_get_weight)

;; cairo_font_face_t *cairo_user_font_face_create(void);
(define ~cairo_user_font_face_create #f)
(define (cairo_user_font_face_create)
  (unless
    ~cairo_user_font_face_create
    (set! ~cairo_user_font_face_create
      (fh-link-proc
        "cairo_user_font_face_create"
        ffi-void*
        (list)
        link-lib)))
  (let () (~cairo_user_font_face_create)))
(export cairo_user_font_face_create)

;; typedef cairo_status_t (*cairo_user_scaled_font_init_func_t)(
;;     cairo_scaled_font_t *scaled_font, cairo_t *cr, cairo_font_extents_t *
;;     extents);
(define-public cairo_user_scaled_font_init_func_t*-desc
(bs:pointer
  (delay (fh:function
           ffi:int
           (ffi-void* ffi-void* ffi-void*))))
  )
(define-fh-function*-type
  cairo_user_scaled_font_init_func_t*
  cairo_user_scaled_font_init_func_t*-desc
  cairo_user_scaled_font_init_func_t*?
  make-cairo_user_scaled_font_init_func_t*)
(export cairo_user_scaled_font_init_func_t* 
 cairo_user_scaled_font_init_func_t*? make-cairo_user_scaled_font_init_func_t*
 )

;; typedef cairo_status_t (*cairo_user_scaled_font_render_glyph_func_t)(
;;     cairo_scaled_font_t *scaled_font, unsigned long glyph, cairo_t *cr, 
;;     cairo_text_extents_t *extents);
(define-public cairo_user_scaled_font_render_glyph_func_t*-desc
(bs:pointer
  (delay (fh:function
           ffi:int
           (ffi-void* ffi:unsigned-long ffi-void* ffi-void*))))
  )
(define-fh-function*-type
  cairo_user_scaled_font_render_glyph_func_t*
  cairo_user_scaled_font_render_glyph_func_t*-desc
  cairo_user_scaled_font_render_glyph_func_t*?
  make-cairo_user_scaled_font_render_glyph_func_t*)
(export cairo_user_scaled_font_render_glyph_func_t* 
 cairo_user_scaled_font_render_glyph_func_t*? 
 make-cairo_user_scaled_font_render_glyph_func_t*)

;; typedef cairo_status_t (*cairo_user_scaled_font_text_to_glyphs_func_t)(
;;     cairo_scaled_font_t *scaled_font, const char *utf8, int utf8_len, 
;;     cairo_glyph_t **glyphs, int *num_glyphs, cairo_text_cluster_t **clusters
;;     , int *num_clusters, cairo_text_cluster_flags_t *cluster_flags);
(define-public cairo_user_scaled_font_text_to_glyphs_func_t*-desc
(bs:pointer
  (delay (fh:function
           ffi:int
           (ffi-void*
             ffi-void*
             ffi:int
             ffi-void*
             ffi-void*
             ffi-void*
             ffi-void*
             ffi-void*))))
  )
(define-fh-function*-type
  cairo_user_scaled_font_text_to_glyphs_func_t*
  cairo_user_scaled_font_text_to_glyphs_func_t*-desc
  cairo_user_scaled_font_text_to_glyphs_func_t*?
  make-cairo_user_scaled_font_text_to_glyphs_func_t*)
(export cairo_user_scaled_font_text_to_glyphs_func_t* 
 cairo_user_scaled_font_text_to_glyphs_func_t*? 
 make-cairo_user_scaled_font_text_to_glyphs_func_t*)

;; typedef cairo_status_t (*cairo_user_scaled_font_unicode_to_glyph_func_t)(
;;     cairo_scaled_font_t *scaled_font, unsigned long unicode, unsigned long *
;;     glyph_index);
(define-public cairo_user_scaled_font_unicode_to_glyph_func_t*-desc
(bs:pointer
  (delay (fh:function
           ffi:int
           (ffi-void* ffi:unsigned-long ffi-void*))))
  )
(define-fh-function*-type
  cairo_user_scaled_font_unicode_to_glyph_func_t*
  cairo_user_scaled_font_unicode_to_glyph_func_t*-desc
  cairo_user_scaled_font_unicode_to_glyph_func_t*?
  make-cairo_user_scaled_font_unicode_to_glyph_func_t*)
(export cairo_user_scaled_font_unicode_to_glyph_func_t* 
 cairo_user_scaled_font_unicode_to_glyph_func_t*? 
 make-cairo_user_scaled_font_unicode_to_glyph_func_t*)

;; void cairo_user_font_face_set_init_func(cairo_font_face_t *font_face, 
;;     cairo_user_scaled_font_init_func_t init_func);
(define ~cairo_user_font_face_set_init_func #f)
(define (cairo_user_font_face_set_init_func
         font_face
         init_func)
  (unless
    ~cairo_user_font_face_set_init_func
    (set! ~cairo_user_font_face_set_init_func
      (fh-link-proc
        "cairo_user_font_face_set_init_func"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~init_func
          ((make-fctn-param-unwrapper
             ffi:int
             (list ffi-void* ffi-void* ffi-void*))
           init_func)))
    (~cairo_user_font_face_set_init_func
      font_face
      ~init_func)))
(export cairo_user_font_face_set_init_func)

;; void cairo_user_font_face_set_render_glyph_func(cairo_font_face_t *font_face
;;     , cairo_user_scaled_font_render_glyph_func_t render_glyph_func);
(define ~cairo_user_font_face_set_render_glyph_func #f)
(define (cairo_user_font_face_set_render_glyph_func
         font_face
         render_glyph_func)
  (unless
    ~cairo_user_font_face_set_render_glyph_func
    (set! ~cairo_user_font_face_set_render_glyph_func
      (fh-link-proc
        "cairo_user_font_face_set_render_glyph_func"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~render_glyph_func
          ((make-fctn-param-unwrapper
             ffi:int
             (list ffi-void*
                   ffi:unsigned-long
                   ffi-void*
                   ffi-void*))
           render_glyph_func)))
    (~cairo_user_font_face_set_render_glyph_func
      font_face
      ~render_glyph_func)))
(export cairo_user_font_face_set_render_glyph_func)

;; void cairo_user_font_face_set_text_to_glyphs_func(cairo_font_face_t *
;;     font_face, cairo_user_scaled_font_text_to_glyphs_func_t 
;;     text_to_glyphs_func);
(define ~cairo_user_font_face_set_text_to_glyphs_func #f)
(define (cairo_user_font_face_set_text_to_glyphs_func
         font_face
         text_to_glyphs_func)
  (unless
    ~cairo_user_font_face_set_text_to_glyphs_func
    (set! ~cairo_user_font_face_set_text_to_glyphs_func
      (fh-link-proc
        "cairo_user_font_face_set_text_to_glyphs_func"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~text_to_glyphs_func
          ((make-fctn-param-unwrapper
             ffi:int
             (list ffi-void*
                   ffi-void*
                   ffi:int
                   ffi-void*
                   ffi-void*
                   ffi-void*
                   ffi-void*
                   ffi-void*))
           text_to_glyphs_func)))
    (~cairo_user_font_face_set_text_to_glyphs_func
      font_face
      ~text_to_glyphs_func)))
(export cairo_user_font_face_set_text_to_glyphs_func)

;; void cairo_user_font_face_set_unicode_to_glyph_func(cairo_font_face_t *
;;     font_face, cairo_user_scaled_font_unicode_to_glyph_func_t 
;;     unicode_to_glyph_func);
(define ~cairo_user_font_face_set_unicode_to_glyph_func #f)
(define (cairo_user_font_face_set_unicode_to_glyph_func
         font_face
         unicode_to_glyph_func)
  (unless
    ~cairo_user_font_face_set_unicode_to_glyph_func
    (set! ~cairo_user_font_face_set_unicode_to_glyph_func
      (fh-link-proc
        "cairo_user_font_face_set_unicode_to_glyph_func"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~unicode_to_glyph_func
          ((make-fctn-param-unwrapper
             ffi:int
             (list ffi-void* ffi:unsigned-long ffi-void*))
           unicode_to_glyph_func)))
    (~cairo_user_font_face_set_unicode_to_glyph_func
      font_face
      ~unicode_to_glyph_func)))
(export cairo_user_font_face_set_unicode_to_glyph_func)

;; cairo_user_scaled_font_init_func_t cairo_user_font_face_get_init_func(
;;     cairo_font_face_t *font_face);
(define ~cairo_user_font_face_get_init_func #f)
(define (cairo_user_font_face_get_init_func font_face)
  (unless
    ~cairo_user_font_face_get_init_func
    (set! ~cairo_user_font_face_get_init_func
      (fh-link-proc
        "cairo_user_font_face_get_init_func"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_user_font_face_get_init_func font_face)))
(export cairo_user_font_face_get_init_func)

;; cairo_user_scaled_font_render_glyph_func_t 
;;     cairo_user_font_face_get_render_glyph_func(cairo_font_face_t *font_face)
;;     ;
(define ~cairo_user_font_face_get_render_glyph_func #f)
(define (cairo_user_font_face_get_render_glyph_func
         font_face)
  (unless
    ~cairo_user_font_face_get_render_glyph_func
    (set! ~cairo_user_font_face_get_render_glyph_func
      (fh-link-proc
        "cairo_user_font_face_get_render_glyph_func"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_user_font_face_get_render_glyph_func
      font_face)))
(export cairo_user_font_face_get_render_glyph_func)

;; cairo_user_scaled_font_text_to_glyphs_func_t 
;;     cairo_user_font_face_get_text_to_glyphs_func(cairo_font_face_t *
;;     font_face);
(define ~cairo_user_font_face_get_text_to_glyphs_func #f)
(define (cairo_user_font_face_get_text_to_glyphs_func
         font_face)
  (unless
    ~cairo_user_font_face_get_text_to_glyphs_func
    (set! ~cairo_user_font_face_get_text_to_glyphs_func
      (fh-link-proc
        "cairo_user_font_face_get_text_to_glyphs_func"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_user_font_face_get_text_to_glyphs_func
      font_face)))
(export cairo_user_font_face_get_text_to_glyphs_func)

;; cairo_user_scaled_font_unicode_to_glyph_func_t 
;;     cairo_user_font_face_get_unicode_to_glyph_func(cairo_font_face_t *
;;     font_face);
(define ~cairo_user_font_face_get_unicode_to_glyph_func #f)
(define (cairo_user_font_face_get_unicode_to_glyph_func
         font_face)
  (unless
    ~cairo_user_font_face_get_unicode_to_glyph_func
    (set! ~cairo_user_font_face_get_unicode_to_glyph_func
      (fh-link-proc
        "cairo_user_font_face_get_unicode_to_glyph_func"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_user_font_face_get_unicode_to_glyph_func
      font_face)))
(export cairo_user_font_face_get_unicode_to_glyph_func)

;; cairo_operator_t cairo_get_operator(cairo_t *cr);
(define ~cairo_get_operator #f)
(define (cairo_get_operator cr)
  (unless
    ~cairo_get_operator
    (set! ~cairo_get_operator
      (fh-link-proc
        "cairo_get_operator"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_operator_t (~cairo_get_operator cr))))
(export cairo_get_operator)

;; cairo_pattern_t *cairo_get_source(cairo_t *cr);
(define ~cairo_get_source #f)
(define (cairo_get_source cr)
  (unless
    ~cairo_get_source
    (set! ~cairo_get_source
      (fh-link-proc
        "cairo_get_source"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_get_source cr)))
(export cairo_get_source)

;; double cairo_get_tolerance(cairo_t *cr);
(define ~cairo_get_tolerance #f)
(define (cairo_get_tolerance cr)
  (unless
    ~cairo_get_tolerance
    (set! ~cairo_get_tolerance
      (fh-link-proc
        "cairo_get_tolerance"
        ffi:double
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_get_tolerance cr)))
(export cairo_get_tolerance)

;; cairo_antialias_t cairo_get_antialias(cairo_t *cr);
(define ~cairo_get_antialias #f)
(define (cairo_get_antialias cr)
  (unless
    ~cairo_get_antialias
    (set! ~cairo_get_antialias
      (fh-link-proc
        "cairo_get_antialias"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_antialias_t
      (~cairo_get_antialias cr))))
(export cairo_get_antialias)

;; cairo_bool_t cairo_has_current_point(cairo_t *cr);
(define ~cairo_has_current_point #f)
(define (cairo_has_current_point cr)
  (unless
    ~cairo_has_current_point
    (set! ~cairo_has_current_point
      (fh-link-proc
        "cairo_has_current_point"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_bool_t (~cairo_has_current_point cr))))
(export cairo_has_current_point)

;; void cairo_get_current_point(cairo_t *cr, double *x, double *y);
(define ~cairo_get_current_point #f)
(define (cairo_get_current_point cr x y)
  (unless
    ~cairo_get_current_point
    (set! ~cairo_get_current_point
      (fh-link-proc
        "cairo_get_current_point"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~x (unwrap~pointer x)) (~y (unwrap~pointer y)))
    (~cairo_get_current_point cr ~x ~y)))
(export cairo_get_current_point)

;; cairo_fill_rule_t cairo_get_fill_rule(cairo_t *cr);
(define ~cairo_get_fill_rule #f)
(define (cairo_get_fill_rule cr)
  (unless
    ~cairo_get_fill_rule
    (set! ~cairo_get_fill_rule
      (fh-link-proc
        "cairo_get_fill_rule"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_fill_rule_t
      (~cairo_get_fill_rule cr))))
(export cairo_get_fill_rule)

;; double cairo_get_line_width(cairo_t *cr);
(define ~cairo_get_line_width #f)
(define (cairo_get_line_width cr)
  (unless
    ~cairo_get_line_width
    (set! ~cairo_get_line_width
      (fh-link-proc
        "cairo_get_line_width"
        ffi:double
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_get_line_width cr)))
(export cairo_get_line_width)

;; cairo_line_cap_t cairo_get_line_cap(cairo_t *cr);
(define ~cairo_get_line_cap #f)
(define (cairo_get_line_cap cr)
  (unless
    ~cairo_get_line_cap
    (set! ~cairo_get_line_cap
      (fh-link-proc
        "cairo_get_line_cap"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_line_cap_t (~cairo_get_line_cap cr))))
(export cairo_get_line_cap)

;; cairo_line_join_t cairo_get_line_join(cairo_t *cr);
(define ~cairo_get_line_join #f)
(define (cairo_get_line_join cr)
  (unless
    ~cairo_get_line_join
    (set! ~cairo_get_line_join
      (fh-link-proc
        "cairo_get_line_join"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_line_join_t
      (~cairo_get_line_join cr))))
(export cairo_get_line_join)

;; double cairo_get_miter_limit(cairo_t *cr);
(define ~cairo_get_miter_limit #f)
(define (cairo_get_miter_limit cr)
  (unless
    ~cairo_get_miter_limit
    (set! ~cairo_get_miter_limit
      (fh-link-proc
        "cairo_get_miter_limit"
        ffi:double
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_get_miter_limit cr)))
(export cairo_get_miter_limit)

;; int cairo_get_dash_count(cairo_t *cr);
(define ~cairo_get_dash_count #f)
(define (cairo_get_dash_count cr)
  (unless
    ~cairo_get_dash_count
    (set! ~cairo_get_dash_count
      (fh-link-proc
        "cairo_get_dash_count"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_get_dash_count cr)))
(export cairo_get_dash_count)

;; void cairo_get_dash(cairo_t *cr, double *dashes, double *offset);
(define ~cairo_get_dash #f)
(define (cairo_get_dash cr dashes offset)
  (unless
    ~cairo_get_dash
    (set! ~cairo_get_dash
      (fh-link-proc
        "cairo_get_dash"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~dashes (unwrap~pointer dashes))
        (~offset (unwrap~pointer offset)))
    (~cairo_get_dash cr ~dashes ~offset)))
(export cairo_get_dash)

;; void cairo_get_matrix(cairo_t *cr, cairo_matrix_t *matrix);
(define ~cairo_get_matrix #f)
(define (cairo_get_matrix cr matrix)
  (unless
    ~cairo_get_matrix
    (set! ~cairo_get_matrix
      (fh-link-proc
        "cairo_get_matrix"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_get_matrix cr matrix)))
(export cairo_get_matrix)

;; cairo_surface_t *cairo_get_target(cairo_t *cr);
(define ~cairo_get_target #f)
(define (cairo_get_target cr)
  (unless
    ~cairo_get_target
    (set! ~cairo_get_target
      (fh-link-proc
        "cairo_get_target"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_get_target cr)))
(export cairo_get_target)

;; cairo_surface_t *cairo_get_group_target(cairo_t *cr);
(define ~cairo_get_group_target #f)
(define (cairo_get_group_target cr)
  (unless
    ~cairo_get_group_target
    (set! ~cairo_get_group_target
      (fh-link-proc
        "cairo_get_group_target"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_get_group_target cr)))
(export cairo_get_group_target)

;; typedef enum _cairo_path_data_type {
;;   CAIRO_PATH_MOVE_TO,
;;   CAIRO_PATH_LINE_TO,
;;   CAIRO_PATH_CURVE_TO,
;;   CAIRO_PATH_CLOSE_PATH,
;; } cairo_path_data_type_t;
(define cairo_path_data_type_t-enum-nvl
  '((CAIRO_PATH_MOVE_TO . 0)
    (CAIRO_PATH_LINE_TO . 1)
    (CAIRO_PATH_CURVE_TO . 2)
    (CAIRO_PATH_CLOSE_PATH . 3))
  )
(define cairo_path_data_type_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_path_data_type_t-enum-nvl))
(define-public (unwrap-cairo_path_data_type_t n)
  (assq-ref cairo_path_data_type_t-enum-nvl n))
(define-public (wrap-cairo_path_data_type_t v)
  (assq-ref cairo_path_data_type_t-enum-vnl v))
(define-public unwrap-enum-_cairo_path_data_type unwrap-cairo_path_data_type_t)
(define-public wrap-enum-_cairo_path_data_type wrap-cairo_path_data_type_t)

;; typedef union _cairo_path_data_t cairo_path_data_t;
;; union _cairo_path_data_t {
;;   struct {
;;     cairo_path_data_type_t type;
;;     int length;
;;   } header;
;;   struct {
;;     double x, y;
;;   } point;
;; };
;; == union-_cairo_path_data_t =>
(define-public union-_cairo_path_data_t-desc
  (bs:union
    (list `(header
             ,(bs:struct (list `(type ,int) `(length ,int))))
          `(point ,(bs:struct (list `(y ,double) `(x ,double)))))))
(define-fh-compound-type union-_cairo_path_data_t 
 union-_cairo_path_data_t-desc union-_cairo_path_data_t? 
 make-union-_cairo_path_data_t)
(export union-_cairo_path_data_t union-_cairo_path_data_t? 
 make-union-_cairo_path_data_t)
;; == union-_cairo_path_data_t* =>
(define-public union-_cairo_path_data_t*-desc
  (bs:pointer union-_cairo_path_data_t-desc))
(define-fh-pointer-type union-_cairo_path_data_t* 
 union-_cairo_path_data_t*-desc union-_cairo_path_data_t*? 
 make-union-_cairo_path_data_t*)
(export union-_cairo_path_data_t* union-_cairo_path_data_t*? 
 make-union-_cairo_path_data_t*)
;; == cairo_path_data_t =>
(define-public cairo_path_data_t
  union-_cairo_path_data_t-desc)
(define-fh-compound-type cairo_path_data_t cairo_path_data_t-desc 
 cairo_path_data_t? make-cairo_path_data_t)
(export cairo_path_data_t cairo_path_data_t? make-cairo_path_data_t)
;; == cairo_path_data_t* =>
(define-public cairo_path_data_t*
  (bs:pointer cairo_path_data_t))
(define-fh-pointer-type cairo_path_data_t* cairo_path_data_t*-desc 
 cairo_path_data_t*? make-cairo_path_data_t*)
(export cairo_path_data_t* cairo_path_data_t*? make-cairo_path_data_t*)

;; typedef struct cairo_path {
;;   cairo_status_t status;
;;   cairo_path_data_t *data;
;;   int num_data;
;; } cairo_path_t;
;; == struct-cairo_path =>
(define-public struct-cairo_path-desc
  (bs:struct
    (list `(status ,int)
          `(data ,(bs:pointer (delay cairo_path_data_t*-desc)))
          `(num_data ,int))))
(define-fh-compound-type struct-cairo_path struct-cairo_path-desc 
 struct-cairo_path? make-struct-cairo_path)
(export struct-cairo_path struct-cairo_path? make-struct-cairo_path)
;; == struct-cairo_path* =>
(define-public struct-cairo_path*-desc
  (bs:pointer struct-cairo_path-desc))
(define-fh-pointer-type struct-cairo_path* struct-cairo_path*-desc 
 struct-cairo_path*? make-struct-cairo_path*)
(export struct-cairo_path* struct-cairo_path*? make-struct-cairo_path*)
;; == cairo_path_t =>
(define-public cairo_path_t
  struct-cairo_path-desc)
(define-fh-compound-type cairo_path_t cairo_path_t-desc cairo_path_t? 
 make-cairo_path_t)
(export cairo_path_t cairo_path_t? make-cairo_path_t)
;; == cairo_path_t* =>
(define-public cairo_path_t*
  (bs:pointer cairo_path_t))
(define-fh-pointer-type cairo_path_t* cairo_path_t*-desc cairo_path_t*? 
 make-cairo_path_t*)
(export cairo_path_t* cairo_path_t*? make-cairo_path_t*)

;; cairo_path_t *cairo_copy_path(cairo_t *cr);
(define ~cairo_copy_path #f)
(define (cairo_copy_path cr)
  (unless
    ~cairo_copy_path
    (set! ~cairo_copy_path
      (fh-link-proc
        "cairo_copy_path"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_copy_path cr)))
(export cairo_copy_path)

;; cairo_path_t *cairo_copy_path_flat(cairo_t *cr);
(define ~cairo_copy_path_flat #f)
(define (cairo_copy_path_flat cr)
  (unless
    ~cairo_copy_path_flat
    (set! ~cairo_copy_path_flat
      (fh-link-proc
        "cairo_copy_path_flat"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_copy_path_flat cr)))
(export cairo_copy_path_flat)

;; void cairo_append_path(cairo_t *cr, const cairo_path_t *path);
(define ~cairo_append_path #f)
(define (cairo_append_path cr path)
  (unless
    ~cairo_append_path
    (set! ~cairo_append_path
      (fh-link-proc
        "cairo_append_path"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_append_path cr path)))
(export cairo_append_path)

;; void cairo_path_destroy(cairo_path_t *path);
(define ~cairo_path_destroy #f)
(define (cairo_path_destroy path)
  (unless
    ~cairo_path_destroy
    (set! ~cairo_path_destroy
      (fh-link-proc
        "cairo_path_destroy"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_path_destroy path)))
(export cairo_path_destroy)

;; cairo_status_t cairo_status(cairo_t *cr);
(define ~cairo_status #f)
(define (cairo_status cr)
  (unless
    ~cairo_status
    (set! ~cairo_status
      (fh-link-proc
        "cairo_status"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let () (wrap-cairo_status_t (~cairo_status cr))))
(export cairo_status)

;; const char *cairo_status_to_string(cairo_status_t status);
(define ~cairo_status_to_string #f)
(define (cairo_status_to_string status)
  (unless
    ~cairo_status_to_string
    (set! ~cairo_status_to_string
      (fh-link-proc
        "cairo_status_to_string"
        ffi-void*
        (list ffi:int)
        link-lib)))
  (let ((~status (unwrap-cairo_status_t status)))
    (~cairo_status_to_string ~status)))
(export cairo_status_to_string)

;; cairo_device_t *cairo_device_reference(cairo_device_t *device);
(define ~cairo_device_reference #f)
(define (cairo_device_reference device)
  (unless
    ~cairo_device_reference
    (set! ~cairo_device_reference
      (fh-link-proc
        "cairo_device_reference"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_device_reference device)))
(export cairo_device_reference)

;; typedef enum _cairo_device_type {
;;   CAIRO_DEVICE_TYPE_DRM,
;;   CAIRO_DEVICE_TYPE_GL,
;;   CAIRO_DEVICE_TYPE_SCRIPT,
;;   CAIRO_DEVICE_TYPE_XCB,
;;   CAIRO_DEVICE_TYPE_XLIB,
;;   CAIRO_DEVICE_TYPE_XML,
;;   CAIRO_DEVICE_TYPE_COGL,
;;   CAIRO_DEVICE_TYPE_WIN32,
;;   CAIRO_DEVICE_TYPE_INVALID = -1,
;; } cairo_device_type_t;
(define cairo_device_type_t-enum-nvl
  '((CAIRO_DEVICE_TYPE_DRM . 0)
    (CAIRO_DEVICE_TYPE_GL . 1)
    (CAIRO_DEVICE_TYPE_SCRIPT . 2)
    (CAIRO_DEVICE_TYPE_XCB . 3)
    (CAIRO_DEVICE_TYPE_XLIB . 4)
    (CAIRO_DEVICE_TYPE_XML . 5)
    (CAIRO_DEVICE_TYPE_COGL . 6)
    (CAIRO_DEVICE_TYPE_WIN32 . 7)
    (CAIRO_DEVICE_TYPE_INVALID . -1))
  )
(define cairo_device_type_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_device_type_t-enum-nvl))
(define-public (unwrap-cairo_device_type_t n)
  (assq-ref cairo_device_type_t-enum-nvl n))
(define-public (wrap-cairo_device_type_t v)
  (assq-ref cairo_device_type_t-enum-vnl v))
(define-public unwrap-enum-_cairo_device_type unwrap-cairo_device_type_t)
(define-public wrap-enum-_cairo_device_type wrap-cairo_device_type_t)

;; cairo_device_type_t cairo_device_get_type(cairo_device_t *device);
(define ~cairo_device_get_type #f)
(define (cairo_device_get_type device)
  (unless
    ~cairo_device_get_type
    (set! ~cairo_device_get_type
      (fh-link-proc
        "cairo_device_get_type"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_device_type_t
      (~cairo_device_get_type device))))
(export cairo_device_get_type)

;; cairo_status_t cairo_device_status(cairo_device_t *device);
(define ~cairo_device_status #f)
(define (cairo_device_status device)
  (unless
    ~cairo_device_status
    (set! ~cairo_device_status
      (fh-link-proc
        "cairo_device_status"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_device_status device))))
(export cairo_device_status)

;; cairo_status_t cairo_device_acquire(cairo_device_t *device);
(define ~cairo_device_acquire #f)
(define (cairo_device_acquire device)
  (unless
    ~cairo_device_acquire
    (set! ~cairo_device_acquire
      (fh-link-proc
        "cairo_device_acquire"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_device_acquire device))))
(export cairo_device_acquire)

;; void cairo_device_release(cairo_device_t *device);
(define ~cairo_device_release #f)
(define (cairo_device_release device)
  (unless
    ~cairo_device_release
    (set! ~cairo_device_release
      (fh-link-proc
        "cairo_device_release"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_device_release device)))
(export cairo_device_release)

;; void cairo_device_flush(cairo_device_t *device);
(define ~cairo_device_flush #f)
(define (cairo_device_flush device)
  (unless
    ~cairo_device_flush
    (set! ~cairo_device_flush
      (fh-link-proc
        "cairo_device_flush"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_device_flush device)))
(export cairo_device_flush)

;; void cairo_device_finish(cairo_device_t *device);
(define ~cairo_device_finish #f)
(define (cairo_device_finish device)
  (unless
    ~cairo_device_finish
    (set! ~cairo_device_finish
      (fh-link-proc
        "cairo_device_finish"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_device_finish device)))
(export cairo_device_finish)

;; void cairo_device_destroy(cairo_device_t *device);
(define ~cairo_device_destroy #f)
(define (cairo_device_destroy device)
  (unless
    ~cairo_device_destroy
    (set! ~cairo_device_destroy
      (fh-link-proc
        "cairo_device_destroy"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_device_destroy device)))
(export cairo_device_destroy)

;; unsigned int cairo_device_get_reference_count(cairo_device_t *device);
(define ~cairo_device_get_reference_count #f)
(define (cairo_device_get_reference_count device)
  (unless
    ~cairo_device_get_reference_count
    (set! ~cairo_device_get_reference_count
      (fh-link-proc
        "cairo_device_get_reference_count"
        ffi:unsigned-int
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_device_get_reference_count device)))
(export cairo_device_get_reference_count)

;; void *cairo_device_get_user_data(cairo_device_t *device, const 
;;     cairo_user_data_key_t *key);
(define ~cairo_device_get_user_data #f)
(define (cairo_device_get_user_data device key)
  (unless
    ~cairo_device_get_user_data
    (set! ~cairo_device_get_user_data
      (fh-link-proc
        "cairo_device_get_user_data"
        ffi-void*
        (list ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_device_get_user_data device key)))
(export cairo_device_get_user_data)

;; cairo_status_t cairo_device_set_user_data(cairo_device_t *device, const 
;;     cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t 
;;     destroy);
(define ~cairo_device_set_user_data #f)
(define (cairo_device_set_user_data
         device
         key
         user_data
         destroy)
  (unless
    ~cairo_device_set_user_data
    (set! ~cairo_device_set_user_data
      (fh-link-proc
        "cairo_device_set_user_data"
        ffi:int
        (list ffi-void* ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~user_data (unwrap~pointer user_data))
        (~destroy
          ((make-fctn-param-unwrapper
             ffi:void
             (list ffi-void*))
           destroy)))
    (wrap-cairo_status_t
      (~cairo_device_set_user_data
        device
        key
        ~user_data
        ~destroy))))
(export cairo_device_set_user_data)

;; cairo_surface_t *cairo_surface_create_similar(cairo_surface_t *other, 
;;     cairo_content_t content, int width, int height);
(define ~cairo_surface_create_similar #f)
(define (cairo_surface_create_similar
         other
         content
         width
         height)
  (unless
    ~cairo_surface_create_similar
    (set! ~cairo_surface_create_similar
      (fh-link-proc
        "cairo_surface_create_similar"
        ffi-void*
        (list ffi-void* ffi:int ffi:int ffi:int)
        link-lib)))
  (let ((~content (unwrap-cairo_content_t content))
        (~width (unwrap~fixed width))
        (~height (unwrap~fixed height)))
    (~cairo_surface_create_similar
      other
      ~content
      ~width
      ~height)))
(export cairo_surface_create_similar)

;; cairo_surface_t *cairo_surface_create_similar_image(cairo_surface_t *other, 
;;     cairo_format_t format, int width, int height);
(define ~cairo_surface_create_similar_image #f)
(define (cairo_surface_create_similar_image
         other
         format
         width
         height)
  (unless
    ~cairo_surface_create_similar_image
    (set! ~cairo_surface_create_similar_image
      (fh-link-proc
        "cairo_surface_create_similar_image"
        ffi-void*
        (list ffi-void* ffi:int ffi:int ffi:int)
        link-lib)))
  (let ((~format (unwrap-cairo_format_t format))
        (~width (unwrap~fixed width))
        (~height (unwrap~fixed height)))
    (~cairo_surface_create_similar_image
      other
      ~format
      ~width
      ~height)))
(export cairo_surface_create_similar_image)

;; cairo_surface_t *cairo_surface_map_to_image(cairo_surface_t *surface, const 
;;     cairo_rectangle_int_t *extents);
(define ~cairo_surface_map_to_image #f)
(define (cairo_surface_map_to_image surface extents)
  (unless
    ~cairo_surface_map_to_image
    (set! ~cairo_surface_map_to_image
      (fh-link-proc
        "cairo_surface_map_to_image"
        ffi-void*
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_surface_map_to_image surface extents)))
(export cairo_surface_map_to_image)

;; void cairo_surface_unmap_image(cairo_surface_t *surface, cairo_surface_t *
;;     image);
(define ~cairo_surface_unmap_image #f)
(define (cairo_surface_unmap_image surface image)
  (unless
    ~cairo_surface_unmap_image
    (set! ~cairo_surface_unmap_image
      (fh-link-proc
        "cairo_surface_unmap_image"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_surface_unmap_image surface image)))
(export cairo_surface_unmap_image)

;; cairo_surface_t *cairo_surface_create_for_rectangle(cairo_surface_t *target
;;     , double x, double y, double width, double height);
(define ~cairo_surface_create_for_rectangle #f)
(define (cairo_surface_create_for_rectangle
         target
         x
         y
         width
         height)
  (unless
    ~cairo_surface_create_for_rectangle
    (set! ~cairo_surface_create_for_rectangle
      (fh-link-proc
        "cairo_surface_create_for_rectangle"
        ffi-void*
        (list ffi-void*
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~x (unwrap~float x))
        (~y (unwrap~float y))
        (~width (unwrap~float width))
        (~height (unwrap~float height)))
    (~cairo_surface_create_for_rectangle
      target
      ~x
      ~y
      ~width
      ~height)))
(export cairo_surface_create_for_rectangle)

;; typedef enum {
;;   CAIRO_SURFACE_OBSERVER_NORMAL = 0,
;;   CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = 0x1,
;; } cairo_surface_observer_mode_t;
(define cairo_surface_observer_mode_t-enum-nvl
  '((CAIRO_SURFACE_OBSERVER_NORMAL . 0)
    (CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS . 1))
  )
(define cairo_surface_observer_mode_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_surface_observer_mode_t-enum-nvl))
(define-public (unwrap-cairo_surface_observer_mode_t n)
  (assq-ref cairo_surface_observer_mode_t-enum-nvl n))
(define-public (wrap-cairo_surface_observer_mode_t v)
  (assq-ref cairo_surface_observer_mode_t-enum-vnl v))

;; cairo_surface_t *cairo_surface_create_observer(cairo_surface_t *target, 
;;     cairo_surface_observer_mode_t mode);
(define ~cairo_surface_create_observer #f)
(define (cairo_surface_create_observer target mode)
  (unless
    ~cairo_surface_create_observer
    (set! ~cairo_surface_create_observer
      (fh-link-proc
        "cairo_surface_create_observer"
        ffi-void*
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~mode (unwrap-cairo_surface_observer_mode_t mode)))
    (~cairo_surface_create_observer target ~mode)))
(export cairo_surface_create_observer)

;; typedef void (*cairo_surface_observer_callback_t)(cairo_surface_t *observer
;;     , cairo_surface_t *target, void *data);
(define-public cairo_surface_observer_callback_t*-desc
(bs:pointer
  (delay (fh:function
           ffi:void
           (ffi-void* ffi-void* ffi-void*))))
  )
(define-fh-function*-type
  cairo_surface_observer_callback_t*
  cairo_surface_observer_callback_t*-desc
  cairo_surface_observer_callback_t*?
  make-cairo_surface_observer_callback_t*)
(export cairo_surface_observer_callback_t* cairo_surface_observer_callback_t*?
 make-cairo_surface_observer_callback_t*)

;; cairo_status_t cairo_surface_observer_add_paint_callback(cairo_surface_t *
;;     abstract_surface, cairo_surface_observer_callback_t func, void *data);
(define ~cairo_surface_observer_add_paint_callback #f)
(define (cairo_surface_observer_add_paint_callback
         abstract_surface
         func
         data)
  (unless
    ~cairo_surface_observer_add_paint_callback
    (set! ~cairo_surface_observer_add_paint_callback
      (fh-link-proc
        "cairo_surface_observer_add_paint_callback"
        ffi:int
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~func ((make-fctn-param-unwrapper
                  ffi:void
                  (list ffi-void* ffi-void* ffi-void*))
                func))
        (~data (unwrap~pointer data)))
    (wrap-cairo_status_t
      (~cairo_surface_observer_add_paint_callback
        abstract_surface
        ~func
        ~data))))
(export cairo_surface_observer_add_paint_callback)

;; cairo_status_t cairo_surface_observer_add_mask_callback(cairo_surface_t *
;;     abstract_surface, cairo_surface_observer_callback_t func, void *data);
(define ~cairo_surface_observer_add_mask_callback #f)
(define (cairo_surface_observer_add_mask_callback
         abstract_surface
         func
         data)
  (unless
    ~cairo_surface_observer_add_mask_callback
    (set! ~cairo_surface_observer_add_mask_callback
      (fh-link-proc
        "cairo_surface_observer_add_mask_callback"
        ffi:int
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~func ((make-fctn-param-unwrapper
                  ffi:void
                  (list ffi-void* ffi-void* ffi-void*))
                func))
        (~data (unwrap~pointer data)))
    (wrap-cairo_status_t
      (~cairo_surface_observer_add_mask_callback
        abstract_surface
        ~func
        ~data))))
(export cairo_surface_observer_add_mask_callback)

;; cairo_status_t cairo_surface_observer_add_fill_callback(cairo_surface_t *
;;     abstract_surface, cairo_surface_observer_callback_t func, void *data);
(define ~cairo_surface_observer_add_fill_callback #f)
(define (cairo_surface_observer_add_fill_callback
         abstract_surface
         func
         data)
  (unless
    ~cairo_surface_observer_add_fill_callback
    (set! ~cairo_surface_observer_add_fill_callback
      (fh-link-proc
        "cairo_surface_observer_add_fill_callback"
        ffi:int
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~func ((make-fctn-param-unwrapper
                  ffi:void
                  (list ffi-void* ffi-void* ffi-void*))
                func))
        (~data (unwrap~pointer data)))
    (wrap-cairo_status_t
      (~cairo_surface_observer_add_fill_callback
        abstract_surface
        ~func
        ~data))))
(export cairo_surface_observer_add_fill_callback)

;; cairo_status_t cairo_surface_observer_add_stroke_callback(cairo_surface_t *
;;     abstract_surface, cairo_surface_observer_callback_t func, void *data);
(define ~cairo_surface_observer_add_stroke_callback #f)
(define (cairo_surface_observer_add_stroke_callback
         abstract_surface
         func
         data)
  (unless
    ~cairo_surface_observer_add_stroke_callback
    (set! ~cairo_surface_observer_add_stroke_callback
      (fh-link-proc
        "cairo_surface_observer_add_stroke_callback"
        ffi:int
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~func ((make-fctn-param-unwrapper
                  ffi:void
                  (list ffi-void* ffi-void* ffi-void*))
                func))
        (~data (unwrap~pointer data)))
    (wrap-cairo_status_t
      (~cairo_surface_observer_add_stroke_callback
        abstract_surface
        ~func
        ~data))))
(export cairo_surface_observer_add_stroke_callback)

;; cairo_status_t cairo_surface_observer_add_glyphs_callback(cairo_surface_t *
;;     abstract_surface, cairo_surface_observer_callback_t func, void *data);
(define ~cairo_surface_observer_add_glyphs_callback #f)
(define (cairo_surface_observer_add_glyphs_callback
         abstract_surface
         func
         data)
  (unless
    ~cairo_surface_observer_add_glyphs_callback
    (set! ~cairo_surface_observer_add_glyphs_callback
      (fh-link-proc
        "cairo_surface_observer_add_glyphs_callback"
        ffi:int
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~func ((make-fctn-param-unwrapper
                  ffi:void
                  (list ffi-void* ffi-void* ffi-void*))
                func))
        (~data (unwrap~pointer data)))
    (wrap-cairo_status_t
      (~cairo_surface_observer_add_glyphs_callback
        abstract_surface
        ~func
        ~data))))
(export cairo_surface_observer_add_glyphs_callback)

;; cairo_status_t cairo_surface_observer_add_flush_callback(cairo_surface_t *
;;     abstract_surface, cairo_surface_observer_callback_t func, void *data);
(define ~cairo_surface_observer_add_flush_callback #f)
(define (cairo_surface_observer_add_flush_callback
         abstract_surface
         func
         data)
  (unless
    ~cairo_surface_observer_add_flush_callback
    (set! ~cairo_surface_observer_add_flush_callback
      (fh-link-proc
        "cairo_surface_observer_add_flush_callback"
        ffi:int
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~func ((make-fctn-param-unwrapper
                  ffi:void
                  (list ffi-void* ffi-void* ffi-void*))
                func))
        (~data (unwrap~pointer data)))
    (wrap-cairo_status_t
      (~cairo_surface_observer_add_flush_callback
        abstract_surface
        ~func
        ~data))))
(export cairo_surface_observer_add_flush_callback)

;; cairo_status_t cairo_surface_observer_add_finish_callback(cairo_surface_t *
;;     abstract_surface, cairo_surface_observer_callback_t func, void *data);
(define ~cairo_surface_observer_add_finish_callback #f)
(define (cairo_surface_observer_add_finish_callback
         abstract_surface
         func
         data)
  (unless
    ~cairo_surface_observer_add_finish_callback
    (set! ~cairo_surface_observer_add_finish_callback
      (fh-link-proc
        "cairo_surface_observer_add_finish_callback"
        ffi:int
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~func ((make-fctn-param-unwrapper
                  ffi:void
                  (list ffi-void* ffi-void* ffi-void*))
                func))
        (~data (unwrap~pointer data)))
    (wrap-cairo_status_t
      (~cairo_surface_observer_add_finish_callback
        abstract_surface
        ~func
        ~data))))
(export cairo_surface_observer_add_finish_callback)

;; cairo_status_t cairo_surface_observer_print(cairo_surface_t *surface, 
;;     cairo_write_func_t write_func, void *closure);
(define ~cairo_surface_observer_print #f)
(define (cairo_surface_observer_print
         surface
         write_func
         closure)
  (unless
    ~cairo_surface_observer_print
    (set! ~cairo_surface_observer_print
      (fh-link-proc
        "cairo_surface_observer_print"
        ffi:int
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~write_func
          ((make-fctn-param-unwrapper
             ffi:int
             (list ffi-void* ffi-void* ffi:unsigned-int))
           write_func))
        (~closure (unwrap~pointer closure)))
    (wrap-cairo_status_t
      (~cairo_surface_observer_print
        surface
        ~write_func
        ~closure))))
(export cairo_surface_observer_print)

;; double cairo_surface_observer_elapsed(cairo_surface_t *surface);
(define ~cairo_surface_observer_elapsed #f)
(define (cairo_surface_observer_elapsed surface)
  (unless
    ~cairo_surface_observer_elapsed
    (set! ~cairo_surface_observer_elapsed
      (fh-link-proc
        "cairo_surface_observer_elapsed"
        ffi:double
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_surface_observer_elapsed surface)))
(export cairo_surface_observer_elapsed)

;; cairo_status_t cairo_device_observer_print(cairo_device_t *device, 
;;     cairo_write_func_t write_func, void *closure);
(define ~cairo_device_observer_print #f)
(define (cairo_device_observer_print
         device
         write_func
         closure)
  (unless
    ~cairo_device_observer_print
    (set! ~cairo_device_observer_print
      (fh-link-proc
        "cairo_device_observer_print"
        ffi:int
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~write_func
          ((make-fctn-param-unwrapper
             ffi:int
             (list ffi-void* ffi-void* ffi:unsigned-int))
           write_func))
        (~closure (unwrap~pointer closure)))
    (wrap-cairo_status_t
      (~cairo_device_observer_print
        device
        ~write_func
        ~closure))))
(export cairo_device_observer_print)

;; double cairo_device_observer_elapsed(cairo_device_t *device);
(define ~cairo_device_observer_elapsed #f)
(define (cairo_device_observer_elapsed device)
  (unless
    ~cairo_device_observer_elapsed
    (set! ~cairo_device_observer_elapsed
      (fh-link-proc
        "cairo_device_observer_elapsed"
        ffi:double
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_device_observer_elapsed device)))
(export cairo_device_observer_elapsed)

;; double cairo_device_observer_paint_elapsed(cairo_device_t *device);
(define ~cairo_device_observer_paint_elapsed #f)
(define (cairo_device_observer_paint_elapsed device)
  (unless
    ~cairo_device_observer_paint_elapsed
    (set! ~cairo_device_observer_paint_elapsed
      (fh-link-proc
        "cairo_device_observer_paint_elapsed"
        ffi:double
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_device_observer_paint_elapsed device)))
(export cairo_device_observer_paint_elapsed)

;; double cairo_device_observer_mask_elapsed(cairo_device_t *device);
(define ~cairo_device_observer_mask_elapsed #f)
(define (cairo_device_observer_mask_elapsed device)
  (unless
    ~cairo_device_observer_mask_elapsed
    (set! ~cairo_device_observer_mask_elapsed
      (fh-link-proc
        "cairo_device_observer_mask_elapsed"
        ffi:double
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_device_observer_mask_elapsed device)))
(export cairo_device_observer_mask_elapsed)

;; double cairo_device_observer_fill_elapsed(cairo_device_t *device);
(define ~cairo_device_observer_fill_elapsed #f)
(define (cairo_device_observer_fill_elapsed device)
  (unless
    ~cairo_device_observer_fill_elapsed
    (set! ~cairo_device_observer_fill_elapsed
      (fh-link-proc
        "cairo_device_observer_fill_elapsed"
        ffi:double
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_device_observer_fill_elapsed device)))
(export cairo_device_observer_fill_elapsed)

;; double cairo_device_observer_stroke_elapsed(cairo_device_t *device);
(define ~cairo_device_observer_stroke_elapsed #f)
(define (cairo_device_observer_stroke_elapsed device)
  (unless
    ~cairo_device_observer_stroke_elapsed
    (set! ~cairo_device_observer_stroke_elapsed
      (fh-link-proc
        "cairo_device_observer_stroke_elapsed"
        ffi:double
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_device_observer_stroke_elapsed device)))
(export cairo_device_observer_stroke_elapsed)

;; double cairo_device_observer_glyphs_elapsed(cairo_device_t *device);
(define ~cairo_device_observer_glyphs_elapsed #f)
(define (cairo_device_observer_glyphs_elapsed device)
  (unless
    ~cairo_device_observer_glyphs_elapsed
    (set! ~cairo_device_observer_glyphs_elapsed
      (fh-link-proc
        "cairo_device_observer_glyphs_elapsed"
        ffi:double
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_device_observer_glyphs_elapsed device)))
(export cairo_device_observer_glyphs_elapsed)

;; cairo_surface_t *cairo_surface_reference(cairo_surface_t *surface);
(define ~cairo_surface_reference #f)
(define (cairo_surface_reference surface)
  (unless
    ~cairo_surface_reference
    (set! ~cairo_surface_reference
      (fh-link-proc
        "cairo_surface_reference"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_surface_reference surface)))
(export cairo_surface_reference)

;; void cairo_surface_finish(cairo_surface_t *surface);
(define ~cairo_surface_finish #f)
(define (cairo_surface_finish surface)
  (unless
    ~cairo_surface_finish
    (set! ~cairo_surface_finish
      (fh-link-proc
        "cairo_surface_finish"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_surface_finish surface)))
(export cairo_surface_finish)

;; void cairo_surface_destroy(cairo_surface_t *surface);
(define ~cairo_surface_destroy #f)
(define (cairo_surface_destroy surface)
  (unless
    ~cairo_surface_destroy
    (set! ~cairo_surface_destroy
      (fh-link-proc
        "cairo_surface_destroy"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_surface_destroy surface)))
(export cairo_surface_destroy)

;; cairo_device_t *cairo_surface_get_device(cairo_surface_t *surface);
(define ~cairo_surface_get_device #f)
(define (cairo_surface_get_device surface)
  (unless
    ~cairo_surface_get_device
    (set! ~cairo_surface_get_device
      (fh-link-proc
        "cairo_surface_get_device"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_surface_get_device surface)))
(export cairo_surface_get_device)

;; unsigned int cairo_surface_get_reference_count(cairo_surface_t *surface);
(define ~cairo_surface_get_reference_count #f)
(define (cairo_surface_get_reference_count surface)
  (unless
    ~cairo_surface_get_reference_count
    (set! ~cairo_surface_get_reference_count
      (fh-link-proc
        "cairo_surface_get_reference_count"
        ffi:unsigned-int
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_surface_get_reference_count surface)))
(export cairo_surface_get_reference_count)

;; cairo_status_t cairo_surface_status(cairo_surface_t *surface);
(define ~cairo_surface_status #f)
(define (cairo_surface_status surface)
  (unless
    ~cairo_surface_status
    (set! ~cairo_surface_status
      (fh-link-proc
        "cairo_surface_status"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_surface_status surface))))
(export cairo_surface_status)

;; typedef enum _cairo_surface_type {
;;   CAIRO_SURFACE_TYPE_IMAGE,
;;   CAIRO_SURFACE_TYPE_PDF,
;;   CAIRO_SURFACE_TYPE_PS,
;;   CAIRO_SURFACE_TYPE_XLIB,
;;   CAIRO_SURFACE_TYPE_XCB,
;;   CAIRO_SURFACE_TYPE_GLITZ,
;;   CAIRO_SURFACE_TYPE_QUARTZ,
;;   CAIRO_SURFACE_TYPE_WIN32,
;;   CAIRO_SURFACE_TYPE_BEOS,
;;   CAIRO_SURFACE_TYPE_DIRECTFB,
;;   CAIRO_SURFACE_TYPE_SVG,
;;   CAIRO_SURFACE_TYPE_OS2,
;;   CAIRO_SURFACE_TYPE_WIN32_PRINTING,
;;   CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,
;;   CAIRO_SURFACE_TYPE_SCRIPT,
;;   CAIRO_SURFACE_TYPE_QT,
;;   CAIRO_SURFACE_TYPE_RECORDING,
;;   CAIRO_SURFACE_TYPE_VG,
;;   CAIRO_SURFACE_TYPE_GL,
;;   CAIRO_SURFACE_TYPE_DRM,
;;   CAIRO_SURFACE_TYPE_TEE,
;;   CAIRO_SURFACE_TYPE_XML,
;;   CAIRO_SURFACE_TYPE_SKIA,
;;   CAIRO_SURFACE_TYPE_SUBSURFACE,
;;   CAIRO_SURFACE_TYPE_COGL,
;; } cairo_surface_type_t;
(define cairo_surface_type_t-enum-nvl
  '((CAIRO_SURFACE_TYPE_IMAGE . 0)
    (CAIRO_SURFACE_TYPE_PDF . 1)
    (CAIRO_SURFACE_TYPE_PS . 2)
    (CAIRO_SURFACE_TYPE_XLIB . 3)
    (CAIRO_SURFACE_TYPE_XCB . 4)
    (CAIRO_SURFACE_TYPE_GLITZ . 5)
    (CAIRO_SURFACE_TYPE_QUARTZ . 6)
    (CAIRO_SURFACE_TYPE_WIN32 . 7)
    (CAIRO_SURFACE_TYPE_BEOS . 8)
    (CAIRO_SURFACE_TYPE_DIRECTFB . 9)
    (CAIRO_SURFACE_TYPE_SVG . 10)
    (CAIRO_SURFACE_TYPE_OS2 . 11)
    (CAIRO_SURFACE_TYPE_WIN32_PRINTING . 12)
    (CAIRO_SURFACE_TYPE_QUARTZ_IMAGE . 13)
    (CAIRO_SURFACE_TYPE_SCRIPT . 14)
    (CAIRO_SURFACE_TYPE_QT . 15)
    (CAIRO_SURFACE_TYPE_RECORDING . 16)
    (CAIRO_SURFACE_TYPE_VG . 17)
    (CAIRO_SURFACE_TYPE_GL . 18)
    (CAIRO_SURFACE_TYPE_DRM . 19)
    (CAIRO_SURFACE_TYPE_TEE . 20)
    (CAIRO_SURFACE_TYPE_XML . 21)
    (CAIRO_SURFACE_TYPE_SKIA . 22)
    (CAIRO_SURFACE_TYPE_SUBSURFACE . 23)
    (CAIRO_SURFACE_TYPE_COGL . 24))
  )
(define cairo_surface_type_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_surface_type_t-enum-nvl))
(define-public (unwrap-cairo_surface_type_t n)
  (assq-ref cairo_surface_type_t-enum-nvl n))
(define-public (wrap-cairo_surface_type_t v)
  (assq-ref cairo_surface_type_t-enum-vnl v))
(define-public unwrap-enum-_cairo_surface_type unwrap-cairo_surface_type_t)
(define-public wrap-enum-_cairo_surface_type wrap-cairo_surface_type_t)

;; cairo_surface_type_t cairo_surface_get_type(cairo_surface_t *surface);
(define ~cairo_surface_get_type #f)
(define (cairo_surface_get_type surface)
  (unless
    ~cairo_surface_get_type
    (set! ~cairo_surface_get_type
      (fh-link-proc
        "cairo_surface_get_type"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_surface_type_t
      (~cairo_surface_get_type surface))))
(export cairo_surface_get_type)

;; cairo_content_t cairo_surface_get_content(cairo_surface_t *surface);
(define ~cairo_surface_get_content #f)
(define (cairo_surface_get_content surface)
  (unless
    ~cairo_surface_get_content
    (set! ~cairo_surface_get_content
      (fh-link-proc
        "cairo_surface_get_content"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_content_t
      (~cairo_surface_get_content surface))))
(export cairo_surface_get_content)

;; cairo_status_t cairo_surface_write_to_png(cairo_surface_t *surface, const 
;;     char *filename);
(define ~cairo_surface_write_to_png #f)
(define (cairo_surface_write_to_png surface filename)
  (unless
    ~cairo_surface_write_to_png
    (set! ~cairo_surface_write_to_png
      (fh-link-proc
        "cairo_surface_write_to_png"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~filename (unwrap~pointer filename)))
    (wrap-cairo_status_t
      (~cairo_surface_write_to_png surface ~filename))))
(export cairo_surface_write_to_png)

;; cairo_status_t cairo_surface_write_to_png_stream(cairo_surface_t *surface, 
;;     cairo_write_func_t write_func, void *closure);
(define ~cairo_surface_write_to_png_stream #f)
(define (cairo_surface_write_to_png_stream
         surface
         write_func
         closure)
  (unless
    ~cairo_surface_write_to_png_stream
    (set! ~cairo_surface_write_to_png_stream
      (fh-link-proc
        "cairo_surface_write_to_png_stream"
        ffi:int
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~write_func
          ((make-fctn-param-unwrapper
             ffi:int
             (list ffi-void* ffi-void* ffi:unsigned-int))
           write_func))
        (~closure (unwrap~pointer closure)))
    (wrap-cairo_status_t
      (~cairo_surface_write_to_png_stream
        surface
        ~write_func
        ~closure))))
(export cairo_surface_write_to_png_stream)

;; void *cairo_surface_get_user_data(cairo_surface_t *surface, const 
;;     cairo_user_data_key_t *key);
(define ~cairo_surface_get_user_data #f)
(define (cairo_surface_get_user_data surface key)
  (unless
    ~cairo_surface_get_user_data
    (set! ~cairo_surface_get_user_data
      (fh-link-proc
        "cairo_surface_get_user_data"
        ffi-void*
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_surface_get_user_data surface key)))
(export cairo_surface_get_user_data)

;; cairo_status_t cairo_surface_set_user_data(cairo_surface_t *surface, const 
;;     cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t 
;;     destroy);
(define ~cairo_surface_set_user_data #f)
(define (cairo_surface_set_user_data
         surface
         key
         user_data
         destroy)
  (unless
    ~cairo_surface_set_user_data
    (set! ~cairo_surface_set_user_data
      (fh-link-proc
        "cairo_surface_set_user_data"
        ffi:int
        (list ffi-void* ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~user_data (unwrap~pointer user_data))
        (~destroy
          ((make-fctn-param-unwrapper
             ffi:void
             (list ffi-void*))
           destroy)))
    (wrap-cairo_status_t
      (~cairo_surface_set_user_data
        surface
        key
        ~user_data
        ~destroy))))
(export cairo_surface_set_user_data)

;; void cairo_surface_get_mime_data(cairo_surface_t *surface, const char *
;;     mime_type, const unsigned char **data, unsigned long *length);
(define ~cairo_surface_get_mime_data #f)
(define (cairo_surface_get_mime_data
         surface
         mime_type
         data
         length)
  (unless
    ~cairo_surface_get_mime_data
    (set! ~cairo_surface_get_mime_data
      (fh-link-proc
        "cairo_surface_get_mime_data"
        ffi:void
        (list ffi-void* ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~mime_type (unwrap~pointer mime_type))
        (~data (unwrap~pointer data))
        (~length (unwrap~pointer length)))
    (~cairo_surface_get_mime_data
      surface
      ~mime_type
      ~data
      ~length)))
(export cairo_surface_get_mime_data)

;; cairo_status_t cairo_surface_set_mime_data(cairo_surface_t *surface, const 
;;     char *mime_type, const unsigned char *data, unsigned long length, 
;;     cairo_destroy_func_t destroy, void *closure);
(define ~cairo_surface_set_mime_data #f)
(define (cairo_surface_set_mime_data
         surface
         mime_type
         data
         length
         destroy
         closure)
  (unless
    ~cairo_surface_set_mime_data
    (set! ~cairo_surface_set_mime_data
      (fh-link-proc
        "cairo_surface_set_mime_data"
        ffi:int
        (list ffi-void*
              ffi-void*
              ffi-void*
              ffi:unsigned-long
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~mime_type (unwrap~pointer mime_type))
        (~data (unwrap~pointer data))
        (~length (unwrap~fixed length))
        (~destroy
          ((make-fctn-param-unwrapper
             ffi:void
             (list ffi-void*))
           destroy))
        (~closure (unwrap~pointer closure)))
    (wrap-cairo_status_t
      (~cairo_surface_set_mime_data
        surface
        ~mime_type
        ~data
        ~length
        ~destroy
        ~closure))))
(export cairo_surface_set_mime_data)

;; cairo_bool_t cairo_surface_supports_mime_type(cairo_surface_t *surface, 
;;     const char *mime_type);
(define ~cairo_surface_supports_mime_type #f)
(define (cairo_surface_supports_mime_type
         surface
         mime_type)
  (unless
    ~cairo_surface_supports_mime_type
    (set! ~cairo_surface_supports_mime_type
      (fh-link-proc
        "cairo_surface_supports_mime_type"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~mime_type (unwrap~pointer mime_type)))
    (wrap-cairo_bool_t
      (~cairo_surface_supports_mime_type
        surface
        ~mime_type))))
(export cairo_surface_supports_mime_type)

;; void cairo_surface_get_font_options(cairo_surface_t *surface, 
;;     cairo_font_options_t *options);
(define ~cairo_surface_get_font_options #f)
(define (cairo_surface_get_font_options surface options)
  (unless
    ~cairo_surface_get_font_options
    (set! ~cairo_surface_get_font_options
      (fh-link-proc
        "cairo_surface_get_font_options"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_surface_get_font_options surface options)))
(export cairo_surface_get_font_options)

;; void cairo_surface_flush(cairo_surface_t *surface);
(define ~cairo_surface_flush #f)
(define (cairo_surface_flush surface)
  (unless
    ~cairo_surface_flush
    (set! ~cairo_surface_flush
      (fh-link-proc
        "cairo_surface_flush"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_surface_flush surface)))
(export cairo_surface_flush)

;; void cairo_surface_mark_dirty(cairo_surface_t *surface);
(define ~cairo_surface_mark_dirty #f)
(define (cairo_surface_mark_dirty surface)
  (unless
    ~cairo_surface_mark_dirty
    (set! ~cairo_surface_mark_dirty
      (fh-link-proc
        "cairo_surface_mark_dirty"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_surface_mark_dirty surface)))
(export cairo_surface_mark_dirty)

;; void cairo_surface_mark_dirty_rectangle(cairo_surface_t *surface, int x, int
;;      y, int width, int height);
(define ~cairo_surface_mark_dirty_rectangle #f)
(define (cairo_surface_mark_dirty_rectangle
         surface
         x
         y
         width
         height)
  (unless
    ~cairo_surface_mark_dirty_rectangle
    (set! ~cairo_surface_mark_dirty_rectangle
      (fh-link-proc
        "cairo_surface_mark_dirty_rectangle"
        ffi:void
        (list ffi-void* ffi:int ffi:int ffi:int ffi:int)
        link-lib)))
  (let ((~x (unwrap~fixed x))
        (~y (unwrap~fixed y))
        (~width (unwrap~fixed width))
        (~height (unwrap~fixed height)))
    (~cairo_surface_mark_dirty_rectangle
      surface
      ~x
      ~y
      ~width
      ~height)))
(export cairo_surface_mark_dirty_rectangle)

;; void cairo_surface_set_device_scale(cairo_surface_t *surface, double x_scale
;;     , double y_scale);
(define ~cairo_surface_set_device_scale #f)
(define (cairo_surface_set_device_scale
         surface
         x_scale
         y_scale)
  (unless
    ~cairo_surface_set_device_scale
    (set! ~cairo_surface_set_device_scale
      (fh-link-proc
        "cairo_surface_set_device_scale"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~x_scale (unwrap~float x_scale))
        (~y_scale (unwrap~float y_scale)))
    (~cairo_surface_set_device_scale
      surface
      ~x_scale
      ~y_scale)))
(export cairo_surface_set_device_scale)

;; void cairo_surface_get_device_scale(cairo_surface_t *surface, double *
;;     x_scale, double *y_scale);
(define ~cairo_surface_get_device_scale #f)
(define (cairo_surface_get_device_scale
         surface
         x_scale
         y_scale)
  (unless
    ~cairo_surface_get_device_scale
    (set! ~cairo_surface_get_device_scale
      (fh-link-proc
        "cairo_surface_get_device_scale"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~x_scale (unwrap~pointer x_scale))
        (~y_scale (unwrap~pointer y_scale)))
    (~cairo_surface_get_device_scale
      surface
      ~x_scale
      ~y_scale)))
(export cairo_surface_get_device_scale)

;; void cairo_surface_set_device_offset(cairo_surface_t *surface, double 
;;     x_offset, double y_offset);
(define ~cairo_surface_set_device_offset #f)
(define (cairo_surface_set_device_offset
         surface
         x_offset
         y_offset)
  (unless
    ~cairo_surface_set_device_offset
    (set! ~cairo_surface_set_device_offset
      (fh-link-proc
        "cairo_surface_set_device_offset"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~x_offset (unwrap~float x_offset))
        (~y_offset (unwrap~float y_offset)))
    (~cairo_surface_set_device_offset
      surface
      ~x_offset
      ~y_offset)))
(export cairo_surface_set_device_offset)

;; void cairo_surface_get_device_offset(cairo_surface_t *surface, double *
;;     x_offset, double *y_offset);
(define ~cairo_surface_get_device_offset #f)
(define (cairo_surface_get_device_offset
         surface
         x_offset
         y_offset)
  (unless
    ~cairo_surface_get_device_offset
    (set! ~cairo_surface_get_device_offset
      (fh-link-proc
        "cairo_surface_get_device_offset"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~x_offset (unwrap~pointer x_offset))
        (~y_offset (unwrap~pointer y_offset)))
    (~cairo_surface_get_device_offset
      surface
      ~x_offset
      ~y_offset)))
(export cairo_surface_get_device_offset)

;; void cairo_surface_set_fallback_resolution(cairo_surface_t *surface, double 
;;     x_pixels_per_inch, double y_pixels_per_inch);
(define ~cairo_surface_set_fallback_resolution #f)
(define (cairo_surface_set_fallback_resolution
         surface
         x_pixels_per_inch
         y_pixels_per_inch)
  (unless
    ~cairo_surface_set_fallback_resolution
    (set! ~cairo_surface_set_fallback_resolution
      (fh-link-proc
        "cairo_surface_set_fallback_resolution"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~x_pixels_per_inch
          (unwrap~float x_pixels_per_inch))
        (~y_pixels_per_inch
          (unwrap~float y_pixels_per_inch)))
    (~cairo_surface_set_fallback_resolution
      surface
      ~x_pixels_per_inch
      ~y_pixels_per_inch)))
(export cairo_surface_set_fallback_resolution)

;; void cairo_surface_get_fallback_resolution(cairo_surface_t *surface, double 
;;     *x_pixels_per_inch, double *y_pixels_per_inch);
(define ~cairo_surface_get_fallback_resolution #f)
(define (cairo_surface_get_fallback_resolution
         surface
         x_pixels_per_inch
         y_pixels_per_inch)
  (unless
    ~cairo_surface_get_fallback_resolution
    (set! ~cairo_surface_get_fallback_resolution
      (fh-link-proc
        "cairo_surface_get_fallback_resolution"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~x_pixels_per_inch
          (unwrap~pointer x_pixels_per_inch))
        (~y_pixels_per_inch
          (unwrap~pointer y_pixels_per_inch)))
    (~cairo_surface_get_fallback_resolution
      surface
      ~x_pixels_per_inch
      ~y_pixels_per_inch)))
(export cairo_surface_get_fallback_resolution)

;; void cairo_surface_copy_page(cairo_surface_t *surface);
(define ~cairo_surface_copy_page #f)
(define (cairo_surface_copy_page surface)
  (unless
    ~cairo_surface_copy_page
    (set! ~cairo_surface_copy_page
      (fh-link-proc
        "cairo_surface_copy_page"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_surface_copy_page surface)))
(export cairo_surface_copy_page)

;; void cairo_surface_show_page(cairo_surface_t *surface);
(define ~cairo_surface_show_page #f)
(define (cairo_surface_show_page surface)
  (unless
    ~cairo_surface_show_page
    (set! ~cairo_surface_show_page
      (fh-link-proc
        "cairo_surface_show_page"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_surface_show_page surface)))
(export cairo_surface_show_page)

;; cairo_bool_t cairo_surface_has_show_text_glyphs(cairo_surface_t *surface);
(define ~cairo_surface_has_show_text_glyphs #f)
(define (cairo_surface_has_show_text_glyphs surface)
  (unless
    ~cairo_surface_has_show_text_glyphs
    (set! ~cairo_surface_has_show_text_glyphs
      (fh-link-proc
        "cairo_surface_has_show_text_glyphs"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_bool_t
      (~cairo_surface_has_show_text_glyphs surface))))
(export cairo_surface_has_show_text_glyphs)

;; cairo_surface_t *cairo_image_surface_create(cairo_format_t format, int width
;;     , int height);
(define ~cairo_image_surface_create #f)
(define (cairo_image_surface_create format width height)
  (unless
    ~cairo_image_surface_create
    (set! ~cairo_image_surface_create
      (fh-link-proc
        "cairo_image_surface_create"
        ffi-void*
        (list ffi:int ffi:int ffi:int)
        link-lib)))
  (let ((~format (unwrap-cairo_format_t format))
        (~width (unwrap~fixed width))
        (~height (unwrap~fixed height)))
    (~cairo_image_surface_create
      ~format
      ~width
      ~height)))
(export cairo_image_surface_create)

;; int cairo_format_stride_for_width(cairo_format_t format, int width);
(define ~cairo_format_stride_for_width #f)
(define (cairo_format_stride_for_width format width)
  (unless
    ~cairo_format_stride_for_width
    (set! ~cairo_format_stride_for_width
      (fh-link-proc
        "cairo_format_stride_for_width"
        ffi:int
        (list ffi:int ffi:int)
        link-lib)))
  (let ((~format (unwrap-cairo_format_t format))
        (~width (unwrap~fixed width)))
    (~cairo_format_stride_for_width ~format ~width)))
(export cairo_format_stride_for_width)

;; cairo_surface_t *cairo_image_surface_create_for_data(unsigned char *data, 
;;     cairo_format_t format, int width, int height, int stride);
(define ~cairo_image_surface_create_for_data #f)
(define (cairo_image_surface_create_for_data
         data
         format
         width
         height
         stride)
  (unless
    ~cairo_image_surface_create_for_data
    (set! ~cairo_image_surface_create_for_data
      (fh-link-proc
        "cairo_image_surface_create_for_data"
        ffi-void*
        (list ffi-void* ffi:int ffi:int ffi:int ffi:int)
        link-lib)))
  (let ((~data (unwrap~pointer data))
        (~format (unwrap-cairo_format_t format))
        (~width (unwrap~fixed width))
        (~height (unwrap~fixed height))
        (~stride (unwrap~fixed stride)))
    (~cairo_image_surface_create_for_data
      ~data
      ~format
      ~width
      ~height
      ~stride)))
(export cairo_image_surface_create_for_data)

;; unsigned char *cairo_image_surface_get_data(cairo_surface_t *surface);
(define ~cairo_image_surface_get_data #f)
(define (cairo_image_surface_get_data surface)
  (unless
    ~cairo_image_surface_get_data
    (set! ~cairo_image_surface_get_data
      (fh-link-proc
        "cairo_image_surface_get_data"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_image_surface_get_data surface)))
(export cairo_image_surface_get_data)

;; cairo_format_t cairo_image_surface_get_format(cairo_surface_t *surface);
(define ~cairo_image_surface_get_format #f)
(define (cairo_image_surface_get_format surface)
  (unless
    ~cairo_image_surface_get_format
    (set! ~cairo_image_surface_get_format
      (fh-link-proc
        "cairo_image_surface_get_format"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_format_t
      (~cairo_image_surface_get_format surface))))
(export cairo_image_surface_get_format)

;; int cairo_image_surface_get_width(cairo_surface_t *surface);
(define ~cairo_image_surface_get_width #f)
(define (cairo_image_surface_get_width surface)
  (unless
    ~cairo_image_surface_get_width
    (set! ~cairo_image_surface_get_width
      (fh-link-proc
        "cairo_image_surface_get_width"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_image_surface_get_width surface)))
(export cairo_image_surface_get_width)

;; int cairo_image_surface_get_height(cairo_surface_t *surface);
(define ~cairo_image_surface_get_height #f)
(define (cairo_image_surface_get_height surface)
  (unless
    ~cairo_image_surface_get_height
    (set! ~cairo_image_surface_get_height
      (fh-link-proc
        "cairo_image_surface_get_height"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_image_surface_get_height surface)))
(export cairo_image_surface_get_height)

;; int cairo_image_surface_get_stride(cairo_surface_t *surface);
(define ~cairo_image_surface_get_stride #f)
(define (cairo_image_surface_get_stride surface)
  (unless
    ~cairo_image_surface_get_stride
    (set! ~cairo_image_surface_get_stride
      (fh-link-proc
        "cairo_image_surface_get_stride"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_image_surface_get_stride surface)))
(export cairo_image_surface_get_stride)

;; cairo_surface_t *cairo_image_surface_create_from_png(const char *filename);
(define ~cairo_image_surface_create_from_png #f)
(define (cairo_image_surface_create_from_png filename)
  (unless
    ~cairo_image_surface_create_from_png
    (set! ~cairo_image_surface_create_from_png
      (fh-link-proc
        "cairo_image_surface_create_from_png"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ((~filename (unwrap~pointer filename)))
    (~cairo_image_surface_create_from_png ~filename)))
(export cairo_image_surface_create_from_png)

;; cairo_surface_t *cairo_image_surface_create_from_png_stream(
;;     cairo_read_func_t read_func, void *closure);
(define ~cairo_image_surface_create_from_png_stream #f)
(define (cairo_image_surface_create_from_png_stream
         read_func
         closure)
  (unless
    ~cairo_image_surface_create_from_png_stream
    (set! ~cairo_image_surface_create_from_png_stream
      (fh-link-proc
        "cairo_image_surface_create_from_png_stream"
        ffi-void*
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~read_func
          ((make-fctn-param-unwrapper
             ffi:int
             (list ffi-void* ffi-void* ffi:unsigned-int))
           read_func))
        (~closure (unwrap~pointer closure)))
    (~cairo_image_surface_create_from_png_stream
      ~read_func
      ~closure)))
(export cairo_image_surface_create_from_png_stream)

;; cairo_surface_t *cairo_recording_surface_create(cairo_content_t content, 
;;     const cairo_rectangle_t *extents);
(define ~cairo_recording_surface_create #f)
(define (cairo_recording_surface_create content extents)
  (unless
    ~cairo_recording_surface_create
    (set! ~cairo_recording_surface_create
      (fh-link-proc
        "cairo_recording_surface_create"
        ffi-void*
        (list ffi:int ffi-void*)
        link-lib)))
  (let ((~content (unwrap-cairo_content_t content)))
    (~cairo_recording_surface_create
      ~content
      extents)))
(export cairo_recording_surface_create)

;; void cairo_recording_surface_ink_extents(cairo_surface_t *surface, double *
;;     x0, double *y0, double *width, double *height);
(define ~cairo_recording_surface_ink_extents #f)
(define (cairo_recording_surface_ink_extents
         surface
         x0
         y0
         width
         height)
  (unless
    ~cairo_recording_surface_ink_extents
    (set! ~cairo_recording_surface_ink_extents
      (fh-link-proc
        "cairo_recording_surface_ink_extents"
        ffi:void
        (list ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~x0 (unwrap~pointer x0))
        (~y0 (unwrap~pointer y0))
        (~width (unwrap~pointer width))
        (~height (unwrap~pointer height)))
    (~cairo_recording_surface_ink_extents
      surface
      ~x0
      ~y0
      ~width
      ~height)))
(export cairo_recording_surface_ink_extents)

;; cairo_bool_t cairo_recording_surface_get_extents(cairo_surface_t *surface, 
;;     cairo_rectangle_t *extents);
(define ~cairo_recording_surface_get_extents #f)
(define (cairo_recording_surface_get_extents
         surface
         extents)
  (unless
    ~cairo_recording_surface_get_extents
    (set! ~cairo_recording_surface_get_extents
      (fh-link-proc
        "cairo_recording_surface_get_extents"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_bool_t
      (~cairo_recording_surface_get_extents
        surface
        extents))))
(export cairo_recording_surface_get_extents)

;; typedef cairo_surface_t *(*cairo_raster_source_acquire_func_t)(
;;     cairo_pattern_t *pattern, void *callback_data, cairo_surface_t *target, 
;;     const cairo_rectangle_int_t *extents);
(define-public cairo_raster_source_acquire_func_t*-desc
(bs:pointer
  (delay (fh:function
           ffi-void*
           (ffi-void* ffi-void* ffi-void* ffi-void*))))
  )
(define-fh-function*-type
  cairo_raster_source_acquire_func_t*
  cairo_raster_source_acquire_func_t*-desc
  cairo_raster_source_acquire_func_t*?
  make-cairo_raster_source_acquire_func_t*)
(export cairo_raster_source_acquire_func_t* 
 cairo_raster_source_acquire_func_t*? make-cairo_raster_source_acquire_func_t*
 )

;; typedef void (*cairo_raster_source_release_func_t)(cairo_pattern_t *pattern
;;     , void *callback_data, cairo_surface_t *surface);
(define-public cairo_raster_source_release_func_t*-desc
(bs:pointer
  (delay (fh:function
           ffi:void
           (ffi-void* ffi-void* ffi-void*))))
  )
(define-fh-function*-type
  cairo_raster_source_release_func_t*
  cairo_raster_source_release_func_t*-desc
  cairo_raster_source_release_func_t*?
  make-cairo_raster_source_release_func_t*)
(export cairo_raster_source_release_func_t* 
 cairo_raster_source_release_func_t*? make-cairo_raster_source_release_func_t*
 )

;; typedef cairo_status_t (*cairo_raster_source_snapshot_func_t)(
;;     cairo_pattern_t *pattern, void *callback_data);
(define-public cairo_raster_source_snapshot_func_t*-desc
(bs:pointer
  (delay (fh:function ffi:int (ffi-void* ffi-void*))))
  )
(define-fh-function*-type
  cairo_raster_source_snapshot_func_t*
  cairo_raster_source_snapshot_func_t*-desc
  cairo_raster_source_snapshot_func_t*?
  make-cairo_raster_source_snapshot_func_t*)
(export cairo_raster_source_snapshot_func_t* 
 cairo_raster_source_snapshot_func_t*? 
 make-cairo_raster_source_snapshot_func_t*)

;; typedef cairo_status_t (*cairo_raster_source_copy_func_t)(cairo_pattern_t *
;;     pattern, void *callback_data, const cairo_pattern_t *other);
(define-public cairo_raster_source_copy_func_t*-desc
(bs:pointer
  (delay (fh:function
           ffi:int
           (ffi-void* ffi-void* ffi-void*))))
  )
(define-fh-function*-type
  cairo_raster_source_copy_func_t*
  cairo_raster_source_copy_func_t*-desc
  cairo_raster_source_copy_func_t*?
  make-cairo_raster_source_copy_func_t*)
(export cairo_raster_source_copy_func_t* cairo_raster_source_copy_func_t*? 
 make-cairo_raster_source_copy_func_t*)

;; typedef void (*cairo_raster_source_finish_func_t)(cairo_pattern_t *pattern, 
;;     void *callback_data);
(define-public cairo_raster_source_finish_func_t*-desc
(bs:pointer
  (delay (fh:function ffi:void (ffi-void* ffi-void*))))
  )
(define-fh-function*-type
  cairo_raster_source_finish_func_t*
  cairo_raster_source_finish_func_t*-desc
  cairo_raster_source_finish_func_t*?
  make-cairo_raster_source_finish_func_t*)
(export cairo_raster_source_finish_func_t* cairo_raster_source_finish_func_t*?
 make-cairo_raster_source_finish_func_t*)

;; cairo_pattern_t *cairo_pattern_create_raster_source(void *user_data, 
;;     cairo_content_t content, int width, int height);
(define ~cairo_pattern_create_raster_source #f)
(define (cairo_pattern_create_raster_source
         user_data
         content
         width
         height)
  (unless
    ~cairo_pattern_create_raster_source
    (set! ~cairo_pattern_create_raster_source
      (fh-link-proc
        "cairo_pattern_create_raster_source"
        ffi-void*
        (list ffi-void* ffi:int ffi:int ffi:int)
        link-lib)))
  (let ((~user_data (unwrap~pointer user_data))
        (~content (unwrap-cairo_content_t content))
        (~width (unwrap~fixed width))
        (~height (unwrap~fixed height)))
    (~cairo_pattern_create_raster_source
      ~user_data
      ~content
      ~width
      ~height)))
(export cairo_pattern_create_raster_source)

;; void cairo_raster_source_pattern_set_callback_data(cairo_pattern_t *pattern
;;     , void *data);
(define ~cairo_raster_source_pattern_set_callback_data #f)
(define (cairo_raster_source_pattern_set_callback_data
         pattern
         data)
  (unless
    ~cairo_raster_source_pattern_set_callback_data
    (set! ~cairo_raster_source_pattern_set_callback_data
      (fh-link-proc
        "cairo_raster_source_pattern_set_callback_data"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~data (unwrap~pointer data)))
    (~cairo_raster_source_pattern_set_callback_data
      pattern
      ~data)))
(export cairo_raster_source_pattern_set_callback_data)

;; void *cairo_raster_source_pattern_get_callback_data(cairo_pattern_t *pattern
;;     );
(define ~cairo_raster_source_pattern_get_callback_data #f)
(define (cairo_raster_source_pattern_get_callback_data
         pattern)
  (unless
    ~cairo_raster_source_pattern_get_callback_data
    (set! ~cairo_raster_source_pattern_get_callback_data
      (fh-link-proc
        "cairo_raster_source_pattern_get_callback_data"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_raster_source_pattern_get_callback_data
      pattern)))
(export cairo_raster_source_pattern_get_callback_data)

;; void cairo_raster_source_pattern_set_acquire(cairo_pattern_t *pattern, 
;;     cairo_raster_source_acquire_func_t acquire, 
;;     cairo_raster_source_release_func_t release);
(define ~cairo_raster_source_pattern_set_acquire #f)
(define (cairo_raster_source_pattern_set_acquire
         pattern
         acquire
         release)
  (unless
    ~cairo_raster_source_pattern_set_acquire
    (set! ~cairo_raster_source_pattern_set_acquire
      (fh-link-proc
        "cairo_raster_source_pattern_set_acquire"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~acquire
          ((make-fctn-param-unwrapper
             ffi-void*
             (list ffi-void* ffi-void* ffi-void* ffi-void*))
           acquire))
        (~release
          ((make-fctn-param-unwrapper
             ffi:void
             (list ffi-void* ffi-void* ffi-void*))
           release)))
    (~cairo_raster_source_pattern_set_acquire
      pattern
      ~acquire
      ~release)))
(export cairo_raster_source_pattern_set_acquire)

;; void cairo_raster_source_pattern_get_acquire(cairo_pattern_t *pattern, 
;;     cairo_raster_source_acquire_func_t *acquire, 
;;     cairo_raster_source_release_func_t *release);
(define ~cairo_raster_source_pattern_get_acquire #f)
(define (cairo_raster_source_pattern_get_acquire
         pattern
         acquire
         release)
  (unless
    ~cairo_raster_source_pattern_get_acquire
    (set! ~cairo_raster_source_pattern_get_acquire
      (fh-link-proc
        "cairo_raster_source_pattern_get_acquire"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~acquire (unwrap~pointer acquire))
        (~release (unwrap~pointer release)))
    (~cairo_raster_source_pattern_get_acquire
      pattern
      ~acquire
      ~release)))
(export cairo_raster_source_pattern_get_acquire)

;; void cairo_raster_source_pattern_set_snapshot(cairo_pattern_t *pattern, 
;;     cairo_raster_source_snapshot_func_t snapshot);
(define ~cairo_raster_source_pattern_set_snapshot #f)
(define (cairo_raster_source_pattern_set_snapshot
         pattern
         snapshot)
  (unless
    ~cairo_raster_source_pattern_set_snapshot
    (set! ~cairo_raster_source_pattern_set_snapshot
      (fh-link-proc
        "cairo_raster_source_pattern_set_snapshot"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~snapshot
          ((make-fctn-param-unwrapper
             ffi:int
             (list ffi-void* ffi-void*))
           snapshot)))
    (~cairo_raster_source_pattern_set_snapshot
      pattern
      ~snapshot)))
(export cairo_raster_source_pattern_set_snapshot)

;; cairo_raster_source_snapshot_func_t cairo_raster_source_pattern_get_snapshot
;;     (cairo_pattern_t *pattern);
(define ~cairo_raster_source_pattern_get_snapshot #f)
(define (cairo_raster_source_pattern_get_snapshot
         pattern)
  (unless
    ~cairo_raster_source_pattern_get_snapshot
    (set! ~cairo_raster_source_pattern_get_snapshot
      (fh-link-proc
        "cairo_raster_source_pattern_get_snapshot"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_raster_source_pattern_get_snapshot
      pattern)))
(export cairo_raster_source_pattern_get_snapshot)

;; void cairo_raster_source_pattern_set_copy(cairo_pattern_t *pattern, 
;;     cairo_raster_source_copy_func_t copy);
(define ~cairo_raster_source_pattern_set_copy #f)
(define (cairo_raster_source_pattern_set_copy
         pattern
         copy)
  (unless
    ~cairo_raster_source_pattern_set_copy
    (set! ~cairo_raster_source_pattern_set_copy
      (fh-link-proc
        "cairo_raster_source_pattern_set_copy"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~copy ((make-fctn-param-unwrapper
                  ffi:int
                  (list ffi-void* ffi-void* ffi-void*))
                copy)))
    (~cairo_raster_source_pattern_set_copy
      pattern
      ~copy)))
(export cairo_raster_source_pattern_set_copy)

;; cairo_raster_source_copy_func_t cairo_raster_source_pattern_get_copy(
;;     cairo_pattern_t *pattern);
(define ~cairo_raster_source_pattern_get_copy #f)
(define (cairo_raster_source_pattern_get_copy pattern)
  (unless
    ~cairo_raster_source_pattern_get_copy
    (set! ~cairo_raster_source_pattern_get_copy
      (fh-link-proc
        "cairo_raster_source_pattern_get_copy"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_raster_source_pattern_get_copy pattern)))
(export cairo_raster_source_pattern_get_copy)

;; void cairo_raster_source_pattern_set_finish(cairo_pattern_t *pattern, 
;;     cairo_raster_source_finish_func_t finish);
(define ~cairo_raster_source_pattern_set_finish #f)
(define (cairo_raster_source_pattern_set_finish
         pattern
         finish)
  (unless
    ~cairo_raster_source_pattern_set_finish
    (set! ~cairo_raster_source_pattern_set_finish
      (fh-link-proc
        "cairo_raster_source_pattern_set_finish"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~finish
          ((make-fctn-param-unwrapper
             ffi:void
             (list ffi-void* ffi-void*))
           finish)))
    (~cairo_raster_source_pattern_set_finish
      pattern
      ~finish)))
(export cairo_raster_source_pattern_set_finish)

;; cairo_raster_source_finish_func_t cairo_raster_source_pattern_get_finish(
;;     cairo_pattern_t *pattern);
(define ~cairo_raster_source_pattern_get_finish #f)
(define (cairo_raster_source_pattern_get_finish pattern)
  (unless
    ~cairo_raster_source_pattern_get_finish
    (set! ~cairo_raster_source_pattern_get_finish
      (fh-link-proc
        "cairo_raster_source_pattern_get_finish"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_raster_source_pattern_get_finish pattern)))
(export cairo_raster_source_pattern_get_finish)

;; cairo_pattern_t *cairo_pattern_create_rgb(double red, double green, double 
;;     blue);
(define ~cairo_pattern_create_rgb #f)
(define (cairo_pattern_create_rgb red green blue)
  (unless
    ~cairo_pattern_create_rgb
    (set! ~cairo_pattern_create_rgb
      (fh-link-proc
        "cairo_pattern_create_rgb"
        ffi-void*
        (list ffi:double ffi:double ffi:double)
        link-lib)))
  (let ((~red (unwrap~float red))
        (~green (unwrap~float green))
        (~blue (unwrap~float blue)))
    (~cairo_pattern_create_rgb ~red ~green ~blue)))
(export cairo_pattern_create_rgb)

;; cairo_pattern_t *cairo_pattern_create_rgba(double red, double green, double 
;;     blue, double alpha);
(define ~cairo_pattern_create_rgba #f)
(define (cairo_pattern_create_rgba red green blue alpha)
  (unless
    ~cairo_pattern_create_rgba
    (set! ~cairo_pattern_create_rgba
      (fh-link-proc
        "cairo_pattern_create_rgba"
        ffi-void*
        (list ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~red (unwrap~float red))
        (~green (unwrap~float green))
        (~blue (unwrap~float blue))
        (~alpha (unwrap~float alpha)))
    (~cairo_pattern_create_rgba
      ~red
      ~green
      ~blue
      ~alpha)))
(export cairo_pattern_create_rgba)

;; cairo_pattern_t *cairo_pattern_create_for_surface(cairo_surface_t *surface)
;;     ;
(define ~cairo_pattern_create_for_surface #f)
(define (cairo_pattern_create_for_surface surface)
  (unless
    ~cairo_pattern_create_for_surface
    (set! ~cairo_pattern_create_for_surface
      (fh-link-proc
        "cairo_pattern_create_for_surface"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_pattern_create_for_surface surface)))
(export cairo_pattern_create_for_surface)

;; cairo_pattern_t *cairo_pattern_create_linear(double x0, double y0, double x1
;;     , double y1);
(define ~cairo_pattern_create_linear #f)
(define (cairo_pattern_create_linear x0 y0 x1 y1)
  (unless
    ~cairo_pattern_create_linear
    (set! ~cairo_pattern_create_linear
      (fh-link-proc
        "cairo_pattern_create_linear"
        ffi-void*
        (list ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~x0 (unwrap~float x0))
        (~y0 (unwrap~float y0))
        (~x1 (unwrap~float x1))
        (~y1 (unwrap~float y1)))
    (~cairo_pattern_create_linear ~x0 ~y0 ~x1 ~y1)))
(export cairo_pattern_create_linear)

;; cairo_pattern_t *cairo_pattern_create_radial(double cx0, double cy0, double 
;;     radius0, double cx1, double cy1, double radius1);
(define ~cairo_pattern_create_radial #f)
(define (cairo_pattern_create_radial
         cx0
         cy0
         radius0
         cx1
         cy1
         radius1)
  (unless
    ~cairo_pattern_create_radial
    (set! ~cairo_pattern_create_radial
      (fh-link-proc
        "cairo_pattern_create_radial"
        ffi-void*
        (list ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~cx0 (unwrap~float cx0))
        (~cy0 (unwrap~float cy0))
        (~radius0 (unwrap~float radius0))
        (~cx1 (unwrap~float cx1))
        (~cy1 (unwrap~float cy1))
        (~radius1 (unwrap~float radius1)))
    (~cairo_pattern_create_radial
      ~cx0
      ~cy0
      ~radius0
      ~cx1
      ~cy1
      ~radius1)))
(export cairo_pattern_create_radial)

;; cairo_pattern_t *cairo_pattern_create_mesh(void);
(define ~cairo_pattern_create_mesh #f)
(define (cairo_pattern_create_mesh)
  (unless
    ~cairo_pattern_create_mesh
    (set! ~cairo_pattern_create_mesh
      (fh-link-proc
        "cairo_pattern_create_mesh"
        ffi-void*
        (list)
        link-lib)))
  (let () (~cairo_pattern_create_mesh)))
(export cairo_pattern_create_mesh)

;; cairo_pattern_t *cairo_pattern_reference(cairo_pattern_t *pattern);
(define ~cairo_pattern_reference #f)
(define (cairo_pattern_reference pattern)
  (unless
    ~cairo_pattern_reference
    (set! ~cairo_pattern_reference
      (fh-link-proc
        "cairo_pattern_reference"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_pattern_reference pattern)))
(export cairo_pattern_reference)

;; void cairo_pattern_destroy(cairo_pattern_t *pattern);
(define ~cairo_pattern_destroy #f)
(define (cairo_pattern_destroy pattern)
  (unless
    ~cairo_pattern_destroy
    (set! ~cairo_pattern_destroy
      (fh-link-proc
        "cairo_pattern_destroy"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_pattern_destroy pattern)))
(export cairo_pattern_destroy)

;; unsigned int cairo_pattern_get_reference_count(cairo_pattern_t *pattern);
(define ~cairo_pattern_get_reference_count #f)
(define (cairo_pattern_get_reference_count pattern)
  (unless
    ~cairo_pattern_get_reference_count
    (set! ~cairo_pattern_get_reference_count
      (fh-link-proc
        "cairo_pattern_get_reference_count"
        ffi:unsigned-int
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_pattern_get_reference_count pattern)))
(export cairo_pattern_get_reference_count)

;; cairo_status_t cairo_pattern_status(cairo_pattern_t *pattern);
(define ~cairo_pattern_status #f)
(define (cairo_pattern_status pattern)
  (unless
    ~cairo_pattern_status
    (set! ~cairo_pattern_status
      (fh-link-proc
        "cairo_pattern_status"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_pattern_status pattern))))
(export cairo_pattern_status)

;; void *cairo_pattern_get_user_data(cairo_pattern_t *pattern, const 
;;     cairo_user_data_key_t *key);
(define ~cairo_pattern_get_user_data #f)
(define (cairo_pattern_get_user_data pattern key)
  (unless
    ~cairo_pattern_get_user_data
    (set! ~cairo_pattern_get_user_data
      (fh-link-proc
        "cairo_pattern_get_user_data"
        ffi-void*
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_pattern_get_user_data pattern key)))
(export cairo_pattern_get_user_data)

;; cairo_status_t cairo_pattern_set_user_data(cairo_pattern_t *pattern, const 
;;     cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t 
;;     destroy);
(define ~cairo_pattern_set_user_data #f)
(define (cairo_pattern_set_user_data
         pattern
         key
         user_data
         destroy)
  (unless
    ~cairo_pattern_set_user_data
    (set! ~cairo_pattern_set_user_data
      (fh-link-proc
        "cairo_pattern_set_user_data"
        ffi:int
        (list ffi-void* ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~user_data (unwrap~pointer user_data))
        (~destroy
          ((make-fctn-param-unwrapper
             ffi:void
             (list ffi-void*))
           destroy)))
    (wrap-cairo_status_t
      (~cairo_pattern_set_user_data
        pattern
        key
        ~user_data
        ~destroy))))
(export cairo_pattern_set_user_data)

;; typedef enum _cairo_pattern_type {
;;   CAIRO_PATTERN_TYPE_SOLID,
;;   CAIRO_PATTERN_TYPE_SURFACE,
;;   CAIRO_PATTERN_TYPE_LINEAR,
;;   CAIRO_PATTERN_TYPE_RADIAL,
;;   CAIRO_PATTERN_TYPE_MESH,
;;   CAIRO_PATTERN_TYPE_RASTER_SOURCE,
;; } cairo_pattern_type_t;
(define cairo_pattern_type_t-enum-nvl
  '((CAIRO_PATTERN_TYPE_SOLID . 0)
    (CAIRO_PATTERN_TYPE_SURFACE . 1)
    (CAIRO_PATTERN_TYPE_LINEAR . 2)
    (CAIRO_PATTERN_TYPE_RADIAL . 3)
    (CAIRO_PATTERN_TYPE_MESH . 4)
    (CAIRO_PATTERN_TYPE_RASTER_SOURCE . 5))
  )
(define cairo_pattern_type_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_pattern_type_t-enum-nvl))
(define-public (unwrap-cairo_pattern_type_t n)
  (assq-ref cairo_pattern_type_t-enum-nvl n))
(define-public (wrap-cairo_pattern_type_t v)
  (assq-ref cairo_pattern_type_t-enum-vnl v))
(define-public unwrap-enum-_cairo_pattern_type unwrap-cairo_pattern_type_t)
(define-public wrap-enum-_cairo_pattern_type wrap-cairo_pattern_type_t)

;; cairo_pattern_type_t cairo_pattern_get_type(cairo_pattern_t *pattern);
(define ~cairo_pattern_get_type #f)
(define (cairo_pattern_get_type pattern)
  (unless
    ~cairo_pattern_get_type
    (set! ~cairo_pattern_get_type
      (fh-link-proc
        "cairo_pattern_get_type"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_pattern_type_t
      (~cairo_pattern_get_type pattern))))
(export cairo_pattern_get_type)

;; void cairo_pattern_add_color_stop_rgb(cairo_pattern_t *pattern, double 
;;     offset, double red, double green, double blue);
(define ~cairo_pattern_add_color_stop_rgb #f)
(define (cairo_pattern_add_color_stop_rgb
         pattern
         offset
         red
         green
         blue)
  (unless
    ~cairo_pattern_add_color_stop_rgb
    (set! ~cairo_pattern_add_color_stop_rgb
      (fh-link-proc
        "cairo_pattern_add_color_stop_rgb"
        ffi:void
        (list ffi-void*
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~offset (unwrap~float offset))
        (~red (unwrap~float red))
        (~green (unwrap~float green))
        (~blue (unwrap~float blue)))
    (~cairo_pattern_add_color_stop_rgb
      pattern
      ~offset
      ~red
      ~green
      ~blue)))
(export cairo_pattern_add_color_stop_rgb)

;; void cairo_pattern_add_color_stop_rgba(cairo_pattern_t *pattern, double 
;;     offset, double red, double green, double blue, double alpha);
(define ~cairo_pattern_add_color_stop_rgba #f)
(define (cairo_pattern_add_color_stop_rgba
         pattern
         offset
         red
         green
         blue
         alpha)
  (unless
    ~cairo_pattern_add_color_stop_rgba
    (set! ~cairo_pattern_add_color_stop_rgba
      (fh-link-proc
        "cairo_pattern_add_color_stop_rgba"
        ffi:void
        (list ffi-void*
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~offset (unwrap~float offset))
        (~red (unwrap~float red))
        (~green (unwrap~float green))
        (~blue (unwrap~float blue))
        (~alpha (unwrap~float alpha)))
    (~cairo_pattern_add_color_stop_rgba
      pattern
      ~offset
      ~red
      ~green
      ~blue
      ~alpha)))
(export cairo_pattern_add_color_stop_rgba)

;; void cairo_mesh_pattern_begin_patch(cairo_pattern_t *pattern);
(define ~cairo_mesh_pattern_begin_patch #f)
(define (cairo_mesh_pattern_begin_patch pattern)
  (unless
    ~cairo_mesh_pattern_begin_patch
    (set! ~cairo_mesh_pattern_begin_patch
      (fh-link-proc
        "cairo_mesh_pattern_begin_patch"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_mesh_pattern_begin_patch pattern)))
(export cairo_mesh_pattern_begin_patch)

;; void cairo_mesh_pattern_end_patch(cairo_pattern_t *pattern);
(define ~cairo_mesh_pattern_end_patch #f)
(define (cairo_mesh_pattern_end_patch pattern)
  (unless
    ~cairo_mesh_pattern_end_patch
    (set! ~cairo_mesh_pattern_end_patch
      (fh-link-proc
        "cairo_mesh_pattern_end_patch"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_mesh_pattern_end_patch pattern)))
(export cairo_mesh_pattern_end_patch)

;; void cairo_mesh_pattern_curve_to(cairo_pattern_t *pattern, double x1, double
;;      y1, double x2, double y2, double x3, double y3);
(define ~cairo_mesh_pattern_curve_to #f)
(define (cairo_mesh_pattern_curve_to
         pattern
         x1
         y1
         x2
         y2
         x3
         y3)
  (unless
    ~cairo_mesh_pattern_curve_to
    (set! ~cairo_mesh_pattern_curve_to
      (fh-link-proc
        "cairo_mesh_pattern_curve_to"
        ffi:void
        (list ffi-void*
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~x1 (unwrap~float x1))
        (~y1 (unwrap~float y1))
        (~x2 (unwrap~float x2))
        (~y2 (unwrap~float y2))
        (~x3 (unwrap~float x3))
        (~y3 (unwrap~float y3)))
    (~cairo_mesh_pattern_curve_to
      pattern
      ~x1
      ~y1
      ~x2
      ~y2
      ~x3
      ~y3)))
(export cairo_mesh_pattern_curve_to)

;; void cairo_mesh_pattern_line_to(cairo_pattern_t *pattern, double x, double y
;;     );
(define ~cairo_mesh_pattern_line_to #f)
(define (cairo_mesh_pattern_line_to pattern x y)
  (unless
    ~cairo_mesh_pattern_line_to
    (set! ~cairo_mesh_pattern_line_to
      (fh-link-proc
        "cairo_mesh_pattern_line_to"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~x (unwrap~float x)) (~y (unwrap~float y)))
    (~cairo_mesh_pattern_line_to pattern ~x ~y)))
(export cairo_mesh_pattern_line_to)

;; void cairo_mesh_pattern_move_to(cairo_pattern_t *pattern, double x, double y
;;     );
(define ~cairo_mesh_pattern_move_to #f)
(define (cairo_mesh_pattern_move_to pattern x y)
  (unless
    ~cairo_mesh_pattern_move_to
    (set! ~cairo_mesh_pattern_move_to
      (fh-link-proc
        "cairo_mesh_pattern_move_to"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~x (unwrap~float x)) (~y (unwrap~float y)))
    (~cairo_mesh_pattern_move_to pattern ~x ~y)))
(export cairo_mesh_pattern_move_to)

;; void cairo_mesh_pattern_set_control_point(cairo_pattern_t *pattern, 
;;     unsigned int point_num, double x, double y);
(define ~cairo_mesh_pattern_set_control_point #f)
(define (cairo_mesh_pattern_set_control_point
         pattern
         point_num
         x
         y)
  (unless
    ~cairo_mesh_pattern_set_control_point
    (set! ~cairo_mesh_pattern_set_control_point
      (fh-link-proc
        "cairo_mesh_pattern_set_control_point"
        ffi:void
        (list ffi-void*
              ffi:unsigned-int
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~point_num (unwrap~fixed point_num))
        (~x (unwrap~float x))
        (~y (unwrap~float y)))
    (~cairo_mesh_pattern_set_control_point
      pattern
      ~point_num
      ~x
      ~y)))
(export cairo_mesh_pattern_set_control_point)

;; void cairo_mesh_pattern_set_corner_color_rgb(cairo_pattern_t *pattern, 
;;     unsigned int corner_num, double red, double green, double blue);
(define ~cairo_mesh_pattern_set_corner_color_rgb #f)
(define (cairo_mesh_pattern_set_corner_color_rgb
         pattern
         corner_num
         red
         green
         blue)
  (unless
    ~cairo_mesh_pattern_set_corner_color_rgb
    (set! ~cairo_mesh_pattern_set_corner_color_rgb
      (fh-link-proc
        "cairo_mesh_pattern_set_corner_color_rgb"
        ffi:void
        (list ffi-void*
              ffi:unsigned-int
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~corner_num (unwrap~fixed corner_num))
        (~red (unwrap~float red))
        (~green (unwrap~float green))
        (~blue (unwrap~float blue)))
    (~cairo_mesh_pattern_set_corner_color_rgb
      pattern
      ~corner_num
      ~red
      ~green
      ~blue)))
(export cairo_mesh_pattern_set_corner_color_rgb)

;; void cairo_mesh_pattern_set_corner_color_rgba(cairo_pattern_t *pattern, 
;;     unsigned int corner_num, double red, double green, double blue, double 
;;     alpha);
(define ~cairo_mesh_pattern_set_corner_color_rgba #f)
(define (cairo_mesh_pattern_set_corner_color_rgba
         pattern
         corner_num
         red
         green
         blue
         alpha)
  (unless
    ~cairo_mesh_pattern_set_corner_color_rgba
    (set! ~cairo_mesh_pattern_set_corner_color_rgba
      (fh-link-proc
        "cairo_mesh_pattern_set_corner_color_rgba"
        ffi:void
        (list ffi-void*
              ffi:unsigned-int
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~corner_num (unwrap~fixed corner_num))
        (~red (unwrap~float red))
        (~green (unwrap~float green))
        (~blue (unwrap~float blue))
        (~alpha (unwrap~float alpha)))
    (~cairo_mesh_pattern_set_corner_color_rgba
      pattern
      ~corner_num
      ~red
      ~green
      ~blue
      ~alpha)))
(export cairo_mesh_pattern_set_corner_color_rgba)

;; void cairo_pattern_set_matrix(cairo_pattern_t *pattern, const cairo_matrix_t
;;      *matrix);
(define ~cairo_pattern_set_matrix #f)
(define (cairo_pattern_set_matrix pattern matrix)
  (unless
    ~cairo_pattern_set_matrix
    (set! ~cairo_pattern_set_matrix
      (fh-link-proc
        "cairo_pattern_set_matrix"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_pattern_set_matrix pattern matrix)))
(export cairo_pattern_set_matrix)

;; void cairo_pattern_get_matrix(cairo_pattern_t *pattern, cairo_matrix_t *
;;     matrix);
(define ~cairo_pattern_get_matrix #f)
(define (cairo_pattern_get_matrix pattern matrix)
  (unless
    ~cairo_pattern_get_matrix
    (set! ~cairo_pattern_get_matrix
      (fh-link-proc
        "cairo_pattern_get_matrix"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_pattern_get_matrix pattern matrix)))
(export cairo_pattern_get_matrix)

;; typedef enum _cairo_extend {
;;   CAIRO_EXTEND_NONE,
;;   CAIRO_EXTEND_REPEAT,
;;   CAIRO_EXTEND_REFLECT,
;;   CAIRO_EXTEND_PAD,
;; } cairo_extend_t;
(define cairo_extend_t-enum-nvl
  '((CAIRO_EXTEND_NONE . 0)
    (CAIRO_EXTEND_REPEAT . 1)
    (CAIRO_EXTEND_REFLECT . 2)
    (CAIRO_EXTEND_PAD . 3))
  )
(define cairo_extend_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_extend_t-enum-nvl))
(define-public (unwrap-cairo_extend_t n)
  (assq-ref cairo_extend_t-enum-nvl n))
(define-public (wrap-cairo_extend_t v)
  (assq-ref cairo_extend_t-enum-vnl v))
(define-public unwrap-enum-_cairo_extend unwrap-cairo_extend_t)
(define-public wrap-enum-_cairo_extend wrap-cairo_extend_t)

;; void cairo_pattern_set_extend(cairo_pattern_t *pattern, cairo_extend_t 
;;     extend);
(define ~cairo_pattern_set_extend #f)
(define (cairo_pattern_set_extend pattern extend)
  (unless
    ~cairo_pattern_set_extend
    (set! ~cairo_pattern_set_extend
      (fh-link-proc
        "cairo_pattern_set_extend"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~extend (unwrap-cairo_extend_t extend)))
    (~cairo_pattern_set_extend pattern ~extend)))
(export cairo_pattern_set_extend)

;; cairo_extend_t cairo_pattern_get_extend(cairo_pattern_t *pattern);
(define ~cairo_pattern_get_extend #f)
(define (cairo_pattern_get_extend pattern)
  (unless
    ~cairo_pattern_get_extend
    (set! ~cairo_pattern_get_extend
      (fh-link-proc
        "cairo_pattern_get_extend"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_extend_t
      (~cairo_pattern_get_extend pattern))))
(export cairo_pattern_get_extend)

;; typedef enum _cairo_filter {
;;   CAIRO_FILTER_FAST,
;;   CAIRO_FILTER_GOOD,
;;   CAIRO_FILTER_BEST,
;;   CAIRO_FILTER_NEAREST,
;;   CAIRO_FILTER_BILINEAR,
;;   CAIRO_FILTER_GAUSSIAN,
;; } cairo_filter_t;
(define cairo_filter_t-enum-nvl
  '((CAIRO_FILTER_FAST . 0)
    (CAIRO_FILTER_GOOD . 1)
    (CAIRO_FILTER_BEST . 2)
    (CAIRO_FILTER_NEAREST . 3)
    (CAIRO_FILTER_BILINEAR . 4)
    (CAIRO_FILTER_GAUSSIAN . 5))
  )
(define cairo_filter_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_filter_t-enum-nvl))
(define-public (unwrap-cairo_filter_t n)
  (assq-ref cairo_filter_t-enum-nvl n))
(define-public (wrap-cairo_filter_t v)
  (assq-ref cairo_filter_t-enum-vnl v))
(define-public unwrap-enum-_cairo_filter unwrap-cairo_filter_t)
(define-public wrap-enum-_cairo_filter wrap-cairo_filter_t)

;; void cairo_pattern_set_filter(cairo_pattern_t *pattern, cairo_filter_t 
;;     filter);
(define ~cairo_pattern_set_filter #f)
(define (cairo_pattern_set_filter pattern filter)
  (unless
    ~cairo_pattern_set_filter
    (set! ~cairo_pattern_set_filter
      (fh-link-proc
        "cairo_pattern_set_filter"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~filter (unwrap-cairo_filter_t filter)))
    (~cairo_pattern_set_filter pattern ~filter)))
(export cairo_pattern_set_filter)

;; cairo_filter_t cairo_pattern_get_filter(cairo_pattern_t *pattern);
(define ~cairo_pattern_get_filter #f)
(define (cairo_pattern_get_filter pattern)
  (unless
    ~cairo_pattern_get_filter
    (set! ~cairo_pattern_get_filter
      (fh-link-proc
        "cairo_pattern_get_filter"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_filter_t
      (~cairo_pattern_get_filter pattern))))
(export cairo_pattern_get_filter)

;; cairo_status_t cairo_pattern_get_rgba(cairo_pattern_t *pattern, double *red
;;     , double *green, double *blue, double *alpha);
(define ~cairo_pattern_get_rgba #f)
(define (cairo_pattern_get_rgba
         pattern
         red
         green
         blue
         alpha)
  (unless
    ~cairo_pattern_get_rgba
    (set! ~cairo_pattern_get_rgba
      (fh-link-proc
        "cairo_pattern_get_rgba"
        ffi:int
        (list ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~red (unwrap~pointer red))
        (~green (unwrap~pointer green))
        (~blue (unwrap~pointer blue))
        (~alpha (unwrap~pointer alpha)))
    (wrap-cairo_status_t
      (~cairo_pattern_get_rgba
        pattern
        ~red
        ~green
        ~blue
        ~alpha))))
(export cairo_pattern_get_rgba)

;; cairo_status_t cairo_pattern_get_surface(cairo_pattern_t *pattern, 
;;     cairo_surface_t **surface);
(define ~cairo_pattern_get_surface #f)
(define (cairo_pattern_get_surface pattern surface)
  (unless
    ~cairo_pattern_get_surface
    (set! ~cairo_pattern_get_surface
      (fh-link-proc
        "cairo_pattern_get_surface"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~surface (unwrap~pointer surface)))
    (wrap-cairo_status_t
      (~cairo_pattern_get_surface pattern ~surface))))
(export cairo_pattern_get_surface)

;; cairo_status_t cairo_pattern_get_color_stop_rgba(cairo_pattern_t *pattern, 
;;     int index, double *offset, double *red, double *green, double *blue, 
;;     double *alpha);
(define ~cairo_pattern_get_color_stop_rgba #f)
(define (cairo_pattern_get_color_stop_rgba
         pattern
         index
         offset
         red
         green
         blue
         alpha)
  (unless
    ~cairo_pattern_get_color_stop_rgba
    (set! ~cairo_pattern_get_color_stop_rgba
      (fh-link-proc
        "cairo_pattern_get_color_stop_rgba"
        ffi:int
        (list ffi-void*
              ffi:int
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~index (unwrap~fixed index))
        (~offset (unwrap~pointer offset))
        (~red (unwrap~pointer red))
        (~green (unwrap~pointer green))
        (~blue (unwrap~pointer blue))
        (~alpha (unwrap~pointer alpha)))
    (wrap-cairo_status_t
      (~cairo_pattern_get_color_stop_rgba
        pattern
        ~index
        ~offset
        ~red
        ~green
        ~blue
        ~alpha))))
(export cairo_pattern_get_color_stop_rgba)

;; cairo_status_t cairo_pattern_get_color_stop_count(cairo_pattern_t *pattern, 
;;     int *count);
(define ~cairo_pattern_get_color_stop_count #f)
(define (cairo_pattern_get_color_stop_count
         pattern
         count)
  (unless
    ~cairo_pattern_get_color_stop_count
    (set! ~cairo_pattern_get_color_stop_count
      (fh-link-proc
        "cairo_pattern_get_color_stop_count"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~count (unwrap~pointer count)))
    (wrap-cairo_status_t
      (~cairo_pattern_get_color_stop_count
        pattern
        ~count))))
(export cairo_pattern_get_color_stop_count)

;; cairo_status_t cairo_pattern_get_linear_points(cairo_pattern_t *pattern, 
;;     double *x0, double *y0, double *x1, double *y1);
(define ~cairo_pattern_get_linear_points #f)
(define (cairo_pattern_get_linear_points
         pattern
         x0
         y0
         x1
         y1)
  (unless
    ~cairo_pattern_get_linear_points
    (set! ~cairo_pattern_get_linear_points
      (fh-link-proc
        "cairo_pattern_get_linear_points"
        ffi:int
        (list ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~x0 (unwrap~pointer x0))
        (~y0 (unwrap~pointer y0))
        (~x1 (unwrap~pointer x1))
        (~y1 (unwrap~pointer y1)))
    (wrap-cairo_status_t
      (~cairo_pattern_get_linear_points
        pattern
        ~x0
        ~y0
        ~x1
        ~y1))))
(export cairo_pattern_get_linear_points)

;; cairo_status_t cairo_pattern_get_radial_circles(cairo_pattern_t *pattern, 
;;     double *x0, double *y0, double *r0, double *x1, double *y1, double *r1)
;;     ;
(define ~cairo_pattern_get_radial_circles #f)
(define (cairo_pattern_get_radial_circles
         pattern
         x0
         y0
         r0
         x1
         y1
         r1)
  (unless
    ~cairo_pattern_get_radial_circles
    (set! ~cairo_pattern_get_radial_circles
      (fh-link-proc
        "cairo_pattern_get_radial_circles"
        ffi:int
        (list ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~x0 (unwrap~pointer x0))
        (~y0 (unwrap~pointer y0))
        (~r0 (unwrap~pointer r0))
        (~x1 (unwrap~pointer x1))
        (~y1 (unwrap~pointer y1))
        (~r1 (unwrap~pointer r1)))
    (wrap-cairo_status_t
      (~cairo_pattern_get_radial_circles
        pattern
        ~x0
        ~y0
        ~r0
        ~x1
        ~y1
        ~r1))))
(export cairo_pattern_get_radial_circles)

;; cairo_status_t cairo_mesh_pattern_get_patch_count(cairo_pattern_t *pattern, 
;;     unsigned int *count);
(define ~cairo_mesh_pattern_get_patch_count #f)
(define (cairo_mesh_pattern_get_patch_count
         pattern
         count)
  (unless
    ~cairo_mesh_pattern_get_patch_count
    (set! ~cairo_mesh_pattern_get_patch_count
      (fh-link-proc
        "cairo_mesh_pattern_get_patch_count"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~count (unwrap~pointer count)))
    (wrap-cairo_status_t
      (~cairo_mesh_pattern_get_patch_count
        pattern
        ~count))))
(export cairo_mesh_pattern_get_patch_count)

;; cairo_path_t *cairo_mesh_pattern_get_path(cairo_pattern_t *pattern, 
;;     unsigned int patch_num);
(define ~cairo_mesh_pattern_get_path #f)
(define (cairo_mesh_pattern_get_path pattern patch_num)
  (unless
    ~cairo_mesh_pattern_get_path
    (set! ~cairo_mesh_pattern_get_path
      (fh-link-proc
        "cairo_mesh_pattern_get_path"
        ffi-void*
        (list ffi-void* ffi:unsigned-int)
        link-lib)))
  (let ((~patch_num (unwrap~fixed patch_num)))
    (~cairo_mesh_pattern_get_path pattern ~patch_num)))
(export cairo_mesh_pattern_get_path)

;; cairo_status_t cairo_mesh_pattern_get_corner_color_rgba(cairo_pattern_t *
;;     pattern, unsigned int patch_num, unsigned int corner_num, double *red, 
;;     double *green, double *blue, double *alpha);
(define ~cairo_mesh_pattern_get_corner_color_rgba #f)
(define (cairo_mesh_pattern_get_corner_color_rgba
         pattern
         patch_num
         corner_num
         red
         green
         blue
         alpha)
  (unless
    ~cairo_mesh_pattern_get_corner_color_rgba
    (set! ~cairo_mesh_pattern_get_corner_color_rgba
      (fh-link-proc
        "cairo_mesh_pattern_get_corner_color_rgba"
        ffi:int
        (list ffi-void*
              ffi:unsigned-int
              ffi:unsigned-int
              ffi-void*
              ffi-void*
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~patch_num (unwrap~fixed patch_num))
        (~corner_num (unwrap~fixed corner_num))
        (~red (unwrap~pointer red))
        (~green (unwrap~pointer green))
        (~blue (unwrap~pointer blue))
        (~alpha (unwrap~pointer alpha)))
    (wrap-cairo_status_t
      (~cairo_mesh_pattern_get_corner_color_rgba
        pattern
        ~patch_num
        ~corner_num
        ~red
        ~green
        ~blue
        ~alpha))))
(export cairo_mesh_pattern_get_corner_color_rgba)

;; cairo_status_t cairo_mesh_pattern_get_control_point(cairo_pattern_t *pattern
;;     , unsigned int patch_num, unsigned int point_num, double *x, double *y)
;;     ;
(define ~cairo_mesh_pattern_get_control_point #f)
(define (cairo_mesh_pattern_get_control_point
         pattern
         patch_num
         point_num
         x
         y)
  (unless
    ~cairo_mesh_pattern_get_control_point
    (set! ~cairo_mesh_pattern_get_control_point
      (fh-link-proc
        "cairo_mesh_pattern_get_control_point"
        ffi:int
        (list ffi-void*
              ffi:unsigned-int
              ffi:unsigned-int
              ffi-void*
              ffi-void*)
        link-lib)))
  (let ((~patch_num (unwrap~fixed patch_num))
        (~point_num (unwrap~fixed point_num))
        (~x (unwrap~pointer x))
        (~y (unwrap~pointer y)))
    (wrap-cairo_status_t
      (~cairo_mesh_pattern_get_control_point
        pattern
        ~patch_num
        ~point_num
        ~x
        ~y))))
(export cairo_mesh_pattern_get_control_point)

;; void cairo_matrix_init(cairo_matrix_t *matrix, double xx, double yx, double 
;;     xy, double yy, double x0, double y0);
(define ~cairo_matrix_init #f)
(define (cairo_matrix_init matrix xx yx xy yy x0 y0)
  (unless
    ~cairo_matrix_init
    (set! ~cairo_matrix_init
      (fh-link-proc
        "cairo_matrix_init"
        ffi:void
        (list ffi-void*
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double
              ffi:double)
        link-lib)))
  (let ((~xx (unwrap~float xx))
        (~yx (unwrap~float yx))
        (~xy (unwrap~float xy))
        (~yy (unwrap~float yy))
        (~x0 (unwrap~float x0))
        (~y0 (unwrap~float y0)))
    (~cairo_matrix_init
      matrix
      ~xx
      ~yx
      ~xy
      ~yy
      ~x0
      ~y0)))
(export cairo_matrix_init)

;; void cairo_matrix_init_identity(cairo_matrix_t *matrix);
(define ~cairo_matrix_init_identity #f)
(define (cairo_matrix_init_identity matrix)
  (unless
    ~cairo_matrix_init_identity
    (set! ~cairo_matrix_init_identity
      (fh-link-proc
        "cairo_matrix_init_identity"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_matrix_init_identity matrix)))
(export cairo_matrix_init_identity)

;; void cairo_matrix_init_translate(cairo_matrix_t *matrix, double tx, double 
;;     ty);
(define ~cairo_matrix_init_translate #f)
(define (cairo_matrix_init_translate matrix tx ty)
  (unless
    ~cairo_matrix_init_translate
    (set! ~cairo_matrix_init_translate
      (fh-link-proc
        "cairo_matrix_init_translate"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~tx (unwrap~float tx)) (~ty (unwrap~float ty)))
    (~cairo_matrix_init_translate matrix ~tx ~ty)))
(export cairo_matrix_init_translate)

;; void cairo_matrix_init_scale(cairo_matrix_t *matrix, double sx, double sy);
(define ~cairo_matrix_init_scale #f)
(define (cairo_matrix_init_scale matrix sx sy)
  (unless
    ~cairo_matrix_init_scale
    (set! ~cairo_matrix_init_scale
      (fh-link-proc
        "cairo_matrix_init_scale"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~sx (unwrap~float sx)) (~sy (unwrap~float sy)))
    (~cairo_matrix_init_scale matrix ~sx ~sy)))
(export cairo_matrix_init_scale)

;; void cairo_matrix_init_rotate(cairo_matrix_t *matrix, double radians);
(define ~cairo_matrix_init_rotate #f)
(define (cairo_matrix_init_rotate matrix radians)
  (unless
    ~cairo_matrix_init_rotate
    (set! ~cairo_matrix_init_rotate
      (fh-link-proc
        "cairo_matrix_init_rotate"
        ffi:void
        (list ffi-void* ffi:double)
        link-lib)))
  (let ((~radians (unwrap~float radians)))
    (~cairo_matrix_init_rotate matrix ~radians)))
(export cairo_matrix_init_rotate)

;; void cairo_matrix_translate(cairo_matrix_t *matrix, double tx, double ty);
(define ~cairo_matrix_translate #f)
(define (cairo_matrix_translate matrix tx ty)
  (unless
    ~cairo_matrix_translate
    (set! ~cairo_matrix_translate
      (fh-link-proc
        "cairo_matrix_translate"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~tx (unwrap~float tx)) (~ty (unwrap~float ty)))
    (~cairo_matrix_translate matrix ~tx ~ty)))
(export cairo_matrix_translate)

;; void cairo_matrix_scale(cairo_matrix_t *matrix, double sx, double sy);
(define ~cairo_matrix_scale #f)
(define (cairo_matrix_scale matrix sx sy)
  (unless
    ~cairo_matrix_scale
    (set! ~cairo_matrix_scale
      (fh-link-proc
        "cairo_matrix_scale"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~sx (unwrap~float sx)) (~sy (unwrap~float sy)))
    (~cairo_matrix_scale matrix ~sx ~sy)))
(export cairo_matrix_scale)

;; void cairo_matrix_rotate(cairo_matrix_t *matrix, double radians);
(define ~cairo_matrix_rotate #f)
(define (cairo_matrix_rotate matrix radians)
  (unless
    ~cairo_matrix_rotate
    (set! ~cairo_matrix_rotate
      (fh-link-proc
        "cairo_matrix_rotate"
        ffi:void
        (list ffi-void* ffi:double)
        link-lib)))
  (let ((~radians (unwrap~float radians)))
    (~cairo_matrix_rotate matrix ~radians)))
(export cairo_matrix_rotate)

;; cairo_status_t cairo_matrix_invert(cairo_matrix_t *matrix);
(define ~cairo_matrix_invert #f)
(define (cairo_matrix_invert matrix)
  (unless
    ~cairo_matrix_invert
    (set! ~cairo_matrix_invert
      (fh-link-proc
        "cairo_matrix_invert"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_matrix_invert matrix))))
(export cairo_matrix_invert)

;; void cairo_matrix_multiply(cairo_matrix_t *result, const cairo_matrix_t *a, 
;;     const cairo_matrix_t *b);
(define ~cairo_matrix_multiply #f)
(define (cairo_matrix_multiply result a b)
  (unless
    ~cairo_matrix_multiply
    (set! ~cairo_matrix_multiply
      (fh-link-proc
        "cairo_matrix_multiply"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let () (~cairo_matrix_multiply result a b)))
(export cairo_matrix_multiply)

;; void cairo_matrix_transform_distance(const cairo_matrix_t *matrix, double *
;;     dx, double *dy);
(define ~cairo_matrix_transform_distance #f)
(define (cairo_matrix_transform_distance matrix dx dy)
  (unless
    ~cairo_matrix_transform_distance
    (set! ~cairo_matrix_transform_distance
      (fh-link-proc
        "cairo_matrix_transform_distance"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~dx (unwrap~pointer dx))
        (~dy (unwrap~pointer dy)))
    (~cairo_matrix_transform_distance matrix ~dx ~dy)))
(export cairo_matrix_transform_distance)

;; void cairo_matrix_transform_point(const cairo_matrix_t *matrix, double *x, 
;;     double *y);
(define ~cairo_matrix_transform_point #f)
(define (cairo_matrix_transform_point matrix x y)
  (unless
    ~cairo_matrix_transform_point
    (set! ~cairo_matrix_transform_point
      (fh-link-proc
        "cairo_matrix_transform_point"
        ffi:void
        (list ffi-void* ffi-void* ffi-void*)
        link-lib)))
  (let ((~x (unwrap~pointer x)) (~y (unwrap~pointer y)))
    (~cairo_matrix_transform_point matrix ~x ~y)))
(export cairo_matrix_transform_point)

;; typedef struct _cairo_region cairo_region_t;
(define-public cairo_region_t-desc 'void)
(define-public cairo_region_t*-desc (bs:pointer cairo_region_t-desc))
(define-fh-pointer-type cairo_region_t* cairo_region_t*-desc cairo_region_t*? 
 make-cairo_region_t*)
(export cairo_region_t* cairo_region_t*? make-cairo_region_t*)

;; typedef enum _cairo_region_overlap {
;;   CAIRO_REGION_OVERLAP_IN,
;;   CAIRO_REGION_OVERLAP_OUT,
;;   CAIRO_REGION_OVERLAP_PART,
;; } cairo_region_overlap_t;
(define cairo_region_overlap_t-enum-nvl
  '((CAIRO_REGION_OVERLAP_IN . 0)
    (CAIRO_REGION_OVERLAP_OUT . 1)
    (CAIRO_REGION_OVERLAP_PART . 2))
  )
(define cairo_region_overlap_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_region_overlap_t-enum-nvl))
(define-public (unwrap-cairo_region_overlap_t n)
  (assq-ref cairo_region_overlap_t-enum-nvl n))
(define-public (wrap-cairo_region_overlap_t v)
  (assq-ref cairo_region_overlap_t-enum-vnl v))
(define-public unwrap-enum-_cairo_region_overlap unwrap-cairo_region_overlap_t)
(define-public wrap-enum-_cairo_region_overlap wrap-cairo_region_overlap_t)

;; cairo_region_t *cairo_region_create(void);
(define ~cairo_region_create #f)
(define (cairo_region_create)
  (unless
    ~cairo_region_create
    (set! ~cairo_region_create
      (fh-link-proc
        "cairo_region_create"
        ffi-void*
        (list)
        link-lib)))
  (let () (~cairo_region_create)))
(export cairo_region_create)

;; cairo_region_t *cairo_region_create_rectangle(const cairo_rectangle_int_t *
;;     rectangle);
(define ~cairo_region_create_rectangle #f)
(define (cairo_region_create_rectangle rectangle)
  (unless
    ~cairo_region_create_rectangle
    (set! ~cairo_region_create_rectangle
      (fh-link-proc
        "cairo_region_create_rectangle"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let ()
    (~cairo_region_create_rectangle rectangle)))
(export cairo_region_create_rectangle)

;; cairo_region_t *cairo_region_create_rectangles(const cairo_rectangle_int_t *
;;     rects, int count);
(define ~cairo_region_create_rectangles #f)
(define (cairo_region_create_rectangles rects count)
  (unless
    ~cairo_region_create_rectangles
    (set! ~cairo_region_create_rectangles
      (fh-link-proc
        "cairo_region_create_rectangles"
        ffi-void*
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~count (unwrap~fixed count)))
    (~cairo_region_create_rectangles rects ~count)))
(export cairo_region_create_rectangles)

;; cairo_region_t *cairo_region_copy(const cairo_region_t *original);
(define ~cairo_region_copy #f)
(define (cairo_region_copy original)
  (unless
    ~cairo_region_copy
    (set! ~cairo_region_copy
      (fh-link-proc
        "cairo_region_copy"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_region_copy original)))
(export cairo_region_copy)

;; cairo_region_t *cairo_region_reference(cairo_region_t *region);
(define ~cairo_region_reference #f)
(define (cairo_region_reference region)
  (unless
    ~cairo_region_reference
    (set! ~cairo_region_reference
      (fh-link-proc
        "cairo_region_reference"
        ffi-void*
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_region_reference region)))
(export cairo_region_reference)

;; void cairo_region_destroy(cairo_region_t *region);
(define ~cairo_region_destroy #f)
(define (cairo_region_destroy region)
  (unless
    ~cairo_region_destroy
    (set! ~cairo_region_destroy
      (fh-link-proc
        "cairo_region_destroy"
        ffi:void
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_region_destroy region)))
(export cairo_region_destroy)

;; cairo_bool_t cairo_region_equal(const cairo_region_t *a, const 
;;     cairo_region_t *b);
(define ~cairo_region_equal #f)
(define (cairo_region_equal a b)
  (unless
    ~cairo_region_equal
    (set! ~cairo_region_equal
      (fh-link-proc
        "cairo_region_equal"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_bool_t (~cairo_region_equal a b))))
(export cairo_region_equal)

;; cairo_status_t cairo_region_status(const cairo_region_t *region);
(define ~cairo_region_status #f)
(define (cairo_region_status region)
  (unless
    ~cairo_region_status
    (set! ~cairo_region_status
      (fh-link-proc
        "cairo_region_status"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_region_status region))))
(export cairo_region_status)

;; void cairo_region_get_extents(const cairo_region_t *region, 
;;     cairo_rectangle_int_t *extents);
(define ~cairo_region_get_extents #f)
(define (cairo_region_get_extents region extents)
  (unless
    ~cairo_region_get_extents
    (set! ~cairo_region_get_extents
      (fh-link-proc
        "cairo_region_get_extents"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (~cairo_region_get_extents region extents)))
(export cairo_region_get_extents)

;; int cairo_region_num_rectangles(const cairo_region_t *region);
(define ~cairo_region_num_rectangles #f)
(define (cairo_region_num_rectangles region)
  (unless
    ~cairo_region_num_rectangles
    (set! ~cairo_region_num_rectangles
      (fh-link-proc
        "cairo_region_num_rectangles"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let () (~cairo_region_num_rectangles region)))
(export cairo_region_num_rectangles)

;; void cairo_region_get_rectangle(const cairo_region_t *region, int nth, 
;;     cairo_rectangle_int_t *rectangle);
(define ~cairo_region_get_rectangle #f)
(define (cairo_region_get_rectangle region nth rectangle)
  (unless
    ~cairo_region_get_rectangle
    (set! ~cairo_region_get_rectangle
      (fh-link-proc
        "cairo_region_get_rectangle"
        ffi:void
        (list ffi-void* ffi:int ffi-void*)
        link-lib)))
  (let ((~nth (unwrap~fixed nth)))
    (~cairo_region_get_rectangle
      region
      ~nth
      rectangle)))
(export cairo_region_get_rectangle)

;; cairo_bool_t cairo_region_is_empty(const cairo_region_t *region);
(define ~cairo_region_is_empty #f)
(define (cairo_region_is_empty region)
  (unless
    ~cairo_region_is_empty
    (set! ~cairo_region_is_empty
      (fh-link-proc
        "cairo_region_is_empty"
        ffi:int
        (list ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_bool_t
      (~cairo_region_is_empty region))))
(export cairo_region_is_empty)

;; cairo_region_overlap_t cairo_region_contains_rectangle(const cairo_region_t 
;;     *region, const cairo_rectangle_int_t *rectangle);
(define ~cairo_region_contains_rectangle #f)
(define (cairo_region_contains_rectangle
         region
         rectangle)
  (unless
    ~cairo_region_contains_rectangle
    (set! ~cairo_region_contains_rectangle
      (fh-link-proc
        "cairo_region_contains_rectangle"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_region_overlap_t
      (~cairo_region_contains_rectangle
        region
        rectangle))))
(export cairo_region_contains_rectangle)

;; cairo_bool_t cairo_region_contains_point(const cairo_region_t *region, int x
;;     , int y);
(define ~cairo_region_contains_point #f)
(define (cairo_region_contains_point region x y)
  (unless
    ~cairo_region_contains_point
    (set! ~cairo_region_contains_point
      (fh-link-proc
        "cairo_region_contains_point"
        ffi:int
        (list ffi-void* ffi:int ffi:int)
        link-lib)))
  (let ((~x (unwrap~fixed x)) (~y (unwrap~fixed y)))
    (wrap-cairo_bool_t
      (~cairo_region_contains_point region ~x ~y))))
(export cairo_region_contains_point)

;; void cairo_region_translate(cairo_region_t *region, int dx, int dy);
(define ~cairo_region_translate #f)
(define (cairo_region_translate region dx dy)
  (unless
    ~cairo_region_translate
    (set! ~cairo_region_translate
      (fh-link-proc
        "cairo_region_translate"
        ffi:void
        (list ffi-void* ffi:int ffi:int)
        link-lib)))
  (let ((~dx (unwrap~fixed dx)) (~dy (unwrap~fixed dy)))
    (~cairo_region_translate region ~dx ~dy)))
(export cairo_region_translate)

;; cairo_status_t cairo_region_subtract(cairo_region_t *dst, const 
;;     cairo_region_t *other);
(define ~cairo_region_subtract #f)
(define (cairo_region_subtract dst other)
  (unless
    ~cairo_region_subtract
    (set! ~cairo_region_subtract
      (fh-link-proc
        "cairo_region_subtract"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_region_subtract dst other))))
(export cairo_region_subtract)

;; cairo_status_t cairo_region_subtract_rectangle(cairo_region_t *dst, const 
;;     cairo_rectangle_int_t *rectangle);
(define ~cairo_region_subtract_rectangle #f)
(define (cairo_region_subtract_rectangle dst rectangle)
  (unless
    ~cairo_region_subtract_rectangle
    (set! ~cairo_region_subtract_rectangle
      (fh-link-proc
        "cairo_region_subtract_rectangle"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_region_subtract_rectangle dst rectangle))))
(export cairo_region_subtract_rectangle)

;; cairo_status_t cairo_region_intersect(cairo_region_t *dst, const 
;;     cairo_region_t *other);
(define ~cairo_region_intersect #f)
(define (cairo_region_intersect dst other)
  (unless
    ~cairo_region_intersect
    (set! ~cairo_region_intersect
      (fh-link-proc
        "cairo_region_intersect"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_region_intersect dst other))))
(export cairo_region_intersect)

;; cairo_status_t cairo_region_intersect_rectangle(cairo_region_t *dst, const 
;;     cairo_rectangle_int_t *rectangle);
(define ~cairo_region_intersect_rectangle #f)
(define (cairo_region_intersect_rectangle dst rectangle)
  (unless
    ~cairo_region_intersect_rectangle
    (set! ~cairo_region_intersect_rectangle
      (fh-link-proc
        "cairo_region_intersect_rectangle"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_region_intersect_rectangle dst rectangle))))
(export cairo_region_intersect_rectangle)

;; cairo_status_t cairo_region_union(cairo_region_t *dst, const cairo_region_t 
;;     *other);
(define ~cairo_region_union #f)
(define (cairo_region_union dst other)
  (unless
    ~cairo_region_union
    (set! ~cairo_region_union
      (fh-link-proc
        "cairo_region_union"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_region_union dst other))))
(export cairo_region_union)

;; cairo_status_t cairo_region_union_rectangle(cairo_region_t *dst, const 
;;     cairo_rectangle_int_t *rectangle);
(define ~cairo_region_union_rectangle #f)
(define (cairo_region_union_rectangle dst rectangle)
  (unless
    ~cairo_region_union_rectangle
    (set! ~cairo_region_union_rectangle
      (fh-link-proc
        "cairo_region_union_rectangle"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_region_union_rectangle dst rectangle))))
(export cairo_region_union_rectangle)

;; cairo_status_t cairo_region_xor(cairo_region_t *dst, const cairo_region_t *
;;     other);
(define ~cairo_region_xor #f)
(define (cairo_region_xor dst other)
  (unless
    ~cairo_region_xor
    (set! ~cairo_region_xor
      (fh-link-proc
        "cairo_region_xor"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_region_xor dst other))))
(export cairo_region_xor)

;; cairo_status_t cairo_region_xor_rectangle(cairo_region_t *dst, const 
;;     cairo_rectangle_int_t *rectangle);
(define ~cairo_region_xor_rectangle #f)
(define (cairo_region_xor_rectangle dst rectangle)
  (unless
    ~cairo_region_xor_rectangle
    (set! ~cairo_region_xor_rectangle
      (fh-link-proc
        "cairo_region_xor_rectangle"
        ffi:int
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ()
    (wrap-cairo_status_t
      (~cairo_region_xor_rectangle dst rectangle))))
(export cairo_region_xor_rectangle)

;; void cairo_debug_reset_static_data(void);
(define ~cairo_debug_reset_static_data #f)
(define (cairo_debug_reset_static_data)
  (unless
    ~cairo_debug_reset_static_data
    (set! ~cairo_debug_reset_static_data
      (fh-link-proc
        "cairo_debug_reset_static_data"
        ffi:void
        (list)
        link-lib)))
  (let () (~cairo_debug_reset_static_data)))
(export cairo_debug_reset_static_data)

;; typedef enum _cairo_pdf_version {
;;   CAIRO_PDF_VERSION_1_4,
;;   CAIRO_PDF_VERSION_1_5,
;; } cairo_pdf_version_t;
(define cairo_pdf_version_t-enum-nvl
  '((CAIRO_PDF_VERSION_1_4 . 0)
    (CAIRO_PDF_VERSION_1_5 . 1))
  )
(define cairo_pdf_version_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_pdf_version_t-enum-nvl))
(define-public (unwrap-cairo_pdf_version_t n)
  (assq-ref cairo_pdf_version_t-enum-nvl n))
(define-public (wrap-cairo_pdf_version_t v)
  (assq-ref cairo_pdf_version_t-enum-vnl v))
(define-public unwrap-enum-_cairo_pdf_version unwrap-cairo_pdf_version_t)
(define-public wrap-enum-_cairo_pdf_version wrap-cairo_pdf_version_t)

;; cairo_surface_t *cairo_pdf_surface_create(const char *filename, double 
;;     width_in_points, double height_in_points);
(define ~cairo_pdf_surface_create #f)
(define (cairo_pdf_surface_create
         filename
         width_in_points
         height_in_points)
  (unless
    ~cairo_pdf_surface_create
    (set! ~cairo_pdf_surface_create
      (fh-link-proc
        "cairo_pdf_surface_create"
        ffi-void*
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~filename (unwrap~pointer filename))
        (~width_in_points (unwrap~float width_in_points))
        (~height_in_points
          (unwrap~float height_in_points)))
    (~cairo_pdf_surface_create
      ~filename
      ~width_in_points
      ~height_in_points)))
(export cairo_pdf_surface_create)

;; cairo_surface_t *cairo_pdf_surface_create_for_stream(cairo_write_func_t 
;;     write_func, void *closure, double width_in_points, double 
;;     height_in_points);
(define ~cairo_pdf_surface_create_for_stream #f)
(define (cairo_pdf_surface_create_for_stream
         write_func
         closure
         width_in_points
         height_in_points)
  (unless
    ~cairo_pdf_surface_create_for_stream
    (set! ~cairo_pdf_surface_create_for_stream
      (fh-link-proc
        "cairo_pdf_surface_create_for_stream"
        ffi-void*
        (list ffi-void* ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~write_func
          ((make-fctn-param-unwrapper
             ffi:int
             (list ffi-void* ffi-void* ffi:unsigned-int))
           write_func))
        (~closure (unwrap~pointer closure))
        (~width_in_points (unwrap~float width_in_points))
        (~height_in_points
          (unwrap~float height_in_points)))
    (~cairo_pdf_surface_create_for_stream
      ~write_func
      ~closure
      ~width_in_points
      ~height_in_points)))
(export cairo_pdf_surface_create_for_stream)

;; void cairo_pdf_surface_restrict_to_version(cairo_surface_t *surface, 
;;     cairo_pdf_version_t version);
(define ~cairo_pdf_surface_restrict_to_version #f)
(define (cairo_pdf_surface_restrict_to_version
         surface
         version)
  (unless
    ~cairo_pdf_surface_restrict_to_version
    (set! ~cairo_pdf_surface_restrict_to_version
      (fh-link-proc
        "cairo_pdf_surface_restrict_to_version"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~version (unwrap-cairo_pdf_version_t version)))
    (~cairo_pdf_surface_restrict_to_version
      surface
      ~version)))
(export cairo_pdf_surface_restrict_to_version)

;; void cairo_pdf_get_versions(cairo_pdf_version_t const **versions, int *
;;     num_versions);
(define ~cairo_pdf_get_versions #f)
(define (cairo_pdf_get_versions versions num_versions)
  (unless
    ~cairo_pdf_get_versions
    (set! ~cairo_pdf_get_versions
      (fh-link-proc
        "cairo_pdf_get_versions"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~versions (unwrap~pointer versions))
        (~num_versions (unwrap~pointer num_versions)))
    (~cairo_pdf_get_versions ~versions ~num_versions)))
(export cairo_pdf_get_versions)

;; const char *cairo_pdf_version_to_string(cairo_pdf_version_t version);
(define ~cairo_pdf_version_to_string #f)
(define (cairo_pdf_version_to_string version)
  (unless
    ~cairo_pdf_version_to_string
    (set! ~cairo_pdf_version_to_string
      (fh-link-proc
        "cairo_pdf_version_to_string"
        ffi-void*
        (list ffi:int)
        link-lib)))
  (let ((~version (unwrap-cairo_pdf_version_t version)))
    (~cairo_pdf_version_to_string ~version)))
(export cairo_pdf_version_to_string)

;; void cairo_pdf_surface_set_size(cairo_surface_t *surface, double 
;;     width_in_points, double height_in_points);
(define ~cairo_pdf_surface_set_size #f)
(define (cairo_pdf_surface_set_size
         surface
         width_in_points
         height_in_points)
  (unless
    ~cairo_pdf_surface_set_size
    (set! ~cairo_pdf_surface_set_size
      (fh-link-proc
        "cairo_pdf_surface_set_size"
        ffi:void
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~width_in_points (unwrap~float width_in_points))
        (~height_in_points
          (unwrap~float height_in_points)))
    (~cairo_pdf_surface_set_size
      surface
      ~width_in_points
      ~height_in_points)))
(export cairo_pdf_surface_set_size)

;; typedef enum _cairo_svg_version {
;;   CAIRO_SVG_VERSION_1_1,
;;   CAIRO_SVG_VERSION_1_2,
;; } cairo_svg_version_t;
(define cairo_svg_version_t-enum-nvl
  '((CAIRO_SVG_VERSION_1_1 . 0)
    (CAIRO_SVG_VERSION_1_2 . 1))
  )
(define cairo_svg_version_t-enum-vnl
  (map (lambda (pair) (cons (cdr pair) (car pair)))
       cairo_svg_version_t-enum-nvl))
(define-public (unwrap-cairo_svg_version_t n)
  (assq-ref cairo_svg_version_t-enum-nvl n))
(define-public (wrap-cairo_svg_version_t v)
  (assq-ref cairo_svg_version_t-enum-vnl v))
(define-public unwrap-enum-_cairo_svg_version unwrap-cairo_svg_version_t)
(define-public wrap-enum-_cairo_svg_version wrap-cairo_svg_version_t)

;; cairo_surface_t *cairo_svg_surface_create(const char *filename, double 
;;     width_in_points, double height_in_points);
(define ~cairo_svg_surface_create #f)
(define (cairo_svg_surface_create
         filename
         width_in_points
         height_in_points)
  (unless
    ~cairo_svg_surface_create
    (set! ~cairo_svg_surface_create
      (fh-link-proc
        "cairo_svg_surface_create"
        ffi-void*
        (list ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~filename (unwrap~pointer filename))
        (~width_in_points (unwrap~float width_in_points))
        (~height_in_points
          (unwrap~float height_in_points)))
    (~cairo_svg_surface_create
      ~filename
      ~width_in_points
      ~height_in_points)))
(export cairo_svg_surface_create)

;; cairo_surface_t *cairo_svg_surface_create_for_stream(cairo_write_func_t 
;;     write_func, void *closure, double width_in_points, double 
;;     height_in_points);
(define ~cairo_svg_surface_create_for_stream #f)
(define (cairo_svg_surface_create_for_stream
         write_func
         closure
         width_in_points
         height_in_points)
  (unless
    ~cairo_svg_surface_create_for_stream
    (set! ~cairo_svg_surface_create_for_stream
      (fh-link-proc
        "cairo_svg_surface_create_for_stream"
        ffi-void*
        (list ffi-void* ffi-void* ffi:double ffi:double)
        link-lib)))
  (let ((~write_func
          ((make-fctn-param-unwrapper
             ffi:int
             (list ffi-void* ffi-void* ffi:unsigned-int))
           write_func))
        (~closure (unwrap~pointer closure))
        (~width_in_points (unwrap~float width_in_points))
        (~height_in_points
          (unwrap~float height_in_points)))
    (~cairo_svg_surface_create_for_stream
      ~write_func
      ~closure
      ~width_in_points
      ~height_in_points)))
(export cairo_svg_surface_create_for_stream)

;; void cairo_svg_surface_restrict_to_version(cairo_surface_t *surface, 
;;     cairo_svg_version_t version);
(define ~cairo_svg_surface_restrict_to_version #f)
(define (cairo_svg_surface_restrict_to_version
         surface
         version)
  (unless
    ~cairo_svg_surface_restrict_to_version
    (set! ~cairo_svg_surface_restrict_to_version
      (fh-link-proc
        "cairo_svg_surface_restrict_to_version"
        ffi:void
        (list ffi-void* ffi:int)
        link-lib)))
  (let ((~version (unwrap-cairo_svg_version_t version)))
    (~cairo_svg_surface_restrict_to_version
      surface
      ~version)))
(export cairo_svg_surface_restrict_to_version)

;; void cairo_svg_get_versions(cairo_svg_version_t const **versions, int *
;;     num_versions);
(define ~cairo_svg_get_versions #f)
(define (cairo_svg_get_versions versions num_versions)
  (unless
    ~cairo_svg_get_versions
    (set! ~cairo_svg_get_versions
      (fh-link-proc
        "cairo_svg_get_versions"
        ffi:void
        (list ffi-void* ffi-void*)
        link-lib)))
  (let ((~versions (unwrap~pointer versions))
        (~num_versions (unwrap~pointer num_versions)))
    (~cairo_svg_get_versions ~versions ~num_versions)))
(export cairo_svg_get_versions)

;; const char *cairo_svg_version_to_string(cairo_svg_version_t version);
(define ~cairo_svg_version_to_string #f)
(define (cairo_svg_version_to_string version)
  (unless
    ~cairo_svg_version_to_string
    (set! ~cairo_svg_version_to_string
      (fh-link-proc
        "cairo_svg_version_to_string"
        ffi-void*
        (list ffi:int)
        link-lib)))
  (let ((~version (unwrap-cairo_svg_version_t version)))
    (~cairo_svg_version_to_string ~version)))
(export cairo_svg_version_to_string)

;; access to enum symbols and #define'd constants:
(define ffi-cairo-symbol-val
  (let ((sym-tab
          '((CAIRO_STATUS_SUCCESS . 0)
            (CAIRO_STATUS_NO_MEMORY . 1)
            (CAIRO_STATUS_INVALID_RESTORE . 2)
            (CAIRO_STATUS_INVALID_POP_GROUP . 3)
            (CAIRO_STATUS_NO_CURRENT_POINT . 4)
            (CAIRO_STATUS_INVALID_MATRIX . 5)
            (CAIRO_STATUS_INVALID_STATUS . 6)
            (CAIRO_STATUS_NULL_POINTER . 7)
            (CAIRO_STATUS_INVALID_STRING . 8)
            (CAIRO_STATUS_INVALID_PATH_DATA . 9)
            (CAIRO_STATUS_READ_ERROR . 10)
            (CAIRO_STATUS_WRITE_ERROR . 11)
            (CAIRO_STATUS_SURFACE_FINISHED . 12)
            (CAIRO_STATUS_SURFACE_TYPE_MISMATCH . 13)
            (CAIRO_STATUS_PATTERN_TYPE_MISMATCH . 14)
            (CAIRO_STATUS_INVALID_CONTENT . 15)
            (CAIRO_STATUS_INVALID_FORMAT . 16)
            (CAIRO_STATUS_INVALID_VISUAL . 17)
            (CAIRO_STATUS_FILE_NOT_FOUND . 18)
            (CAIRO_STATUS_INVALID_DASH . 19)
            (CAIRO_STATUS_INVALID_DSC_COMMENT . 20)
            (CAIRO_STATUS_INVALID_INDEX . 21)
            (CAIRO_STATUS_CLIP_NOT_REPRESENTABLE . 22)
            (CAIRO_STATUS_TEMP_FILE_ERROR . 23)
            (CAIRO_STATUS_INVALID_STRIDE . 24)
            (CAIRO_STATUS_FONT_TYPE_MISMATCH . 25)
            (CAIRO_STATUS_USER_FONT_IMMUTABLE . 26)
            (CAIRO_STATUS_USER_FONT_ERROR . 27)
            (CAIRO_STATUS_NEGATIVE_COUNT . 28)
            (CAIRO_STATUS_INVALID_CLUSTERS . 29)
            (CAIRO_STATUS_INVALID_SLANT . 30)
            (CAIRO_STATUS_INVALID_WEIGHT . 31)
            (CAIRO_STATUS_INVALID_SIZE . 32)
            (CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED . 33)
            (CAIRO_STATUS_DEVICE_TYPE_MISMATCH . 34)
            (CAIRO_STATUS_DEVICE_ERROR . 35)
            (CAIRO_STATUS_INVALID_MESH_CONSTRUCTION . 36)
            (CAIRO_STATUS_DEVICE_FINISHED . 37)
            (CAIRO_STATUS_JBIG2_GLOBAL_MISSING . 38)
            (CAIRO_STATUS_LAST_STATUS . 39)
            (CAIRO_CONTENT_COLOR . 4096)
            (CAIRO_CONTENT_ALPHA . 8192)
            (CAIRO_CONTENT_COLOR_ALPHA . 12288)
            (CAIRO_FORMAT_INVALID . -1)
            (CAIRO_FORMAT_ARGB32 . 0)
            (CAIRO_FORMAT_RGB24 . 1)
            (CAIRO_FORMAT_A8 . 2)
            (CAIRO_FORMAT_A1 . 3)
            (CAIRO_FORMAT_RGB16_565 . 4)
            (CAIRO_FORMAT_RGB30 . 5)
            (CAIRO_OPERATOR_CLEAR . 0)
            (CAIRO_OPERATOR_SOURCE . 1)
            (CAIRO_OPERATOR_OVER . 2)
            (CAIRO_OPERATOR_IN . 3)
            (CAIRO_OPERATOR_OUT . 4)
            (CAIRO_OPERATOR_ATOP . 5)
            (CAIRO_OPERATOR_DEST . 6)
            (CAIRO_OPERATOR_DEST_OVER . 7)
            (CAIRO_OPERATOR_DEST_IN . 8)
            (CAIRO_OPERATOR_DEST_OUT . 9)
            (CAIRO_OPERATOR_DEST_ATOP . 10)
            (CAIRO_OPERATOR_XOR . 11)
            (CAIRO_OPERATOR_ADD . 12)
            (CAIRO_OPERATOR_SATURATE . 13)
            (CAIRO_OPERATOR_MULTIPLY . 14)
            (CAIRO_OPERATOR_SCREEN . 15)
            (CAIRO_OPERATOR_OVERLAY . 16)
            (CAIRO_OPERATOR_DARKEN . 17)
            (CAIRO_OPERATOR_LIGHTEN . 18)
            (CAIRO_OPERATOR_COLOR_DODGE . 19)
            (CAIRO_OPERATOR_COLOR_BURN . 20)
            (CAIRO_OPERATOR_HARD_LIGHT . 21)
            (CAIRO_OPERATOR_SOFT_LIGHT . 22)
            (CAIRO_OPERATOR_DIFFERENCE . 23)
            (CAIRO_OPERATOR_EXCLUSION . 24)
            (CAIRO_OPERATOR_HSL_HUE . 25)
            (CAIRO_OPERATOR_HSL_SATURATION . 26)
            (CAIRO_OPERATOR_HSL_COLOR . 27)
            (CAIRO_OPERATOR_HSL_LUMINOSITY . 28)
            (CAIRO_ANTIALIAS_DEFAULT . 0)
            (CAIRO_ANTIALIAS_NONE . 1)
            (CAIRO_ANTIALIAS_GRAY . 2)
            (CAIRO_ANTIALIAS_SUBPIXEL . 3)
            (CAIRO_ANTIALIAS_FAST . 4)
            (CAIRO_ANTIALIAS_GOOD . 5)
            (CAIRO_ANTIALIAS_BEST . 6)
            (CAIRO_FILL_RULE_WINDING . 0)
            (CAIRO_FILL_RULE_EVEN_ODD . 1)
            (CAIRO_LINE_CAP_BUTT . 0)
            (CAIRO_LINE_CAP_ROUND . 1)
            (CAIRO_LINE_CAP_SQUARE . 2)
            (CAIRO_LINE_JOIN_MITER . 0)
            (CAIRO_LINE_JOIN_ROUND . 1)
            (CAIRO_LINE_JOIN_BEVEL . 2)
            (CAIRO_TEXT_CLUSTER_FLAG_BACKWARD . 1)
            (CAIRO_FONT_SLANT_NORMAL . 0)
            (CAIRO_FONT_SLANT_ITALIC . 1)
            (CAIRO_FONT_SLANT_OBLIQUE . 2)
            (CAIRO_FONT_WEIGHT_NORMAL . 0)
            (CAIRO_FONT_WEIGHT_BOLD . 1)
            (CAIRO_SUBPIXEL_ORDER_DEFAULT . 0)
            (CAIRO_SUBPIXEL_ORDER_RGB . 1)
            (CAIRO_SUBPIXEL_ORDER_BGR . 2)
            (CAIRO_SUBPIXEL_ORDER_VRGB . 3)
            (CAIRO_SUBPIXEL_ORDER_VBGR . 4)
            (CAIRO_HINT_STYLE_DEFAULT . 0)
            (CAIRO_HINT_STYLE_NONE . 1)
            (CAIRO_HINT_STYLE_SLIGHT . 2)
            (CAIRO_HINT_STYLE_MEDIUM . 3)
            (CAIRO_HINT_STYLE_FULL . 4)
            (CAIRO_HINT_METRICS_DEFAULT . 0)
            (CAIRO_HINT_METRICS_OFF . 1)
            (CAIRO_HINT_METRICS_ON . 2)
            (CAIRO_FONT_TYPE_TOY . 0)
            (CAIRO_FONT_TYPE_FT . 1)
            (CAIRO_FONT_TYPE_WIN32 . 2)
            (CAIRO_FONT_TYPE_QUARTZ . 3)
            (CAIRO_FONT_TYPE_USER . 4)
            (CAIRO_PATH_MOVE_TO . 0)
            (CAIRO_PATH_LINE_TO . 1)
            (CAIRO_PATH_CURVE_TO . 2)
            (CAIRO_PATH_CLOSE_PATH . 3)
            (CAIRO_DEVICE_TYPE_DRM . 0)
            (CAIRO_DEVICE_TYPE_GL . 1)
            (CAIRO_DEVICE_TYPE_SCRIPT . 2)
            (CAIRO_DEVICE_TYPE_XCB . 3)
            (CAIRO_DEVICE_TYPE_XLIB . 4)
            (CAIRO_DEVICE_TYPE_XML . 5)
            (CAIRO_DEVICE_TYPE_COGL . 6)
            (CAIRO_DEVICE_TYPE_WIN32 . 7)
            (CAIRO_DEVICE_TYPE_INVALID . -1)
            (CAIRO_SURFACE_OBSERVER_NORMAL . 0)
            (CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS . 1)
            (CAIRO_SURFACE_TYPE_IMAGE . 0)
            (CAIRO_SURFACE_TYPE_PDF . 1)
            (CAIRO_SURFACE_TYPE_PS . 2)
            (CAIRO_SURFACE_TYPE_XLIB . 3)
            (CAIRO_SURFACE_TYPE_XCB . 4)
            (CAIRO_SURFACE_TYPE_GLITZ . 5)
            (CAIRO_SURFACE_TYPE_QUARTZ . 6)
            (CAIRO_SURFACE_TYPE_WIN32 . 7)
            (CAIRO_SURFACE_TYPE_BEOS . 8)
            (CAIRO_SURFACE_TYPE_DIRECTFB . 9)
            (CAIRO_SURFACE_TYPE_SVG . 10)
            (CAIRO_SURFACE_TYPE_OS2 . 11)
            (CAIRO_SURFACE_TYPE_WIN32_PRINTING . 12)
            (CAIRO_SURFACE_TYPE_QUARTZ_IMAGE . 13)
            (CAIRO_SURFACE_TYPE_SCRIPT . 14)
            (CAIRO_SURFACE_TYPE_QT . 15)
            (CAIRO_SURFACE_TYPE_RECORDING . 16)
            (CAIRO_SURFACE_TYPE_VG . 17)
            (CAIRO_SURFACE_TYPE_GL . 18)
            (CAIRO_SURFACE_TYPE_DRM . 19)
            (CAIRO_SURFACE_TYPE_TEE . 20)
            (CAIRO_SURFACE_TYPE_XML . 21)
            (CAIRO_SURFACE_TYPE_SKIA . 22)
            (CAIRO_SURFACE_TYPE_SUBSURFACE . 23)
            (CAIRO_SURFACE_TYPE_COGL . 24)
            (CAIRO_PATTERN_TYPE_SOLID . 0)
            (CAIRO_PATTERN_TYPE_SURFACE . 1)
            (CAIRO_PATTERN_TYPE_LINEAR . 2)
            (CAIRO_PATTERN_TYPE_RADIAL . 3)
            (CAIRO_PATTERN_TYPE_MESH . 4)
            (CAIRO_PATTERN_TYPE_RASTER_SOURCE . 5)
            (CAIRO_EXTEND_NONE . 0)
            (CAIRO_EXTEND_REPEAT . 1)
            (CAIRO_EXTEND_REFLECT . 2)
            (CAIRO_EXTEND_PAD . 3)
            (CAIRO_FILTER_FAST . 0)
            (CAIRO_FILTER_GOOD . 1)
            (CAIRO_FILTER_BEST . 2)
            (CAIRO_FILTER_NEAREST . 3)
            (CAIRO_FILTER_BILINEAR . 4)
            (CAIRO_FILTER_GAUSSIAN . 5)
            (CAIRO_REGION_OVERLAP_IN . 0)
            (CAIRO_REGION_OVERLAP_OUT . 1)
            (CAIRO_REGION_OVERLAP_PART . 2)
            (CAIRO_PDF_VERSION_1_4 . 0)
            (CAIRO_PDF_VERSION_1_5 . 1)
            (CAIRO_SVG_VERSION_1_1 . 0)
            (CAIRO_SVG_VERSION_1_2 . 1)
            (CAIRO_VERSION_STRING . "1.14.10")
            (CAIRO_MIME_TYPE_JPEG . "image/jpeg")
            (CAIRO_MIME_TYPE_PNG . "image/png")
            (CAIRO_MIME_TYPE_JP2 . "image/jp2")
            (CAIRO_MIME_TYPE_URI . "text/x-uri")
            (CAIRO_MIME_TYPE_UNIQUE_ID
              .
              "application/x-cairo.uuid")
            (CAIRO_MIME_TYPE_JBIG2
              .
              "application/x-cairo.jbig2")
            (CAIRO_MIME_TYPE_JBIG2_GLOBAL
              .
              "application/x-cairo.jbig2-global")
            (CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID
              .
              "application/x-cairo.jbig2-global-id"))))
    (lambda (k) (assq-ref sym-tab k))))
(export ffi-cairo-symbol-val)

(define (unwrap-enum obj)
  (cond ((number? obj) obj)
        ((symbol? obj) (ffi-cairo-symbol-val obj))
        ((fh-object? obj) (struct-ref obj 0))
        (else (error "type mismatch"))))

(define ffi-cairo-types
  '((pointer . "cairo_bool_t") "cairo_t" "cairo_surface_t" "cairo_device_t" (
 struct . "_cairo_matrix") "cairo_matrix_t" "cairo_pattern_t" (pointer . 
 "cairo_destroy_func_t") (struct . "_cairo_user_data_key") 
 "cairo_user_data_key_t" (pointer . "cairo_write_func_t") (pointer . 
 "cairo_read_func_t") (struct . "_cairo_rectangle_int") 
 "cairo_rectangle_int_t" (struct . "_cairo_rectangle") "cairo_rectangle_t" (
 struct . "_cairo_rectangle_list") "cairo_rectangle_list_t" 
 "cairo_scaled_font_t" "cairo_font_face_t" "cairo_glyph_t" 
 "cairo_text_cluster_t" "cairo_text_extents_t" "cairo_font_extents_t" 
 "cairo_font_options_t" (pointer . "cairo_user_scaled_font_init_func_t") (
 pointer . "cairo_user_scaled_font_render_glyph_func_t") (pointer . 
 "cairo_user_scaled_font_text_to_glyphs_func_t") (pointer . 
 "cairo_user_scaled_font_unicode_to_glyph_func_t") (union . 
 "_cairo_path_data_t") "cairo_path_data_t" (struct . "cairo_path") 
 "cairo_path_t" (pointer . "cairo_surface_observer_callback_t") pointer (
 pointer . "cairo_raster_source_release_func_t") (pointer . 
 "cairo_raster_source_snapshot_func_t") (pointer . 
 "cairo_raster_source_copy_func_t") (pointer . 
 "cairo_raster_source_finish_func_t") "cairo_region_t"))
(export ffi-cairo-types)

;; TODO: add renamer

(define M_PI 3.141592653589793)

(define M_2PI 6.283185307179586)

(define (make-cairo-unit-matrix)
  (make-cairo_matrix_t #(1.0 0.0 0.0 1.0 0.0 0.0)))

;; --- last line ---
