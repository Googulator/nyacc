;; auto-generated by ffi-help.scm

(define-module (ffi sqlite3)
  #:use-module (system ffi-help-rt)
  #:use-module ((system foreign) #:prefix ffi:)
  #:use-module (bytestructures guile)
  )
(dynamic-link "libsqlite3")
(define void intptr_t)
(define echo-decls #f)

;; extern const char sqlite3_version[];
(define sqlite3_version
  (let* ((addr #f)
         (memoize-addr
           (lambda ()
             (unless
               addr
               (set! addr
                 (make-bytestructure
                   (ffi:pointer->bytevector
                     (dynamic-pointer
                       "sqlite3_version"
                       (dynamic-link))
                     (ffi:sizeof '*))
                   0
                   (bs:pointer (bs:pointer int))))))))
    (case-lambda
      (() (memoize-addr) (bytestructure-ref addr '*)))))
(export sqlite3_version)

;; const char *sqlite3_libversion(void);
(define ~sqlite3_libversion #f)
(define (sqlite3_libversion)
  (unless
    ~sqlite3_libversion
    (set! ~sqlite3_libversion
      (fh-link-proc "sqlite3_libversion" '* (list))))
  (let () (~sqlite3_libversion)))
(export sqlite3_libversion)

;; const char *sqlite3_sourceid(void);
(define ~sqlite3_sourceid #f)
(define (sqlite3_sourceid)
  (unless
    ~sqlite3_sourceid
    (set! ~sqlite3_sourceid
      (fh-link-proc "sqlite3_sourceid" '* (list))))
  (let () (~sqlite3_sourceid)))
(export sqlite3_sourceid)

;; int sqlite3_libversion_number(void);
(define ~sqlite3_libversion_number #f)
(define (sqlite3_libversion_number)
  (unless
    ~sqlite3_libversion_number
    (set! ~sqlite3_libversion_number
      (fh-link-proc
        "sqlite3_libversion_number"
        ffi:int
        (list))))
  (let () (~sqlite3_libversion_number)))
(export sqlite3_libversion_number)

;; int sqlite3_compileoption_used(const char *zOptName);
(define ~sqlite3_compileoption_used #f)
(define (sqlite3_compileoption_used zOptName)
  (unless
    ~sqlite3_compileoption_used
    (set! ~sqlite3_compileoption_used
      (fh-link-proc
        "sqlite3_compileoption_used"
        ffi:int
        (list '*))))
  (let ((~zOptName (unwrap~pointer zOptName)))
    (~sqlite3_compileoption_used ~zOptName)))
(export sqlite3_compileoption_used)

;; const char *sqlite3_compileoption_get(int N);
(define ~sqlite3_compileoption_get #f)
(define (sqlite3_compileoption_get N)
  (unless
    ~sqlite3_compileoption_get
    (set! ~sqlite3_compileoption_get
      (fh-link-proc
        "sqlite3_compileoption_get"
        '*
        (list ffi:int))))
  (let ((~N (unwrap~fixed N)))
    (~sqlite3_compileoption_get ~N)))
(export sqlite3_compileoption_get)

;; int sqlite3_threadsafe(void);
(define ~sqlite3_threadsafe #f)
(define (sqlite3_threadsafe)
  (unless
    ~sqlite3_threadsafe
    (set! ~sqlite3_threadsafe
      (fh-link-proc
        "sqlite3_threadsafe"
        ffi:int
        (list))))
  (let () (~sqlite3_threadsafe)))
(export sqlite3_threadsafe)

;; typedef struct sqlite3 sqlite3;
(define sqlite3-desc void)
(export sqlite3-desc)
(define sqlite3*-desc (bs:pointer sqlite3-desc))
(export sqlite3*-desc)
(define-fh-pointer-type sqlite3* sqlite3*-desc)

;; typedef long long int sqlite_int64;
(define sqlite_int64-desc long)
(export sqlite_int64-desc)
(define unwrap-sqlite_int64 unwrap~fixed)
(define wrap-sqlite_int64 identity)
(export sqlite_int64-desc unwrap-sqlite_int64 wrap-sqlite_int64)

;; typedef unsigned long long int sqlite_uint64;
(define sqlite_uint64-desc unsigned-long)
(export sqlite_uint64-desc)
(define unwrap-sqlite_uint64 unwrap~fixed)
(define wrap-sqlite_uint64 identity)
(export sqlite_uint64-desc unwrap-sqlite_uint64 wrap-sqlite_uint64)

;; typedef sqlite_int64 sqlite3_int64;
(define unwrap-sqlite3_int64 unwrap-sqlite_int64)
(define wrap-sqlite3_int64 wrap-sqlite_int64)

;; typedef sqlite_uint64 sqlite3_uint64;
(define unwrap-sqlite3_uint64 unwrap-sqlite_uint64)
(define wrap-sqlite3_uint64 wrap-sqlite_uint64)

;; int sqlite3_close(sqlite3 *);
(define ~sqlite3_close #f)
(define (sqlite3_close @17429)
  (unless
    ~sqlite3_close
    (set! ~sqlite3_close
      (fh-link-proc "sqlite3_close" ffi:int (list '*))))
  (let ((~@17429 (unwrap-sqlite3* @17429)))
    (~sqlite3_close ~@17429)))
(export sqlite3_close)

;; int sqlite3_close_v2(sqlite3 *);
(define ~sqlite3_close_v2 #f)
(define (sqlite3_close_v2 @17430)
  (unless
    ~sqlite3_close_v2
    (set! ~sqlite3_close_v2
      (fh-link-proc
        "sqlite3_close_v2"
        ffi:int
        (list '*))))
  (let ((~@17430 (unwrap-sqlite3* @17430)))
    (~sqlite3_close_v2 ~@17430)))
(export sqlite3_close_v2)

;; typedef int (*sqlite3_callback)(void *, int, char **, char **);
(define-fh-function/p sqlite3_callback
  ffi:int (list (quote *) ffi:int (quote *) (quote *)))

;; int sqlite3_exec(sqlite3 *, const char *sql, int (*callback)(void *, int, 
;;     char **, char **), void *, char **errmsg);
(define ~sqlite3_exec #f)
(define (sqlite3_exec @17432 sql callback @17431 errmsg)
  (unless
    ~sqlite3_exec
    (set! ~sqlite3_exec
      (fh-link-proc
        "sqlite3_exec"
        ffi:int
        (list '* '* '* '* '*))))
  (let ((~@17432 (unwrap-sqlite3* @17432))
        (~sql (unwrap~pointer sql))
        (~callback
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* ffi:int '* '*))
           callback))
        (~@17431 (unwrap~pointer @17431))
        (~errmsg (unwrap~pointer errmsg)))
    (~sqlite3_exec
      ~@17432
      ~sql
      ~callback
      ~@17431
      ~errmsg)))
(export sqlite3_exec)

;; typedef struct sqlite3_file sqlite3_file;
(define sqlite3_file-desc void)
(export sqlite3_file-desc)
(define sqlite3_file*-desc (bs:pointer (delay sqlite3_file-desc)))
(export sqlite3_file*-desc)
(define-fh-pointer-type sqlite3_file* sqlite3_file*-desc)

;; struct sqlite3_file {
;;   const struct sqlite3_io_methods *pMethods; /* Methods for an open file */
;; };
(define struct-sqlite3_file-desc
  (bs:struct (list `(pMethods ,(bs:pointer void)))))
(export struct-sqlite3_file-desc)
(define-fh-compound-type/p struct-sqlite3_file struct-sqlite3_file-desc)
(set! sqlite3_file-desc struct-sqlite3_file-desc)
(define-fh-compound-type sqlite3_file sqlite3_file-desc)

;; typedef struct sqlite3_io_methods sqlite3_io_methods;
(define sqlite3_io_methods-desc void)
(export sqlite3_io_methods-desc)
(define sqlite3_io_methods*-desc (bs:pointer (delay sqlite3_io_methods-desc)))
(export sqlite3_io_methods*-desc)
(define-fh-pointer-type sqlite3_io_methods* sqlite3_io_methods*-desc)

;; struct sqlite3_io_methods {
;;   int iVersion;
;;   int (*xClose)(sqlite3_file *);
;;   int (*xRead)(sqlite3_file *, void *, int iAmt, sqlite3_int64 iOfst);
;;   int (*xWrite)(sqlite3_file *, const void *, int iAmt, sqlite3_int64 iOfst)
;;       ;
;;   int (*xTruncate)(sqlite3_file *, sqlite3_int64 size);
;;   int (*xSync)(sqlite3_file *, int flags);
;;   int (*xFileSize)(sqlite3_file *, sqlite3_int64 *pSize);
;;   int (*xLock)(sqlite3_file *, int);
;;   int (*xUnlock)(sqlite3_file *, int);
;;   int (*xCheckReservedLock)(sqlite3_file *, int *pResOut);
;;   int (*xFileControl)(sqlite3_file *, int op, void *pArg);
;;   int (*xSectorSize)(sqlite3_file *);
;;   int (*xDeviceCharacteristics)(sqlite3_file *);
;;   /* Methods above are valid for version 1 */
;;   int (*xShmMap)(sqlite3_file *, int iPg, int pgsz, int, void volatile **);
;;   int (*xShmLock)(sqlite3_file *, int offset, int n, int flags);
;;   void (*xShmBarrier)(sqlite3_file *);
;;   int (*xShmUnmap)(sqlite3_file *, int deleteFlag);
;;   /* Methods above are valid for version 2 */
;;   int (*xFetch)(sqlite3_file *, sqlite3_int64 iOfst, int iAmt, void **pp);
;;   int (*xUnfetch)(sqlite3_file *, sqlite3_int64 iOfst, void *p);
;;   /* Methods above are valid for version 3 */
;;   /* Additional methods may be added in future releases */
;; };
(define struct-sqlite3_io_methods-desc
  (bs:struct
    (list `(iVersion ,int)
          `(xClose ,(bs:pointer void))
          `(xRead ,(bs:pointer void))
          `(xWrite ,(bs:pointer void))
          `(xTruncate ,(bs:pointer void))
          `(xSync ,(bs:pointer void))
          `(xFileSize ,(bs:pointer void))
          `(xLock ,(bs:pointer void))
          `(xUnlock ,(bs:pointer void))
          `(xCheckReservedLock ,(bs:pointer void))
          `(xFileControl ,(bs:pointer void))
          `(xSectorSize ,(bs:pointer void))
          `(xDeviceCharacteristics ,(bs:pointer void))
          `(xShmMap ,(bs:pointer void))
          `(xShmLock ,(bs:pointer void))
          `(xShmBarrier ,(bs:pointer void))
          `(xShmUnmap ,(bs:pointer void))
          `(xFetch ,(bs:pointer void))
          `(xUnfetch ,(bs:pointer void)))))
(export struct-sqlite3_io_methods-desc)
(define-fh-compound-type/p struct-sqlite3_io_methods struct-sqlite3_io_methods-desc)
(set! sqlite3_io_methods-desc struct-sqlite3_io_methods-desc)
(define-fh-compound-type sqlite3_io_methods sqlite3_io_methods-desc)

;; typedef struct sqlite3_mutex sqlite3_mutex;
(define sqlite3_mutex-desc void)
(export sqlite3_mutex-desc)
(define sqlite3_mutex*-desc (bs:pointer sqlite3_mutex-desc))
(export sqlite3_mutex*-desc)
(define-fh-pointer-type sqlite3_mutex* sqlite3_mutex*-desc)

;; typedef struct sqlite3_api_routines sqlite3_api_routines;
(define sqlite3_api_routines-desc void)
(export sqlite3_api_routines-desc)
(define sqlite3_api_routines*-desc (bs:pointer sqlite3_api_routines-desc))
(export sqlite3_api_routines*-desc)
(define-fh-pointer-type sqlite3_api_routines* sqlite3_api_routines*-desc)

;; typedef struct sqlite3_vfs sqlite3_vfs;
(define sqlite3_vfs-desc void)
(export sqlite3_vfs-desc)
(define sqlite3_vfs*-desc (bs:pointer (delay sqlite3_vfs-desc)))
(export sqlite3_vfs*-desc)
(define-fh-pointer-type sqlite3_vfs* sqlite3_vfs*-desc)

;; typedef void (*sqlite3_syscall_ptr)(void);
(define-fh-function/p sqlite3_syscall_ptr
  ffi:void (list ffi:void))

;; struct sqlite3_vfs {
;;   int iVersion; /* Structure version number (currently 3) */
;;   int szOsFile; /* Size of subclassed sqlite3_file */
;;   int mxPathname; /* Maximum file pathname length */
;;   sqlite3_vfs *pNext; /* Next registered VFS */
;;   const char *zName; /* Name of this virtual file system */
;;   void *pAppData; /* Pointer to application-specific data */
;;   int (*xOpen)(sqlite3_vfs *, const char *zName, sqlite3_file *, int flags, 
;;       int *pOutFlags);
;;   int (*xDelete)(sqlite3_vfs *, const char *zName, int syncDir);
;;   int (*xAccess)(sqlite3_vfs *, const char *zName, int flags, int *pResOut)
;;       ;
;;   int (*xFullPathname)(sqlite3_vfs *, const char *zName, int nOut, char *
;;       zOut);
;;   void *(*xDlOpen)(sqlite3_vfs *, const char *zFilename);
;;   void (*xDlError)(sqlite3_vfs *, int nByte, char *zErrMsg);
;;   void (*(*xDlSym)(sqlite3_vfs *, void *, const char *zSymbol))(void);
;;   void (*xDlClose)(sqlite3_vfs *, void *);
;;   int (*xRandomness)(sqlite3_vfs *, int nByte, char *zOut);
;;   int (*xSleep)(sqlite3_vfs *, int microseconds);
;;   int (*xCurrentTime)(sqlite3_vfs *, double *);
;;   int (*xGetLastError)(sqlite3_vfs *, int, char *);
;;   /*
;;   ** The methods above are in version 1 of the sqlite_vfs object
;;   ** definition.  Those that follow are added in version 2 or later
;;   */
;;   int (*xCurrentTimeInt64)(sqlite3_vfs *, sqlite3_int64 *);
;;   /*
;;   ** The methods above are in versions 1 and 2 of the sqlite_vfs object.
;;   ** Those below are for version 3 and greater.
;;   */
;;   int (*xSetSystemCall)(sqlite3_vfs *, const char *zName, 
;;       sqlite3_syscall_ptr);
;;   sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs *, const char *zName);
;;   const char *(*xNextSystemCall)(sqlite3_vfs *, const char *zName);
;;   /*
;;   ** The methods above are in versions 1 through 3 of the sqlite_vfs object.
;;       
;;   ** New fields may be appended in future versions.  The iVersion
;;   ** value will increment whenever this happens. 
;;   */
;; };
(define struct-sqlite3_vfs-desc
  (bs:struct
    (list `(iVersion ,int)
          `(szOsFile ,int)
          `(mxPathname ,int)
          `(pNext ,(bs:pointer (delay sqlite3_vfs*-desc)))
          `(zName ,(bs:pointer int))
          `(pAppData ,(bs:pointer void))
          `(xOpen ,(bs:pointer void))
          `(xDelete ,(bs:pointer void))
          `(xAccess ,(bs:pointer void))
          `(xFullPathname ,(bs:pointer void))
          `(xDlOpen ,(bs:pointer void))
          `(xDlError ,(bs:pointer void))
          `(xDlSym ,(bs:pointer void))
          `(xDlClose ,(bs:pointer void))
          `(xRandomness ,(bs:pointer void))
          `(xSleep ,(bs:pointer void))
          `(xCurrentTime ,(bs:pointer void))
          `(xGetLastError ,(bs:pointer void))
          `(xCurrentTimeInt64 ,(bs:pointer void))
          `(xSetSystemCall ,(bs:pointer void))
          `(xGetSystemCall ,(bs:pointer void))
          `(xNextSystemCall ,(bs:pointer void)))))
(export struct-sqlite3_vfs-desc)
(define-fh-compound-type/p struct-sqlite3_vfs struct-sqlite3_vfs-desc)
(set! sqlite3_vfs-desc struct-sqlite3_vfs-desc)
(define-fh-compound-type sqlite3_vfs sqlite3_vfs-desc)

;; int sqlite3_initialize(void);
(define ~sqlite3_initialize #f)
(define (sqlite3_initialize)
  (unless
    ~sqlite3_initialize
    (set! ~sqlite3_initialize
      (fh-link-proc
        "sqlite3_initialize"
        ffi:int
        (list))))
  (let () (~sqlite3_initialize)))
(export sqlite3_initialize)

;; int sqlite3_shutdown(void);
(define ~sqlite3_shutdown #f)
(define (sqlite3_shutdown)
  (unless
    ~sqlite3_shutdown
    (set! ~sqlite3_shutdown
      (fh-link-proc "sqlite3_shutdown" ffi:int (list))))
  (let () (~sqlite3_shutdown)))
(export sqlite3_shutdown)

;; int sqlite3_os_init(void);
(define ~sqlite3_os_init #f)
(define (sqlite3_os_init)
  (unless
    ~sqlite3_os_init
    (set! ~sqlite3_os_init
      (fh-link-proc "sqlite3_os_init" ffi:int (list))))
  (let () (~sqlite3_os_init)))
(export sqlite3_os_init)

;; int sqlite3_os_end(void);
(define ~sqlite3_os_end #f)
(define (sqlite3_os_end)
  (unless
    ~sqlite3_os_end
    (set! ~sqlite3_os_end
      (fh-link-proc "sqlite3_os_end" ffi:int (list))))
  (let () (~sqlite3_os_end)))
(export sqlite3_os_end)

;; int sqlite3_config(int, ...);
;; ... failed.

;; int sqlite3_db_config(sqlite3 *, int op, ...);
;; ... failed.

;; typedef struct sqlite3_mem_methods sqlite3_mem_methods;
(define sqlite3_mem_methods-desc void)
(export sqlite3_mem_methods-desc)
(define sqlite3_mem_methods*-desc (bs:pointer (delay sqlite3_mem_methods-desc)))
(export sqlite3_mem_methods*-desc)
(define-fh-pointer-type sqlite3_mem_methods* sqlite3_mem_methods*-desc)

;; struct sqlite3_mem_methods {
;;   void *(*xMalloc)(int); /* Memory allocation function */
;;   void (*xFree)(void *); /* Free a prior allocation */
;;   void *(*xRealloc)(void *, int); /* Resize an allocation */
;;   int (*xSize)(void *); /* Return the size of an allocation */
;;   int (*xRoundup)(int); /* Round up request size to allocation size */
;;   int (*xInit)(void *); /* Initialize the memory allocator */
;;   void (*xShutdown)(void *); /* Deinitialize the memory allocator */
;;   void *pAppData; /* Argument to xInit() and xShutdown() */
;; };
(define struct-sqlite3_mem_methods-desc
  (bs:struct
    (list `(xMalloc ,(bs:pointer void))
          `(xFree ,(bs:pointer void))
          `(xRealloc ,(bs:pointer void))
          `(xSize ,(bs:pointer void))
          `(xRoundup ,(bs:pointer void))
          `(xInit ,(bs:pointer void))
          `(xShutdown ,(bs:pointer void))
          `(pAppData ,(bs:pointer void)))))
(export struct-sqlite3_mem_methods-desc)
(define-fh-compound-type/p struct-sqlite3_mem_methods struct-sqlite3_mem_methods-desc)
(set! sqlite3_mem_methods-desc struct-sqlite3_mem_methods-desc)
(define-fh-compound-type sqlite3_mem_methods sqlite3_mem_methods-desc)

;; int sqlite3_extended_result_codes(sqlite3 *, int onoff);
(define ~sqlite3_extended_result_codes #f)
(define (sqlite3_extended_result_codes @17434 onoff)
  (unless
    ~sqlite3_extended_result_codes
    (set! ~sqlite3_extended_result_codes
      (fh-link-proc
        "sqlite3_extended_result_codes"
        ffi:int
        (list '* ffi:int))))
  (let ((~@17434 (unwrap-sqlite3* @17434))
        (~onoff (unwrap~fixed onoff)))
    (~sqlite3_extended_result_codes ~@17434 ~onoff)))
(export sqlite3_extended_result_codes)

;; sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *);
(define ~sqlite3_last_insert_rowid #f)
(define (sqlite3_last_insert_rowid @17435)
  (unless
    ~sqlite3_last_insert_rowid
    (set! ~sqlite3_last_insert_rowid
      (fh-link-proc
        "sqlite3_last_insert_rowid"
        ffi:long
        (list '*))))
  (let ((~@17435 (unwrap-sqlite3* @17435)))
    (~sqlite3_last_insert_rowid ~@17435)))
(export sqlite3_last_insert_rowid)

;; void sqlite3_set_last_insert_rowid(sqlite3 *, sqlite3_int64);
(define ~sqlite3_set_last_insert_rowid #f)
(define (sqlite3_set_last_insert_rowid @17436 arg-1)
  (unless
    ~sqlite3_set_last_insert_rowid
    (set! ~sqlite3_set_last_insert_rowid
      (fh-link-proc
        "sqlite3_set_last_insert_rowid"
        ffi:void
        (list '* ffi:long))))
  (let ((~@17436 (unwrap-sqlite3* @17436))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_set_last_insert_rowid ~@17436 ~arg-1)))
(export sqlite3_set_last_insert_rowid)

;; int sqlite3_changes(sqlite3 *);
(define ~sqlite3_changes #f)
(define (sqlite3_changes @17437)
  (unless
    ~sqlite3_changes
    (set! ~sqlite3_changes
      (fh-link-proc
        "sqlite3_changes"
        ffi:int
        (list '*))))
  (let ((~@17437 (unwrap-sqlite3* @17437)))
    (~sqlite3_changes ~@17437)))
(export sqlite3_changes)

;; int sqlite3_total_changes(sqlite3 *);
(define ~sqlite3_total_changes #f)
(define (sqlite3_total_changes @17438)
  (unless
    ~sqlite3_total_changes
    (set! ~sqlite3_total_changes
      (fh-link-proc
        "sqlite3_total_changes"
        ffi:int
        (list '*))))
  (let ((~@17438 (unwrap-sqlite3* @17438)))
    (~sqlite3_total_changes ~@17438)))
(export sqlite3_total_changes)

;; void sqlite3_interrupt(sqlite3 *);
(define ~sqlite3_interrupt #f)
(define (sqlite3_interrupt @17439)
  (unless
    ~sqlite3_interrupt
    (set! ~sqlite3_interrupt
      (fh-link-proc
        "sqlite3_interrupt"
        ffi:void
        (list '*))))
  (let ((~@17439 (unwrap-sqlite3* @17439)))
    (~sqlite3_interrupt ~@17439)))
(export sqlite3_interrupt)

;; int sqlite3_complete(const char *sql);
(define ~sqlite3_complete #f)
(define (sqlite3_complete sql)
  (unless
    ~sqlite3_complete
    (set! ~sqlite3_complete
      (fh-link-proc
        "sqlite3_complete"
        ffi:int
        (list '*))))
  (let ((~sql (unwrap~pointer sql)))
    (~sqlite3_complete ~sql)))
(export sqlite3_complete)

;; int sqlite3_complete16(const void *sql);
(define ~sqlite3_complete16 #f)
(define (sqlite3_complete16 sql)
  (unless
    ~sqlite3_complete16
    (set! ~sqlite3_complete16
      (fh-link-proc
        "sqlite3_complete16"
        ffi:int
        (list '*))))
  (let ((~sql (unwrap~pointer sql)))
    (~sqlite3_complete16 ~sql)))
(export sqlite3_complete16)

;; int sqlite3_busy_handler(sqlite3 *, int (*)(void *, int), void *);
(define ~sqlite3_busy_handler #f)
(define (sqlite3_busy_handler @17442 @17441 @17440)
  (unless
    ~sqlite3_busy_handler
    (set! ~sqlite3_busy_handler
      (fh-link-proc
        "sqlite3_busy_handler"
        ffi:int
        (list '* '* '*))))
  (let ((~@17442 (unwrap-sqlite3* @17442))
        (~@17441
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* ffi:int))
           @17441))
        (~@17440 (unwrap~pointer @17440)))
    (~sqlite3_busy_handler ~@17442 ~@17441 ~@17440)))
(export sqlite3_busy_handler)

;; int sqlite3_busy_timeout(sqlite3 *, int ms);
(define ~sqlite3_busy_timeout #f)
(define (sqlite3_busy_timeout @17443 ms)
  (unless
    ~sqlite3_busy_timeout
    (set! ~sqlite3_busy_timeout
      (fh-link-proc
        "sqlite3_busy_timeout"
        ffi:int
        (list '* ffi:int))))
  (let ((~@17443 (unwrap-sqlite3* @17443))
        (~ms (unwrap~fixed ms)))
    (~sqlite3_busy_timeout ~@17443 ~ms)))
(export sqlite3_busy_timeout)

;; int sqlite3_get_table(sqlite3 *db, const char *zSql, char ***pazResult, int 
;;     *pnRow, int *pnColumn, char **pzErrmsg);
(define ~sqlite3_get_table #f)
(define (sqlite3_get_table
         db
         zSql
         pazResult
         pnRow
         pnColumn
         pzErrmsg)
  (unless
    ~sqlite3_get_table
    (set! ~sqlite3_get_table
      (fh-link-proc
        "sqlite3_get_table"
        ffi:int
        (list '* '* '* '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zSql (unwrap~pointer zSql))
        (~pazResult (unwrap~pointer pazResult))
        (~pnRow (unwrap~pointer pnRow))
        (~pnColumn (unwrap~pointer pnColumn))
        (~pzErrmsg (unwrap~pointer pzErrmsg)))
    (~sqlite3_get_table
      ~db
      ~zSql
      ~pazResult
      ~pnRow
      ~pnColumn
      ~pzErrmsg)))
(export sqlite3_get_table)

;; void sqlite3_free_table(char **result);
(define ~sqlite3_free_table #f)
(define (sqlite3_free_table result)
  (unless
    ~sqlite3_free_table
    (set! ~sqlite3_free_table
      (fh-link-proc
        "sqlite3_free_table"
        ffi:void
        (list '*))))
  (let ((~result (unwrap~pointer result)))
    (~sqlite3_free_table ~result)))
(export sqlite3_free_table)

;; char *sqlite3_mprintf(const char *, ...);
;; ... failed.

;; char *sqlite3_vmprintf(const char *, va_list);
(define ~sqlite3_vmprintf #f)
(define (sqlite3_vmprintf @17444 arg-1)
  (unless
    ~sqlite3_vmprintf
    (set! ~sqlite3_vmprintf
      (fh-link-proc "sqlite3_vmprintf" '* (list '* '*))))
  (let ((~@17444 (unwrap~pointer @17444))
        (~arg-1 (unwrap~pointer arg-1)))
    (~sqlite3_vmprintf ~@17444 ~arg-1)))
(export sqlite3_vmprintf)

;; char *sqlite3_snprintf(int, char *, const char *, ...);
;; ... failed.

;; char *sqlite3_vsnprintf(int, char *, const char *, va_list);
(define ~sqlite3_vsnprintf #f)
(define (sqlite3_vsnprintf arg-0 @17446 @17445 arg-3)
  (unless
    ~sqlite3_vsnprintf
    (set! ~sqlite3_vsnprintf
      (fh-link-proc
        "sqlite3_vsnprintf"
        '*
        (list ffi:int '* '* '*))))
  (let ((~arg-0 (unwrap~fixed arg-0))
        (~@17446 (unwrap~pointer @17446))
        (~@17445 (unwrap~pointer @17445))
        (~arg-3 (unwrap~pointer arg-3)))
    (~sqlite3_vsnprintf
      ~arg-0
      ~@17446
      ~@17445
      ~arg-3)))
(export sqlite3_vsnprintf)

;; void *sqlite3_malloc(int);
(define ~sqlite3_malloc #f)
(define (sqlite3_malloc arg-0)
  (unless
    ~sqlite3_malloc
    (set! ~sqlite3_malloc
      (fh-link-proc "sqlite3_malloc" '* (list ffi:int))))
  (let ((~arg-0 (unwrap~fixed arg-0)))
    (~sqlite3_malloc ~arg-0)))
(export sqlite3_malloc)

;; void *sqlite3_malloc64(sqlite3_uint64);
(define ~sqlite3_malloc64 #f)
(define (sqlite3_malloc64 arg-0)
  (unless
    ~sqlite3_malloc64
    (set! ~sqlite3_malloc64
      (fh-link-proc
        "sqlite3_malloc64"
        '*
        (list ffi:unsigned-long))))
  (let ((~arg-0 (unwrap~fixed arg-0)))
    (~sqlite3_malloc64 ~arg-0)))
(export sqlite3_malloc64)

;; void *sqlite3_realloc(void *, int);
(define ~sqlite3_realloc #f)
(define (sqlite3_realloc @17447 arg-1)
  (unless
    ~sqlite3_realloc
    (set! ~sqlite3_realloc
      (fh-link-proc
        "sqlite3_realloc"
        '*
        (list '* ffi:int))))
  (let ((~@17447 (unwrap~pointer @17447))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_realloc ~@17447 ~arg-1)))
(export sqlite3_realloc)

;; void *sqlite3_realloc64(void *, sqlite3_uint64);
(define ~sqlite3_realloc64 #f)
(define (sqlite3_realloc64 @17448 arg-1)
  (unless
    ~sqlite3_realloc64
    (set! ~sqlite3_realloc64
      (fh-link-proc
        "sqlite3_realloc64"
        '*
        (list '* ffi:unsigned-long))))
  (let ((~@17448 (unwrap~pointer @17448))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_realloc64 ~@17448 ~arg-1)))
(export sqlite3_realloc64)

;; void sqlite3_free(void *);
(define ~sqlite3_free #f)
(define (sqlite3_free @17449)
  (unless
    ~sqlite3_free
    (set! ~sqlite3_free
      (fh-link-proc "sqlite3_free" ffi:void (list '*))))
  (let ((~@17449 (unwrap~pointer @17449)))
    (~sqlite3_free ~@17449)))
(export sqlite3_free)

;; sqlite3_uint64 sqlite3_msize(void *);
(define ~sqlite3_msize #f)
(define (sqlite3_msize @17450)
  (unless
    ~sqlite3_msize
    (set! ~sqlite3_msize
      (fh-link-proc
        "sqlite3_msize"
        ffi:unsigned-long
        (list '*))))
  (let ((~@17450 (unwrap~pointer @17450)))
    (~sqlite3_msize ~@17450)))
(export sqlite3_msize)

;; sqlite3_int64 sqlite3_memory_used(void);
(define ~sqlite3_memory_used #f)
(define (sqlite3_memory_used)
  (unless
    ~sqlite3_memory_used
    (set! ~sqlite3_memory_used
      (fh-link-proc
        "sqlite3_memory_used"
        ffi:long
        (list))))
  (let () (~sqlite3_memory_used)))
(export sqlite3_memory_used)

;; sqlite3_int64 sqlite3_memory_highwater(int resetFlag);
(define ~sqlite3_memory_highwater #f)
(define (sqlite3_memory_highwater resetFlag)
  (unless
    ~sqlite3_memory_highwater
    (set! ~sqlite3_memory_highwater
      (fh-link-proc
        "sqlite3_memory_highwater"
        ffi:long
        (list ffi:int))))
  (let ((~resetFlag (unwrap~fixed resetFlag)))
    (~sqlite3_memory_highwater ~resetFlag)))
(export sqlite3_memory_highwater)

;; void sqlite3_randomness(int N, void *P);
(define ~sqlite3_randomness #f)
(define (sqlite3_randomness N P)
  (unless
    ~sqlite3_randomness
    (set! ~sqlite3_randomness
      (fh-link-proc
        "sqlite3_randomness"
        ffi:void
        (list ffi:int '*))))
  (let ((~N (unwrap~fixed N)) (~P (unwrap~pointer P)))
    (~sqlite3_randomness ~N ~P)))
(export sqlite3_randomness)

;; int sqlite3_set_authorizer(sqlite3 *, int (*xAuth)(void *, int, const char *
;;     , const char *, const char *, const char *), void *pUserData);
(define ~sqlite3_set_authorizer #f)
(define (sqlite3_set_authorizer @17451 xAuth pUserData)
  (unless
    ~sqlite3_set_authorizer
    (set! ~sqlite3_set_authorizer
      (fh-link-proc
        "sqlite3_set_authorizer"
        ffi:int
        (list '* '* '*))))
  (let ((~@17451 (unwrap-sqlite3* @17451))
        (~xAuth
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* ffi:int '* '* '* '*))
           xAuth))
        (~pUserData (unwrap~pointer pUserData)))
    (~sqlite3_set_authorizer
      ~@17451
      ~xAuth
      ~pUserData)))
(export sqlite3_set_authorizer)

;; void *sqlite3_trace(sqlite3 *, void (*xTrace)(void *, const char *), void *)
;;     ;
(define ~sqlite3_trace #f)
(define (sqlite3_trace @17453 xTrace @17452)
  (unless
    ~sqlite3_trace
    (set! ~sqlite3_trace
      (fh-link-proc "sqlite3_trace" '* (list '* '* '*))))
  (let ((~@17453 (unwrap-sqlite3* @17453))
        (~xTrace
          ((make-ftn-arg-unwrapper ffi:void (list '* '*))
           xTrace))
        (~@17452 (unwrap~pointer @17452)))
    (~sqlite3_trace ~@17453 ~xTrace ~@17452)))
(export sqlite3_trace)

;; void *sqlite3_profile(sqlite3 *, void (*xProfile)(void *, const char *, 
;;     sqlite3_uint64), void *);
(define ~sqlite3_profile #f)
(define (sqlite3_profile @17455 xProfile @17454)
  (unless
    ~sqlite3_profile
    (set! ~sqlite3_profile
      (fh-link-proc
        "sqlite3_profile"
        '*
        (list '* '* '*))))
  (let ((~@17455 (unwrap-sqlite3* @17455))
        (~xProfile
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* ffi:unsigned-long))
           xProfile))
        (~@17454 (unwrap~pointer @17454)))
    (~sqlite3_profile ~@17455 ~xProfile ~@17454)))
(export sqlite3_profile)

;; int sqlite3_trace_v2(sqlite3 *, unsigned uMask, int (*xCallback)(unsigned, 
;;     void *, void *, void *), void *pCtx);
(define ~sqlite3_trace_v2 #f)
(define (sqlite3_trace_v2 @17456 uMask xCallback pCtx)
  (unless
    ~sqlite3_trace_v2
    (set! ~sqlite3_trace_v2
      (fh-link-proc
        "sqlite3_trace_v2"
        ffi:int
        (list '* ffi:unsigned-int '* '*))))
  (let ((~@17456 (unwrap-sqlite3* @17456))
        (~uMask (unwrap~fixed uMask))
        (~xCallback
          ((make-ftn-arg-unwrapper
             ffi:int
             (list ffi:unsigned-int '* '* '*))
           xCallback))
        (~pCtx (unwrap~pointer pCtx)))
    (~sqlite3_trace_v2
      ~@17456
      ~uMask
      ~xCallback
      ~pCtx)))
(export sqlite3_trace_v2)

;; void sqlite3_progress_handler(sqlite3 *, int, int (*)(void *), void *);
(define ~sqlite3_progress_handler #f)
(define (sqlite3_progress_handler
         @17459
         arg-1
         @17458
         @17457)
  (unless
    ~sqlite3_progress_handler
    (set! ~sqlite3_progress_handler
      (fh-link-proc
        "sqlite3_progress_handler"
        ffi:void
        (list '* ffi:int '* '*))))
  (let ((~@17459 (unwrap-sqlite3* @17459))
        (~arg-1 (unwrap~fixed arg-1))
        (~@17458
          ((make-ftn-arg-unwrapper ffi:int (list '*))
           @17458))
        (~@17457 (unwrap~pointer @17457)))
    (~sqlite3_progress_handler
      ~@17459
      ~arg-1
      ~@17458
      ~@17457)))
(export sqlite3_progress_handler)

;; int sqlite3_open(const char *filename, sqlite3 **ppDb);
(define ~sqlite3_open #f)
(define (sqlite3_open filename ppDb)
  (unless
    ~sqlite3_open
    (set! ~sqlite3_open
      (fh-link-proc
        "sqlite3_open"
        ffi:int
        (list '* '*))))
  (let ((~filename (unwrap~pointer filename))
        (~ppDb (unwrap~pointer ppDb)))
    (~sqlite3_open ~filename ~ppDb)))
(export sqlite3_open)

;; int sqlite3_open16(const void *filename, sqlite3 **ppDb);
(define ~sqlite3_open16 #f)
(define (sqlite3_open16 filename ppDb)
  (unless
    ~sqlite3_open16
    (set! ~sqlite3_open16
      (fh-link-proc
        "sqlite3_open16"
        ffi:int
        (list '* '*))))
  (let ((~filename (unwrap~pointer filename))
        (~ppDb (unwrap~pointer ppDb)))
    (~sqlite3_open16 ~filename ~ppDb)))
(export sqlite3_open16)

;; int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const 
;;     char *zVfs);
(define ~sqlite3_open_v2 #f)
(define (sqlite3_open_v2 filename ppDb flags zVfs)
  (unless
    ~sqlite3_open_v2
    (set! ~sqlite3_open_v2
      (fh-link-proc
        "sqlite3_open_v2"
        ffi:int
        (list '* '* ffi:int '*))))
  (let ((~filename (unwrap~pointer filename))
        (~ppDb (unwrap~pointer ppDb))
        (~flags (unwrap~fixed flags))
        (~zVfs (unwrap~pointer zVfs)))
    (~sqlite3_open_v2 ~filename ~ppDb ~flags ~zVfs)))
(export sqlite3_open_v2)

;; const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam)
;;     ;
(define ~sqlite3_uri_parameter #f)
(define (sqlite3_uri_parameter zFilename zParam)
  (unless
    ~sqlite3_uri_parameter
    (set! ~sqlite3_uri_parameter
      (fh-link-proc
        "sqlite3_uri_parameter"
        '*
        (list '* '*))))
  (let ((~zFilename (unwrap~pointer zFilename))
        (~zParam (unwrap~pointer zParam)))
    (~sqlite3_uri_parameter ~zFilename ~zParam)))
(export sqlite3_uri_parameter)

;; int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault)
;;     ;
(define ~sqlite3_uri_boolean #f)
(define (sqlite3_uri_boolean zFile zParam bDefault)
  (unless
    ~sqlite3_uri_boolean
    (set! ~sqlite3_uri_boolean
      (fh-link-proc
        "sqlite3_uri_boolean"
        ffi:int
        (list '* '* ffi:int))))
  (let ((~zFile (unwrap~pointer zFile))
        (~zParam (unwrap~pointer zParam))
        (~bDefault (unwrap~fixed bDefault)))
    (~sqlite3_uri_boolean ~zFile ~zParam ~bDefault)))
(export sqlite3_uri_boolean)

;; sqlite3_int64 sqlite3_uri_int64(const char *, const char *, sqlite3_int64);
(define ~sqlite3_uri_int64 #f)
(define (sqlite3_uri_int64 @17461 @17460 arg-2)
  (unless
    ~sqlite3_uri_int64
    (set! ~sqlite3_uri_int64
      (fh-link-proc
        "sqlite3_uri_int64"
        ffi:long
        (list '* '* ffi:long))))
  (let ((~@17461 (unwrap~pointer @17461))
        (~@17460 (unwrap~pointer @17460))
        (~arg-2 (unwrap~fixed arg-2)))
    (~sqlite3_uri_int64 ~@17461 ~@17460 ~arg-2)))
(export sqlite3_uri_int64)

;; int sqlite3_errcode(sqlite3 *db);
(define ~sqlite3_errcode #f)
(define (sqlite3_errcode db)
  (unless
    ~sqlite3_errcode
    (set! ~sqlite3_errcode
      (fh-link-proc
        "sqlite3_errcode"
        ffi:int
        (list '*))))
  (let ((~db (unwrap-sqlite3* db)))
    (~sqlite3_errcode ~db)))
(export sqlite3_errcode)

;; int sqlite3_extended_errcode(sqlite3 *db);
(define ~sqlite3_extended_errcode #f)
(define (sqlite3_extended_errcode db)
  (unless
    ~sqlite3_extended_errcode
    (set! ~sqlite3_extended_errcode
      (fh-link-proc
        "sqlite3_extended_errcode"
        ffi:int
        (list '*))))
  (let ((~db (unwrap-sqlite3* db)))
    (~sqlite3_extended_errcode ~db)))
(export sqlite3_extended_errcode)

;; const char *sqlite3_errmsg(sqlite3 *);
(define ~sqlite3_errmsg #f)
(define (sqlite3_errmsg @17462)
  (unless
    ~sqlite3_errmsg
    (set! ~sqlite3_errmsg
      (fh-link-proc "sqlite3_errmsg" '* (list '*))))
  (let ((~@17462 (unwrap-sqlite3* @17462)))
    (~sqlite3_errmsg ~@17462)))
(export sqlite3_errmsg)

;; const void *sqlite3_errmsg16(sqlite3 *);
(define ~sqlite3_errmsg16 #f)
(define (sqlite3_errmsg16 @17463)
  (unless
    ~sqlite3_errmsg16
    (set! ~sqlite3_errmsg16
      (fh-link-proc "sqlite3_errmsg16" '* (list '*))))
  (let ((~@17463 (unwrap-sqlite3* @17463)))
    (~sqlite3_errmsg16 ~@17463)))
(export sqlite3_errmsg16)

;; const char *sqlite3_errstr(int);
(define ~sqlite3_errstr #f)
(define (sqlite3_errstr arg-0)
  (unless
    ~sqlite3_errstr
    (set! ~sqlite3_errstr
      (fh-link-proc "sqlite3_errstr" '* (list ffi:int))))
  (let ((~arg-0 (unwrap~fixed arg-0)))
    (~sqlite3_errstr ~arg-0)))
(export sqlite3_errstr)

;; typedef struct sqlite3_stmt sqlite3_stmt;
(define sqlite3_stmt-desc void)
(export sqlite3_stmt-desc)
(define sqlite3_stmt*-desc (bs:pointer sqlite3_stmt-desc))
(export sqlite3_stmt*-desc)
(define-fh-pointer-type sqlite3_stmt* sqlite3_stmt*-desc)

;; int sqlite3_limit(sqlite3 *, int id, int newVal);
(define ~sqlite3_limit #f)
(define (sqlite3_limit @17464 id newVal)
  (unless
    ~sqlite3_limit
    (set! ~sqlite3_limit
      (fh-link-proc
        "sqlite3_limit"
        ffi:int
        (list '* ffi:int ffi:int))))
  (let ((~@17464 (unwrap-sqlite3* @17464))
        (~id (unwrap~fixed id))
        (~newVal (unwrap~fixed newVal)))
    (~sqlite3_limit ~@17464 ~id ~newVal)))
(export sqlite3_limit)

;; int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt *
;;     *ppStmt, const char **pzTail);
(define ~sqlite3_prepare #f)
(define (sqlite3_prepare db zSql nByte ppStmt pzTail)
  (unless
    ~sqlite3_prepare
    (set! ~sqlite3_prepare
      (fh-link-proc
        "sqlite3_prepare"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zSql (unwrap~pointer zSql))
        (~nByte (unwrap~fixed nByte))
        (~ppStmt (unwrap~pointer ppStmt))
        (~pzTail (unwrap~pointer pzTail)))
    (~sqlite3_prepare
      ~db
      ~zSql
      ~nByte
      ~ppStmt
      ~pzTail)))
(export sqlite3_prepare)

;; int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, 
;;     sqlite3_stmt **ppStmt, const char **pzTail);
(define ~sqlite3_prepare_v2 #f)
(define (sqlite3_prepare_v2 db zSql nByte ppStmt pzTail)
  (unless
    ~sqlite3_prepare_v2
    (set! ~sqlite3_prepare_v2
      (fh-link-proc
        "sqlite3_prepare_v2"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zSql (unwrap~pointer zSql))
        (~nByte (unwrap~fixed nByte))
        (~ppStmt (unwrap~pointer ppStmt))
        (~pzTail (unwrap~pointer pzTail)))
    (~sqlite3_prepare_v2
      ~db
      ~zSql
      ~nByte
      ~ppStmt
      ~pzTail)))
(export sqlite3_prepare_v2)

;; int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, 
;;     unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail);
(define ~sqlite3_prepare_v3 #f)
(define (sqlite3_prepare_v3
         db
         zSql
         nByte
         prepFlags
         ppStmt
         pzTail)
  (unless
    ~sqlite3_prepare_v3
    (set! ~sqlite3_prepare_v3
      (fh-link-proc
        "sqlite3_prepare_v3"
        ffi:int
        (list '* '* ffi:int ffi:unsigned-int '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zSql (unwrap~pointer zSql))
        (~nByte (unwrap~fixed nByte))
        (~prepFlags (unwrap~fixed prepFlags))
        (~ppStmt (unwrap~pointer ppStmt))
        (~pzTail (unwrap~pointer pzTail)))
    (~sqlite3_prepare_v3
      ~db
      ~zSql
      ~nByte
      ~prepFlags
      ~ppStmt
      ~pzTail)))
(export sqlite3_prepare_v3)

;; int sqlite3_prepare16(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt
;;      **ppStmt, const void **pzTail);
(define ~sqlite3_prepare16 #f)
(define (sqlite3_prepare16 db zSql nByte ppStmt pzTail)
  (unless
    ~sqlite3_prepare16
    (set! ~sqlite3_prepare16
      (fh-link-proc
        "sqlite3_prepare16"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zSql (unwrap~pointer zSql))
        (~nByte (unwrap~fixed nByte))
        (~ppStmt (unwrap~pointer ppStmt))
        (~pzTail (unwrap~pointer pzTail)))
    (~sqlite3_prepare16
      ~db
      ~zSql
      ~nByte
      ~ppStmt
      ~pzTail)))
(export sqlite3_prepare16)

;; int sqlite3_prepare16_v2(sqlite3 *db, const void *zSql, int nByte, 
;;     sqlite3_stmt **ppStmt, const void **pzTail);
(define ~sqlite3_prepare16_v2 #f)
(define (sqlite3_prepare16_v2
         db
         zSql
         nByte
         ppStmt
         pzTail)
  (unless
    ~sqlite3_prepare16_v2
    (set! ~sqlite3_prepare16_v2
      (fh-link-proc
        "sqlite3_prepare16_v2"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zSql (unwrap~pointer zSql))
        (~nByte (unwrap~fixed nByte))
        (~ppStmt (unwrap~pointer ppStmt))
        (~pzTail (unwrap~pointer pzTail)))
    (~sqlite3_prepare16_v2
      ~db
      ~zSql
      ~nByte
      ~ppStmt
      ~pzTail)))
(export sqlite3_prepare16_v2)

;; int sqlite3_prepare16_v3(sqlite3 *db, const void *zSql, int nByte, 
;;     unsigned int prepFlags, sqlite3_stmt **ppStmt, const void **pzTail);
(define ~sqlite3_prepare16_v3 #f)
(define (sqlite3_prepare16_v3
         db
         zSql
         nByte
         prepFlags
         ppStmt
         pzTail)
  (unless
    ~sqlite3_prepare16_v3
    (set! ~sqlite3_prepare16_v3
      (fh-link-proc
        "sqlite3_prepare16_v3"
        ffi:int
        (list '* '* ffi:int ffi:unsigned-int '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zSql (unwrap~pointer zSql))
        (~nByte (unwrap~fixed nByte))
        (~prepFlags (unwrap~fixed prepFlags))
        (~ppStmt (unwrap~pointer ppStmt))
        (~pzTail (unwrap~pointer pzTail)))
    (~sqlite3_prepare16_v3
      ~db
      ~zSql
      ~nByte
      ~prepFlags
      ~ppStmt
      ~pzTail)))
(export sqlite3_prepare16_v3)

;; const char *sqlite3_sql(sqlite3_stmt *pStmt);
(define ~sqlite3_sql #f)
(define (sqlite3_sql pStmt)
  (unless
    ~sqlite3_sql
    (set! ~sqlite3_sql
      (fh-link-proc "sqlite3_sql" '* (list '*))))
  (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
    (~sqlite3_sql ~pStmt)))
(export sqlite3_sql)

;; char *sqlite3_expanded_sql(sqlite3_stmt *pStmt);
(define ~sqlite3_expanded_sql #f)
(define (sqlite3_expanded_sql pStmt)
  (unless
    ~sqlite3_expanded_sql
    (set! ~sqlite3_expanded_sql
      (fh-link-proc
        "sqlite3_expanded_sql"
        '*
        (list '*))))
  (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
    (~sqlite3_expanded_sql ~pStmt)))
(export sqlite3_expanded_sql)

;; int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);
(define ~sqlite3_stmt_readonly #f)
(define (sqlite3_stmt_readonly pStmt)
  (unless
    ~sqlite3_stmt_readonly
    (set! ~sqlite3_stmt_readonly
      (fh-link-proc
        "sqlite3_stmt_readonly"
        ffi:int
        (list '*))))
  (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
    (~sqlite3_stmt_readonly ~pStmt)))
(export sqlite3_stmt_readonly)

;; int sqlite3_stmt_busy(sqlite3_stmt *);
(define ~sqlite3_stmt_busy #f)
(define (sqlite3_stmt_busy @17465)
  (unless
    ~sqlite3_stmt_busy
    (set! ~sqlite3_stmt_busy
      (fh-link-proc
        "sqlite3_stmt_busy"
        ffi:int
        (list '*))))
  (let ((~@17465 (unwrap-sqlite3_stmt* @17465)))
    (~sqlite3_stmt_busy ~@17465)))
(export sqlite3_stmt_busy)

;; typedef struct sqlite3_value sqlite3_value;
(define sqlite3_value-desc void)
(export sqlite3_value-desc)
(define sqlite3_value*-desc (bs:pointer sqlite3_value-desc))
(export sqlite3_value*-desc)
(define-fh-pointer-type sqlite3_value* sqlite3_value*-desc)

;; typedef struct sqlite3_context sqlite3_context;
(define sqlite3_context-desc void)
(export sqlite3_context-desc)
(define sqlite3_context*-desc (bs:pointer sqlite3_context-desc))
(export sqlite3_context*-desc)
(define-fh-pointer-type sqlite3_context* sqlite3_context*-desc)

;; int sqlite3_bind_blob(sqlite3_stmt *, int, const void *, int n, void (*)(
;;     void *));
(define ~sqlite3_bind_blob #f)
(define (sqlite3_bind_blob @17468 arg-1 @17467 n @17466)
  (unless
    ~sqlite3_bind_blob
    (set! ~sqlite3_bind_blob
      (fh-link-proc
        "sqlite3_bind_blob"
        ffi:int
        (list '* ffi:int '* ffi:int '*))))
  (let ((~@17468 (unwrap-sqlite3_stmt* @17468))
        (~arg-1 (unwrap~fixed arg-1))
        (~@17467 (unwrap~pointer @17467))
        (~n (unwrap~fixed n))
        (~@17466
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17466)))
    (~sqlite3_bind_blob
      ~@17468
      ~arg-1
      ~@17467
      ~n
      ~@17466)))
(export sqlite3_bind_blob)

;; int sqlite3_bind_blob64(sqlite3_stmt *, int, const void *, sqlite3_uint64, 
;;     void (*)(void *));
(define ~sqlite3_bind_blob64 #f)
(define (sqlite3_bind_blob64
         @17471
         arg-1
         @17470
         arg-3
         @17469)
  (unless
    ~sqlite3_bind_blob64
    (set! ~sqlite3_bind_blob64
      (fh-link-proc
        "sqlite3_bind_blob64"
        ffi:int
        (list '* ffi:int '* ffi:unsigned-long '*))))
  (let ((~@17471 (unwrap-sqlite3_stmt* @17471))
        (~arg-1 (unwrap~fixed arg-1))
        (~@17470 (unwrap~pointer @17470))
        (~arg-3 (unwrap~fixed arg-3))
        (~@17469
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17469)))
    (~sqlite3_bind_blob64
      ~@17471
      ~arg-1
      ~@17470
      ~arg-3
      ~@17469)))
(export sqlite3_bind_blob64)

;; int sqlite3_bind_double(sqlite3_stmt *, int, double);
(define ~sqlite3_bind_double #f)
(define (sqlite3_bind_double @17472 arg-1 arg-2)
  (unless
    ~sqlite3_bind_double
    (set! ~sqlite3_bind_double
      (fh-link-proc
        "sqlite3_bind_double"
        ffi:int
        (list '* ffi:int ffi:double))))
  (let ((~@17472 (unwrap-sqlite3_stmt* @17472))
        (~arg-1 (unwrap~fixed arg-1))
        (~arg-2 (unwrap~float arg-2)))
    (~sqlite3_bind_double ~@17472 ~arg-1 ~arg-2)))
(export sqlite3_bind_double)

;; int sqlite3_bind_int(sqlite3_stmt *, int, int);
(define ~sqlite3_bind_int #f)
(define (sqlite3_bind_int @17473 arg-1 arg-2)
  (unless
    ~sqlite3_bind_int
    (set! ~sqlite3_bind_int
      (fh-link-proc
        "sqlite3_bind_int"
        ffi:int
        (list '* ffi:int ffi:int))))
  (let ((~@17473 (unwrap-sqlite3_stmt* @17473))
        (~arg-1 (unwrap~fixed arg-1))
        (~arg-2 (unwrap~fixed arg-2)))
    (~sqlite3_bind_int ~@17473 ~arg-1 ~arg-2)))
(export sqlite3_bind_int)

;; int sqlite3_bind_int64(sqlite3_stmt *, int, sqlite3_int64);
(define ~sqlite3_bind_int64 #f)
(define (sqlite3_bind_int64 @17474 arg-1 arg-2)
  (unless
    ~sqlite3_bind_int64
    (set! ~sqlite3_bind_int64
      (fh-link-proc
        "sqlite3_bind_int64"
        ffi:int
        (list '* ffi:int ffi:long))))
  (let ((~@17474 (unwrap-sqlite3_stmt* @17474))
        (~arg-1 (unwrap~fixed arg-1))
        (~arg-2 (unwrap~fixed arg-2)))
    (~sqlite3_bind_int64 ~@17474 ~arg-1 ~arg-2)))
(export sqlite3_bind_int64)

;; int sqlite3_bind_null(sqlite3_stmt *, int);
(define ~sqlite3_bind_null #f)
(define (sqlite3_bind_null @17475 arg-1)
  (unless
    ~sqlite3_bind_null
    (set! ~sqlite3_bind_null
      (fh-link-proc
        "sqlite3_bind_null"
        ffi:int
        (list '* ffi:int))))
  (let ((~@17475 (unwrap-sqlite3_stmt* @17475))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_bind_null ~@17475 ~arg-1)))
(export sqlite3_bind_null)

;; int sqlite3_bind_text(sqlite3_stmt *, int, const char *, int, void (*)(void 
;;     *));
(define ~sqlite3_bind_text #f)
(define (sqlite3_bind_text
         @17478
         arg-1
         @17477
         arg-3
         @17476)
  (unless
    ~sqlite3_bind_text
    (set! ~sqlite3_bind_text
      (fh-link-proc
        "sqlite3_bind_text"
        ffi:int
        (list '* ffi:int '* ffi:int '*))))
  (let ((~@17478 (unwrap-sqlite3_stmt* @17478))
        (~arg-1 (unwrap~fixed arg-1))
        (~@17477 (unwrap~pointer @17477))
        (~arg-3 (unwrap~fixed arg-3))
        (~@17476
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17476)))
    (~sqlite3_bind_text
      ~@17478
      ~arg-1
      ~@17477
      ~arg-3
      ~@17476)))
(export sqlite3_bind_text)

;; int sqlite3_bind_text16(sqlite3_stmt *, int, const void *, int, void (*)(
;;     void *));
(define ~sqlite3_bind_text16 #f)
(define (sqlite3_bind_text16
         @17481
         arg-1
         @17480
         arg-3
         @17479)
  (unless
    ~sqlite3_bind_text16
    (set! ~sqlite3_bind_text16
      (fh-link-proc
        "sqlite3_bind_text16"
        ffi:int
        (list '* ffi:int '* ffi:int '*))))
  (let ((~@17481 (unwrap-sqlite3_stmt* @17481))
        (~arg-1 (unwrap~fixed arg-1))
        (~@17480 (unwrap~pointer @17480))
        (~arg-3 (unwrap~fixed arg-3))
        (~@17479
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17479)))
    (~sqlite3_bind_text16
      ~@17481
      ~arg-1
      ~@17480
      ~arg-3
      ~@17479)))
(export sqlite3_bind_text16)

;; int sqlite3_bind_text64(sqlite3_stmt *, int, const char *, sqlite3_uint64, 
;;     void (*)(void *), unsigned char encoding);
(define ~sqlite3_bind_text64 #f)
(define (sqlite3_bind_text64
         @17484
         arg-1
         @17483
         arg-3
         @17482
         encoding)
  (unless
    ~sqlite3_bind_text64
    (set! ~sqlite3_bind_text64
      (fh-link-proc
        "sqlite3_bind_text64"
        ffi:int
        (list '*
              ffi:int
              '*
              ffi:unsigned-long
              '*
              ffi:unsigned-int))))
  (let ((~@17484 (unwrap-sqlite3_stmt* @17484))
        (~arg-1 (unwrap~fixed arg-1))
        (~@17483 (unwrap~pointer @17483))
        (~arg-3 (unwrap~fixed arg-3))
        (~@17482
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17482))
        (~encoding (unwrap~fixed encoding)))
    (~sqlite3_bind_text64
      ~@17484
      ~arg-1
      ~@17483
      ~arg-3
      ~@17482
      ~encoding)))
(export sqlite3_bind_text64)

;; int sqlite3_bind_value(sqlite3_stmt *, int, const sqlite3_value *);
(define ~sqlite3_bind_value #f)
(define (sqlite3_bind_value @17486 arg-1 @17485)
  (unless
    ~sqlite3_bind_value
    (set! ~sqlite3_bind_value
      (fh-link-proc
        "sqlite3_bind_value"
        ffi:int
        (list '* ffi:int '*))))
  (let ((~@17486 (unwrap-sqlite3_stmt* @17486))
        (~arg-1 (unwrap~fixed arg-1))
        (~@17485 (unwrap-sqlite3_value* @17485)))
    (~sqlite3_bind_value ~@17486 ~arg-1 ~@17485)))
(export sqlite3_bind_value)

;; int sqlite3_bind_pointer(sqlite3_stmt *, int, void *, const char *, void (*)
;;     (void *));
(define ~sqlite3_bind_pointer #f)
(define (sqlite3_bind_pointer
         @17490
         arg-1
         @17489
         @17488
         @17487)
  (unless
    ~sqlite3_bind_pointer
    (set! ~sqlite3_bind_pointer
      (fh-link-proc
        "sqlite3_bind_pointer"
        ffi:int
        (list '* ffi:int '* '* '*))))
  (let ((~@17490 (unwrap-sqlite3_stmt* @17490))
        (~arg-1 (unwrap~fixed arg-1))
        (~@17489 (unwrap~pointer @17489))
        (~@17488 (unwrap~pointer @17488))
        (~@17487
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17487)))
    (~sqlite3_bind_pointer
      ~@17490
      ~arg-1
      ~@17489
      ~@17488
      ~@17487)))
(export sqlite3_bind_pointer)

;; int sqlite3_bind_zeroblob(sqlite3_stmt *, int, int n);
(define ~sqlite3_bind_zeroblob #f)
(define (sqlite3_bind_zeroblob @17491 arg-1 n)
  (unless
    ~sqlite3_bind_zeroblob
    (set! ~sqlite3_bind_zeroblob
      (fh-link-proc
        "sqlite3_bind_zeroblob"
        ffi:int
        (list '* ffi:int ffi:int))))
  (let ((~@17491 (unwrap-sqlite3_stmt* @17491))
        (~arg-1 (unwrap~fixed arg-1))
        (~n (unwrap~fixed n)))
    (~sqlite3_bind_zeroblob ~@17491 ~arg-1 ~n)))
(export sqlite3_bind_zeroblob)

;; int sqlite3_bind_zeroblob64(sqlite3_stmt *, int, sqlite3_uint64);
(define ~sqlite3_bind_zeroblob64 #f)
(define (sqlite3_bind_zeroblob64 @17492 arg-1 arg-2)
  (unless
    ~sqlite3_bind_zeroblob64
    (set! ~sqlite3_bind_zeroblob64
      (fh-link-proc
        "sqlite3_bind_zeroblob64"
        ffi:int
        (list '* ffi:int ffi:unsigned-long))))
  (let ((~@17492 (unwrap-sqlite3_stmt* @17492))
        (~arg-1 (unwrap~fixed arg-1))
        (~arg-2 (unwrap~fixed arg-2)))
    (~sqlite3_bind_zeroblob64 ~@17492 ~arg-1 ~arg-2)))
(export sqlite3_bind_zeroblob64)

;; int sqlite3_bind_parameter_count(sqlite3_stmt *);
(define ~sqlite3_bind_parameter_count #f)
(define (sqlite3_bind_parameter_count @17493)
  (unless
    ~sqlite3_bind_parameter_count
    (set! ~sqlite3_bind_parameter_count
      (fh-link-proc
        "sqlite3_bind_parameter_count"
        ffi:int
        (list '*))))
  (let ((~@17493 (unwrap-sqlite3_stmt* @17493)))
    (~sqlite3_bind_parameter_count ~@17493)))
(export sqlite3_bind_parameter_count)

;; const char *sqlite3_bind_parameter_name(sqlite3_stmt *, int);
(define ~sqlite3_bind_parameter_name #f)
(define (sqlite3_bind_parameter_name @17494 arg-1)
  (unless
    ~sqlite3_bind_parameter_name
    (set! ~sqlite3_bind_parameter_name
      (fh-link-proc
        "sqlite3_bind_parameter_name"
        '*
        (list '* ffi:int))))
  (let ((~@17494 (unwrap-sqlite3_stmt* @17494))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_bind_parameter_name ~@17494 ~arg-1)))
(export sqlite3_bind_parameter_name)

;; int sqlite3_bind_parameter_index(sqlite3_stmt *, const char *zName);
(define ~sqlite3_bind_parameter_index #f)
(define (sqlite3_bind_parameter_index @17495 zName)
  (unless
    ~sqlite3_bind_parameter_index
    (set! ~sqlite3_bind_parameter_index
      (fh-link-proc
        "sqlite3_bind_parameter_index"
        ffi:int
        (list '* '*))))
  (let ((~@17495 (unwrap-sqlite3_stmt* @17495))
        (~zName (unwrap~pointer zName)))
    (~sqlite3_bind_parameter_index ~@17495 ~zName)))
(export sqlite3_bind_parameter_index)

;; int sqlite3_clear_bindings(sqlite3_stmt *);
(define ~sqlite3_clear_bindings #f)
(define (sqlite3_clear_bindings @17496)
  (unless
    ~sqlite3_clear_bindings
    (set! ~sqlite3_clear_bindings
      (fh-link-proc
        "sqlite3_clear_bindings"
        ffi:int
        (list '*))))
  (let ((~@17496 (unwrap-sqlite3_stmt* @17496)))
    (~sqlite3_clear_bindings ~@17496)))
(export sqlite3_clear_bindings)

;; int sqlite3_column_count(sqlite3_stmt *pStmt);
(define ~sqlite3_column_count #f)
(define (sqlite3_column_count pStmt)
  (unless
    ~sqlite3_column_count
    (set! ~sqlite3_column_count
      (fh-link-proc
        "sqlite3_column_count"
        ffi:int
        (list '*))))
  (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
    (~sqlite3_column_count ~pStmt)))
(export sqlite3_column_count)

;; const char *sqlite3_column_name(sqlite3_stmt *, int N);
(define ~sqlite3_column_name #f)
(define (sqlite3_column_name @17497 N)
  (unless
    ~sqlite3_column_name
    (set! ~sqlite3_column_name
      (fh-link-proc
        "sqlite3_column_name"
        '*
        (list '* ffi:int))))
  (let ((~@17497 (unwrap-sqlite3_stmt* @17497))
        (~N (unwrap~fixed N)))
    (~sqlite3_column_name ~@17497 ~N)))
(export sqlite3_column_name)

;; const void *sqlite3_column_name16(sqlite3_stmt *, int N);
(define ~sqlite3_column_name16 #f)
(define (sqlite3_column_name16 @17498 N)
  (unless
    ~sqlite3_column_name16
    (set! ~sqlite3_column_name16
      (fh-link-proc
        "sqlite3_column_name16"
        '*
        (list '* ffi:int))))
  (let ((~@17498 (unwrap-sqlite3_stmt* @17498))
        (~N (unwrap~fixed N)))
    (~sqlite3_column_name16 ~@17498 ~N)))
(export sqlite3_column_name16)

;; const char *sqlite3_column_database_name(sqlite3_stmt *, int);
(define ~sqlite3_column_database_name #f)
(define (sqlite3_column_database_name @17499 arg-1)
  (unless
    ~sqlite3_column_database_name
    (set! ~sqlite3_column_database_name
      (fh-link-proc
        "sqlite3_column_database_name"
        '*
        (list '* ffi:int))))
  (let ((~@17499 (unwrap-sqlite3_stmt* @17499))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_column_database_name ~@17499 ~arg-1)))
(export sqlite3_column_database_name)

;; const void *sqlite3_column_database_name16(sqlite3_stmt *, int);
(define ~sqlite3_column_database_name16 #f)
(define (sqlite3_column_database_name16 @17500 arg-1)
  (unless
    ~sqlite3_column_database_name16
    (set! ~sqlite3_column_database_name16
      (fh-link-proc
        "sqlite3_column_database_name16"
        '*
        (list '* ffi:int))))
  (let ((~@17500 (unwrap-sqlite3_stmt* @17500))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_column_database_name16 ~@17500 ~arg-1)))
(export sqlite3_column_database_name16)

;; const char *sqlite3_column_table_name(sqlite3_stmt *, int);
(define ~sqlite3_column_table_name #f)
(define (sqlite3_column_table_name @17501 arg-1)
  (unless
    ~sqlite3_column_table_name
    (set! ~sqlite3_column_table_name
      (fh-link-proc
        "sqlite3_column_table_name"
        '*
        (list '* ffi:int))))
  (let ((~@17501 (unwrap-sqlite3_stmt* @17501))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_column_table_name ~@17501 ~arg-1)))
(export sqlite3_column_table_name)

;; const void *sqlite3_column_table_name16(sqlite3_stmt *, int);
(define ~sqlite3_column_table_name16 #f)
(define (sqlite3_column_table_name16 @17502 arg-1)
  (unless
    ~sqlite3_column_table_name16
    (set! ~sqlite3_column_table_name16
      (fh-link-proc
        "sqlite3_column_table_name16"
        '*
        (list '* ffi:int))))
  (let ((~@17502 (unwrap-sqlite3_stmt* @17502))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_column_table_name16 ~@17502 ~arg-1)))
(export sqlite3_column_table_name16)

;; const char *sqlite3_column_origin_name(sqlite3_stmt *, int);
(define ~sqlite3_column_origin_name #f)
(define (sqlite3_column_origin_name @17503 arg-1)
  (unless
    ~sqlite3_column_origin_name
    (set! ~sqlite3_column_origin_name
      (fh-link-proc
        "sqlite3_column_origin_name"
        '*
        (list '* ffi:int))))
  (let ((~@17503 (unwrap-sqlite3_stmt* @17503))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_column_origin_name ~@17503 ~arg-1)))
(export sqlite3_column_origin_name)

;; const void *sqlite3_column_origin_name16(sqlite3_stmt *, int);
(define ~sqlite3_column_origin_name16 #f)
(define (sqlite3_column_origin_name16 @17504 arg-1)
  (unless
    ~sqlite3_column_origin_name16
    (set! ~sqlite3_column_origin_name16
      (fh-link-proc
        "sqlite3_column_origin_name16"
        '*
        (list '* ffi:int))))
  (let ((~@17504 (unwrap-sqlite3_stmt* @17504))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_column_origin_name16 ~@17504 ~arg-1)))
(export sqlite3_column_origin_name16)

;; const char *sqlite3_column_decltype(sqlite3_stmt *, int);
(define ~sqlite3_column_decltype #f)
(define (sqlite3_column_decltype @17505 arg-1)
  (unless
    ~sqlite3_column_decltype
    (set! ~sqlite3_column_decltype
      (fh-link-proc
        "sqlite3_column_decltype"
        '*
        (list '* ffi:int))))
  (let ((~@17505 (unwrap-sqlite3_stmt* @17505))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_column_decltype ~@17505 ~arg-1)))
(export sqlite3_column_decltype)

;; const void *sqlite3_column_decltype16(sqlite3_stmt *, int);
(define ~sqlite3_column_decltype16 #f)
(define (sqlite3_column_decltype16 @17506 arg-1)
  (unless
    ~sqlite3_column_decltype16
    (set! ~sqlite3_column_decltype16
      (fh-link-proc
        "sqlite3_column_decltype16"
        '*
        (list '* ffi:int))))
  (let ((~@17506 (unwrap-sqlite3_stmt* @17506))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_column_decltype16 ~@17506 ~arg-1)))
(export sqlite3_column_decltype16)

;; int sqlite3_step(sqlite3_stmt *);
(define ~sqlite3_step #f)
(define (sqlite3_step @17507)
  (unless
    ~sqlite3_step
    (set! ~sqlite3_step
      (fh-link-proc "sqlite3_step" ffi:int (list '*))))
  (let ((~@17507 (unwrap-sqlite3_stmt* @17507)))
    (~sqlite3_step ~@17507)))
(export sqlite3_step)

;; int sqlite3_data_count(sqlite3_stmt *pStmt);
(define ~sqlite3_data_count #f)
(define (sqlite3_data_count pStmt)
  (unless
    ~sqlite3_data_count
    (set! ~sqlite3_data_count
      (fh-link-proc
        "sqlite3_data_count"
        ffi:int
        (list '*))))
  (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
    (~sqlite3_data_count ~pStmt)))
(export sqlite3_data_count)

;; const void *sqlite3_column_blob(sqlite3_stmt *, int iCol);
(define ~sqlite3_column_blob #f)
(define (sqlite3_column_blob @17508 iCol)
  (unless
    ~sqlite3_column_blob
    (set! ~sqlite3_column_blob
      (fh-link-proc
        "sqlite3_column_blob"
        '*
        (list '* ffi:int))))
  (let ((~@17508 (unwrap-sqlite3_stmt* @17508))
        (~iCol (unwrap~fixed iCol)))
    (~sqlite3_column_blob ~@17508 ~iCol)))
(export sqlite3_column_blob)

;; double sqlite3_column_double(sqlite3_stmt *, int iCol);
(define ~sqlite3_column_double #f)
(define (sqlite3_column_double @17509 iCol)
  (unless
    ~sqlite3_column_double
    (set! ~sqlite3_column_double
      (fh-link-proc
        "sqlite3_column_double"
        ffi:double
        (list '* ffi:int))))
  (let ((~@17509 (unwrap-sqlite3_stmt* @17509))
        (~iCol (unwrap~fixed iCol)))
    (~sqlite3_column_double ~@17509 ~iCol)))
(export sqlite3_column_double)

;; int sqlite3_column_int(sqlite3_stmt *, int iCol);
(define ~sqlite3_column_int #f)
(define (sqlite3_column_int @17510 iCol)
  (unless
    ~sqlite3_column_int
    (set! ~sqlite3_column_int
      (fh-link-proc
        "sqlite3_column_int"
        ffi:int
        (list '* ffi:int))))
  (let ((~@17510 (unwrap-sqlite3_stmt* @17510))
        (~iCol (unwrap~fixed iCol)))
    (~sqlite3_column_int ~@17510 ~iCol)))
(export sqlite3_column_int)

;; sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *, int iCol);
(define ~sqlite3_column_int64 #f)
(define (sqlite3_column_int64 @17511 iCol)
  (unless
    ~sqlite3_column_int64
    (set! ~sqlite3_column_int64
      (fh-link-proc
        "sqlite3_column_int64"
        ffi:long
        (list '* ffi:int))))
  (let ((~@17511 (unwrap-sqlite3_stmt* @17511))
        (~iCol (unwrap~fixed iCol)))
    (~sqlite3_column_int64 ~@17511 ~iCol)))
(export sqlite3_column_int64)

;; const unsigned char *sqlite3_column_text(sqlite3_stmt *, int iCol);
(define ~sqlite3_column_text #f)
(define (sqlite3_column_text @17512 iCol)
  (unless
    ~sqlite3_column_text
    (set! ~sqlite3_column_text
      (fh-link-proc
        "sqlite3_column_text"
        '*
        (list '* ffi:int))))
  (let ((~@17512 (unwrap-sqlite3_stmt* @17512))
        (~iCol (unwrap~fixed iCol)))
    (~sqlite3_column_text ~@17512 ~iCol)))
(export sqlite3_column_text)

;; const void *sqlite3_column_text16(sqlite3_stmt *, int iCol);
(define ~sqlite3_column_text16 #f)
(define (sqlite3_column_text16 @17513 iCol)
  (unless
    ~sqlite3_column_text16
    (set! ~sqlite3_column_text16
      (fh-link-proc
        "sqlite3_column_text16"
        '*
        (list '* ffi:int))))
  (let ((~@17513 (unwrap-sqlite3_stmt* @17513))
        (~iCol (unwrap~fixed iCol)))
    (~sqlite3_column_text16 ~@17513 ~iCol)))
(export sqlite3_column_text16)

;; sqlite3_value *sqlite3_column_value(sqlite3_stmt *, int iCol);
(define ~sqlite3_column_value #f)
(define (sqlite3_column_value @17514 iCol)
  (unless
    ~sqlite3_column_value
    (set! ~sqlite3_column_value
      (fh-link-proc
        "sqlite3_column_value"
        '*
        (list '* ffi:int))))
  (let ((~@17514 (unwrap-sqlite3_stmt* @17514))
        (~iCol (unwrap~fixed iCol)))
    (wrap-sqlite3_value*
      (~sqlite3_column_value ~@17514 ~iCol))))
(export sqlite3_column_value)

;; int sqlite3_column_bytes(sqlite3_stmt *, int iCol);
(define ~sqlite3_column_bytes #f)
(define (sqlite3_column_bytes @17515 iCol)
  (unless
    ~sqlite3_column_bytes
    (set! ~sqlite3_column_bytes
      (fh-link-proc
        "sqlite3_column_bytes"
        ffi:int
        (list '* ffi:int))))
  (let ((~@17515 (unwrap-sqlite3_stmt* @17515))
        (~iCol (unwrap~fixed iCol)))
    (~sqlite3_column_bytes ~@17515 ~iCol)))
(export sqlite3_column_bytes)

;; int sqlite3_column_bytes16(sqlite3_stmt *, int iCol);
(define ~sqlite3_column_bytes16 #f)
(define (sqlite3_column_bytes16 @17516 iCol)
  (unless
    ~sqlite3_column_bytes16
    (set! ~sqlite3_column_bytes16
      (fh-link-proc
        "sqlite3_column_bytes16"
        ffi:int
        (list '* ffi:int))))
  (let ((~@17516 (unwrap-sqlite3_stmt* @17516))
        (~iCol (unwrap~fixed iCol)))
    (~sqlite3_column_bytes16 ~@17516 ~iCol)))
(export sqlite3_column_bytes16)

;; int sqlite3_column_type(sqlite3_stmt *, int iCol);
(define ~sqlite3_column_type #f)
(define (sqlite3_column_type @17517 iCol)
  (unless
    ~sqlite3_column_type
    (set! ~sqlite3_column_type
      (fh-link-proc
        "sqlite3_column_type"
        ffi:int
        (list '* ffi:int))))
  (let ((~@17517 (unwrap-sqlite3_stmt* @17517))
        (~iCol (unwrap~fixed iCol)))
    (~sqlite3_column_type ~@17517 ~iCol)))
(export sqlite3_column_type)

;; int sqlite3_finalize(sqlite3_stmt *pStmt);
(define ~sqlite3_finalize #f)
(define (sqlite3_finalize pStmt)
  (unless
    ~sqlite3_finalize
    (set! ~sqlite3_finalize
      (fh-link-proc
        "sqlite3_finalize"
        ffi:int
        (list '*))))
  (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
    (~sqlite3_finalize ~pStmt)))
(export sqlite3_finalize)

;; int sqlite3_reset(sqlite3_stmt *pStmt);
(define ~sqlite3_reset #f)
(define (sqlite3_reset pStmt)
  (unless
    ~sqlite3_reset
    (set! ~sqlite3_reset
      (fh-link-proc "sqlite3_reset" ffi:int (list '*))))
  (let ((~pStmt (unwrap-sqlite3_stmt* pStmt)))
    (~sqlite3_reset ~pStmt)))
(export sqlite3_reset)

;; int sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg
;;     , int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, 
;;     sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value *
;;     *), void (*xFinal)(sqlite3_context *));
(define ~sqlite3_create_function #f)
(define (sqlite3_create_function
         db
         zFunctionName
         nArg
         eTextRep
         pApp
         xFunc
         xStep
         xFinal)
  (unless
    ~sqlite3_create_function
    (set! ~sqlite3_create_function
      (fh-link-proc
        "sqlite3_create_function"
        ffi:int
        (list '* '* ffi:int ffi:int '* '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zFunctionName (unwrap~pointer zFunctionName))
        (~nArg (unwrap~fixed nArg))
        (~eTextRep (unwrap~fixed eTextRep))
        (~pApp (unwrap~pointer pApp))
        (~xFunc
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* ffi:int '*))
           xFunc))
        (~xStep
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* ffi:int '*))
           xStep))
        (~xFinal
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           xFinal)))
    (~sqlite3_create_function
      ~db
      ~zFunctionName
      ~nArg
      ~eTextRep
      ~pApp
      ~xFunc
      ~xStep
      ~xFinal)))
(export sqlite3_create_function)

;; int sqlite3_create_function16(sqlite3 *db, const void *zFunctionName, int 
;;     nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, 
;;     sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value *
;;     *), void (*xFinal)(sqlite3_context *));
(define ~sqlite3_create_function16 #f)
(define (sqlite3_create_function16
         db
         zFunctionName
         nArg
         eTextRep
         pApp
         xFunc
         xStep
         xFinal)
  (unless
    ~sqlite3_create_function16
    (set! ~sqlite3_create_function16
      (fh-link-proc
        "sqlite3_create_function16"
        ffi:int
        (list '* '* ffi:int ffi:int '* '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zFunctionName (unwrap~pointer zFunctionName))
        (~nArg (unwrap~fixed nArg))
        (~eTextRep (unwrap~fixed eTextRep))
        (~pApp (unwrap~pointer pApp))
        (~xFunc
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* ffi:int '*))
           xFunc))
        (~xStep
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* ffi:int '*))
           xStep))
        (~xFinal
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           xFinal)))
    (~sqlite3_create_function16
      ~db
      ~zFunctionName
      ~nArg
      ~eTextRep
      ~pApp
      ~xFunc
      ~xStep
      ~xFinal)))
(export sqlite3_create_function16)

;; int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int 
;;     nArg, int eTextRep, void *pApp, void (*xFunc)(sqlite3_context *, int, 
;;     sqlite3_value **), void (*xStep)(sqlite3_context *, int, sqlite3_value *
;;     *), void (*xFinal)(sqlite3_context *), void (*xDestroy)(void *));
(define ~sqlite3_create_function_v2 #f)
(define (sqlite3_create_function_v2
         db
         zFunctionName
         nArg
         eTextRep
         pApp
         xFunc
         xStep
         xFinal
         xDestroy)
  (unless
    ~sqlite3_create_function_v2
    (set! ~sqlite3_create_function_v2
      (fh-link-proc
        "sqlite3_create_function_v2"
        ffi:int
        (list '* '* ffi:int ffi:int '* '* '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zFunctionName (unwrap~pointer zFunctionName))
        (~nArg (unwrap~fixed nArg))
        (~eTextRep (unwrap~fixed eTextRep))
        (~pApp (unwrap~pointer pApp))
        (~xFunc
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* ffi:int '*))
           xFunc))
        (~xStep
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* ffi:int '*))
           xStep))
        (~xFinal
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           xFinal))
        (~xDestroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           xDestroy)))
    (~sqlite3_create_function_v2
      ~db
      ~zFunctionName
      ~nArg
      ~eTextRep
      ~pApp
      ~xFunc
      ~xStep
      ~xFinal
      ~xDestroy)))
(export sqlite3_create_function_v2)

;; int sqlite3_aggregate_count(sqlite3_context *);
(define ~sqlite3_aggregate_count #f)
(define (sqlite3_aggregate_count @17518)
  (unless
    ~sqlite3_aggregate_count
    (set! ~sqlite3_aggregate_count
      (fh-link-proc
        "sqlite3_aggregate_count"
        ffi:int
        (list '*))))
  (let ((~@17518 (unwrap-sqlite3_context* @17518)))
    (~sqlite3_aggregate_count ~@17518)))
(export sqlite3_aggregate_count)

;; int sqlite3_expired(sqlite3_stmt *);
(define ~sqlite3_expired #f)
(define (sqlite3_expired @17519)
  (unless
    ~sqlite3_expired
    (set! ~sqlite3_expired
      (fh-link-proc
        "sqlite3_expired"
        ffi:int
        (list '*))))
  (let ((~@17519 (unwrap-sqlite3_stmt* @17519)))
    (~sqlite3_expired ~@17519)))
(export sqlite3_expired)

;; int sqlite3_transfer_bindings(sqlite3_stmt *, sqlite3_stmt *);
(define ~sqlite3_transfer_bindings #f)
(define (sqlite3_transfer_bindings @17521 @17520)
  (unless
    ~sqlite3_transfer_bindings
    (set! ~sqlite3_transfer_bindings
      (fh-link-proc
        "sqlite3_transfer_bindings"
        ffi:int
        (list '* '*))))
  (let ((~@17521 (unwrap-sqlite3_stmt* @17521))
        (~@17520 (unwrap-sqlite3_stmt* @17520)))
    (~sqlite3_transfer_bindings ~@17521 ~@17520)))
(export sqlite3_transfer_bindings)

;; int sqlite3_global_recover(void);
(define ~sqlite3_global_recover #f)
(define (sqlite3_global_recover)
  (unless
    ~sqlite3_global_recover
    (set! ~sqlite3_global_recover
      (fh-link-proc
        "sqlite3_global_recover"
        ffi:int
        (list))))
  (let () (~sqlite3_global_recover)))
(export sqlite3_global_recover)

;; void sqlite3_thread_cleanup(void);
(define ~sqlite3_thread_cleanup #f)
(define (sqlite3_thread_cleanup)
  (unless
    ~sqlite3_thread_cleanup
    (set! ~sqlite3_thread_cleanup
      (fh-link-proc
        "sqlite3_thread_cleanup"
        ffi:void
        (list))))
  (let () (~sqlite3_thread_cleanup)))
(export sqlite3_thread_cleanup)

;; int sqlite3_memory_alarm(void (*)(void *, sqlite3_int64, int), void *, 
;;     sqlite3_int64);
(define ~sqlite3_memory_alarm #f)
(define (sqlite3_memory_alarm @17523 @17522 arg-2)
  (unless
    ~sqlite3_memory_alarm
    (set! ~sqlite3_memory_alarm
      (fh-link-proc
        "sqlite3_memory_alarm"
        ffi:int
        (list '* '* ffi:long))))
  (let ((~@17523
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* ffi:long ffi:int))
           @17523))
        (~@17522 (unwrap~pointer @17522))
        (~arg-2 (unwrap~fixed arg-2)))
    (~sqlite3_memory_alarm ~@17523 ~@17522 ~arg-2)))
(export sqlite3_memory_alarm)

;; const void *sqlite3_value_blob(sqlite3_value *);
(define ~sqlite3_value_blob #f)
(define (sqlite3_value_blob @17524)
  (unless
    ~sqlite3_value_blob
    (set! ~sqlite3_value_blob
      (fh-link-proc "sqlite3_value_blob" '* (list '*))))
  (let ((~@17524 (unwrap-sqlite3_value* @17524)))
    (~sqlite3_value_blob ~@17524)))
(export sqlite3_value_blob)

;; double sqlite3_value_double(sqlite3_value *);
(define ~sqlite3_value_double #f)
(define (sqlite3_value_double @17525)
  (unless
    ~sqlite3_value_double
    (set! ~sqlite3_value_double
      (fh-link-proc
        "sqlite3_value_double"
        ffi:double
        (list '*))))
  (let ((~@17525 (unwrap-sqlite3_value* @17525)))
    (~sqlite3_value_double ~@17525)))
(export sqlite3_value_double)

;; int sqlite3_value_int(sqlite3_value *);
(define ~sqlite3_value_int #f)
(define (sqlite3_value_int @17526)
  (unless
    ~sqlite3_value_int
    (set! ~sqlite3_value_int
      (fh-link-proc
        "sqlite3_value_int"
        ffi:int
        (list '*))))
  (let ((~@17526 (unwrap-sqlite3_value* @17526)))
    (~sqlite3_value_int ~@17526)))
(export sqlite3_value_int)

;; sqlite3_int64 sqlite3_value_int64(sqlite3_value *);
(define ~sqlite3_value_int64 #f)
(define (sqlite3_value_int64 @17527)
  (unless
    ~sqlite3_value_int64
    (set! ~sqlite3_value_int64
      (fh-link-proc
        "sqlite3_value_int64"
        ffi:long
        (list '*))))
  (let ((~@17527 (unwrap-sqlite3_value* @17527)))
    (~sqlite3_value_int64 ~@17527)))
(export sqlite3_value_int64)

;; void *sqlite3_value_pointer(sqlite3_value *, const char *);
(define ~sqlite3_value_pointer #f)
(define (sqlite3_value_pointer @17529 @17528)
  (unless
    ~sqlite3_value_pointer
    (set! ~sqlite3_value_pointer
      (fh-link-proc
        "sqlite3_value_pointer"
        '*
        (list '* '*))))
  (let ((~@17529 (unwrap-sqlite3_value* @17529))
        (~@17528 (unwrap~pointer @17528)))
    (~sqlite3_value_pointer ~@17529 ~@17528)))
(export sqlite3_value_pointer)

;; const unsigned char *sqlite3_value_text(sqlite3_value *);
(define ~sqlite3_value_text #f)
(define (sqlite3_value_text @17530)
  (unless
    ~sqlite3_value_text
    (set! ~sqlite3_value_text
      (fh-link-proc "sqlite3_value_text" '* (list '*))))
  (let ((~@17530 (unwrap-sqlite3_value* @17530)))
    (~sqlite3_value_text ~@17530)))
(export sqlite3_value_text)

;; const void *sqlite3_value_text16(sqlite3_value *);
(define ~sqlite3_value_text16 #f)
(define (sqlite3_value_text16 @17531)
  (unless
    ~sqlite3_value_text16
    (set! ~sqlite3_value_text16
      (fh-link-proc
        "sqlite3_value_text16"
        '*
        (list '*))))
  (let ((~@17531 (unwrap-sqlite3_value* @17531)))
    (~sqlite3_value_text16 ~@17531)))
(export sqlite3_value_text16)

;; const void *sqlite3_value_text16le(sqlite3_value *);
(define ~sqlite3_value_text16le #f)
(define (sqlite3_value_text16le @17532)
  (unless
    ~sqlite3_value_text16le
    (set! ~sqlite3_value_text16le
      (fh-link-proc
        "sqlite3_value_text16le"
        '*
        (list '*))))
  (let ((~@17532 (unwrap-sqlite3_value* @17532)))
    (~sqlite3_value_text16le ~@17532)))
(export sqlite3_value_text16le)

;; const void *sqlite3_value_text16be(sqlite3_value *);
(define ~sqlite3_value_text16be #f)
(define (sqlite3_value_text16be @17533)
  (unless
    ~sqlite3_value_text16be
    (set! ~sqlite3_value_text16be
      (fh-link-proc
        "sqlite3_value_text16be"
        '*
        (list '*))))
  (let ((~@17533 (unwrap-sqlite3_value* @17533)))
    (~sqlite3_value_text16be ~@17533)))
(export sqlite3_value_text16be)

;; int sqlite3_value_bytes(sqlite3_value *);
(define ~sqlite3_value_bytes #f)
(define (sqlite3_value_bytes @17534)
  (unless
    ~sqlite3_value_bytes
    (set! ~sqlite3_value_bytes
      (fh-link-proc
        "sqlite3_value_bytes"
        ffi:int
        (list '*))))
  (let ((~@17534 (unwrap-sqlite3_value* @17534)))
    (~sqlite3_value_bytes ~@17534)))
(export sqlite3_value_bytes)

;; int sqlite3_value_bytes16(sqlite3_value *);
(define ~sqlite3_value_bytes16 #f)
(define (sqlite3_value_bytes16 @17535)
  (unless
    ~sqlite3_value_bytes16
    (set! ~sqlite3_value_bytes16
      (fh-link-proc
        "sqlite3_value_bytes16"
        ffi:int
        (list '*))))
  (let ((~@17535 (unwrap-sqlite3_value* @17535)))
    (~sqlite3_value_bytes16 ~@17535)))
(export sqlite3_value_bytes16)

;; int sqlite3_value_type(sqlite3_value *);
(define ~sqlite3_value_type #f)
(define (sqlite3_value_type @17536)
  (unless
    ~sqlite3_value_type
    (set! ~sqlite3_value_type
      (fh-link-proc
        "sqlite3_value_type"
        ffi:int
        (list '*))))
  (let ((~@17536 (unwrap-sqlite3_value* @17536)))
    (~sqlite3_value_type ~@17536)))
(export sqlite3_value_type)

;; int sqlite3_value_numeric_type(sqlite3_value *);
(define ~sqlite3_value_numeric_type #f)
(define (sqlite3_value_numeric_type @17537)
  (unless
    ~sqlite3_value_numeric_type
    (set! ~sqlite3_value_numeric_type
      (fh-link-proc
        "sqlite3_value_numeric_type"
        ffi:int
        (list '*))))
  (let ((~@17537 (unwrap-sqlite3_value* @17537)))
    (~sqlite3_value_numeric_type ~@17537)))
(export sqlite3_value_numeric_type)

;; unsigned int sqlite3_value_subtype(sqlite3_value *);
(define ~sqlite3_value_subtype #f)
(define (sqlite3_value_subtype @17538)
  (unless
    ~sqlite3_value_subtype
    (set! ~sqlite3_value_subtype
      (fh-link-proc
        "sqlite3_value_subtype"
        ffi:unsigned-int
        (list '*))))
  (let ((~@17538 (unwrap-sqlite3_value* @17538)))
    (~sqlite3_value_subtype ~@17538)))
(export sqlite3_value_subtype)

;; sqlite3_value *sqlite3_value_dup(const sqlite3_value *);
(define ~sqlite3_value_dup #f)
(define (sqlite3_value_dup @17539)
  (unless
    ~sqlite3_value_dup
    (set! ~sqlite3_value_dup
      (fh-link-proc "sqlite3_value_dup" '* (list '*))))
  (let ((~@17539 (unwrap-sqlite3_value* @17539)))
    (wrap-sqlite3_value*
      (~sqlite3_value_dup ~@17539))))
(export sqlite3_value_dup)

;; void sqlite3_value_free(sqlite3_value *);
(define ~sqlite3_value_free #f)
(define (sqlite3_value_free @17540)
  (unless
    ~sqlite3_value_free
    (set! ~sqlite3_value_free
      (fh-link-proc
        "sqlite3_value_free"
        ffi:void
        (list '*))))
  (let ((~@17540 (unwrap-sqlite3_value* @17540)))
    (~sqlite3_value_free ~@17540)))
(export sqlite3_value_free)

;; void *sqlite3_aggregate_context(sqlite3_context *, int nBytes);
(define ~sqlite3_aggregate_context #f)
(define (sqlite3_aggregate_context @17541 nBytes)
  (unless
    ~sqlite3_aggregate_context
    (set! ~sqlite3_aggregate_context
      (fh-link-proc
        "sqlite3_aggregate_context"
        '*
        (list '* ffi:int))))
  (let ((~@17541 (unwrap-sqlite3_context* @17541))
        (~nBytes (unwrap~fixed nBytes)))
    (~sqlite3_aggregate_context ~@17541 ~nBytes)))
(export sqlite3_aggregate_context)

;; void *sqlite3_user_data(sqlite3_context *);
(define ~sqlite3_user_data #f)
(define (sqlite3_user_data @17542)
  (unless
    ~sqlite3_user_data
    (set! ~sqlite3_user_data
      (fh-link-proc "sqlite3_user_data" '* (list '*))))
  (let ((~@17542 (unwrap-sqlite3_context* @17542)))
    (~sqlite3_user_data ~@17542)))
(export sqlite3_user_data)

;; sqlite3 *sqlite3_context_db_handle(sqlite3_context *);
(define ~sqlite3_context_db_handle #f)
(define (sqlite3_context_db_handle @17543)
  (unless
    ~sqlite3_context_db_handle
    (set! ~sqlite3_context_db_handle
      (fh-link-proc
        "sqlite3_context_db_handle"
        '*
        (list '*))))
  (let ((~@17543 (unwrap-sqlite3_context* @17543)))
    (wrap-sqlite3*
      (~sqlite3_context_db_handle ~@17543))))
(export sqlite3_context_db_handle)

;; void *sqlite3_get_auxdata(sqlite3_context *, int N);
(define ~sqlite3_get_auxdata #f)
(define (sqlite3_get_auxdata @17544 N)
  (unless
    ~sqlite3_get_auxdata
    (set! ~sqlite3_get_auxdata
      (fh-link-proc
        "sqlite3_get_auxdata"
        '*
        (list '* ffi:int))))
  (let ((~@17544 (unwrap-sqlite3_context* @17544))
        (~N (unwrap~fixed N)))
    (~sqlite3_get_auxdata ~@17544 ~N)))
(export sqlite3_get_auxdata)

;; void sqlite3_set_auxdata(sqlite3_context *, int N, void *, void (*)(void *))
;;     ;
(define ~sqlite3_set_auxdata #f)
(define (sqlite3_set_auxdata @17547 N @17546 @17545)
  (unless
    ~sqlite3_set_auxdata
    (set! ~sqlite3_set_auxdata
      (fh-link-proc
        "sqlite3_set_auxdata"
        ffi:void
        (list '* ffi:int '* '*))))
  (let ((~@17547 (unwrap-sqlite3_context* @17547))
        (~N (unwrap~fixed N))
        (~@17546 (unwrap~pointer @17546))
        (~@17545
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17545)))
    (~sqlite3_set_auxdata ~@17547 ~N ~@17546 ~@17545)))
(export sqlite3_set_auxdata)

;; typedef void (*sqlite3_destructor_type)(void *);
(define-fh-function/p sqlite3_destructor_type
  ffi:void (list (quote *)))

;; void sqlite3_result_blob(sqlite3_context *, const void *, int, void (*)(void
;;      *));
(define ~sqlite3_result_blob #f)
(define (sqlite3_result_blob @17550 @17549 arg-2 @17548)
  (unless
    ~sqlite3_result_blob
    (set! ~sqlite3_result_blob
      (fh-link-proc
        "sqlite3_result_blob"
        ffi:void
        (list '* '* ffi:int '*))))
  (let ((~@17550 (unwrap-sqlite3_context* @17550))
        (~@17549 (unwrap~pointer @17549))
        (~arg-2 (unwrap~fixed arg-2))
        (~@17548
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17548)))
    (~sqlite3_result_blob
      ~@17550
      ~@17549
      ~arg-2
      ~@17548)))
(export sqlite3_result_blob)

;; void sqlite3_result_blob64(sqlite3_context *, const void *, sqlite3_uint64, 
;;     void (*)(void *));
(define ~sqlite3_result_blob64 #f)
(define (sqlite3_result_blob64
         @17553
         @17552
         arg-2
         @17551)
  (unless
    ~sqlite3_result_blob64
    (set! ~sqlite3_result_blob64
      (fh-link-proc
        "sqlite3_result_blob64"
        ffi:void
        (list '* '* ffi:unsigned-long '*))))
  (let ((~@17553 (unwrap-sqlite3_context* @17553))
        (~@17552 (unwrap~pointer @17552))
        (~arg-2 (unwrap~fixed arg-2))
        (~@17551
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17551)))
    (~sqlite3_result_blob64
      ~@17553
      ~@17552
      ~arg-2
      ~@17551)))
(export sqlite3_result_blob64)

;; void sqlite3_result_double(sqlite3_context *, double);
(define ~sqlite3_result_double #f)
(define (sqlite3_result_double @17554 arg-1)
  (unless
    ~sqlite3_result_double
    (set! ~sqlite3_result_double
      (fh-link-proc
        "sqlite3_result_double"
        ffi:void
        (list '* ffi:double))))
  (let ((~@17554 (unwrap-sqlite3_context* @17554))
        (~arg-1 (unwrap~float arg-1)))
    (~sqlite3_result_double ~@17554 ~arg-1)))
(export sqlite3_result_double)

;; void sqlite3_result_error(sqlite3_context *, const char *, int);
(define ~sqlite3_result_error #f)
(define (sqlite3_result_error @17556 @17555 arg-2)
  (unless
    ~sqlite3_result_error
    (set! ~sqlite3_result_error
      (fh-link-proc
        "sqlite3_result_error"
        ffi:void
        (list '* '* ffi:int))))
  (let ((~@17556 (unwrap-sqlite3_context* @17556))
        (~@17555 (unwrap~pointer @17555))
        (~arg-2 (unwrap~fixed arg-2)))
    (~sqlite3_result_error ~@17556 ~@17555 ~arg-2)))
(export sqlite3_result_error)

;; void sqlite3_result_error16(sqlite3_context *, const void *, int);
(define ~sqlite3_result_error16 #f)
(define (sqlite3_result_error16 @17558 @17557 arg-2)
  (unless
    ~sqlite3_result_error16
    (set! ~sqlite3_result_error16
      (fh-link-proc
        "sqlite3_result_error16"
        ffi:void
        (list '* '* ffi:int))))
  (let ((~@17558 (unwrap-sqlite3_context* @17558))
        (~@17557 (unwrap~pointer @17557))
        (~arg-2 (unwrap~fixed arg-2)))
    (~sqlite3_result_error16 ~@17558 ~@17557 ~arg-2)))
(export sqlite3_result_error16)

;; void sqlite3_result_error_toobig(sqlite3_context *);
(define ~sqlite3_result_error_toobig #f)
(define (sqlite3_result_error_toobig @17559)
  (unless
    ~sqlite3_result_error_toobig
    (set! ~sqlite3_result_error_toobig
      (fh-link-proc
        "sqlite3_result_error_toobig"
        ffi:void
        (list '*))))
  (let ((~@17559 (unwrap-sqlite3_context* @17559)))
    (~sqlite3_result_error_toobig ~@17559)))
(export sqlite3_result_error_toobig)

;; void sqlite3_result_error_nomem(sqlite3_context *);
(define ~sqlite3_result_error_nomem #f)
(define (sqlite3_result_error_nomem @17560)
  (unless
    ~sqlite3_result_error_nomem
    (set! ~sqlite3_result_error_nomem
      (fh-link-proc
        "sqlite3_result_error_nomem"
        ffi:void
        (list '*))))
  (let ((~@17560 (unwrap-sqlite3_context* @17560)))
    (~sqlite3_result_error_nomem ~@17560)))
(export sqlite3_result_error_nomem)

;; void sqlite3_result_error_code(sqlite3_context *, int);
(define ~sqlite3_result_error_code #f)
(define (sqlite3_result_error_code @17561 arg-1)
  (unless
    ~sqlite3_result_error_code
    (set! ~sqlite3_result_error_code
      (fh-link-proc
        "sqlite3_result_error_code"
        ffi:void
        (list '* ffi:int))))
  (let ((~@17561 (unwrap-sqlite3_context* @17561))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_result_error_code ~@17561 ~arg-1)))
(export sqlite3_result_error_code)

;; void sqlite3_result_int(sqlite3_context *, int);
(define ~sqlite3_result_int #f)
(define (sqlite3_result_int @17562 arg-1)
  (unless
    ~sqlite3_result_int
    (set! ~sqlite3_result_int
      (fh-link-proc
        "sqlite3_result_int"
        ffi:void
        (list '* ffi:int))))
  (let ((~@17562 (unwrap-sqlite3_context* @17562))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_result_int ~@17562 ~arg-1)))
(export sqlite3_result_int)

;; void sqlite3_result_int64(sqlite3_context *, sqlite3_int64);
(define ~sqlite3_result_int64 #f)
(define (sqlite3_result_int64 @17563 arg-1)
  (unless
    ~sqlite3_result_int64
    (set! ~sqlite3_result_int64
      (fh-link-proc
        "sqlite3_result_int64"
        ffi:void
        (list '* ffi:long))))
  (let ((~@17563 (unwrap-sqlite3_context* @17563))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_result_int64 ~@17563 ~arg-1)))
(export sqlite3_result_int64)

;; void sqlite3_result_null(sqlite3_context *);
(define ~sqlite3_result_null #f)
(define (sqlite3_result_null @17564)
  (unless
    ~sqlite3_result_null
    (set! ~sqlite3_result_null
      (fh-link-proc
        "sqlite3_result_null"
        ffi:void
        (list '*))))
  (let ((~@17564 (unwrap-sqlite3_context* @17564)))
    (~sqlite3_result_null ~@17564)))
(export sqlite3_result_null)

;; void sqlite3_result_text(sqlite3_context *, const char *, int, void (*)(void
;;      *));
(define ~sqlite3_result_text #f)
(define (sqlite3_result_text @17567 @17566 arg-2 @17565)
  (unless
    ~sqlite3_result_text
    (set! ~sqlite3_result_text
      (fh-link-proc
        "sqlite3_result_text"
        ffi:void
        (list '* '* ffi:int '*))))
  (let ((~@17567 (unwrap-sqlite3_context* @17567))
        (~@17566 (unwrap~pointer @17566))
        (~arg-2 (unwrap~fixed arg-2))
        (~@17565
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17565)))
    (~sqlite3_result_text
      ~@17567
      ~@17566
      ~arg-2
      ~@17565)))
(export sqlite3_result_text)

;; void sqlite3_result_text64(sqlite3_context *, const char *, sqlite3_uint64, 
;;     void (*)(void *), unsigned char encoding);
(define ~sqlite3_result_text64 #f)
(define (sqlite3_result_text64
         @17570
         @17569
         arg-2
         @17568
         encoding)
  (unless
    ~sqlite3_result_text64
    (set! ~sqlite3_result_text64
      (fh-link-proc
        "sqlite3_result_text64"
        ffi:void
        (list '*
              '*
              ffi:unsigned-long
              '*
              ffi:unsigned-int))))
  (let ((~@17570 (unwrap-sqlite3_context* @17570))
        (~@17569 (unwrap~pointer @17569))
        (~arg-2 (unwrap~fixed arg-2))
        (~@17568
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17568))
        (~encoding (unwrap~fixed encoding)))
    (~sqlite3_result_text64
      ~@17570
      ~@17569
      ~arg-2
      ~@17568
      ~encoding)))
(export sqlite3_result_text64)

;; void sqlite3_result_text16(sqlite3_context *, const void *, int, void (*)(
;;     void *));
(define ~sqlite3_result_text16 #f)
(define (sqlite3_result_text16
         @17573
         @17572
         arg-2
         @17571)
  (unless
    ~sqlite3_result_text16
    (set! ~sqlite3_result_text16
      (fh-link-proc
        "sqlite3_result_text16"
        ffi:void
        (list '* '* ffi:int '*))))
  (let ((~@17573 (unwrap-sqlite3_context* @17573))
        (~@17572 (unwrap~pointer @17572))
        (~arg-2 (unwrap~fixed arg-2))
        (~@17571
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17571)))
    (~sqlite3_result_text16
      ~@17573
      ~@17572
      ~arg-2
      ~@17571)))
(export sqlite3_result_text16)

;; void sqlite3_result_text16le(sqlite3_context *, const void *, int, void (*)(
;;     void *));
(define ~sqlite3_result_text16le #f)
(define (sqlite3_result_text16le
         @17576
         @17575
         arg-2
         @17574)
  (unless
    ~sqlite3_result_text16le
    (set! ~sqlite3_result_text16le
      (fh-link-proc
        "sqlite3_result_text16le"
        ffi:void
        (list '* '* ffi:int '*))))
  (let ((~@17576 (unwrap-sqlite3_context* @17576))
        (~@17575 (unwrap~pointer @17575))
        (~arg-2 (unwrap~fixed arg-2))
        (~@17574
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17574)))
    (~sqlite3_result_text16le
      ~@17576
      ~@17575
      ~arg-2
      ~@17574)))
(export sqlite3_result_text16le)

;; void sqlite3_result_text16be(sqlite3_context *, const void *, int, void (*)(
;;     void *));
(define ~sqlite3_result_text16be #f)
(define (sqlite3_result_text16be
         @17579
         @17578
         arg-2
         @17577)
  (unless
    ~sqlite3_result_text16be
    (set! ~sqlite3_result_text16be
      (fh-link-proc
        "sqlite3_result_text16be"
        ffi:void
        (list '* '* ffi:int '*))))
  (let ((~@17579 (unwrap-sqlite3_context* @17579))
        (~@17578 (unwrap~pointer @17578))
        (~arg-2 (unwrap~fixed arg-2))
        (~@17577
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17577)))
    (~sqlite3_result_text16be
      ~@17579
      ~@17578
      ~arg-2
      ~@17577)))
(export sqlite3_result_text16be)

;; void sqlite3_result_value(sqlite3_context *, sqlite3_value *);
(define ~sqlite3_result_value #f)
(define (sqlite3_result_value @17581 @17580)
  (unless
    ~sqlite3_result_value
    (set! ~sqlite3_result_value
      (fh-link-proc
        "sqlite3_result_value"
        ffi:void
        (list '* '*))))
  (let ((~@17581 (unwrap-sqlite3_context* @17581))
        (~@17580 (unwrap-sqlite3_value* @17580)))
    (~sqlite3_result_value ~@17581 ~@17580)))
(export sqlite3_result_value)

;; void sqlite3_result_pointer(sqlite3_context *, void *, const char *, void (*
;;     )(void *));
(define ~sqlite3_result_pointer #f)
(define (sqlite3_result_pointer
         @17585
         @17584
         @17583
         @17582)
  (unless
    ~sqlite3_result_pointer
    (set! ~sqlite3_result_pointer
      (fh-link-proc
        "sqlite3_result_pointer"
        ffi:void
        (list '* '* '* '*))))
  (let ((~@17585 (unwrap-sqlite3_context* @17585))
        (~@17584 (unwrap~pointer @17584))
        (~@17583 (unwrap~pointer @17583))
        (~@17582
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17582)))
    (~sqlite3_result_pointer
      ~@17585
      ~@17584
      ~@17583
      ~@17582)))
(export sqlite3_result_pointer)

;; void sqlite3_result_zeroblob(sqlite3_context *, int n);
(define ~sqlite3_result_zeroblob #f)
(define (sqlite3_result_zeroblob @17586 n)
  (unless
    ~sqlite3_result_zeroblob
    (set! ~sqlite3_result_zeroblob
      (fh-link-proc
        "sqlite3_result_zeroblob"
        ffi:void
        (list '* ffi:int))))
  (let ((~@17586 (unwrap-sqlite3_context* @17586))
        (~n (unwrap~fixed n)))
    (~sqlite3_result_zeroblob ~@17586 ~n)))
(export sqlite3_result_zeroblob)

;; int sqlite3_result_zeroblob64(sqlite3_context *, sqlite3_uint64 n);
(define ~sqlite3_result_zeroblob64 #f)
(define (sqlite3_result_zeroblob64 @17587 n)
  (unless
    ~sqlite3_result_zeroblob64
    (set! ~sqlite3_result_zeroblob64
      (fh-link-proc
        "sqlite3_result_zeroblob64"
        ffi:int
        (list '* ffi:unsigned-long))))
  (let ((~@17587 (unwrap-sqlite3_context* @17587))
        (~n (unwrap~fixed n)))
    (~sqlite3_result_zeroblob64 ~@17587 ~n)))
(export sqlite3_result_zeroblob64)

;; void sqlite3_result_subtype(sqlite3_context *, unsigned int);
(define ~sqlite3_result_subtype #f)
(define (sqlite3_result_subtype @17588 arg-1)
  (unless
    ~sqlite3_result_subtype
    (set! ~sqlite3_result_subtype
      (fh-link-proc
        "sqlite3_result_subtype"
        ffi:void
        (list '* ffi:unsigned-int))))
  (let ((~@17588 (unwrap-sqlite3_context* @17588))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_result_subtype ~@17588 ~arg-1)))
(export sqlite3_result_subtype)

;; int sqlite3_create_collation(sqlite3 *, const char *zName, int eTextRep, 
;;     void *pArg, int (*xCompare)(void *, int, const void *, int, const void *
;;     ));
(define ~sqlite3_create_collation #f)
(define (sqlite3_create_collation
         @17589
         zName
         eTextRep
         pArg
         xCompare)
  (unless
    ~sqlite3_create_collation
    (set! ~sqlite3_create_collation
      (fh-link-proc
        "sqlite3_create_collation"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~@17589 (unwrap-sqlite3* @17589))
        (~zName (unwrap~pointer zName))
        (~eTextRep (unwrap~fixed eTextRep))
        (~pArg (unwrap~pointer pArg))
        (~xCompare
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* ffi:int '* ffi:int '*))
           xCompare)))
    (~sqlite3_create_collation
      ~@17589
      ~zName
      ~eTextRep
      ~pArg
      ~xCompare)))
(export sqlite3_create_collation)

;; int sqlite3_create_collation_v2(sqlite3 *, const char *zName, int eTextRep, 
;;     void *pArg, int (*xCompare)(void *, int, const void *, int, const void *
;;     ), void (*xDestroy)(void *));
(define ~sqlite3_create_collation_v2 #f)
(define (sqlite3_create_collation_v2
         @17590
         zName
         eTextRep
         pArg
         xCompare
         xDestroy)
  (unless
    ~sqlite3_create_collation_v2
    (set! ~sqlite3_create_collation_v2
      (fh-link-proc
        "sqlite3_create_collation_v2"
        ffi:int
        (list '* '* ffi:int '* '* '*))))
  (let ((~@17590 (unwrap-sqlite3* @17590))
        (~zName (unwrap~pointer zName))
        (~eTextRep (unwrap~fixed eTextRep))
        (~pArg (unwrap~pointer pArg))
        (~xCompare
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* ffi:int '* ffi:int '*))
           xCompare))
        (~xDestroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           xDestroy)))
    (~sqlite3_create_collation_v2
      ~@17590
      ~zName
      ~eTextRep
      ~pArg
      ~xCompare
      ~xDestroy)))
(export sqlite3_create_collation_v2)

;; int sqlite3_create_collation16(sqlite3 *, const void *zName, int eTextRep, 
;;     void *pArg, int (*xCompare)(void *, int, const void *, int, const void *
;;     ));
(define ~sqlite3_create_collation16 #f)
(define (sqlite3_create_collation16
         @17591
         zName
         eTextRep
         pArg
         xCompare)
  (unless
    ~sqlite3_create_collation16
    (set! ~sqlite3_create_collation16
      (fh-link-proc
        "sqlite3_create_collation16"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~@17591 (unwrap-sqlite3* @17591))
        (~zName (unwrap~pointer zName))
        (~eTextRep (unwrap~fixed eTextRep))
        (~pArg (unwrap~pointer pArg))
        (~xCompare
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* ffi:int '* ffi:int '*))
           xCompare)))
    (~sqlite3_create_collation16
      ~@17591
      ~zName
      ~eTextRep
      ~pArg
      ~xCompare)))
(export sqlite3_create_collation16)

;; int sqlite3_collation_needed(sqlite3 *, void *, void (*)(void *, sqlite3 *, 
;;     int eTextRep, const char *));
(define ~sqlite3_collation_needed #f)
(define (sqlite3_collation_needed @17594 @17593 @17592)
  (unless
    ~sqlite3_collation_needed
    (set! ~sqlite3_collation_needed
      (fh-link-proc
        "sqlite3_collation_needed"
        ffi:int
        (list '* '* '*))))
  (let ((~@17594 (unwrap-sqlite3* @17594))
        (~@17593 (unwrap~pointer @17593))
        (~@17592
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* ffi:int '*))
           @17592)))
    (~sqlite3_collation_needed
      ~@17594
      ~@17593
      ~@17592)))
(export sqlite3_collation_needed)

;; int sqlite3_collation_needed16(sqlite3 *, void *, void (*)(void *, sqlite3 *
;;     , int eTextRep, const void *));
(define ~sqlite3_collation_needed16 #f)
(define (sqlite3_collation_needed16 @17597 @17596 @17595)
  (unless
    ~sqlite3_collation_needed16
    (set! ~sqlite3_collation_needed16
      (fh-link-proc
        "sqlite3_collation_needed16"
        ffi:int
        (list '* '* '*))))
  (let ((~@17597 (unwrap-sqlite3* @17597))
        (~@17596 (unwrap~pointer @17596))
        (~@17595
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* '* ffi:int '*))
           @17595)))
    (~sqlite3_collation_needed16
      ~@17597
      ~@17596
      ~@17595)))
(export sqlite3_collation_needed16)

;; int sqlite3_sleep(int);
(define ~sqlite3_sleep #f)
(define (sqlite3_sleep arg-0)
  (unless
    ~sqlite3_sleep
    (set! ~sqlite3_sleep
      (fh-link-proc
        "sqlite3_sleep"
        ffi:int
        (list ffi:int))))
  (let ((~arg-0 (unwrap~fixed arg-0)))
    (~sqlite3_sleep ~arg-0)))
(export sqlite3_sleep)

;; extern char *sqlite3_temp_directory;
(define sqlite3_temp_directory (dynamic-pointer "sqlite3_temp_directory" (dynamic-link)))

;; extern char *sqlite3_data_directory;
(define sqlite3_data_directory (dynamic-pointer "sqlite3_data_directory" (dynamic-link)))

;; int sqlite3_get_autocommit(sqlite3 *);
(define ~sqlite3_get_autocommit #f)
(define (sqlite3_get_autocommit @17598)
  (unless
    ~sqlite3_get_autocommit
    (set! ~sqlite3_get_autocommit
      (fh-link-proc
        "sqlite3_get_autocommit"
        ffi:int
        (list '*))))
  (let ((~@17598 (unwrap-sqlite3* @17598)))
    (~sqlite3_get_autocommit ~@17598)))
(export sqlite3_get_autocommit)

;; sqlite3 *sqlite3_db_handle(sqlite3_stmt *);
(define ~sqlite3_db_handle #f)
(define (sqlite3_db_handle @17599)
  (unless
    ~sqlite3_db_handle
    (set! ~sqlite3_db_handle
      (fh-link-proc "sqlite3_db_handle" '* (list '*))))
  (let ((~@17599 (unwrap-sqlite3_stmt* @17599)))
    (wrap-sqlite3* (~sqlite3_db_handle ~@17599))))
(export sqlite3_db_handle)

;; const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName);
(define ~sqlite3_db_filename #f)
(define (sqlite3_db_filename db zDbName)
  (unless
    ~sqlite3_db_filename
    (set! ~sqlite3_db_filename
      (fh-link-proc
        "sqlite3_db_filename"
        '*
        (list '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zDbName (unwrap~pointer zDbName)))
    (~sqlite3_db_filename ~db ~zDbName)))
(export sqlite3_db_filename)

;; int sqlite3_db_readonly(sqlite3 *db, const char *zDbName);
(define ~sqlite3_db_readonly #f)
(define (sqlite3_db_readonly db zDbName)
  (unless
    ~sqlite3_db_readonly
    (set! ~sqlite3_db_readonly
      (fh-link-proc
        "sqlite3_db_readonly"
        ffi:int
        (list '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zDbName (unwrap~pointer zDbName)))
    (~sqlite3_db_readonly ~db ~zDbName)))
(export sqlite3_db_readonly)

;; sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt);
(define ~sqlite3_next_stmt #f)
(define (sqlite3_next_stmt pDb pStmt)
  (unless
    ~sqlite3_next_stmt
    (set! ~sqlite3_next_stmt
      (fh-link-proc
        "sqlite3_next_stmt"
        '*
        (list '* '*))))
  (let ((~pDb (unwrap-sqlite3* pDb))
        (~pStmt (unwrap-sqlite3_stmt* pStmt)))
    (wrap-sqlite3_stmt*
      (~sqlite3_next_stmt ~pDb ~pStmt))))
(export sqlite3_next_stmt)

;; void *sqlite3_commit_hook(sqlite3 *, int (*)(void *), void *);
(define ~sqlite3_commit_hook #f)
(define (sqlite3_commit_hook @17602 @17601 @17600)
  (unless
    ~sqlite3_commit_hook
    (set! ~sqlite3_commit_hook
      (fh-link-proc
        "sqlite3_commit_hook"
        '*
        (list '* '* '*))))
  (let ((~@17602 (unwrap-sqlite3* @17602))
        (~@17601
          ((make-ftn-arg-unwrapper ffi:int (list '*))
           @17601))
        (~@17600 (unwrap~pointer @17600)))
    (~sqlite3_commit_hook ~@17602 ~@17601 ~@17600)))
(export sqlite3_commit_hook)

;; void *sqlite3_rollback_hook(sqlite3 *, void (*)(void *), void *);
(define ~sqlite3_rollback_hook #f)
(define (sqlite3_rollback_hook @17605 @17604 @17603)
  (unless
    ~sqlite3_rollback_hook
    (set! ~sqlite3_rollback_hook
      (fh-link-proc
        "sqlite3_rollback_hook"
        '*
        (list '* '* '*))))
  (let ((~@17605 (unwrap-sqlite3* @17605))
        (~@17604
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           @17604))
        (~@17603 (unwrap~pointer @17603)))
    (~sqlite3_rollback_hook ~@17605 ~@17604 ~@17603)))
(export sqlite3_rollback_hook)

;; void *sqlite3_update_hook(sqlite3 *, void (*)(void *, int, char const *, 
;;     char const *, sqlite3_int64), void *);
(define ~sqlite3_update_hook #f)
(define (sqlite3_update_hook @17608 @17607 @17606)
  (unless
    ~sqlite3_update_hook
    (set! ~sqlite3_update_hook
      (fh-link-proc
        "sqlite3_update_hook"
        '*
        (list '* '* '*))))
  (let ((~@17608 (unwrap-sqlite3* @17608))
        (~@17607
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* ffi:int '* '* ffi:long))
           @17607))
        (~@17606 (unwrap~pointer @17606)))
    (~sqlite3_update_hook ~@17608 ~@17607 ~@17606)))
(export sqlite3_update_hook)

;; int sqlite3_enable_shared_cache(int);
(define ~sqlite3_enable_shared_cache #f)
(define (sqlite3_enable_shared_cache arg-0)
  (unless
    ~sqlite3_enable_shared_cache
    (set! ~sqlite3_enable_shared_cache
      (fh-link-proc
        "sqlite3_enable_shared_cache"
        ffi:int
        (list ffi:int))))
  (let ((~arg-0 (unwrap~fixed arg-0)))
    (~sqlite3_enable_shared_cache ~arg-0)))
(export sqlite3_enable_shared_cache)

;; int sqlite3_release_memory(int);
(define ~sqlite3_release_memory #f)
(define (sqlite3_release_memory arg-0)
  (unless
    ~sqlite3_release_memory
    (set! ~sqlite3_release_memory
      (fh-link-proc
        "sqlite3_release_memory"
        ffi:int
        (list ffi:int))))
  (let ((~arg-0 (unwrap~fixed arg-0)))
    (~sqlite3_release_memory ~arg-0)))
(export sqlite3_release_memory)

;; int sqlite3_db_release_memory(sqlite3 *);
(define ~sqlite3_db_release_memory #f)
(define (sqlite3_db_release_memory @17609)
  (unless
    ~sqlite3_db_release_memory
    (set! ~sqlite3_db_release_memory
      (fh-link-proc
        "sqlite3_db_release_memory"
        ffi:int
        (list '*))))
  (let ((~@17609 (unwrap-sqlite3* @17609)))
    (~sqlite3_db_release_memory ~@17609)))
(export sqlite3_db_release_memory)

;; sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);
(define ~sqlite3_soft_heap_limit64 #f)
(define (sqlite3_soft_heap_limit64 N)
  (unless
    ~sqlite3_soft_heap_limit64
    (set! ~sqlite3_soft_heap_limit64
      (fh-link-proc
        "sqlite3_soft_heap_limit64"
        ffi:long
        (list ffi:long))))
  (let ((~N (unwrap~fixed N)))
    (~sqlite3_soft_heap_limit64 ~N)))
(export sqlite3_soft_heap_limit64)

;; void sqlite3_soft_heap_limit(int N);
(define ~sqlite3_soft_heap_limit #f)
(define (sqlite3_soft_heap_limit N)
  (unless
    ~sqlite3_soft_heap_limit
    (set! ~sqlite3_soft_heap_limit
      (fh-link-proc
        "sqlite3_soft_heap_limit"
        ffi:void
        (list ffi:int))))
  (let ((~N (unwrap~fixed N)))
    (~sqlite3_soft_heap_limit ~N)))
(export sqlite3_soft_heap_limit)

;; int sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const 
;;     char *zTableName, const char *zColumnName, char const **pzDataType, char
;;      const **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc);
(define ~sqlite3_table_column_metadata #f)
(define (sqlite3_table_column_metadata
         db
         zDbName
         zTableName
         zColumnName
         pzDataType
         pzCollSeq
         pNotNull
         pPrimaryKey
         pAutoinc)
  (unless
    ~sqlite3_table_column_metadata
    (set! ~sqlite3_table_column_metadata
      (fh-link-proc
        "sqlite3_table_column_metadata"
        ffi:int
        (list '* '* '* '* '* '* '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zDbName (unwrap~pointer zDbName))
        (~zTableName (unwrap~pointer zTableName))
        (~zColumnName (unwrap~pointer zColumnName))
        (~pzDataType (unwrap~pointer pzDataType))
        (~pzCollSeq (unwrap~pointer pzCollSeq))
        (~pNotNull (unwrap~pointer pNotNull))
        (~pPrimaryKey (unwrap~pointer pPrimaryKey))
        (~pAutoinc (unwrap~pointer pAutoinc)))
    (~sqlite3_table_column_metadata
      ~db
      ~zDbName
      ~zTableName
      ~zColumnName
      ~pzDataType
      ~pzCollSeq
      ~pNotNull
      ~pPrimaryKey
      ~pAutoinc)))
(export sqlite3_table_column_metadata)

;; int sqlite3_load_extension(sqlite3 *db, const char *zFile, const char *zProc
;;     , char **pzErrMsg);
(define ~sqlite3_load_extension #f)
(define (sqlite3_load_extension db zFile zProc pzErrMsg)
  (unless
    ~sqlite3_load_extension
    (set! ~sqlite3_load_extension
      (fh-link-proc
        "sqlite3_load_extension"
        ffi:int
        (list '* '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zFile (unwrap~pointer zFile))
        (~zProc (unwrap~pointer zProc))
        (~pzErrMsg (unwrap~pointer pzErrMsg)))
    (~sqlite3_load_extension
      ~db
      ~zFile
      ~zProc
      ~pzErrMsg)))
(export sqlite3_load_extension)

;; int sqlite3_enable_load_extension(sqlite3 *db, int onoff);
(define ~sqlite3_enable_load_extension #f)
(define (sqlite3_enable_load_extension db onoff)
  (unless
    ~sqlite3_enable_load_extension
    (set! ~sqlite3_enable_load_extension
      (fh-link-proc
        "sqlite3_enable_load_extension"
        ffi:int
        (list '* ffi:int))))
  (let ((~db (unwrap-sqlite3* db))
        (~onoff (unwrap~fixed onoff)))
    (~sqlite3_enable_load_extension ~db ~onoff)))
(export sqlite3_enable_load_extension)

;; int sqlite3_auto_extension(void (*xEntryPoint)(void));
(define ~sqlite3_auto_extension #f)
(define (sqlite3_auto_extension xEntryPoint)
  (unless
    ~sqlite3_auto_extension
    (set! ~sqlite3_auto_extension
      (fh-link-proc
        "sqlite3_auto_extension"
        ffi:int
        (list '*))))
  (let ((~xEntryPoint
          ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
           xEntryPoint)))
    (~sqlite3_auto_extension ~xEntryPoint)))
(export sqlite3_auto_extension)

;; int sqlite3_cancel_auto_extension(void (*xEntryPoint)(void));
(define ~sqlite3_cancel_auto_extension #f)
(define (sqlite3_cancel_auto_extension xEntryPoint)
  (unless
    ~sqlite3_cancel_auto_extension
    (set! ~sqlite3_cancel_auto_extension
      (fh-link-proc
        "sqlite3_cancel_auto_extension"
        ffi:int
        (list '*))))
  (let ((~xEntryPoint
          ((make-ftn-arg-unwrapper ffi:void (list ffi:void))
           xEntryPoint)))
    (~sqlite3_cancel_auto_extension ~xEntryPoint)))
(export sqlite3_cancel_auto_extension)

;; void sqlite3_reset_auto_extension(void);
(define ~sqlite3_reset_auto_extension #f)
(define (sqlite3_reset_auto_extension)
  (unless
    ~sqlite3_reset_auto_extension
    (set! ~sqlite3_reset_auto_extension
      (fh-link-proc
        "sqlite3_reset_auto_extension"
        ffi:void
        (list))))
  (let () (~sqlite3_reset_auto_extension)))
(export sqlite3_reset_auto_extension)

;; typedef struct sqlite3_vtab sqlite3_vtab;
(define sqlite3_vtab-desc void)
(export sqlite3_vtab-desc)
(define sqlite3_vtab*-desc (bs:pointer (delay sqlite3_vtab-desc)))
(export sqlite3_vtab*-desc)
(define-fh-pointer-type sqlite3_vtab* sqlite3_vtab*-desc)

;; typedef struct sqlite3_index_info sqlite3_index_info;
(define sqlite3_index_info-desc void)
(export sqlite3_index_info-desc)
(define sqlite3_index_info*-desc (bs:pointer (delay sqlite3_index_info-desc)))
(export sqlite3_index_info*-desc)
(define-fh-pointer-type sqlite3_index_info* sqlite3_index_info*-desc)

;; typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;
(define sqlite3_vtab_cursor-desc void)
(export sqlite3_vtab_cursor-desc)
(define sqlite3_vtab_cursor*-desc (bs:pointer (delay sqlite3_vtab_cursor-desc)))
(export sqlite3_vtab_cursor*-desc)
(define-fh-pointer-type sqlite3_vtab_cursor* sqlite3_vtab_cursor*-desc)

;; typedef struct sqlite3_module sqlite3_module;
(define sqlite3_module-desc void)
(export sqlite3_module-desc)
(define sqlite3_module*-desc (bs:pointer (delay sqlite3_module-desc)))
(export sqlite3_module*-desc)
(define-fh-pointer-type sqlite3_module* sqlite3_module*-desc)

;; struct sqlite3_module {
;;   int iVersion;
;;   int (*xCreate)(sqlite3 *, void *pAux, int argc, const char *const*argv, 
;;       sqlite3_vtab **ppVTab, char **);
;;   int (*xConnect)(sqlite3 *, void *pAux, int argc, const char *const*argv, 
;;       sqlite3_vtab **ppVTab, char **);
;;   int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info *);
;;   int (*xDisconnect)(sqlite3_vtab *pVTab);
;;   int (*xDestroy)(sqlite3_vtab *pVTab);
;;   int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);
;;   int (*xClose)(sqlite3_vtab_cursor *);
;;   int (*xFilter)(sqlite3_vtab_cursor *, int idxNum, const char *idxStr, int 
;;       argc, sqlite3_value **argv);
;;   int (*xNext)(sqlite3_vtab_cursor *);
;;   int (*xEof)(sqlite3_vtab_cursor *);
;;   int (*xColumn)(sqlite3_vtab_cursor *, sqlite3_context *, int);
;;   int (*xRowid)(sqlite3_vtab_cursor *, sqlite3_int64 *pRowid);
;;   int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);
;;   int (*xBegin)(sqlite3_vtab *pVTab);
;;   int (*xSync)(sqlite3_vtab *pVTab);
;;   int (*xCommit)(sqlite3_vtab *pVTab);
;;   int (*xRollback)(sqlite3_vtab *pVTab);
;;   int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName, 
;;       void (**pxFunc)(sqlite3_context *, int, sqlite3_value **), void **
;;       ppArg);
;;   int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);
;;   /* The methods above are in version 1 of the sqlite_module object. Those 
;;   ** below are for version 2 and greater. */
;;   int (*xSavepoint)(sqlite3_vtab *pVTab, int);
;;   int (*xRelease)(sqlite3_vtab *pVTab, int);
;;   int (*xRollbackTo)(sqlite3_vtab *pVTab, int);
;; };
(define struct-sqlite3_module-desc
  (bs:struct
    (list `(iVersion ,int)
          `(xCreate ,(bs:pointer void))
          `(xConnect ,(bs:pointer void))
          `(xBestIndex ,(bs:pointer void))
          `(xDisconnect ,(bs:pointer void))
          `(xDestroy ,(bs:pointer void))
          `(xOpen ,(bs:pointer void))
          `(xClose ,(bs:pointer void))
          `(xFilter ,(bs:pointer void))
          `(xNext ,(bs:pointer void))
          `(xEof ,(bs:pointer void))
          `(xColumn ,(bs:pointer void))
          `(xRowid ,(bs:pointer void))
          `(xUpdate ,(bs:pointer void))
          `(xBegin ,(bs:pointer void))
          `(xSync ,(bs:pointer void))
          `(xCommit ,(bs:pointer void))
          `(xRollback ,(bs:pointer void))
          `(xFindFunction ,(bs:pointer void))
          `(xRename ,(bs:pointer void))
          `(xSavepoint ,(bs:pointer void))
          `(xRelease ,(bs:pointer void))
          `(xRollbackTo ,(bs:pointer void)))))
(export struct-sqlite3_module-desc)
(define-fh-compound-type/p struct-sqlite3_module struct-sqlite3_module-desc)
(set! sqlite3_module-desc struct-sqlite3_module-desc)
(define-fh-compound-type sqlite3_module sqlite3_module-desc)

;; struct sqlite3_index_info {
;;   /* Inputs */
;;   int nConstraint; /* Number of entries in aConstraint */
;;   struct sqlite3_index_constraint {
;;     int iColumn; /* Column constrained.  -1 for ROWID */
;;     unsigned char op; /* Constraint operator */
;;     unsigned char usable; /* True if this constraint is usable */
;;     int iTermOffset; /* Used internally - xBestIndex should ignore */
;;   } *aConstraint; /* Table of WHERE clause constraints */
;;   int nOrderBy; /* Number of terms in the ORDER BY clause */
;;   struct sqlite3_index_orderby {
;;     int iColumn; /* Column number */
;;     unsigned char desc; /* True for DESC.  False for ASC. */
;;   } *aOrderBy; /* The ORDER BY clause */
;;   /* Outputs */
;;   struct sqlite3_index_constraint_usage {
;;     int argvIndex; /* if >0, constraint is part of argv to xFilter */
;;     unsigned char omit; /* Do not code a test for this constraint */
;;   } *aConstraintUsage;
;;   int idxNum; /* Number used to identify the index */
;;   char *idxStr; /* String, possibly obtained from sqlite3_malloc */
;;   int needToFreeIdxStr; /* Free idxStr using sqlite3_free() if true */
;;   int orderByConsumed; /* True if output is already ordered */
;;   double estimatedCost; /* Estimated cost of using this index */
;;   /* Fields below are only available in SQLite 3.8.2 and later */
;;   sqlite3_int64 estimatedRows; /* Estimated number of rows returned */
;;   /* Fields below are only available in SQLite 3.9.0 and later */
;;   int idxFlags; /* Mask of SQLITE_INDEX_SCAN_* flags */
;;   /* Fields below are only available in SQLite 3.10.0 and later */
;;   sqlite3_uint64 colUsed; /* Input: Mask of columns used by statement */
;; };
(define struct-sqlite3_index_info-desc
  (bs:struct
    (list `(nConstraint ,int)
          `(aConstraint
             ,(bs:pointer
                (bs:struct
                  (list `(iColumn ,int)
                        `(op ,unsigned-int)
                        `(usable ,unsigned-int)
                        `(iTermOffset ,int)))))
          `(nOrderBy ,int)
          `(aOrderBy
             ,(bs:pointer
                (bs:struct
                  (list `(iColumn ,int) `(desc ,unsigned-int)))))
          `(aConstraintUsage
             ,(bs:pointer
                (bs:struct
                  (list `(argvIndex ,int) `(omit ,unsigned-int)))))
          `(idxNum ,int)
          `(idxStr ,(bs:pointer int))
          `(needToFreeIdxStr ,int)
          `(orderByConsumed ,int)
          `(estimatedCost ,double)
          `(estimatedRows ,long)
          `(idxFlags ,int)
          `(colUsed ,unsigned-long))))
(export struct-sqlite3_index_info-desc)
(define-fh-compound-type/p struct-sqlite3_index_info struct-sqlite3_index_info-desc)
(set! sqlite3_index_info-desc struct-sqlite3_index_info-desc)
(define-fh-compound-type sqlite3_index_info sqlite3_index_info-desc)

;; int sqlite3_create_module(sqlite3 *db, const char *zName, const 
;;     sqlite3_module *p, void *pClientData);
(define ~sqlite3_create_module #f)
(define (sqlite3_create_module db zName p pClientData)
  (unless
    ~sqlite3_create_module
    (set! ~sqlite3_create_module
      (fh-link-proc
        "sqlite3_create_module"
        ffi:int
        (list '* '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zName (unwrap~pointer zName))
        (~p (unwrap-sqlite3_module* p))
        (~pClientData (unwrap~pointer pClientData)))
    (~sqlite3_create_module
      ~db
      ~zName
      ~p
      ~pClientData)))
(export sqlite3_create_module)

;; int sqlite3_create_module_v2(sqlite3 *db, const char *zName, const 
;;     sqlite3_module *p, void *pClientData, void (*xDestroy)(void *));
(define ~sqlite3_create_module_v2 #f)
(define (sqlite3_create_module_v2
         db
         zName
         p
         pClientData
         xDestroy)
  (unless
    ~sqlite3_create_module_v2
    (set! ~sqlite3_create_module_v2
      (fh-link-proc
        "sqlite3_create_module_v2"
        ffi:int
        (list '* '* '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zName (unwrap~pointer zName))
        (~p (unwrap-sqlite3_module* p))
        (~pClientData (unwrap~pointer pClientData))
        (~xDestroy
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           xDestroy)))
    (~sqlite3_create_module_v2
      ~db
      ~zName
      ~p
      ~pClientData
      ~xDestroy)))
(export sqlite3_create_module_v2)

;; struct sqlite3_vtab {
;;   const sqlite3_module *pModule; /* The module for this virtual table */
;;   int nRef; /* Number of open cursors */
;;   char *zErrMsg; /* Error message from sqlite3_mprintf() */
;;   /* Virtual table implementations will typically add additional fields */
;; };
(define struct-sqlite3_vtab-desc
  (bs:struct
    (list `(pModule
             ,(bs:pointer (delay sqlite3_module*-desc)))
          `(nRef ,int)
          `(zErrMsg ,(bs:pointer int)))))
(export struct-sqlite3_vtab-desc)
(define-fh-compound-type/p struct-sqlite3_vtab struct-sqlite3_vtab-desc)
(set! sqlite3_vtab-desc struct-sqlite3_vtab-desc)
(define-fh-compound-type sqlite3_vtab sqlite3_vtab-desc)

;; struct sqlite3_vtab_cursor {
;;   sqlite3_vtab *pVtab; /* Virtual table of this cursor */
;;   /* Virtual table implementations will typically add additional fields */
;; };
(define struct-sqlite3_vtab_cursor-desc
  (bs:struct
    (list `(pVtab ,(bs:pointer (delay sqlite3_vtab*-desc))))))
(export struct-sqlite3_vtab_cursor-desc)
(define-fh-compound-type/p struct-sqlite3_vtab_cursor struct-sqlite3_vtab_cursor-desc)
(set! sqlite3_vtab_cursor-desc struct-sqlite3_vtab_cursor-desc)
(define-fh-compound-type sqlite3_vtab_cursor sqlite3_vtab_cursor-desc)

;; int sqlite3_declare_vtab(sqlite3 *, const char *zSQL);
(define ~sqlite3_declare_vtab #f)
(define (sqlite3_declare_vtab @17610 zSQL)
  (unless
    ~sqlite3_declare_vtab
    (set! ~sqlite3_declare_vtab
      (fh-link-proc
        "sqlite3_declare_vtab"
        ffi:int
        (list '* '*))))
  (let ((~@17610 (unwrap-sqlite3* @17610))
        (~zSQL (unwrap~pointer zSQL)))
    (~sqlite3_declare_vtab ~@17610 ~zSQL)))
(export sqlite3_declare_vtab)

;; int sqlite3_overload_function(sqlite3 *, const char *zFuncName, int nArg);
(define ~sqlite3_overload_function #f)
(define (sqlite3_overload_function @17611 zFuncName nArg)
  (unless
    ~sqlite3_overload_function
    (set! ~sqlite3_overload_function
      (fh-link-proc
        "sqlite3_overload_function"
        ffi:int
        (list '* '* ffi:int))))
  (let ((~@17611 (unwrap-sqlite3* @17611))
        (~zFuncName (unwrap~pointer zFuncName))
        (~nArg (unwrap~fixed nArg)))
    (~sqlite3_overload_function
      ~@17611
      ~zFuncName
      ~nArg)))
(export sqlite3_overload_function)

;; typedef struct sqlite3_blob sqlite3_blob;
(define sqlite3_blob-desc void)
(export sqlite3_blob-desc)
(define sqlite3_blob*-desc (bs:pointer sqlite3_blob-desc))
(export sqlite3_blob*-desc)
(define-fh-pointer-type sqlite3_blob* sqlite3_blob*-desc)

;; int sqlite3_blob_open(sqlite3 *, const char *zDb, const char *zTable, const 
;;     char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob);
(define ~sqlite3_blob_open #f)
(define (sqlite3_blob_open
         @17612
         zDb
         zTable
         zColumn
         iRow
         flags
         ppBlob)
  (unless
    ~sqlite3_blob_open
    (set! ~sqlite3_blob_open
      (fh-link-proc
        "sqlite3_blob_open"
        ffi:int
        (list '* '* '* '* ffi:long ffi:int '*))))
  (let ((~@17612 (unwrap-sqlite3* @17612))
        (~zDb (unwrap~pointer zDb))
        (~zTable (unwrap~pointer zTable))
        (~zColumn (unwrap~pointer zColumn))
        (~iRow (unwrap~fixed iRow))
        (~flags (unwrap~fixed flags))
        (~ppBlob (unwrap~pointer ppBlob)))
    (~sqlite3_blob_open
      ~@17612
      ~zDb
      ~zTable
      ~zColumn
      ~iRow
      ~flags
      ~ppBlob)))
(export sqlite3_blob_open)

;; int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64);
(define ~sqlite3_blob_reopen #f)
(define (sqlite3_blob_reopen @17613 arg-1)
  (unless
    ~sqlite3_blob_reopen
    (set! ~sqlite3_blob_reopen
      (fh-link-proc
        "sqlite3_blob_reopen"
        ffi:int
        (list '* ffi:long))))
  (let ((~@17613 (unwrap-sqlite3_blob* @17613))
        (~arg-1 (unwrap~fixed arg-1)))
    (~sqlite3_blob_reopen ~@17613 ~arg-1)))
(export sqlite3_blob_reopen)

;; int sqlite3_blob_close(sqlite3_blob *);
(define ~sqlite3_blob_close #f)
(define (sqlite3_blob_close @17614)
  (unless
    ~sqlite3_blob_close
    (set! ~sqlite3_blob_close
      (fh-link-proc
        "sqlite3_blob_close"
        ffi:int
        (list '*))))
  (let ((~@17614 (unwrap-sqlite3_blob* @17614)))
    (~sqlite3_blob_close ~@17614)))
(export sqlite3_blob_close)

;; int sqlite3_blob_bytes(sqlite3_blob *);
(define ~sqlite3_blob_bytes #f)
(define (sqlite3_blob_bytes @17615)
  (unless
    ~sqlite3_blob_bytes
    (set! ~sqlite3_blob_bytes
      (fh-link-proc
        "sqlite3_blob_bytes"
        ffi:int
        (list '*))))
  (let ((~@17615 (unwrap-sqlite3_blob* @17615)))
    (~sqlite3_blob_bytes ~@17615)))
(export sqlite3_blob_bytes)

;; int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
(define ~sqlite3_blob_read #f)
(define (sqlite3_blob_read @17616 Z N iOffset)
  (unless
    ~sqlite3_blob_read
    (set! ~sqlite3_blob_read
      (fh-link-proc
        "sqlite3_blob_read"
        ffi:int
        (list '* '* ffi:int ffi:int))))
  (let ((~@17616 (unwrap-sqlite3_blob* @17616))
        (~Z (unwrap~pointer Z))
        (~N (unwrap~fixed N))
        (~iOffset (unwrap~fixed iOffset)))
    (~sqlite3_blob_read ~@17616 ~Z ~N ~iOffset)))
(export sqlite3_blob_read)

;; int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset);
(define ~sqlite3_blob_write #f)
(define (sqlite3_blob_write @17617 z n iOffset)
  (unless
    ~sqlite3_blob_write
    (set! ~sqlite3_blob_write
      (fh-link-proc
        "sqlite3_blob_write"
        ffi:int
        (list '* '* ffi:int ffi:int))))
  (let ((~@17617 (unwrap-sqlite3_blob* @17617))
        (~z (unwrap~pointer z))
        (~n (unwrap~fixed n))
        (~iOffset (unwrap~fixed iOffset)))
    (~sqlite3_blob_write ~@17617 ~z ~n ~iOffset)))
(export sqlite3_blob_write)

;; sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);
(define ~sqlite3_vfs_find #f)
(define (sqlite3_vfs_find zVfsName)
  (unless
    ~sqlite3_vfs_find
    (set! ~sqlite3_vfs_find
      (fh-link-proc "sqlite3_vfs_find" '* (list '*))))
  (let ((~zVfsName (unwrap~pointer zVfsName)))
    (wrap-sqlite3_vfs* (~sqlite3_vfs_find ~zVfsName))))
(export sqlite3_vfs_find)

;; int sqlite3_vfs_register(sqlite3_vfs *, int makeDflt);
(define ~sqlite3_vfs_register #f)
(define (sqlite3_vfs_register @17618 makeDflt)
  (unless
    ~sqlite3_vfs_register
    (set! ~sqlite3_vfs_register
      (fh-link-proc
        "sqlite3_vfs_register"
        ffi:int
        (list '* ffi:int))))
  (let ((~@17618 (unwrap-sqlite3_vfs* @17618))
        (~makeDflt (unwrap~fixed makeDflt)))
    (~sqlite3_vfs_register ~@17618 ~makeDflt)))
(export sqlite3_vfs_register)

;; int sqlite3_vfs_unregister(sqlite3_vfs *);
(define ~sqlite3_vfs_unregister #f)
(define (sqlite3_vfs_unregister @17619)
  (unless
    ~sqlite3_vfs_unregister
    (set! ~sqlite3_vfs_unregister
      (fh-link-proc
        "sqlite3_vfs_unregister"
        ffi:int
        (list '*))))
  (let ((~@17619 (unwrap-sqlite3_vfs* @17619)))
    (~sqlite3_vfs_unregister ~@17619)))
(export sqlite3_vfs_unregister)

;; sqlite3_mutex *sqlite3_mutex_alloc(int);
(define ~sqlite3_mutex_alloc #f)
(define (sqlite3_mutex_alloc arg-0)
  (unless
    ~sqlite3_mutex_alloc
    (set! ~sqlite3_mutex_alloc
      (fh-link-proc
        "sqlite3_mutex_alloc"
        '*
        (list ffi:int))))
  (let ((~arg-0 (unwrap~fixed arg-0)))
    (wrap-sqlite3_mutex*
      (~sqlite3_mutex_alloc ~arg-0))))
(export sqlite3_mutex_alloc)

;; void sqlite3_mutex_free(sqlite3_mutex *);
(define ~sqlite3_mutex_free #f)
(define (sqlite3_mutex_free @17620)
  (unless
    ~sqlite3_mutex_free
    (set! ~sqlite3_mutex_free
      (fh-link-proc
        "sqlite3_mutex_free"
        ffi:void
        (list '*))))
  (let ((~@17620 (unwrap-sqlite3_mutex* @17620)))
    (~sqlite3_mutex_free ~@17620)))
(export sqlite3_mutex_free)

;; void sqlite3_mutex_enter(sqlite3_mutex *);
(define ~sqlite3_mutex_enter #f)
(define (sqlite3_mutex_enter @17621)
  (unless
    ~sqlite3_mutex_enter
    (set! ~sqlite3_mutex_enter
      (fh-link-proc
        "sqlite3_mutex_enter"
        ffi:void
        (list '*))))
  (let ((~@17621 (unwrap-sqlite3_mutex* @17621)))
    (~sqlite3_mutex_enter ~@17621)))
(export sqlite3_mutex_enter)

;; int sqlite3_mutex_try(sqlite3_mutex *);
(define ~sqlite3_mutex_try #f)
(define (sqlite3_mutex_try @17622)
  (unless
    ~sqlite3_mutex_try
    (set! ~sqlite3_mutex_try
      (fh-link-proc
        "sqlite3_mutex_try"
        ffi:int
        (list '*))))
  (let ((~@17622 (unwrap-sqlite3_mutex* @17622)))
    (~sqlite3_mutex_try ~@17622)))
(export sqlite3_mutex_try)

;; void sqlite3_mutex_leave(sqlite3_mutex *);
(define ~sqlite3_mutex_leave #f)
(define (sqlite3_mutex_leave @17623)
  (unless
    ~sqlite3_mutex_leave
    (set! ~sqlite3_mutex_leave
      (fh-link-proc
        "sqlite3_mutex_leave"
        ffi:void
        (list '*))))
  (let ((~@17623 (unwrap-sqlite3_mutex* @17623)))
    (~sqlite3_mutex_leave ~@17623)))
(export sqlite3_mutex_leave)

;; typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;
(define sqlite3_mutex_methods-desc void)
(export sqlite3_mutex_methods-desc)
(define sqlite3_mutex_methods*-desc (bs:pointer (delay sqlite3_mutex_methods-desc)))
(export sqlite3_mutex_methods*-desc)
(define-fh-pointer-type sqlite3_mutex_methods* sqlite3_mutex_methods*-desc)

;; struct sqlite3_mutex_methods {
;;   int (*xMutexInit)(void);
;;   int (*xMutexEnd)(void);
;;   sqlite3_mutex *(*xMutexAlloc)(int);
;;   void (*xMutexFree)(sqlite3_mutex *);
;;   void (*xMutexEnter)(sqlite3_mutex *);
;;   int (*xMutexTry)(sqlite3_mutex *);
;;   void (*xMutexLeave)(sqlite3_mutex *);
;;   int (*xMutexHeld)(sqlite3_mutex *);
;;   int (*xMutexNotheld)(sqlite3_mutex *);
;; };
(define struct-sqlite3_mutex_methods-desc
  (bs:struct
    (list `(xMutexInit ,(bs:pointer void))
          `(xMutexEnd ,(bs:pointer void))
          `(xMutexAlloc ,(bs:pointer void))
          `(xMutexFree ,(bs:pointer void))
          `(xMutexEnter ,(bs:pointer void))
          `(xMutexTry ,(bs:pointer void))
          `(xMutexLeave ,(bs:pointer void))
          `(xMutexHeld ,(bs:pointer void))
          `(xMutexNotheld ,(bs:pointer void)))))
(export struct-sqlite3_mutex_methods-desc)
(define-fh-compound-type/p struct-sqlite3_mutex_methods struct-sqlite3_mutex_methods-desc)
(set! sqlite3_mutex_methods-desc struct-sqlite3_mutex_methods-desc)
(define-fh-compound-type sqlite3_mutex_methods sqlite3_mutex_methods-desc)

;; int sqlite3_mutex_held(sqlite3_mutex *);
(define ~sqlite3_mutex_held #f)
(define (sqlite3_mutex_held @17624)
  (unless
    ~sqlite3_mutex_held
    (set! ~sqlite3_mutex_held
      (fh-link-proc
        "sqlite3_mutex_held"
        ffi:int
        (list '*))))
  (let ((~@17624 (unwrap-sqlite3_mutex* @17624)))
    (~sqlite3_mutex_held ~@17624)))
(export sqlite3_mutex_held)

;; int sqlite3_mutex_notheld(sqlite3_mutex *);
(define ~sqlite3_mutex_notheld #f)
(define (sqlite3_mutex_notheld @17625)
  (unless
    ~sqlite3_mutex_notheld
    (set! ~sqlite3_mutex_notheld
      (fh-link-proc
        "sqlite3_mutex_notheld"
        ffi:int
        (list '*))))
  (let ((~@17625 (unwrap-sqlite3_mutex* @17625)))
    (~sqlite3_mutex_notheld ~@17625)))
(export sqlite3_mutex_notheld)

;; sqlite3_mutex *sqlite3_db_mutex(sqlite3 *);
(define ~sqlite3_db_mutex #f)
(define (sqlite3_db_mutex @17626)
  (unless
    ~sqlite3_db_mutex
    (set! ~sqlite3_db_mutex
      (fh-link-proc "sqlite3_db_mutex" '* (list '*))))
  (let ((~@17626 (unwrap-sqlite3* @17626)))
    (wrap-sqlite3_mutex* (~sqlite3_db_mutex ~@17626))))
(export sqlite3_db_mutex)

;; int sqlite3_file_control(sqlite3 *, const char *zDbName, int op, void *);
(define ~sqlite3_file_control #f)
(define (sqlite3_file_control @17628 zDbName op @17627)
  (unless
    ~sqlite3_file_control
    (set! ~sqlite3_file_control
      (fh-link-proc
        "sqlite3_file_control"
        ffi:int
        (list '* '* ffi:int '*))))
  (let ((~@17628 (unwrap-sqlite3* @17628))
        (~zDbName (unwrap~pointer zDbName))
        (~op (unwrap~fixed op))
        (~@17627 (unwrap~pointer @17627)))
    (~sqlite3_file_control
      ~@17628
      ~zDbName
      ~op
      ~@17627)))
(export sqlite3_file_control)

;; int sqlite3_test_control(int op, ...);
;; ... failed.

;; int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag);
(define ~sqlite3_status #f)
(define (sqlite3_status op pCurrent pHighwater resetFlag)
  (unless
    ~sqlite3_status
    (set! ~sqlite3_status
      (fh-link-proc
        "sqlite3_status"
        ffi:int
        (list ffi:int '* '* ffi:int))))
  (let ((~op (unwrap~fixed op))
        (~pCurrent (unwrap~pointer pCurrent))
        (~pHighwater (unwrap~pointer pHighwater))
        (~resetFlag (unwrap~fixed resetFlag)))
    (~sqlite3_status
      ~op
      ~pCurrent
      ~pHighwater
      ~resetFlag)))
(export sqlite3_status)

;; int sqlite3_status64(int op, sqlite3_int64 *pCurrent, sqlite3_int64 *
;;     pHighwater, int resetFlag);
(define ~sqlite3_status64 #f)
(define (sqlite3_status64
         op
         pCurrent
         pHighwater
         resetFlag)
  (unless
    ~sqlite3_status64
    (set! ~sqlite3_status64
      (fh-link-proc
        "sqlite3_status64"
        ffi:int
        (list ffi:int '* '* ffi:int))))
  (let ((~op (unwrap~fixed op))
        (~pCurrent (unwrap~pointer pCurrent))
        (~pHighwater (unwrap~pointer pHighwater))
        (~resetFlag (unwrap~fixed resetFlag)))
    (~sqlite3_status64
      ~op
      ~pCurrent
      ~pHighwater
      ~resetFlag)))
(export sqlite3_status64)

;; int sqlite3_db_status(sqlite3 *, int op, int *pCur, int *pHiwtr, int 
;;     resetFlg);
(define ~sqlite3_db_status #f)
(define (sqlite3_db_status
         @17629
         op
         pCur
         pHiwtr
         resetFlg)
  (unless
    ~sqlite3_db_status
    (set! ~sqlite3_db_status
      (fh-link-proc
        "sqlite3_db_status"
        ffi:int
        (list '* ffi:int '* '* ffi:int))))
  (let ((~@17629 (unwrap-sqlite3* @17629))
        (~op (unwrap~fixed op))
        (~pCur (unwrap~pointer pCur))
        (~pHiwtr (unwrap~pointer pHiwtr))
        (~resetFlg (unwrap~fixed resetFlg)))
    (~sqlite3_db_status
      ~@17629
      ~op
      ~pCur
      ~pHiwtr
      ~resetFlg)))
(export sqlite3_db_status)

;; int sqlite3_stmt_status(sqlite3_stmt *, int op, int resetFlg);
(define ~sqlite3_stmt_status #f)
(define (sqlite3_stmt_status @17630 op resetFlg)
  (unless
    ~sqlite3_stmt_status
    (set! ~sqlite3_stmt_status
      (fh-link-proc
        "sqlite3_stmt_status"
        ffi:int
        (list '* ffi:int ffi:int))))
  (let ((~@17630 (unwrap-sqlite3_stmt* @17630))
        (~op (unwrap~fixed op))
        (~resetFlg (unwrap~fixed resetFlg)))
    (~sqlite3_stmt_status ~@17630 ~op ~resetFlg)))
(export sqlite3_stmt_status)

;; typedef struct sqlite3_pcache sqlite3_pcache;
(define sqlite3_pcache-desc void)
(export sqlite3_pcache-desc)
(define sqlite3_pcache*-desc (bs:pointer sqlite3_pcache-desc))
(export sqlite3_pcache*-desc)
(define-fh-pointer-type sqlite3_pcache* sqlite3_pcache*-desc)

;; typedef struct sqlite3_pcache_page sqlite3_pcache_page;
(define sqlite3_pcache_page-desc void)
(export sqlite3_pcache_page-desc)
(define sqlite3_pcache_page*-desc (bs:pointer (delay sqlite3_pcache_page-desc)))
(export sqlite3_pcache_page*-desc)
(define-fh-pointer-type sqlite3_pcache_page* sqlite3_pcache_page*-desc)

;; struct sqlite3_pcache_page {
;;   void *pBuf; /* The content of the page */
;;   void *pExtra; /* Extra information associated with the page */
;; };
(define struct-sqlite3_pcache_page-desc
  (bs:struct
    (list `(pBuf ,(bs:pointer void))
          `(pExtra ,(bs:pointer void)))))
(export struct-sqlite3_pcache_page-desc)
(define-fh-compound-type/p struct-sqlite3_pcache_page struct-sqlite3_pcache_page-desc)
(set! sqlite3_pcache_page-desc struct-sqlite3_pcache_page-desc)
(define-fh-compound-type sqlite3_pcache_page sqlite3_pcache_page-desc)

;; typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;
(define sqlite3_pcache_methods2-desc void)
(export sqlite3_pcache_methods2-desc)
(define sqlite3_pcache_methods2*-desc (bs:pointer (delay sqlite3_pcache_methods2-desc)))
(export sqlite3_pcache_methods2*-desc)
(define-fh-pointer-type sqlite3_pcache_methods2* sqlite3_pcache_methods2*-desc)

;; struct sqlite3_pcache_methods2 {
;;   int iVersion;
;;   void *pArg;
;;   int (*xInit)(void *);
;;   void (*xShutdown)(void *);
;;   sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);
;;   void (*xCachesize)(sqlite3_pcache *, int nCachesize);
;;   int (*xPagecount)(sqlite3_pcache *);
;;   sqlite3_pcache_page *(*xFetch)(sqlite3_pcache *, unsigned key, int 
;;       createFlag);
;;   void (*xUnpin)(sqlite3_pcache *, sqlite3_pcache_page *, int discard);
;;   void (*xRekey)(sqlite3_pcache *, sqlite3_pcache_page *, unsigned oldKey, 
;;       unsigned newKey);
;;   void (*xTruncate)(sqlite3_pcache *, unsigned iLimit);
;;   void (*xDestroy)(sqlite3_pcache *);
;;   void (*xShrink)(sqlite3_pcache *);
;; };
(define struct-sqlite3_pcache_methods2-desc
  (bs:struct
    (list `(iVersion ,int)
          `(pArg ,(bs:pointer void))
          `(xInit ,(bs:pointer void))
          `(xShutdown ,(bs:pointer void))
          `(xCreate ,(bs:pointer void))
          `(xCachesize ,(bs:pointer void))
          `(xPagecount ,(bs:pointer void))
          `(xFetch ,(bs:pointer void))
          `(xUnpin ,(bs:pointer void))
          `(xRekey ,(bs:pointer void))
          `(xTruncate ,(bs:pointer void))
          `(xDestroy ,(bs:pointer void))
          `(xShrink ,(bs:pointer void)))))
(export struct-sqlite3_pcache_methods2-desc)
(define-fh-compound-type/p struct-sqlite3_pcache_methods2 struct-sqlite3_pcache_methods2-desc)
(set! sqlite3_pcache_methods2-desc struct-sqlite3_pcache_methods2-desc)
(define-fh-compound-type sqlite3_pcache_methods2 sqlite3_pcache_methods2-desc)

;; typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;
(define sqlite3_pcache_methods-desc void)
(export sqlite3_pcache_methods-desc)
(define sqlite3_pcache_methods*-desc (bs:pointer (delay sqlite3_pcache_methods-desc)))
(export sqlite3_pcache_methods*-desc)
(define-fh-pointer-type sqlite3_pcache_methods* sqlite3_pcache_methods*-desc)

;; struct sqlite3_pcache_methods {
;;   void *pArg;
;;   int (*xInit)(void *);
;;   void (*xShutdown)(void *);
;;   sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);
;;   void (*xCachesize)(sqlite3_pcache *, int nCachesize);
;;   int (*xPagecount)(sqlite3_pcache *);
;;   void *(*xFetch)(sqlite3_pcache *, unsigned key, int createFlag);
;;   void (*xUnpin)(sqlite3_pcache *, void *, int discard);
;;   void (*xRekey)(sqlite3_pcache *, void *, unsigned oldKey, unsigned newKey)
;;       ;
;;   void (*xTruncate)(sqlite3_pcache *, unsigned iLimit);
;;   void (*xDestroy)(sqlite3_pcache *);
;; };
(define struct-sqlite3_pcache_methods-desc
  (bs:struct
    (list `(pArg ,(bs:pointer void))
          `(xInit ,(bs:pointer void))
          `(xShutdown ,(bs:pointer void))
          `(xCreate ,(bs:pointer void))
          `(xCachesize ,(bs:pointer void))
          `(xPagecount ,(bs:pointer void))
          `(xFetch ,(bs:pointer void))
          `(xUnpin ,(bs:pointer void))
          `(xRekey ,(bs:pointer void))
          `(xTruncate ,(bs:pointer void))
          `(xDestroy ,(bs:pointer void)))))
(export struct-sqlite3_pcache_methods-desc)
(define-fh-compound-type/p struct-sqlite3_pcache_methods struct-sqlite3_pcache_methods-desc)
(set! sqlite3_pcache_methods-desc struct-sqlite3_pcache_methods-desc)
(define-fh-compound-type sqlite3_pcache_methods sqlite3_pcache_methods-desc)

;; typedef struct sqlite3_backup sqlite3_backup;
(define sqlite3_backup-desc void)
(export sqlite3_backup-desc)
(define sqlite3_backup*-desc (bs:pointer sqlite3_backup-desc))
(export sqlite3_backup*-desc)
(define-fh-pointer-type sqlite3_backup* sqlite3_backup*-desc)

;; sqlite3_backup *sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, 
;;     sqlite3 *pSource, const char *zSourceName);
(define ~sqlite3_backup_init #f)
(define (sqlite3_backup_init
         pDest
         zDestName
         pSource
         zSourceName)
  (unless
    ~sqlite3_backup_init
    (set! ~sqlite3_backup_init
      (fh-link-proc
        "sqlite3_backup_init"
        '*
        (list '* '* '* '*))))
  (let ((~pDest (unwrap-sqlite3* pDest))
        (~zDestName (unwrap~pointer zDestName))
        (~pSource (unwrap-sqlite3* pSource))
        (~zSourceName (unwrap~pointer zSourceName)))
    (wrap-sqlite3_backup*
      (~sqlite3_backup_init
        ~pDest
        ~zDestName
        ~pSource
        ~zSourceName))))
(export sqlite3_backup_init)

;; int sqlite3_backup_step(sqlite3_backup *p, int nPage);
(define ~sqlite3_backup_step #f)
(define (sqlite3_backup_step p nPage)
  (unless
    ~sqlite3_backup_step
    (set! ~sqlite3_backup_step
      (fh-link-proc
        "sqlite3_backup_step"
        ffi:int
        (list '* ffi:int))))
  (let ((~p (unwrap-sqlite3_backup* p))
        (~nPage (unwrap~fixed nPage)))
    (~sqlite3_backup_step ~p ~nPage)))
(export sqlite3_backup_step)

;; int sqlite3_backup_finish(sqlite3_backup *p);
(define ~sqlite3_backup_finish #f)
(define (sqlite3_backup_finish p)
  (unless
    ~sqlite3_backup_finish
    (set! ~sqlite3_backup_finish
      (fh-link-proc
        "sqlite3_backup_finish"
        ffi:int
        (list '*))))
  (let ((~p (unwrap-sqlite3_backup* p)))
    (~sqlite3_backup_finish ~p)))
(export sqlite3_backup_finish)

;; int sqlite3_backup_remaining(sqlite3_backup *p);
(define ~sqlite3_backup_remaining #f)
(define (sqlite3_backup_remaining p)
  (unless
    ~sqlite3_backup_remaining
    (set! ~sqlite3_backup_remaining
      (fh-link-proc
        "sqlite3_backup_remaining"
        ffi:int
        (list '*))))
  (let ((~p (unwrap-sqlite3_backup* p)))
    (~sqlite3_backup_remaining ~p)))
(export sqlite3_backup_remaining)

;; int sqlite3_backup_pagecount(sqlite3_backup *p);
(define ~sqlite3_backup_pagecount #f)
(define (sqlite3_backup_pagecount p)
  (unless
    ~sqlite3_backup_pagecount
    (set! ~sqlite3_backup_pagecount
      (fh-link-proc
        "sqlite3_backup_pagecount"
        ffi:int
        (list '*))))
  (let ((~p (unwrap-sqlite3_backup* p)))
    (~sqlite3_backup_pagecount ~p)))
(export sqlite3_backup_pagecount)

;; int sqlite3_unlock_notify(sqlite3 *pBlocked, void (*xNotify)(void **apArg, 
;;     int nArg), void *pNotifyArg);
(define ~sqlite3_unlock_notify #f)
(define (sqlite3_unlock_notify
         pBlocked
         xNotify
         pNotifyArg)
  (unless
    ~sqlite3_unlock_notify
    (set! ~sqlite3_unlock_notify
      (fh-link-proc
        "sqlite3_unlock_notify"
        ffi:int
        (list '* '* '*))))
  (let ((~pBlocked (unwrap-sqlite3* pBlocked))
        (~xNotify
          ((make-ftn-arg-unwrapper
             ffi:void
             (list '* ffi:int))
           xNotify))
        (~pNotifyArg (unwrap~pointer pNotifyArg)))
    (~sqlite3_unlock_notify
      ~pBlocked
      ~xNotify
      ~pNotifyArg)))
(export sqlite3_unlock_notify)

;; int sqlite3_stricmp(const char *, const char *);
(define ~sqlite3_stricmp #f)
(define (sqlite3_stricmp @17632 @17631)
  (unless
    ~sqlite3_stricmp
    (set! ~sqlite3_stricmp
      (fh-link-proc
        "sqlite3_stricmp"
        ffi:int
        (list '* '*))))
  (let ((~@17632 (unwrap~pointer @17632))
        (~@17631 (unwrap~pointer @17631)))
    (~sqlite3_stricmp ~@17632 ~@17631)))
(export sqlite3_stricmp)

;; int sqlite3_strnicmp(const char *, const char *, int);
(define ~sqlite3_strnicmp #f)
(define (sqlite3_strnicmp @17634 @17633 arg-2)
  (unless
    ~sqlite3_strnicmp
    (set! ~sqlite3_strnicmp
      (fh-link-proc
        "sqlite3_strnicmp"
        ffi:int
        (list '* '* ffi:int))))
  (let ((~@17634 (unwrap~pointer @17634))
        (~@17633 (unwrap~pointer @17633))
        (~arg-2 (unwrap~fixed arg-2)))
    (~sqlite3_strnicmp ~@17634 ~@17633 ~arg-2)))
(export sqlite3_strnicmp)

;; int sqlite3_strglob(const char *zGlob, const char *zStr);
(define ~sqlite3_strglob #f)
(define (sqlite3_strglob zGlob zStr)
  (unless
    ~sqlite3_strglob
    (set! ~sqlite3_strglob
      (fh-link-proc
        "sqlite3_strglob"
        ffi:int
        (list '* '*))))
  (let ((~zGlob (unwrap~pointer zGlob))
        (~zStr (unwrap~pointer zStr)))
    (~sqlite3_strglob ~zGlob ~zStr)))
(export sqlite3_strglob)

;; int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc)
;;     ;
(define ~sqlite3_strlike #f)
(define (sqlite3_strlike zGlob zStr cEsc)
  (unless
    ~sqlite3_strlike
    (set! ~sqlite3_strlike
      (fh-link-proc
        "sqlite3_strlike"
        ffi:int
        (list '* '* ffi:unsigned-int))))
  (let ((~zGlob (unwrap~pointer zGlob))
        (~zStr (unwrap~pointer zStr))
        (~cEsc (unwrap~fixed cEsc)))
    (~sqlite3_strlike ~zGlob ~zStr ~cEsc)))
(export sqlite3_strlike)

;; void sqlite3_log(int iErrCode, const char *zFormat, ...);
;; ... failed.

;; void *sqlite3_wal_hook(sqlite3 *, int (*)(void *, sqlite3 *, const char *, 
;;     int), void *);
(define ~sqlite3_wal_hook #f)
(define (sqlite3_wal_hook @17637 @17636 @17635)
  (unless
    ~sqlite3_wal_hook
    (set! ~sqlite3_wal_hook
      (fh-link-proc
        "sqlite3_wal_hook"
        '*
        (list '* '* '*))))
  (let ((~@17637 (unwrap-sqlite3* @17637))
        (~@17636
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* '* '* ffi:int))
           @17636))
        (~@17635 (unwrap~pointer @17635)))
    (~sqlite3_wal_hook ~@17637 ~@17636 ~@17635)))
(export sqlite3_wal_hook)

;; int sqlite3_wal_autocheckpoint(sqlite3 *db, int N);
(define ~sqlite3_wal_autocheckpoint #f)
(define (sqlite3_wal_autocheckpoint db N)
  (unless
    ~sqlite3_wal_autocheckpoint
    (set! ~sqlite3_wal_autocheckpoint
      (fh-link-proc
        "sqlite3_wal_autocheckpoint"
        ffi:int
        (list '* ffi:int))))
  (let ((~db (unwrap-sqlite3* db))
        (~N (unwrap~fixed N)))
    (~sqlite3_wal_autocheckpoint ~db ~N)))
(export sqlite3_wal_autocheckpoint)

;; int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb);
(define ~sqlite3_wal_checkpoint #f)
(define (sqlite3_wal_checkpoint db zDb)
  (unless
    ~sqlite3_wal_checkpoint
    (set! ~sqlite3_wal_checkpoint
      (fh-link-proc
        "sqlite3_wal_checkpoint"
        ffi:int
        (list '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zDb (unwrap~pointer zDb)))
    (~sqlite3_wal_checkpoint ~db ~zDb)))
(export sqlite3_wal_checkpoint)

;; int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *
;;     pnLog, int *pnCkpt);
(define ~sqlite3_wal_checkpoint_v2 #f)
(define (sqlite3_wal_checkpoint_v2
         db
         zDb
         eMode
         pnLog
         pnCkpt)
  (unless
    ~sqlite3_wal_checkpoint_v2
    (set! ~sqlite3_wal_checkpoint_v2
      (fh-link-proc
        "sqlite3_wal_checkpoint_v2"
        ffi:int
        (list '* '* ffi:int '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zDb (unwrap~pointer zDb))
        (~eMode (unwrap~fixed eMode))
        (~pnLog (unwrap~pointer pnLog))
        (~pnCkpt (unwrap~pointer pnCkpt)))
    (~sqlite3_wal_checkpoint_v2
      ~db
      ~zDb
      ~eMode
      ~pnLog
      ~pnCkpt)))
(export sqlite3_wal_checkpoint_v2)

;; int sqlite3_vtab_config(sqlite3 *, int op, ...);
;; ... failed.

;; int sqlite3_vtab_on_conflict(sqlite3 *);
(define ~sqlite3_vtab_on_conflict #f)
(define (sqlite3_vtab_on_conflict @17638)
  (unless
    ~sqlite3_vtab_on_conflict
    (set! ~sqlite3_vtab_on_conflict
      (fh-link-proc
        "sqlite3_vtab_on_conflict"
        ffi:int
        (list '*))))
  (let ((~@17638 (unwrap-sqlite3* @17638)))
    (~sqlite3_vtab_on_conflict ~@17638)))
(export sqlite3_vtab_on_conflict)

;; int sqlite3_stmt_scanstatus(sqlite3_stmt *pStmt, int idx, int iScanStatusOp
;;     , void *pOut);
(define ~sqlite3_stmt_scanstatus #f)
(define (sqlite3_stmt_scanstatus
         pStmt
         idx
         iScanStatusOp
         pOut)
  (unless
    ~sqlite3_stmt_scanstatus
    (set! ~sqlite3_stmt_scanstatus
      (fh-link-proc
        "sqlite3_stmt_scanstatus"
        ffi:int
        (list '* ffi:int ffi:int '*))))
  (let ((~pStmt (unwrap-sqlite3_stmt* pStmt))
        (~idx (unwrap~fixed idx))
        (~iScanStatusOp (unwrap~fixed iScanStatusOp))
        (~pOut (unwrap~pointer pOut)))
    (~sqlite3_stmt_scanstatus
      ~pStmt
      ~idx
      ~iScanStatusOp
      ~pOut)))
(export sqlite3_stmt_scanstatus)

;; void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *);
(define ~sqlite3_stmt_scanstatus_reset #f)
(define (sqlite3_stmt_scanstatus_reset @17639)
  (unless
    ~sqlite3_stmt_scanstatus_reset
    (set! ~sqlite3_stmt_scanstatus_reset
      (fh-link-proc
        "sqlite3_stmt_scanstatus_reset"
        ffi:void
        (list '*))))
  (let ((~@17639 (unwrap-sqlite3_stmt* @17639)))
    (~sqlite3_stmt_scanstatus_reset ~@17639)))
(export sqlite3_stmt_scanstatus_reset)

;; int sqlite3_db_cacheflush(sqlite3 *);
(define ~sqlite3_db_cacheflush #f)
(define (sqlite3_db_cacheflush @17640)
  (unless
    ~sqlite3_db_cacheflush
    (set! ~sqlite3_db_cacheflush
      (fh-link-proc
        "sqlite3_db_cacheflush"
        ffi:int
        (list '*))))
  (let ((~@17640 (unwrap-sqlite3* @17640)))
    (~sqlite3_db_cacheflush ~@17640)))
(export sqlite3_db_cacheflush)

;; int sqlite3_system_errno(sqlite3 *);
(define ~sqlite3_system_errno #f)
(define (sqlite3_system_errno @17641)
  (unless
    ~sqlite3_system_errno
    (set! ~sqlite3_system_errno
      (fh-link-proc
        "sqlite3_system_errno"
        ffi:int
        (list '*))))
  (let ((~@17641 (unwrap-sqlite3* @17641)))
    (~sqlite3_system_errno ~@17641)))
(export sqlite3_system_errno)

;; typedef struct sqlite3_snapshot {
;;   unsigned char hidden[48];
;; } sqlite3_snapshot;
(define sqlite3_snapshot-desc
  (bs:struct
    (list `(hidden ,(bs:vector 48 uint8)))))
(export sqlite3_snapshot-desc)
(define-fh-compound-type/p sqlite3_snapshot sqlite3_snapshot-desc)
(define struct-sqlite3_snapshot sqlite3_snapshot)

;; int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot 
;;     **ppSnapshot);
(define ~sqlite3_snapshot_get #f)
(define (sqlite3_snapshot_get db zSchema ppSnapshot)
  (unless
    ~sqlite3_snapshot_get
    (set! ~sqlite3_snapshot_get
      (fh-link-proc
        "sqlite3_snapshot_get"
        ffi:int
        (list '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zSchema (unwrap~pointer zSchema))
        (~ppSnapshot (unwrap~pointer ppSnapshot)))
    (~sqlite3_snapshot_get ~db ~zSchema ~ppSnapshot)))
(export sqlite3_snapshot_get)

;; int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot
;;      *pSnapshot);
(define ~sqlite3_snapshot_open #f)
(define (sqlite3_snapshot_open db zSchema pSnapshot)
  (unless
    ~sqlite3_snapshot_open
    (set! ~sqlite3_snapshot_open
      (fh-link-proc
        "sqlite3_snapshot_open"
        ffi:int
        (list '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zSchema (unwrap~pointer zSchema))
        (~pSnapshot (unwrap-sqlite3_snapshot* pSnapshot)))
    (~sqlite3_snapshot_open ~db ~zSchema ~pSnapshot)))
(export sqlite3_snapshot_open)

;; void sqlite3_snapshot_free(sqlite3_snapshot *);
(define ~sqlite3_snapshot_free #f)
(define (sqlite3_snapshot_free @17642)
  (unless
    ~sqlite3_snapshot_free
    (set! ~sqlite3_snapshot_free
      (fh-link-proc
        "sqlite3_snapshot_free"
        ffi:void
        (list '*))))
  (let ((~@17642 (unwrap-sqlite3_snapshot* @17642)))
    (~sqlite3_snapshot_free ~@17642)))
(export sqlite3_snapshot_free)

;; int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2);
(define ~sqlite3_snapshot_cmp #f)
(define (sqlite3_snapshot_cmp p1 p2)
  (unless
    ~sqlite3_snapshot_cmp
    (set! ~sqlite3_snapshot_cmp
      (fh-link-proc
        "sqlite3_snapshot_cmp"
        ffi:int
        (list '* '*))))
  (let ((~p1 (unwrap-sqlite3_snapshot* p1))
        (~p2 (unwrap-sqlite3_snapshot* p2)))
    (~sqlite3_snapshot_cmp ~p1 ~p2)))
(export sqlite3_snapshot_cmp)

;; int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb);
(define ~sqlite3_snapshot_recover #f)
(define (sqlite3_snapshot_recover db zDb)
  (unless
    ~sqlite3_snapshot_recover
    (set! ~sqlite3_snapshot_recover
      (fh-link-proc
        "sqlite3_snapshot_recover"
        ffi:int
        (list '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zDb (unwrap~pointer zDb)))
    (~sqlite3_snapshot_recover ~db ~zDb)))
(export sqlite3_snapshot_recover)

;; typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;
(define sqlite3_rtree_geometry-desc void)
(export sqlite3_rtree_geometry-desc)
(define sqlite3_rtree_geometry*-desc (bs:pointer (delay sqlite3_rtree_geometry-desc)))
(export sqlite3_rtree_geometry*-desc)
(define-fh-pointer-type sqlite3_rtree_geometry* sqlite3_rtree_geometry*-desc)

;; typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;
(define sqlite3_rtree_query_info-desc void)
(export sqlite3_rtree_query_info-desc)
(define sqlite3_rtree_query_info*-desc (bs:pointer (delay sqlite3_rtree_query_info-desc)))
(export sqlite3_rtree_query_info*-desc)
(define-fh-pointer-type sqlite3_rtree_query_info* sqlite3_rtree_query_info*-desc)

;; typedef double sqlite3_rtree_dbl;
(define sqlite3_rtree_dbl-desc double)
(define unwrap-sqlite3_rtree_dbl unwrap~float)
(define wrap-sqlite3_rtree_dbl identity)
(export sqlite3_rtree_dbl-desc unwrap-sqlite3_rtree_dbl wrap-sqlite3_rtree_dbl)

;; int sqlite3_rtree_geometry_callback(sqlite3 *db, const char *zGeom, int (*
;;     xGeom)(sqlite3_rtree_geometry *, int, sqlite3_rtree_dbl *, int *), void 
;;     *pContext);
(define ~sqlite3_rtree_geometry_callback #f)
(define (sqlite3_rtree_geometry_callback
         db
         zGeom
         xGeom
         pContext)
  (unless
    ~sqlite3_rtree_geometry_callback
    (set! ~sqlite3_rtree_geometry_callback
      (fh-link-proc
        "sqlite3_rtree_geometry_callback"
        ffi:int
        (list '* '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zGeom (unwrap~pointer zGeom))
        (~xGeom
          ((make-ftn-arg-unwrapper
             ffi:int
             (list '* ffi:int '* '*))
           xGeom))
        (~pContext (unwrap~pointer pContext)))
    (~sqlite3_rtree_geometry_callback
      ~db
      ~zGeom
      ~xGeom
      ~pContext)))
(export sqlite3_rtree_geometry_callback)

;; struct sqlite3_rtree_geometry {
;;   void *pContext; /* Copy of pContext passed to s_r_g_c() */
;;   int nParam; /* Size of array aParam[] */
;;   sqlite3_rtree_dbl *aParam; /* Parameters passed to SQL geom function */
;;   void *pUser; /* Callback implementation user data */
;;   void (*xDelUser)(void *); /* Called by SQLite to clean up pUser */
;; };
(define struct-sqlite3_rtree_geometry-desc
  (bs:struct
    (list `(pContext ,(bs:pointer void))
          `(nParam ,int)
          `(aParam
             ,(bs:pointer (delay sqlite3_rtree_dbl*-desc)))
          `(pUser ,(bs:pointer void))
          `(xDelUser ,(bs:pointer void)))))
(export struct-sqlite3_rtree_geometry-desc)
(define-fh-compound-type/p struct-sqlite3_rtree_geometry struct-sqlite3_rtree_geometry-desc)
(set! sqlite3_rtree_geometry-desc struct-sqlite3_rtree_geometry-desc)
(define-fh-compound-type sqlite3_rtree_geometry sqlite3_rtree_geometry-desc)

;; int sqlite3_rtree_query_callback(sqlite3 *db, const char *zQueryFunc, int (*
;;     xQueryFunc)(sqlite3_rtree_query_info *), void *pContext, void (*
;;     xDestructor)(void *));
(define ~sqlite3_rtree_query_callback #f)
(define (sqlite3_rtree_query_callback
         db
         zQueryFunc
         xQueryFunc
         pContext
         xDestructor)
  (unless
    ~sqlite3_rtree_query_callback
    (set! ~sqlite3_rtree_query_callback
      (fh-link-proc
        "sqlite3_rtree_query_callback"
        ffi:int
        (list '* '* '* '* '*))))
  (let ((~db (unwrap-sqlite3* db))
        (~zQueryFunc (unwrap~pointer zQueryFunc))
        (~xQueryFunc
          ((make-ftn-arg-unwrapper ffi:int (list '*))
           xQueryFunc))
        (~pContext (unwrap~pointer pContext))
        (~xDestructor
          ((make-ftn-arg-unwrapper ffi:void (list '*))
           xDestructor)))
    (~sqlite3_rtree_query_callback
      ~db
      ~zQueryFunc
      ~xQueryFunc
      ~pContext
      ~xDestructor)))
(export sqlite3_rtree_query_callback)

;; struct sqlite3_rtree_query_info {
;;   void *pContext; /* pContext from when function registered */
;;   int nParam; /* Number of function parameters */
;;   sqlite3_rtree_dbl *aParam; /* value of function parameters */
;;   void *pUser; /* callback can use this, if desired */
;;   void (*xDelUser)(void *); /* function to free pUser */
;;   sqlite3_rtree_dbl *aCoord; /* Coordinates of node or entry to check */
;;   unsigned int *anQueue; /* Number of pending entries in the queue */
;;   int nCoord; /* Number of coordinates */
;;   int iLevel; /* Level of current node or entry */
;;   int mxLevel; /* The largest iLevel value in the tree */
;;   sqlite3_int64 iRowid; /* Rowid for current entry */
;;   sqlite3_rtree_dbl rParentScore; /* Score of parent node */
;;   int eParentWithin; /* Visibility of parent node */
;;   int eWithin; /* OUT: Visiblity */
;;   sqlite3_rtree_dbl rScore; /* OUT: Write the score here */
;;   /* The following fields are only available in 3.8.11 and later */
;;   sqlite3_value **apSqlParam; /* Original SQL values of parameters */
;; };
(define struct-sqlite3_rtree_query_info-desc
  (bs:struct
    (list `(pContext ,(bs:pointer void))
          `(nParam ,int)
          `(aParam
             ,(bs:pointer (delay sqlite3_rtree_dbl*-desc)))
          `(pUser ,(bs:pointer void))
          `(xDelUser ,(bs:pointer void))
          `(aCoord
             ,(bs:pointer (delay sqlite3_rtree_dbl*-desc)))
          `(anQueue ,(bs:pointer unsigned-int))
          `(nCoord ,int)
          `(iLevel ,int)
          `(mxLevel ,int)
          `(iRowid ,long)
          `(rParentScore ,sqlite3_rtree_dbl-desc)
          `(eParentWithin ,int)
          `(eWithin ,int)
          `(rScore ,sqlite3_rtree_dbl-desc)
          `(apSqlParam
             ,(bs:pointer
                (bs:pointer (delay sqlite3_value*-desc)))))))
(export struct-sqlite3_rtree_query_info-desc)
(define-fh-compound-type/p struct-sqlite3_rtree_query_info struct-sqlite3_rtree_query_info-desc)
(set! sqlite3_rtree_query_info-desc struct-sqlite3_rtree_query_info-desc)
(define-fh-compound-type sqlite3_rtree_query_info sqlite3_rtree_query_info-desc)

;; typedef struct Fts5ExtensionApi Fts5ExtensionApi;
(define Fts5ExtensionApi-desc void)
(export Fts5ExtensionApi-desc)
(define Fts5ExtensionApi*-desc (bs:pointer (delay Fts5ExtensionApi-desc)))
(export Fts5ExtensionApi*-desc)
(define-fh-pointer-type Fts5ExtensionApi* Fts5ExtensionApi*-desc)

;; typedef struct Fts5Context Fts5Context;
(define Fts5Context-desc void)
(export Fts5Context-desc)
(define Fts5Context*-desc (bs:pointer Fts5Context-desc))
(export Fts5Context*-desc)
(define-fh-pointer-type Fts5Context* Fts5Context*-desc)

;; typedef struct Fts5PhraseIter Fts5PhraseIter;
(define Fts5PhraseIter-desc void)
(export Fts5PhraseIter-desc)
(define Fts5PhraseIter*-desc (bs:pointer (delay Fts5PhraseIter-desc)))
(export Fts5PhraseIter*-desc)
(define-fh-pointer-type Fts5PhraseIter* Fts5PhraseIter*-desc)

;; typedef void (*fts5_extension_function)(const Fts5ExtensionApi *pApi, 
;;     Fts5Context *pFts, sqlite3_context *pCtx, int nVal, sqlite3_value **
;;     apVal);
(define-fh-function/p fts5_extension_function
  ffi:void (list (quote *) (quote *) (quote *) ffi:int (quote *)))

;; struct Fts5PhraseIter {
;;   const unsigned char *a;
;;   const unsigned char *b;
;; };
(define struct-Fts5PhraseIter-desc
  (bs:struct
    (list `(a ,(bs:pointer unsigned-int))
          `(b ,(bs:pointer unsigned-int)))))
(export struct-Fts5PhraseIter-desc)
(define-fh-compound-type/p struct-Fts5PhraseIter struct-Fts5PhraseIter-desc)
(set! Fts5PhraseIter-desc struct-Fts5PhraseIter-desc)
(define-fh-compound-type Fts5PhraseIter Fts5PhraseIter-desc)

;; struct Fts5ExtensionApi {
;;   int iVersion; /* Currently always set to 3 */
;;   void *(*xUserData)(Fts5Context *);
;;   int (*xColumnCount)(Fts5Context *);
;;   int (*xRowCount)(Fts5Context *, sqlite3_int64 *pnRow);
;;   int (*xColumnTotalSize)(Fts5Context *, int iCol, sqlite3_int64 *pnToken);
;;   int (*xTokenize)(Fts5Context *, const char *pText, int nText, void *pCtx, 
;;       int (*xToken)(void *, int, const char *, int, int, int));
;;   int (*xPhraseCount)(Fts5Context *);
;;   int (*xPhraseSize)(Fts5Context *, int iPhrase);
;;   int (*xInstCount)(Fts5Context *, int *pnInst);
;;   int (*xInst)(Fts5Context *, int iIdx, int *piPhrase, int *piCol, int *
;;       piOff);
;;   sqlite3_int64 (*xRowid)(Fts5Context *);
;;   int (*xColumnText)(Fts5Context *, int iCol, const char **pz, int *pn);
;;   int (*xColumnSize)(Fts5Context *, int iCol, int *pnToken);
;;   int (*xQueryPhrase)(Fts5Context *, int iPhrase, void *pUserData, int (*)(
;;       const Fts5ExtensionApi *, Fts5Context *, void *));
;;   int (*xSetAuxdata)(Fts5Context *, void *pAux, void (*xDelete)(void *));
;;   void *(*xGetAuxdata)(Fts5Context *, int bClear);
;;   int (*xPhraseFirst)(Fts5Context *, int iPhrase, Fts5PhraseIter *, int *, 
;;       int *);
;;   void (*xPhraseNext)(Fts5Context *, Fts5PhraseIter *, int *piCol, int *
;;       piOff);
;;   int (*xPhraseFirstColumn)(Fts5Context *, int iPhrase, Fts5PhraseIter *, 
;;       int *);
;;   void (*xPhraseNextColumn)(Fts5Context *, Fts5PhraseIter *, int *piCol);
;; };
(define struct-Fts5ExtensionApi-desc
  (bs:struct
    (list `(iVersion ,int)
          `(xUserData ,(bs:pointer void))
          `(xColumnCount ,(bs:pointer void))
          `(xRowCount ,(bs:pointer void))
          `(xColumnTotalSize ,(bs:pointer void))
          `(xTokenize ,(bs:pointer void))
          `(xPhraseCount ,(bs:pointer void))
          `(xPhraseSize ,(bs:pointer void))
          `(xInstCount ,(bs:pointer void))
          `(xInst ,(bs:pointer void))
          `(xRowid ,(bs:pointer void))
          `(xColumnText ,(bs:pointer void))
          `(xColumnSize ,(bs:pointer void))
          `(xQueryPhrase ,(bs:pointer void))
          `(xSetAuxdata ,(bs:pointer void))
          `(xGetAuxdata ,(bs:pointer void))
          `(xPhraseFirst ,(bs:pointer void))
          `(xPhraseNext ,(bs:pointer void))
          `(xPhraseFirstColumn ,(bs:pointer void))
          `(xPhraseNextColumn ,(bs:pointer void)))))
(export struct-Fts5ExtensionApi-desc)
(define-fh-compound-type/p struct-Fts5ExtensionApi struct-Fts5ExtensionApi-desc)
(set! Fts5ExtensionApi-desc struct-Fts5ExtensionApi-desc)
(define-fh-compound-type Fts5ExtensionApi Fts5ExtensionApi-desc)

;; typedef struct Fts5Tokenizer Fts5Tokenizer;
(define Fts5Tokenizer-desc void)
(export Fts5Tokenizer-desc)
(define Fts5Tokenizer*-desc (bs:pointer Fts5Tokenizer-desc))
(export Fts5Tokenizer*-desc)
(define-fh-pointer-type Fts5Tokenizer* Fts5Tokenizer*-desc)

;; typedef struct fts5_tokenizer fts5_tokenizer;
(define fts5_tokenizer-desc void)
(export fts5_tokenizer-desc)
(define fts5_tokenizer*-desc (bs:pointer (delay fts5_tokenizer-desc)))
(export fts5_tokenizer*-desc)
(define-fh-pointer-type fts5_tokenizer* fts5_tokenizer*-desc)

;; struct fts5_tokenizer {
;;   int (*xCreate)(void *, const char **azArg, int nArg, Fts5Tokenizer **ppOut
;;       );
;;   void (*xDelete)(Fts5Tokenizer *);
;;   int (*xTokenize)(Fts5Tokenizer *, void *pCtx, int flags, const char *pText
;;       , int nText, int (*xToken)(void *pCtx, int tflags, const char *pToken
;;       , int nToken, int iStart, int iEnd));
;; };
(define struct-fts5_tokenizer-desc
  (bs:struct
    (list `(xCreate ,(bs:pointer void))
          `(xDelete ,(bs:pointer void))
          `(xTokenize ,(bs:pointer void)))))
(export struct-fts5_tokenizer-desc)
(define-fh-compound-type/p struct-fts5_tokenizer struct-fts5_tokenizer-desc)
(set! fts5_tokenizer-desc struct-fts5_tokenizer-desc)
(define-fh-compound-type fts5_tokenizer fts5_tokenizer-desc)

;; typedef struct fts5_api fts5_api;
(define fts5_api-desc void)
(export fts5_api-desc)
(define fts5_api*-desc (bs:pointer (delay fts5_api-desc)))
(export fts5_api*-desc)
(define-fh-pointer-type fts5_api* fts5_api*-desc)

;; struct fts5_api {
;;   int iVersion; /* Currently always set to 2 */
;;   /* Create a new tokenizer */
;;   int (*xCreateTokenizer)(fts5_api *pApi, const char *zName, void *pContext
;;       , fts5_tokenizer *pTokenizer, void (*xDestroy)(void *));
;;   /* Find an existing tokenizer */
;;   int (*xFindTokenizer)(fts5_api *pApi, const char *zName, void **ppContext
;;       , fts5_tokenizer *pTokenizer);
;;   /* Create a new auxiliary function */
;;   int (*xCreateFunction)(fts5_api *pApi, const char *zName, void *pContext, 
;;       fts5_extension_function xFunction, void (*xDestroy)(void *));
;; };
(define struct-fts5_api-desc
  (bs:struct
    (list `(iVersion ,int)
          `(xCreateTokenizer ,(bs:pointer void))
          `(xFindTokenizer ,(bs:pointer void))
          `(xCreateFunction ,(bs:pointer void)))))
(export struct-fts5_api-desc)
(define-fh-compound-type/p struct-fts5_api struct-fts5_api-desc)
(set! fts5_api-desc struct-fts5_api-desc)
(define-fh-compound-type fts5_api fts5_api-desc)

;; access to enum symbols and #define'd constants:
(define ffi-sqlite3-symbol-val
  (let ((sym-tab
          '((SQLITE_VERSION . "3.20.1")
            (SQLITE_VERSION_NUMBER . 3020001)
            (SQLITE_SOURCE_ID
              .
              "2017-08-24 16:21:36 8d3a7ea6c5690d6b7c3767558f4f01b511c55463e3f9e64506801fe9b74dce34")
            (SQLITE_OK . 0)
            (SQLITE_ERROR . 1)
            (SQLITE_INTERNAL . 2)
            (SQLITE_PERM . 3)
            (SQLITE_ABORT . 4)
            (SQLITE_BUSY . 5)
            (SQLITE_LOCKED . 6)
            (SQLITE_NOMEM . 7)
            (SQLITE_READONLY . 8)
            (SQLITE_INTERRUPT . 9)
            (SQLITE_IOERR . 10)
            (SQLITE_CORRUPT . 11)
            (SQLITE_NOTFOUND . 12)
            (SQLITE_FULL . 13)
            (SQLITE_CANTOPEN . 14)
            (SQLITE_PROTOCOL . 15)
            (SQLITE_EMPTY . 16)
            (SQLITE_SCHEMA . 17)
            (SQLITE_TOOBIG . 18)
            (SQLITE_CONSTRAINT . 19)
            (SQLITE_MISMATCH . 20)
            (SQLITE_MISUSE . 21)
            (SQLITE_NOLFS . 22)
            (SQLITE_AUTH . 23)
            (SQLITE_FORMAT . 24)
            (SQLITE_RANGE . 25)
            (SQLITE_NOTADB . 26)
            (SQLITE_NOTICE . 27)
            (SQLITE_WARNING . 28)
            (SQLITE_ROW . 100)
            (SQLITE_DONE . 101)
            (SQLITE_OPEN_READONLY . 1)
            (SQLITE_OPEN_READWRITE . 2)
            (SQLITE_OPEN_CREATE . 4)
            (SQLITE_OPEN_DELETEONCLOSE . 8)
            (SQLITE_OPEN_EXCLUSIVE . 16)
            (SQLITE_OPEN_AUTOPROXY . 32)
            (SQLITE_OPEN_URI . 64)
            (SQLITE_OPEN_MEMORY . 128)
            (SQLITE_OPEN_MAIN_DB . 256)
            (SQLITE_OPEN_TEMP_DB . 512)
            (SQLITE_OPEN_TRANSIENT_DB . 1024)
            (SQLITE_OPEN_MAIN_JOURNAL . 2048)
            (SQLITE_OPEN_TEMP_JOURNAL . 4096)
            (SQLITE_OPEN_SUBJOURNAL . 8192)
            (SQLITE_OPEN_MASTER_JOURNAL . 16384)
            (SQLITE_OPEN_NOMUTEX . 32768)
            (SQLITE_OPEN_FULLMUTEX . 65536)
            (SQLITE_OPEN_SHAREDCACHE . 131072)
            (SQLITE_OPEN_PRIVATECACHE . 262144)
            (SQLITE_OPEN_WAL . 524288)
            (SQLITE_IOCAP_ATOMIC . 1)
            (SQLITE_IOCAP_ATOMIC512 . 2)
            (SQLITE_IOCAP_ATOMIC1K . 4)
            (SQLITE_IOCAP_ATOMIC2K . 8)
            (SQLITE_IOCAP_ATOMIC4K . 16)
            (SQLITE_IOCAP_ATOMIC8K . 32)
            (SQLITE_IOCAP_ATOMIC16K . 64)
            (SQLITE_IOCAP_ATOMIC32K . 128)
            (SQLITE_IOCAP_ATOMIC64K . 256)
            (SQLITE_IOCAP_SAFE_APPEND . 512)
            (SQLITE_IOCAP_SEQUENTIAL . 1024)
            (SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN . 2048)
            (SQLITE_IOCAP_POWERSAFE_OVERWRITE . 4096)
            (SQLITE_IOCAP_IMMUTABLE . 8192)
            (SQLITE_LOCK_NONE . 0)
            (SQLITE_LOCK_SHARED . 1)
            (SQLITE_LOCK_RESERVED . 2)
            (SQLITE_LOCK_PENDING . 3)
            (SQLITE_LOCK_EXCLUSIVE . 4)
            (SQLITE_SYNC_NORMAL . 2)
            (SQLITE_SYNC_FULL . 3)
            (SQLITE_SYNC_DATAONLY . 16)
            (SQLITE_FCNTL_LOCKSTATE . 1)
            (SQLITE_FCNTL_GET_LOCKPROXYFILE . 2)
            (SQLITE_FCNTL_SET_LOCKPROXYFILE . 3)
            (SQLITE_FCNTL_LAST_ERRNO . 4)
            (SQLITE_FCNTL_SIZE_HINT . 5)
            (SQLITE_FCNTL_CHUNK_SIZE . 6)
            (SQLITE_FCNTL_FILE_POINTER . 7)
            (SQLITE_FCNTL_SYNC_OMITTED . 8)
            (SQLITE_FCNTL_WIN32_AV_RETRY . 9)
            (SQLITE_FCNTL_PERSIST_WAL . 10)
            (SQLITE_FCNTL_OVERWRITE . 11)
            (SQLITE_FCNTL_VFSNAME . 12)
            (SQLITE_FCNTL_POWERSAFE_OVERWRITE . 13)
            (SQLITE_FCNTL_PRAGMA . 14)
            (SQLITE_FCNTL_BUSYHANDLER . 15)
            (SQLITE_FCNTL_TEMPFILENAME . 16)
            (SQLITE_FCNTL_MMAP_SIZE . 18)
            (SQLITE_FCNTL_TRACE . 19)
            (SQLITE_FCNTL_HAS_MOVED . 20)
            (SQLITE_FCNTL_SYNC . 21)
            (SQLITE_FCNTL_COMMIT_PHASETWO . 22)
            (SQLITE_FCNTL_WIN32_SET_HANDLE . 23)
            (SQLITE_FCNTL_WAL_BLOCK . 24)
            (SQLITE_FCNTL_ZIPVFS . 25)
            (SQLITE_FCNTL_RBU . 26)
            (SQLITE_FCNTL_VFS_POINTER . 27)
            (SQLITE_FCNTL_JOURNAL_POINTER . 28)
            (SQLITE_FCNTL_WIN32_GET_HANDLE . 29)
            (SQLITE_FCNTL_PDB . 30)
            (SQLITE_GET_LOCKPROXYFILE . 2)
            (SQLITE_SET_LOCKPROXYFILE . 3)
            (SQLITE_LAST_ERRNO . 4)
            (SQLITE_ACCESS_EXISTS . 0)
            (SQLITE_ACCESS_READWRITE . 1)
            (SQLITE_ACCESS_READ . 2)
            (SQLITE_SHM_UNLOCK . 1)
            (SQLITE_SHM_LOCK . 2)
            (SQLITE_SHM_SHARED . 4)
            (SQLITE_SHM_EXCLUSIVE . 8)
            (SQLITE_SHM_NLOCK . 8)
            (SQLITE_CONFIG_SINGLETHREAD . 1)
            (SQLITE_CONFIG_MULTITHREAD . 2)
            (SQLITE_CONFIG_SERIALIZED . 3)
            (SQLITE_CONFIG_MALLOC . 4)
            (SQLITE_CONFIG_GETMALLOC . 5)
            (SQLITE_CONFIG_SCRATCH . 6)
            (SQLITE_CONFIG_PAGECACHE . 7)
            (SQLITE_CONFIG_HEAP . 8)
            (SQLITE_CONFIG_MEMSTATUS . 9)
            (SQLITE_CONFIG_MUTEX . 10)
            (SQLITE_CONFIG_GETMUTEX . 11)
            (SQLITE_CONFIG_LOOKASIDE . 13)
            (SQLITE_CONFIG_PCACHE . 14)
            (SQLITE_CONFIG_GETPCACHE . 15)
            (SQLITE_CONFIG_LOG . 16)
            (SQLITE_CONFIG_URI . 17)
            (SQLITE_CONFIG_PCACHE2 . 18)
            (SQLITE_CONFIG_GETPCACHE2 . 19)
            (SQLITE_CONFIG_COVERING_INDEX_SCAN . 20)
            (SQLITE_CONFIG_SQLLOG . 21)
            (SQLITE_CONFIG_MMAP_SIZE . 22)
            (SQLITE_CONFIG_WIN32_HEAPSIZE . 23)
            (SQLITE_CONFIG_PCACHE_HDRSZ . 24)
            (SQLITE_CONFIG_PMASZ . 25)
            (SQLITE_CONFIG_STMTJRNL_SPILL . 26)
            (SQLITE_DBCONFIG_MAINDBNAME . 1000)
            (SQLITE_DBCONFIG_LOOKASIDE . 1001)
            (SQLITE_DBCONFIG_ENABLE_FKEY . 1002)
            (SQLITE_DBCONFIG_ENABLE_TRIGGER . 1003)
            (SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER . 1004)
            (SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION . 1005)
            (SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE . 1006)
            (SQLITE_DBCONFIG_ENABLE_QPSG . 1007)
            (SQLITE_DENY . 1)
            (SQLITE_IGNORE . 2)
            (SQLITE_CREATE_INDEX . 1)
            (SQLITE_CREATE_TABLE . 2)
            (SQLITE_CREATE_TEMP_INDEX . 3)
            (SQLITE_CREATE_TEMP_TABLE . 4)
            (SQLITE_CREATE_TEMP_TRIGGER . 5)
            (SQLITE_CREATE_TEMP_VIEW . 6)
            (SQLITE_CREATE_TRIGGER . 7)
            (SQLITE_CREATE_VIEW . 8)
            (SQLITE_DELETE . 9)
            (SQLITE_DROP_INDEX . 10)
            (SQLITE_DROP_TABLE . 11)
            (SQLITE_DROP_TEMP_INDEX . 12)
            (SQLITE_DROP_TEMP_TABLE . 13)
            (SQLITE_DROP_TEMP_TRIGGER . 14)
            (SQLITE_DROP_TEMP_VIEW . 15)
            (SQLITE_DROP_TRIGGER . 16)
            (SQLITE_DROP_VIEW . 17)
            (SQLITE_INSERT . 18)
            (SQLITE_PRAGMA . 19)
            (SQLITE_READ . 20)
            (SQLITE_SELECT . 21)
            (SQLITE_TRANSACTION . 22)
            (SQLITE_UPDATE . 23)
            (SQLITE_ATTACH . 24)
            (SQLITE_DETACH . 25)
            (SQLITE_ALTER_TABLE . 26)
            (SQLITE_REINDEX . 27)
            (SQLITE_ANALYZE . 28)
            (SQLITE_CREATE_VTABLE . 29)
            (SQLITE_DROP_VTABLE . 30)
            (SQLITE_FUNCTION . 31)
            (SQLITE_SAVEPOINT . 32)
            (SQLITE_COPY . 0)
            (SQLITE_RECURSIVE . 33)
            (SQLITE_TRACE_STMT . 1)
            (SQLITE_TRACE_PROFILE . 2)
            (SQLITE_TRACE_ROW . 4)
            (SQLITE_TRACE_CLOSE . 8)
            (SQLITE_LIMIT_LENGTH . 0)
            (SQLITE_LIMIT_SQL_LENGTH . 1)
            (SQLITE_LIMIT_COLUMN . 2)
            (SQLITE_LIMIT_EXPR_DEPTH . 3)
            (SQLITE_LIMIT_COMPOUND_SELECT . 4)
            (SQLITE_LIMIT_VDBE_OP . 5)
            (SQLITE_LIMIT_FUNCTION_ARG . 6)
            (SQLITE_LIMIT_ATTACHED . 7)
            (SQLITE_LIMIT_LIKE_PATTERN_LENGTH . 8)
            (SQLITE_LIMIT_VARIABLE_NUMBER . 9)
            (SQLITE_LIMIT_TRIGGER_DEPTH . 10)
            (SQLITE_LIMIT_WORKER_THREADS . 11)
            (SQLITE_PREPARE_PERSISTENT . 1)
            (SQLITE_INTEGER . 1)
            (SQLITE_FLOAT . 2)
            (SQLITE_BLOB . 4)
            (SQLITE_NULL . 5)
            (SQLITE_TEXT . 3)
            (SQLITE3_TEXT . 3)
            (SQLITE_UTF8 . 1)
            (SQLITE_UTF16LE . 2)
            (SQLITE_UTF16BE . 3)
            (SQLITE_UTF16 . 4)
            (SQLITE_ANY . 5)
            (SQLITE_UTF16_ALIGNED . 8)
            (SQLITE_DETERMINISTIC . 2048)
            (SQLITE_INDEX_SCAN_UNIQUE . 1)
            (SQLITE_INDEX_CONSTRAINT_EQ . 2)
            (SQLITE_INDEX_CONSTRAINT_GT . 4)
            (SQLITE_INDEX_CONSTRAINT_LE . 8)
            (SQLITE_INDEX_CONSTRAINT_LT . 16)
            (SQLITE_INDEX_CONSTRAINT_GE . 32)
            (SQLITE_INDEX_CONSTRAINT_MATCH . 64)
            (SQLITE_INDEX_CONSTRAINT_LIKE . 65)
            (SQLITE_INDEX_CONSTRAINT_GLOB . 66)
            (SQLITE_INDEX_CONSTRAINT_REGEXP . 67)
            (SQLITE_MUTEX_FAST . 0)
            (SQLITE_MUTEX_RECURSIVE . 1)
            (SQLITE_MUTEX_STATIC_MASTER . 2)
            (SQLITE_MUTEX_STATIC_MEM . 3)
            (SQLITE_MUTEX_STATIC_MEM2 . 4)
            (SQLITE_MUTEX_STATIC_OPEN . 4)
            (SQLITE_MUTEX_STATIC_PRNG . 5)
            (SQLITE_MUTEX_STATIC_LRU . 6)
            (SQLITE_MUTEX_STATIC_LRU2 . 7)
            (SQLITE_MUTEX_STATIC_PMEM . 7)
            (SQLITE_MUTEX_STATIC_APP1 . 8)
            (SQLITE_MUTEX_STATIC_APP2 . 9)
            (SQLITE_MUTEX_STATIC_APP3 . 10)
            (SQLITE_MUTEX_STATIC_VFS1 . 11)
            (SQLITE_MUTEX_STATIC_VFS2 . 12)
            (SQLITE_MUTEX_STATIC_VFS3 . 13)
            (SQLITE_TESTCTRL_FIRST . 5)
            (SQLITE_TESTCTRL_PRNG_SAVE . 5)
            (SQLITE_TESTCTRL_PRNG_RESTORE . 6)
            (SQLITE_TESTCTRL_PRNG_RESET . 7)
            (SQLITE_TESTCTRL_BITVEC_TEST . 8)
            (SQLITE_TESTCTRL_FAULT_INSTALL . 9)
            (SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS . 10)
            (SQLITE_TESTCTRL_PENDING_BYTE . 11)
            (SQLITE_TESTCTRL_ASSERT . 12)
            (SQLITE_TESTCTRL_ALWAYS . 13)
            (SQLITE_TESTCTRL_RESERVE . 14)
            (SQLITE_TESTCTRL_OPTIMIZATIONS . 15)
            (SQLITE_TESTCTRL_ISKEYWORD . 16)
            (SQLITE_TESTCTRL_SCRATCHMALLOC . 17)
            (SQLITE_TESTCTRL_LOCALTIME_FAULT . 18)
            (SQLITE_TESTCTRL_EXPLAIN_STMT . 19)
            (SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD . 19)
            (SQLITE_TESTCTRL_NEVER_CORRUPT . 20)
            (SQLITE_TESTCTRL_VDBE_COVERAGE . 21)
            (SQLITE_TESTCTRL_BYTEORDER . 22)
            (SQLITE_TESTCTRL_ISINIT . 23)
            (SQLITE_TESTCTRL_SORTER_MMAP . 24)
            (SQLITE_TESTCTRL_IMPOSTER . 25)
            (SQLITE_TESTCTRL_LAST . 25)
            (SQLITE_STATUS_MEMORY_USED . 0)
            (SQLITE_STATUS_PAGECACHE_USED . 1)
            (SQLITE_STATUS_PAGECACHE_OVERFLOW . 2)
            (SQLITE_STATUS_SCRATCH_USED . 3)
            (SQLITE_STATUS_SCRATCH_OVERFLOW . 4)
            (SQLITE_STATUS_MALLOC_SIZE . 5)
            (SQLITE_STATUS_PARSER_STACK . 6)
            (SQLITE_STATUS_PAGECACHE_SIZE . 7)
            (SQLITE_STATUS_SCRATCH_SIZE . 8)
            (SQLITE_STATUS_MALLOC_COUNT . 9)
            (SQLITE_DBSTATUS_LOOKASIDE_USED . 0)
            (SQLITE_DBSTATUS_CACHE_USED . 1)
            (SQLITE_DBSTATUS_SCHEMA_USED . 2)
            (SQLITE_DBSTATUS_STMT_USED . 3)
            (SQLITE_DBSTATUS_LOOKASIDE_HIT . 4)
            (SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE . 5)
            (SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL . 6)
            (SQLITE_DBSTATUS_CACHE_HIT . 7)
            (SQLITE_DBSTATUS_CACHE_MISS . 8)
            (SQLITE_DBSTATUS_CACHE_WRITE . 9)
            (SQLITE_DBSTATUS_DEFERRED_FKS . 10)
            (SQLITE_DBSTATUS_CACHE_USED_SHARED . 11)
            (SQLITE_DBSTATUS_MAX . 11)
            (SQLITE_STMTSTATUS_FULLSCAN_STEP . 1)
            (SQLITE_STMTSTATUS_SORT . 2)
            (SQLITE_STMTSTATUS_AUTOINDEX . 3)
            (SQLITE_STMTSTATUS_VM_STEP . 4)
            (SQLITE_STMTSTATUS_REPREPARE . 5)
            (SQLITE_STMTSTATUS_RUN . 6)
            (SQLITE_STMTSTATUS_MEMUSED . 99)
            (SQLITE_CHECKPOINT_PASSIVE . 0)
            (SQLITE_CHECKPOINT_FULL . 1)
            (SQLITE_CHECKPOINT_RESTART . 2)
            (SQLITE_CHECKPOINT_TRUNCATE . 3)
            (SQLITE_VTAB_CONSTRAINT_SUPPORT . 1)
            (SQLITE_ROLLBACK . 1)
            (SQLITE_FAIL . 3)
            (SQLITE_REPLACE . 5)
            (SQLITE_SCANSTAT_NLOOP . 0)
            (SQLITE_SCANSTAT_NVISIT . 1)
            (SQLITE_SCANSTAT_EST . 2)
            (SQLITE_SCANSTAT_NAME . 3)
            (SQLITE_SCANSTAT_EXPLAIN . 4)
            (SQLITE_SCANSTAT_SELECTID . 5)
            (NOT_WITHIN . 0)
            (PARTLY_WITHIN . 1)
            (FULLY_WITHIN . 2)
            (FTS5_TOKENIZE_QUERY . 1)
            (FTS5_TOKENIZE_PREFIX . 2)
            (FTS5_TOKENIZE_DOCUMENT . 4)
            (FTS5_TOKENIZE_AUX . 8)
            (FTS5_TOKEN_COLOCATED . 1))))
    (lambda (k) (assq-ref sym-tab k))))
(export ffi-sqlite3-symbol-val)

(define (unwrap-enum obj)
  (cond ((number? obj) obj)
        ((symbol? obj) (ffi-sqlite3-symbol-val obj))
        ((fh-object? obj) (struct-ref obj 0))
        (else (error "type mismatch"))))

(define ffi-sqlite3-types
  '("sqlite3" "sqlite3_file" (struct . "sqlite3_file") "sqlite3_io_methods" 
    (struct . "sqlite3_io_methods") "sqlite3_mutex" "sqlite3_api_routines" 
    "sqlite3_vfs" (struct . "sqlite3_vfs") "sqlite3_mem_methods" (struct . 
    "sqlite3_mem_methods") "sqlite3_stmt" "sqlite3_value" "sqlite3_context" 
    "sqlite3_vtab" "sqlite3_index_info" "sqlite3_vtab_cursor" "sqlite3_module"
    (struct . "sqlite3_module") (struct . "sqlite3_index_info") (struct . 
    "sqlite3_vtab") (struct . "sqlite3_vtab_cursor") "sqlite3_blob" 
    "sqlite3_mutex_methods" (struct . "sqlite3_mutex_methods") 
    "sqlite3_pcache" "sqlite3_pcache_page" (struct . "sqlite3_pcache_page") 
    "sqlite3_pcache_methods2" (struct . "sqlite3_pcache_methods2") 
    "sqlite3_pcache_methods" (struct . "sqlite3_pcache_methods") 
    "sqlite3_backup" (struct . "sqlite3_snapshot") "sqlite3_snapshot" 
    "sqlite3_rtree_geometry" "sqlite3_rtree_query_info" "sqlite3_rtree_dbl" (
    struct . "sqlite3_rtree_geometry") (struct . "sqlite3_rtree_query_info") 
    "Fts5ExtensionApi" "Fts5Context" "Fts5PhraseIter" (struct . 
    "Fts5PhraseIter") (struct . "Fts5ExtensionApi") "Fts5Tokenizer" 
    "fts5_tokenizer" (struct . "fts5_tokenizer") "fts5_api" (struct . 
    "fts5_api")))
;;(export ffi-sqlite3types)

(define-fh-pointer-type
  sqlite3_int64*
  (bs:pointer sqlite_int64-desc))

(define-fh-pointer-type
  sqlite3_rtree_dbl
  (bs:pointer sqlite3_tree_dbl))

;; --- last line ---
