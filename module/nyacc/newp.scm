(define (foo)
  (let ((stxl (vector-ref pat-v (car state))))
    (if (eqv? def (caar stxl))
	(let* ((stx (cdar stxl)) (gx (reduce-pr stx)) (gl (vector-ref len-v gx))
	       ($$ (apply (vector-ref xact-v gx) stack)))
	  (iter (list-tail state gl) (list-tail stack gl)
		(cons (vector-ref rto-v gx) $$) lval))
	(let* ((tval (car (or nval lval)))
	       (sval (cdr (or nval lval)))
	       (stx (or (assq-ref stxl tval) (assq-ref stxl def) parse-error)))
	  (cond
	   ((error? stx)
	    ...)
	   ((shift? stx)
	    ...)
	   ((reduce? stx)
	    ...)
	   (else
	    (car stack)))))))
