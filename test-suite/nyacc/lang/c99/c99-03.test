;; nyacc/lang/c99/c99-03.test		-*- scheme -*-
;;
;; Copyright (C) 2017 Matthew R. Wette
;; 
;; Copying and distribution of this file, with or without modification,
;; are permitted in any medium without royalty provided the copyright
;; notice and this notice are preserved.  This file is offered as-is,
;; without any warranty.

(add-to-load-path (string-append (getcwd) "/../../../../module/"))
(add-to-load-path (string-append (getcwd) "/../../../../test-suite/"))

(define-module (c99-03)
  #:use-module (nyacc lang c99 parser)
  #:use-module (nyacc lang c99 xparser)
  #:use-module (test-suite lib))

(define incs '("exam.d"))

;; parser test
(with-test-prefix "nyacc/c99-03"

  ;; Get a simple statement to parse.
  (pass-if "include in place"
    (equal?
     (with-input-from-file "exam.d/ex07.c"
       (lambda () (parse-c99 #:inc-dirs incs #:mode 'code)))
'(trans-unit
  (fctn-defn
    (decl-spec-list (type-spec (fixed-type "int")))
    (ftn-declr (ident "foo") (param-list))
    (compd-stmt
      (block-item-list
        (decl (decl-spec-list (type-spec (fixed-type "int")))
              (init-declr-list
                (init-declr
                  (ident "r")
                  (initzer (p-expr (fixed "1"))))))
        (expr-stmt
          (assn-expr
            (p-expr (ident "r"))
            (op "=")
            (add (p-expr (ident "r")) (p-expr (fixed "1")))))
        (return (p-expr (ident "r")))))))))
  
  (pass-if "CPP skip space"
    (equal?
     (with-input-from-file "exam.d/ex08.c"
       (lambda () (parse-c99 #:inc-dirs incs #:mode 'code)))
     '(trans-unit
       (fctn-defn
	(decl-spec-list (type-spec (fixed-type "int")))
	(ftn-declr
	 (ident "foo")
	 (param-list
	  (param-decl
	   (decl-spec-list (type-spec (fixed-type "int")))
	   (param-declr (ident "x")))))
	(compd-stmt
	 (block-item-list
	  (if (not (eq (p-expr (ident "x")) (p-expr (fixed "1"))))
	      (expr-stmt
	       (fctn-call (p-expr (ident "abort")) (expr-list))))))))))
  )

;; --- last line ---
